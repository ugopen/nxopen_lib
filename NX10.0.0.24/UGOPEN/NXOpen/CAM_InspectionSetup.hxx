#ifndef NXOpen_CAM_INSPECTIONSETUP_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONSETUP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionSetup.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CAMSetup.hxx>
#include <NXOpen/CAM_CAMObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionSetup;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class InspectionGroup;
    }
    namespace CAM
    {
        class InspectionGroupCollection;
    }
    namespace CAM
    {
        class InspectionOperationCollection;
    }
    namespace CAM
    {
        class InspectionTool;
    }
    namespace CAM
    {
        class NcmctPartMountingBuilder;
    }
    namespace CAM
    {
        class ObjectsUdeSet;
    }
    namespace CAM
    {
        class _InspectionSetupBuilder;
        class InspectionSetupImpl;
        /** Inspection setup  <br> Use the @link Part Part@endlink  class to get or create an inspection setup  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionSetup : public NXOpen::CAM::CAMObject
        {
            private: InspectionSetupImpl * m_inspectionsetup_impl;
            private: friend class  _InspectionSetupBuilder;
            protected: InspectionSetup();
            public: ~InspectionSetup();
            /** Postprocess 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void Postprocess
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const NXString & machineType /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */
            );
            /** Postprocess 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void Postprocess
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const char * machineType /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */
            );
            /** Postprocess 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void PostprocessWithSetting
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const NXString & machineType /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */,
                NXOpen::CAM::CAMSetup::PostprocessSettingsOutputWarning outputWarning /** whether ouput warning file */,
                NXOpen::CAM::CAMSetup::PostprocessSettingsReviewTool reviewTool /** whether active review tool window */
            );
            /** Postprocess 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void PostprocessWithSetting
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const char * machineType /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * outfileName /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits outputUnits /** output file unit */,
                NXOpen::CAM::CAMSetup::PostprocessSettingsOutputWarning outputWarning /** whether ouput warning file */,
                NXOpen::CAM::CAMSetup::PostprocessSettingsReviewTool reviewTool /** whether active review tool window */
            );
            /** Cut objects 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void CutObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeMoved /** array of objects to be moved */
            );
            /** Move objects 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void MoveObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeMoved /** array of objects to be moved */,
                NXOpen::CAM::CAMObject * destinationObject /** the destination object */,
                NXOpen::CAM::CAMSetup::Paste pastePosition /** paste inside or after the destination object */
            );
            /** Paste objects after cut 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void PasteObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeMoved /** array of objects to be pasted */,
                NXOpen::CAM::CAMObject * destinationObject /** the destination object */,
                NXOpen::CAM::CAMSetup::Paste pastePosition /** paste inside or after the destination object */
            );
            /** Buffer objects to the clipboard and prepare for copy later 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void BufferObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeBuffered /** array of objects to be buffered */
            );
            /** Copy objects  @return  array of new objects 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: std::vector<NXOpen::CAM::CAMObject *> CopyObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objectsToBeMoved /** array of objects to be moved */,
                NXOpen::CAM::CAMObject * destinationObject /** the destination object */,
                NXOpen::CAM::CAMSetup::Paste pastePosition /** paste inside or after the destination object */
            );
            /** Generate tool path 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void GenerateToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Set Template status 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTemplateStatus
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects to adjust */,
                bool useAsParent /** object can be used as a template or not */,
                bool createIfParentCreated /** create if parent is created */
            );
            /** Retrieve a tool from library  @return  created the tool library 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionTool * RetrieveTool
            (
                const NXString & libRef /** the library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool* success /** success */ 
            );
            /** Retrieve a tool from library  @return  created the tool library 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            NXOpen::CAM::InspectionTool * RetrieveTool
            (
                const char * libRef /** the library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool* success /** success */ 
            );
            /** Retrieve a tool from library to the target @return  created the tool library 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionTool * RetrieveTool
            (
                const NXString & libRef /** the library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMObject * target /** the target where the tool is mounted */,
                NXOpen::CAM::CAMObject ** nextTarget /** the next target where the tool can be mounted */,
                bool* success /** success */ 
            );
            /** Retrieve a tool from library to the target @return  created the tool library 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAM::InspectionTool * RetrieveTool
            (
                const char * libRef /** the library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMObject * target /** the target where the tool is mounted */,
                NXOpen::CAM::CAMObject ** nextTarget /** the next target where the tool can be mounted */,
                bool* success /** success */ 
            );
            /** Lock Tool Path 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void LockToolPaths
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                bool lock /** lock the tool path if true, else unlock the tool path */
            );
            /** Creates a Part Mounting Builder.
                    Note: Commit a Part Mounting Builder will perform the Part Mounting and no object is returned.  @return  part mounting builder created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::NcmctPartMountingBuilder * CreateNcmctPartMountingBuilder
            (
                const NXString & libRef /** a unique library reference identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a Part Mounting Builder.
                    Note: Commit a Part Mounting Builder will perform the Part Mounting and no object is returned.  @return  part mounting builder created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            NXOpen::CAM::NcmctPartMountingBuilder * CreateNcmctPartMountingBuilder
            (
                const char * libRef /** a unique library reference identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Retrieve a device from library  @return  machine device created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionGroup * RetrieveDevice
            (
                const NXString & libRef /** a unique library reference identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Retrieve a device from library  @return  machine device created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAM::InspectionGroup * RetrieveDevice
            (
                const char * libRef /** a unique library reference identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Resequence selected paths using nearest neighbor order 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ResequencePaths
            (
                const std::vector<NXOpen::CAM::CAMObject *> & paths /** array of paths to resequence */
            );
            /** Resequence tolerances 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ResequenceTols
            (
                const std::vector<NXOpen::CAM::CAMObject *> & tols /** array of tolerances to resequence */
            );
            /** Retrieve toolpath validation messages  @return  array of message strings 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> RetrievePathMessages
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of object tags */
            );
            /** Create ObjectsUdeSet.  @return  created objects ude set 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::ObjectsUdeSet * CreateObjectsUdeSet
            (
                const std::vector<NXOpen::CAM::CAMObject *> & params /** array of operations or groups */,
                NXOpen::CAM::CAMSetup::Ude udeType /** ude type */
            );
            /** Get root of the specified branch.  @return  Root of the specified branch 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionGroup * GetRoot
            (
                NXOpen::CAM::CAMSetup::View branch /** Branch from which to get setup root */
            );
            /** Update feature names in referencing operations. 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void UpdateFeatureNames
            (
                const NXString & originalFeatName /** Original feature name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & newFeatName /** New feature name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Update feature names in referencing operations. 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            void UpdateFeatureNames
            (
                const char * originalFeatName /** Original feature name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * newFeatName /** New feature name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );


            /** Returns the InspectionGroupCollection instance belonging to this setup 
             <br>  Created in NX7.0.0.  <br>  
            */
            public: NXOpen::CAM::InspectionGroupCollection *CmmInspectionGroupCollection();
            /** Returns the InspectionOperationCollection instance belonging to this setup 
             <br>  Created in NX7.0.0.  <br>  
            */
            public: NXOpen::CAM::InspectionOperationCollection *CmmInspectionOperationCollection();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
