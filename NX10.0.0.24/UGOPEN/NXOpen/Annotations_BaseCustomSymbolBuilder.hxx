#ifndef NXOpen_ANNOTATIONS_BASECUSTOMSYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASECUSTOMSYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseCustomSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_BaseCustomSymbolBuilder.hxx>
#include <NXOpen/Annotations_LeaderBuilder.hxx>
#include <NXOpen/Annotations_OriginBuilder.hxx>
#include <NXOpen/Annotations_StyleBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BaseCustomSymbolBuilder;
    }
    namespace Annotations
    {
        class BaseCustomSymbol;
    }
    namespace Annotations
    {
        class LeaderBuilder;
    }
    namespace Annotations
    {
        class MasterSymbolListItemBuilderList;
    }
    namespace Annotations
    {
        class OriginBuilder;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    class Builder;
    class Expression;
    namespace Annotations
    {
        class _BaseCustomSymbolBuilderBuilder;
        class BaseCustomSymbolBuilderImpl;
        /** Represents a base Builder for Drafting and PMI Custom Symbol  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BaseCustomSymbolBuilder : public NXOpen::Builder
        {
            /** Enum for Annotation Preferences This is used by @link NXOpen::Annotations::BaseCustomSymbolBuilder::AnnotationPreferences NXOpen::Annotations::BaseCustomSymbolBuilder::AnnotationPreferences@endlink  
                    and @link NXOpen::Annotations::BaseCustomSymbolBuilder::SetAnnotationPreferences NXOpen::Annotations::BaseCustomSymbolBuilder::SetAnnotationPreferences@endlink  
                    to set the annotation preferences for a symbol*/
            public: enum AnnotationPreferences
            {
                AnnotationPreferencesUseCurrent/** Current preferences */,
                AnnotationPreferencesUseDefinition/** Defined preferences */
            };

            /** Enum for Geometric Preferences This is used by @link NXOpen::Annotations::BaseCustomSymbolBuilder::GeometryPreferences NXOpen::Annotations::BaseCustomSymbolBuilder::GeometryPreferences@endlink  
                    and @link NXOpen::Annotations::BaseCustomSymbolBuilder::SetGeometryPreferences NXOpen::Annotations::BaseCustomSymbolBuilder::SetGeometryPreferences@endlink  
                    to set the geometric preferences for a symbol*/
            public: enum GeometryPreferences
            {
                GeometryPreferencesUseCurrent/** Current preferences */,
                GeometryPreferencesUseDefinition/** Defined preferences */
            };

            private: BaseCustomSymbolBuilderImpl * m_basecustomsymbolbuilder_impl;
            private: friend class  _BaseCustomSymbolBuilderBuilder;
            protected: BaseCustomSymbolBuilder();
            public: ~BaseCustomSymbolBuilder();
            /**Returns  the origin 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OriginBuilder * Origin
            (
            );
            /**Returns  the @link NXOpen::Annotations::LeaderBuilder NXOpen::Annotations::LeaderBuilder@endlink  for the annotation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LeaderBuilder * Leader
            (
            );
            /**Returns  the scale 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Scale
            (
            );
            /**Returns  the angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the horizontal flip 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool HorizontalFlip
            (
            );
            /**Sets  the horizontal flip 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHorizontalFlip
            (
                bool horizontalFlip /** horizontalflip */ 
            );
            /**Returns  the vertical flip 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool VerticalFlip
            (
            );
            /**Sets  the vertical flip 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVerticalFlip
            (
                bool verticalFlip /** verticalflip */ 
            );
            /** Returns the arbitrary note value in an array.  This should be used only after @link Annotations::BaseCustomSymbolBuilder::SelectText Annotations::BaseCustomSymbolBuilder::SelectText@endlink  is used  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetArbitraryNoteTitle
            (
            );
            /** Sets the arbitrary note value.  This should be used only after @link Annotations::BaseCustomSymbolBuilder::SelectText Annotations::BaseCustomSymbolBuilder::SelectText@endlink  is used 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArbitraryNoteTitle
            (
                const std::vector<NXString> & arbitraryNoteTitle /** arbitrarynotetitle */ 
            );
            /**Returns  the controlled note title 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int ControlledNoteTitle
            (
            );
            /**Sets  the controlled note title 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetControlledNoteTitle
            (
                int controlledNoteTitle /** controllednotetitle */ 
            );
            /**Returns  the partially controlled note title 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString PartiallyControlledNoteTitle
            (
            );
            /**Sets  the partially controlled note title 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartiallyControlledNoteTitle
            (
                const NXString & partiallyControlledNoteTitle /** partiallycontrollednotetitle */ 
            );
            /**Sets  the partially controlled note title 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetPartiallyControlledNoteTitle
            (
                const char * partiallyControlledNoteTitle /** partiallycontrollednotetitle */ 
            );
            /**Returns  the integer value of selected text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int Integer
            (
            );
            /**Sets  the integer value of selected text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInteger
            (
                int integer /** integer */ 
            );
            /**Returns  the real value of selected text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Real
            (
            );
            /**Sets  the real value of selected text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetReal
            (
                double real /** real */ 
            );
            /**Returns  the smash symbol 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool SmashSymbol
            (
            );
            /**Sets  the smash symbol 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSmashSymbol
            (
                bool smashSymbol /** smashsymbol */ 
            );
            /**Sets  the get symbol lock property 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLockStatus
            (
                bool lockUpdate /** lockupdate */ 
            );
            /**Returns  the get symbol lock property 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool LockStatus
            (
            );
            /**Returns  the style builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::StyleBuilder * Style
            (
            );
            /**Returns  the enum annot pref. This is used while creating the object 
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseCustomSymbolBuilder::AnnotationPreferences AnnotationPreference
            (
            );
            /**Sets  the enum annot pref. This is used while creating the object 
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAnnotationPreference
            (
                NXOpen::Annotations::BaseCustomSymbolBuilder::AnnotationPreferences enumAnnotPref /** enumannotpref */ 
            );
            /**Returns  the enum geom pref. This is used while creating the object
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseCustomSymbolBuilder::GeometryPreferences GeometryPreference
            (
            );
            /**Sets  the enum geom pref. This is used while creating the object
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetGeometryPreference
            (
                NXOpen::Annotations::BaseCustomSymbolBuilder::GeometryPreferences enumGeomPref /** enumgeompref */ 
            );
            /** Selects custom symbol 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SelectSymbol
            (
                const NXString & name /** Name of symbol */
            );
            /** Selects custom symbol 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SelectSymbol
            (
                const char * name /** Name of symbol */
            );
            /** Selects part custom symbol 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SelectPartSymbol
            (
                const NXString & name /** Name of symbol */,
                const NXString & path /** PartSymbol full Path */
            );
            /** Selects part custom symbol 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SelectPartSymbol
            (
                const char * name /** Name of symbol */,
                const char * path /** PartSymbol full Path */
            );
            /** Selects the node index of custom symbol text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SelectText
            (
                int index /** index of selected text */
            );
            /** Returns the custom symbol  @return  The custom symbol 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::BaseCustomSymbol * GetSymbol
            (
            );
            /**Returns  the texts 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::MasterSymbolListItemBuilderList * Texts
            (
            );
            /**Returns  the master symbol path. This is used while creating the object 
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString MasterSymbolPath
            (
            );
            /**Sets  the master symbol path. This is used while creating the object 
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMasterSymbolPath
            (
                const NXString & masterSymbolPath /** mastersymbolpath */ 
            );
            /**Sets  the master symbol path. This is used while creating the object 
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetMasterSymbolPath
            (
                const char * masterSymbolPath /** mastersymbolpath */ 
            );
            /**Returns  the master symbol Name. This is used while creating the object
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString MasterSymbolName
            (
            );
            /**Sets  the master symbol Name. This is used while creating the object
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMasterSymbolName
            (
                const NXString & masterSymbolName /** mastersymbolname */ 
            );
            /**Sets  the master symbol Name. This is used while creating the object
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetMasterSymbolName
            (
                const char * masterSymbolName /** mastersymbolname */ 
            );
            /**Returns  the is part symbol. This is used while creating the object 
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsPartSymbol
            (
            );
            /**Sets  the is part symbol. This is used while creating the object 
                    and it is non-editable property 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartSymbol
            (
                bool isPartSymbol /** ispartsymbol */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
