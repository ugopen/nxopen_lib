#ifndef NXOpen_DIRECTION_HXX_INCLUDED
#define NXOpen_DIRECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Direction.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ILocation.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IReferenceAxis.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Direction;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class ILocation;
    class INXObject;
    class IReferenceAxis;
    class SmartObject;
    class _DirectionBuilder;
    class DirectionImpl;
    /** Represents a direction.  <br> To create a new instance of this class, use @link NXOpen::DirectionCollection::CreateDirection  NXOpen::DirectionCollection::CreateDirection @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Direction : public NXOpen::SmartObject, public virtual NXOpen::IReferenceAxis, public virtual NXOpen::ILocation
    {
        /** Specifies the direction in relation to a curve. */
        public: enum OnCurveOption
        {
            OnCurveOptionTangent/** Creates direction tangent to curve. */,
            OnCurveOptionNormal/** Creates direction normal to curve. */,
            OnCurveOptionBinormal/** Creates direction binormal to curve (B = T x N). */
        };

        /** Specifies the direction in relation to a face. */
        public: enum OnFaceOption
        {
            OnFaceOptionIsoU/** Creates direction in U parameter direction on face. */,
            OnFaceOptionIsoV/** Creates direction in V parameter direction on face. */,
            OnFaceOptionNormal/** Creates direction normal to face. */,
            OnFaceOptionSection/** Creates direction in a sectional direction to face. */
        };

        private: DirectionImpl * m_direction_impl;
        private: friend class  _DirectionBuilder;
        protected: Direction();
        public: ~Direction();
        /** Reverses the sense of a direction.  If a direction was created using
                @link DirectionCollection::CreateDirection DirectionCollection::CreateDirection@endlink  for an extract
                type, then the sense cannot be reversed.  The method returns true
                if the direction is reversed and false otherwise.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") */
        public: bool ReverseDirection
        (
        );
        /**Returns  the sense of the direction.  If a direction was created using
                @link DirectionCollection::CreateDirection DirectionCollection::CreateDirection@endlink  for an extract
                type, then the sense cannot be reversed.  In this case,
                the method returns @link NXOpen::SenseForward NXOpen::SenseForward@endlink .
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sense Sense
        (
        );
        /**Returns  the unit vector of the direction. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Vector3d Vector
        (
        );
        /**Returns  the origin of the direction. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d Origin
        (
        );
        /**Sets  the origin of the direction. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
        public: void SetOrigin
        (
            const NXOpen::Point3d & origin /** origin */ 
        );
        /**Sets  the unit vector of the direction. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") */
        public: void SetVector
        (
            const NXOpen::Vector3d & vector /** vector */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
