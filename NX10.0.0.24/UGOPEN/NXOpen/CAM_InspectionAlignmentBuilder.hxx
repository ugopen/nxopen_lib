#ifndef NXOpen_CAM_INSPECTIONALIGNMENTBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONALIGNMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionAlignmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionAlignmentBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionAlignmentBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class CoordinateSystem;
    class SelectNXObject;
    namespace CAM
    {
        class _InspectionAlignmentBuilderBuilder;
        class InspectionAlignmentBuilderImpl;
        /** Represents a CMM Inspection Alignment builder  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionAlignmentBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionAlignmentBuilder @endlink  <br> 
         <br>  Created in NX7.5.2.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionAlignmentBuilder : public NXOpen::CAM::OperationBuilder
        {
            /** Alignment Operation Type */
            public: enum AlignTypes
            {
                AlignTypesSetPCStoMCS/** Set the PCS to Machine CS */,
                AlignTypesSetPCStoCSYS/** Set the PCS to a NX Csys */,
                AlignTypesTranslatePCSOrigin/** Translate the PCS */,
                AlignTypesRotatePCS/** Rotate the PCS */,
                AlignTypesDefinePCSfromDatums/** Define the PCS from datums */,
                AlignTypesIterate/** Iterate a set of features for convergence */,
                AlignTypesDefinePCSfromActualDeviations/** Locate PCS from Features */,
                AlignTypesSavePCS/** Save current PCS */,
                AlignTypesRecallPCS/** Recall previously saved PCS */,
                AlignTypesRotateTable/** Rotate table */,
                AlignTypesSetPCStoCADABS/** Set the PCS to Cadabs */
            };

            /** PCS state to save, either Actual or nominal */
            public: enum SaveStates
            {
                SaveStatesActual/** Save Actual PCS */,
                SaveStatesNominal/** Save Nominal PCS */
            };

            /** PCS state to recall, either internal or external */
            public: enum RecallStates
            {
                RecallStatesInternal/** Recall internal PCS */,
                RecallStatesExternal/** Recall external PCS */
            };

            /** Iterate deviation type */
            public: enum IterDevTypes
            {
                IterDevTypesAbsolute/** Absolute deviation */,
                IterDevTypesIncremental/** Incremental deviation */
            };

            /** PCS Translation method in X direction */
            public: enum XtMethods
            {
                XtMethodsDistance/** Translate a distance */,
                XtMethodsDatum/** Translate by Datum */,
                XtMethodsNominalFeature/** Translate by Nominal Feature */,
                XtMethodsMeasuredFeature/** Translate by Measured Feature */
            };

            /** PCS Translation method in Y direction */
            public: enum YtMethods
            {
                YtMethodsDistance/** Translate a distance */,
                YtMethodsDatum/** Translate by Datum */,
                YtMethodsNominalFeature/** Translate by Nominal Feature */,
                YtMethodsMeasuredFeature/** Translate by Measured Feature */
            };

            /** PCS Translation method in Z direction */
            public: enum ZtMethods
            {
                ZtMethodsDistance/** Translate a distance */,
                ZtMethodsDatum/** Translate by Datum */,
                ZtMethodsNominalFeature/** Translate by Nominal Feature */,
                ZtMethodsMeasuredFeature/** Translate by Measured Feature */
            };

            /** PCS Rotation method */
            public: enum RotationMethods
            {
                RotationMethodsAngle/** Rotate by absolute angle */,
                RotationMethodsDatum/** Rotate by Datum */,
                RotationMethodsNominalFeature/** Rotate by Nominal Feature */,
                RotationMethodsMeasuredFeature/** Rotate by Actual Feature */
            };

            /** PCS Axis to Rotate about */
            public: enum RotationAxisOptions
            {
                RotationAxisOptionsXaxis/** Rotate about X axis */,
                RotationAxisOptionsYaxis/** Rotate about Y axis */,
                RotationAxisOptionsZaxis/** Rotate about Z axis */
            };

            /** Direction to rotate about */
            public: enum RotationDirections
            {
                RotationDirectionsPxdir/** Rotate in the positive X direction */,
                RotationDirectionsPydir/** Rotate in the positive Y direction */,
                RotationDirectionsPzdir/** Rotate in the positive Z direction */,
                RotationDirectionsMxdir/** Rotate in the negitive X direction */,
                RotationDirectionsMydir/** Rotate in the negitive Y direction */,
                RotationDirectionsMzdir/** Rotate in the negitive Z direction */
            };

            /** Alignment directions of datum features */
            public: enum AlignmentDirections
            {
                AlignmentDirectionsNone/** No alignment direction specified */,
                AlignmentDirectionsPxdir/** Align feature in the positive X direction */,
                AlignmentDirectionsPydir/** Align feature in the positive Y direction */,
                AlignmentDirectionsPzdir/** Align feature in the positive Z direction */,
                AlignmentDirectionsMxdir/** Align feature in the negitive X direction */,
                AlignmentDirectionsMydir/** Align feature in the negitive Y direction */,
                AlignmentDirectionsMzdir/** Align feature in the negitive Z direction */
            };

            /** Rotary Table methods */
            public: enum RotateTableMethods
            {
                RotateTableMethodsAbsolute/** Rotate table to absolute value */,
                RotateTableMethodsIncremental/** Rotate table by incremental value */,
                RotateTableMethodsNominalFeature/** Rotate table by nominal feature */,
                RotateTableMethodsMeasuredFeature/** Rotate table by measured feature */
            };

            /** Rotary table direction */
            public: enum RotateTableDirections
            {
                RotateTableDirectionsClockwise/** Rotate table in clockwise direction */,
                RotateTableDirectionsCounterClockwise/** Rotate table in counter clockwise direction */,
                RotateTableDirectionsShortest/** Rotate table in shortest direction */
            };

            /** Rotary table PCS Update options */
            public: enum RotateTablePcsUpdateOptions
            {
                RotateTablePcsUpdateOptionsTotal/** Totally update the PCS */,
                RotateTablePcsUpdateOptionsOrigin/** Only update the PCS origin */,
                RotateTablePcsUpdateOptionsNull/** No update of the PCS */
            };

            private: InspectionAlignmentBuilderImpl * m_inspectionalignmentbuilder_impl;
            private: friend class  _InspectionAlignmentBuilderBuilder;
            protected: InspectionAlignmentBuilder();
            public: ~InspectionAlignmentBuilder();
            /**Returns  the alignment type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::AlignTypes AlignType
            (
            );
            /**Sets  the alignment type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignType
            (
                NXOpen::CAM::InspectionAlignmentBuilder::AlignTypes alignType /** aligntype */ 
            );
            /**Returns  the csys pick 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CsysPick
            (
            );
            /**Sets  the csys pick 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysPick
            (
                NXOpen::CoordinateSystem * csysPick /** csyspick */ 
            );
            /**Returns  the save pcs label 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SavePcsLabel
            (
            );
            /**Sets  the save pcs label 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSavePcsLabel
            (
                const NXString & savePcsLabel /** savepcslabel */ 
            );
            /**Sets  the save pcs label 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetSavePcsLabel
            (
                const char * savePcsLabel /** savepcslabel */ 
            );
            /**Returns  the save state 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::SaveStates SaveState
            (
            );
            /**Sets  the save state 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSaveState
            (
                NXOpen::CAM::InspectionAlignmentBuilder::SaveStates saveState /** savestate */ 
            );
            /**Returns  the save device id 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SaveDid
            (
            );
            /**Sets  the save device id 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSaveDid
            (
                const NXString & saveDid /** savedid */ 
            );
            /**Sets  the save device id 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetSaveDid
            (
                const char * saveDid /** savedid */ 
            );
            /**Returns  the recall state 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RecallStates RecallState
            (
            );
            /**Sets  the recall state 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallState
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RecallStates recallState /** recallstate */ 
            );
            /**Returns  the recall internal name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RecallIntName
            (
            );
            /**Sets  the recall internal name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallIntName
            (
                const NXString & recallIntName /** recallintname */ 
            );
            /**Sets  the recall internal name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetRecallIntName
            (
                const char * recallIntName /** recallintname */ 
            );
            /**Returns  the recall external name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RecallExtName
            (
            );
            /**Sets  the recall external name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallExtName
            (
                const NXString & recallExtName /** recallextname */ 
            );
            /**Sets  the recall external name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetRecallExtName
            (
                const char * recallExtName /** recallextname */ 
            );
            /**Returns  the recall csys 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * RecallCsys
            (
            );
            /**Sets  the recall csys 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallCsys
            (
                NXOpen::CoordinateSystem * recallCsys /** recallcsys */ 
            );
            /**Returns  the recall device id 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RecallDid
            (
            );
            /**Sets  the recall device id 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallDid
            (
                const NXString & recallDid /** recalldid */ 
            );
            /**Sets  the recall device id 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetRecallDid
            (
                const char * recallDid /** recalldid */ 
            );
            /**Returns  the locate xtrans 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool LocateXtrans
            (
            );
            /**Sets  the locate xtrans 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateXtrans
            (
                bool locateXtrans /** locatextrans */ 
            );
            /**Returns  the locate ytrans 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool LocateYtrans
            (
            );
            /**Sets  the locate ytrans 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateYtrans
            (
                bool locateYtrans /** locateytrans */ 
            );
            /**Returns  the locate ztrans 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool LocateZtrans
            (
            );
            /**Sets  the locate ztrans 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateZtrans
            (
                bool locateZtrans /** locateztrans */ 
            );
            /**Returns  the locate xrot 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool LocateXrot
            (
            );
            /**Sets  the locate xrot 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateXrot
            (
                bool locateXrot /** locatexrot */ 
            );
            /**Returns  the locate yrot 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool LocateYrot
            (
            );
            /**Sets  the locate yrot 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateYrot
            (
                bool locateYrot /** locateyrot */ 
            );
            /**Returns  the locate zrot 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool LocateZrot
            (
            );
            /**Sets  the locate zrot 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateZrot
            (
                bool locateZrot /** locatezrot */ 
            );
            /**Returns  the locate avail select 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * LocateAvailSelect
            (
            );
            /**Returns  the iter group name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString IterGroupName
            (
            );
            /**Sets  the iter group name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterGroupName
            (
                const NXString & iterGroupName /** itergroupname */ 
            );
            /**Sets  the iter group name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetIterGroupName
            (
                const char * iterGroupName /** itergroupname */ 
            );
            /**Returns  the fail group name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FailGroupName
            (
            );
            /**Sets  the fail group name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFailGroupName
            (
                const NXString & failGroupName /** failgroupname */ 
            );
            /**Sets  the fail group name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetFailGroupName
            (
                const char * failGroupName /** failgroupname */ 
            );
            /**Returns  the iter converge variable 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString IterConvergeVar
            (
            );
            /**Sets  the iter converge variable 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterConvergeVar
            (
                const NXString & iterConvergeVar /** iterconvergevar */ 
            );
            /**Sets  the iter converge variable 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetIterConvergeVar
            (
                const char * iterConvergeVar /** iterconvergevar */ 
            );
            /**Returns  the iter max iterations
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int IterMax
            (
            );
            /**Sets  the iter max iterations
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterMax
            (
                int iterMax /** itermax */ 
            );
            /**Returns  the iter deviation 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double IterDev
            (
            );
            /**Sets  the iter deviation 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterDev
            (
                double iterDev /** iterdev */ 
            );
            /**Returns  the iter deviation type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::IterDevTypes IterDevType
            (
            );
            /**Sets  the iter deviation type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterDevType
            (
                NXOpen::CAM::InspectionAlignmentBuilder::IterDevTypes iterDevType /** iterdevtype */ 
            );
            /**Returns  the iter avail select 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * IterAvailSelect
            (
            );
            /**Returns  the pri dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PriDatLetter
            (
            );
            /**Sets  the pri dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriDatLetter
            (
                const NXString & priDatLetter /** pridatletter */ 
            );
            /**Sets  the pri dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetPriDatLetter
            (
                const char * priDatLetter /** pridatletter */ 
            );
            /**Returns  the pri xorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool PriXorigin
            (
            );
            /**Sets  the pri xorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriXorigin
            (
                bool priXorigin /** prixorigin */ 
            );
            /**Returns  the pri yorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool PriYorigin
            (
            );
            /**Sets  the pri yorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriYorigin
            (
                bool priYorigin /** priyorigin */ 
            );
            /**Returns  the pri zorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool PriZorigin
            (
            );
            /**Sets  the pri zorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriZorigin
            (
                bool priZorigin /** prizorigin */ 
            );
            /**Returns  the pri direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::AlignmentDirections PriDirection
            (
            );
            /**Sets  the pri direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriDirection
            (
                NXOpen::CAM::InspectionAlignmentBuilder::AlignmentDirections priDirection /** pridirection */ 
            );
            /**Returns  the sec dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SecDatLetter
            (
            );
            /**Sets  the sec dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecDatLetter
            (
                const NXString & secDatLetter /** secdatletter */ 
            );
            /**Sets  the sec dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetSecDatLetter
            (
                const char * secDatLetter /** secdatletter */ 
            );
            /**Returns  the sec xorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool SecXorigin
            (
            );
            /**Sets  the sec xorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecXorigin
            (
                bool secXorigin /** secxorigin */ 
            );
            /**Returns  the sec yorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool SecYorigin
            (
            );
            /**Sets  the sec yorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecYorigin
            (
                bool secYorigin /** secyorigin */ 
            );
            /**Returns  the sec zorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool SecZorigin
            (
            );
            /**Sets  the sec zorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecZorigin
            (
                bool secZorigin /** seczorigin */ 
            );
            /**Returns  the sec direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::AlignmentDirections SecDirection
            (
            );
            /**Sets  the sec direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecDirection
            (
                NXOpen::CAM::InspectionAlignmentBuilder::AlignmentDirections secDirection /** secdirection */ 
            );
            /**Returns  the ter dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TerDatLetter
            (
            );
            /**Sets  the ter dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerDatLetter
            (
                const NXString & terDatLetter /** terdatletter */ 
            );
            /**Sets  the ter dat letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetTerDatLetter
            (
                const char * terDatLetter /** terdatletter */ 
            );
            /**Returns  the ter xorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool TerXorigin
            (
            );
            /**Sets  the ter xorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerXorigin
            (
                bool terXorigin /** terxorigin */ 
            );
            /**Returns  the ter yorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool TerYorigin
            (
            );
            /**Sets  the ter yorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerYorigin
            (
                bool terYorigin /** teryorigin */ 
            );
            /**Returns  the ter zorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool TerZorigin
            (
            );
            /**Sets  the ter zorigin 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerZorigin
            (
                bool terZorigin /** terzorigin */ 
            );
            /**Returns  the ter xdirection 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::AlignmentDirections TerDirection
            (
            );
            /**Sets  the ter xdirection 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerDirection
            (
                NXOpen::CAM::InspectionAlignmentBuilder::AlignmentDirections terDirection /** terdirection */ 
            );
            /**Returns  the xt method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::XtMethods XtMethod
            (
            );
            /**Sets  the xt method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXtMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::XtMethods xtMethod /** xtmethod */ 
            );
            /**Returns  the xt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString XtDatumLetter
            (
            );
            /**Sets  the xt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXtDatumLetter
            (
                const NXString & xtDatumLetter /** xtdatumletter */ 
            );
            /**Sets  the xt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetXtDatumLetter
            (
                const char * xtDatumLetter /** xtdatumletter */ 
            );
            /**Returns  the xt distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double XtDistance
            (
            );
            /**Sets  the xt distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXtDistance
            (
                double xtDistance /** xtdistance */ 
            );
            /**Returns  the xt feature select 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * XtFeatureSelect
            (
            );
            /**Returns  the xt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString XtFeature
            (
            );
            /**Sets  the xt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXtFeature
            (
                const NXString & xtFeature /** xtfeature */ 
            );
            /**Sets  the xt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetXtFeature
            (
                const char * xtFeature /** xtfeature */ 
            );
            /**Returns  the yt method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::YtMethods YtMethod
            (
            );
            /**Sets  the yt method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYtMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::YtMethods ytMethod /** ytmethod */ 
            );
            /**Returns  the yt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString YtDatumLetter
            (
            );
            /**Sets  the yt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYtDatumLetter
            (
                const NXString & ytDatumLetter /** ytdatumletter */ 
            );
            /**Sets  the yt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetYtDatumLetter
            (
                const char * ytDatumLetter /** ytdatumletter */ 
            );
            /**Returns  the yt distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double YtDistance
            (
            );
            /**Sets  the yt distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYtDistance
            (
                double ytDistance /** ytdistance */ 
            );
            /**Returns  the yt feature select 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * YtFeatureSelect
            (
            );
            /**Returns  the yt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString YtFeature
            (
            );
            /**Sets  the yt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYtFeature
            (
                const NXString & ytFeature /** ytfeature */ 
            );
            /**Sets  the yt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetYtFeature
            (
                const char * ytFeature /** ytfeature */ 
            );
            /**Returns  the zt method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::ZtMethods ZtMethod
            (
            );
            /**Sets  the zt method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZtMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::ZtMethods ztMethod /** ztmethod */ 
            );
            /**Returns  the zt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ZtDatumLetter
            (
            );
            /**Sets  the zt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZtDatumLetter
            (
                const NXString & ztDatumLetter /** ztdatumletter */ 
            );
            /**Sets  the zt datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetZtDatumLetter
            (
                const char * ztDatumLetter /** ztdatumletter */ 
            );
            /**Returns  the zt distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double ZtDistance
            (
            );
            /**Sets  the zt distance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZtDistance
            (
                double ztDistance /** ztdistance */ 
            );
            /**Returns  the zt feature select 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * ZtFeatureSelect
            (
            );
            /**Returns  the zt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ZtFeature
            (
            );
            /**Sets  the zt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZtFeature
            (
                const NXString & ztFeature /** ztfeature */ 
            );
            /**Sets  the zt feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetZtFeature
            (
                const char * ztFeature /** ztfeature */ 
            );
            /**Returns  the rot method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotationMethods RotationMethod
            (
            );
            /**Sets  the rot method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotationMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotationMethods rotationMethod /** rotationmethod */ 
            );
            /**Returns  the rot axis 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotationAxisOptions RotationAxis
            (
            );
            /**Sets  the rot axis 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotationAxis
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotationAxisOptions rotationAxis /** rotationaxis */ 
            );
            /**Returns  the rot dir 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotationDirections RotationDirection
            (
            );
            /**Sets  the rot dir 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotationDirection
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotationDirections rotationDirection /** rotationdirection */ 
            );
            /**Returns  the rot datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RotationDatumLetter
            (
            );
            /**Sets  the rot datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotationDatumLetter
            (
                const NXString & rotationDatumLetter /** rotationdatumletter */ 
            );
            /**Sets  the rot datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetRotationDatumLetter
            (
                const char * rotationDatumLetter /** rotationdatumletter */ 
            );
            /**Returns  the rot angle 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double RotationAngle
            (
            );
            /**Sets  the rot angle 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotationAngle
            (
                double rotationAngle /** rotationangle */ 
            );
            /**Returns  the rot feature select 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * RotationFeatureSelect
            (
            );
            /**Returns  the rot feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RotationFeature
            (
            );
            /**Sets  the rot feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotationFeature
            (
                const NXString & rotationFeature /** rotationfeature */ 
            );
            /**Sets  the rot feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetRotationFeature
            (
                const char * rotationFeature /** rotationfeature */ 
            );
            /**Returns  the pcs name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PcsName
            (
            );
            /**Sets  the pcs name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPcsName
            (
                const NXString & pcsName /** pcsname */ 
            );
            /**Sets  the pcs name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetPcsName
            (
                const char * pcsName /** pcsname */ 
            );
            /**Returns  the align op name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AlignOpName
            (
            );
            /**Sets  the align op name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignOpName
            (
                const NXString & alignOpName /** alignopname */ 
            );
            /**Sets  the align op name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetAlignOpName
            (
                const char * alignOpName /** alignopname */ 
            );
            /**Returns  the rotate table method 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotateTableMethods RotateTableMethod
            (
            );
            /**Sets  the rotate table method 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotateTableMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotateTableMethods method /** method */ 
            );
            /**Returns  the rotate table direction 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotateTableDirections RotateTableDirection
            (
            );
            /**Sets  the rotate table direction 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotateTableDirection
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotateTableDirections direction /** direction */ 
            );
            /**Returns  the rotate table pcs update 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotateTablePcsUpdateOptions RotateTablePcsUpdateOption
            (
            );
            /**Sets  the rotate table pcs update 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotateTablePcsUpdateOption
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotateTablePcsUpdateOptions pcsUpdate /** pcsupdate */ 
            );
            /**Returns  the angle to rotate table 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: double RotateTableAngle
            (
            );
            /**Sets  the angle to rotate table 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotateTableAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the rotate table angular deviation 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: double RotateTableAngularDeviation
            (
            );
            /**Sets  the rotate table angular deviation 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotateTableAngularDeviation
            (
                double fz /** fz */ 
            );
            /**Returns  the feature selected to position table 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * RotateTableFeatureSelect
            (
            );
            /**Returns  the feature used to position table 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXString RotateTableFeature
            (
            );
            /**Sets  the feature used to position table 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotateTableFeature
            (
                const NXString & rotateTableFeature /** rotatetablefeature */ 
            );
            /**Sets  the feature used to position table 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetRotateTableFeature
            (
                const char * rotateTableFeature /** rotatetablefeature */ 
            );
            /**Returns  the name of rotary table to rotate 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXString RotateTableName
            (
            );
            /**Sets  the name of rotary table to rotate 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotateTableName
            (
                const NXString & tableName /** tablename */ 
            );
            /**Sets  the name of rotary table to rotate 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetRotateTableName
            (
                const char * tableName /** tablename */ 
            );
            /**Returns  the WCS Orient option 
             <br>  Created in NX8.5.3.  <br>  
             <br> License requirements : None */
            public: bool WcsOrientOption
            (
            );
            /**Sets  the WCS Orient option 
             <br>  Created in NX8.5.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetWcsOrientOption
            (
                bool wcsOrientOption /** wcsorientoption */ 
            );
            /**Returns  the component selection 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * ComponentSelection
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
