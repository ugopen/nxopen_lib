#ifndef NXOpen_CAE_SIMSOLUTION_HXX_INCLUDED
#define NXOpen_CAE_SIMSOLUTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimSolution.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CaeDataContainer.hxx>
#include <NXOpen/CAE_SimGroupContainer.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class CaeDataContainer;
    }
    namespace CAE
    {
        class ConflictResolutionBuilder;
    }
    namespace CAE
    {
        class ConstraintResolutionBuilder;
    }
    namespace CAE
    {
        class CorrelAlignmentBuilder;
    }
    namespace CAE
    {
        class PropertyTable;
    }
    namespace CAE
    {
        class ResultProbe;
    }
    namespace CAE
    {
        class ResultProbeBuilder;
    }
    namespace CAE
    {
        class SimBC;
    }
    namespace CAE
    {
        class SimConditionSequence;
    }
    namespace CAE
    {
        class SimConstraint;
    }
    namespace CAE
    {
        class SimGroupContainer;
    }
    namespace CAE
    {
        class SimLbcFolder;
    }
    namespace CAE
    {
        class SimResultReference;
    }
    namespace CAE
    {
        class SimSolutionStep;
    }
    class TaggedObject;
    class Unit;
    namespace CAE
    {
        class _SimSolutionBuilder;
        class SimSolutionImpl;
        /**  @brief  Represents a solution in the .sim files  

         

                For more information, refer to the Solver language documentation 
                in the <a href="../opencae/Solvers.html"> Solver language documentation </a>.

             <br> To create a new instance of this class, use @link NXOpen::CAE::SimSimulation::CreateSolution  NXOpen::CAE::SimSimulation::CreateSolution @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SimSolution : public NXOpen::CAE::SimGroupContainer
        {
            /** Solve Options */
            public: enum SolveOption
            {
                SolveOptionSolve/** write solver input file and launch solve */,
                SolveOptionWriteSolverInputFile/** write solver input file only*/,
                SolveOptionSolveInputFile/** launch solve with existing solver input file*/,
                SolveOptionWriteEditAndSolveInputFile/** write solver input file, allow edit and then launch solve*/,
                SolveOptionEditSolverInputFile/** edit existing solver input file */
            };

            /**  Model Setup Check Options */
            public: enum SetupCheckOption
            {
                SetupCheckOptionDoNotCheck/** do perform any set up checks */,
                SetupCheckOptionCheckAndStopAtFirstError/** perform set up checks but stop at first error */,
                SetupCheckOptionCompleteCheckAndOutputErrors/** perform all set up checks and report all errors */
            };

            /** Step creation options */
            public: enum StepPosition
            {
                StepPositionFirst/** first                     */,
                StepPositionLast/** last                      */,
                StepPositionBefore/** before the specified step */,
                StepPositionAfter/** after the specified step  */
            };

            private: SimSolutionImpl * m_simsolution_impl;
            private: friend class  _SimSolutionBuilder;
            protected: SimSolution();
            public: ~SimSolution();
            /** Rename Solution and optionally rename associated results files 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: void Rename
            (
                const NXString & name /** new solution name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool renameResults /** true if you what associated results files to be renamed as well  */
            );
            /** Rename Solution and optionally rename associated results files 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            void Rename
            (
                const char * name /** new solution name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool renameResults /** true if you what associated results files to be renamed as well  */
            );
            /**Returns  the property table associated with the solution object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PropertyTable * PropertyTable
            (
            );
            /**Returns  the property table associated with the solution's solver options 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PropertyTable * SolverOptionsPropertyTable
            (
            );
            /** Adds a step to the solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddStep
            (
                NXOpen::CAE::SimSolutionStep * step /** solution step to be added */
            );
            /** Creates a step and add to the solution
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                const NXString & stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a step and add to the solution
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                const char * stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a step, adds it to the solution and optionally makes it the Active Step.  Making it
                        the active step will also make the Solution active if it is not already.
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                bool makeActive /** if true the step will be made the active step */,
                const NXString & stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a step, adds it to the solution and optionally makes it the Active Step.  Making it
                        the active step will also make the Solution active if it is not already.
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                bool makeActive /** if true the step will be made the active step */,
                const char * stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a step at the specified position, add to the solution and optionally make it active
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                bool makeActive /** if true the step will be made the active step */,
                const NXString & stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::SimSolution::StepPosition position /** relative position */,
                NXOpen::CAE::SimSolutionStep * relativeStep /** the step with respect to which the relative position is specified */
            );
            /** Create a step at the specified position, add to the solution and optionally make it active
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimSolutionStep * CreateStep
            (
                int stepType /** index of the step type */,
                bool makeActive /** if true the step will be made the active step */,
                const char * stepName /** name of the step   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::SimSolution::StepPosition position /** relative position */,
                NXOpen::CAE::SimSolutionStep * relativeStep /** the step with respect to which the relative position is specified */
            );
            /** Moves step to the specified position 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void MoveStep
            (
                NXOpen::CAE::SimSolutionStep * stepToMove /** step to move */,
                NXOpen::CAE::SimSolution::StepPosition position /** relative position */,
                NXOpen::CAE::SimSolutionStep * relativeStep /** the step with respect to which the relative position is specified */
            );
            /**Returns  the count of allowable step types
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int AllowedStepTypeCount
            (
            );
            /** Removes a step from the solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteStep
            (
                NXOpen::CAE::SimSolutionStep * step /** step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  to be added */
            );
            /**Returns  the active step  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * ActiveStep
            (
            );
            /**Sets  the active step  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetActiveStep
            (
                NXOpen::CAE::SimSolutionStep * activeStep /** active step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  */
            );
            /**Returns  the number of steps
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int StepCount
            (
            );
            /** Returns the step at the index passed
                      @return  step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink  at the index 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolutionStep * GetStepByIndex
            (
                int stepIndex /** index of the step */
            );
            /**Returns  the solver type
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString SolverType
            (
            );
            /**Returns  the analysis type
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString AnalysisType
            (
            );
            /**Returns  the solution type
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString SolutionType
            (
            );
            /** Add the bc to the solution
                        Only the BC that not under the folder can be added to solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddBc
            (
                NXOpen::CAE::SimBC * bc /** the bc to be added */
            );
            /** Remove the bc from the solution
                        Only the BC that not under the folder can be remove from solution
                     
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveBc
            (
                NXOpen::CAE::SimBC * bc /** the bc to be removed */
            );
            /** Remove all constraints from the solution
                     
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveAllConstraints
            (
            );
            /** Remove all loads from the solution
                     
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveAllLoads
            (
            );
            /** Remove all simulation objects from the solution
                     
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveAllSimulationObjects
            (
            );
            /** Add the folder to the solution
                        Only the folder not under other folder can be added to solution.
                     
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddFolder
            (
                NXOpen::CAE::SimLbcFolder * folder /** the folder to be added */
            );
            /** Remove the folder from the solution
                        Only the folder not under other folder can be removed from solution.
                     
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void RemoveFolder
            (
                NXOpen::CAE::SimLbcFolder * folder /** the folder to be removed */
            );
            /** Gets all the BCs in this solution
                      @return  Resultant bcs 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::SimBC *> GetBcs
            (
            );
            /** Gets all the root folders in this solution
                      @return  Resultant bcs 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::SimLbcFolder *> GetFolders
            (
            );
            /** Gets all the unfoldered BCs in this solution
                      @return  Resultant bcs 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::SimBC *> GetUnfolderedBcs
            (
            );
            /** Runs  the Assisted Conflict Check Mechanism for all constraints  @link NXOpen::CAE::SimConstraint NXOpen::CAE::SimConstraint@endlink  
                      in an active solution @link NXOpen::CAE::SimSolution NXOpen::CAE::SimSolution@endlink  and/or in an active step @link NXOpen::CAE::SimSolutionStep NXOpen::CAE::SimSolutionStep@endlink , 
                      generating new constraints @link NXOpen::CAE::SimConstraint NXOpen::CAE::SimConstraint@endlink  if there is any conflcit between the constraints.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ResolveConstraintConflicts
            (
            );
            /** Solves the solution 
                     
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Solve
            (
                NXOpen::CAE::SimSolution::SolveOption solveOption /** solve option */,
                NXOpen::CAE::SimSolution::SetupCheckOption setupCheckOption /** setup check option */
            );
            /** Creates the builder object for test and imported solution alignment dialog  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: NXOpen::CAE::CorrelAlignmentBuilder * CreateAlignmentBuilder
            (
            );
            /**Returns  the number of conflicting constraint pairs in this solution 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimSolution::ConflictingBcCount NXOpen::CAE::SimSolution::ConflictingBcCount@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimSolution::ConflictingBcCount instead.") int ConflictingConstraintsCount
            (
            );
            /**Returns  the number of conflicting BC pairs in this solution 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int ConflictingBcCount
            (
            );
            /** Returns the nth conflicting constraint pair, where the index is between 0 and @link NXOpen::CAE::SimSolution::ConflictingConstraintsCount NXOpen::CAE::SimSolution::ConflictingConstraintsCount@endlink  - 1 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimSolution::GetConflictingBcPairByIndex NXOpen::CAE::SimSolution::GetConflictingBcPairByIndex@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimSolution::GetConflictingBcPairByIndex instead.") void GetConflictingConstraintPairByIndex
            (
                int index /** index of the conflicting constraint pair, which is between 0 and @link NXOpen::CAE::SimSolution::ConflictingConstraintsCount NXOpen::CAE::SimSolution::ConflictingConstraintsCount@endlink  - 1 */,
                NXOpen::CAE::SimConstraint ** tConstraint1 /** constraint1 for this constraint pair */,
                NXOpen::CAE::SimConstraint ** tConstraint2 /** constraint2 for this constraint pair */,
                bool* ignored /** indicates that this conflict pair was previously resolved using the @link NXOpen::CAE::ConstraintResolutionBuilder::RuleIgnoreConflict NXOpen::CAE::ConstraintResolutionBuilder::RuleIgnoreConflict@endlink  */
            );
            /** Returns the nth conflicting BC pair, where the index is between 0 and @link NXOpen::CAE::SimSolution::ConflictingBcCount NXOpen::CAE::SimSolution::ConflictingBcCount@endlink  - 1 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetConflictingBcPairByIndex
            (
                int index /** index of the conflicting BC pair, which is between 0 and @link NXOpen::CAE::SimSolution::ConflictingBcCount NXOpen::CAE::SimSolution::ConflictingBcCount@endlink  - 1 */,
                NXOpen::CAE::SimBC ** tBc1 /** BC1 for this conflict pair */,
                NXOpen::CAE::SimBC ** tBc2 /** BC2 for this conflict pair */,
                bool* ignored /** indicates that this conflict pair was previously resolved using the @link NXOpen::CAE::ConstraintResolutionBuilder::RuleIgnoreConflict NXOpen::CAE::ConstraintResolutionBuilder::RuleIgnoreConflict@endlink  */
            );
            /** Creates a constraint resolution builder for this input pair of constraints   @return   
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimSolution::CreateConflictResolutionBuilder NXOpen::CAE::SimSolution::CreateConflictResolutionBuilder@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimSolution::CreateConflictResolutionBuilder instead.") NXOpen::CAE::ConstraintResolutionBuilder * CreateConstraintResolutionBuilder
            (
                NXOpen::CAE::SimGroupContainer * tStep /** solution step. can be same as solution */,
                NXOpen::CAE::SimConstraint * tConstraint1 /** first constraint in conflict */,
                NXOpen::CAE::SimConstraint * tConstraint2 /** second constraint in conflict */
            );
            /** Creates a conflict resolution builder for this input pair of BCs  @return   
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ConflictResolutionBuilder * CreateConflictResolutionBuilder
            (
                NXOpen::CAE::SimGroupContainer * tStep /** solution step. can be same as solution */,
                NXOpen::CAE::SimBC * tBc1 /** first BC in conflict */,
                NXOpen::CAE::SimBC * tBc2 /** second BC in conflict */
            );
            /** Stores the solver language export options to the specified solution.
                        
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ApplySolverLanguageExportOptions
            (
                NXOpen::CAE::CaeDataContainer * propertyList /** the export option parameters. See @link CAE::CaeSession::GetDataContainer  CAE::CaeSession::GetDataContainer @endlink . */
            );
            /** Specify whether NX Post should group entities based on
                       node and element groups and meshes in the pre-processing model 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFemValidInPost
            (
                bool valid /** valid or not */
            );
            /** Set the time properties for this solution based on the given condition sequences 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTimePropsFromConditionSequence
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** populate solution time properties from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */
            );
            /** Set the time properties for this solution based on the given condition sequences and number of integration steps
                     
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTimePropsFromConditionSequence
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** populate solution time properties from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */,
                int numSteps /** number of integration steps */
            );
            /** Set the time properties for this solution based on the given condition sequences and integration step size
                     
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTimePropsFromConditionSequence
            (
                NXOpen::CAE::SimConditionSequence * conditionSeqeunce /** populate solution time properties from @link NXOpen::CAE::SimConditionSequence NXOpen::CAE::SimConditionSequence@endlink */,
                double stepSize /** size of integration steps */,
                NXOpen::Unit * stepUnit /** step size @link NXOpen::Unit NXOpen::Unit@endlink */
            );
            /** Creates the builder to create and edit Result Probe object  @return   
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultProbeBuilder * CreateResultProbeBuilder
            (
                NXOpen::CAE::ResultProbe * resultProbe /** resultprobe */ 
            );
            /**Returns  the number of Result References 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int ResultReferenceCount
            (
            );
            /** Returns the Result Reference at the index passed  @return  step @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink  at the index 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimResultReference * GetResultReferenceByIndex
            (
                int resultIndex /** index of the result reference */
            );
            /** Specify local result file 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link SetLocalResultFile SetLocalResultFile@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:SetLocalResultFile instead.") void SetLocalResultFile
            (
                const NXString & dirpath /** directory name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & filename /** file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Specify local result file 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link SetLocalResultFile SetLocalResultFile@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetLocalResultFile
            (
                const char * dirpath /** directory name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const char * filename /** file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Specify managed result file 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link SetManagedResultFile SetManagedResultFile@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:SetManagedResultFile instead.") void SetManagedResultFile
            (
                const NXString & file /** file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Specify managed result file 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link SetManagedResultFile SetManagedResultFile@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetManagedResultFile
            (
                const char * file /** file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Clear previously specified result file location 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link SetInferredResultFile SetInferredResultFile@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:SetInferredResultFile instead.") void SetInferredResultFile
            (
            );
            /** Get the result file directory and result file name 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link GetResultFile GetResultFile@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:GetResultFile instead.") void GetResultFile
            (
                NXString* resultfiledir /** directly path where result file is stored */,
                NXString* resfilename /** result file name */
            );
            /** Get the managed result file name  @return  managed result file name 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link GetManagedResultFile GetManagedResultFile@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:GetManagedResultFile instead.") NXString GetManagedResultFile
            (
            );
            /** Get basic 6 units which are stored with solution used for loading the result file 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link GetResultFileUnits GetResultFileUnits@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:GetResultFileUnits instead.") void GetResultFileUnits
            (
                std::vector<NXOpen::Unit *> & units /** 6 basic units used to define the quantities in result file in order of mass, length, time, temperature, angle, and thermal energy */
            );
            /** Set result file units 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link SetResultFileUnits SetResultFileUnits@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:SetResultFileUnits instead.") void SetResultFileUnits
            (
                const std::vector<NXOpen::Unit *> & units /** 6 units for mass, length, time, temperature, angle, and thermal energy */
            );
            /** Clears previously specified result file units 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link SetInferredResultFileUnits SetInferredResultFileUnits@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:SetInferredResultFileUnits instead.") void SetInferredResultFileUnits
            (
            );
            /** Update steps and loads of this solution created from load recipe 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateFromLoadRecipe
            (
            );
            /** Returns the children of the Solution of the given Identifier  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * Find
            (
                const NXString & journalIdentifier /** Journal identifier of the object */
            );
            /** Returns the children of the Solution of the given Identifier  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::TaggedObject * Find
            (
                const char * journalIdentifier /** Journal identifier of the object */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
