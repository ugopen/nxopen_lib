#ifndef NXOpen_DRAWINGS_GENERALWORKFLOWBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_GENERALWORKFLOWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_GeneralWorkFlowBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class GeneralWorkFlowBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _GeneralWorkFlowBuilderBuilder;
        class GeneralWorkFlowBuilderImpl;
        /**
            Represents a @link NXOpen::Drawings::GeneralWorkFlowBuilder NXOpen::Drawings::GeneralWorkFlowBuilder@endlink 
            
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  GeneralWorkFlowBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Represents the always start type. */
            public: enum ModelBasedAlwaysStartType
            {
                ModelBasedAlwaysStartTypeViewCreationWizard/** view creation wizard */ ,
                ModelBasedAlwaysStartTypeBaseViewCommand/** base view command */ ,
                ModelBasedAlwaysStartTypeNoViewCommands/** no view commands */ 
            };

            /** Represents the settings orientation type.*/
            public: enum SettingsOrientationType
            {
                SettingsOrientationTypeDrawingTemplate/** drawing template */ ,
                SettingsOrientationTypeDrawingStandard/** drawing standard */ 
            };

            /** Represents the grid settings type.*/
            public: enum GridSettingsType
            {
                GridSettingsTypeDrafting/** drafting */ ,
                GridSettingsTypeSketch/** sketch */ ,
                GridSettingsTypeSheetZone/** sheet zone */ 
            };

            private: GeneralWorkFlowBuilderImpl * m_generalworkflowbuilder_impl;
            private: friend class  _GeneralWorkFlowBuilderBuilder;
            protected: GeneralWorkFlowBuilder();
            public: ~GeneralWorkFlowBuilder();
            /**Returns  the flag indicating whether to automatically starts the insert sheet command when entering the drafting application
                    if no drawing sheets exist.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool StandAloneInsertSheet
            (
            );
            /**Sets  the flag indicating whether to automatically starts the insert sheet command when entering the drafting application
                    if no drawing sheets exist.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetStandAloneInsertSheet
            (
                bool standAloneInsertSheet /** standaloneinsertsheet */ 
            );
            /**Returns  the flag indicating whether to automatically starts the drawing view command after inserting a sheet with no views.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool StandAloneViewCreation
            (
            );
            /**Sets  the flag indicating whether to automatically starts the drawing view command after inserting a sheet with no views.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetStandAloneViewCreation
            (
                bool standAloneViewCreation /** standaloneviewcreation */ 
            );
            /**Returns  the flag indicating whether to automatically starts the projected view command after inserting a drawing view.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool StandAloneProjectedView
            (
            );
            /**Sets  the flag indicating whether to automatically starts the projected view command after inserting a drawing view.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetStandAloneProjectedView
            (
                bool standAloneProjectedView /** standaloneprojectedview */ 
            );
            /**Returns  the flag indicating whether to automatically starts the projected view command after inserting a projected drawing view.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool StandAloneProjectToView
            (
            );
            /**Sets  the flag indicating whether to automatically starts the projected view command after inserting a projected drawing view.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetStandAloneProjectToView
            (
                bool standAloneProjectToView /** standaloneprojecttoview */ 
            );
            /**Returns  the flag indicating whether to automatically starts the insert sheet command when entering the drafting application if no drawing sheets exist 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ModelBasedInsertSheet
            (
            );
            /**Sets  the flag indicating whether to automatically starts the insert sheet command when entering the drafting application if no drawing sheets exist 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetModelBasedInsertSheet
            (
                bool modelBasedInsertSheet /** modelbasedinsertsheet */ 
            );
            /**Returns  the option that indicates action to be taken after inserting a sheet with no views 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::GeneralWorkFlowBuilder::ModelBasedAlwaysStartType ModelBasedAlwaysStart
            (
            );
            /**Sets  the option that indicates action to be taken after inserting a sheet with no views 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetModelBasedAlwaysStart
            (
                NXOpen::Drawings::GeneralWorkFlowBuilder::ModelBasedAlwaysStartType modelBasedAlwaysStart /** modelbasedalwaysstart */ 
            );
            /**Returns  the flag indicating whether to automatically start the projected view command after inserting a model view. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ModelBasedProjectedView
            (
            );
            /**Sets  the flag indicating whether to automatically start the projected view command after inserting a model view. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetModelBasedProjectedView
            (
                bool modelBasedProjectedView /** modelbasedprojectedview */ 
            );
            /**Returns  the flag indicating whether to creates a drafting component when creating a view of the master model part 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateDraftingComponent
            (
            );
            /**Sets  the flag indicating whether to creates a drafting component when creating a view of the master model part 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateDraftingComponent
            (
                bool createDraftingComponent /** createdraftingcomponent */ 
            );
            /**Returns  the option that indicates the settings origination 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::GeneralWorkFlowBuilder::SettingsOrientationType SettingsOrigination
            (
            );
            /**Sets  the option that indicates the settings origination 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSettingsOrigination
            (
                NXOpen::Drawings::GeneralWorkFlowBuilder::SettingsOrientationType settingsOrigination /** settingsorigination */ 
            );
            /**Returns  the option that indicates the grid settings 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::GeneralWorkFlowBuilder::GridSettingsType GridSettings
            (
            );
            /**Sets  the option that indicates the grid settings 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetGridSettings
            (
                NXOpen::Drawings::GeneralWorkFlowBuilder::GridSettingsType gridSettings /** gridsettings */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
