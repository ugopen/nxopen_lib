#ifndef NXOpen_AME_BASEEVALUATORBUILDER_HXX_INCLUDED
#define NXOpen_AME_BASEEVALUATORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_BaseEvaluatorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_BasicPropertiesBuilder.hxx>
#include <NXOpen/AME_ReferenceObjectBuilder.hxx>
#include <NXOpen/AME_SortingBlockBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class BaseEvaluatorBuilder;
    }
    namespace AME
    {
        class BasicPropertiesBuilder;
    }
    namespace AME
    {
        class ExpressionEvaluator;
    }
    namespace AME
    {
        class ReferenceObjectBuilder;
    }
    namespace AME
    {
        class SortingBlockBuilder;
    }
    class Builder;
    namespace AME
    {
        class _BaseEvaluatorBuilderBuilder;
        class BaseEvaluatorBuilderImpl;
        /** Represents the builder for all the evaluators. Contains mostly the common inputs.  <br> This object does not need a creator.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  BaseEvaluatorBuilder : public NXOpen::Builder
        {
            /** choices for aspect context type, can either be function, location, product, or automation */
            public: enum ContextType
            {
                ContextTypeFunction/** function */ ,
                ContextTypeLocation/** location */ ,
                ContextTypeProduct/** product */ ,
                ContextTypeAutomation/** automation */ 
            };

            /** choices for condition type filter for navigations that return a list of filtered objects */
            public: enum ConditionType
            {
                ConditionTypeContains/** contains */ ,
                ConditionTypeEquals/** equals */ ,
                ConditionTypeNotEquals/** not equals */ ,
                ConditionTypeLessThan/** less than */ ,
                ConditionTypeGreaterThan/** greater than */ ,
                ConditionTypeLessThanEquals/** less than equals */ ,
                ConditionTypeGreaterThanEquals/** greater than equals */ 
            };

            private: BaseEvaluatorBuilderImpl * m_baseevaluatorbuilder_impl;
            private: friend class  _BaseEvaluatorBuilderBuilder;
            protected: BaseEvaluatorBuilder();
            public: ~BaseEvaluatorBuilder();
            /**Returns  the context and source object selection 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ReferenceObjectBuilder * ReferenceObject
            (
            );
            /**Returns  the sorting block 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SortingBlockBuilder * SortingBlock
            (
            );
            /**Returns  the name and description 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BasicPropertiesBuilder * BasicProperties
            (
            );
            /**Establishes the evaluator
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ExpressionEvaluator * EstablishEvaluator
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
