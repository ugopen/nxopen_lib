#ifndef NXOpen_DIE_DIEPLANEBUILDER_HXX_INCLUDED
#define NXOpen_DIE_DIEPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DiePlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class DiePlaneBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class SelectNXObject;
    namespace Die
    {
        class _DiePlaneBuilderBuilder;
        class DiePlaneBuilderImpl;
        /**
            Represents a @link NXOpen::Die::DiePlaneBuilder NXOpen::Die::DiePlaneBuilder@endlink . The Die Plane is
            a helper to the main Die Design feature to specify the plane, such as the
            base plane or end planes. If a coordinate system is specified, then the
            XY plane of the coordinate system will be used.
             <br> To create a new instance of this class, use @link NXOpen::Die::DieCollection::CreateDiePlane  NXOpen::Die::DieCollection::CreateDiePlane @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  DiePlaneBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** the options available for defining the plane */
            public: enum PlaneType
            {
                PlaneTypeSelection/** Select the plane to be used. */,
                PlaneTypePlane/** Define the plane to be used. */,
                PlaneTypeCoordinateSystem/** Define a coordinate system to specify the plane. */
            };

            private: DiePlaneBuilderImpl * m_dieplanebuilder_impl;
            private: friend class  _DiePlaneBuilderBuilder;
            protected: DiePlaneBuilder();
            public: ~DiePlaneBuilder();
            /**Returns  the type of input that defined the plane 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DiePlaneBuilder::PlaneType InputType
            (
            );
            /**Sets  the type of input that defined the plane 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetInputType
            (
                NXOpen::Die::DiePlaneBuilder::PlaneType inputType /** inputtype */ 
            );
            /**Returns  the selected plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectPlane
            (
            );
            /**Returns  the specified plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * SpecifyPlane
            (
            );
            /**Sets  the specified plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetSpecifyPlane
            (
                NXOpen::Plane * specifyPlane /** specifyplane */ 
            );
            /**Returns  the coordinate system origin 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d CoordinateSystemOrigin
            (
            );
            /**Sets  the coordinate system origin 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCoordinateSystemOrigin
            (
                const NXOpen::Point3d & coordinateSystemOrigin /** coordinatesystemorigin */ 
            );
            /**Returns  the coordinate system matrix 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 CoordinateSystemMatrix
            (
            );
            /**Sets  the coordinate system matrix 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCoordinateSystemMatrix
            (
                const NXOpen::Matrix3x3 & coordinateSystemMatrix /** coordinatesystemmatrix */ 
            );
            /**Returns  the indication if the source's direction should be reversed. True indicates the source's direction should be reversed 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseSourceDirection
            (
            );
            /**Sets  the indication if the source's direction should be reversed. True indicates the source's direction should be reversed 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReverseSourceDirection
            (
                bool reverseSourceDirection /** reversesourcedirection */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
