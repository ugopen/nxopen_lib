#ifndef NXOpen_PREFERENCES_SKETCHPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_SKETCHPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SketchPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class SketchPreferences;
    }
    class Sketch;
    namespace Preferences
    {
        class SketchPreferencesImpl;
        /** Represents the set of sketch preferences applicable on @link NXOpen::Sketch NXOpen::Sketch@endlink  object <br> To obtain an instance of this class, refer to @link NXOpen::Sketch  NXOpen::Sketch @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  SketchPreferences
        {
            /** Describes the different options for displaying dimension labels. */
            public: enum DimensionLabelType
            {
                DimensionLabelTypeExpression/** Displays the entire expression such as P2=P3*4 */,
                DimensionLabelTypeName/** Displays only the name of the expression, such as P2 */,
                DimensionLabelTypeValue/** Displays the numerical value of the expression */
            };

            private: SketchPreferencesImpl * m_sketchpreferences_impl;
            private: NXOpen::Sketch* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SketchPreferences(NXOpen::Sketch *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SketchPreferences();
            /**Returns  the constraint symbol size  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ConstraintSymbolSize
            (
            );
            /**Sets  the constraint symbol size  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetConstraintSymbolSize
            (
                double constraintSize /** constraint size */ 
            );
            /**Returns  the dimension label. Controls how expressions in sketch dimensions are displayed 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SketchPreferences::DimensionLabelType DimensionLabel
            (
            );
            /**Sets  the dimension label. Controls how expressions in sketch dimensions are displayed 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDimensionLabel
            (
                NXOpen::Preferences::SketchPreferences::DimensionLabelType dimensionLabel /** dimension label */ 
            );
            /** Applies sketch preferences set by user. The dimDisplayFlag is the API version of the UI setting of 
                    Retain Dimensions which was last available for use in NX 6. The setting still exists in the UI for 
                    legacy parts that have a sketch with Retain Dimensions enabled.  However, once the setting is turned off,
                    it cannot be turned on again. This functionality is replaced by @link NXOpen::Annotations::AnnotationManager::MakePmi NXOpen::Annotations::AnnotationManager::MakePmi@endlink 
                    in an active sketch or @link NXOpen::Features::EditDimensionBuilder::DisplayAsPmi NXOpen::Features::EditDimensionBuilder::DisplayAsPmi @endlink and @link NXOpen::Features::EditDimensionBuilder::SetDisplayAsPmi NXOpen::Features::EditDimensionBuilder::SetDisplayAsPmi @endlink  when not in an active sketch.
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void ApplySketchPreferences
            (
                int dimDisplayFlag /** If sketch dimensions are already displayed outside of an active sketch, 
                                                        Set 0 to turn off the display of dimensions outside of the active sketch. */
            );
            /**Returns  the setting that controls whether or not objects are displayed in their actual color in sketch 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayObjectColor
            (
            );
            /**Sets  the setting that controls whether or not objects are displayed in their actual color in sketch 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetDisplayObjectColor
            (
                bool displayObjectColor /** display object color */ 
            );
            /**Returns  the setting that controls whether or not the reference geometry are displayed on inactive sketches 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool DisplayReferenceGeometry
            (
            );
            /**Sets  the setting that controls whether or not the reference geometry are displayed on inactive sketches 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetDisplayReferenceGeometry
            (
                bool displayReferenceGeometry /** displayreferencegeometry */ 
            );
            /**Returns  the setting that controls whether or not inferred constraints are automatically created when curves and points are created in the sketch. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateInferredConstraints
            (
            );
            /**Sets  the setting that controls whether or not inferred constraints are automatically created when curves and points are created in the sketch. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCreateInferredConstraints
            (
                bool createInferredConstraints /** create inferred constraints */ 
            );
            /**Returns  the setting that controls whether or not the dimension text size should be fixed. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool TextSizeFixed
            (
            );
            /**Sets  the setting that controls whether or not the dimension text size should be fixed. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetTextSizeFixed
            (
                bool textSizeFixed /** text size fixed */ 
            );
            /**Returns  the fixed text size.  It is the visible dimension size when text size fixed is enabled. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double FixedTextSize
            (
            );
            /**Sets  the fixed text size.  It is the visible dimension size when text size fixed is enabled. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFixedTextSize
            (
                double fixedTextSize /** fixed text size */ 
            );
            /**Returns  the scale of the dimension text. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: double DimensionTextScale
            (
            );
            /**Sets  the scale of the dimension text. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetDimensionTextScale
            (
                double dimensionTextScale /** dimensiontextscale */ 
            );
            /**Returns  the setting that controls whether or not to continuously create auto dimensions in a sketch. If the option is true (On) then the auto dimensioner will be 
                automatically executed after an individual curve is created in a sketch. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ContinuousAutoDimensioningSetting
            (
            );
            /**Sets  the setting that controls whether or not to continuously create auto dimensions in a sketch. If the option is true (On) then the auto dimensioner will be 
                automatically executed after an individual curve is created in a sketch. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetContinuousAutoDimensioningSetting
            (
                bool autoDim /** auto dim */ 
            );
            /**Returns  the setting that controls whether or not to use user input for sketch solving tolerance. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool UseSolvingTolerance
            (
            );
            /**Sets  the setting that controls whether or not to use user input for sketch solving tolerance. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUseSolvingTolerance
            (
                bool useTolerance /** usetolerance */ 
            );
            /**Returns  the sketch solving tolerance. This specifies the maximum allowable distance between two objects 
                    when solving the sketch constraints for the given sketch. The tolerance value must be greater than 1e-08. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double SolvingTolerance
            (
            );
            /**Sets  the sketch solving tolerance. This specifies the maximum allowable distance between two objects 
                    when solving the sketch constraints for the given sketch. The tolerance value must be greater than 1e-08. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSolvingTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the setting that controls whether or not objects are displayed with their names in sketch. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayObjectName
            (
            );
            /**Sets  the setting that controls whether or not objects are displayed with their names in sketch. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetDisplayObjectName
            (
                bool displayObjectName /** displayobjectname */ 
            );
            /**Returns  the setting that controls whether or not vertices are displayed in an active sketch. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayVertices
            (
            );
            /**Sets  the setting that controls whether or not vertices are displayed in an active sketch. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetDisplayVertices
            (
                bool displayVertices /** displayvertices */ 
            );
            /**Returns  the setting that specifies whether or not closed curve regions are displayed as shaded regions in an active sketch. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayShadedRegions
            (
            );
            /**Sets  the setting that specifies whether or not closed curve regions are displayed as shaded regions in an active sketch. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetDisplayShadedRegions
            (
                bool displayShadedRegions /** displayshadedregions */ 
            );
            /**Returns  the setting that controls whether or not parentheses are displayed on reference dimensions. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool DisplayParenthesesOnReferenceDimensions
            (
            );
            /**Sets  the setting that controls whether or not parentheses are displayed on reference dimensions. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetDisplayParenthesesOnReferenceDimensions
            (
                bool displayParentheses /** displayparentheses */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
