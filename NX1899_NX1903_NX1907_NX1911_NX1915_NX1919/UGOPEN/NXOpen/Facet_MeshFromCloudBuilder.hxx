#ifndef NXOpen_FACET_MESHFROMCLOUDBUILDER_HXX_INCLUDED
#define NXOpen_FACET_MESHFROMCLOUDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Facet_MeshFromCloudBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_facet_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Facet
    {
        class MeshFromCloudBuilder;
    }
    class Builder;
    class SelectPointList;
    namespace Facet
    {
        class _MeshFromCloudBuilderBuilder;
        class MeshFromCloudBuilderImpl;
        /**
            Represents a @link NXOpen::Facet::MeshFromCloudBuilder NXOpen::Facet::MeshFromCloudBuilder@endlink 
            Creates a convergent body from point clouds. The point cloud data source
            can be either a file or existing points within the part file.
             <br> To create a new instance of this class, use @link NXOpen::Facet::FacetModelingCollection::CreateMeshFromCloudBuilder  NXOpen::Facet::FacetModelingCollection::CreateMeshFromCloudBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AnalyzeMeshQuality </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ModeOptions </td> <td> 
         
        KeepAllPoints </td> </tr> 

        <tr><td> 
         
        NeighborhoodSize </td> <td> 
         
        5 (millimeters part), 0.2 (inches part) </td> </tr> 

        <tr><td> 
         
        SmoothingFactor </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SourceOptions </td> <td> 
         
        FromFile </td> </tr> 

        <tr><td> 
         
        TargetVertexNumber </td> <td> 
         
        100000 </td> </tr> 

        <tr><td> 
         
        TessellationPercentage </td> <td> 
         
        100 </td> </tr> 

        </table>  

         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_FACETEXPORT  MeshFromCloudBuilder : public NXOpen::Builder
        {
            /** The options indicating the source of point cloud. */
            public: enum SourceOption
            {
                SourceOptionFromFile/** from file */ ,
                SourceOptionExistingPoints/** existing points */ 
            };

            /** The options controlling distribution of vertices in the output convergent body.*/
            public: enum ModeOption
            {
                ModeOptionUniformDensity/** Uniform vertex density. */,
                ModeOptionVariableDensity/** uniform vertex density in planar areas with increased density in curvy areas. */,
                ModeOptionKeepAllPoints/** Preserve input points to create corresponding vertices. */
            };

            private: MeshFromCloudBuilderImpl * m_meshfromcloudbuilder_impl;
            private: friend class  _MeshFromCloudBuilderBuilder;
            protected: MeshFromCloudBuilder();
            public: ~MeshFromCloudBuilder();
            /**Returns  the option indicating the source of point cloud. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::MeshFromCloudBuilder::SourceOption SourceOptions
            (
            );
            /**Sets  the option indicating the source of point cloud. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetSourceOptions
            (
                NXOpen::Facet::MeshFromCloudBuilder::SourceOption sourceOptions /** sourceoptions */ 
            );
            /**Returns  the point cloud file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PointFile
            (
            );
            /**Sets  the point cloud file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPointFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the point cloud file. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            void SetPointFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the point cloud. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectPointList * SelectPoints
            (
            );
            /**Returns  the option controlling distribution of vertices in the output convergent body. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::MeshFromCloudBuilder::ModeOption ModeOptions
            (
            );
            /**Sets  the option controlling distribution of vertices in the output convergent body. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetModeOptions
            (
                NXOpen::Facet::MeshFromCloudBuilder::ModeOption modeOptions /** modeoptions */ 
            );
            /**Returns  the value as a percentage ratio of number of output vertices to the number of input points. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double TessellationPercentage
            (
            );
            /**Sets  the value as a percentage ratio of number of output vertices to the number of input points. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetTessellationPercentage
            (
                double tessellationPercentage /** tessellationpercentage */ 
            );
            /**Returns  the value indicating the desired number of vertices in the output body. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int TargetVertexNumber
            (
            );
            /**Sets  the value indicating the desired number of vertices in the output body. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetTargetVertexNumber
            (
                int targetVertexNumber /** targetvertexnumber */ 
            );
            /**Returns  the value indicating smoothing factor. The value can be between 0 and 100, with high value indicating higher smoothing. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int SmoothingFactor
            (
            );
            /**Sets  the value indicating smoothing factor. The value can be between 0 and 100, with high value indicating higher smoothing. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetSmoothingFactor
            (
                int smoothingFactor /** smoothingfactor */ 
            );
            /**Returns  the value used to determine neighboring points when creating a body. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double NeighborhoodSize
            (
            );
            /**Sets  the value used to determine neighboring points when creating a body. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetNeighborhoodSize
            (
                double neighborhoodSize /** neighborhoodsize */ 
            );
            /** Determines @link NXOpen::Facet::MeshFromCloudBuilder::NeighborhoodSize NXOpen::Facet::MeshFromCloudBuilder::NeighborhoodSize @endlink and @link NXOpen::Facet::MeshFromCloudBuilder::SetNeighborhoodSize NXOpen::Facet::MeshFromCloudBuilder::SetNeighborhoodSize @endlink  for a given point cloud data. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SuggestNeighborhoodSize
            (
            );
            /**Returns  the value used to determine if analyzing the quality of the mesh or not. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool AnalyzeMeshQuality
            (
            );
            /**Sets  the value used to determine if analyzing the quality of the mesh or not. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetAnalyzeMeshQuality
            (
                bool analyzeMeshQuality /** analyzemeshquality */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
