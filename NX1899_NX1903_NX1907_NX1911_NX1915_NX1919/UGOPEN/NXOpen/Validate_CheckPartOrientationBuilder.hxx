#ifndef NXOpen_VALIDATE_CHECKPARTORIENTATIONBUILDER_HXX_INCLUDED
#define NXOpen_VALIDATE_CHECKPARTORIENTATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_CheckPartOrientationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Validate_CheckPrintTimeBuilder.hxx>
#include <NXOpen/Validate_FDMPrintTimeParameter.hxx>
#include <NXOpen/Validate_MJFPrintTimeParameter.hxx>
#include <NXOpen/Validate_PBFPrintTimeParameter.hxx>
#include <NXOpen/Validate_PartOrientationAnalysisResult.hxx>
#include <NXOpen/Validate_SelectionAndPlacementBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class CheckPartOrientationBuilder;
    }
    class Builder;
    class Expression;
    namespace Validate
    {
        class FDMPrintTimeParameter;
    }
    namespace Validate
    {
        class MJFPrintTimeParameter;
    }
    namespace Validate
    {
        class PBFPrintTimeParameter;
    }
    namespace Validate
    {
        class PartOrientationAnalysisResult;
    }
    namespace Validate
    {
        class SelectionAndPlacementBuilder;
    }
    namespace Validate
    {
        class _CheckPartOrientationBuilderBuilder;
        class CheckPartOrientationBuilderImpl;
        /** Represents a @link Validate::PartOrientationAnalysisResult Validate::PartOrientationAnalysisResult@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Validate::AnalysisResultCollection::CreateCheckPartOrientationBuilder  NXOpen::Validate::AnalysisResultCollection::CreateCheckPartOrientationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Accuracy </td> <td> 
         
        Medium </td> </tr> 

        <tr><td> 
         
        FDMPrintTimeParameter.LayerThickness.Value </td> <td> 
         
        0.1 (millimeters part), 0.005 (inches part) </td> </tr> 

        <tr><td> 
         
        FDMPrintTimeParameter.NozzleDiameter.Value </td> <td> 
         
        0.5 (millimeters part), 0.025 (inches part) </td> </tr> 

        <tr><td> 
         
        FDMPrintTimeParameter.TravelSpeed.Value </td> <td> 
         
        150.0 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        MJFPrintTimeParameter.LayerPrintTime.Value </td> <td> 
         
        30.0 (millimeters part), 30.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MJFPrintTimeParameter.LayerThickness.Value </td> <td> 
         
        0.1 (millimeters part), 0.005 (inches part) </td> </tr> 

        <tr><td> 
         
        MaxOverhangAngleForOverHeating.Value </td> <td> 
         
        60.0 </td> </tr> 

        <tr><td> 
         
        MaxOverhangAngleForVolume.Value </td> <td> 
         
        45.0 </td> </tr> 

        <tr><td> 
         
        PBFPrintTimeParameter.HatchSpacing.Value </td> <td> 
         
        1.0 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        PBFPrintTimeParameter.IslandLength.Value </td> <td> 
         
        10.0 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        PBFPrintTimeParameter.LayerThickness.Value </td> <td> 
         
        0.1 (millimeters part), 0.005 (inches part) </td> </tr> 

        <tr><td> 
         
        PBFPrintTimeParameter.RecoatingTime.Value </td> <td> 
         
        5.0 (millimeters part), 5.0 (inches part) </td> </tr> 

        <tr><td> 
         
        PBFPrintTimeParameter.SkyWritingTime.Value </td> <td> 
         
        0.8 (millimeters part), 0.8 (inches part) </td> </tr> 

        <tr><td> 
         
        PBFPrintTimeParameter.TravelSpeed.Value </td> <td> 
         
        150.0 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        Printer </td> <td> 
         
        PowderBedFusion </td> </tr> 

        <tr><td> 
         
        ValidateOverheating </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ValidatePrintTime </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ValidateSupportVolume </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ValidateSurfaceArea </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        WeightOverheating </td> <td> 
         
        100 </td> </tr> 

        <tr><td> 
         
        WeightPrintTime </td> <td> 
         
        100 </td> </tr> 

        <tr><td> 
         
        WeightSupportVolume </td> <td> 
         
        100 </td> </tr> 

        <tr><td> 
         
        WeightSurfaceArea </td> <td> 
         
        100 </td> </tr> 

        </table>  

         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  CheckPartOrientationBuilder : public NXOpen::Builder
        {
            /** Represents the accuracy level for part orientation optimization */
            public: enum AccuracyLevel
            {
                AccuracyLevelCoarse/** Represents coarse accuracy. This would be computationaly faster. */ = 1,
                AccuracyLevelLow/** Represents low accuracy. This would be computationaly fast */,
                AccuracyLevelMedium/** Represents medium accuracy. This would be resonably computationaly expensive  */,
                AccuracyLevelHigh/** Represents high accuracy. This would be computationaly expensive */,
                AccuracyLevelVeryHigh/** Represents very high accuracy. This would be computationaly very expensive */
            };

            private: CheckPartOrientationBuilderImpl * m_checkpartorientationbuilder_impl;
            private: friend class  _CheckPartOrientationBuilderBuilder;
            protected: CheckPartOrientationBuilder();
            public: ~CheckPartOrientationBuilder();
            /**Returns  the printer type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::CheckPrintTimeBuilder::PrinterType Printer
            (
            );
            /**Sets  the printer type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetPrinter
            (
                NXOpen::Validate::CheckPrintTimeBuilder::PrinterType printer /** printer */ 
            );
            /**Returns  the surface area checker flag. If switched ON surface area would be optimized.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ValidateSurfaceArea
            (
            );
            /**Sets  the surface area checker flag. If switched ON surface area would be optimized.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetValidateSurfaceArea
            (
                bool surfaceArea /** surfacearea */ 
            );
            /**Returns  the support volume checker flag. If switched ON support volume would be optimized.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ValidateSupportVolume
            (
            );
            /**Sets  the support volume checker flag. If switched ON support volume would be optimized.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetValidateSupportVolume
            (
                bool supportVolume /** supportvolume */ 
            );
            /**Returns  the print time checker flag. If switched ON print time would be optimized.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ValidatePrintTime
            (
            );
            /**Sets  the print time checker flag. If switched ON print time would be optimized.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetValidatePrintTime
            (
                bool printTime /** printtime */ 
            );
            /**Returns  the overheating checker flag. If switched ON overheating area would be optimized.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ValidateOverheating
            (
            );
            /**Sets  the overheating checker flag. If switched ON overheating area would be optimized.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetValidateOverheating
            (
                bool overheating /** overheating */ 
            );
            /**Returns  the maximum overhang angle for support volume parameter 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxOverhangAngleForVolume
            (
            );
            /**Returns  the maximum overhang angle for overheating step 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxOverhangAngleForOverHeating
            (
            );
            /**Returns  the print time parameter for powder bed fusion printer type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::PBFPrintTimeParameter * PBFPrintTimeParameter
            (
            );
            /**Returns  the print time parameter for multi jet fusion printer type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::MJFPrintTimeParameter * MJFPrintTimeParameter
            (
            );
            /**Returns  the print time parameter for fused deposition modelling printer type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::FDMPrintTimeParameter * FDMPrintTimeParameter
            (
            );
            /**Returns  the selection and placement builder
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::SelectionAndPlacementBuilder * SelectionAndPlacement
            (
            );
            /** Calculate the checker at current orientation
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void CalculateCheck
            (
                std::vector<NXOpen::Validate::PartOrientationAnalysisResult::CheckerValues> & checkerValues /** The values of checker and its range */
            );
            /**Returns  the accuracy for optimization. Higher accuracy will take long computation time.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::CheckPartOrientationBuilder::AccuracyLevel Accuracy
            (
            );
            /**Sets  the accuracy for optimization. Higher accuracy will take long computation time.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetAccuracy
            (
                NXOpen::Validate::CheckPartOrientationBuilder::AccuracyLevel accuracy /** accuracy */ 
            );
            /** The api to start the optimization process 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void StartCalculation
            (
            );
            /**Returns  the weight for surface area 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int WeightSurfaceArea
            (
            );
            /**Sets  the weight for surface area 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetWeightSurfaceArea
            (
                int weightSurfaceArea /** weightsurfacearea */ 
            );
            /**Returns  the weight for support volume 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int WeightSupportVolume
            (
            );
            /**Sets  the weight for support volume 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetWeightSupportVolume
            (
                int weightSupportVolume /** weightsupportvolume */ 
            );
            /**Returns  the weight for print time 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int WeightPrintTime
            (
            );
            /**Sets  the weight for print time 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetWeightPrintTime
            (
                int weightPrintTime /** weightprinttime */ 
            );
            /**Returns  the weight for overheating 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int WeightOverheating
            (
            );
            /**Sets  the weight for overheating 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void SetWeightOverheating
            (
                int weightOverheating /** weightoverheating */ 
            );
            /** Orient the build plane or part to the minimum for specified checker
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void OrientToMinimum
            (
                NXOpen::Validate::PartOrientationAnalysisResult::CheckerIndex checkerIndex /** checkerindex */ 
            );
            /** Get number of optimum orientations
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: int GetNumOfOptimumOrientations
            (
            );
            /** Orient the build plane or part to the optimum orientation specified by index
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void OptimumSolution
            (
                int orientationIndex /** The index of optimum solution. Should be with in [0 NumOfOptimumOrientations)*/
            );
            /** Get the optimum orientation at given index
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void GetOptimumOrientation
            (
                int optimumOrientationIndex /** Index of optimum solution, should be within [0, num_of_optimum_orientations) */,
                NXOpen::Point3d* origin /** Origin for the optimum orientation */,
                NXOpen::Vector3d* orientation /** Z direction of the optimum orientation */,
                std::vector<NXOpen::Validate::PartOrientationAnalysisResult::CheckerValues> & checkerValues /** The values of checker and its range. */
            );
            /** Get minimum orientation for specific checker 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void GetMinimumOrientation
            (
                NXOpen::Validate::PartOrientationAnalysisResult::CheckerIndex checkerIndex /** checker index */ ,
                NXOpen::Point3d* origin /** Origin for the optimum orientation */,
                NXOpen::Vector3d* orientation /** Z direction of the optimum orientation */,
                std::vector<NXOpen::Validate::PartOrientationAnalysisResult::CheckerValues> & checkerValues /** The values of checker and its range */
            );
            /** Remove all orientations.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: void RemoveAllSolutions
            (
            );
            /** Get the persistent part orientation optimization result.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_additive_design (" NX Additive Design") */
            public: NXOpen::Validate::PartOrientationAnalysisResult * GetPartOrientationResult
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
