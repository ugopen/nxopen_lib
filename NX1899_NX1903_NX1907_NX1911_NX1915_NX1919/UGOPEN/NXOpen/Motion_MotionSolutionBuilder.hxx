#ifndef NXOpen_MOTION_MOTIONSOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_MOTIONSOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_MotionSolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_AdamsSolverProperty.hxx>
#include <NXOpen/Motion_LmsSolverProperty.hxx>
#include <NXOpen/Motion_RecurdynSolverProperty.hxx>
#include <NXOpen/Motion_EntityPropTableBuilder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class MotionSolutionBuilder;
    }
    class Direction;
    class Expression;
    namespace Motion
    {
        class AdamsSolverProperty;
    }
    namespace Motion
    {
        class EntityPropTableBuilder;
    }
    namespace Motion
    {
        class LmsSolverProperty;
    }
    namespace Motion
    {
        class RecurdynSolverProperty;
    }
    namespace Motion
    {
        class _MotionSolutionBuilderBuilder;
        class MotionSolutionBuilderImpl;
        /**
            Represents a @link NXOpen::Motion::MotionSolutionBuilder NXOpen::Motion::MotionSolutionBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::Motion::MotionSolutionCollection::CreateSolutionBuilder  NXOpen::Motion::MotionSolutionCollection::CreateSolutionBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  MotionSolutionBuilder : public NXOpen::Motion::EntityPropTableBuilder
        {
            /** Solution type */
            public: enum SolutionTypes
            {
                SolutionTypesNormal/** Normal run */,
                SolutionTypesArticulation/** Articulation run */,
                SolutionTypesSpreadsheet/** Spreadsheet run */,
                SolutionTypesFlexbody/** Flexible Body Dynamics run */
            };

            /** Analysis type
                        The LMS Solver does not support @link NXOpen::Motion::MotionSolutionBuilder::AnalysisTypesControl NXOpen::Motion::MotionSolutionBuilder::AnalysisTypesControl@endlink .*/
            public: enum AnalysisTypes
            {
                AnalysisTypesDynamic/** Dynamic or Kinematic analysis */,
                AnalysisTypesStatic/** Static analysis */,
                AnalysisTypesControl/** control */ 
            };

            /** Working Directory Type */
            public: enum WorkingDirectoryType
            {
                WorkingDirectoryTypeSimFolder/** sim folder type */,
                WorkingDirectoryTypeUserDefined/** user defined type */
            };

            /** Gravity Option */
            public: enum GravityOption
            {
                GravityOptionNoGravity/** no gravity option */,
                GravityOptionEarthGravity/** earth gravity option */,
                GravityOptionUserDefinedComponent/** user defined component option */,
                GravityOptionUserDefinedVector/** user defined vector option */
            };

            /** Step Type Option */
            public: enum StepTypeOption
            {
                StepTypeOptionNumSteps/** number of steps option */,
                StepTypeOptionStepSize/** step size option */,
                StepTypeOptionPrintIntervalCurve/** print interval curve option */
            };

            /** Solver Units for Length */
            public: enum UnitLength
            {
                UnitLengthMillimeter/** millimeter unit */,
                UnitLengthCentimeter/** centimeter unit */,
                UnitLengthMeter/** meter unit */,
                UnitLengthInch/** inch unit */,
                UnitLengthFoot/** foot unit */
            };

            /** Solver Units for Mass */
            public: enum UnitMass
            {
                UnitMassGram/** gram unit */,
                UnitMassKilogram/** kilogram unit */,
                UnitMassMetricTonne/** metric tonne unit */,
                UnitMassSlinch/** slinch unit */,
                UnitMassSlug/** slug unit */
            };

            /** Solver Units for Force */
            public: enum UnitForce
            {
                UnitForceMicronewton/** micronewton unit */,
                UnitForceNewton/** Newton unit */,
                UnitForceKilogramForce/** kilogram-force unit */,
                UnitForcePound/** pound unit */,
                UnitForceDyne/** dyne unit */
            };

            /** Output Type */
            public: enum OutputType
            {
                OutputTypeBinary/** binary type */,
                OutputTypeAscii/** ASCII type */,
                OutputTypeAsciiAndBinary/** ASCII and binary type */,
                OutputTypeRestartAndBinary/** restart and binary type */,
                OutputTypeRestartAndAscii/** restart and ASCII type */,
                OutputTypeRestart/** restart type */,
                OutputTypeAll/** all type */,
                OutputTypeNone/** none type */
            };

            /** Print Method */
            public: enum PrintMethod
            {
                PrintMethodActual/** print method actual */,
                PrintMethodInterpolated/** print method interpolated */
            };

            /** Kinematic Method */
            public: enum KinematicMethod
            {
                KinematicMethodSingleStep/** kinematic method single step */,
                KinematicMethodMultiStep/** kinematic method multi step */
            };

            /** Assembling Method */
            public: enum AssemblingMethod
            {
                AssemblingMethodOneStage/** assembling method one stage */,
                AssemblingMethodTwoStages/** assembling method two stages */
            };

            /** Redundancy Check */
            public: enum RedundancyCheck
            {
                RedundancyCheckYes/** redundancy check yes */,
                RedundancyCheckNo/** redundancy check no */,
                RedundancyCheckFullPivoting/** redundancy check full pivoting */
            };

            /** Redundant Constraint Check */
            public: enum RedundantConstraintCheck
            {
                RedundantConstraintCheckEveryTimeStep/** constraint check every time step */,
                RedundantConstraintCheckBeginningOfSimulation/** constraint check beginning of simulation */
            };

            /** Matrix Scaling */
            public: enum MatrixScaling
            {
                MatrixScalingStandard/** matrix scaling standard */,
                MatrixScalingIterative/** matrix scaling iterative */
            };

            /** Static Solver Type */
            public: enum StaticSolverType
            {
                StaticSolverTypeHarwell/** static solver type Harwell */,
                StaticSolverTypeQrFull/** static solver type QR full */
            };

            /** Static Jacobian Type */
            public: enum StaticJacobianType
            {
                StaticJacobianTypeFinite/** static Jacobian type finite */,
                StaticJacobianTypeExact/** static Jacobian type exact */
            };

            /** Dynamic Integration Method */
            public: enum DynamicIntegrationMethod
            {
                DynamicIntegrationMethodBdf/** dynamic integration method BDF */,
                DynamicIntegrationMethodPece/** dynamic integration method PECE */
            };

            /** Dynamic Solver Acceleration */
            public: enum DynamicSolverAcceleration
            {
                DynamicSolverAccelerationBanded/** dynamic solver acceleration banded */,
                DynamicSolverAccelerationHarwell/** dynamic solver acceleration Harwell */,
                DynamicSolverAccelerationIterative/** dynamic solver acceleration iterative */
            };

            /** Dynamic Initial Velocity Method */
            public: enum DynamicInitialVelocityMethod
            {
                DynamicInitialVelocityMethodQr/** dynamic initial velocity method QR */,
                DynamicInitialVelocityMethodMoorePenrosePseudoInverse/** dynamic initial velocity method Moore Penrose pseudo inverse */,
                DynamicInitialVelocityMethodMinimumKineticEnergy/** dynamic initial velocity method minimum kinetic energy */
            };

            /** Constraints Optimization Exclude Type */
            public: enum ConstraintsOptimizationExcludeType
            {
                ConstraintsOptimizationExcludeTypeNone/** constraints optimization exclude type none */,
                ConstraintsOptimizationExcludeTypeSelect/** constraints optimization exclude type select */
            };

            /** Time Series File Name Format */
            public: enum TimeSeriesFileNameFormat
            {
                TimeSeriesFileNameFormatOutputName/** time series file name format output name */,
                TimeSeriesFileNameFormatResultOutputName/** time series file name format result output name */
            };

            /** Vehicle Road Height Adjustment */
            public: enum VehicleRoadHeightAdjustment
            {
                VehicleRoadHeightAdjustmentNone/** vehicle road height adjustment none */,
                VehicleRoadHeightAdjustmentRoad/** vehicle road height adjustment road */,
                VehicleRoadHeightAdjustmentVehicle/** vehicle road height adjustment vehicle */
            };

            private: MotionSolutionBuilderImpl * m_motionsolutionbuilder_impl;
            private: friend class  _MotionSolutionBuilderBuilder;
            protected: MotionSolutionBuilder();
            public: ~MotionSolutionBuilder();
            /**Returns  the solution type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionSolutionBuilder::SolutionTypes SolutionType
            (
            );
            /**Sets  the solution type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolutionType
            (
                NXOpen::Motion::MotionSolutionBuilder::SolutionTypes solutionType /** solutiontype */ 
            );
            /**Returns  the analysis type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionSolutionBuilder::AnalysisTypes AnalysisType
            (
            );
            /**Sets  the analysis type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAnalysisType
            (
                NXOpen::Motion::MotionSolutionBuilder::AnalysisTypes analysisType /** analysistype */ 
            );
            /**Returns  the step 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Step
            (
            );
            /**Sets  the step 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStep
            (
                int step /** step */ 
            );
            /**Returns  the Static Analysis option
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool StaticAnalysis
            (
            );
            /**Sets  the Static Analysis option
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticAnalysis
            (
                bool staticAnalysis /** staticanalysis */ 
            );
            /**Returns  the gravity vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * GravityVector
            (
            );
            /**Sets  the gravity vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetGravityVector
            (
                NXOpen::Direction * gravityVector /** gravityvector */ 
            );
            /**Returns  the description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
            /**Sets  the description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the Adams Solver property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AdamsSolverProperty * AdamsSolverProperty
            (
            );
            /**Sets  the Adams Solver property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAdamsSolverProperty
            (
                NXOpen::Motion::AdamsSolverProperty * adamsSolverProperty /** adamssolverproperty */ 
            );
            /**Returns  the Recurdyn Solver property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::RecurdynSolverProperty * RecurdynSolverProperty
            (
            );
            /**Sets  the Recurdyn Solver property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRecurdynSolverProperty
            (
                NXOpen::Motion::RecurdynSolverProperty * recurdynSolverProperty /** recurdynsolverproperty */ 
            );
            /**Returns  the LMS Solver property 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use @link NXOpen::Motion::EntityPropTableBuilder::GetReferencePropertyValue NXOpen::Motion::EntityPropTableBuilder::GetReferencePropertyValue@endlink , @link NXOpen::Motion::EntityPropTableBuilder::GetScalarExpressionPropertyValue NXOpen::Motion::EntityPropTableBuilder::GetScalarExpressionPropertyValue@endlink  and @link NXOpen::Motion::EntityPropTableBuilder::GetIntegerPropertyValue NXOpen::Motion::EntityPropTableBuilder::GetIntegerPropertyValue@endlink  <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use NXOpen::Motion::EntityPropTableBuilder::GetReferencePropertyValue, NXOpen::Motion::EntityPropTableBuilder::GetScalarExpressionPropertyValue and NXOpen::Motion::EntityPropTableBuilder::GetIntegerPropertyValue") NXOpen::Motion::LmsSolverProperty * LmsSolverProperty
            (
            );
            /**Sets  the LMS Solver property 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use @link NXOpen::Motion::EntityPropTableBuilder::SetReferencePropertyValue NXOpen::Motion::EntityPropTableBuilder::SetReferencePropertyValue@endlink , @link NXOpen::Motion::EntityPropTableBuilder::SetScalarExpressionPropertyValue NXOpen::Motion::EntityPropTableBuilder::SetScalarExpressionPropertyValue@endlink  and @link NXOpen::Motion::EntityPropTableBuilder::SetIntegerPropertyValue NXOpen::Motion::EntityPropTableBuilder::SetIntegerPropertyValue@endlink  <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use NXOpen::Motion::EntityPropTableBuilder::SetReferencePropertyValue, NXOpen::Motion::EntityPropTableBuilder::SetScalarExpressionPropertyValue and NXOpen::Motion::EntityPropTableBuilder::SetIntegerPropertyValue") void SetLmsSolverProperty
            (
                NXOpen::Motion::LmsSolverProperty * lmsSolverProperty /** lmssolverproperty */ 
            );
            /**Returns  the skipped steps option
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSkipStep
            (
            );
            /**Sets  the skipped steps option
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSkipStep
            (
                bool isSkipStep /** isskipstep */ 
            );
            /**Returns  the skipped steps
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SkipSteps
            (
            );
            /**Sets  the skipped steps
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSkipSteps
            (
                const NXString & skipSteps /** skipsteps */ 
            );
            /**Sets  the skipped steps
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetSkipSteps
            (
                const char * skipSteps /** skipsteps */ 
            );
            /**Returns  the time expression 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TimeExpression
            (
            );
            /**Returns  the gravity value expression
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GravityValueExpression
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
