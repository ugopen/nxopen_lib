#ifndef NXOpen_CAE_NODETRANSLATEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_NODETRANSLATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_NodeTranslateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class NodeTranslateBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectFENodeList;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace Fields
    {
        class FieldWrapper;
    }
    class Point;
    namespace CAE
    {
        class _NodeTranslateBuilderBuilder;
        class NodeTranslateBuilderImpl;
        /**
            Represents a @link NXOpen::CAE::NodeTranslateBuilder NXOpen::CAE::NodeTranslateBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::NodeElementManager::CreateNodeTranslateBuilder  NXOpen::CAE::NodeElementManager::CreateNodeTranslateBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  NodeTranslateBuilder : public NXOpen::Builder
        {
            /** the copy types */
            public: enum CopyType
            {
                CopyTypeTranslateOnly/**translate only */,
                CopyTypeCopyTranslate/**copy translate */
            };

            /** the method types */
            public: enum MethodType
            {
                MethodTypeByComponents/**by components */,
                MethodTypeAlongDirection/**along direction */,
                MethodTypeAlignVectors/**align vectors */,
                MethodTypePointToPoint/**point to point */,
                MethodTypeScaleModel/**scale model */,
                MethodTypeByField/**by field*/
            };

            /** the distance types */
            public: enum DistanceType
            {
                DistanceTypePerCopy/**per copy */,
                DistanceTypeTotal/**total */
            };

            /** the label types */
            public: enum LabelType
            {
                LabelTypeLabelIncrement/**label increment */,
                LabelTypeByOffset/**by offset */
            };

            private: NodeTranslateBuilderImpl * m_nodetranslatebuilder_impl;
            private: friend class  _NodeTranslateBuilderBuilder;
            protected: NodeTranslateBuilder();
            public: ~NodeTranslateBuilder();
            /**Returns  the copy option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodeTranslateBuilder::CopyType CopyOption
            (
            );
            /**Sets  the copy option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCopyOption
            (
                NXOpen::CAE::NodeTranslateBuilder::CopyType copyOption /** copyoption */ 
            );
            /**Returns  the node 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectFENodeList * Node
            (
            );
            /**Returns  the scale factor 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double ScaleFactor
            (
            );
            /**Sets  the scale factor 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the scale factor 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldWrapper * Field
            (
            );
            /**Sets  the scale factor 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetField
            (
                NXOpen::Fields::FieldWrapper * fieldTag /** fieldtag */ 
            );
            /**Returns  the num copy 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int NumCopy
            (
            );
            /**Sets  the num copy 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNumCopy
            (
                int numCopy /** numcopy */ 
            );
            /**Returns  the method option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodeTranslateBuilder::MethodType MethodOption
            (
            );
            /**Sets  the method option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMethodOption
            (
                NXOpen::CAE::NodeTranslateBuilder::MethodType methodOption /** methodoption */ 
            );
            /**Returns  the csys 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * Csys
            (
            );
            /**Sets  the csys 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCsys
            (
                NXOpen::CoordinateSystem * csys /** csys */ 
            );
            /**Returns  the vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the distance option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodeTranslateBuilder::DistanceType DistanceOption
            (
            );
            /**Sets  the distance option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetDistanceOption
            (
                NXOpen::CAE::NodeTranslateBuilder::DistanceType distanceOption /** distanceoption */ 
            );
            /**Returns  the x distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * XDistance
            (
            );
            /**Returns  the y distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * YDistance
            (
            );
            /**Returns  the z distance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ZDistance
            (
            );
            /**Returns  the t angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TAngle
            (
            );
            /**Returns  the p angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PAngle
            (
            );
            /**Returns  the label option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::NodeTranslateBuilder::LabelType LabelOption
            (
            );
            /**Sets  the label option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabelOption
            (
                NXOpen::CAE::NodeTranslateBuilder::LabelType labelOption /** labeloption */ 
            );
            /**Returns  the label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Label
            (
            );
            /**Sets  the label 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabel
            (
                int label /** label */ 
            );
            /**Returns  the increment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
            /**Returns  the offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Offset
            (
            );
            /**Sets  the offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetOffset
            (
                int offset /** offset */ 
            );
            /**Returns  the source point 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointSource
            (
            );
            /**Sets  the source point 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPointSource
            (
                NXOpen::Point * sourcePoint /** sourcepoint */ 
            );
            /**Returns  the target point 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointTarget
            (
            );
            /**Sets  the target point 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPointTarget
            (
                NXOpen::Point * targetPoint /** targetpoint */ 
            );
            /**Returns  the source vector 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * VectorSource
            (
            );
            /**Sets  the source vector 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVectorSource
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the target vector 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * VectorTarget
            (
            );
            /**Sets  the target vector 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVectorTarget
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the x scale factor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double XScaleFactor
            (
            );
            /**Sets  the x scale factor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetXScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the y scale factor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double YScaleFactor
            (
            );
            /**Sets  the y scale factor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetYScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the z scale factor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ZScaleFactor
            (
            );
            /**Sets  the z scale factor 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetZScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
