#ifndef NXOpen_ANIMATIONDESIGNER_INVERSEKINEMATICSBUILDER_HXX_INCLUDED
#define NXOpen_ANIMATIONDESIGNER_INVERSEKINEMATICSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AnimationDesigner_InverseKinematicsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libanimationdesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AnimationDesigner
    {
        class InverseKinematicsBuilder;
    }
    class Builder;
    class Point;
    class SelectNXObject;
    namespace AnimationDesigner
    {
        class _InverseKinematicsBuilderBuilder;
        class InverseKinematicsBuilderImpl;
        /** Represents a @link AnimationDesigner::InverseKinematicsBuilder AnimationDesigner::InverseKinematicsBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::AnimationDesigner::InverseKinematicsCollection::CreateInverseKinematicsBuilder  NXOpen::AnimationDesigner::InverseKinematicsCollection::CreateInverseKinematicsBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class ANIMATIONDESIGNEROPENCPPEXPORT  InverseKinematicsBuilder : public NXOpen::Builder
        {
            /** Specifies the result of the inverse kinematics solver. */
            public: enum Result
            {
                ResultNotSolved/** Could not solve due to error. */,
                ResultSuccess/** Successfully solved. */,
                ResultApproximate/** The target is not reachable, closest solution is returned. */,
                ResultLimits/** The target is not reachable due to limits, closest solution is returned. */
            };

            private: InverseKinematicsBuilderImpl * m_inversekinematicsbuilder_impl;
            private: friend class  _InverseKinematicsBuilderBuilder;
            protected: InverseKinematicsBuilder();
            public: ~InverseKinematicsBuilder();
            /**Returns  the rigid group. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * RigidGroup
            (
            );
            /**Returns  the start point. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** startpoint */ 
            );
            /**Returns  the target point. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TargetPoint
            (
            );
            /**Sets  the target point. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetTargetPoint
            (
                NXOpen::Point * targetPoint /** targetpoint */ 
            );
            /**Returns  the collision option. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool AvoidCollision
            (
            );
            /**Sets  the collision option. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetAvoidCollision
            (
                bool avoidCollision /** avoidcollision */ 
            );
            /** Sets the orientations. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetOrientation
            (
                const NXOpen::Matrix3x3 & startOrit /** The start orientation matrix. */,
                const NXOpen::Matrix3x3 & targetOrit /** The target orientation matrix. */
            );
            /** Gets the orientations. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetOrientation
            (
                NXOpen::Matrix3x3* startOrit /** The start orientation matrix. */,
                NXOpen::Matrix3x3* targetOrit /** The target orientation matrix. */
            );
            /** Returns the solver result.  @return  The result of the inverse kinematics solver 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXOpen::AnimationDesigner::InverseKinematicsBuilder::Result GetResult
            (
            );
            /**Returns  the name. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_animationdesigner (" NX Animation Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
