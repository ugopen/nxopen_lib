#ifndef NXOpen_CAE_CORRELTESTANALYSISSOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_CAE_CORRELTESTANALYSISSOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CorrelTestAnalysisSolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PreTestExciterConfig.hxx>
#include <NXOpen/CAE_PreTestSensorConfig.hxx>
#include <NXOpen/CAE_PreTestSolution.hxx>
#include <NXOpen/CAE_SelectGroupsBuilder.hxx>
#include <NXOpen/CAE_SimSolution.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CorrelTestAnalysisSolutionBuilder;
    }
    class Builder;
    namespace CAE
    {
        class CaeDOFSet;
    }
    namespace CAE
    {
        class PreTestExciterConfig;
    }
    namespace CAE
    {
        class PreTestSensorConfig;
    }
    namespace CAE
    {
        class PreTestSolution;
    }
    namespace CAE
    {
        class SelectGroupsBuilder;
    }
    namespace CAE
    {
        class SimSolution;
    }
    class Expression;
    namespace CAE
    {
        class _CorrelTestAnalysisSolutionBuilderBuilder;
        class CorrelTestAnalysisSolutionBuilderImpl;
        /** Represents the builder for the Test Analysis Solution.  <br> To create a new instance of this class, use @link NXOpen::CAE::CorrelSolutionCollection::CreateCorrelTestAnalysisSolutionBuilder  NXOpen::CAE::CorrelSolutionCollection::CreateCorrelTestAnalysisSolutionBuilder @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CorrelTestAnalysisSolutionBuilder : public NXOpen::Builder
        {
            /** the source type.*/
            public: enum SourceType
            {
                SourceTypeSolution/** solution */ ,
                SourceTypePreTestSolution/** pre test solution */ 
            };

            /** the method type.*/
            public: enum MethodType
            {
                MethodTypeAutomatic/** automatic */ ,
                MethodTypeManual/** manual */ 
            };

            private: CorrelTestAnalysisSolutionBuilderImpl * m_correltestanalysissolutionbuilder_impl;
            private: friend class  _CorrelTestAnalysisSolutionBuilderBuilder;
            protected: CorrelTestAnalysisSolutionBuilder();
            public: ~CorrelTestAnalysisSolutionBuilder();
            /**Returns  the name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the source 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CorrelTestAnalysisSolutionBuilder::SourceType Source
            (
            );
            /**Sets  the source 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetSource
            (
                NXOpen::CAE::CorrelTestAnalysisSolutionBuilder::SourceType source /** source */ 
            );
            /**Returns  the solution 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * Solution
            (
            );
            /**Sets  the solution 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetSolution
            (
                NXOpen::CAE::SimSolution * solution /** solution */ 
            );
            /**Returns  the pre-test solution 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PreTestSolution * PreTestSolution
            (
            );
            /**Sets  the pre-test solution 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetPreTestSolution
            (
                NXOpen::CAE::PreTestSolution * preTestSolution /** pretestsolution */ 
            );
            /**Returns  the detect active mode sensors 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool DetectActiveModeSensors
            (
            );
            /**Sets  the detect active mode sensors 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetDetectActiveModeSensors
            (
                bool detectActiveModeSensors /** detectactivemodesensors */ 
            );
            /**Returns  the DOF Set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CaeDOFSet * DofSet
            (
            );
            /**Sets  the DOF Set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetDofSet
            (
                NXOpen::CAE::CaeDOFSet * dofSet /** dofset */ 
            );
            /**Returns  the config index 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PreTestSensorConfig * Config
            (
            );
            /**Sets  the config index 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetConfig
            (
                NXOpen::CAE::PreTestSensorConfig * config /** config */ 
            );
            /**Returns  the exciter config index 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PreTestExciterConfig * ExciterConfig
            (
            );
            /**Sets  the exciter config index 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetExciterConfig
            (
                NXOpen::CAE::PreTestExciterConfig * config /** config */ 
            );
            /** Clear the exciter config
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void ClearExciterConfig
            (
            );
            /**Returns  the wireframe creation method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::CorrelTestAnalysisSolutionBuilder::MethodType Method
            (
            );
            /**Sets  the wireframe creation method 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetMethod
            (
                NXOpen::CAE::CorrelTestAnalysisSolutionBuilder::MethodType method /** method */ 
            );
            /**Returns  the minimum angle between wires 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinAngleBetweenWires
            (
            );
            /**Returns  the maximum number of wires per node 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxNumOfWiresPerNode
            (
            );
            /**Sets  the maximum number of wires per node 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetMaxNumOfWiresPerNode
            (
                int maxNum /** maxnum */ 
            );
            /**Returns  the maximum distance ratio 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxDistanceRatio
            (
            );
            /**Sets  the maximum distance ratio 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetMaxDistanceRatio
            (
                double ratio /** ratio */ 
            );
            /**Returns  the selected groups 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectGroupsBuilder * GroupsSelection
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
