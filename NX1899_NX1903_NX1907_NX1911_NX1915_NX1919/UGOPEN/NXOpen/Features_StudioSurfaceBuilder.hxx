#ifndef NXOpen_FEATURES_STUDIOSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_STUDIOSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_StudioSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_AlignmentMethodBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_FlowDirection.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class StudioSurfaceBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class AlignmentMethodBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class FeatureOptions;
    }
    namespace GeometricUtilities
    {
        class FlowDirection;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    class SectionList;
    namespace Features
    {
        class _StudioSurfaceBuilderBuilder;
        class StudioSurfaceBuilderImpl;
        /**
            Represents a @link NXOpen::Features::StudioSurface NXOpen::Features::StudioSurface@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateStudioSurfaceBuilder  NXOpen::Features::FeatureCollection::CreateStudioSurfaceBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Transition </td> <td> 
         
        NormalToEndSections </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  StudioSurfaceBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** the transition control options when using By Points alignment
                    method */
            public: enum TransitionOptions
            {
                TransitionOptionsNormalToEndSections/** Normal to End Sections */,
                TransitionOptionsNormalToAllSections/** Normal to All Sections */,
                TransitionOptionsCubic/** Cubic */,
                TransitionOptionsLinearAndBlend/** Linear and Blend */,
                TransitionOptionsNoEndConstraint/** No End Constraint */
            };

            private: StudioSurfaceBuilderImpl * m_studiosurfacebuilder_impl;
            private: friend class  _StudioSurfaceBuilderBuilder;
            protected: StudioSurfaceBuilder();
            public: ~StudioSurfaceBuilder();
            /**Returns  the list of sections 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SectionList * SectionList
            (
            );
            /**Returns  the list of guides 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SectionList * GuideList
            (
            );
            /**Returns  the first section continuity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * FirstSectionContinuity
            (
            );
            /**Returns  the last section continuity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * LastSectionContinuity
            (
            );
            /**Returns  the first guide continuity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * FirstGuideContinuity
            (
            );
            /**Returns  the last guide continuity 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * LastGuideContinuity
            (
            );
            /**Returns  the flow direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::FlowDirection * FlowDirection
            (
            );
            /**Returns  the alignment method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::AlignmentMethodBuilder * AlignmentMethod
            (
            );
            /**Returns  the transition control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::StudioSurfaceBuilder::TransitionOptions Transition
            (
            );
            /**Sets  the transition control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetTransition
            (
                NXOpen::Features::StudioSurfaceBuilder::TransitionOptions transition /** transition */ 
            );
            /**Returns  the section rebuild 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Rebuild * SectionRebuild
            (
            );
            /**Returns  the guide rebuild 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Rebuild * GuideRebuild
            (
            );
            /**Returns  the position tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double PositionTolerance
            (
            );
            /**Sets  the position tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetPositionTolerance
            (
                double positionTolerance /** positiontolerance */ 
            );
            /**Returns  the tangent tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double TangentTolerance
            (
            );
            /**Sets  the tangent tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetTangentTolerance
            (
                double tangentTolerance /** tangenttolerance */ 
            );
            /**Returns  the curvature tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double CurvatureTolerance
            (
            );
            /**Sets  the curvature tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetCurvatureTolerance
            (
                double curvatureTolerance /** curvaturetolerance */ 
            );
            /**Returns  the intersection tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double IntersectionTolerance
            (
            );
            /**Sets  the intersection tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetIntersectionTolerance
            (
                double intersectionTolerance /** intersectiontolerance */ 
            );
            /**Returns  the body type options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOptions * BodyPreference
            (
            );
            /**Returns  the split output along boundary curves option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: bool SplitOutputAlongBoundaryCurves
            (
            );
            /**Sets  the split output along boundary curves option 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetSplitOutputAlongBoundaryCurves
            (
                bool splitOutput /** splitoutput */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
