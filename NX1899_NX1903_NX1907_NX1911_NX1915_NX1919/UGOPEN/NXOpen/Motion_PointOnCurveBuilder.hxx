#ifndef NXOpen_MOTION_POINTONCURVEBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_POINTONCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PointOnCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion.hxx>
#include <NXOpen/Motion_FlexCurveBuilder.hxx>
#include <NXOpen/Motion_MotionBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class PointOnCurveBuilder;
    }
    class Expression;
    namespace Motion
    {
        class FlexCurveBuilder;
    }
    namespace Motion
    {
        class MotionBuilder;
    }
    namespace Motion
    {
        class SelectLink;
    }
    class Point;
    class SelectNXObjectList;
    namespace Motion
    {
        class _PointOnCurveBuilderBuilder;
        class PointOnCurveBuilderImpl;
        /**
            Represents a @link NXOpen::Motion::PointOnCurveBuilder NXOpen::Motion::PointOnCurveBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::Motion::PointOnCurveCollection::CreatePointOnCurveBuilder  NXOpen::Motion::PointOnCurveCollection::CreatePointOnCurveBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CurveParameterizedType </td> <td> 
         
        Spacing </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  PointOnCurveBuilder : public NXOpen::Motion::MotionBuilder
        {
            /** Contact type */
            public: enum Type
            {
                TypeRigidCurve/** rigid curve */ ,
                TypeFlexibleCurve/** flexible curve */ 
            };

            private: PointOnCurveBuilderImpl * m_pointoncurvebuilder_impl;
            private: friend class  _PointOnCurveBuilderBuilder;
            protected: PointOnCurveBuilder();
            public: ~PointOnCurveBuilder();
            /**Returns  the override state of motion body, which should only be used for occurrence 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState LinkOvrCtrl
            (
            );
            /**Sets  the override state of motion body, which should only be used for occurrence 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the action motion body 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectLink * Link
            (
            );
            /**Returns  the override state of point , which should only be used for occurrence
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState PointOvrCtrl
            (
            );
            /**Sets  the override state of point , which should only be used for occurrence
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPointOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the selected point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the selected point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns   the override state of the curves, which should only be used for occurrence 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState CurvesOvrCtrl
            (
            );
            /**Sets   the override state of the curves, which should only be used for occurrence 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCurvesOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the curves 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Curves
            (
            );
            /**Returns  the curve parameterized type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::CurveParameterizedTypes CurveParameterizedType
            (
            );
            /**Sets  the curve parameterized type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCurveParameterizedType
            (
                NXOpen::Motion::CurveParameterizedTypes curveParameterizedType /** curveparameterizedtype */ 
            );
            /**Returns  the user defined spacing 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SpacingExpression
            (
            );
            /**Returns  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::PointOnCurveBuilder::Type TypeOption
            (
            );
            /**Sets  the type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTypeOption
            (
                NXOpen::Motion::PointOnCurveBuilder::Type type /** type */ 
            );
            /**Returns  the flexible curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::FlexCurveBuilder * FlexibleCurve
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
