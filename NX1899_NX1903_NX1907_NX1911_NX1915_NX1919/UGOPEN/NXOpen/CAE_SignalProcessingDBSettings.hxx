#ifndef NXOpen_CAE_SIGNALPROCESSINGDBSETTINGS_HXX_INCLUDED
#define NXOpen_CAE_SIGNALPROCESSINGDBSETTINGS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SignalProcessingDBSettings.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SignalProcessingDBSettings;
    }
    class Unit;
    namespace CAE
    {
        class _SignalProcessingDBSettingsBuilder;
        class SignalProcessingDBSettingsImpl;
        /**  @brief  This is the class handling the dB settings option: a dB reference value and a dB format
            (10 or 20).  

            This object is initialized with a Part::Unit::Type. Based on the measure type of this unit, a default 
            dB reference value is retrieved from the customer defaults and a dB format is applied.

            In addition, for measure types which are defined in the customer defaults, a MKS unit is derived,
            in which the dB reference is expressed. 
            The GetConvertedReference method returns the dB reference value converted to the unit that was 
            specified when constructing the object.

             

          <br>   <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SignalProcessingDBSettings : public NXOpen::TaggedObject
        {
            /** This enum defines the dB formats */
            public: enum DBFormats
            {
                DBFormatsDb10/** 10 */,
                DBFormatsDb20/** 20 */
            };

            private: SignalProcessingDBSettingsImpl * m_signalprocessingdbsettings_impl;
            private: friend class  _SignalProcessingDBSettingsBuilder;
            protected: SignalProcessingDBSettings();
            public: ~SignalProcessingDBSettings();
            /**Returns  the dB format to apply
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SignalProcessingDBSettings::DBFormats DBFormat
            (
            );
            /**Sets  the dB format to apply
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDBFormat
            (
                NXOpen::CAE::SignalProcessingDBSettings::DBFormats format /** format */ 
            );
            /**Returns  the dB reference to apply
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double DBReference
            (
            );
            /**Sets  the dB reference to apply
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDBReference
            (
                double dBReference /** dbreference */ 
            );
            /** Gets the dB reference value converted to the units of the data.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double GetReferenceForTargetUnit
            (
                NXOpen::Unit * targetUnit /** targetunit */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
