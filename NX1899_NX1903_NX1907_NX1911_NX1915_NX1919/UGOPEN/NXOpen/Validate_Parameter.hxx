#ifndef NXOpen_VALIDATE_PARAMETER_HXX_INCLUDED
#define NXOpen_VALIDATE_PARAMETER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_Parameter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/RuleManager.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class Parameter;
    }
    namespace Validate
    {
        class ParameterImpl;
        /**  @brief  Represents a NX @link NXOpen::Validate::Parameter NXOpen::Validate::Parameter@endlink .  

         
              <br> A parameter is defined with a name, value formula and data type as well as whether the parameter can hold multiple
             values or single value and the data to build pull down menu or List selection dialogue to customize the values at runtime.
             Parameters are used to execute check logic. <br> 
            
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  Parameter : public NXOpen::TransientObject
        {
            private: ParameterImpl * m_parameter_impl;
            /// \cond NX_NO_DOC 
            public: explicit Parameter(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~Parameter();
            /**Returns  the title string of the parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Title
            (
            );
            /**Returns  the data type of a parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::RuleManager::RuleType Type
            (
            );
            /** Finds out if a parameter is single value or multi-value. True - multi-value list; false - single value. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsList
            (
            );
            /** Gets boolean type value from a single value parameter. @return  The boolean type value.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetBooleanValue
            (
            );
            /** Gets boolean type values from a multi-value parameter. @return  The boolean type values.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<bool> GetBooleanValues
            (
            );
            /** Sets boolean type value to a single value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBooleanValue
            (
                bool data /** The boolean type value.*/
            );
            /** Sets boolean type values to a multi-value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBooleanValues
            (
                const std::vector<bool> & data /** The boolean type values.*/
            );
            /** Gets integer number type value from a single value parameter. @return  The integer number type value.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int GetIntValue
            (
            );
            /** Gets integer number type values from a multi-value parameter. @return  The integer number type values.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetIntValues
            (
            );
            /** Sets integer number type value to a single value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntValue
            (
                int data /** The integer number type value.*/
            );
            /** Sets integer number type values to a multi-value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIntValues
            (
                const std::vector<int> & data /** The integer number type values.*/
            );
            /** Gets real number type value from a single value parameter. @return  The real number type value.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double GetDoubleValue
            (
            );
            /** Gets real number type values from a multi-value parameter. @return  The real number type values.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetDoubleValues
            (
            );
            /** Sets real number type value to a single value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoubleValue
            (
                double data /** The real number type value.*/
            );
            /** Sets real number type values to a multi-value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDoubleValues
            (
                const std::vector<double> & data /** The real number type values.*/
            );
            /** Gets string type value from a single value parameter. @return  The string type value.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetStringValue
            (
            );
            /** Gets string type values from a multi-value parameter. @return  The string type values.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetStringValues
            (
            );
            /** Sets string type value to a single value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStringValue
            (
                const NXString & data /** The string type value.*/
            );
            /** Sets string type value to a single value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            void SetStringValue
            (
                const char * data /** The string type value.*/
            );
            /** Sets string type values to a multi-value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStringValues
            (
                std::vector<NXString> & data /** The string type values.*/
            );
            /** Gets @link Point3d Point3d@endlink  type value from a single value parameter. @return  Point3d type value.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d GetPoint3dValue
            (
            );
            /** Gets @link Point3d Point3d@endlink  type values from a multi-value parameter. @return  Point3d type values.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Point3d> GetPoint3dValues
            (
            );
            /** Sets @link Point3d Point3d@endlink  type value to a single value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPoint3dValue
            (
                const NXOpen::Point3d & data /** Point3d type value.*/
            );
            /** Sets @link Point3d Point3d@endlink  type values to a multi-value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPoint3dValues
            (
                const std::vector<NXOpen::Point3d> & data /** Point3d type values.*/
            );
            /** Gets @link Vector3d Vector3d@endlink  type value from a single value parameter. @return  Vector3d type value.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vector3d GetVector3dValue
            (
            );
            /** Gets @link Vector3d Vector3d@endlink  type values from a multi-value parameter. @return  Vector3d type values.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Vector3d> GetVector3dValues
            (
            );
            /** Sets @link Vector3d Vector3d@endlink  type value to a single value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVector3dValue
            (
                const NXOpen::Vector3d & data /** Vector3d type value.*/
            );
            /** Sets @link Vector3d Vector3d@endlink  type values to a multi-value parameter.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVector3dValues
            (
                const std::vector<NXOpen::Vector3d> & data /** Vector3d type values.*/
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
