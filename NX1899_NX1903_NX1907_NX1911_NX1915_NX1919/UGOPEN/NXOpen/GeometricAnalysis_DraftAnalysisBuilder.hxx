#ifndef NXOpen_GEOMETRICANALYSIS_DRAFTANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_DRAFTANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_DraftAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_GeometricConstraintDataManager.hxx>
#include <NXOpen/GeometricUtilities_DisplayResolutionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class DraftAnalysisBuilder;
    }
    class Builder;
    class Direction;
    class DisplayableObject;
    namespace Features
    {
        class GeometricConstraintDataManager;
    }
    namespace GeometricUtilities
    {
        class DisplayResolutionBuilder;
    }
    class SelectDisplayableObject;
    class SelectDisplayableObjectList;
    namespace GeometricAnalysis
    {
        class _DraftAnalysisBuilderBuilder;
        class DraftAnalysisBuilderImpl;
        /** Represents a Draft Analysis builder  <br> To create a new instance of this class, use @link NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateDraftAnalysisBuilder  NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateDraftAnalysisBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CoupleLimit </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        CreateCSYS </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DrawOption </td> <td> 
         
        Orientation </td> </tr> 

        <tr><td> 
         
        JoinIsocline </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LimitAngleNegative </td> <td> 
         
        -5 </td> </tr> 

        <tr><td> 
         
        LimitAnglePositive </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        OutputOption </td> <td> 
         
        AnalysisObject </td> </tr> 

        <tr><td> 
         
        Resolution.AngleTolerance </td> <td> 
         
        15.0 </td> </tr> 

        <tr><td> 
         
        Resolution.EdgeTolerance </td> <td> 
         
        0.005 </td> </tr> 

        <tr><td> 
         
        Resolution.FaceTolerance </td> <td> 
         
        0.005 </td> </tr> 

        <tr><td> 
         
        Resolution.Resolution </td> <td> 
         
        Standard </td> </tr> 

        <tr><td> 
         
        Resolution.WidthTolerance </td> <td> 
         
        0.3 </td> </tr> 

        <tr><td> 
         
        ShowIsoclineNegative </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ShowIsoclinePositive </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ShowPartingLine </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TranslucencyInsideNegative </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TranslucencyInsidePositive </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TranslucencyOutsideNegative </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TranslucencyOutsidePositive </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  DraftAnalysisBuilder : public NXOpen::Builder
        {
            /** define draw direction items */
            public: enum DrawDirection
            {
                DrawDirectionVector/** vector; */,
                DrawDirectionOrientation/** orientation; */
            };

            /** define output options */
            public: enum SelectOutput
            {
                SelectOutputAnalysisObject/** analysis object; */,
                SelectOutputIsoclines/** isoclines; */,
                SelectOutputBoth/** analysis object and isoclines; */
            };

            private: DraftAnalysisBuilderImpl * m_draftanalysisbuilder_impl;
            private: friend class  _DraftAnalysisBuilderBuilder;
            protected: DraftAnalysisBuilder();
            public: ~DraftAnalysisBuilder();
            /**Returns  the faces or facet bodies 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * SelectObject
            (
            );
            /** Reverses all normals 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void ReverseAllNormals
            (
            );
            /**Returns  the individual face normal
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * ReverseIndividual
            (
            );
            /**Returns  the draw option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::DraftAnalysisBuilder::DrawDirection DrawOption
            (
            );
            /**Sets  the draw option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDrawOption
            (
                NXOpen::GeometricAnalysis::DraftAnalysisBuilder::DrawDirection drawOption /** drawoption */ 
            );
            /**Returns  the draw vector 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DrawVector
            (
            );
            /**Sets  the draw vector 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDrawVector
            (
                NXOpen::Direction * drawVector /** drawvector */ 
            );
            /**Returns  the draw origin 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d DrawOrigin
            (
            );
            /**Sets  the draw origin 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDrawOrigin
            (
                const NXOpen::Point3d & drawOrigin /** draworigin */ 
            );
            /**Returns  the draw orientation 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 DrawOrientation
            (
            );
            /**Sets  the draw orientation 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDrawOrientation
            (
                const NXOpen::Matrix3x3 & drawOrientation /** draworientation */ 
            );
            /**Returns  the show parting line 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowPartingLine
            (
            );
            /**Sets  the show parting line 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetShowPartingLine
            (
                bool showPartingLine /** showpartingline */ 
            );
            /**Returns  the positive limit angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double LimitAnglePositive
            (
            );
            /**Sets  the positive limit angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetLimitAnglePositive
            (
                double limitAnglePos /** limitanglepos */ 
            );
            /**Returns  the positive isocline 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowIsoclinePositive
            (
            );
            /**Sets  the positive isocline 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetShowIsoclinePositive
            (
                bool showIsoclinePos /** showisoclinepos */ 
            );
            /**Returns  the coupling limit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CoupleLimit
            (
            );
            /**Sets  the coupling limit 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetCoupleLimit
            (
                bool coupleLimit /** couplelimit */ 
            );
            /**Returns  the positive outside translucenty 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int TranslucencyOutsidePositive
            (
            );
            /**Sets  the positive outside translucenty 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetTranslucencyOutsidePositive
            (
                int translucencyOutsidePos /** translucencyoutsidepos */ 
            );
            /** Returns the positive outside color  @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetColorOutsidePositive
            (
            );
            /** Sets the positive outside color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetColorOutsidePositive
            (
                const std::vector<double> & colorOutsidePos /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns  the positive inside translucency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int TranslucencyInsidePositive
            (
            );
            /**Sets  the positive inside translucency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetTranslucencyInsidePositive
            (
                int translucencyInsidePos /** translucencyinsidepos */ 
            );
            /** Returns the positive inside color  @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetColorInsidePositive
            (
            );
            /** Sets the positive inside color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetColorInsidePositive
            (
                const std::vector<double> & colorInsidePos /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns  the negative limit angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double LimitAngleNegative
            (
            );
            /**Sets  the negative limit angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetLimitAngleNegative
            (
                double limitAngleNeg /** limitangleneg */ 
            );
            /**Returns  the negative isocline 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowIsoclineNegative
            (
            );
            /**Sets  the negative isocline 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetShowIsoclineNegative
            (
                bool showIsoclineNeg /** showisoclineneg */ 
            );
            /**Returns  the negative outside tanslucency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int TranslucencyOutsideNegative
            (
            );
            /**Sets  the negative outside tanslucency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetTranslucencyOutsideNegative
            (
                int translucencyOutsideNeg /** translucencyoutsideneg */ 
            );
            /** Returns the negative outside color  @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetColorOutsideNegative
            (
            );
            /** Sets the negative outside color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetColorOutsideNegative
            (
                const std::vector<double> & colorOutsideNeg /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns  the negative inside translucency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int TranslucencyInsideNegative
            (
            );
            /**Sets  the negative inside translucency 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetTranslucencyInsideNegative
            (
                int translucencyInsideNeg /** translucencyinsideneg */ 
            );
            /** Returns the negative inside color  @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetColorInsideNegative
            (
            );
            /** Sets the negative inside color 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetColorInsideNegative
            (
                const std::vector<double> & colorInsideNeg /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns  the output option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::DraftAnalysisBuilder::SelectOutput OutputOption
            (
            );
            /**Sets  the output option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetOutputOption
            (
                NXOpen::GeometricAnalysis::DraftAnalysisBuilder::SelectOutput outputOption /** outputoption */ 
            );
            /**Returns  the joining isocline 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool JoinIsocline
            (
            );
            /**Sets  the joining isocline 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetJoinIsocline
            (
                bool joinIsocline /** joinisocline */ 
            );
            /**Returns  the datum CSYS creation 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool CreateCSYS
            (
            );
            /**Sets  the datum CSYS creation 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetCreateCSYS
            (
                bool createCSYS /** createcsys */ 
            );
            /**Returns  the constraint manager 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GeometricConstraintDataManager * DynamicLabel
            (
            );
            /** Adds dynamic points to the draft analysis object 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void AddDynamicPoints
            (
            );
            /** Sets number of dynamic normals 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetTotalDynamicNormals
            (
                int total /** total */ 
            );
            /** Sets dynamic normal 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDynamicNormal
            (
                int index /** index */ ,
                const NXOpen::Vector3d & normal /** normal */ 
            );
            /** Sets dynamic parent 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void SetDynamicParent
            (
                int index /** index */ ,
                NXOpen::DisplayableObject * parent /** parent */ 
            );
            /**Returns  the display resolution 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DisplayResolutionBuilder * Resolution
            (
            );
            /** Reverses individual face normal 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void ReverseNormal
            (
                NXOpen::DisplayableObject * face /** face */ 
            );
            /** Deselects faces 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void DeselectFaces
            (
                const std::vector<NXOpen::DisplayableObject *> & faces /** faces */ 
            );
            /** Updates reverse map 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void UpdateReverseMap
            (
            );
            /** Removes dynamic label parents 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void RemoveLabelParents
            (
                const std::vector<NXOpen::DisplayableObject *> & parents /** parents */ 
            );
            /** Deletes dynamic labels whose corresponding positions are set to true in the array 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
            public: void DeleteDynamicLabels
            (
                const std::vector<bool> & deletedLabels /** deletedlabels */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
