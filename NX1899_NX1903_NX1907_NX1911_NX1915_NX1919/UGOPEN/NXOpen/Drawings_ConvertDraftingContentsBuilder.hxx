#ifndef NXOpen_DRAWINGS_CONVERTDRAFTINGCONTENTSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_CONVERTDRAFTINGCONTENTSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ConvertDraftingContentsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_SettingsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ConvertDraftingContentsBuilder;
    }
    class Builder;
    namespace Drawings
    {
        class SelectDraftingViewList;
    }
    namespace Drawings
    {
        class SettingsBuilder;
    }
    class SelectNXObjectList;
    class SelectViewList;
    namespace Drawings
    {
        class _ConvertDraftingContentsBuilderBuilder;
        class ConvertDraftingContentsBuilderImpl;
        /**
            Represents a @link Drawings::ConvertDraftingContentsBuilder Drawings::ConvertDraftingContentsBuilder@endlink .
            This class queries and sets settings specific to drafting data which will get converted to PMI.
            This class will always return NULL_TAG on commit and GetCommittedObjects function is not going to return objects commited by this builder.

            Refer to "Convert to PMI report" to know about the objects converted using this builder.
             <br> To create a new instance of this class, use @link NXOpen::Drawings::ConvertToPMIBuilderManager::CreateConvertDraftingContentsBuilder  NXOpen::Drawings::ConvertToPMIBuilderManager::CreateConvertDraftingContentsBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        SelectionType </td> <td> 
         
        Drawing </td> </tr> 

        <tr><td> 
         
        UseContextAssembly </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ConvertDraftingContentsBuilder : public NXOpen::Builder
        {
            /** enum is used to list out different entity that can be use for conversion */
            public: enum SelectConversionEntityType
            {
                SelectConversionEntityTypeDrawing/** drawing */ ,
                SelectConversionEntityTypeSheet/** sheet */ ,
                SelectConversionEntityTypeView/** view */ ,
                SelectConversionEntityTypeAnnotation/** annotation */ 
            };

            private: ConvertDraftingContentsBuilderImpl * m_convertdraftingcontentsbuilder_impl;
            private: friend class  _ConvertDraftingContentsBuilderBuilder;
            protected: ConvertDraftingContentsBuilder();
            public: ~ConvertDraftingContentsBuilder();
            /**Returns  the selection type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ConvertDraftingContentsBuilder::SelectConversionEntityType SelectionType
            (
            );
            /**Sets  the selection type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSelectionType
            (
                NXOpen::Drawings::ConvertDraftingContentsBuilder::SelectConversionEntityType selectionType /** selectiontype */ 
            );
            /**Returns  the select drafting view block 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SelectDraftingViewList * SelectDraftingView
            (
            );
            /**Returns  the select drafting sheet block. 
                    Expect selection object of type DraftingSheet, validation is done at builder level 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectViewList * SelectDraftingSheet
            (
            );
            /**Returns  the select objects to convert 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectObjectsToConvert
            (
            );
            /**Returns  the use context assembly 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseContextAssembly
            (
            );
            /**Sets  the use context assembly 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUseContextAssembly
            (
                bool useContextAssembly /** usecontextassembly */ 
            );
            /**Returns  the configuration file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ConfigurationFile
            (
            );
            /**Sets  the configuration file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetConfigurationFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the configuration file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetConfigurationFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the settings 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SettingsBuilder * SettingsBuilder
            (
            );
            /** Context assembly part file path 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetContextAssembly
            (
                const NXString & contextAssembly /** contextassembly */ 
            );
            /** Context assembly part file path 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetContextAssembly
            (
                const char * contextAssembly /** contextassembly */ 
            );
            /**Returns  the option to open converted pmi destination part 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool OpenConvertedPmiDestinationPart
            (
            );
            /**Sets  the option to open converted pmi destination part 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOpenConvertedPmiDestinationPart
            (
                bool openConvertedPmiDestinationPart /** openconvertedpmidestinationpart */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
