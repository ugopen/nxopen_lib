#ifndef NXOpen_MESHPARAMETERDATA_HXX_INCLUDED
#define NXOpen_MESHPARAMETERDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MeshParameterData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class MeshParameterData;
    class MeshParameterDataImpl;
    /** Represents surface rebuild data structure.  <br> To create a new instance of this class, use @link NXOpen::Features::MeshSurfaceBuilder::NewParametersData  NXOpen::Features::MeshSurfaceBuilder::NewParametersData @endlink  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  MeshParameterData : public NXOpen::TransientObject
    {
        /** Mesh surface feature types. */
        public: enum FeatureType
        {
            FeatureTypeCurveMesh/** curve mesh */  = 2,
            FeatureTypeThroughCurves/** through curves */ ,
            FeatureTypeRuled/** ruled */ 
        };

        /** Mesh parameters. */
        public: enum Type
        {
            TypeUnused/** unused */ ,
            TypeAlignedByParameter/** aligned by parameter */ ,
            TypeAlignedByArclength/** aligned by arclength */ ,
            TypeAlignedByDistance/** aligned by distance */ ,
            TypeAlignedByAngle/** aligned by angle */ ,
            TypeAlignedBySpine/** aligned by spine */ ,
            TypeAlignedByPoint/** aligned by point */ ,
            TypeAlignedBySplinePt/** aligned by spline pt */ ,
            TypeAlignedBySegment/** aligned by segment */ ,
            TypePatchBezier/** patch bezier */ ,
            TypePatchBspline/** patch bspline */ ,
            TypePatchClosedBspline/** patch closed bspline */ ,
            TypePatchMatchString/** patch match string */ ,
            TypeEmphasizePrimary/** emphasize primary */ ,
            TypeEmphasizeCross/** emphasize cross */ ,
            TypeEmphasizeBoth/** emphasize both */ ,
            TypeFitExact/** fit exact */ ,
            TypeFitApproximate/** fit approximate */ ,
            TypeVclosedOpen/** vclosed open */ ,
            TypeVclosedClose/** vclosed close */ 
        };

        private: MeshParameterDataImpl * m_meshparameterdata_impl;
        /// \cond NX_NO_DOC 
        public: explicit MeshParameterData(void *ptr);
        /// \endcond 
        /** Dispose transient object. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~MeshParameterData();
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetAlignmentType
        (
            NXOpen::MeshParameterData::Type alignmentType /** alignment type */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: NXOpen::MeshParameterData::Type AlignmentType
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetPatch
        (
            NXOpen::MeshParameterData::Type patch /** patch */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: NXOpen::MeshParameterData::Type Patch
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetEmphasize
        (
            NXOpen::MeshParameterData::Type emphasize /** emphasize */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: NXOpen::MeshParameterData::Type Emphasize
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetFitMethod
        (
            NXOpen::MeshParameterData::Type fitMethod /** fit method */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: NXOpen::MeshParameterData::Type FitMethod
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetVdegree
        (
            int vdegree /** vdegree */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: int Vdegree
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetVclose
        (
            NXOpen::MeshParameterData::Type vclose /** vclose */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: NXOpen::MeshParameterData::Type Vclose
        (
        );
        /**Sets  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: void SetUseSplinePoint
        (
            bool useSplinePoint /** use spline point */ 
        );
        /**Returns  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
        public: bool UseSplinePoint
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
