#ifndef NXOpen_FEATURES_MESHTRANSFORMERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MESHTRANSFORMERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MeshTransformerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class MeshTransformerBuilder;
    }
    class Builder;
    namespace Facet
    {
        class SelectFacetedBody;
    }
    class ScCollector;
    class Section;
    namespace Features
    {
        class _MeshTransformerBuilderBuilder;
        class MeshTransformerBuilderImpl;
        /**
            Represents a @link NXOpen::Features::MeshTransformer NXOpen::Features::MeshTransformer@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateMeshTransformerBuilder  NXOpen::Features::FeatureCollection::CreateMeshTransformerBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AsOriginalOption </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ContinuityTypeOption </td> <td> 
         
        C4 </td> </tr> 

        <tr><td> 
         
        HideOriginal </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MeshTopologyOption </td> <td> 
         
        Aligned </td> </tr> 

        <tr><td> 
         
        ShowTransformVectors </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SmoothingOption </td> <td> 
         
        Normal </td> </tr> 

        <tr><td> 
         
        StepCount </td> <td> 
         
        Number8 </td> </tr> 

        <tr><td> 
         
        TransformFactor </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  MeshTransformerBuilder : public NXOpen::Builder
        {
            /** Mesh topology option type */
            public: enum MeshTopologyType
            {
                MeshTopologyTypeAligned/** Aligned */,
                MeshTopologyTypeUnaligned/** Unaligned */,
                MeshTopologyTypeEndOnly/** End only */
            };

            /** Continuity type */
            public: enum ContinuityType
            {
                ContinuityTypeC2/** C2 continuity */,
                ContinuityTypeC4/** C4 continuity */
            };

            /** Smoothing option type */
            public: enum SmoothingType
            {
                SmoothingTypeVeryLow/** Smoothing very low */,
                SmoothingTypeLow/** Smoothing low */,
                SmoothingTypeNormal/** Smoothing normal */,
                SmoothingTypeHigh/** Smoothing high */,
                SmoothingTypeVeryHigh/** Smoothing high */
            };

            /** Step count enum value for converting to actual count number */
            public: enum StepCountValue
            {
                StepCountValueNumber8/** Step count 8 */,
                StepCountValueNumber16/** Step count 16 */,
                StepCountValueNumber32/** Step count 32 */,
                StepCountValueNumber64/** Step count 64 */,
                StepCountValueNumber128/** Step count 128 */,
                StepCountValueNumber256/** Step count 256 */,
                StepCountValueNumber512/** Step count 512 */
            };

            private: MeshTransformerBuilderImpl * m_meshtransformerbuilder_impl;
            private: friend class  _MeshTransformerBuilderBuilder;
            protected: MeshTransformerBuilder();
            public: ~MeshTransformerBuilder();
            /**Returns  the faces to be transformed 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TransformFaces
            (
            );
            /**Returns  the curves to be transformed 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * TransformCurves
            (
            );
            /**Returns  the option for setting the mesh topology used in the transformation or morphing calculations 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MeshTransformerBuilder::MeshTopologyType MeshTopologyOption
            (
            );
            /**Sets  the option for setting the mesh topology used in the transformation or morphing calculations 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetMeshTopologyOption
            (
                NXOpen::Features::MeshTransformerBuilder::MeshTopologyType meshTopologyOption /** meshtopologyoption */ 
            );
            /**Returns  the start facet body 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::SelectFacetedBody * StartFacetBody
            (
            );
            /**Returns  the end facet body 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::SelectFacetedBody * EndFacetBody
            (
            );
            /**Returns  the option to hide the original geometries after creating new geometries 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool HideOriginal
            (
            );
            /**Sets  the option to hide the original geometries after creating new geometries 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : sc_omnimesh (" OmniCAD Mesh Transformer for CAE") OR omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetHideOriginal
            (
                bool hideOriginal /** hideoriginal */ 
            );
            /**Returns  the option to use the same colors and layers of the original geometries for creating new geometries 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool AsOriginalOption
            (
            );
            /**Sets  the option to use the same colors and layers of the original geometries for creating new geometries 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : sc_omnimesh (" OmniCAD Mesh Transformer for CAE") OR omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetAsOriginalOption
            (
                bool asOriginalOption /** asoriginaloption */ 
            );
            /**Returns  the option to show temporary transform vectors in preview 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowTransformVectors
            (
            );
            /**Sets  the option to show temporary transform vectors in preview 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : sc_omnimesh (" OmniCAD Mesh Transformer for CAE") OR omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetShowTransformVectors
            (
                bool showTransformVectors /** showtransformvectors */ 
            );
            /**Returns  the continuity type option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MeshTransformerBuilder::ContinuityType ContinuityTypeOption
            (
            );
            /**Sets  the continuity type option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : sc_omnimesh (" OmniCAD Mesh Transformer for CAE") OR omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetContinuityTypeOption
            (
                NXOpen::Features::MeshTransformerBuilder::ContinuityType continuityTypeOption /** continuitytypeoption */ 
            );
            /**Returns  the transform factor that magnifies or shrinks the displacements from the transformation or morphing calculations  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double TransformFactor
            (
            );
            /**Sets  the transform factor that magnifies or shrinks the displacements from the transformation or morphing calculations  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : sc_omnimesh (" OmniCAD Mesh Transformer for CAE") OR omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetTransformFactor
            (
                double transformFactor /** transformfactor */ 
            );
            /**Returns  the smoothing option used in the transformation or morphing calculations 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MeshTransformerBuilder::SmoothingType SmoothingOption
            (
            );
            /**Sets  the smoothing option used in the transformation or morphing calculations 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetSmoothingOption
            (
                NXOpen::Features::MeshTransformerBuilder::SmoothingType smoothingOption /** smoothingoption */ 
            );
            /**Returns  the step count value used in the transformation or morphing calculations 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MeshTransformerBuilder::StepCountValue StepCount
            (
            );
            /**Sets  the step count value used in the transformation or morphing calculations 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : sc_omnimesh (" OmniCAD Mesh Transformer for CAE") OR omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetStepCount
            (
                NXOpen::Features::MeshTransformerBuilder::StepCountValue stepCount /** stepcount */ 
            );
            /**Returns  the distance tolerance used in the transformation or morphing calculations 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance used in the transformation or morphing calculations 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : sc_omnimesh (" OmniCAD Mesh Transformer for CAE") OR omnimesh_for_nx (" OmniCAD Mesh Transformer") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
