#ifndef NXOpen_CAE_SIGNALPROCESSINGPLOTDATA_HXX_INCLUDED
#define NXOpen_CAE_SIGNALPROCESSINGPLOTDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SignalProcessingPlotData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_FTK_IApplicationData.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SignalProcessingPlotData;
    }
    namespace CAE
    {
        namespace FTK
        {
            class IApplicationData;
        }
    }
    class NXObject;
    namespace CAE
    {
        class _SignalProcessingPlotDataBuilder;
        class SignalProcessingPlotDataImpl;
        /**  @brief  Exposes the ability to change the Spectrum scaling, correction mode and acoustical 
            weighting applied on a curve displayed in a XY plot.
             

          <br> Use CAE.FTK.IApplicationDataOwner.GetApplicationData  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SignalProcessingPlotData : public NXOpen::NXObject, public virtual NXOpen::CAE::FTK::IApplicationData
        {
            /** This enum defines the spectrum scaling */
            public: enum ScalingType
            {
                ScalingTypeUnknown/** Unkonwn */,
                ScalingTypePeak/** Peak */,
                ScalingTypeRms/** RMS */
            };

            /** This enum defines the correction modes */
            public: enum CorrectionMode
            {
                CorrectionModeUnknown/** Unkonwn */,
                CorrectionModeEnergy/** Energy */,
                CorrectionModeAmplitude/** Amplitude */
            };

            /** This enum defines the acoustical weightings */
            public: enum AcousticalWeighting
            {
                AcousticalWeightingUnknown/** Unkonwn */,
                AcousticalWeightingNone/** None */,
                AcousticalWeightingA/** A */,
                AcousticalWeightingB/** B */,
                AcousticalWeightingC/** C */,
                AcousticalWeightingD/** D */,
                AcousticalWeightingAb/** AB */,
                AcousticalWeightingBc/** BC */
            };

            private: SignalProcessingPlotDataImpl * m_signalprocessingplotdata_impl;
            private: friend class  _SignalProcessingPlotDataBuilder;
            protected: SignalProcessingPlotData();
            public: ~SignalProcessingPlotData();
            /**Returns  the requested target scaling for the curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SignalProcessingPlotData::ScalingType TargetScaling
            (
            );
            /**Sets  the requested target scaling for the curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetScaling
            (
                NXOpen::CAE::SignalProcessingPlotData::ScalingType spectrumScaling /** spectrumscaling */ 
            );
            /**Returns  the requested target correction mode for the curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SignalProcessingPlotData::CorrectionMode TargetCorrectionMode
            (
            );
            /**Sets  the requested target correction mode for the curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetCorrectionMode
            (
                NXOpen::CAE::SignalProcessingPlotData::CorrectionMode correctionMode /** correctionmode */ 
            );
            /**Returns  the requested target acoustical weighting to apply on the curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SignalProcessingPlotData::AcousticalWeighting TargetWeighting
            (
            );
            /**Sets  the requested target acoustical weighting to apply on the curve
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetWeighting
            (
                NXOpen::CAE::SignalProcessingPlotData::AcousticalWeighting weighting /** weighting */ 
            );
            /** Asks the count of attributes which could be showed on legend table 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual int AskNumberOfDisplayableAttributes
            (
            );
            /** Asks the name of a displayable attribute 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString AskNthDisplayableAttributeName
            (
                int nth /** nth */ 
            );
            /** Asks the value of a displayable attribute 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString AskNthDisplayableAttributeValue
            (
                int nth /** nth */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
