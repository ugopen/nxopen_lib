#ifndef NXOpen_MECHATRONICS_SIGNALMAPPINGCONNECTIONBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_SIGNALMAPPINGCONNECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_SignalMappingConnectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_SignalMappingBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class SignalMappingConnectionBuilder;
    }
    class Builder;
    namespace Mechatronics
    {
        class SignalAdapter;
    }
    class NXObject;
    namespace Mechatronics
    {
        class _SignalMappingConnectionBuilderBuilder;
        class SignalMappingConnectionBuilderImpl;
        /**  @brief  Represents a @link Mechatronics::SignalMappingConnectionBuilder Mechatronics::SignalMappingConnectionBuilder@endlink 
                 

          
             <br> To create a new instance of this class, use @link NXOpen::Mechatronics::SignalMappingConnectionCollection::CreateConnectionBuilder  NXOpen::Mechatronics::SignalMappingConnectionCollection::CreateConnectionBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  SignalMappingConnectionBuilder : public NXOpen::Builder
        {
            private: SignalMappingConnectionBuilderImpl * m_signalmappingconnectionbuilder_impl;
            private: friend class  _SignalMappingConnectionBuilderBuilder;
            protected: SignalMappingConnectionBuilder();
            public: ~SignalMappingConnectionBuilder();
            /**Returns   @brief  the signal adapter object.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::SignalAdapter * Adapter
            (
            );
            /**Sets   @brief  the signal adapter object.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetAdapter
            (
                NXOpen::Mechatronics::SignalAdapter * adapter /** adapter */ 
            );
            /**Returns   @brief  the signal object.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::NXObject * Signal
            (
            );
            /**Sets   @brief  the signal object.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSignal
            (
                NXOpen::NXObject * signal /** signal */ 
            );
            /**Returns   @brief  the external signal configuration part.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::NXObject * ConfigurationPart
            (
            );
            /**Sets   @brief  the external signal configuration part.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConfigurationPart
            (
                NXOpen::NXObject * configurationPart /** configurationpart */ 
            );
            /**Returns   @brief  the external signal client type.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Mechatronics::SignalMappingBuilder::AppOption ClientType
            (
            );
            /**Sets   @brief  the external signal client type.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetClientType
            (
                NXOpen::Mechatronics::SignalMappingBuilder::AppOption eClientType /** eclienttype */ 
            );
            /**Returns   @brief  the external signal configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString ConfigurationName
            (
            );
            /**Sets   @brief  the external signal configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConfigurationName
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**Sets   @brief  the external signal configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetConfigurationName
            (
                const char * configurationName /** configurationname */ 
            );
            /**Returns   @brief  the external signal name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString ExternalSignalName
            (
            );
            /**Sets   @brief  the external signal name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetExternalSignalName
            (
                const NXString & externalSignalName /** externalsignalname */ 
            );
            /**Sets   @brief  the external signal name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetExternalSignalName
            (
                const char * externalSignalName /** externalsignalname */ 
            );
            /**Returns   @brief  the connection name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString ConnectionName
            (
            );
            /**Sets   @brief  the connection name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConnectionName
            (
                const NXString & connectionName /** connectionname */ 
            );
            /**Sets   @brief  the connection name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetConnectionName
            (
                const char * connectionName /** connectionname */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
