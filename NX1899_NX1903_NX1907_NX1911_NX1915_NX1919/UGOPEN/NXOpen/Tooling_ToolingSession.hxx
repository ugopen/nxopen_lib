#ifndef NXOpen_TOOLING_TOOLINGSESSION_HXX_INCLUDED
#define NXOpen_TOOLING_TOOLINGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ToolingSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Tooling_CloneObject.hxx>
#include <NXOpen/Tooling_SpreadsheetData.hxx>
#include <NXOpen/Tooling_ToolingManager.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ToolingSession;
    }
    class Session;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class NXObject;
    namespace Tooling
    {
        class CloneObject;
    }
    namespace Tooling
    {
        class SpreadsheetData;
    }
    namespace Tooling
    {
        class ToolingSessionImpl;
        /** Represents Tooling session  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ToolingSession
        {
            private: ToolingSessionImpl * m_toolingsession_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ToolingSession(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ToolingSession();
            /** Creates an instance of class @link NXOpen::Tooling::SpreadsheetData NXOpen::Tooling::SpreadsheetData@endlink . 
                        Please note this method will only create an empty class @link NXOpen::Tooling::SpreadsheetData NXOpen::Tooling::SpreadsheetData@endlink  object,
                        it needs to call other method @link NXOpen::Tooling::SpreadsheetData::ReadData NXOpen::Tooling::SpreadsheetData::ReadData@endlink  to retrieve the data.
                      @return  the new @link NXOpen::Tooling::SpreadsheetData NXOpen::Tooling::SpreadsheetData@endlink  instance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SpreadsheetData * CreateSpreadsheetData
            (
            );
            /** Creates the clone operation object  @return  the new @link NXOpen::Tooling::CloneObject NXOpen::Tooling::CloneObject@endlink  instance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CloneObject * CreateCloneObject
            (
                NXOpen::Tooling::ToolingApplication applicationType /** Application type to determine the clone settings */,
                NXOpen::Tooling::ToolingCloneaction cloneActionType /** Clone action type */
            );
            /** Return the component generated in the previous "Add Reusable Component" operation.  @return  The array of reuseable components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> GetReusableComponent
            (
            );
            /** Gets the last added reusable object 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetReusableObjects
            (
                NXOpen::NXObject * part /** Tag of the part that contains reusable objects */,
                std::vector<NXOpen::NXObject *> & reusableObjects /** Objects, mainly bodies, from the input part */
            );
            /** Opens an existing part, but does not set it to be the displayed part.  @return  Part Tag
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::BasePart * LoadReusablePart
            (
                const NXString & filename /** Name of part file */,
                bool isNativePart /** Is the file from native or TC */
            );
            /** Opens an existing part, but does not set it to be the displayed part.  @return  Part Tag
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            NXOpen::BasePart * LoadReusablePart
            (
                const char * filename /** Name of part file */,
                bool isNativePart /** Is the file from native or TC */
            );
            /** Close an existing part 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: void ClosePart
            (
                NXOpen::NXObject * part /** Tag of the part that will be closed */,
                NXOpen::BasePart::CloseWholeTree wholeTree /** If true, unloads all components of the part.
                                If false, unloads only the top-level part */,
                NXOpen::BasePart::CloseModified closeModified /** Behavior of close if component
                                parts are modified. */
            );
            /** Create component pattern 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void CreateComponentPattern
            (
                NXOpen::NXObject * component /** component */ ,
                NXOpen::NXObject * targetEntity /** targetentity */ 
            );
            /** Sets the wizard type of tooling application. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetWizardType
            (
                int type /** wizard type of current tooling application */
            );
            /** Sets the wizard type status of tooling application. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWizardTypeStatus
            (
                NXOpen::Tooling::ToolingApplicationstatus statusType /** statustype */ 
            );
            /** Sets the entry identifier of reusing Standard Part Management dialog 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetEntryIdentifier
            (
                const NXString & entryIdentifier /** entryidentifier */ 
            );
            /** Sets the entry identifier of reusing Standard Part Management dialog 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void SetEntryIdentifier
            (
                const char * entryIdentifier /** entryidentifier */ 
            );
            /** JA method to assign an attribute to the given object 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void AssignAttribute
            (
                NXOpen::NXObject * objectTag /** objecttag */ ,
                const NXString & attributeName /** attributename */ ,
                const NXString & attributeValue /** attributevalue */ 
            );
            /** JA method to assign an attribute to the given object 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void AssignAttribute
            (
                NXOpen::NXObject * objectTag /** objecttag */ ,
                const char * attributeName /** attributename */ ,
                const char * attributeValue /** attributevalue */ 
            );
            /** Resets shrinkage attribute value
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void ResetShrinkageAttribute
            (
                NXOpen::NXObject * objectTag /** objecttag */ ,
                bool recalculateValue /** recalculatevalue */ ,
                int scaleType /**  the type of scale feature */,
                std::vector<NXString> & expressionValues /**  expression values */
            );
            /** Fully load all the children parts of the given parent part. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void LoadInterpartData
            (
                NXOpen::NXObject * objectTag /** the parent part whose children part to be loaded. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
