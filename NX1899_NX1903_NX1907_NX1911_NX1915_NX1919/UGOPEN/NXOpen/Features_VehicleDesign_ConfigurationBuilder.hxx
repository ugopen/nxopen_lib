#ifndef NXOpen_FEATURES_VEHICLEDESIGN_CONFIGURATIONBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_CONFIGURATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_ConfigurationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class ConfigurationBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Features
    {
        namespace VehicleDesign
        {
            class _ConfigurationBuilderBuilder;
            class ConfigurationBuilderImpl;
            /**         
                Represents a @link NXOpen::Features::VehicleDesign::ConfigurationBuilder NXOpen::Features::VehicleDesign::ConfigurationBuilder@endlink  for use in Vehicle design configuration.
                 <br> To create a new instance of this class, use @link NXOpen::Features::VehicleDesignCollection::CreateConfigurationBuilder  NXOpen::Features::VehicleDesignCollection::CreateConfigurationBuilder @endlink  <br> 
             <br>  Created in NX1899.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  ConfigurationBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
            {
                private: ConfigurationBuilderImpl * m_configurationbuilder_impl;
                private: friend class  _ConfigurationBuilderBuilder;
                protected: ConfigurationBuilder();
                public: ~ConfigurationBuilder();
                /**Returns  the name of the used standard type. 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString StandardType
                (
                );
                /**Sets  the name of the used standard type. 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetStandardType
                (
                    const NXString & standardType /** standardtype */ 
                );
                /**Sets  the name of the used standard type. 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetStandardType
                (
                    const char * standardType /** standardtype */ 
                );
                /**Returns  the option to indicate if the loading specified by the standard will be used. 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: bool UseStandardLoading
                (
                );
                /**Sets  the option to indicate if the loading specified by the standard will be used. 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetUseStandardLoading
                (
                    bool useStandardLoading /** usestandardloading */ 
                );
                /**Returns  the name of the used loading. 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Loading
                (
                );
                /**Sets  the name of the used loading. 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetLoading
                (
                    const NXString & loading /** loading */ 
                );
                /**Sets  the name of the used loading. 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetLoading
                (
                    const char * loading /** loading */ 
                );
                /** Validate whether the inputs to the component are sufficient for 
                            commit to be called.  If the component is not in a state to commit
                            then an exception is thrown.  For example, if the component requires
                            you to set some property, this method will throw an exception if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful 
                 <br>  Created in NX3.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
