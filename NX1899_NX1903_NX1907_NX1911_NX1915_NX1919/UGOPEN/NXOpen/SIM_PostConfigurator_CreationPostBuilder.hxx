#ifndef NXOpen_SIM_POSTCONFIGURATOR_CREATIONPOSTBUILDER_HXX_INCLUDED
#define NXOpen_SIM_POSTCONFIGURATOR_CREATIONPOSTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_PostConfigurator_CreationPostBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        namespace PostConfigurator
        {
            class CreationPostBuilder;
        }
    }
    class Builder;
    namespace SIM
    {
        namespace PostConfigurator
        {
            class _CreationPostBuilderBuilder;
            class CreationPostBuilderImpl;
            /** This class is used to create a new postprocessor.
                        Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.
                     <br> To create a new instance of this class, use @link NXOpen::SIM::PostConfigurator::PostConfiguratorManager::CreateCreationPostBuilder  NXOpen::SIM::PostConfigurator::PostConfiguratorManager::CreateCreationPostBuilder @endlink  <br> 
             <br>  Created in NX10.0.3.  <br>  
            */
            class NXOPENCPP_SIMEXPORT  CreationPostBuilder : public NXOpen::Builder
            {
                private: CreationPostBuilderImpl * m_creationpostbuilder_impl;
                private: friend class  _CreationPostBuilderBuilder;
                protected: CreationPostBuilder();
                public: ~CreationPostBuilder();
                /**Returns  the postprocessor's name. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : None */
                public: NXString PostprocessorName
                (
                );
                /**Sets  the postprocessor's name. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetPostprocessorName
                (
                    const NXString & name /** the postprocessor's new name */
                );
                /**Sets  the postprocessor's name. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetPostprocessorName
                (
                    const char * name /** the postprocessor's new name */
                );
                /**Returns  the Flag whether postprocessor's output directory is created with the postprocessor name or not. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: bool CreateDirectoryForPostprocessor
                (
                );
                /**Sets  the Flag whether postprocessor's output directory is created with the postprocessor name or not. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetCreateDirectoryForPostprocessor
                (
                    bool toggleState /** The create directory flag */
                );
                /**Returns  the postprocessor's output directory where the postprocessor is created. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : None */
                public: NXString PostprocessorOutputDirectory
                (
                );
                /**Sets  the postprocessor's output directory where the postprocessor is created. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetPostprocessorOutputDirectory
                (
                    const NXString & outputDirectory /** the postprocessor's new output directory */
                );
                /**Sets  the postprocessor's output directory where the postprocessor is created. 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetPostprocessorOutputDirectory
                (
                    const char * outputDirectory /** the postprocessor's new output directory */
                );
                /**Returns  the controller's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : None */
                public: NXString ControllerName
                (
                );
                /**Sets  the controller's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetControllerName
                (
                    const NXString & name /** the controller's new name */
                );
                /**Sets  the controller's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetControllerName
                (
                    const char * name /** the controller's new name */
                );
                /**Returns  the manufacturer's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : None */
                public: NXString ManufacturerName
                (
                );
                /**Sets  the manufacturer's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetManufacturerName
                (
                    const NXString & name /** the manufacturer's new name */
                );
                /**Sets  the manufacturer's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetManufacturerName
                (
                    const char * name /** the manufacturer's new name */
                );
                /**Returns  the machine's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : None */
                public: NXString MachineName
                (
                );
                /**Sets  the machine's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetMachineName
                (
                    const NXString & name /** the machine's new name */
                );
                /**Sets  the machine's name that is used for the postprocessor.
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetMachineName
                (
                    const char * name /** the machine's new name */
                );
                /** Returns the list of Controller Names in the postprocessor. @return  the list of available controller 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetControllerNames
                (
                );
                /** Returns the list of Manufacturer Names in the postprocessor. @return  the list of available manufacturer 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetManufacturerNames
                (
                );
                /** Returns the list of Machine Names in the postprocessor. @return  the list of available machine 
                 <br>  Created in NX10.0.3.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetMachineNames
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
