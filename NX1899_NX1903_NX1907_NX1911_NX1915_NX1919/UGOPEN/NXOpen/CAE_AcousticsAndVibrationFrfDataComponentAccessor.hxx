#ifndef NXOpen_CAE_ACOUSTICSANDVIBRATIONFRFDATACOMPONENTACCESSOR_HXX_INCLUDED
#define NXOpen_CAE_ACOUSTICSANDVIBRATIONFRFDATACOMPONENTACCESSOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AcousticsAndVibrationFrfDataComponentAccessor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DataReaderDatabaseOptions.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AcousticsAndVibrationFrfDataComponentAccessor;
    }
    namespace CAE
    {
        class DataReaderDatabaseOptions;
    }
    class NXObject;
    namespace CAE
    {
        class _AcousticsAndVibrationFrfDataComponentAccessorBuilder;
        class AcousticsAndVibrationFrfDataComponentAccessorImpl;
        /**
            Builds a @link NXOpen::CAE::AcousticsAndVibrationFrfDataComponentAccessor NXOpen::CAE::AcousticsAndVibrationFrfDataComponentAccessor@endlink  object
             <br> There is no kf creator for this.  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AcousticsAndVibrationFrfDataComponentAccessor : public NXOpen::NXObject
        {
            /** the FRF type enum: direct F/x or inverse x/F */
            public: enum FrfTypeEnum
            {
                FrfTypeEnumDirectStiffness/** direct stiffness */ ,
                FrfTypeEnumInverseStiffness/** inverse stiffness */ 
            };

            /** the QUANTITY selection enum */
            public: enum QuantityEnum
            {
                QuantityEnumDisplacement/** displacement */ ,
                QuantityEnumVelocity/** velocity */ ,
                QuantityEnumAcceleration/** acceleration */ 
            };

            private: AcousticsAndVibrationFrfDataComponentAccessorImpl * m_acousticsandvibrationfrfdatacomponentaccessor_impl;
            private: friend class  _AcousticsAndVibrationFrfDataComponentAccessorBuilder;
            protected: AcousticsAndVibrationFrfDataComponentAccessor();
            public: ~AcousticsAndVibrationFrfDataComponentAccessor();
            /** Returns the database options 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DataReaderDatabaseOptions * GetDatabaseOptions
            (
            );
            /**Returns  the File Path
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FilePath
            (
            );
            /**Sets  the File Path
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFilePath
            (
                const NXString & filePath /** filepath */ 
            );
            /**Sets  the File Path
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetFilePath
            (
                const char * filePath /** filepath */ 
            );
            /**Returns  the FRF type (Direct Stiffness or Inverse Stiffness) 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AcousticsAndVibrationFrfDataComponentAccessor::FrfTypeEnum FrfType
            (
            );
            /**Sets  the FRF type (Direct Stiffness or Inverse Stiffness) 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFrfType
            (
                NXOpen::CAE::AcousticsAndVibrationFrfDataComponentAccessor::FrfTypeEnum frfType /** frftype */ 
            );
            /**Returns  the quantity type (Displacement, Velocity or Acceleration) 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AcousticsAndVibrationFrfDataComponentAccessor::QuantityEnum Quantity
            (
            );
            /**Sets  the quantity type (Displacement, Velocity or Acceleration) 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetQuantity
            (
                NXOpen::CAE::AcousticsAndVibrationFrfDataComponentAccessor::QuantityEnum quantity /** quantity */ 
            );
            /** Gets the subcases used for filtering.
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSubcases
            (
                std::vector<NXString> & subcaseNames /** subcasenames */ 
            );
            /** Sets the subcases used for filtering. Clears previous selection.
                        On current version we expect empty or one subcase for FRFs.
                        If you pass more than one, then a JA_ERR_INVALID_PARAMETER_1 error code will be returned.
                        On OP2 files each DOF for each Node has a subcase associated, to compute on all of them please let this selection empty.
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSubcases
            (
                std::vector<NXString> & subcaseNames /** subcasenames */ 
            );
            /**Returns  the real part of the scaling factor 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double ScalingFactorReal
            (
            );
            /**Sets  the real part of the scaling factor 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalingFactorReal
            (
                double scalingFactorReal /** scalingfactorreal */ 
            );
            /**Returns  the imaginary part of the scaling factor 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double ScalingFactorImaginary
            (
            );
            /**Sets  the imaginary part of the scaling factor 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalingFactorImaginary
            (
                double scalingFactorImaginary /** scalingfactorimaginary */ 
            );
            /**Returns  the SVD relative tolerance in percent 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double SvdRelativeTolerance
            (
            );
            /**Sets  the SVD relative tolerance in percent 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSvdRelativeTolerance
            (
                double svdRelativeTolerance /** svdrelativetolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
