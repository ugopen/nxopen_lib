#ifndef NXOpen_TOOLING_CLONEPART_HXX_INCLUDED
#define NXOpen_TOOLING_CLONEPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ClonePart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ClonePart;
    }
    namespace Tooling
    {
        class ClonePartImpl;
        /**
                Represents the part inforamtion to be cloned in Add Reusable Component Builder.
              <br> To create an instace of this object use @link NXOpen::Tooling::CloneObject::CreateClonePartItem NXOpen::Tooling::CloneObject::CreateClonePartItem@endlink   <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ClonePart : public NXOpen::TransientObject
        {
            private: ClonePartImpl * m_clonepart_impl;
            /// \cond NX_NO_DOC 
            public: explicit ClonePart(void *ptr);
            /// \endcond 
            /** Dispose the part infomation to be cloned 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~ClonePart();
            /**Returns   the part name (item id in Teamcenter) before renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets   the part name (item id in Teamcenter) before renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPartName
            (
                const NXString & partName /** partname */ 
            );
            /**Sets   the part name (item id in Teamcenter) before renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetPartName
            (
                const char * partName /** partname */ 
            );
            /**Returns   the part name (item name in Teamcenter) after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewPartName
            (
            );
            /**Sets   the part name (item name in Teamcenter) after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewPartName
            (
                const NXString & clonedName /** clonedname */ 
            );
            /**Sets   the part name (item name in Teamcenter) after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetNewPartName
            (
                const char * clonedName /** clonedname */ 
            );
            /**Returns   the item id in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewItemId
            (
            );
            /**Sets   the item id in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewItemId
            (
                const NXString & itemId /** itemid */ 
            );
            /**Sets   the item id in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetNewItemId
            (
                const char * itemId /** itemid */ 
            );
            /**Returns   the mfk id in Teamcenter after renaming.
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewMfkId
            (
            );
            /**Sets   the mfk id in Teamcenter after renaming.
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewMfkId
            (
                const NXString & mfkId /** mfkid */ 
            );
            /**Sets   the mfk id in Teamcenter after renaming.
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void SetNewMfkId
            (
                const char * mfkId /** mfkid */ 
            );
            /**Returns   the revision id in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewRevisionId
            (
            );
            /**Sets   the revision id in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewRevisionId
            (
                const NXString & revId /** revid */ 
            );
            /**Sets   the revision id in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetNewRevisionId
            (
                const char * revId /** revid */ 
            );
            /**Returns   the item type in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewItemType
            (
            );
            /**Sets   the item type in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewItemType
            (
                const NXString & itemType /** itemtype */ 
            );
            /**Sets   the item type in Teamcenter after renaming.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetNewItemType
            (
                const char * itemType /** itemtype */ 
            );
            /**Returns   a value that indicates whether this object is to be cloned.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsClone
            (
            );
            /**Sets   a value that indicates whether this object is to be cloned.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetClone
            (
                bool isClone /** isclone */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
