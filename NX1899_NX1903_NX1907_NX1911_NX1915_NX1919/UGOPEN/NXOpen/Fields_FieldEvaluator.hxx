#ifndef NXOpen_FIELDS_FIELDEVALUATOR_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDEVALUATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldEvaluator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_FieldVariable.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class FieldEvaluator;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class _FieldEvaluatorBuilder;
        class FieldEvaluatorImpl;
        /**  @brief  Represents a Field Evaluator which can be used to evaluate a @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink . 
                                
                 

           <br> Use @link NXOpen::Fields::Field::GetFieldEvaluator NXOpen::Fields::Field::GetFieldEvaluator@endlink  to obtain an instance of this class  <br> 
         <br>  Created in NX7.5.2.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  FieldEvaluator : public NXOpen::TaggedObject
        {
            /**  Interpolation type */
            public: enum InterpolationEnum
            {
                InterpolationEnumNone/** No interpolation method; table can only be used as a lookup */,
                InterpolationEnumLinear1d/** Standard linear interpolation between bounding points */,
                InterpolationEnumNearestNeighbor1d/** Locates the nearest point and returns its value */,
                InterpolationEnumInverseDistanceWeighting1d/** Sum of the weighted value of all points, based on the inverse of the distance */,
                InterpolationEnumDelaunay2dFast/** Triangulates the independent values and uses the bounding triangle, sacrifices accuracy for speed */,
                InterpolationEnumDelaunay2dMedium/** Triangulates the independent values and uses the bounding triangle, compromise between accuracy and speed */,
                InterpolationEnumDelaunay2dAccurate/** Triangulates the independent values and uses the bounding triangle, sacrifices speed for accuracy */,
                InterpolationEnumNearestNeighbor2d/** Locates the nearest point in a plane and returns its value */,
                InterpolationEnumRenkaShepard2d/** Refined inverse distance weighting in 2D space */,
                InterpolationEnumInverseDistanceWeighting2d/** Sum of the weighted value of all points in 2D space, based on the inverse of the distance */,
                InterpolationEnumDelaunay3dFast/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, sacrifices accuracy for speed */,
                InterpolationEnumDelaunay3dMedium/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, compromise between accuracy and speed */,
                InterpolationEnumDelaunay3dAccurate/** Creates Tetrahedrals using the independent values and uses the bounding tetrahedron, sacrifices speed for accuracy */,
                InterpolationEnumNearestNeighbor3d/** Locates the nearest point in space and returns its value */,
                InterpolationEnumRenkaShepard3d/** Refined inverse distance weighting in 3D space */,
                InterpolationEnumInverseDistanceWeighting3d/** Sum of the weighted value of all points in 3D space, based on the inverse of the distance */,
                InterpolationEnumNearestNeighborNd/** Locates the nearest point in N dimensional space and returns its value */,
                InterpolationEnumRenkaShepardNd/** Refined inverse distance weighting in N dimensional space */,
                InterpolationEnumInverseDistanceWeightingNd/** Sum of the weighted value of all points in N dimensional, based on the inverse of the distance */,
                InterpolationEnumApproxNearestNeighbor2d/** Locates the approximate nearest point in a plane and returns its value */,
                InterpolationEnumApproxNearestNeighbor3d/** Locates the approximate nearest point in space and returns its value */,
                InterpolationEnumApproxNearestNeighborNd/** Locates the approximate nearest point in N dimensional space and returns its value */,
                InterpolationEnumAkima1d/** akima interpolation */,
                InterpolationEnumAkima721d/** akima72 interpolation */,
                InterpolationEnumCubic1d/** cubic interpolation */,
                InterpolationEnumBilinear2d/** linear interpolation in both directions */,
                InterpolationEnumBiakima2d/** akima interpolation in both directions */,
                InterpolationEnumBiakima722d/** akima72 interpolation in both directions */,
                InterpolationEnumBicubic2d/** cubic interpolation in both directions */,
                InterpolationEnumAkimaLinear2d/** akima interpolation in x direction, linear in y direction */,
                InterpolationEnumAkima72Linear2d/** akima72 interpolation in x direction, linear in y direction */,
                InterpolationEnumCubicLinear2d/** cubic interpolation in x direction, linear in y direction */
            };

            /** Log Options for Linear interpolator */
            public: enum LinearLogOptionEnum
            {
                LinearLogOptionEnumLinearLinear/** Standard linear interpolation. Both Independent variable and Dependent variable scaling are linear */,
                LinearLogOptionEnumLogLinear/** Independent variable scaling is logarithmic (ln), Dependent variable scaling is linear */,
                LinearLogOptionEnumLinearLog/** Independent variable scaling is linear, Dependent variable scaling is logarithmic (ln) */,
                LinearLogOptionEnumLogLog/** Both Independent variable and Dependent variable scaling are logarithmic (ln) */
            };

            /** Options for IDW (inverse weighted distance) interpolator */
            public: enum InverseDistanceWeightingEnum
            {
                InverseDistanceWeightingEnumAll/** Sum of the weighted value of all points, based on the inverse of the distance */,
                InverseDistanceWeightingEnumRadius/** Sum of the weighted value of points within a radius (as a fraction of the bounding box diagonal), based on the inverse of the distance */,
                InverseDistanceWeightingEnumNearestPoints/** Sum of the weighted value of N nearest points (as a fraction of the total number of points), based on the inverse of the distance */,
                InverseDistanceWeightingEnumNumNearestPoints/** Sum of the weighted value of N nearest points, based on the inverse of the distance */
            };

            /** Options for outside table values interpolation */
            public: enum ValuesOutsideTableInterpolationEnum
            {
                ValuesOutsideTableInterpolationEnumUndefined/** No interpolation result */,
                ValuesOutsideTableInterpolationEnumExtrapolate/** Extrapolates from the boundary out into space using the same interpolation method that the interpolator for interior table values uses */,
                ValuesOutsideTableInterpolationEnumConstant/** Returns the boundary value as interpolation result */,
                ValuesOutsideTableInterpolationEnumLinear/** Extrapolates from the boundary out into space using the linear extrapolation method */,
                ValuesOutsideTableInterpolationEnumParabolic/** Extrapolates from the boundary out into space using the parabolic extrapolation method */,
                ValuesOutsideTableInterpolationEnumCubic/** Extrapolates from the boundary out into space using the cubic extrapolation method */,
                ValuesOutsideTableInterpolationEnumUserdefined/** Returns the user specified value as the interpolation result */
            };

            private: FieldEvaluatorImpl * m_fieldevaluator_impl;
            private: friend class  _FieldEvaluatorBuilder;
            protected: FieldEvaluator();
            public: ~FieldEvaluator();
            /** Returns the dependent variables for this @link NXOpen::Fields::FieldEvaluator NXOpen::Fields::FieldEvaluator@endlink   
                     @return  dependent variables for this @link NXOpen::Fields::FieldEvaluator NXOpen::Fields::FieldEvaluator@endlink   
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetDependentVariables
            (
            );
            /** Returns the independent variables for this @link NXOpen::Fields::FieldEvaluator NXOpen::Fields::FieldEvaluator@endlink   
                     @return  independent variables for this @link NXOpen::Fields::FieldEvaluator NXOpen::Fields::FieldEvaluator@endlink   
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Fields::FieldVariable *> GetIndependentVariables
            (
            );
            /** Sets values at which the Field will be evaluated for this independent variable @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink . 
                        The number of input values mush be the same for independent variables and these values are assumed to be in the same units as the 
                        independent variable @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .   
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetIndependentVariableValues
            (
                NXOpen::Fields::FieldVariable * independentVariable /** independent variable whose values are being set. */,
                const std::vector<double> & values /** the values for this independent variable where the field will be evaluated at. */
            );
            /** Evaluate the Field at the specified independent variable @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink  values and return the values for the specified dependent variable. 
                        The number of output values will be the same as number of independent variables specified and these values will be in the same units as the 
                        dependent variable @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .   
                     @return  the values evaluated for this dependent variable 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<double> Evaluate
            (
                NXOpen::Fields::FieldVariable * dependentVariable /** dependent variable whose values are to be evaluated */
            );
            /**Returns   
                    the interpolation method used when this table data is evaluated.
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldEvaluator::InterpolationEnum InterpolationMethod
            (
            );
            /**Sets   
                    the interpolation method used when this table data is evaluated.
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetInterpolationMethod
            (
                NXOpen::Fields::FieldEvaluator::InterpolationEnum interpolationMethod /** the interpolation method  */
            );
            /** Delete this field evaluator; destroys the field evaluator and removes all references to it.
                    
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void Delete
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
