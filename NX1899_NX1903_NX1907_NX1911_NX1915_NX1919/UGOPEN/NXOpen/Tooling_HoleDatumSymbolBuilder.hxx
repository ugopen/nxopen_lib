#ifndef NXOpen_TOOLING_HOLEDATUMSYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_HOLEDATUMSYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_HoleDatumSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class HoleDatumSymbolBuilder;
    }
    class Builder;
    namespace Drawings
    {
        class SelectDraftingViewList;
    }
    class NXObject;
    class SelectNXObjectList;
    namespace Tooling
    {
        class _HoleDatumSymbolBuilderBuilder;
        class HoleDatumSymbolBuilderImpl;
        /** Creates hole datum symbol builder for progressive die. No entity is returned.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateHoleDatumSymbolBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateHoleDatumSymbolBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AttributeTitles </td> <td> 
         
        AttributeTitles </td> </tr> 

        <tr><td> 
         
        AttributeValues </td> <td> 
         
        AtributeValues </td> </tr> 

        <tr><td> 
         
        HoleDiameter </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        HoleTolerance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        HoleType </td> <td> 
         
        First </td> </tr> 

        <tr><td> 
         
        SelectHolesAccordingToAttribute </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  HoleDatumSymbolBuilder : public NXOpen::Builder
        {
            /** symbol type */
            public: enum SymbolType
            {
                SymbolTypeFirst/** first */ ,
                SymbolTypeSecond/** second */ ,
                SymbolTypeThird/** third */ ,
                SymbolTypeFourth/** fourth */ 
            };

            private: HoleDatumSymbolBuilderImpl * m_holedatumsymbolbuilder_impl;
            private: friend class  _HoleDatumSymbolBuilderBuilder;
            protected: HoleDatumSymbolBuilder();
            public: ~HoleDatumSymbolBuilder();
            /**Returns  the hole type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::HoleDatumSymbolBuilder::SymbolType HoleType
            (
            );
            /**Sets  the hole type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHoleType
            (
                NXOpen::Tooling::HoleDatumSymbolBuilder::SymbolType holeType /** holetype */ 
            );
            /**Returns  the select holes according to attribute 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool SelectHolesAccordingToAttribute
            (
            );
            /**Sets  the select holes according to attribute 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectHolesAccordingToAttribute
            (
                bool selectHolesAccordingToAttribute /** selectholesaccordingtoattribute */ 
            );
            /**Returns  the attribute titles 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AttributeTitles
            (
            );
            /**Sets  the attribute titles 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAttributeTitles
            (
                const NXString & attributeTitles /** attributetitles */ 
            );
            /**Sets  the attribute titles 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetAttributeTitles
            (
                const char * attributeTitles /** attributetitles */ 
            );
            /**Returns  the attribute values 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AttributeValues
            (
            );
            /**Sets  the attribute values 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAttributeValues
            (
                const NXString & attributeValues /** attributevalues */ 
            );
            /**Sets  the attribute values 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetAttributeValues
            (
                const char * attributeValues /** attributevalues */ 
            );
            /**Returns  the select view 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SelectDraftingViewList * SelectView
            (
            );
            /**Returns  the select holes 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectHoles
            (
            );
            /**Returns  the hole diameter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double HoleDiameter
            (
            );
            /**Sets  the hole diameter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHoleDiameter
            (
                double holeDiameter /** holediameter */ 
            );
            /**Returns  the hole tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double HoleTolerance
            (
            );
            /**Sets  the hole tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHoleTolerance
            (
                double holeTolerance /** holetolerance */ 
            );
            /** Update symbol size in view 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateSymbolSizeInView
            (
            );
            /**Returns  the select spreadsheet 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectSpreadsheet
            (
            );
            /**Sets  the select spreadsheet 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectSpreadsheet
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the select spreadsheet 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetSelectSpreadsheet
            (
                const char * filename /** filename */ 
            );
            /**Returns  the wizard type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /** The method to cycle objects in view  @return  Output object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::NXObject * CycleObjectsInView
            (
                NXOpen::NXObject * viewTag /** The view to cycle */,
                int vseqNumber /** The View Sequence Number of the View must NOT be DSS_ALL_VIEWS or DSS_NO_VIEWS */,
                bool isDrawing /** Is this view a drawing */,
                NXOpen::NXObject * inObject /** Input object */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
