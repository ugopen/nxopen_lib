#ifndef NXOpen_PDM_FILEMANAGEMENT_HXX_INCLUDED
#define NXOpen_PDM_FILEMANAGEMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_FileManagement.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/PDM_PdmFile.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class FileManagement;
    }
    class BasePart;
    class NXObject;
    namespace PDM
    {
        class PdmFile;
    }
    namespace PDM
    {
    }
    namespace PDM
    {
        class FileManagementImpl;
        /** This class is responsible for Teamcenter file management related activities.   <br> Use @link PDM::PdmSession::NewFileManagement PDM::PdmSession::NewFileManagement@endlink  to get the instance of this class.  <br> 
         <br>  Created in NX6.0.3.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  FileManagement : public NXOpen::TransientObject
        {
            /** PDM file types  */
            public: enum FileType
            {
                FileTypeCmmDmi/** cmm dmi */ ,
                FileTypeCpdFeaturePart/** cpd feature part */ ,
                FileTypeCpdGeometryOverride/** cpd geometry override */ ,
                FileTypeDirectModel/** direct model */ ,
                FileTypeExcel/** excel */ ,
                FileTypeExcelX/** excel x */ ,
                FileTypeImage/** image */ ,
                FileTypeJpeg/** jpeg */ ,
                FileTypeNxDesignatorAssignmentsFile/** nx designator assignments file */ ,
                FileTypeNxAttachedPart/** nx attached part */ ,
                FileTypeNxPart/** nx part */ ,
                FileTypeNxPosBin/** nx pos bin */ ,
                FileTypeNxleSymbolXml/** nxle symbol xml */ ,
                FileTypeNxleSymbolPreview/** nxle symbol preview */ ,
                FileTypePreview2d/** preview2d */ ,
                FileTypePreview3d/** preview3d */ ,
                FileTypeQafBinary/** qaf binary */ ,
                FileTypeQafText/** qaf text */ ,
                FileTypeRoutePipeRun/** route pipe run */ ,
                FileTypeRoutePipeSpec/** route pipe spec */ ,
                FileTypeRoutePipeRunAttachment/** route pipe run attachment */ ,
                FileTypeText/** text */ ,
                FileTypeTif/** tif */ ,
                FileTypeTrushapeData/** trushape data */ ,
                FileTypeValidationRuleSet/** validation rule set */ 
            };

            private: FileManagementImpl * m_filemanagement_impl;
            /// \cond NX_NO_DOC 
            public: explicit FileManagement(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : None */
            public: virtual ~FileManagement();
            /** Imports all associated files for the specified dataset(s)
                    into the Teamcenter database.  The files will be attached to the
                    dataset(s) as named references.  The dataset(s) are identified by
                    their Teamcenter multifield key, Teamcenter item revision id, Teamcenter 
                    dataset name, NX dataset type, and NX dataset relation type.  
                    An import directory containing the files must be specified for each 
                    dataset.  An array of PDI result codes is returned indicating the 
                    success (0) or failure (non-zero) of each import.
                    The dataset types for FOREIGN_MODEL are the ones included in the 
                    Teamcenter preference "TC_NX_Foreign_Datasets". In such a case the 
                    input relation type should be "Foreign". The named reference information
                    from BMIDE setting will be used for the imported file extension.
                    <ol>
                    <li>NX dataset types and relation names</li>
                    <li>NX Model Type         NX Relation Type        NX Dataset Type</li>
                    <li>MASTER_MODEL          "has shape"             "UGMASTER"</li>
                    <li>SPEC_MODEL            "has specification"     "UGPART"</li>
                    <li>MAN_MODEL             "has manifestation"     "UGPART"</li>
                    <li>ALTREP_MODEL          "has altrep"            "UGALTREP"</li>
                    <li>SCENARIO_MODEL        "UG_scenario"           "UGSCENARIO"</li>
                    <li>SIMULATION_MODEL      "NX_simulation"         "NXSimulation"</li>
                    <li>MOTION_MODEL          "NX_simulation"         "NXMotion"</li>
                    <li>CAE_SOLN_MODEL        "NX_simulation"         "CAESolution"</li>
                    <li>CAE_MESH_MODEL        "NX_simulation"         "CAEMesh"</li>
                    <li>CAE_GEOM_MODEL        "NX_simulation"         "CAEGeom"</li>
                    <li>FOREIGN_MODEL         "Foreign"               "*"</li>
                    <li>MOTION_MODEL_SPEC     "has specification"     "MotionSim"</li>
                    </ol>

                    For the input itemIds:
                    In case of Default Domain: it is Teamcenter item ID.
                    In case of non-Default Domain: it is the multifield key.
                    e.g.   %#MFK#%,=item_id=001, object_type=SupplierPart, supplier_code=x
                    And the encoded part filename would be containing the MFK.
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : None */
            public: std::vector<int> ImportFiles
            (
                std::vector<NXString> & itemIds /** Multifield key. */,
                std::vector<NXString> & itemRevisionIds /** Teamcenter item revision ids. */,
                std::vector<NXString> & datasetNames /** Teamcenter dataset names. */,
                std::vector<NXString> & datasetTypeNames /** NX dataset type names. */,
                std::vector<NXString> & datasetRelationTypeNames /** NX dataset relation type names. */,
                std::vector<NXString> & importDirectoryNames /** Import directories which contain the files to import. */
            );
            /** Exports all associated files for the specified dataset(s)
                    to a directory. The dataset(s) are identified by their Teamcenter 
                    item id, Teamcenter item revision id, Teamcenter dataset name, 
                    NX dataset type, and  NX dataset relation type.  A base export directory
                    name must be specified for each dataset along with the tool name that
                    is requesting the export.  The full path to the exported files is 
                    returned in an output array.  The full path will be 
                    NX_default_directory or export_directory.  Additionally, an array of
                    PDI result codes is returned indicating the success (0) or failure 
                    (non-zero) of each export.
                    The dataset types for FOREIGN_MODEL are the ones included in the 
                    Teamcenter preference "TC_NX_Foreign_Datasets". In such a case the 
                    input relation type should be "Foreign".
                    The exporting of the associated file is governed by following conditions:        
                    The associated filetype should be exportable for combination of the Tool 
                    used and the Open action for operation.
                    The associated file should not be in the excluded named reference list. 
                    For Foreign Datasets it will not export file types included in the Teamcenter
                    preference "TC_NX_Foreign_Datasets".
                    In case of NX CAM dataset type like "UGCAMCLSF", "UGCAMPTP", "UGCAMShopDoc",
                    all the associated files will be exported irrespective of above conditions.
                    <ol>
                    <li>Excluded Named Reference List:</li>
                    <li>"UGPART"</li>             
                    <li>"UGPART-MASSPR</li>            
                    <li>"UGPART-BBOX</li>              
                    <li>"UGPART-ATTRIBUTES</li>        
                    <li>"UGPART-ATTR</li>             
                    <li>"Trushape-Data</li>            
                    <li>"BVRSYNCINFO</li>              
                    <li>"UG-QuickAccess-Binary</li>    
                    <li>"UG-QuickAccess-Text</li>   
                    </ol>
                    <ol>
                    <li>NX dataset types and relation names</li>
                    <li>NX Model Type         NX Relation Type        NX Dataset Type</li>
                    <li>MASTER_MODEL          "has shape"             "UGMASTER"</li>
                    <li>SPEC_MODEL            "has specification"     "UGPART"</li>
                    <li>MAN_MODEL             "has manifestation"     "UGPART"</li>
                    <li>ALTREP_MODEL          "has altrep"            "UGALTREP"</li>
                    <li>SCENARIO_MODEL        "UG_scenario"           "UGSCENARIO"</li>
                    <li>SIMULATION_MODEL      "NX_simulation"         "NXSimulation"</li>
                    <li>MOTION_MODEL          "NX_simulation"         "NXMotion"</li>
                    <li>CAE_SOLN_MODEL        "NX_simulation"         "CAESolution"</li>
                    <li>CAE_MESH_MODEL        "NX_simulation"         "CAEMesh"</li>
                    <li>CAE_GEOM_MODEL        "NX_simulation"         "CAEGeom"</li>
                    <li>FOREIGN_MODEL         "Foreign"               "*"</li>
                    <li>MOTION_MODEL_SPEC     "has specification"     "MotionSim"</li>
                    </ol>
                    For the input itemIds:
                    In case of Default Domain: it is Teamcenter item ID.
                    In case of non-Default Domain: it is the multifield key.
                    e.g.   %#MFK#%,=item_id=001, object_type=SupplierPart, supplier_code=x
                    And the encoded part filename would be containing the MFK.
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : None */
            public: std::vector<int> ExportFiles
            (
                std::vector<NXString> & itemIds /** Multifield Key. */,
                std::vector<NXString> & itemRevisionIds /** Teamcenter item revision ids. */,
                std::vector<NXString> & datasetNames /** Teamcenter dataset names. */,
                std::vector<NXString> & datasetTypeNames /** NX dataset type names. */,
                std::vector<NXString> & datasetRelationTypeNames /** NX dataset relation type names. */,
                std::vector<NXString> & baseDirectoryNames /** Base export directory name. */,
                std::vector<NXString> & toolNames /** Tool names ("UGII V10-ALL"). */,
                std::vector<NXString> & exportDirectoryNames /** Resulting location of export directory */
            );
            /**  Given an NX part, this method will return a list of named
                    reference files in the corresponding Teamcenter dataset. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::PDM::PdmFile *> GetAssociatedFiles
            (
                const std::vector<NXOpen::BasePart *> & parts /** parts */ ,
                const std::vector<NXOpen::PDM::FileManagement::FileType> & fileTypesToExclude /** filetypestoexclude */ 
            );
            /**  Download the specified named reference files for NX use. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void DownloadAssociatedFiles
            (
                const std::vector<NXOpen::BasePart *> & parts /** parts */ ,
                const std::vector<NXOpen::PDM::PdmFile *> & files /** files */ 
            );
            /** Import files and create datasets in Teamcenter.
                    In order to create multiple datasets at once, please make sure to declare all the arrays of the same desired size.
                    This creates the Items (with the specified item ids) and Item Revisions (with the specified item revision ids) in case they don't exist in Teamcenter.
                    This creates the datasets if no matching dataset exists in Teamcenter.
                    The dataset relation type names are the exact names of the Teamcenter relations used to attach the Datasets to the corresponding Item Revisions. (Any ImanRelation types can be used.)
                     @return  Result codes. Success (zero), Failure (non-zero). 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<int> ImportFilesAndCreateDatasets
            (
                std::vector<NXString> & itemIds /** Multifield key. Creates a new item if it does not exist in Teamcenter; updates it if it exists. */,
                std::vector<NXString> & itemRevisionIds /** Teamcenter item revision ids. Creates a new item revision id if it does not exist in Teamcenter; updates it if it exists. */,
                std::vector<NXString> & datasetNames /** Teamcenter dataset names. Creates a new dataset if it does not exist in Teamcenter; updates it if it exists. */,
                std::vector<NXString> & datasetTypeNames /** NX dataset type names. */,
                std::vector<NXString> & datasetRelationTypeNames /** Exact Teamcenter relation type names. */,
                std::vector<NXString> & datasetToolNames /** NX dataset tool names. This is not currently supported. For future use only. */,
                const std::vector<bool> & fileType /** Types of files - true = Binary, false = Ascii.*/,
                std::vector<NXString> & namedReferenceNames /** Names of named references per NX dataset. */,
                std::vector<NXString> & importFileNames /** Names of files (with file extension) to import per NX dataset. Please do not include the full directory path. */,
                std::vector<NXString> & importFileDirectoryNames /** Names of the file directories which contain the files to import. */
            );
            /** Export Named Reference From Teamcenter.
                    The Dataset Relation Type Names are the names of the Teamcenter relationships used to find the Datasets
                    to the correponding Item Revisions.
                    Any ImanRelation types can be used.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void ExportNamedReferences
            (
                const NXString & itemId /** Multifield key. */,
                const NXString & itemRevisionId /** Teamcenter item revision ids. */,
                const NXString & datasetName /** Teamcenter dataset names. */,
                const NXString & datasetTypeName /** NX dataset type names. */,
                const NXString & datasetRelationTypeName /** Exact Teamcenter relation type names. */,
                const NXString & datasetNamedReference /** NX dataset named reference names. */,
                const NXString & exportDirectoryName /** Where to export files to, if empty then files will not be downloaded */,
                std::vector<NXString> & namedReferences /** NamedReferences, full pathnames of files */
            );
            /** Export Named Reference From Teamcenter.
                    The Dataset Relation Type Names are the names of the Teamcenter relationships used to find the Datasets
                    to the correponding Item Revisions.
                    Any ImanRelation types can be used.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void ExportNamedReferences
            (
                const char * itemId /** Multifield key. */,
                const char * itemRevisionId /** Teamcenter item revision ids. */,
                const char * datasetName /** Teamcenter dataset names. */,
                const char * datasetTypeName /** NX dataset type names. */,
                const char * datasetRelationTypeName /** Exact Teamcenter relation type names. */,
                const char * datasetNamedReference /** NX dataset named reference names. */,
                const char * exportDirectoryName /** Where to export files to, if empty then files will not be downloaded */,
                std::vector<NXString> & namedReferences /** NamedReferences, full pathnames of files */
            );
            /** Export Named Reference From Teamcenter.
                    The Dataset Relation Type Names are the names of the Teamcenter relationships used to find the Datasets
                    to the correponding Item Revisions.
                    Any ImanRelation types can be used.
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> ExportNamedReferences
            (
                std::vector<NXString> & itemIds /** Multifield key. */,
                std::vector<NXString> & itemRevisionIds /** Teamcenter item revision ids. */,
                std::vector<NXString> & datasetNames /** Teamcenter dataset names. */,
                std::vector<NXString> & datasetTypeNames /** NX dataset type names. */,
                std::vector<NXString> & datasetRelationTypeNames /** Exact Teamcenter relation type names. */,
                std::vector<NXString> & datasetNamedReferences /** NX dataset named reference names. */,
                const NXString & exportDirectoryName /** Where to export files to, if empty then files will not be downloaded*/,
                std::vector<int> & numNamedReferences /** Array of the number of named references for each itemid */,
                std::vector<NXString> & namedReferences /** NamedReferences, full pathnames of files, array size is namedReferencesLength  */
            );
            /** Export Named Reference From Teamcenter.
                    The Dataset Relation Type Names are the names of the Teamcenter relationships used to find the Datasets
                    to the correponding Item Revisions.
                    Any ImanRelation types can be used.
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            std::vector<int> ExportNamedReferences
            (
                std::vector<NXString> & itemIds /** Multifield key. */,
                std::vector<NXString> & itemRevisionIds /** Teamcenter item revision ids. */,
                std::vector<NXString> & datasetNames /** Teamcenter dataset names. */,
                std::vector<NXString> & datasetTypeNames /** NX dataset type names. */,
                std::vector<NXString> & datasetRelationTypeNames /** Exact Teamcenter relation type names. */,
                std::vector<NXString> & datasetNamedReferences /** NX dataset named reference names. */,
                const char * exportDirectoryName /** Where to export files to, if empty then files will not be downloaded*/,
                std::vector<int> & numNamedReferences /** Array of the number of named references for each itemid */,
                std::vector<NXString> & namedReferences /** NamedReferences, full pathnames of files, array size is namedReferencesLength  */
            );
            /** Save Attached Files To Teamcenter.
                    Save attached files for given specifications.
                     . associatedObject - Teamcenter object the files are attached to; only Parts or Design Elements are supported
                     . associationTypeName - Teamcenter relation type name
                     . datasetTypeName - Teamcenter dataset type name
                     . datasetName - Dataset name for creation or for matching existing dataset
                     . numDatasetPropertyInput - Number of dataset property names input for each dataset input
                     . numTotalDatasetProperties - Number of total dataset properties
                     . datasetPropertyNames - (Optional) To specify required properties when creating new dataset or for updating existing dataset properties
                     . datasetPropertyValues - Dataset property values; optional; need to match one-to-one with datasetPropertyNames
                     . ownershipToMatchForNewDataset - Teamcenter object used to assign new dataset owner; optional
                     . fileVolumeToStore - Teamcenter volume for storing file, default is current session volume; optional
                     . toolUsed - Teamcenter toolUsed for new dataset; optional
                     . datasetDescription - Dataset description for new dataset; optional
                     . alwaysCreateNewDataset - Flag indicating if a new dataset should always be created
                     . createNewDatasetVersion - Flag indicating if new dataset version should be created
                     . refreshInSessionLoadedLMD - Flag indicating if in-session loaded Last-Modified-Date should be refreshed
                     . numNamedReferencesPerInput - Number of named references input for each dataset input
                     . numTotalNamedReferences - Number of total named references input
                     . namedReferenceName - Named reference name
                     . isText - Named reference isText flag
                     . filePath - Named reference file path
                     . logicalFileName - Named reference logical filename
                     . allowReplace - Flag indicating to replace if named reference already exists
                     . outputFiles - Flag indicating if files should be returned
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> SaveAttachedFiles
            (
                const std::vector<NXOpen::NXObject *> & associatedObject /** Teamcenter object the files to be attached to */,
                std::vector<NXString> & associationTypeName /** Teamcenter relation type name or property name if association is through property */,
                std::vector<NXString> & datasetTypeName /** Teamcenter dataset type name */,
                std::vector<NXString> & datasetName /** Dataset name for creation or for matching existing dataset */,
                const std::vector<int> & numDatasetPropertyInput /** Number of dataset property names input for each dataset input */,
                std::vector<NXString> & datasetPropertyNames /** Dataset property names; optional; to specify required properties when creating new dataset or for updating existing dataset properties */,
                std::vector<NXString> & datasetPropertyValues /** Dataset property values; optional; need to match 1-1 with above datasetPropertyNames */,
                const std::vector<NXOpen::NXObject *> & ownershipToMatchForNewDataset /** Teamcenter object used to assign new dataset owner; optional */,
                const std::vector<NXOpen::PDM::PdmFile *> & fileVolumeToStore /** Teamcenter volume for storing file, default is current session volume; optional */,
                std::vector<NXString> & toolUsed /** Teamcenter toolUsed for new dataset; optional */,
                std::vector<NXString> & datasetDescription /** Dataset description for new dataset; optional */,
                const std::vector<bool> & alwaysCreateNewDataset /** False (default) - use existing if present; True - always create new */,
                const std::vector<bool> & createNewDatasetVersion /** False (default) - use existing if present; True - create new version even if present */,
                const std::vector<bool> & refreshInSessionLoadedLMD /** True (default) - refresh in-session loaded Last-Modified-Date; False  - do nothing */,
                const std::vector<int> & numNamedReferencesPerInput /** Number of named references input for each dataset input */,
                std::vector<NXString> & namedReferenceName /** Named reference name */,
                const std::vector<bool> & isText /** Named reference isText flag */,
                std::vector<NXString> & filePath /** Named reference file path */,
                std::vector<NXString> & logicalFileName /** Named reference logical filename */,
                const std::vector<bool> & allowReplace /** True (default) - replace existing if present; False - always create new */,
                bool outputFiles /** False (default) - do not return files; True - return files */,
                std::vector<NXOpen::PDM::PdmFile *> & files /** Output - arry of PdmFiles */
            );
            /** Delete Attached Files From Teamcenter.
                    Delete attached files from dataset.
                     . associatedObject - Teamcenter object the files are attached to; only Parts or Design Elements are supported
                     . associationTypeName - Teamcenter relation type name
                     . datasetTypeName - Teamcenter dataset type name
                     . datasetName - Dataset name for creation or for matching existing dataset
                     . namedReferenceName - Named reference name
                     . isText - Named reference isText flag
                     . logicalFileName - Named reference logical filename
                     . keepEmptyDataset - Flag indicating if datasets should be kept even if they become empty
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> DeleteAttachedFiles
            (
                const std::vector<NXOpen::NXObject *> & associatedObject /** Teamcenter object the files are attached to */,
                std::vector<NXString> & associationTypeName /** Teamcenter relation type name or property name if association is through property */,
                std::vector<NXString> & datasetTypeName /** Teamcenter dataset type name */,
                std::vector<NXString> & datasetName /** Dataset name for creation or for matching existing dataset */,
                std::vector<NXString> & namedReferenceName /** Named reference name */,
                std::vector<NXString> & isText /** Named reference isText flag */,
                std::vector<NXString> & logicalFileName /** Named reference logical filename */,
                bool keepEmptyDataset /** True (default) - keep dataset even if empty; False - don'e keep empty dataset */
            );
            /** Delete Attached Files From Teamcenter.
                    Delete given attached files from dataset.
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> DeleteExistingAttachedFiles
            (
                const std::vector<NXOpen::PDM::PdmFile *> & files /** Files to delete */,
                bool keepEmptyDataset /** True (default) - keep dataset even if empty; False - don'e keep empty dataset */
            );
            /** Get Attached Files Information From Teamcenter.
                    Query attached files information for given specifications.
                     . associatedObject - Teamcenter object the files are attached to; only Parts or Design Elements are supported
                     . associationTypeName - Teamcenter relation type name
                     . datasetTypeName - Teamcenter dataset type name
                     . datasetName - Dataset name for creation or for matching existing dataset
                     . namedReferenceName - Named reference name
                     . isText - Named reference isText flag
                     . logicalFileName - Named reference logical filename
                     . exportDirectoryName - Where to export files to, if empty then files will not be downloaded
                     . outputFilesLength - Number of total files returned
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetAttachedFiles
            (
                const std::vector<NXOpen::NXObject *> & associatedObject /** Teamcenter object the files are attached to */,
                std::vector<NXString> & associationTypeName /** Teamcenter relation type name or property name if association is through property */,
                std::vector<NXString> & datasetTypeName /** Teamcenter dataset type name */,
                std::vector<NXString> & datasetName /** Dataset name for creation or for matching existing dataset */,
                std::vector<NXString> & namedReferenceName /** Named reference name */,
                std::vector<NXString> & isText /** Named reference isText flag */,
                std::vector<NXString> & logicalFileName /** Named reference logical filename */,
                const NXString & exportDirectoryName /** Where to export files to, if empty then files will not be downloaded */,
                std::vector<int> & numOutputFiles /** Number of output files for each input */,
                std::vector<NXOpen::PDM::PdmFile *> & files /** Output - arry of PdmFiles */
            );
            /** Get Attached Files Information From Teamcenter.
                    Query attached files information for given specifications.
                     . associatedObject - Teamcenter object the files are attached to; only Parts or Design Elements are supported
                     . associationTypeName - Teamcenter relation type name
                     . datasetTypeName - Teamcenter dataset type name
                     . datasetName - Dataset name for creation or for matching existing dataset
                     . namedReferenceName - Named reference name
                     . isText - Named reference isText flag
                     . logicalFileName - Named reference logical filename
                     . exportDirectoryName - Where to export files to, if empty then files will not be downloaded
                     . outputFilesLength - Number of total files returned
                     @return  Result codes. Success (0), failure (non-zero). 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            std::vector<int> GetAttachedFiles
            (
                const std::vector<NXOpen::NXObject *> & associatedObject /** Teamcenter object the files are attached to */,
                std::vector<NXString> & associationTypeName /** Teamcenter relation type name or property name if association is through property */,
                std::vector<NXString> & datasetTypeName /** Teamcenter dataset type name */,
                std::vector<NXString> & datasetName /** Dataset name for creation or for matching existing dataset */,
                std::vector<NXString> & namedReferenceName /** Named reference name */,
                std::vector<NXString> & isText /** Named reference isText flag */,
                std::vector<NXString> & logicalFileName /** Named reference logical filename */,
                const char * exportDirectoryName /** Where to export files to, if empty then files will not be downloaded */,
                std::vector<int> & numOutputFiles /** Number of output files for each input */,
                std::vector<NXOpen::PDM::PdmFile *> & files /** Output - arry of PdmFiles */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
