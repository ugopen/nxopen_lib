#ifndef NXOpen_CAE_ACOUSTICSANDVIBRATIONVIBRATIONDATACOMPONENTACCESSOR_HXX_INCLUDED
#define NXOpen_CAE_ACOUSTICSANDVIBRATIONVIBRATIONDATACOMPONENTACCESSOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AcousticsAndVibrationVibrationDataComponentAccessor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DataReaderDatabaseOptions.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AcousticsAndVibrationVibrationDataComponentAccessor;
    }
    namespace CAE
    {
        class DataReaderDatabaseOptions;
    }
    class NXObject;
    namespace CAE
    {
        class _AcousticsAndVibrationVibrationDataComponentAccessorBuilder;
        class AcousticsAndVibrationVibrationDataComponentAccessorImpl;
        /**
            Builds a @link NXOpen::CAE::AcousticsAndVibrationVibrationDataComponentAccessor NXOpen::CAE::AcousticsAndVibrationVibrationDataComponentAccessor@endlink  object
             <br> There is no kf creator for this.  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AcousticsAndVibrationVibrationDataComponentAccessor : public NXOpen::NXObject
        {
            /** the QUANTITY selection enum */
            public: enum QuantityEnum
            {
                QuantityEnumDisplacement/** displacement */ ,
                QuantityEnumVelocity/** velocity */ ,
                QuantityEnumAcceleration/** acceleration */ 
            };

            /** the SORT selection enum */
            public: enum SortingEnum
            {
                SortingEnumVectors/** vectors */ ,
                SortingEnumFunctions/** functions */ 
            };

            private: AcousticsAndVibrationVibrationDataComponentAccessorImpl * m_acousticsandvibrationvibrationdatacomponentaccessor_impl;
            private: friend class  _AcousticsAndVibrationVibrationDataComponentAccessorBuilder;
            protected: AcousticsAndVibrationVibrationDataComponentAccessor();
            public: ~AcousticsAndVibrationVibrationDataComponentAccessor();
            /**Returns  the database options 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::DataReaderDatabaseOptions * DatabaseOptions
            (
            );
            /**Returns  the File Path
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FilePath
            (
            );
            /**Sets  the File Path
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFilePath
            (
                const NXString & filePath /** filepath */ 
            );
            /**Sets  the File Path
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetFilePath
            (
                const char * filePath /** filepath */ 
            );
            /** Get both Quantity and Sorting 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void GetQuantityAndSorting
            (
                NXOpen::CAE::AcousticsAndVibrationVibrationDataComponentAccessor::QuantityEnum* quantity /** quantity */ ,
                NXOpen::CAE::AcousticsAndVibrationVibrationDataComponentAccessor::SortingEnum* sorting /** sorting */ 
            );
            /** Set both Quantity and Sorting 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetQuantityAndSorting
            (
                NXOpen::CAE::AcousticsAndVibrationVibrationDataComponentAccessor::QuantityEnum quantity /** quantity */ ,
                NXOpen::CAE::AcousticsAndVibrationVibrationDataComponentAccessor::SortingEnum sorting /** sorting */ 
            );
            /** Gets the subcases used for filtering.
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSubcases
            (
                std::vector<NXString> & subcaseNames /** subcasenames */ 
            );
            /** Sets the subcases used for filtering. Clears previous selection.
                        To compute on all subcases please let this selection empty.
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSubcases
            (
                std::vector<NXString> & subcaseNames /** subcasenames */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
