#ifndef NXOpen_CAM_ROUGHFINISHTURNINGBUILDER_HXX_INCLUDED
#define NXOpen_CAM_ROUGHFINISHTURNINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_RoughFinishTurningBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_TurningOperationBuilder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class RoughFinishTurningBuilder;
    }
    namespace CAM
    {
        class Boundary;
    }
    namespace CAM
    {
        class CutAngle;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class Tool;
    }
    namespace CAM
    {
        class TrimPlane;
    }
    namespace CAM
    {
        class TrimPoint;
    }
    namespace CAM
    {
        class TurnCutParameters;
    }
    namespace CAM
    {
        class TurningOperationBuilder;
    }
    class Point;
    namespace CAM
    {
        class _RoughFinishTurningBuilderBuilder;
        class RoughFinishTurningBuilderImpl;
        /** Represents a RoughFinishTurning Builder  <br> This is an abstract class and cannot be instantiated.  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  RoughFinishTurningBuilder : public NXOpen::CAM::TurningOperationBuilder
        {
            /** the Custom Member Data types 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum CustomMemberDataTypes
            {
                CustomMemberDataTypesWithinRegion/** Within Region */,
                CustomMemberDataTypesWithinDistance/** Within Distance */
            };

            /** the Region Machining types 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum RegionMachiningTypes
            {
                RegionMachiningTypesSingle/** Region Machining type: Single */,
                RegionMachiningTypesMultiple/** Region Machining type: Multiple */
            };

            /** the Cut regions types 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum CutRegionsTypes
            {
                CutRegionsTypesSingleRegion/** Cut regions type: Single Region */,
                CutRegionsTypesSingleDirection/** Cut regions type: Single Direction */,
                CutRegionsTypesReverseDirection/** Cut regions type: Reverse Direction */,
                CutRegionsTypesBiDirectional/** Cut regions type: Bi-directional */,
                CutRegionsTypesAlternate/** Cut regions type: Alternate */
            };

            /** the Tolerance Offset types */
            public: enum ToleranceOffsetTypes
            {
                ToleranceOffsetTypesAfterContainment/** Tolerance offset after containment. */,
                ToleranceOffsetTypesBeforeContainment/** Tolerance offset before containment. */
            };

            /** the Mininmum Area types 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum MinimumAreaTypes
            {
                MinimumAreaTypesNone/** None. */,
                MinimumAreaTypesSpecify/** Old NX6 item */,
                MinimumAreaTypesPartunit/** Part Unit */ = 1,
                MinimumAreaTypesTool/** Tool */
            };

            /** the Maximum Area modes 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: enum MaximumAreaModes
            {
                MaximumAreaModesNone/** None. */,
                MaximumAreaModesPartunit/** Part Unit */,
                MaximumAreaModesTool/** Tool */
            };

            /** the Maximum/Maximum Size modes 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: enum MinmaxSizeModes
            {
                MinmaxSizeModesNone/** None. */,
                MinmaxSizeModesAxial/** Axial */,
                MinmaxSizeModesRadial/** Radial */,
                MinmaxSizeModesAxialAndRadial/** Axial and Radial */
            };

            /** the Minimum/Maximum Area units 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: enum MinmaxAreaUnits
            {
                MinmaxAreaUnitsSquare/** Square length. */,
                MinmaxAreaUnitsPercentage/** Percentage */
            };

            /** the Minimum/Maximum Size Axial/Radial units 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: enum MinmaxSizeUnits
            {
                MinmaxSizeUnitsLength/** Length. */,
                MinmaxSizeUnitsPercentage/** Percentage */
            };

            /** the Extend Mode types 
             <br>  Created in NX6.0.0.  <br>  
            */
            public: enum ExtendModeTypes
            {
                ExtendModeTypesSpecify/** Specify */,
                ExtendModeTypesTagential/** Tagential */,
                ExtendModeTypesTangential/** Tangential */ = 1
            };

            /** the multi-channel turning mode types 
             <br>  Created in NX11.0.2.  <br>  
            */

            /// \cond NX_NO_DOC 
            public: enum MultiChannelTurningModeTypes
            {
                MultiChannelTurningModeTypesNone/** None */,
                MultiChannelTurningModeTypesBalanced/** Balanced */,
                MultiChannelTurningModeTypesMerged/** Merged */
            };


            /// \endcond 
            /** the multi-channel turning lead mode types 
             <br>  Created in NX1872.0.0.  <br>  
            */

            /// \cond NX_NO_DOC 
            public: enum MultiChannelTurningLeadModeTypes
            {
                MultiChannelTurningLeadModeTypesDistance/** Distance */,
                MultiChannelTurningLeadModeTypesTimeFromDistnace/** Time from Distance */,
                MultiChannelTurningLeadModeTypesTime/** Time */
            };


            /// \endcond 
            /** the Region Selection types */
            public: enum RegionSelectionTypes
            {
                RegionSelectionTypesAutomatic/** Automatic cut region selection. */,
                RegionSelectionTypesManual/** Manual cut region selection. */
            };

            private: RoughFinishTurningBuilderImpl * m_roughfinishturningbuilder_impl;
            private: friend class  _RoughFinishTurningBuilderBuilder;
            protected: RoughFinishTurningBuilder();
            public: ~RoughFinishTurningBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the multi-channel turning mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::MultiChannelTurningModeTypes MultiChannelTurningMode
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the multi-channel turning mode 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMultiChannelTurningMode
            (
                NXOpen::CAM::RoughFinishTurningBuilder::MultiChannelTurningModeTypes multiChannelTurningMode /** the multi-channel turning mode */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the multi-channel turning lead mode 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::MultiChannelTurningLeadModeTypes MultiChannelTurningLeadMode
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the multi-channel turning lead mode 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMultiChannelTurningLeadMode
            (
                NXOpen::CAM::RoughFinishTurningBuilder::MultiChannelTurningLeadModeTypes multiChannelTurningLeadMode /** the multi-channel turning lead mode */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the multi-channel turning lead distance 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: double MultiChannelTurningLeadDistance
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the multi-channel turning lead distance 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMultiChannelTurningLeadDistance
            (
                double multiChannelTurningLeadDistance /** the multi-channel turning lead distance */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the multi-channel turning lead time 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double MultiChannelTurningLeadTime
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the multi-channel turning lead time 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMultiChannelTurningLeadTime
            (
                double multiChannelTurningLeadTime /** the multi-channel turning lead time */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the multi-channel turning second tool 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Tool * MultiChannelTurningSecondTool
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the multi-channel turning second tool 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetMultiChannelTurningSecondTool
            (
                NXOpen::CAM::Tool * multiChannelTurningSecondTool /** the multi-channel turning second tool */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the multi-channel turning safe distance to first tool 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double MultiChannelTurningSafeDistanceToFirstTool
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the multi-channel turning safe distance to first tool 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMultiChannelTurningSafeDistanceToFirstTool
            (
                double multiChannelTurningSafeDistanceToFirstTool /** the multi-channel turning safe distance to first tool */
            );

            /// \endcond 
            /**Returns  the Omit Reversals toggle
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool OmitReversals
            (
            );
            /**Sets  the Omit Reversals toggle
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOmitReversals
            (
                bool omitReversals /** the omit reversals */
            );
            /**Returns  the Ignore Minimum Boring Diameter toggle
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool IgnoreMinimumBoringDiameter
            (
            );
            /**Sets  the Ignore Minimum Boring Diameter toggle
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIgnoreMinimumBoringDiameter
            (
                bool ignoreMinBoringDia /** the Ignore Minimum Boring Diameter */
            );
            /**Returns  the radial trim plane 1 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TrimPlane * RadialTrimPlane1
            (
            );
            /**Returns  the radial trim plane 2 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TrimPlane * RadialTrimPlane2
            (
            );
            /**Returns  the axial trim plane 1 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TrimPlane * AxialTrimPlane1
            (
            );
            /**Returns  the axial trim plane 2 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TrimPlane * AxialTrimPlane2
            (
            );
            /**Returns  the trim point 1 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TrimPoint * TrimPoint1
            (
            );
            /**Returns  the trim point 2 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TrimPoint * TrimPoint2
            (
            );
            /**Returns  the Custom Member Data type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::CustomMemberDataTypes CustomMemberData
            (
            );
            /**Sets  the Custom Member Data type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomMemberData
            (
                NXOpen::CAM::RoughFinishTurningBuilder::CustomMemberDataTypes surfaceSensitivityMode /** the custom member data type*/
            );
            /**Returns  the Custom Member Data Distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double CustomMemberDataDistance
            (
            );
            /**Sets  the Custom Member Data Distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCustomMemberDataDistance
            (
                double surfaceSensitivityTolerance /** the custom member data distance */
            );
            /**Returns  the Tolerance Offset type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::ToleranceOffsetTypes ToleranceOffset
            (
            );
            /**Sets  the Tolerance Offset type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToleranceOffset
            (
                NXOpen::CAM::RoughFinishTurningBuilder::ToleranceOffsetTypes toleranceOffsetMode /** the tolerance offset type */
            );
            /**Returns  the Region Selection type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::RegionSelectionTypes RegionSelection
            (
            );
            /**Sets  the Region Selection type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionSelection
            (
                NXOpen::CAM::RoughFinishTurningBuilder::RegionSelectionTypes cutRegionSelectionMode /** the region selection type */
            );
            /**Returns  the Region Selection Point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * RegionSelectionPoint
            (
            );
            /**Sets  the Region Selection Point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionSelectionPoint
            (
                NXOpen::Point * cutRegionSelectionPoint /** the region selection point */
            );
            /**Returns  the Region Machining type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::RegionMachiningTypes RegionMachining
            (
            );
            /**Sets  the Region Machining type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionMachining
            (
                NXOpen::CAM::RoughFinishTurningBuilder::RegionMachiningTypes regionMachining /** the Region Machining type */
            );
            /**Returns  the Cut regions type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::CutRegionsTypes CutRegions
            (
            );
            /**Sets  the Cut regions type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutRegions
            (
                NXOpen::CAM::RoughFinishTurningBuilder::CutRegionsTypes multipleCutRegions /** the Cut regions type */
            );
            /**Returns  the Minimum Area type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::MinimumAreaTypes MinimumArea
            (
            );
            /**Sets  the Minimum Area type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinimumArea
            (
                NXOpen::CAM::RoughFinishTurningBuilder::MinimumAreaTypes minimumAreaActive /** the minimum area type */
            );
            /**Returns  the Minimum Area Size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumAreaSize
            (
            );
            /**Sets  the Minimum Area Size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinimumAreaSize
            (
                double minArea /** the minimum area size */
            );
            /**Returns  the Minimum Area Unit 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::MinmaxAreaUnits MinimumAreaUnit
            (
            );
            /**Sets  the Minimum Area Unit 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinimumAreaUnit
            (
                NXOpen::CAM::RoughFinishTurningBuilder::MinmaxAreaUnits minAreaUnit /** the minimum area unit */
            );
            /**Returns  the Maximum Area mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::MaximumAreaModes MaximumAreaMode
            (
            );
            /**Sets  the Maximum Area mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaximumAreaMode
            (
                NXOpen::CAM::RoughFinishTurningBuilder::MaximumAreaModes maximumAreaMode /** the maximum area mode */
            );
            /**Returns  the Maximum Area Size 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double MaximumAreaSize
            (
            );
            /**Sets  the Maximum Area Size 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaximumAreaSize
            (
                double maxSize /** the maximum size */
            );
            /**Returns  the Maximum Area Unit 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::MinmaxAreaUnits MaximumAreaUnit
            (
            );
            /**Sets  the Maximum Area Unit 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaximumAreaUnit
            (
                NXOpen::CAM::RoughFinishTurningBuilder::MinmaxAreaUnits maxAreaUnit /** the maximum area unit */
            );
            /**Returns  the Minimum Size Mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::MinmaxSizeModes MinimumSizeMode
            (
            );
            /**Sets  the Minimum Size Mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinimumSizeMode
            (
                NXOpen::CAM::RoughFinishTurningBuilder::MinmaxSizeModes minimumSizeMode /** the minimum size mode */
            );
            /**Returns  the Minimum Size Axial 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MinimumSizeAxial
            (
            );
            /**Returns  the Minimum Size Radial 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MinimumSizeRadial
            (
            );
            /**Returns  the Maximum Size Mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::MinmaxSizeModes MaximumSizeMode
            (
            );
            /**Sets  the Maximum Size Mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaximumSizeMode
            (
                NXOpen::CAM::RoughFinishTurningBuilder::MinmaxSizeModes maximumSizeMode /** the maximum size mode */
            );
            /**Returns  the Maximum Size Axial 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaximumSizeAxial
            (
            );
            /**Returns  the Maximum Size Radial 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaximumSizeRadial
            (
            );
            /**Returns  the Start Offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double StartOffset
            (
            );
            /**Sets  the Start Offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartOffset
            (
                double startOffset /** the start offset */
            );
            /**Returns  the end offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double EndOffset
            (
            );
            /**Sets  the end offset 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEndOffset
            (
                double endOffset /** the end offset */
            );
            /**Returns  the start angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double StartAngle
            (
            );
            /**Sets  the start angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartAngle
            (
                double startAngle /** the start angle */
            );
            /**Returns  the end angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double EndAngle
            (
            );
            /**Sets  the end angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEndAngle
            (
                double endAngle /** the end angle */
            );
            /**Returns  the Extend Mode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::RoughFinishTurningBuilder::ExtendModeTypes ExtendMode
            (
            );
            /**Sets  the Extend Mode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetExtendMode
            (
                NXOpen::CAM::RoughFinishTurningBuilder::ExtendModeTypes tangentialStartEndExtension /** the extend mode type */
            );
            /**Returns  the Level Angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutAngle * LevelAngleBuilder
            (
            );
            /**Returns  the Step Angle 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CutAngle * StepAngleBuilder
            (
            );
            /**Returns  the cut parameter object
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::TurnCutParameters * CutParameters
            (
            );
            /**Returns  the custom part boundary builder 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Boundary * CustomPartBoundary
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
