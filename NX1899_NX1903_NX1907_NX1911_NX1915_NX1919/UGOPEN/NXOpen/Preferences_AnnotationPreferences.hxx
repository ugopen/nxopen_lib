#ifndef NXOpen_PREFERENCES_ANNOTATIONPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_ANNOTATIONPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_AnnotationPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_AngularTolerance.hxx>
#include <NXOpen/Annotations_DimensionPreferences.hxx>
#include <NXOpen/Annotations_FrameBarPreferences.hxx>
#include <NXOpen/Annotations_LetteringPreferences.hxx>
#include <NXOpen/Annotations_LineAndArrowPreferences.hxx>
#include <NXOpen/Annotations_LinearTolerance.hxx>
#include <NXOpen/Annotations_PmiPreferences.hxx>
#include <NXOpen/Annotations_SymbolPreferences.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class AnnotationPreferences;
    }
    namespace Annotations
    {
        class AnnotationManager;
    }
    namespace Annotations
    {
        class AngularTolerance;
    }
    namespace Annotations
    {
        class DimensionPreferences;
    }
    namespace Annotations
    {
        class FrameBarPreferences;
    }
    namespace Annotations
    {
        class LetteringPreferences;
    }
    namespace Annotations
    {
        class LineAndArrowPreferences;
    }
    namespace Annotations
    {
        class LinearTolerance;
    }
    namespace Annotations
    {
        class PmiPreferences;
    }
    namespace Annotations
    {
        class SymbolPreferences;
    }
    namespace Preferences
    {
        class AnnotationPreferencesImpl;
        /** Represents the global preferences for annotations  <br> To obtain an instance of this class, refer to @link NXOpen::Annotations::AnnotationManager  NXOpen::Annotations::AnnotationManager @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  AnnotationPreferences
        {
            private: AnnotationPreferencesImpl * m_annotationpreferences_impl;
            private: NXOpen::Annotations::AnnotationManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AnnotationPreferences(NXOpen::Annotations::AnnotationManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AnnotationPreferences();
            /** Returns the global lettering preferences for the part  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LetteringPreferences * GetLetteringPreferences
            (
            );
            /** Returns the global line and arrow preferences for the part  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LineAndArrowPreferences * GetLineAndArrowPreferences
            (
            );
            /** Returns the global symbol preferences for the part  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SymbolPreferences * GetSymbolPreferences
            (
            );
            /** Returns the global dimension preferences for the part  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DimensionPreferences * GetDimensionPreferences
            (
            );
            /** Returns the global angular tolerances for the part  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::AngularTolerance * GetAngularTolerances
            (
            );
            /** Returns the global linear tolerances for the part  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::LinearTolerance * GetLinearTolerances
            (
            );
            /** Returns the global PMI preferences for the part  @return  
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::Annotations::PmiSettingsManager::CreatePreferencesBuilder NXOpen::Annotations::PmiSettingsManager::CreatePreferencesBuilder@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::Annotations::PmiSettingsManager::CreatePreferencesBuilder instead.") NXOpen::Annotations::PmiPreferences * GetPmiPreferences
            (
            );
            /** Returns the NX font text space factor for each text type (dimension,general,appended,tolerance) for the part  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CharacterSpaceFactor GetNxFontCharacterSpaceFactor
            (
            );
            /** Returns the standard font text space factor for each text type (dimension,general,appended,tolerance) for the part  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CharacterSpaceFactor GetStandardFontCharacterSpaceFactor
            (
            );
            /** Returns the global frame bar preferences for the part  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::FrameBarPreferences * GetFrameBarPreferences
            (
            );
            /** Sets the global lettering preferences for the part 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLetteringPreferences
            (
                NXOpen::Annotations::LetteringPreferences * letteringPrefs /** lettering prefs */ 
            );
            /** Sets the global line and arrow preferences for the part 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLineAndArrowPreferences
            (
                NXOpen::Annotations::LineAndArrowPreferences * prefs /** prefs */ 
            );
            /** Sets the global symbol preferences for the part 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSymbolPreferences
            (
                NXOpen::Annotations::SymbolPreferences * prefs /** prefs */ 
            );
            /** Sets the global dimension preferences for the part 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionPreferences
            (
                NXOpen::Annotations::DimensionPreferences * prefs /** prefs */ 
            );
            /** Sets the global angular tolerances for the part 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAngularTolerances
            (
                NXOpen::Annotations::AngularTolerance * prefs /** prefs */ 
            );
            /** Sets the global linear tolerances for the part 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetLinearTolerances
            (
                NXOpen::Annotations::LinearTolerance * prefs /** prefs */ 
            );
            /** Sets the global PMI preferences for the part 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPmiPreferences
            (
                NXOpen::Annotations::PmiPreferences * pmiPrefs /** pmi prefs */ 
            );
            /** Sets the NX font text space factor for each text type (dimension,general,appended,tolerance) for the part 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetNxFontCharacterSpaceFactor
            (
                const NXOpen::Annotations::CharacterSpaceFactor & nxFontCharacterSpaceFactor /** nx font character space factor */ 
            );
            /** Sets the standard font text space factor for each text type (dimension,general,appended,tolerance) for the part 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStandardFontCharacterSpaceFactor
            (
                const NXOpen::Annotations::CharacterSpaceFactor & standardFontCharacterSpaceFactor /** standard font character space factor */ 
            );
            /** Sets the global frame bar preferences for the part 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_ship_gen_arrange ("Ship General Arrangement") OR nx_ship_basic ("Ship Basic Design") OR nx_ship_detail ("Ship Detail Design") OR nx_ship_mfg_prep ("Ship Manufacturing") */
            public: void SetFrameBarPreferences
            (
                NXOpen::Annotations::FrameBarPreferences * frameBarPrefs /** frame bar prefs */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
