#ifndef NXOpen_AME_SYMBOLAUTHORINGBUILDER_HXX_INCLUDED
#define NXOpen_AME_SYMBOLAUTHORINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_SymbolAuthoringBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Gateway_ImageCaptureBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_SelectReuseLibraryItemBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class SymbolAuthoringBuilder;
    }
    namespace AME
    {
        class SelectAMEPort;
    }
    namespace Annotations
    {
        class CustomSymbol;
    }
    class Builder;
    namespace Gateway
    {
        class ImageCaptureBuilder;
    }
    class NXObject;
    namespace Tooling
    {
        class SelectReuseLibraryItemBuilder;
    }
    namespace AME
    {
        class _SymbolAuthoringBuilderBuilder;
        class SymbolAuthoringBuilderImpl;
        /** Represents a Symbol Authoring class Builder   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateSymbolAuthoringBuilder  NXOpen::AME::AMEManager::CreateSymbolAuthoringBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CapturedImage.CaptureMethod </td> <td> 
         
        GraphicsArea </td> </tr> 

        <tr><td> 
         
        CapturedImage.Format </td> <td> 
         
        Bmp </td> </tr> 

        <tr><td> 
         
        CapturedImage.Size </td> <td> 
         
        Pixels64 </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        StandardSymbol </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  SymbolAuthoringBuilder : public NXOpen::Builder
        {
            /** Represents the type of symbol */
            public: enum Types
            {
                TypesStandardSymbol/** standard symbol */ ,
                TypesCableDefinitionLine/** cable definition line */ 
            };

            private: SymbolAuthoringBuilderImpl * m_symbolauthoringbuilder_impl;
            private: friend class  _SymbolAuthoringBuilderBuilder;
            protected: SymbolAuthoringBuilder();
            public: ~SymbolAuthoringBuilder();
            /**Returns  the symbol type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolAuthoringBuilder::Types Type
            (
            );
            /**Sets  the symbol type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetType
            (
                NXOpen::AME::SymbolAuthoringBuilder::Types type /** type */ 
            );
            /**Returns  the custom symbol selection
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Tooling::SelectReuseLibraryItemBuilder * SelectedCustomSymbol
            (
            );
            /**Returns  the port selection 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEPort * SelectedPort
            (
            );
            /**Returns  the symbol anchor point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Point2d AnchorPointLocation
            (
            );
            /**Sets  the symbol anchor point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAnchorPointLocation
            (
                const NXOpen::Point2d & symbolAnchorPoint /** symbolanchorpoint */ 
            );
            /**Returns  the image capture builder used to create an image for preview
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Gateway::ImageCaptureBuilder * CapturedImage
            (
            );
            /** Insert the symbol 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Annotations::CustomSymbol * InsertSymbol
            (
                const NXString & customSymbolPath /** customsymbolpath */ 
            );
            /** Insert the symbol 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::Annotations::CustomSymbol * InsertSymbol
            (
                const char * customSymbolPath /** customsymbolpath */ 
            );
            /**Returns  the symbol annotation point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Point2d SymbolAnnotationPoint
            (
            );
            /** Creates a new connection point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString CreateConnectionPoint
            (
                NXOpen::NXObject * portToBeMapped /** porttobemapped */ 
            );
            /** Gets the connection point location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Point2d GetConnectionPointLocation
            (
                const NXString & portID /** portid */ 
            );
            /** Gets the connection point location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::Point2d GetConnectionPointLocation
            (
                const char * portID /** portid */ 
            );
            /** Sets the connection point location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetConnectionPointLocation
            (
                const NXString & portID /** portid */ ,
                const NXOpen::Point2d & portLocation /** portlocation */ 
            );
            /** Sets the connection point location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetConnectionPointLocation
            (
                const char * portID /** portid */ ,
                const NXOpen::Point2d & portLocation /** portlocation */ 
            );
            /** Gets the connection direction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Point2d GetConnectionDirection
            (
                const NXString & portID /** portid */ 
            );
            /** Gets the connection direction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::Point2d GetConnectionDirection
            (
                const char * portID /** portid */ 
            );
            /** Sets the connection direction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetConnectionDirection
            (
                const NXString & portID /** portid */ ,
                const NXOpen::Point2d & connectionDirection /** connectiondirection */ 
            );
            /** Sets the connection direction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetConnectionDirection
            (
                const char * portID /** portid */ ,
                const NXOpen::Point2d & connectionDirection /** connectiondirection */ 
            );
            /** Deletes the connection point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteConnectionPoint
            (
                NXOpen::NXObject * portToBeUnmapped /** porttobeunmapped */ ,
                const NXString & portID /** portid */ 
            );
            /** Deletes the connection point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void DeleteConnectionPoint
            (
                NXOpen::NXObject * portToBeUnmapped /** porttobeunmapped */ ,
                const char * portID /** portid */ 
            );
            /** Annotation for connection point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CreateDefaultPortAnnotation
            (
                const NXString & portID /** portid */ ,
                const NXOpen::Point3d & connPoint /** connpoint */ 
            );
            /** Annotation for connection point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void CreateDefaultPortAnnotation
            (
                const char * portID /** portid */ ,
                const NXOpen::Point3d & connPoint /** connpoint */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
