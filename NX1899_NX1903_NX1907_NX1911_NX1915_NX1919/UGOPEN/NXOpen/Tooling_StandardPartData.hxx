#ifndef NXOpen_TOOLING_STANDARDPARTDATA_HXX_INCLUDED
#define NXOpen_TOOLING_STANDARDPARTDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_StandardPartData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/Tooling_ConceptStandardPartRecord.hxx>
#include <NXOpen/Tooling_SpreadsheetData.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class StandardPartData;
    }
    namespace Assemblies
    {
        class Component;
    }
    class NXObject;
    class Part;
    namespace Tooling
    {
        class ConceptStandardPartRecord;
    }
    namespace Tooling
    {
        class SpreadsheetData;
    }
    namespace Tooling
    {
        class StandardPartDataImpl;
        /**
                Represents the standard part client data.
              <br> This object does not need a creator.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  StandardPartData : public NXOpen::TransientObject
        {
            private: StandardPartDataImpl * m_standardpartdata_impl;
            /// \cond NX_NO_DOC 
            public: explicit StandardPartData(void *ptr);
            /// \endcond 
            /** Dispose the StandardPartClientData object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~StandardPartData();
            /** Assign selected standard part data to the client data
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetSelectedStandardPartData
            (
                const NXString & libName /** libname */ ,
                const NXString & libPath /** libpath */ 
            );
            /** Assign selected standard part data to the client data
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void SetSelectedStandardPartData
            (
                const char * libName /** libname */ ,
                const char * libPath /** libpath */ 
            );
            /** Remember last accessed standard part
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetLastAccessedObject
            (
                const NXString & catalogName /** Catalog name of the standard part last accessed */,
                const NXString & className /** Classification name of the standard part last accessed */,
                const NXString & registerName /** Register name of the standard part last accessed */
            );
            /** Remember last accessed standard part
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void SetLastAccessedObject
            (
                const char * catalogName /** Catalog name of the standard part last accessed */,
                const char * className /** Classification name of the standard part last accessed */,
                const char * registerName /** Register name of the standard part last accessed */
            );
            /** Gets the root standard part occurrence in edit  @return  The root part occurrence of the assembly standard part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::Component * GetRootStandardPartOccurrence
            (
            );
            /** Sets the root standard part occurrence to edit 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetRootStandardPartOccurrence
            (
                NXOpen::Assemblies::Component * partOccurrence /** The root part occurrence of the assembly standard part */
            );
            /** Sets the instance of the added standard part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetCreatedPartInstance
            (
                NXOpen::Assemblies::Component * component /** The component added or created in current NX session */
            );
            /** Sets the reference set name of the current standard part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetReferenceSetName
            (
                const NXString & refsetName /** The name of the reference set applied to the current standard part */
            );
            /** Sets the reference set name of the current standard part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void SetReferenceSetName
            (
                const char * refsetName /** The name of the reference set applied to the current standard part */
            );
            /** Sets the position method of the current standard part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetPositionMethod
            (
                const NXString & positionMethod /** The position method used to add a standard part */
            );
            /** Sets the position method of the current standard part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void SetPositionMethod
            (
                const char * positionMethod /** The position method used to add a standard part */
            );
            /** Sets the parent part of the current standard part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetParentPart
            (
                NXOpen::Part * parentPart /** The parent part of the current standard part */
            );
            /** Analyzes the position methods and set the current position method  @return  the index of the given position method in the list 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: int AnalyzePositionMethods
            (
                const NXString & positionMethod /** the definition string of position method */
            );
            /** Analyzes the position methods and set the current position method  @return  the index of the given position method in the list 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            int AnalyzePositionMethods
            (
                const char * positionMethod /** the definition string of position method */
            );
            /** Sets attaching tool object and drag position of the current standard part 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetDropData
            (
                NXOpen::NXObject * entity /** The object where the standard part attaches */,
                const NXOpen::Point3d & position /** The position where an object drags */
            );
            /** Sets the reference set name of the current standard part with specified index 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetReferenceSet
            (
                int refsetIndex /** The index of the reference set to set */
            );
            /** Returns the concept standard part record  @return  Concept standard part record 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: NXOpen::Tooling::ConceptStandardPartRecord * GetConceptStandardPartRecord
            (
                NXOpen::Tooling::SpreadsheetData * sheetData /** Spreadsheet data */,
                const NXString & fileContainer /** Location to save parts */,
                const NXString & assemblyName /** Assembly name for creating new parts */,
                const NXString & assemblyPartNumber /** Part number of the assembly in managed mode NX */,
                const NXString & assemblyItemType /** Item Type of the assembly in managed mode NX */,
                std::vector<NXString> & childrenNames /** Names of the children */
            );
            /** Returns the concept standard part record  @return  Concept standard part record 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            NXOpen::Tooling::ConceptStandardPartRecord * GetConceptStandardPartRecord
            (
                NXOpen::Tooling::SpreadsheetData * sheetData /** Spreadsheet data */,
                const char * fileContainer /** Location to save parts */,
                const char * assemblyName /** Assembly name for creating new parts */,
                const char * assemblyPartNumber /** Part number of the assembly in managed mode NX */,
                const char * assemblyItemType /** Item Type of the assembly in managed mode NX */,
                std::vector<NXString> & childrenNames /** Names of the children */
            );
            /** Assigns attributes to the concept mold base 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void AssignConceptMoldBaseAttributes
            (
                NXOpen::Part * moldBasePart /** The mold base part to assign attributes */,
                const NXString & fileContainer /** Location to save parts */,
                const NXString & assemblyName /** Assembly name for creating new parts */,
                const NXString & assemblyPartNumber /** Part number of the assembly in managed mode NX */,
                const NXString & assemblyItemType /** Item Type of the assembly in managed mode NX */,
                std::vector<NXString> & childrenNames /** Names of the children */
            );
            /** Assigns attributes to the concept mold base 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void AssignConceptMoldBaseAttributes
            (
                NXOpen::Part * moldBasePart /** The mold base part to assign attributes */,
                const char * fileContainer /** Location to save parts */,
                const char * assemblyName /** Assembly name for creating new parts */,
                const char * assemblyPartNumber /** Part number of the assembly in managed mode NX */,
                const char * assemblyItemType /** Item Type of the assembly in managed mode NX */,
                std::vector<NXString> & childrenNames /** Names of the children */
            );
            /** Sets the current standard part with specified catalog name, classification name and descriptive name. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetCurrentStandardPart
            (
                const NXString & catalogName /** Catalog name of the current standard part component */,
                const NXString & className /** Classification name of the current standard part component */,
                const NXString & registeredName /** Registered name of the current standard part component */
            );
            /** Sets the current standard part with specified catalog name, classification name and descriptive name. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void SetCurrentStandardPart
            (
                const char * catalogName /** Catalog name of the current standard part component */,
                const char * className /** Classification name of the current standard part component */,
                const char * registeredName /** Registered name of the current standard part component */
            );
            /** Sets the flag whether to use symbols to represent standard parts 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetIsToUseSymbol
            (
                bool useSymbol /** True if the user chooses to use symbols to represent standard parts */
            );
            /** Sets the flag whether to add pocket tool bodies for standard parts 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetIsToAddPocketToolBody
            (
                bool addPocketToolBody /** True if to add pocket tool bodies */
            );
            /** Sets the spread sheet and model file to the saved or latest version 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetDataToVersioned
            (
                NXOpen::Assemblies::Component * partOccurrence /** The root part occurrence of the assembly standard part */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
