#ifndef NXOpen_DRAWINGS_VIEWSTYLEFPCALLOUTCONFIGBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLEFPCALLOUTCONFIGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleFPCalloutConfigBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleFPCalloutConfigBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _ViewStyleFPCalloutConfigBuilderBuilder;
        class ViewStyleFPCalloutConfigBuilderImpl;
        /** Represents the Callout section of the Flat Pattern tab on the View Style Dialog (Drawings.ViewStyleFPCalloutsBuilder)
            
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewStyleFPCalloutConfigBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** This enum represents orientation types for the flat pattern callouts */
            public: enum OrientationType
            {
                OrientationTypeLeadered/** Leadered */,
                OrientationTypeAligned/** Aligned */
            };

            private: ViewStyleFPCalloutConfigBuilderImpl * m_viewstylefpcalloutconfigbuilder_impl;
            private: friend class  _ViewStyleFPCalloutConfigBuilderBuilder;
            protected: ViewStyleFPCalloutConfigBuilder();
            public: ~ViewStyleFPCalloutConfigBuilder();
            /** Returns the contents for a Flat Pattern callout type  @return  The contents for the callout type. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetContents
            (
                const NXString & calloutType /** The name of the callout for which to get the content. */
            );
            /** Returns the contents for a Flat Pattern callout type  @return  The contents for the callout type. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            std::vector<NXString> GetContents
            (
                const char * calloutType /** The name of the callout for which to get the content. */
            );
            /** Sets the contents for a Flat Pattern callout type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetContents
            (
                const NXString & calloutType /** The name of the callout for which to set the content. */,
                std::vector<NXString> & contents /** The contents for the callout type. */
            );
            /** Sets the contents for a Flat Pattern callout type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetContents
            (
                const char * calloutType /** The name of the callout for which to set the content. */,
                std::vector<NXString> & contents /** The contents for the callout type. */
            );
            /** Returns the orientation type for flat pattern callouts.  @return  The orientation type for the flat pattern callouts. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder::OrientationType GetOrientationType
            (
            );
            /** Sets the orientation type for flat pattern callouts. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOrientationType
            (
                NXOpen::Drawings::ViewStyleFPCalloutConfigBuilder::OrientationType orientation /** The orientation type for the flat pattern callouts. */
            );

            /// \cond NX_NO_DOC 
            /** Returns the offset value for distance between associated object and flat pattern callout created with 'aligned' 
                        orientation. If user drags a 'leadered' callout close to its associated object, callout orientation will be changed 
                        to 'aligned' when distance from associated object is less than the offset distance  @return  minimum offset distance 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: double GetCalloutOffsetDistance
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the offset value for distance between associated object and flat pattern callout created with 'aligned' 
                        orientation. If user drags a 'leadered' callout close to its associated object, callout orientation will be changed 
                        to 'aligned' when distance from associated object is less than the offset distance 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCalloutOffsetDistance
            (
                double calloutOffset /** minimum offset distance */
            );

            /// \endcond 
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
