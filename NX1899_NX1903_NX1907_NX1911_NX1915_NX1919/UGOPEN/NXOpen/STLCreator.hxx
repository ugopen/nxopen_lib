#ifndef NXOpen_STLCREATOR_HXX_INCLUDED
#define NXOpen_STLCREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     STLCreator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BaseCreator.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class STLCreator;
    class BaseCreator;
    class SelectNXObjectList;
    class _STLCreatorBuilder;
    class STLCreatorImpl;
    /**
        Represents a @link NXOpen::STLCreator NXOpen::STLCreator@endlink  to be used when exporting the STL Data
        This class is created using @link NXOpen::DexManager NXOpen::DexManager@endlink .
        NULL object will be returned from Commit()  <br> To create a new instance of this class, use @link NXOpen::DexManager::CreateStlCreator  NXOpen::DexManager::CreateStlCreator @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    AdjacencyTol </td> <td> 
     
    0.058 </td> </tr> 

    <tr><td> 
     
    AngularTol </td> <td> 
     
    18.0 </td> </tr> 

    <tr><td> 
     
    AutoNormalGen </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    ChordalTol </td> <td> 
     
    0.058 </td> </tr> 

    <tr><td> 
     
    ErrorMessageDisplay </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    NormalDisplay </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    OutputType </td> <td> 
     
    Binary </td> </tr> 

    <tr><td> 
     
    ReverseNormalDirection </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    SheetBodyExportOption </td> <td> 
     
    IndividualSheets </td> </tr> 

    <tr><td> 
     
    TriangleDisplay </td> <td> 
     
    0 </td> </tr> 

    </table>  

     <br>  Created in NX11.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  STLCreator : public NXOpen::BaseCreator
    {
        /** Options for outputing solid bodies to STL */
        public: enum OutputTypeEnum
        {
            OutputTypeEnumBinary/** output type binary */,
            OutputTypeEnumText/** output type text */
        };

        /** Options for choosing sheet bodies export option */
        public: enum SheetBodyExportOptionEnum
        {
            SheetBodyExportOptionEnumIndividualSheets/** facet as individual sheets */,
            SheetBodyExportOptionEnumJoinSheets/** attempt to join sheet bodies */
        };

        private: STLCreatorImpl * m_stlcreator_impl;
        private: friend class  _STLCreatorBuilder;
        protected: STLCreator();
        public: ~STLCreator();
        /**Returns  the export selection block - the object selection will be done by this block. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SelectNXObjectList * ExportSelectionBlock
        (
        );
        /**Returns  the reference surface selection - the object selection will be done by this block. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SelectNXObjectList * ReferenceSurfaceSelectionBlock
        (
        );
        /**Returns  the output type - this will decide if output type should be binary or text 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::STLCreator::OutputTypeEnum OutputType
        (
        );
        /**Sets  the output type - this will decide if output type should be binary or text 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputType
        (
            NXOpen::STLCreator::OutputTypeEnum outputType /** outputtype */ 
        );
        /**Returns  the adjacency tol - tolerance for adjacency 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: double AdjacencyTol
        (
        );
        /**Sets  the adjacency tol - tolerance for adjacency 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAdjacencyTol
        (
            double adjacencyTol /** adjacencytol */ 
        );
        /**Returns  the chordal tol - the distance between a chord of the tessellation and the true surface 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: double ChordalTol
        (
        );
        /**Sets  the chordal tol - the distance between a chord of the tessellation and the true surface 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetChordalTol
        (
            double chordalTol /** chordaltol */ 
        );
        /**Returns  the angular tol - tolerance for angular 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: double AngularTol
        (
        );
        /**Sets  the angular tol - tolerance for angular 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAngularTol
        (
            double angularTol /** angulartol */ 
        );
        /**Returns  the Auto Normal Gen - if set to true will generate auto normals 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool AutoNormalGen
        (
        );
        /**Sets  the Auto Normal Gen - if set to true will generate auto normals 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAutoNormalGen
        (
            bool autoNormalGen /** autonormalgen */ 
        );
        /**Returns  the Sheet Body Export Option - indicates whether sheet bodies will be joined or faceted as individual sheets
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::STLCreator::SheetBodyExportOptionEnum SheetBodyExportOption
        (
        );
        /**Sets  the Sheet Body Export Option - indicates whether sheet bodies will be joined or faceted as individual sheets
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSheetBodyExportOption
        (
            NXOpen::STLCreator::SheetBodyExportOptionEnum sheetBodyExportOption /** sheetbodyexportoption */ 
        );
        /**Returns  the Normal Display - if set to true will display normal 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool NormalDisplay
        (
        );
        /**Sets  the Normal Display - if set to true will display normal 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNormalDisplay
        (
            bool normalDisplay /** normaldisplay */ 
        );
        /**Returns  the Triangle Display - if set to true will will display triangles 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool TriangleDisplay
        (
        );
        /**Sets  the Triangle Display - if set to true will will display triangles 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTriangleDisplay
        (
            bool triangleDisplay /** triangledisplay */ 
        );
        /**Returns  the Reverse Normal Direction - if set to true will will reverse normal direction 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool ReverseNormalDirection
        (
        );
        /**Sets  the Reverse Normal Direction - if set to true will will reverse normal direction 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetReverseNormalDirection
        (
            bool reverseNormalDirection /** reversenormaldirection */ 
        );
        /**Returns  the Error Message Display - if set to true will will display error messages 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool ErrorMessageDisplay
        (
        );
        /**Sets  the Error Message Display - if set to true will will display error messages 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetErrorMessageDisplay
        (
            bool errorMessageDisplay /** errormessagedisplay */ 
        );
        /**Returns  the header info - STL header information 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXString HeaderInfo
        (
        );
        /**Sets  the header info - STL header information 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetHeaderInfo
        (
            const NXString & headerInfo /** headerinfo */ 
        );
        /**Sets  the header info - STL header information 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void SetHeaderInfo
        (
            const char * headerInfo /** headerinfo */ 
        );
        /**Returns  the normal direction indicator - STL normal direction indicator 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: int NormalDirectionIndicator
        (
        );
        /**Sets  the normal direction indicator - STL normal direction indicator 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNormalDirectionIndicator
        (
            int normalDirectionIndicator /** normaldirectionindicator */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
