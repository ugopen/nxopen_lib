#ifndef NXOpen_VSA_SIMULATIONPREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_VSA_SIMULATIONPREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Vsa_SimulationPreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_vsa_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Vsa
    {
        class SimulationPreferencesBuilder;
    }
    class Builder;
    namespace Vsa
    {
        class _SimulationPreferencesBuilderBuilder;
        class SimulationPreferencesBuilderImpl;
        /**
            
        	 <br> To create a new instance of this class, use @link NXOpen::Vsa::VsaManager::CreateSimulationPreferencesBuilder  NXOpen::Vsa::VsaManager::CreateSimulationPreferencesBuilder @endlink  <br> 
         <br>  Usable only on Windows <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_VSAEXPORT  SimulationPreferencesBuilder : public NXOpen::Builder
        {
            private: SimulationPreferencesBuilderImpl * m_simulationpreferencesbuilder_impl;
            private: friend class  _SimulationPreferencesBuilderBuilder;
            protected: SimulationPreferencesBuilder();
            public: ~SimulationPreferencesBuilder();
            /**Returns  the property represents  No Of Montecarlo. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int NoOfMontecarlo
            (
            );
            /**Sets  the property represents  No Of Montecarlo. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetNoOfMontecarlo
            (
                int noOfMontecarlo /** noofmontecarlo */ 
            );
            /**Returns  the property represents  HLM Simulation flag. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: bool HLMSimulation
            (
            );
            /**Sets  the property represents  HLM Simulation flag. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetHLMSimulation
            (
                bool hlmSimulation /** hlmsimulation */ 
            );
            /**Returns  the property represents  Max Offset for Mating. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxOffsetMating
            (
            );
            /**Sets  the property represents  Max Offset for Mating. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetMaxOffsetMating
            (
                double maxOffsetMating /** maxoffsetmating */ 
            );
            /**Returns  the property represents  Max Angle Tangency. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxAngleTangency
            (
            );
            /**Sets  the property represents  Max Angle Tangency. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetMaxAngleTangency
            (
                int maxAngleTangency /** maxangletangency */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
