#ifndef NXOpen_FEATURES_CONEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CONEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ConeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ConeBuilder;
    }
    class Axis;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    class SelectICurve;
    namespace Features
    {
        class _ConeBuilderBuilder;
        class ConeBuilderImpl;
        /**
            Represents a builder for a cone feature. 
            This allows creation and editing of a cone feature.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateConeBuilder  NXOpen::Features::FeatureCollection::CreateConeBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BaseDiameter.Value </td> <td> 
         
        50 (millimeters part), 50 (inches part) </td> </tr> 

        <tr><td> 
         
        HalfAngle.Value </td> <td> 
         
        45 </td> </tr> 

        <tr><td> 
         
        Height.Value </td> <td> 
         
        25 (millimeters part), 25 (inches part) </td> </tr> 

        <tr><td> 
         
        TopDiameter.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        DiametersAndHeight </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ConeBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Represents the Cone type */
            public: enum Types
            {
                TypesDiametersAndHeight/** Represents type of cone created by providing Diameters and Height */,
                TypesDiametersAndHalfAngle/** Represents type of cone created by providing Diameters and Half Angle */,
                TypesBaseDiameterHeightAndHalfAngle/** Represents type of cone created by providing Base Diameter, Height and Half Angle */,
                TypesTopDiameterHeightAndHalfAngle/** Represents type of cone created by providing Top Diameter, Height and Half Angle */,
                TypesTwoCoaxialArcs/** Represents type of cone created by providing Two Coaxial Arcs */
            };

            private: ConeBuilderImpl * m_conebuilder_impl;
            private: friend class  _ConeBuilderBuilder;
            protected: ConeBuilder();
            public: ~ConeBuilder();
            /**Returns  the axis 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * Axis
            (
            );
            /**Sets  the axis 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAxis
            (
                NXOpen::Axis * axis /** axis */ 
            );
            /**Returns  the base diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BaseDiameter
            (
            );
            /**Returns  the top diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TopDiameter
            (
            );
            /**Returns  the height 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the half angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HalfAngle
            (
            );
            /**Returns  the base arc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurve * BaseArc
            (
            );
            /**Returns  the top arc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurve * TopArc
            (
            );
            /**Returns  the boolean option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOption
            (
            );
            /**Returns  the type represented by @link NXOpen::Features::ConeBuilder::Types NXOpen::Features::ConeBuilder::Types@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ConeBuilder::Types Type
            (
            );
            /**Sets  the type represented by @link NXOpen::Features::ConeBuilder::Types NXOpen::Features::ConeBuilder::Types@endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::ConeBuilder::Types type /** type */ 
            );
            /**Returns  the option to keep associativity of the cone axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ParentAssociativity
            (
            );
            /**Sets  the option to keep associativity of the cone axis 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: void SetParentAssociativity
            (
                bool parentAssociativity /** parentassociativity */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
