#ifndef NXOpen_LAYOUT2D_LAYOUTDRAWINGSHEETCOLLECTION_HXX_INCLUDED
#define NXOpen_LAYOUT2D_LAYOUTDRAWINGSHEETCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layout2d_LayoutDrawingSheetCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_DrawingSheet.hxx>
#include <NXOpen/Layout2d_ConvertLayoutToSheetBuilder.hxx>
#include <NXOpen/Layout2d_ConvertSheetToLayoutBuilder.hxx>
#include <NXOpen/Layout2d_LayoutDrawingSheetBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_layout2d_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Layout2d
    {
        class LayoutDrawingSheetCollection;
    }
    class Part;
    namespace Layout2d
    {
        class LayoutDrawingSheet;
    }
    namespace Layout2d
    {
        class ConvertLayoutToSheetBuilder;
    }
    namespace Layout2d
    {
        class ConvertSheetToLayoutBuilder;
    }
    namespace Layout2d
    {
        class LayoutDrawingSheetBuilder;
    }
    namespace Layout2d
    {
        class LayoutDrawingSheetCollectionImpl;
        /** Represents a collection of @link NXOpen::Layout2d::LayoutDrawingSheet NXOpen::Layout2d::LayoutDrawingSheet@endlink s.  <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_LAYOUT2DEXPORT  LayoutDrawingSheetCollection : public NXOpen::TaggedObjectCollection
        {
            private: LayoutDrawingSheetCollectionImpl * m_layoutdrawingsheetcollection_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit LayoutDrawingSheetCollection(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~LayoutDrawingSheetCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Layout2d::LayoutDrawingSheetCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Layout2d::LayoutDrawingSheet *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Layout2d::LayoutDrawingSheetCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_LAYOUT2DEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_LAYOUT2DEXPORT  void next();
                NXOpen::Layout2d::LayoutDrawingSheetCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link NXOpen::Layout2d::LayoutDrawingSheet NXOpen::Layout2d::LayoutDrawingSheet@endlink  with the given identifier 
                    as recorded in a journal.  An object may not return the same value as its JournalIdentifier in 
                    different versions of  the software. However newer versions of the software should find the same 
                    object when  FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  Layout drawing sheet with this identifier 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::LayoutDrawingSheet * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the Layout drawing sheet you want */
            );
            /** Finds the @link NXOpen::Layout2d::LayoutDrawingSheet NXOpen::Layout2d::LayoutDrawingSheet@endlink  with the given identifier 
                    as recorded in a journal.  An object may not return the same value as its JournalIdentifier in 
                    different versions of  the software. However newer versions of the software should find the same 
                    object when  FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  Layout drawing sheet with this identifier 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            NXOpen::Layout2d::LayoutDrawingSheet * FindObject
            (
                const char * journalIdentifier /** Identifier of the Layout drawing sheet you want */
            );
            /**Returns  the currently opened layout drawing sheet. This will return NULL if no layout drawing sheet is opened. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::LayoutDrawingSheet * CurrentDrawingSheet
            (
            );
            /** Creates a @link NXOpen::Layout2d::LayoutDrawingSheetBuilder NXOpen::Layout2d::LayoutDrawingSheetBuilder@endlink   @return  the layout drawing sheet builder 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::LayoutDrawingSheetBuilder * CreateLayoutDrawingSheetBuilder
            (
                NXOpen::Layout2d::LayoutDrawingSheet * layoutDrawingSheet /** reserved for future use, set to 0 */
            );
            /** Inserts a layout drawing sheet into a part.  @return  the inserted layout drawing sheet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::LayoutDrawingSheet * InsertSheet
            (
                const NXString & name /** Layout drawing sheet name */,
                NXOpen::Drawings::DrawingSheet::Unit units /** Unit of sheet size */,
                double numerator /** Numerator of the scale of layout */,
                double denominator /** Denominator of the scale of layout */,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projectionAngle /** Projection angle */
            );
            /** Inserts a layout drawing sheet into a part.  @return  the inserted layout drawing sheet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            NXOpen::Layout2d::LayoutDrawingSheet * InsertSheet
            (
                const char * name /** Layout drawing sheet name */,
                NXOpen::Drawings::DrawingSheet::Unit units /** Unit of sheet size */,
                double numerator /** Numerator of the scale of layout */,
                double denominator /** Denominator of the scale of layout */,
                NXOpen::Drawings::DrawingSheet::ProjectionAngleType projectionAngle /** Projection angle */
            );
            /** Creates a @link NXOpen::Layout2d::ConvertSheetToLayoutBuilder NXOpen::Layout2d::ConvertSheetToLayoutBuilder@endlink   @return  the convert sheet to layout builder 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::ConvertSheetToLayoutBuilder * CreateConvertSheetToLayoutBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::ConvertLayoutToSheetBuilder NXOpen::Layout2d::ConvertLayoutToSheetBuilder@endlink   @return  the convert layout to sheet builder 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::ConvertLayoutToSheetBuilder * CreateConvertLayoutToSheetBuilder
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
