#ifndef NXOpen_LINEDESIGNER_DEFINETOOLBUILDER_HXX_INCLUDED
#define NXOpen_LINEDESIGNER_DEFINETOOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LineDesigner_DefineToolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/liblinedesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace LineDesigner
    {
        class DefineToolBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Point;
    namespace LineDesigner
    {
        class _DefineToolBuilderBuilder;
        class DefineToolBuilderImpl;
        /** Define Tool  <br> To create a new instance of this class, use @link NXOpen::LineDesigner::LineDesignerManager::CreateDefineToolBuilder  NXOpen::LineDesigner::LineDesignerManager::CreateDefineToolBuilder @endlink  <br> 
         <br>  Created in NX12.0.1.  <br>  
        */
        class LINEDESIGNEROPENCPPEXPORT  DefineToolBuilder : public NXOpen::Builder
        {
            /** This enum is providing possible tool type */
            public: enum ToolType
            {
                ToolTypeGun/** gun */ ,
                ToolTypeServoGun/** servo gun */ ,
                ToolTypePneumaticServoGun/** pneumatic servo gun */ ,
                ToolTypePaintGun/** paint gun */ ,
                ToolTypeGripper/** gripper */ 
            };

            private: DefineToolBuilderImpl * m_definetoolbuilder_impl;
            private: friend class  _DefineToolBuilderBuilder;
            protected: DefineToolBuilder();
            public: ~DefineToolBuilder();
            /**Returns  the tool type list 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::LineDesigner::DefineToolBuilder::ToolType ToolTypeList
            (
            );
            /**Sets  the tool type list 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetToolTypeList
            (
                NXOpen::LineDesigner::DefineToolBuilder::ToolType enumToolType /** enumtooltype */ 
            );
            /**Returns  the tool frame point 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Point * ToolFramePoint
            (
            );
            /**Sets  the tool frame point 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetToolFramePoint
            (
                NXOpen::Point * toolFramePoint /** toolframepoint */ 
            );
            /**Returns  the tool frame direction of connector 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Direction * ToolFrameDirectionOfConnector
            (
            );
            /**Sets  the tool frame direction of connector 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetToolFrameDirectionOfConnector
            (
                NXOpen::Direction * toolFrameDirectionOfConnector /** toolframedirectionofconnector */ 
            );
            /**Returns  the tool frame parallel to object direction 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Direction * ToolFrameParallelToObjectDirection
            (
            );
            /**Sets  the tool frame parallel to object direction 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetToolFrameParallelToObjectDirection
            (
                NXOpen::Direction * toolFrameParallelToObjectDirection /** toolframeparalleltoobjectdirection */ 
            );
            /**Returns  the base frame point 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Point * BaseFramePoint
            (
            );
            /**Sets  the base frame point 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetBaseFramePoint
            (
                NXOpen::Point * baseFramePoint /** baseframepoint */ 
            );
            /**Returns  the base frame direction of connector 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Direction * BaseFrameDirectionOfConnector
            (
            );
            /**Sets  the base frame direction of connector 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetBaseFrameDirectionOfConnector
            (
                NXOpen::Direction * baseFrameDirectionOfConnector /** baseframedirectionofconnector */ 
            );
            /**Returns  the base frame parallel to object direction 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Direction * BaseFrameParallelToObjectDirection
            (
            );
            /**Sets  the base frame parallel to object direction 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetBaseFrameParallelToObjectDirection
            (
                NXOpen::Direction * baseFrameParallelToObjectDirection /** baseframeparalleltoobjectdirection */ 
            );
            /**Returns  the base frame compitable type name 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXString BaseFrameCompitableTypeName
            (
            );
            /**Sets  the base frame compitable type name 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetBaseFrameCompitableTypeName
            (
                const NXString & baseFrameCompitableTypeName /** baseframecompitabletypename */ 
            );
            /**Sets  the base frame compitable type name 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void SetBaseFrameCompitableTypeName
            (
                const char * baseFrameCompitableTypeName /** baseframecompitabletypename */ 
            );
            /**  The base frame compatible connector types are returns 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: std::vector<NXString> GetBaseFrameCompatibleTypeList
            (
            );
            /** The base connector compatible types are set 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetBaseFrameCompatibleTypeList
            (
                const std::vector<NXString> & baseFrameCompatibleTypeList /** baseframecompatibletypelist */ 
            );
            /** The base frame connector propagated expressions 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: std::vector<NXOpen::Expression *> GetBaseFramePropagatedExpression
            (
            );
            /**The base frame connector propagated expressions are set 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetBaseFramePropagatedExpression
            (
                const std::vector<NXOpen::Expression *> & baseFramePropagatedExpression /** baseframepropagatedexpression */ 
            );
            /** The Nth expressions from base frame connector propagated expressions are set
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetNthBaseFramePropagatedExpression
            (
                int nthBaseFramePropagatedExpression /** nthbaseframepropagatedexpression */ ,
                NXOpen::Expression * baseFramePropagatedExpression /** baseframepropagatedexpression */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
