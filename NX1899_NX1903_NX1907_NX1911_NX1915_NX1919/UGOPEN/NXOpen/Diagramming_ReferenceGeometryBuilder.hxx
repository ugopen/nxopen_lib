#ifndef NXOpen_DIAGRAMMING_REFERENCEGEOMETRYBUILDER_HXX_INCLUDED
#define NXOpen_DIAGRAMMING_REFERENCEGEOMETRYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Diagramming_ReferenceGeometryBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/Diagramming_AnnotationBuilder.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/libnxopencpp_diagramming_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Diagramming
    {
        class ReferenceGeometryBuilder;
    }
    namespace Diagramming
    {
        class AnnotationBuilder;
    }
    class ExternalFileReferenceAdapter;
    class IExternalFileReferencer;
    namespace Diagramming
    {
        class _ReferenceGeometryBuilderBuilder;
        class ReferenceGeometryBuilderImpl;
        /** This builder is used to create/edit Reference Geometry  <br> To create a new instance of this class, use @link NXOpen::Diagramming::SmartDiagrammingManager::CreateReferenceGeometryBuilder  NXOpen::Diagramming::SmartDiagrammingManager::CreateReferenceGeometryBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_DIAGRAMMINGEXPORT  ReferenceGeometryBuilder : public NXOpen::Diagramming::AnnotationBuilder, public virtual NXOpen::IExternalFileReferencer
        {
            private: ReferenceGeometryBuilderImpl * m_referencegeometrybuilder_impl;
            private: friend class  _ReferenceGeometryBuilderBuilder;
            protected: ReferenceGeometryBuilder();
            public: ~ReferenceGeometryBuilder();
            /**Returns  the view to import from 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString View
            (
            );
            /**Sets  the view to import from 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetView
            (
                const NXString & viewIdentifier /** Identifier of the drafting view */
            );
            /**Sets  the view to import from 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetView
            (
                const char * viewIdentifier /** Identifier of the drafting view */
            );
            /**Returns  the scale 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /** Gets the color  @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetColor
            (
            );
            /** Sets the color 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColor
            (
                const std::vector<double> & color /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns  the transparency (between 0 and 100) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int Transparency
            (
            );
            /**Sets  the transparency (between 0 and 100) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransparency
            (
                int transparency /** transparency */ 
            );
            /**Returns  the setting that determines whether the border should be displayed or not. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayBorder
            (
            );
            /**Sets  the setting that determines whether the border should be displayed or not. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayBorder
            (
                bool displayBorder /** displayborder */ 
            );
            /** When set will cause a refresh of the geometry from the drawing view during commit. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void RefreshFromView
            (
                bool refresh /** true - a refresh will be performed, false - a refresh will not be performed */
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
