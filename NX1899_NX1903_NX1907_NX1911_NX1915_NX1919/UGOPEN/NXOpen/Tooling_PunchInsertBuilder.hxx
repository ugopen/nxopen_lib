#ifndef NXOpen_TOOLING_PUNCHINSERTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_PUNCHINSERTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_PunchInsertBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class PunchInsertBuilder;
    }
    class Builder;
    class Expression;
    class SelectBodyList;
    class SelectSketch;
    class TaggedObject;
    namespace Tooling
    {
        class _PunchInsertBuilderBuilder;
        class PunchInsertBuilderImpl;
        /** Represents punch insert builder.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreatePunchInsertBuilder  NXOpen::Tooling::ProgressiveDieManager::CreatePunchInsertBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AutomaticFitToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DifferentPenetration </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        InsertPunchType </td> <td> 
         
        Standard </td> </tr> 

        <tr><td> 
         
        MinimumLength </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        MinimumRadius </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        NormalClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalClearanceOption </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        NormalOffsetSide </td> <td> 
         
        DieSide </td> </tr> 

        <tr><td> 
         
        NormalOnePunchToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalRenameDialog </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Position </td> <td> 
         
        Bottom </td> </tr> 

        <tr><td> 
         
        PunchOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketClearanceForBackingPlate </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketClearanceForPunchPlate </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketClearanceForStripperPlate </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketHeightInStripperPlate </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketToggleForBackingPlate </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketToggleForPunchPlate </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketToggleForStripperPlate </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchPocketTypeInBackingPlate </td> <td> 
         
        Clearance </td> </tr> 

        <tr><td> 
         
        PunchPocketTypeInPunchPlate </td> <td> 
         
        Clearance </td> </tr> 

        <tr><td> 
         
        PunchPocketTypeInStripperPlate </td> <td> 
         
        Clearance </td> </tr> 

        <tr><td> 
         
        PunchSameOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StandardBPToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StandardClearanceBP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StandardClearancePP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StandardClearanceSP </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StandardPPToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StandardSPToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UserDefinedPunchEnd.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        UserDefinedPunchPenetration </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UserDefinedPunchStart.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  PunchInsertBuilder : public NXOpen::Builder
        {
            /** Standard and User design insert punch type */
            public: enum InsertPunchTypeEnum
            {
                InsertPunchTypeEnumStandard/** standard */ ,
                InsertPunchTypeEnumUserDesign/** user design */ 
            };

            /** Specifies the position of piercing inserts, for EDW only */
            public: enum InsertPositionItems
            {
                InsertPositionItemsTop/** The position is top side */,
                InsertPositionItemsBottom/** The position is bottom side  */
            };

            /** Specifies the punch pocket type in punch plate. */
            public: enum PunchPocketTypeItemsPunchPlate
            {
                PunchPocketTypeItemsPunchPlateClearance/** Punch pocket type in punch plate is clearance */,
                PunchPocketTypeItemsPunchPlateFillet/** Punch pocket type in punch plate is fillet */,
                PunchPocketTypeItemsPunchPlateCircle/** Punch pocket type in punch plate is circle */,
                PunchPocketTypeItemsPunchPlateSuperOffset/** Punch pocket type in punch plate is super offset */
            };

            /** Specifies the punch pocket type in backing plate. */
            public: enum PunchPocketTypeItemsBackingPlate
            {
                PunchPocketTypeItemsBackingPlateClearance/** Punch pocket type in backing plate is clearance */,
                PunchPocketTypeItemsBackingPlateFillet/** Punch pocket type in backing plate is fillet */,
                PunchPocketTypeItemsBackingPlateCircle/** Punch pocket type in backing plate is circle */,
                PunchPocketTypeItemsBackingPlateSuperOffset/** Punch pocket type in backing plate is super offset */
            };

            /** Specifies the punch pocket type in stripper plate. */
            public: enum PunchPocketTypeItemsStripperPlate
            {
                PunchPocketTypeItemsStripperPlateClearance/** Punch pocket type in stripper plate is clearance */,
                PunchPocketTypeItemsStripperPlateFillet/** Punch pocket type in stripper plate is fillet */,
                PunchPocketTypeItemsStripperPlateCircle/** Punch pocket type in stripper plate is circle */,
                PunchPocketTypeItemsStripperPlateSuperOffset/** Punch pocket type in stripper plate is super offset */
            };

            /** Specifies the design option of piercing insert. */
            public: enum NormalClearanceOptionTypeItems
            {
                NormalClearanceOptionTypeItemsConstant/** The design option is normal */,
                NormalClearanceOptionTypeItemsVariable/** The design option is fineblanking */,
                NormalClearanceOptionTypeItemsSuperOffset/** The design option is fineblanking */
            };

            /** Specifies the offset side of normal pierce insert design. */
            public: enum NormalOffsetSideTypeItems
            {
                NormalOffsetSideTypeItemsDieSide/** The offset side is die */,
                NormalOffsetSideTypeItemsPunchSide/** The offset side is punch */
            };

            private: PunchInsertBuilderImpl * m_punchinsertbuilder_impl;
            private: friend class  _PunchInsertBuilderBuilder;
            protected: PunchInsertBuilder();
            public: ~PunchInsertBuilder();
            /**Returns  the select scraps for punch insert design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectScrap
            (
            );
            /**Returns  the select all scraps option for creating all punches at a time. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool SelectAllScrapsToggle
            (
            );
            /**Sets  the select all scraps option for creating all punches at a time. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectAllScrapsToggle
            (
                bool selectAllScrapsToggle /** selectallscrapstoggle */ 
            );
            /**Returns  the reverse direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PunchInsertBuilder::InsertPositionItems Position
            (
            );
            /**Sets  the reverse direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPosition
            (
                NXOpen::Tooling::PunchInsertBuilder::InsertPositionItems position /** position */ 
            );
            /**Returns  the insert punch type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PunchInsertBuilder::InsertPunchTypeEnum InsertPunchType
            (
            );
            /**Sets  the insert punch type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInsertPunchType
            (
                NXOpen::Tooling::PunchInsertBuilder::InsertPunchTypeEnum insertPunchType /** insertpunchtype */ 
            );
            /**Returns  the standard punch plate clearance toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool StandardPPToggle
            (
            );
            /**Sets  the standard punch plate clearance toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStandardPPToggle
            (
                bool standardPPToggle /** standardpptoggle */ 
            );
            /**Returns  the standard punch plate clearance  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double StandardClearancePP
            (
            );
            /**Sets  the standard punch plate clearance  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStandardClearancePP
            (
                double standardClearancePP /** standardclearancepp */ 
            );
            /**Returns  the standard bottoming plate clearance toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool StandardBPToggle
            (
            );
            /**Sets  the standard bottoming plate clearance toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStandardBPToggle
            (
                bool standardBPToggle /** standardbptoggle */ 
            );
            /**Returns  the standard bottoming plate clearance 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double StandardClearanceBP
            (
            );
            /**Sets  the standard bottoming plate clearance 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStandardClearanceBP
            (
                double standardClearanceBP /** standardclearancebp */ 
            );
            /**Returns  the standard stripper plate clearance toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool StandardSPToggle
            (
            );
            /**Sets  the standard stripper plate clearance toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStandardSPToggle
            (
                bool standardSPToggle /** standardsptoggle */ 
            );
            /**Returns  the standard stripper plate clearance 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double StandardClearanceSP
            (
            );
            /**Sets  the standard stripper plate clearance 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStandardClearanceSP
            (
                double standardClearanceSP /** standardclearancesp */ 
            );
            /**Returns  the standard part classification name for punch insert. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StandardPartClassificationName
            (
            );
            /**Sets  the standard part classification name for punch insert. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStandardPartClassificationName
            (
                const NXString & standartPartClassificationName /** Specifies the standard part classification name */
            );
            /**Sets  the standard part classification name for punch insert. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetStandardPartClassificationName
            (
                const char * standartPartClassificationName /** Specifies the standard part classification name */
            );
            /** Load standard punch for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void StandardPunchInsert
            (
            );
            /**Returns  the different penetration for punch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool DifferentPenetration
            (
            );
            /**Sets  the different penetration for punch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDifferentPenetration
            (
                bool differentPenetration /** differentpenetration */ 
            );
            /**Returns  the user defined punch penetration. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double UserDefinedPunchPenetration
            (
            );
            /**Sets  the user defined punch penetration. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUserDefinedPunchPenetration
            (
                double userDefinedPunchPenetration /** userdefinedpunchpenetration */ 
            );
            /**Returns  the punch length for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NormalPunchLength
            (
            );
            /**Sets  the punch length for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNormalPunchLength
            (
                const NXString & normalPunchLength /** Indicates the punch length for normal pierce design */
            );
            /**Sets  the punch length for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetNormalPunchLength
            (
                const char * normalPunchLength /** Indicates the punch length for normal pierce design */
            );
            /**Returns  the user defined punch start 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UserDefinedPunchStart
            (
            );
            /**Returns  the user defined punch end 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UserDefinedPunchEnd
            (
            );
            /**Returns  the punch pocket toggle for punch plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool PunchPocketToggleForPunchPlate
            (
            );
            /**Sets  the punch pocket toggle for punch plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketToggleForPunchPlate
            (
                bool punchPocketToggleForPunchPlate /** punchpockettoggleforpunchplate */ 
            );
            /**Returns  the punch pocket type in punch plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PunchInsertBuilder::PunchPocketTypeItemsPunchPlate PunchPocketTypeInPunchPlate
            (
            );
            /**Sets  the punch pocket type in punch plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketTypeInPunchPlate
            (
                NXOpen::Tooling::PunchInsertBuilder::PunchPocketTypeItemsPunchPlate punchPocketTypeInPunchPlate /** punchpockettypeinpunchplate */ 
            );
            /**Returns  the punch pocket clearance for punch plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double PunchPocketClearanceForPunchPlate
            (
            );
            /**Sets  the punch pocket clearance for punch plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketClearanceForPunchPlate
            (
                double punchPocketClearanceForPunchPlate /** punchpocketclearanceforpunchplate */ 
            );
            /**Returns  the punch pocket toggle for backing plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool PunchPocketToggleForBackingPlate
            (
            );
            /**Sets  the punch pocket toggle for backing plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketToggleForBackingPlate
            (
                bool punchPocketToggleForBackingPlate /** punchpockettoggleforbackingplate */ 
            );
            /**Returns  the punch pocket type in backing plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PunchInsertBuilder::PunchPocketTypeItemsBackingPlate PunchPocketTypeInBackingPlate
            (
            );
            /**Sets  the punch pocket type in backing plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketTypeInBackingPlate
            (
                NXOpen::Tooling::PunchInsertBuilder::PunchPocketTypeItemsBackingPlate punchPocketTypeInBackingPlate /** punchpockettypeinbackingplate */ 
            );
            /**Returns  the punch pocket clearance for backing plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double PunchPocketClearanceForBackingPlate
            (
            );
            /**Sets  the punch pocket clearance for backing plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketClearanceForBackingPlate
            (
                double punchPocketClearanceForBackingPlate /** punchpocketclearanceforbackingplate */ 
            );
            /**Returns  the punch pocket toggle for stripper plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool PunchPocketToggleForStripperPlate
            (
            );
            /**Sets  the punch pocket toggle for stripper plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketToggleForStripperPlate
            (
                bool punchPocketToggleForStripperPlate /** punchpockettoggleforstripperplate */ 
            );
            /**Returns  the punch pocket type in stripper plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PunchInsertBuilder::PunchPocketTypeItemsStripperPlate PunchPocketTypeInStripperPlate
            (
            );
            /**Sets  the punch pocket type in stripper plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketTypeInStripperPlate
            (
                NXOpen::Tooling::PunchInsertBuilder::PunchPocketTypeItemsStripperPlate punchPocketTypeInStripperPlate /** punchpockettypeinstripperplate */ 
            );
            /**Returns  the punch pocket clearance for stripper plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double PunchPocketClearanceForStripperPlate
            (
            );
            /**Sets  the punch pocket clearance for stripper plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketClearanceForStripperPlate
            (
                double punchPocketClearanceForStripperPlate /** punchpocketclearanceforstripperplate */ 
            );
            /**Returns  the punch pocket height in the stripper plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double PunchPocketHeightInStripperPlate
            (
            );
            /**Sets  the punch pocket height in the stripper plate. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchPocketHeightInStripperPlate
            (
                double punchPocketHeightInStripperPlate /** punchpocketheightinstripperplate */ 
            );
            /** Edit offset value table. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void PunchEditOffsetValueTable
            (
            );
            /**Returns  the same offset value option of punch design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool PunchSameOffsetValue
            (
            );
            /**Sets  the same offset value option of punch design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchSameOffsetValue
            (
                bool punchSameOffsetValue /** punchsameoffsetvalue */ 
            );
            /**Returns  the punch offset value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double PunchOffsetValue
            (
            );
            /**Sets  the punch offset value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPunchOffsetValue
            (
                double punchOffsetValue /** punchoffsetvalue */ 
            );
            /**Returns  the selected sketch 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectSketch * SelectSketch
            (
            );
            /**Returns  the select pierce punch insert to be edited. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * NormalSelectPiercePunch
            (
            );
            /** Create user defined punch for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void NormalCreateUDP
            (
            );
            /** Add standard punch insert by invoking standard part management dialog 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AddStandardPunchInsert
            (
            );
            /**Returns  the clearance option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PunchInsertBuilder::NormalClearanceOptionTypeItems NormalClearanceOption
            (
            );
            /**Sets  the clearance option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNormalClearanceOption
            (
                NXOpen::Tooling::PunchInsertBuilder::NormalClearanceOptionTypeItems normalClearanceOption /** normalclearanceoption */ 
            );
            /**Returns  the clearance value for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalClearance
            (
            );
            /**Sets  the clearance value for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNormalClearance
            (
                double normalClearance /** normalclearance */ 
            );
            /**Returns  the offset side option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PunchInsertBuilder::NormalOffsetSideTypeItems NormalOffsetSide
            (
            );
            /**Sets  the offset side option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNormalOffsetSide
            (
                NXOpen::Tooling::PunchInsertBuilder::NormalOffsetSideTypeItems normalOffsetSide /** normaloffsetside */ 
            );
            /**Returns  the minimum length 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumLength
            (
            );
            /**Sets  the minimum length 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMinimumLength
            (
                double minimumLength /** minimumlength */ 
            );
            /**Returns  the minimum radius 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumRadius
            (
            );
            /**Sets  the minimum radius 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMinimumRadius
            (
                double minimumRadius /** minimumradius */ 
            );
            /**Returns  the offset spreadsheet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OffsetSpreadsheet
            (
            );
            /**Sets  the offset spreadsheet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOffsetSpreadsheet
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the offset spreadsheet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetOffsetSpreadsheet
            (
                const char * filename /** filename */ 
            );
            /** Edit offset spreadhseet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void EditOffsetSpreadsheet
            (
            );
            /**Returns  the automatic fit toggle 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticFitToggle
            (
            );
            /**Sets  the automatic fit toggle 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAutomaticFitToggle
            (
                bool automaticFitToggle /** automaticfittoggle */ 
            );
            /**Returns  the one punch option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool NormalOnePunchToggle
            (
            );
            /**Sets  the one punch option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNormalOnePunchToggle
            (
                bool normalOnePunchToggle /** normalonepunchtoggle */ 
            );
            /**Returns  the rename dialog option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool NormalRenameDialog
            (
            );
            /**Sets  the rename dialog option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNormalRenameDialog
            (
                bool normalRenameDialog /** normalrenamedialog */ 
            );
            /**Returns  the include pilot scrap option toggle 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludePilotScrap
            (
            );
            /**Sets  the include pilot scrap option toggle 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetIncludePilotScrap
            (
                bool includePilotScrap /** includepilotscrap */ 
            );
            /**Returns  the parent part name to create insert. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParentPartName
            (
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParentPartName
            (
                const NXString & parentPart /** Specifies the parent part name */
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetParentPartName
            (
                const char * parentPart /** Specifies the parent part name */
            );
            /**Returns  the new component names. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewPartNames
            (
            );
            /**Sets  the new component names. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewPartNames
            (
                const NXString & newPartNames /** Specifies the new component names */
            );
            /**Sets  the new component names. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetNewPartNames
            (
                const char * newPartNames /** Specifies the new component names */
            );
            /**Returns  the standard punch tag. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * StandardPunchTag
            (
            );
            /**Sets  the standard punch tag. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStandardPunchTag
            (
                NXOpen::TaggedObject * standardPunchTag /** Specifies the standard punch tag */
            );
            /**Returns  the punch insert tag. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * PunchInsertTag
            (
            );
            /**Sets  the punch insert tag. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchInsertTag
            (
                NXOpen::TaggedObject * punchInsertTag /** Specifies the punch insert tag */
            );
            /**Returns  the selected attribute spreadsheet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectAttributeSpreadsheet
            (
            );
            /**Sets  the selected attribute spreadsheet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectAttributeSpreadsheet
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the selected attribute spreadsheet 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            void SetSelectAttributeSpreadsheet
            (
                const char * fileName /** filename */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
