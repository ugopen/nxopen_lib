#ifndef NXOpen_FEATURES_LAWEXTENSIONBUILDEREX_HXX_INCLUDED
#define NXOpen_FEATURES_LAWEXTENSIONBUILDEREX_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_LawExtensionBuilderEx.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_CurveFitData.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/GeometricUtilities_SpineDefinitionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class LawExtensionBuilderEx;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveFitData;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    namespace GeometricUtilities
    {
        class SpineDefinitionBuilder;
    }
    class ScCollector;
    class Section;
    namespace Features
    {
        class _LawExtensionBuilderExBuilder;
        class LawExtensionBuilderExImpl;
        /**
            Represents a @link NXOpen::Features::LawExtensionEx NXOpen::Features::LawExtensionEx@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateLawExtensionBuilderEx  NXOpen::Features::FeatureCollection::CreateLawExtensionBuilderEx @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleLaw.Function </td> <td> 
         
        ft </td> </tr> 

        <tr><td> 
         
        AngleLaw.LawType </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        AngleLaw.Parameter </td> <td> 
         
        t </td> </tr> 

        <tr><td> 
         
        CurveFitData.CurveJoinMethod </td> <td> 
         
        No </td> </tr> 

        <tr><td> 
         
        CurveFitData.Degree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitData.FitMethod </td> <td> 
         
        DegreeAndSegments </td> </tr> 

        <tr><td> 
         
        CurveFitData.IsAdvancedFit </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CurveFitData.IsAlignShape </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MaximumDegree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MaximumSegments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        CurveFitData.MinimumDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        CurveFitData.Segments </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        LaydownCurve </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        LengthLaw.LawType </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        MergeFacesIfPossible </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        MiterOption </td> <td> 
         
        Blend </td> </tr> 

        <tr><td> 
         
        MiterRadius.Value </td> <td> 
         
        2.5 (millimeters part), 0.1 (inches part) </td> </tr> 

        <tr><td> 
         
        OppositeSideLengthLaw.LawType </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        SpineDefinition.Method </td> <td> 
         
        None </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  LawExtensionBuilderEx : public NXOpen::Features::FeatureBuilder
        {
            /** Law extension creation types */
            public: enum Types
            {
                TypesFaces/** Reference faces */,
                TypesVector/** Reference vector */
            };

            /** Opposite side extension options */
            public: enum OppositeSideExtensionOptions
            {
                OppositeSideExtensionOptionsNone/** No extension */,
                OppositeSideExtensionOptionsSymmetric/** Symmetric extension */,
                OppositeSideExtensionOptionsAsymmetric/** Asymmetric extension */
            };

            /** Miter options */
            public: enum MiterOptions
            {
                MiterOptionsNone/** No miter solution between two discontinuous faces*/,
                MiterOptionsSharp/** Creates a sharp edge between two faces */,
                MiterOptionsBlend/** Creates a three-sided patch between two faces */,
                MiterOptionsRadius/** Creates a four-sided patch between two faces */
            };

            private: LawExtensionBuilderExImpl * m_lawextensionbuilderex_impl;
            private: friend class  _LawExtensionBuilderExBuilder;
            protected: LawExtensionBuilderEx();
            public: ~LawExtensionBuilderEx();
            /**Returns  the type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::LawExtensionBuilderEx::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetType
            (
                NXOpen::Features::LawExtensionBuilderEx::Types type /** type */ 
            );
            /**Returns  the base profile 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * BaseProfile
            (
            );
            /**Returns  the faces. Faces are used only when @link NXOpen::Features::LawExtensionBuilderEx::Types NXOpen::Features::LawExtensionBuilderEx::Types@endlink  is  
                        @link NXOpen::Features::LawExtensionBuilderEx::TypesFaces NXOpen::Features::LawExtensionBuilderEx::TypesFaces@endlink . The faces must be
                        sewable to form a single sheet body. The normal of the sewed sheet body and base profile
                        direction provide local reference co-ordinate system for the orientation of the surface rule lines. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  a value indicating whether to reverse the reference face normal. When @link NXOpen::Features::LawExtensionBuilderEx::Types NXOpen::Features::LawExtensionBuilderEx::Types@endlink  is  
                        @link NXOpen::Features::LawExtensionBuilderEx::TypesFaces NXOpen::Features::LawExtensionBuilderEx::TypesFaces@endlink , the input faces are sewed to
                        form a single sheet body. The normal of the sheet body is decided based on the face which
                        is nearest to the parametric mid point of the base profile and acts as the reference face normal. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsReferenceFaceNormalReversed
            (
            );
            /**Sets  a value indicating whether to reverse the reference face normal. When @link NXOpen::Features::LawExtensionBuilderEx::Types NXOpen::Features::LawExtensionBuilderEx::Types@endlink  is  
                        @link NXOpen::Features::LawExtensionBuilderEx::TypesFaces NXOpen::Features::LawExtensionBuilderEx::TypesFaces@endlink , the input faces are sewed to
                        form a single sheet body. The normal of the sheet body is decided based on the face which
                        is nearest to the parametric mid point of the base profile and acts as the reference face normal. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetReferenceFaceNormalReversed
            (
                bool reverseNormal /** reversenormal */ 
            );
            /**Returns  the vector. Vector is used only when @link NXOpen::Features::LawExtensionBuilderEx::Types NXOpen::Features::LawExtensionBuilderEx::Types@endlink  is  
                        @link NXOpen::Features::LawExtensionBuilderEx::TypesVector NXOpen::Features::LawExtensionBuilderEx::TypesVector@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector. Vector is used only when @link NXOpen::Features::LawExtensionBuilderEx::Types NXOpen::Features::LawExtensionBuilderEx::Types@endlink  is  
                        @link NXOpen::Features::LawExtensionBuilderEx::TypesVector NXOpen::Features::LawExtensionBuilderEx::TypesVector@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the length law 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * LengthLaw
            (
            );
            /**Returns  the angle law 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * AngleLaw
            (
            );
            /**Returns  the opposite side extension option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::LawExtensionBuilderEx::OppositeSideExtensionOptions OppositeSideExtensionOption
            (
            );
            /**Sets  the opposite side extension option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetOppositeSideExtensionOption
            (
                NXOpen::Features::LawExtensionBuilderEx::OppositeSideExtensionOptions oppositeSideExtension /** oppositesideextension */ 
            );
            /**Returns  the opposite side length law. Opposite side extension law is required only when
                        @link NXOpen::Features::LawExtensionBuilderEx::OppositeSideExtensionOptions NXOpen::Features::LawExtensionBuilderEx::OppositeSideExtensionOptions@endlink  is  
                        @link NXOpen::Features::LawExtensionBuilderEx::OppositeSideExtensionOptionsAsymmetric NXOpen::Features::LawExtensionBuilderEx::OppositeSideExtensionOptionsAsymmetric@endlink  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * OppositeSideLengthLaw
            (
            );
            /**Returns  the spine definition 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SpineDefinitionBuilder * SpineDefinition
            (
            );
            /**Returns  the miter option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::LawExtensionBuilderEx::MiterOptions MiterOption
            (
            );
            /**Sets  the miter option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetMiterOption
            (
                NXOpen::Features::LawExtensionBuilderEx::MiterOptions miterOption /** miteroption */ 
            );
            /**Returns  the miter radius 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MiterRadius
            (
            );
            /**Returns  a value indicating whether to laydown the base curve to base faces 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool LaydownCurve
            (
            );
            /**Sets  a value indicating whether to laydown the base curve to base faces 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetLaydownCurve
            (
                bool laydownCurve /** laydowncurve */ 
            );
            /**Returns  a value indicating whether to merge the faces if possible 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool MergeFacesIfPossible
            (
            );
            /**Sets  a value indicating whether to merge the faces if possible 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetMergeFacesIfPossible
            (
                bool mergeFacesIfPossible /** mergefacesifpossible */ 
            );
            /**Returns  the curve fit data 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitData * CurveFitData
            (
            );
            /**Returns  the distance tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  a value indicating whether to correct the angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsAngleCorrected
            (
            );
            /**Sets  a value indicating whether to correct the angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") */
            public: void SetAngleCorrected
            (
                bool isCorrected /** iscorrected */ 
            );
            /**Returns  the max anlge deviation allowed for the correction
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxCorrectionAngle
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
