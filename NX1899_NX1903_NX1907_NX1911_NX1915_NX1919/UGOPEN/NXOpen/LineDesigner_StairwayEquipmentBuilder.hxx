#ifndef NXOpen_LINEDESIGNER_STAIRWAYEQUIPMENTBUILDER_HXX_INCLUDED
#define NXOpen_LINEDESIGNER_STAIRWAYEQUIPMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LineDesigner_StairwayEquipmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/KFObject.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/liblinedesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace LineDesigner
    {
        class StairwayEquipmentBuilder;
    }
    class Builder;
    class Expression;
    class KFObject;
    namespace LineDesigner
    {
        class _StairwayEquipmentBuilderBuilder;
        class StairwayEquipmentBuilderImpl;
        /**    <br> To create a new instance of this class, use @link NXOpen::LineDesigner::LineDesignerManager::CreateStairwayEquipmentBuilder  NXOpen::LineDesigner::LineDesignerManager::CreateStairwayEquipmentBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AddRiserToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        AddStringerToggle </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        EndElevation.Value </td> <td> 
         
        2425 (millimeters part), 117 (inches part) </td> </tr> 

        <tr><td> 
         
        NoOfStairs </td> <td> 
         
        8 </td> </tr> 

        <tr><td> 
         
        Rise.Value </td> <td> 
         
        175 (millimeters part), 7 (inches part) </td> </tr> 

        <tr><td> 
         
        Run.Value </td> <td> 
         
        280 (millimeters part), 11 (inches part) </td> </tr> 

        <tr><td> 
         
        StairNosing.Value </td> <td> 
         
        13 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        StairWidth.Value </td> <td> 
         
        915 (millimeters part), 36 (inches part) </td> </tr> 

        <tr><td> 
         
        StartElevation.Value </td> <td> 
         
        4000 (millimeters part), 180 (inches part) </td> </tr> 

        <tr><td> 
         
        StringerHeight.Value </td> <td> 
         
        305 (millimeters part), 12 (inches part) </td> </tr> 

        <tr><td> 
         
        StringerWidth.Value </td> <td> 
         
        37.5 (millimeters part), 1.5 (inches part) </td> </tr> 

        <tr><td> 
         
        TotalRise.Value </td> <td> 
         
        -1575 (millimeters part), -63 (inches part) </td> </tr> 

        <tr><td> 
         
        TotalRun.Value </td> <td> 
         
        2240 (millimeters part), 88 (inches part) </td> </tr> 

        <tr><td> 
         
        TreadHeight.Value </td> <td> 
         
        50 (millimeters part), 1.5 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class LINEDESIGNEROPENCPPEXPORT  StairwayEquipmentBuilder : public NXOpen::Builder
        {
            private: StairwayEquipmentBuilderImpl * m_stairwayequipmentbuilder_impl;
            private: friend class  _StairwayEquipmentBuilderBuilder;
            protected: StairwayEquipmentBuilder();
            public: ~StairwayEquipmentBuilder();
            /**Returns  the start elevation of stairway 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * StartElevation
            (
            );
            /**Returns  the end elevation of stairway
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * EndElevation
            (
            );
            /**Returns  the number of stairs 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: int NoOfStairs
            (
            );
            /**Sets  the number of stairs 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetNoOfStairs
            (
                int noOfStairs /** noofstairs */ 
            );
            /**Returns  the vertical distance between two steps 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * Rise
            (
            );
            /**Returns  the run 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * Run
            (
            );
            /**Returns  the total rise 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * TotalRise
            (
            );
            /**Returns  the total run 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * TotalRun
            (
            );
            /**Returns  the stair nosing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * StairNosing
            (
            );
            /**Returns  the stair width 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * StairWidth
            (
            );
            /**Returns  the tread height 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * TreadHeight
            (
            );
            /**Returns  the riser toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool AddRiserToggle
            (
            );
            /**Sets  the riser toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAddRiserToggle
            (
                bool addRiserToggle /** addrisertoggle */ 
            );
            /**Returns  the stringer toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool AddStringerToggle
            (
            );
            /**Sets  the stringer toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAddStringerToggle
            (
                bool addStringerToggle /** addstringertoggle */ 
            );
            /**Returns  the stringer width 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * StringerWidth
            (
            );
            /**Returns  the stringer height 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * StringerHeight
            (
            );
            /**Returns  the left railing toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool AddLeftRailingToggle
            (
            );
            /**Sets  the left railing toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAddLeftRailingToggle
            (
                bool addLeftRailingToggle /** addleftrailingtoggle */ 
            );
            /**Returns  the right railing toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool AddRightRailingToggle
            (
            );
            /**Sets  the right railing toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAddRightRailingToggle
            (
                bool addRightRailingToggle /** addrightrailingtoggle */ 
            );
            /**Returns  the kf object is return
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::KFObject * KfObject
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
