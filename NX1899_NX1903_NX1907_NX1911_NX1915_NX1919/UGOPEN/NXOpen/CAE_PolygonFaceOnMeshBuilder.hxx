#ifndef NXOpen_CAE_POLYGONFACEONMESHBUILDER_HXX_INCLUDED
#define NXOpen_CAE_POLYGONFACEONMESHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PolygonFaceOnMeshBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PolygonFaceOnMeshBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Expression;
    class SelectTaggedObjectList;
    namespace CAE
    {
        class _PolygonFaceOnMeshBuilderBuilder;
        class PolygonFaceOnMeshBuilderImpl;
        /**
            Builder for creating Polygon Face On Mesh
             <br> To create a new instance of this class, use @link NXOpen::CAE::AbstractionManager::CreatePolygonFaceOnMeshBuilder  NXOpen::CAE::AbstractionManager::CreatePolygonFaceOnMeshBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ElementEdgeFeatureAngle.Value </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        ElementFaceFeatureAngle.Value </td> <td> 
         
        60 </td> </tr> 

        </table>  

         <br>  Created in NX7.5.2.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PolygonFaceOnMeshBuilder : public NXOpen::Builder
        {
            /** Represents the polygon face on mesh type to be used */
            public: enum PolygonFaceOnMeshType
            {
                PolygonFaceOnMeshTypeTwoDimensionElement/** 2D Element */,
                PolygonFaceOnMeshTypeElementFreeFace/** 3D Element free faces */,
                PolygonFaceOnMeshTypeMesh/** 2D Mesh */
            };

            /** Represents the select body option to be used */
            public: enum SelectBodyMethod
            {
                SelectBodyMethodCreateNew/** Create new body */,
                SelectBodyMethodAddToExisting/** Add to existing body */
            };

            private: PolygonFaceOnMeshBuilderImpl * m_polygonfaceonmeshbuilder_impl;
            private: friend class  _PolygonFaceOnMeshBuilderBuilder;
            protected: PolygonFaceOnMeshBuilder();
            public: ~PolygonFaceOnMeshBuilder();
            /**Returns  the selection method for different ways of selection 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PolygonFaceOnMeshBuilder::PolygonFaceOnMeshType Type
            (
            );
            /**Sets  the selection method for different ways of selection 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetType
            (
                NXOpen::CAE::PolygonFaceOnMeshBuilder::PolygonFaceOnMeshType selectionType /** selectiontype */ 
            );
            /**Returns  the selected element(s) 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * ElementSelection
            (
            );
            /**Returns  the selected element edge(s) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * ElementEdgeSelection
            (
            );
            /**Returns  the angle 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoundaryMerging
            (
            );
            /**Returns  the angle 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FaceSmoothing
            (
            );
            /**Returns  the select body option for different ways of body select method 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PolygonFaceOnMeshBuilder::SelectBodyMethod SelectBodyOption
            (
            );
            /**Sets  the select body option for different ways of body select method 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSelectBodyOption
            (
                NXOpen::CAE::PolygonFaceOnMeshBuilder::SelectBodyMethod selectBodyMethod /** selectbodymethod */ 
            );
            /**Returns  the selected body 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::SelectTaggedObjectList * SelectBody
            (
            );
            /**Returns  the selected mesh 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::SelectTaggedObjectList * SelectMesh
            (
            );
            /**Returns  the element face feature angle 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * ElementFaceFeatureAngle
            (
            );
            /**Returns  the element edge feature angle 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * ElementEdgeFeatureAngle
            (
            );
            /**Returns  the keep internal edges option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool KeepInternalEdgesOption
            (
            );
            /**Sets  the keep internal edges option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetKeepInternalEdgesOption
            (
                bool keepInternalEdges /** keepinternaledges */ 
            );
            /**Returns  the allow inconsistent element normals option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool AllowInconsistentElementNormalsOption
            (
            );
            /**Sets  the allow inconsistent element normals option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAllowInconsistentElementNormalsOption
            (
                bool allowInconsistentElementNormalsOption /** allowinconsistentelementnormalsoption */ 
            );
            /**Returns  the duplicate nodes attached to solids option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool DuplicateNodesAttachedToSolidsOption
            (
            );
            /**Sets  the duplicate nodes attached to solids option 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetDuplicateNodesAttachedToSolidsOption
            (
                bool duplicateNodesAttachedToSolidsOption /** duplicatenodesattachedtosolidsoption */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
