#ifndef NXOpen_CAE_SMOOTHOPTRESULTSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_SMOOTHOPTRESULTSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SmoothOptResultsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SmoothOptResultsBuilder;
    }
    class Builder;
    namespace CAE
    {
        class Result;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class _SmoothOptResultsBuilderBuilder;
        class SmoothOptResultsBuilderImpl;
        /** This builder is meant for optimization results related to material density. User can display and export results using this builder <br> To create a new instance of this class, use @link NXOpen::CAE::SimSimulation::SmoothOptResultsCreateBuilder  NXOpen::CAE::SimSimulation::SmoothOptResultsCreateBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AdditionalSmoothingOption </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        AutomaticDisplayOption </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        GenerateBdf </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        GenerateDensityCsv </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        GenerateStl </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        LowerBoundLatticeArea </td> <td> 
         
        0.1 </td> </tr> 

        <tr><td> 
         
        LowerBoundSolidArea </td> <td> 
         
        0.3 </td> </tr> 

        <tr><td> 
         
        SmoothDisplayOption </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SmoothLevel </td> <td> 
         
        0.25 </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SmoothOptResultsBuilder : public NXOpen::Builder
        {
            /** Source mesh type */
            public: enum AdditionalSmoothingType
            {
                AdditionalSmoothingTypeNone/** none */ ,
                AdditionalSmoothingTypeLaplace/** laplace */ 
            };

            private: SmoothOptResultsBuilderImpl * m_smoothoptresultsbuilder_impl;
            private: friend class  _SmoothOptResultsBuilderBuilder;
            protected: SmoothOptResultsBuilder();
            public: ~SmoothOptResultsBuilder();
            /**Returns  the result 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result * Result
            (
            );
            /**Sets  the result 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResult
            (
                NXOpen::CAE::Result * result /** result */ 
            );
            /**Returns  the solution 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSolution * Solution
            (
            );
            /**Sets  the solution 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSolution
            (
                NXOpen::CAE::SimSolution * solution /** solution */ 
            );
            /**Returns  the load case 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int LoadCase
            (
            );
            /**Sets  the load case 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLoadCase
            (
                int iLoadCaseNumber /** iloadcasenumber */ 
            );
            /**Returns  the iteration 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int Iteration
            (
            );
            /**Sets  the iteration 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIteration
            (
                int iIteration /** iiteration */ 
            );
            /**Returns  the lower bound solid area 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double LowerBoundSolidArea
            (
            );
            /**Sets  the lower bound solid area 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLowerBoundSolidArea
            (
                double lowerBoundSolidArea /** lowerboundsolidarea */ 
            );
            /** Returns the solid area color  @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetSolidAreaColor
            (
            );
            /** Sets the solid area color 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSolidAreaColor
            (
                const std::vector<double> & solidAreaColor /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns  the lower bound lattice area 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double LowerBoundLatticeArea
            (
            );
            /**Sets  the lower bound lattice area 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLowerBoundLatticeArea
            (
                double lowerBoundLatticeArea /** lowerboundlatticearea */ 
            );
            /** Returns the lattice area color  @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetLatticeAreaColor
            (
            );
            /** Sets the lattice area color 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLatticeAreaColor
            (
                const std::vector<double> & latticeAreaColor /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns  the source mesh option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool SmoothDisplayOption
            (
            );
            /**Sets  the source mesh option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSmoothDisplayOption
            (
                bool smoothDisplayOption /** smoothdisplayoption */ 
            );
            /**Returns  the automatic display option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticDisplayOption
            (
            );
            /**Sets  the automatic display option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAutomaticDisplayOption
            (
                bool automaticDisplayOption /** automaticdisplayoption */ 
            );
            /**Returns  the view port index 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int ViewPortIndex
            (
            );
            /**Sets  the view port index 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetViewPortIndex
            (
                int viewPortIndex /** viewportindex */ 
            );
            /** Display update 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void DisplayUpdate
            (
            );
            /**Returns  the additonal smoothing option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SmoothOptResultsBuilder::AdditionalSmoothingType AdditionalSmoothingOption
            (
            );
            /**Sets  the additonal smoothing option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAdditionalSmoothingOption
            (
                NXOpen::CAE::SmoothOptResultsBuilder::AdditionalSmoothingType sourceMeshOption /** sourcemeshoption */ 
            );
            /**Returns  the smooth level 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double SmoothLevel
            (
            );
            /**Sets  the smooth level 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSmoothLevel
            (
                double smoothLevel /** smoothlevel */ 
            );
            /**Returns  the generate stl 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool GenerateStl
            (
            );
            /**Sets  the generate stl 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGenerateStl
            (
                bool generateStl /** generatestl */ 
            );
            /**Returns  the generate bdf 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool GenerateBdf
            (
            );
            /**Sets  the generate bdf 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGenerateBdf
            (
                bool generateBdf /** generatebdf */ 
            );
            /**Returns  the generate density csv 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool GenerateDensityCsv
            (
            );
            /**Sets  the generate density csv 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGenerateDensityCsv
            (
                bool generateDensityCsv /** generatedensitycsv */ 
            );
            /** Export model files 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void Export
            (
            );
            /** Create verification solution 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void CreateVerificationSolution
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
