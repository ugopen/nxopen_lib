#ifndef NXOpen_SIM_POSTCONFIGURATOR_UPDATEPOSTPROCESSORBUILDER_HXX_INCLUDED
#define NXOpen_SIM_POSTCONFIGURATOR_UPDATEPOSTPROCESSORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_PostConfigurator_UpdatePostprocessorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        namespace PostConfigurator
        {
            class UpdatePostprocessorBuilder;
        }
    }
    class Builder;
    namespace SIM
    {
        namespace PostConfigurator
        {
            class _UpdatePostprocessorBuilderBuilder;
            class UpdatePostprocessorBuilderImpl;
            /** This class is used to update the postprocessor to the new library.
                        Calling @link Builder::Commit Builder::Commit@endlink  on this builder will only return NULL.
                     <br> This is an abstract class, and cannot be instantiated.  <br> 
             <br>  Created in NX1899.0.0.  <br>  
            */
            class NXOPENCPP_SIMEXPORT  UpdatePostprocessorBuilder : public NXOpen::Builder
            {
                /** Represents the update library type */
                public: enum UpdatePostprocessorType
                {
                    UpdatePostprocessorTypeFromCurrentNXVersion/** Update Postprocessor Library from Current NX Version */,
                    UpdatePostprocessorTypeFromPostRegistry/** Update Postprocessor Library from Post Registry */,
                    UpdatePostprocessorTypeKinematic/** Update Postprocessor Kinematic */
                };

                private: UpdatePostprocessorBuilderImpl * m_updatepostprocessorbuilder_impl;
                private: friend class  _UpdatePostprocessorBuilderBuilder;
                protected: UpdatePostprocessorBuilder();
                public: ~UpdatePostprocessorBuilder();
                /**Returns  the update postprocessor type 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SIM::PostConfigurator::UpdatePostprocessorBuilder::UpdatePostprocessorType UpdatePostprocessor
                (
                );
                /**Sets  the update postprocessor type 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetUpdatePostprocessor
                (
                    NXOpen::SIM::PostConfigurator::UpdatePostprocessorBuilder::UpdatePostprocessorType updatePostprocessorType /** updatepostprocessortype */ 
                );
                /**Returns  the post registry path 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString PostRegistryPath
                (
                );
                /**Sets  the post registry path 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetPostRegistryPath
                (
                    const NXString & filename /** filename */ 
                );
                /**Sets  the post registry path 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetPostRegistryPath
                (
                    const char * filename /** filename */ 
                );
                /**Returns  the create backup options
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: bool CreateBackup
                (
                );
                /**Sets  the create backup options
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetCreateBackup
                (
                    bool createBackup /** createbackup */ 
                );
                /**Returns  the current postprocessor version 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString CurrentPostprocessorVersion
                (
                );
                /**Sets  the current postprocessor version 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetCurrentPostprocessorVersion
                (
                    const NXString & currentPostprocessor /** currentpostprocessor */ 
                );
                /**Sets  the current postprocessor version 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetCurrentPostprocessorVersion
                (
                    const char * currentPostprocessor /** currentpostprocessor */ 
                );
                /**Returns  the update to version 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString UpdateToVersion
                (
                );
                /**Sets  the update to version 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                public: void SetUpdateToVersion
                (
                    const NXString & updateToVersion /** updatetoversion */ 
                );
                /**Sets  the update to version 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : nx_post_config_full ("NX Post Configurator") OR nx_post_config_adv ("NX Post Configurator") */
                void SetUpdateToVersion
                (
                    const char * updateToVersion /** updatetoversion */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
