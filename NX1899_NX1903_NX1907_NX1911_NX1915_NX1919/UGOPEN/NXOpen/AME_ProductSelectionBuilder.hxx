#ifndef NXOpen_AME_PRODUCTSELECTIONBUILDER_HXX_INCLUDED
#define NXOpen_AME_PRODUCTSELECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ProductSelectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_SelectClassificationBuilder.hxx>
#include <NXOpen/AME_MultipleObjectsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ProductSelectionBuilder;
    }
    namespace AME
    {
        class MultipleObjectsBuilder;
    }
    namespace AME
    {
        class ProductDefinition;
    }
    namespace AME
    {
        class SelectClassificationBuilder;
    }
    class SelectNXObjectList;
    namespace AME
    {
        class _ProductSelectionBuilderBuilder;
        class ProductSelectionBuilderImpl;
        /** JA class for Product Selection dialog <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateProductSelectionBuilder  NXOpen::AME::AMEManager::CreateProductSelectionBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ProductType </td> <td> 
         
        SameEngineeringObjectDefinition </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ProductSelectionBuilder : public NXOpen::AME::MultipleObjectsBuilder
        {
            /** the product type for product selection*/
            public: enum Type
            {
                TypeSameEngineeringObjectDefinition/** same engineering object definition */ ,
                TypeSameClassificationAndMoreDetailedClassification/** same classification and more detailed classification */ ,
                TypeAllCommonProducts/** all common products */ 
            };

            private: ProductSelectionBuilderImpl * m_productselectionbuilder_impl;
            private: friend class  _ProductSelectionBuilderBuilder;
            protected: ProductSelectionBuilder();
            public: ~ProductSelectionBuilder();
            /**Returns  the product type for product selection
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::AME::ProductSelectionBuilder::Type ProductType
            (
            );
            /**Sets  the product type for product selection
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetProductType
            (
                NXOpen::AME::ProductSelectionBuilder::Type productType /** producttype */ 
            );
            /** Set selected product
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectedProduct
            (
                NXOpen::AME::ProductDefinition * selectedProduct /** selectedproduct */ 
            );
            /**Returns  the selected devices 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObjectList * SelectedDevices
            (
            );
            /**Returns  the selected classification 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectClassificationBuilder * SelectClassification
            (
            );
            /**Returns  the option to exchange product for device which are not members of locked template
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ExchangeProductForNotLockedTemplate
            (
            );
            /**Sets  the option to exchange product for device which are not members of locked template
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExchangeProductForNotLockedTemplate
            (
                bool exchangeProductForNotLockedTemplate /** exchangeproductfornotlockedtemplate */ 
            );
            /**Returns  the option to exchange product by breaking unlocked template
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool BreakUnLockedTemplate
            (
            );
            /**Sets  the option to exchange product by breaking unlocked template
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetBreakUnLockedTemplate
            (
                bool breakUnLockedTemplate /** breakunlockedtemplate */ 
            );
            /**Returns  the option to create product aspect for device if not available
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool PlaceInProductAspect
            (
            );
            /**Sets  the option to create product aspect for device if not available
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPlaceInProductAspect
            (
                bool placeInProductAspect /** placeinproductaspect */ 
            );
            /**Returns  the option to exchange plc relevant product
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ExchangePLCRelevantProduct
            (
            );
            /**Sets  the option to exchange plc relevant product
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExchangePLCRelevantProduct
            (
                bool exchangePLCRelevantProduct /** exchangeplcrelevantproduct */ 
            );
            /**Returns  the option to remove plc relevant product
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool RemovePLCRelevantProduct
            (
            );
            /**Sets  the option to remove plc relevant product
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetRemovePLCRelevantProduct
            (
                bool removePLCRelevantProduct /** removeplcrelevantproduct */ 
            );
            /** Set auxiliary product details
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAuxiliaryProducts
            (
                const std::vector<NXOpen::AME::ProductDefinition *> & auxiliaryProducts /** auxiliaryproducts */ 
            );
            /**Returns  the option to clear tia type identifier property
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ClearTiaTypeIdentifierInType
            (
            );
            /**Sets  the option to clear tia type identifier property
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetClearTiaTypeIdentifierInType
            (
                bool clearTiaTypeIdentifierInType /** cleartiatypeidentifierintype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
