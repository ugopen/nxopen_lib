#ifndef NXOpen_ANNOTATIONS_SEARCHCRITERIACALLOUTBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_SEARCHCRITERIACALLOUTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_SearchCriteriaCalloutBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_SearchModelViewBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class SearchCriteriaCalloutBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _SearchCriteriaCalloutBuilderBuilder;
        class SearchCriteriaCalloutBuilderImpl;
        /** Represents SearchCriteriaCalloutBuilder  <br> This is a sub-builder class and cannot be directly instantiated  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  SearchCriteriaCalloutBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** CalloutTypes*/
            public: enum CalloutTypes
            {
                CalloutTypesHole/** Hole*/,
                CalloutTypesDiameter/** Diameter*/,
                CalloutTypesCylindrical/** Cylindrical*/
            };

            private: SearchCriteriaCalloutBuilderImpl * m_searchcriteriacalloutbuilder_impl;
            private: friend class  _SearchCriteriaCalloutBuilderBuilder;
            protected: SearchCriteriaCalloutBuilder();
            public: ~SearchCriteriaCalloutBuilder();
            /**Returns  the callout type toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByCalloutType
            (
            );
            /**Sets  the callout type toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByCalloutType
            (
                bool calloutType /** callouttype */ 
            );
            /**Returns  the callout type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchCriteriaCalloutBuilder::CalloutTypes CalloutType
            (
            );
            /**Sets  the callout type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCalloutType
            (
                NXOpen::Annotations::SearchCriteriaCalloutBuilder::CalloutTypes calloutType /** callouttype */ 
            );
            /**Returns  the diameter toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByDiameter
            (
            );
            /**Sets  the diameter toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByDiameter
            (
                bool byDiameter /** bydiameter */ 
            );
            /**Returns  the diameter setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions DiameterType
            (
            );
            /**Sets  the diameter setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDiameterType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions diameterType /** diametertype */ 
            );
            /**Returns  the diameter value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double DiameterValue
            (
            );
            /**Sets  the diameter value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDiameterValue
            (
                double diameterValue /** diametervalue */ 
            );
            /**Returns  the depth toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByDepth
            (
            );
            /**Sets  the depth toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByDepth
            (
                bool byDepth /** bydepth */ 
            );
            /**Returns  the depth setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions DepthType
            (
            );
            /**Sets  the depth setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDepthType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions depthType /** depthtype */ 
            );
            /**Returns  the depth value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double DepthValue
            (
            );
            /**Sets  the depth value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDepthValue
            (
                double depthValue /** depthvalue */ 
            );
            /**Returns  the pitch toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByPitch
            (
            );
            /**Sets  the pitch toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByPitch
            (
                bool byPitch /** bypitch */ 
            );
            /**Returns  the pitch setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions PitchType
            (
            );
            /**Sets  the pitch setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPitchType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions pitchType /** pitchtype */ 
            );
            /**Returns  the pitch value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double PitchValue
            (
            );
            /**Sets  the pitch value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPitchValue
            (
                double pitchValue /** pitchvalue */ 
            );
            /**Returns  the angle toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByAngle
            (
            );
            /**Sets  the angle toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByAngle
            (
                bool byAngle /** byangle */ 
            );
            /**Returns  the angle setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions AngleType
            (
            );
            /**Sets  the angle setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAngleType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions angleType /** angletype */ 
            );
            /**Returns  the angle value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleValue
            (
            );
            /**Sets  the angle value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAngleValue
            (
                double angleValue /** anglevalue */ 
            );
            /**Returns  the counterboreDiameter toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByCounterboreDiameter
            (
            );
            /**Sets  the counterboreDiameter toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByCounterboreDiameter
            (
                bool byCounterboreDiameter /** bycounterborediameter */ 
            );
            /**Returns  the counterboreDiameter setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions CounterboreDiameterType
            (
            );
            /**Sets  the counterboreDiameter setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCounterboreDiameterType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions counterboreDiameterType /** counterborediametertype */ 
            );
            /**Returns  the counterboreDiameter value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double CounterboreDiameterValue
            (
            );
            /**Sets  the counterboreDiameter value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCounterboreDiameterValue
            (
                double counterboreDiameterValue /** counterborediametervalue */ 
            );
            /**Returns  the counterboreDepth toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByCounterboreDepth
            (
            );
            /**Sets  the counterboreDepth toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByCounterboreDepth
            (
                bool byCounterboreDepth /** bycounterboredepth */ 
            );
            /**Returns  the counterboreDepth setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions CounterboreDepthType
            (
            );
            /**Sets  the counterboreDepth setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCounterboreDepthType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions counterboreDepthType /** counterboredepthtype */ 
            );
            /**Returns  the counterboreDepth value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double CounterboreDepthValue
            (
            );
            /**Sets  the counterboreDepth value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCounterboreDepthValue
            (
                double counterboreDepthValue /** counterboredepthvalue */ 
            );
            /**Returns  the countersinkDiameter toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByCountersinkDiameter
            (
            );
            /**Sets  the countersinkDiameter toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByCountersinkDiameter
            (
                bool byCountersinkDiameter /** bycountersinkdiameter */ 
            );
            /**Returns  the countersinkDiameter setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions CountersinkDiameterType
            (
            );
            /**Sets  the countersinkDiameter setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCountersinkDiameterType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions countersinkDiameterType /** countersinkdiametertype */ 
            );
            /**Returns  the countersinkDiameter value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double CountersinkDiameterValue
            (
            );
            /**Sets  the countersinkDiameter value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCountersinkDiameterValue
            (
                double countersinkDiameterValue /** countersinkdiametervalue */ 
            );
            /**Returns  the countersinkAngle toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByCountersinkAngle
            (
            );
            /**Sets  the countersinkAngle toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByCountersinkAngle
            (
                bool byCountersinkAngle /** bycountersinkangle */ 
            );
            /**Returns  the countersinkAngle setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions CountersinkAngleType
            (
            );
            /**Sets  the countersinkAngle setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCountersinkAngleType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions countersinkAngleType /** countersinkangletype */ 
            );
            /**Returns  the countersinkAngle value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double CountersinkAngleValue
            (
            );
            /**Sets  the countersinkAngle value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCountersinkAngleValue
            (
                double countersinkAngleValue /** countersinkanglevalue */ 
            );
            /**Returns  the taperAngle toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByTaperAngle
            (
            );
            /**Sets  the taperAngle toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByTaperAngle
            (
                bool byTaperAngle /** bytaperangle */ 
            );
            /**Returns  the taperAngle setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions TaperAngleType
            (
            );
            /**Sets  the taperAngle setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTaperAngleType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions taperAngleType /** taperangletype */ 
            );
            /**Returns  the taperAngle value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double TaperAngleValue
            (
            );
            /**Sets  the taperAngle value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTaperAngleValue
            (
                double taperAngleValue /** taperanglevalue */ 
            );
            /**Returns  the threadDepth toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByThreadDepth
            (
            );
            /**Sets  the threadDepth toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByThreadDepth
            (
                bool byThreadDepth /** bythreaddepth */ 
            );
            /**Returns  the threadDepth setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions ThreadDepthType
            (
            );
            /**Sets  the threadDepth setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetThreadDepthType
            (
                NXOpen::Annotations::SearchModelViewBuilder::ValueComparisionOptions threadDepthType /** threaddepthtype */ 
            );
            /**Returns  the threadDepth value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double ThreadDepthValue
            (
            );
            /**Sets  the threadDepth value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetThreadDepthValue
            (
                double threadDepthValue /** threaddepthvalue */ 
            );
            /**Returns  the screwSize toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByScrewSize
            (
            );
            /**Sets  the screwSize toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByScrewSize
            (
                bool byScrewSize /** byscrewsize */ 
            );
            /**Returns  the ScrewSize setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions ScrewSizeTextType
            (
            );
            /**Sets  the ScrewSize setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScrewSizeTextType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions screwSizeTextType /** screwsizetexttype */ 
            );
            /**Returns  the screwSize text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ScrewSizeText
            (
            );
            /**Sets  the screwSize text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScrewSizeText
            (
                const NXString & screwSizeText /** screwsizetext */ 
            );
            /**Sets  the screwSize text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetScrewSizeText
            (
                const char * screwSizeText /** screwsizetext */ 
            );
            /**Returns  the threadSize toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ByThreadSize
            (
            );
            /**Sets  the threadSize toggle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetByThreadSize
            (
                bool byThreadSize /** bythreadsize */ 
            );
            /**Returns  the threadSize setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions ThreadSizeTextType
            (
            );
            /**Sets  the threadSize setting 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetThreadSizeTextType
            (
                NXOpen::Annotations::SearchModelViewBuilder::TextComparisionOptions threadSizeTextType /** threadsizetexttype */ 
            );
            /**Returns  the threadSize text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ThreadSizeText
            (
            );
            /**Sets  the threadSize text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetThreadSizeText
            (
                const NXString & threadSizeText /** threadsizetext */ 
            );
            /**Sets  the threadSize text 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetThreadSizeText
            (
                const char * threadSizeText /** threadsizetext */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
