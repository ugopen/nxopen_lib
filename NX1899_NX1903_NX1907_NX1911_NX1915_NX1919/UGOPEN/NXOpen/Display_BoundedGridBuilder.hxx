#ifndef NXOpen_DISPLAY_BOUNDEDGRIDBUILDER_HXX_INCLUDED
#define NXOpen_DISPLAY_BOUNDEDGRIDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_BoundedGridBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_SectionCurveSettingsBuilder.hxx>
#include <NXOpen/Display_GridBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_display_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Display
    {
        class BoundedGridBuilder;
    }
    namespace Display
    {
        class GridBuilder;
    }
    namespace Display
    {
        class SectionCurveSettingsBuilder;
    }
    namespace Display
    {
        class _BoundedGridBuilderBuilder;
        class BoundedGridBuilderImpl;
        /** Represents the builder for creating a bounded grid @link NXOpen::Display::BoundedGrid NXOpen::Display::BoundedGrid@endlink . 
              <br> This is an abstract class, and cannot be instantiated.  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        SectionCurveSettings.ColorOption </td> <td> 
         
        Any </td> </tr> 

        <tr><td> 
         
        SectionCurveSettings.Show </td> <td> 
         
        false </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_DISPLAYEXPORT  BoundedGridBuilder : public NXOpen::Display::GridBuilder
        {
            /** Specifies label option to be used for grid label display.
                     */
            public: enum ShowLabelType
            {
                ShowLabelTypeAlways/** Always show label */,
                ShowLabelTypeParalleltoView/** Show labels when grid 
                                                                              orientation is aligned with 
                                                                              the view orientation */,
                ShowLabelTypeNone/** Never show labels */
            };

            /** Specifies label reference.
                     */
            public: enum LabelReferenceType
            {
                LabelReferenceTypeLocal/** Use local grid origin 
                                                                                    to determine grid 
                                                                                    line offset labels */,
                LabelReferenceTypeWcs/** Use projection of WCS origin on the
                                                                                    grid plane to determine grid line offset 
                                                                                    labels */,
                LabelReferenceTypeAbsolute/** Use projection of absolute origin on the
                                                                                    grid plane to determine grid line offset
                                                                                    labels */
            };

            private: BoundedGridBuilderImpl * m_boundedgridbuilder_impl;
            private: friend class  _BoundedGridBuilderBuilder;
            protected: BoundedGridBuilder();
            public: ~BoundedGridBuilder();
            /**Returns  the show labels 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::BoundedGridBuilder::ShowLabelType ShowLabel
            (
            );
            /**Sets  the show labels 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowLabel
            (
                NXOpen::Display::BoundedGridBuilder::ShowLabelType showLabelType /** showlabeltype */ 
            );
            /**Returns  the label reference 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::BoundedGridBuilder::LabelReferenceType LabelReference
            (
            );
            /**Sets  the label reference 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLabelReference
            (
                NXOpen::Display::BoundedGridBuilder::LabelReferenceType labelReference /** labelreference */ 
            );
            /**Returns  the local origin 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d LocalOrigin
            (
            );
            /**Sets  the local origin 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLocalOrigin
            (
                const NXOpen::Point3d & localOrigin /** Label origin */
            );
            /** Gets corner points of the grid  @return  Flag indicating whether the
                                                                    corner points are valid 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetCornerPoints
            (
                NXOpen::Point3d* point1 /** First corner point */,
                NXOpen::Point3d* point2 /** Second corner point */,
                NXOpen::Point3d* point3 /** Third corner point */,
                NXOpen::Point3d* point4 /** Fourth corner point */
            );
            /** Sets corner points of the grid  @return  Flag indicating whether the
                                                                    corner points are valid 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool SetCornerPoints
            (
                const NXOpen::Point3d & point1 /** First corner point */,
                const NXOpen::Point3d & point2 /** Second corner point */,
                const NXOpen::Point3d & point3 /** Third corner point */,
                const NXOpen::Point3d & point4 /** Fourth corner point */
            );
            /**Returns  the curve settings builder 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Display::SectionCurveSettingsBuilder * SectionCurveSettings
            (
            );
            /**Returns  the associative 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /** Creates curves by intersecting the bounded grid with all bodies in 
                        the part of the grid object. The bodies that are visible in the work
                        view are intersected. The curves are added to the group created with 
                        the specified name. The group is displayed in the part navigator. The
                        curves are created in the work part. These curves are not associated
                        with the grid. These are just snapshot curves that can be used for
                        modeling purposes. If the customer default "Load Solids/Sheets when
                        Saving Section Curves" is enabled, the Save Copy of Section Curves 
                        command in the datum plane grid dialog will cause solid/sheet bodies 
                        to be loaded into memory for any visible lightweight bodies on the 
                        section plane. This may increase the time and memory used by the 
                        operation, but will ensure fully accurate section curves.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveCurves
            (
                const NXString & groupName /** Name of the group containing curves.
                                                             If NULL, a default name will be
                                                             used. */
            );
            /** Creates curves by intersecting the bounded grid with all bodies in 
                        the part of the grid object. The bodies that are visible in the work
                        view are intersected. The curves are added to the group created with 
                        the specified name. The group is displayed in the part navigator. The
                        curves are created in the work part. These curves are not associated
                        with the grid. These are just snapshot curves that can be used for
                        modeling purposes. If the customer default "Load Solids/Sheets when
                        Saving Section Curves" is enabled, the Save Copy of Section Curves 
                        command in the datum plane grid dialog will cause solid/sheet bodies 
                        to be loaded into memory for any visible lightweight bodies on the 
                        section plane. This may increase the time and memory used by the 
                        operation, but will ensure fully accurate section curves.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SaveCurves
            (
                const char * groupName /** Name of the group containing curves.
                                                             If NULL, a default name will be
                                                             used. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
