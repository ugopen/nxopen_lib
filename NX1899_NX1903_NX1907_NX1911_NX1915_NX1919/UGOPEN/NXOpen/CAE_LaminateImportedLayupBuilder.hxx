#ifndef NXOpen_CAE_LAMINATEIMPORTEDLAYUPBUILDER_HXX_INCLUDED
#define NXOpen_CAE_LAMINATEIMPORTEDLAYUPBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LaminateImportedLayupBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_LaminateSelectEntitiesBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class LaminateImportedLayupBuilder;
    }
    class Builder;
    namespace CAE
    {
        class LaminateSelectEntitiesBuilder;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Expression;
    namespace CAE
    {
        class _LaminateImportedLayupBuilderBuilder;
        class LaminateImportedLayupBuilderImpl;
        /** Represents a @link NXOpen::CAE::LaminateImportedLayupBuilder NXOpen::CAE::LaminateImportedLayupBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::CAE::LaminateGlobalLayupMgr::CreateLaminateImportedLayupBuilder  NXOpen::CAE::LaminateGlobalLayupMgr::CreateLaminateImportedLayupBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        FileType </td> <td> 
         
        FiberSimXml </td> </tr> 

        <tr><td> 
         
        ImportMethod </td> <td> 
         
        ExternalFile </td> </tr> 

        <tr><td> 
         
        NameOverride </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Tolerance.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX6.0.4.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  LaminateImportedLayupBuilder : public NXOpen::Builder
        {
            /** Import method type. External file or API. */
            public: enum ImportMethodEnum
            {
                ImportMethodEnumExternalFile/** External file. */,
                ImportMethodEnumExternalApi/** External API. */
            };

            /** Type of external file to be imported. Only FiberSim layup XML file supported for now. */
            public: enum FileEnum
            {
                FileEnumFiberSimXml/** FiberSIM layup XML file. */,
                FileEnumFiberSimH5/** FiberSIM layup HDF5 file. */,
                FileEnumSimulaytLayup/** Simulayt Layup File. */,
                FileEnumFiberSimPart/** Use the FiberSim data in the current part */,
                FileEnumCatiaPlyGroups/** CATIA Ply Groups. */
            };

            /** Type of external API supported. Only FiberSim API for now. */
            public: enum ApiTypeEnum
            {
                ApiTypeEnumFiberSim/** FiberSIM layup XML file. */
            };

            private: LaminateImportedLayupBuilderImpl * m_laminateimportedlayupbuilder_impl;
            private: friend class  _LaminateImportedLayupBuilderBuilder;
            protected: LaminateImportedLayupBuilder();
            public: ~LaminateImportedLayupBuilder();
            /**Returns  the import method 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateImportedLayupBuilder::ImportMethodEnum ImportMethod
            (
            );
            /**Sets  the import method 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetImportMethod
            (
                NXOpen::CAE::LaminateImportedLayupBuilder::ImportMethodEnum importMethod /** importmethod */ 
            );
            /**Returns  the angle between the normal of the fem element and the mapped element. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxDeviationAngle
            (
            );
            /**Returns  the tolerance used to localize each FEM element layup information  
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Tolerance
            (
            );
            /**Returns  the type of file to be imported 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateImportedLayupBuilder::FileEnum FileType
            (
            );
            /**Sets  the type of file to be imported 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetFileType
            (
                NXOpen::CAE::LaminateImportedLayupBuilder::FileEnum fileType /** filetype */ 
            );
            /**Returns  the full name and path of the file to be imported 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXString FileName
            (
            );
            /**Sets  the full name and path of the file to be imported 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetFileName
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the full name and path of the file to be imported 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            void SetFileName
            (
                const char * filename /** filename */ 
            );
            /**Returns  the material import option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ImportMaterials
            (
            );
            /**Sets  the material import option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetImportMaterials
            (
                bool importMaterials /** importmaterials */ 
            );
            /**Returns  the material import overwrite option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool OverwriteMaterials
            (
            );
            /**Sets  the material import overwrite option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetOverwriteMaterials
            (
                bool overwriteMaterials /** overwritematerials */ 
            );
            /**Returns  the geometric face(s) and element face(s) on which to assign the material orientation 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::LaminateSelectEntitiesBuilder * Selection
            (
            );
            /**Returns  the option to override the fibersim layup name with a user defined name 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: bool NameOverride
            (
            );
            /**Sets  the option to override the fibersim layup name with a user defined name 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetNameOverride
            (
                bool nameOverride /** nameoverride */ 
            );
            /**Returns  the user defined layup name 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : None */
            public: NXString LayupName
            (
            );
            /**Sets  the user defined layup name 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetLayupName
            (
                const NXString & layupName /** layupname */ 
            );
            /**Sets  the user defined layup name 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            void SetLayupName
            (
                const char * layupName /** layupname */ 
            );
            /**Returns  the external api selected for layup import 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::LaminateImportedLayupBuilder::ApiTypeEnum ApiType
            (
            );
            /**Sets  the external api selected for layup import 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetApiType
            (
                NXOpen::CAE::LaminateImportedLayupBuilder::ApiTypeEnum apiType /** apitype */ 
            );
            /** Updates the list of available laminates in the API 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void UpdateApiLaminateList
            (
            );
            /** Selects a laminate for import 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SelectLaminate
            (
                const NXString & laminate /** laminate */ 
            );
            /** Selects a laminate for import 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            void SelectLaminate
            (
                const char * laminate /** laminate */ 
            );
            /**Returns  the ply mapping options. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int ElementalNodalMapping
            (
            );
            /**Sets  the ply mapping options. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetElementalNodalMapping
            (
                int elementalNodalMapping /** elementalnodalmapping */ 
            );
            /**Returns  the elemental mapping options. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int ElementalMapping
            (
            );
            /**Sets  the elemental mapping options. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetElementalMapping
            (
                int elementalMapping /** elementalmapping */ 
            );
            /**Returns  the element face on which to apply the elemental mapping 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: NXOpen::CAE::SelectElementsBuilder * ElementalElemSelection
            (
            );
            /**Returns  the nodal mapping options. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int NodalMapping
            (
            );
            /**Sets  the nodal mapping options. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetNodalMapping
            (
                int nodalMapping /** nodalmapping */ 
            );
            /**Returns  the omit partially mapped face option. When on, face(s) for which the number
                        of elements successfully mapped in the FiberSim XML mesh is under a certain ratio,
                        will be discarded. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool OmitPartiallyMapped
            (
            );
            /**Sets  the omit partially mapped face option. When on, face(s) for which the number
                        of elements successfully mapped in the FiberSim XML mesh is under a certain ratio,
                        will be discarded. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetOmitPartiallyMapped
            (
                bool omitPartiallyMapped /** omitpartiallymapped */ 
            );
            /**Returns  the unmapped face threshold value (%). When the OmitPartiallyMapped option is on, the
                        percentage is used to determine which face(s) will be discarded during import. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double UnmappedFaceThreshold
            (
            );
            /**Sets  the unmapped face threshold value (%). When the OmitPartiallyMapped option is on, the
                        percentage is used to determine which face(s) will be discarded during import. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetUnmappedFaceThreshold
            (
                double unmappedFaceThreshold /** unmappedfacethreshold */ 
            );
            /**Returns  the factor that determine the mesh size when creating polygon face from mesh (for CATIA ply groups import only)
                        The NX suggested mesh size is multiplied with this factor 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double MeshSizeFactor
            (
            );
            /**Sets  the factor that determine the mesh size when creating polygon face from mesh (for CATIA ply groups import only)
                        The NX suggested mesh size is multiplied with this factor 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetMeshSizeFactor
            (
                double meshSizeFactor /** meshsizefactor */ 
            );
            /**Returns  the number of points used when discretizing the ply boundary curves (for CATIA ply groups import only) 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int NumDiscretizationPoints
            (
            );
            /**Sets  the number of points used when discretizing the ply boundary curves (for CATIA ply groups import only) 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetNumDiscretizationPoints
            (
                int numDiscretizationPoints /** numdiscretizationpoints */ 
            );
            /**Returns  the ply description import option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportDescriptionFromName
            (
            );
            /**Sets  the ply description import option 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetImportDescriptionFromName
            (
                bool importDescriptionFromName /** importdescriptionfromname */ 
            );
            /**Returns  the fill partially mapped face option. When on, face(s) for which the number
                        of elements successfully unmapped in the FiberSim XML mesh is under a certain ratio,
                        will be retained. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool FillPartiallyMappedFaces
            (
            );
            /**Sets  the fill partially mapped face option. When on, face(s) for which the number
                        of elements successfully unmapped in the FiberSim XML mesh is under a certain ratio,
                        will be retained. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetFillPartiallyMappedFaces
            (
                bool fillPartiallyMapped /** fillpartiallymapped */ 
            );
            /**Returns  the unmapped face threshold value (%). When the FillPartiallyMappedFaces option is on, the
                        percentage is used to determine which face(s) will be retained during import. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double FillUnmappedFaceThreshold
            (
            );
            /**Sets  the unmapped face threshold value (%). When the FillPartiallyMappedFaces option is on, the
                        percentage is used to determine which face(s) will be retained during import. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetFillUnmappedFaceThreshold
            (
                double fillPartiallyMappedFaceThreshold /** fillpartiallymappedfacethreshold */ 
            );
            /**Returns  the option to override the fill and omit mapping options defined at the ply level 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool OverridePlyMappingOptions
            (
            );
            /**Sets  the option to override the fill and omit mapping options defined at the ply level 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_lam_comp_adv ("Laminate Composites Advanced") */
            public: void SetOverridePlyMappingOptions
            (
                bool overridePlyMappingOptions /** overrideplymappingoptions */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
