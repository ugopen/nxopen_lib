#ifndef NXOpen_TOOLING_PREBENDBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_PREBENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_PrebendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class PrebendBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    namespace Tooling
    {
        class _PrebendBuilderBuilder;
        class PrebendBuilderImpl;
        /**Represents a @link NXOpen::Tooling::PrebendBuilder NXOpen::Tooling::PrebendBuilder@endlink  builder to divide bend faces.  <br> To create a new instance of this class, use @link NXOpen::Features::ToolingCollection::CreatePrebendBuilder  NXOpen::Features::ToolingCollection::CreatePrebendBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Angle01 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle02 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle03 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle04 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        Angle05 </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        NumberBends </td> <td> 
         
        Two </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  PrebendBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** The option of bend number to divide into */
            public: enum NumberBendsOption
            {
                NumberBendsOptionTwo/** two prebends */,
                NumberBendsOptionThree/** three prebends */,
                NumberBendsOptionFour/** four prebends */,
                NumberBendsOptionFive/** five prebends */,
                NumberBendsOptionSix/** six prebends */
            };

            private: PrebendBuilderImpl * m_prebendbuilder_impl;
            private: friend class  _PrebendBuilderBuilder;
            protected: PrebendBuilder();
            public: ~PrebendBuilder();
            /**Returns  the bend face to divide 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * BendFace
            (
            );
            /**Returns  the start edge of bend face to specify the angle01 to angle05 start from 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * StartEdge
            (
            );
            /**Returns  the neutral factor assign into the divided bend faces 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NeutralFactor
            (
            );
            /**Sets  the neutral factor assign into the divided bend faces 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNeutralFactor
            (
                const NXString & neutralFactor /** neutralfactor */ 
            );
            /**Sets  the neutral factor assign into the divided bend faces 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetNeutralFactor
            (
                const char * neutralFactor /** neutralfactor */ 
            );
            /**Returns  the number of prebends divide into 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::PrebendBuilder::NumberBendsOption NumberBends
            (
            );
            /**Sets  the number of prebends divide into 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNumberBends
            (
                NXOpen::Tooling::PrebendBuilder::NumberBendsOption numberBends /** numberbends */ 
            );
            /**Returns  the first prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double Angle01
            (
            );
            /**Sets  the first prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAngle01
            (
                double angle01 /** angle01 */ 
            );
            /**Returns  the second prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double Angle02
            (
            );
            /**Sets  the second prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAngle02
            (
                double angle02 /** angle02 */ 
            );
            /**Returns  the third prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double Angle03
            (
            );
            /**Sets  the third prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAngle03
            (
                double angle03 /** angle03 */ 
            );
            /**Returns  the fourth prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double Angle04
            (
            );
            /**Sets  the fourth prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAngle04
            (
                double angle04 /** angle04 */ 
            );
            /**Returns  the fifth prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double Angle05
            (
            );
            /**Sets  the fifth prebend angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAngle05
            (
                double angle05 /** angle05 */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
