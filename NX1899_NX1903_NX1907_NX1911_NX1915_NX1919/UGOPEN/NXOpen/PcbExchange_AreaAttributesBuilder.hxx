#ifndef NXOpen_PCBEXCHANGE_AREAATTRIBUTESBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_AREAATTRIBUTESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_AreaAttributesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class AreaAttributesBuilder;
    }
    class Builder;
    class Expression;
    class SelectNXObjectList;
    namespace PcbExchange
    {
        class _AreaAttributesBuilderBuilder;
        class AreaAttributesBuilderImpl;
        /** Represents a @link NXOpen::PcbExchange::AreaAttributesBuilder NXOpen::PcbExchange::AreaAttributesBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreateAreaAttributesBuilder  NXOpen::PcbExchange::Manager::CreateAreaAttributesBuilder @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  AreaAttributesBuilder : public NXOpen::Builder
        {
            /** This enum defines the area type options. */
            public: enum TypeEnum
            {
                TypeEnumKeepout/** keepout */ ,
                TypeEnumKeepin/** keepin */ ,
                TypeEnumOther/** other */ ,
                TypeEnumCopper/** copper */ 
            };

            /** This enum defines the owner options. */
            public: enum OwnerEnum
            {
                OwnerEnumUnowned/** unowned */ ,
                OwnerEnumMcad/** mcad */ ,
                OwnerEnumEcad/** ecad */ 
            };

            /** This enum defines the layer options. */
            public: enum LayerEnum
            {
                LayerEnumCurrent/** current */ ,
                LayerEnumBoth/** both */ ,
                LayerEnumInner/** inner */ ,
                LayerEnumAll/** all */ 
            };

            private: AreaAttributesBuilderImpl * m_areaattributesbuilder_impl;
            private: friend class  _AreaAttributesBuilderBuilder;
            protected: AreaAttributesBuilder();
            public: ~AreaAttributesBuilder();
            /**Returns  the feature 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Objects
            (
            );
            /**Returns  the type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::AreaAttributesBuilder::TypeEnum AreaType
            (
            );
            /**Sets  the type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetAreaType
            (
                NXOpen::PcbExchange::AreaAttributesBuilder::TypeEnum type /** type */ 
            );
            /**Returns  the subtype 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Subtype
            (
            );
            /**Sets  the subtype 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetSubtype
            (
                const NXString & subtype /** subtype */ 
            );
            /**Sets  the subtype 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetSubtype
            (
                const char * subtype /** subtype */ 
            );
            /**Returns  the name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the height 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the owner 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::AreaAttributesBuilder::OwnerEnum Owner
            (
            );
            /**Sets  the owner 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOwner
            (
                NXOpen::PcbExchange::AreaAttributesBuilder::OwnerEnum type /** type */ 
            );
            /**Returns  the layer 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::AreaAttributesBuilder::LayerEnum Layer
            (
            );
            /**Sets  the layer 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetLayer
            (
                NXOpen::PcbExchange::AreaAttributesBuilder::LayerEnum type /** type */ 
            );
            /**Returns  the inverted volume 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool InvertedVolume
            (
            );
            /**Sets  the inverted volume 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetInvertedVolume
            (
                bool invertedVolume /** invertedvolume */ 
            );
            /**Returns  the color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int Color
            (
            );
            /**Sets  the color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetColor
            (
                int color /** color */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
