#ifndef NXOpen_MBD_PMIQUERYDIMENSIONCRITERIABUILDER_HXX_INCLUDED
#define NXOpen_MBD_PMIQUERYDIMENSIONCRITERIABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MBD_PMIQueryDimensionCriteriaBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MBD_DoubleCriteriaBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libmbdopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MBD
    {
        class PMIQueryDimensionCriteriaBuilder;
    }
    class Builder;
    namespace MBD
    {
        class DoubleCriteriaBuilder;
    }
    namespace MBD
    {
        class _PMIQueryDimensionCriteriaBuilderBuilder;
        class PMIQueryDimensionCriteriaBuilderImpl;

        /// \cond NX_NO_DOC 
        /**
            Represents a @link NXOpen::MBD::PMIQueryDimensionCriteriaBuilder NXOpen::MBD::PMIQueryDimensionCriteriaBuilder@endlink 
             <br> This is a sub-builder class and cannot be directly instantiated  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class MBDOPENCPPEXPORT  PMIQueryDimensionCriteriaBuilder : public NXOpen::Builder
        {
            /** PMI Dimension Forms for query */
            public: enum DimensionForm
            {
                DimensionFormAngular/** angular */  = 1,
                DimensionFormDiametral/** diametral */ ,
                DimensionFormLinear/** linear */ 
            };

            /** PMI Dimension Tolerance Type for query */
            public: enum DimensionToleranceType
            {
                DimensionToleranceTypeNone/** none */  = 1,
                DimensionToleranceTypeTolerance/** tolerance */ ,
                DimensionToleranceTypeLimitsAndFits/** limits and fits */ ,
                DimensionToleranceTypeBasic/** basic */ 
            };

            /** PMI Dimension Limits and Fits Style for query */
            public: enum LimitsandFitsStyle
            {
                LimitsandFitsStyleAny/** any */ ,
                LimitsandFitsStyleHole/** hole */ ,
                LimitsandFitsStyleShaft/** shaft */ ,
                LimitsandFitsStyleFit/** fit */ 
            };

            /** PMI Dimension Hole Deviation for query */
            public: enum HoleDeviation
            {
                HoleDeviationAny/** any */ ,
                HoleDeviationA/** a */ ,
                HoleDeviationB/** b */ ,
                HoleDeviationC/** c */ ,
                HoleDeviationCd/** cd */ ,
                HoleDeviationD/** d */ ,
                HoleDeviationE/** e */ ,
                HoleDeviationEf/** ef */ ,
                HoleDeviationF/** f */ ,
                HoleDeviationFg/** fg */ ,
                HoleDeviationG/** g */ ,
                HoleDeviationH/** h */ ,
                HoleDeviationJs/** js */ ,
                HoleDeviationJ/** j */ ,
                HoleDeviationK/** k */ ,
                HoleDeviationM/** m */ ,
                HoleDeviationN/** n */ ,
                HoleDeviationP/** p */ ,
                HoleDeviationR/** r */ ,
                HoleDeviationS/** s */ ,
                HoleDeviationT/** t */ ,
                HoleDeviationU/** u */ ,
                HoleDeviationV/** v */ ,
                HoleDeviationX/** x */ ,
                HoleDeviationY/** y */ ,
                HoleDeviationZ/** z */ ,
                HoleDeviationZa/** za */ ,
                HoleDeviationZb/** zb */ ,
                HoleDeviationZc/** zc */ 
            };

            /** PMI Dimension Hole Grade for query */
            public: enum HoleGrade
            {
                HoleGradeAny/** any */ ,
                HoleGradeNo1/** no1 */ ,
                HoleGradeNo2/** no2 */ ,
                HoleGradeNo3/** no3 */ ,
                HoleGradeNo4/** no4 */ ,
                HoleGradeNo5/** no5 */ ,
                HoleGradeNo6/** no6 */ ,
                HoleGradeNo7/** no7 */ ,
                HoleGradeNo8/** no8 */ ,
                HoleGradeNo9/** no9 */ ,
                HoleGradeNo10/** no10 */ ,
                HoleGradeNo11/** no11 */ ,
                HoleGradeNo12/** no12 */ ,
                HoleGradeNo13/** no13 */ ,
                HoleGradeNo14/** no14 */ ,
                HoleGradeNo15/** no15 */ ,
                HoleGradeNo16/** no16 */ ,
                HoleGradeNo17/** no17 */ ,
                HoleGradeNo18/** no18 */ ,
                HoleGradeNo19/** no19 */ ,
                HoleGradeNo20/** no20 */ 
            };

            /** PMI Dimension Shaft Deviation for query */
            public: enum ShaftDeviation
            {
                ShaftDeviationAny/** any */ ,
                ShaftDeviationA/** a */ ,
                ShaftDeviationB/** b */ ,
                ShaftDeviationC/** c */ ,
                ShaftDeviationCd/** cd */ ,
                ShaftDeviationD/** d */ ,
                ShaftDeviationE/** e */ ,
                ShaftDeviationEf/** ef */ ,
                ShaftDeviationF/** f */ ,
                ShaftDeviationFg/** fg */ ,
                ShaftDeviationG/** g */ ,
                ShaftDeviationH/** h */ ,
                ShaftDeviationJs/** js */ ,
                ShaftDeviationJ/** j */ ,
                ShaftDeviationK/** k */ ,
                ShaftDeviationM/** m */ ,
                ShaftDeviationN/** n */ ,
                ShaftDeviationP/** p */ ,
                ShaftDeviationR/** r */ ,
                ShaftDeviationS/** s */ ,
                ShaftDeviationT/** t */ ,
                ShaftDeviationU/** u */ ,
                ShaftDeviationV/** v */ ,
                ShaftDeviationX/** x */ ,
                ShaftDeviationY/** y */ ,
                ShaftDeviationZ/** z */ ,
                ShaftDeviationZa/** za */ ,
                ShaftDeviationZb/** zb */ ,
                ShaftDeviationZc/** zc */ 
            };

            /** PMI Dimension Shaft Deviation for query */
            public: enum ShaftGrade
            {
                ShaftGradeAny/** any */ ,
                ShaftGradeNo1/** no1 */ ,
                ShaftGradeNo2/** no2 */ ,
                ShaftGradeNo3/** no3 */ ,
                ShaftGradeNo4/** no4 */ ,
                ShaftGradeNo5/** no5 */ ,
                ShaftGradeNo6/** no6 */ ,
                ShaftGradeNo7/** no7 */ ,
                ShaftGradeNo8/** no8 */ ,
                ShaftGradeNo9/** no9 */ ,
                ShaftGradeNo10/** no10 */ ,
                ShaftGradeNo11/** no11 */ ,
                ShaftGradeNo12/** no12 */ ,
                ShaftGradeNo13/** no13 */ ,
                ShaftGradeNo14/** no14 */ ,
                ShaftGradeNo15/** no15 */ ,
                ShaftGradeNo16/** no16 */ ,
                ShaftGradeNo17/** no17 */ ,
                ShaftGradeNo18/** no18 */ ,
                ShaftGradeNo19/** no19 */ ,
                ShaftGradeNo20/** no20 */ 
            };

            private: PMIQueryDimensionCriteriaBuilderImpl * m_pmiquerydimensioncriteriabuilder_impl;
            private: friend class  _PMIQueryDimensionCriteriaBuilderBuilder;
            protected: PMIQueryDimensionCriteriaBuilder();
            public: ~PMIQueryDimensionCriteriaBuilder();
            /** The @link NXOpen::MBD::DoubleCriteriaBuilder NXOpen::MBD::DoubleCriteriaBuilder@endlink  for tolerance value 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MBD::DoubleCriteriaBuilder * GetValue
            (
            );
            /** The @link NXOpen::MBD::DoubleCriteriaBuilder NXOpen::MBD::DoubleCriteriaBuilder@endlink  for tolerance value 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MBD::DoubleCriteriaBuilder * GetToleranceValue
            (
            );
            /** Sets PMI Dimension Forms to be enabled for query 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void EnableForm
            (
                const std::vector<NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::DimensionForm> & types /** types */ 
            );
            /** Sets PMI Dimension Forms to be disabled for query 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void DisableForm
            (
                const std::vector<NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::DimensionForm> & types /** types */ 
            );
            /** Sets PMI Dimension Tolerance Type to be enabled for query 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void EnableTolerancetype
            (
                const std::vector<NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::DimensionToleranceType> & types /** types */ 
            );
            /** Sets PMI Dimension Tolerance Types to be disabled for query 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void DisableTolerancetype
            (
                const std::vector<NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::DimensionToleranceType> & types /** types */ 
            );
            /** Sets limits and fits style 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLimitsandfitsstyle
            (
                NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::LimitsandFitsStyle limitsAndFitsStyle /** limitsandfitsstyle */ 
            );
            /** Set PMI Dimension Hole Deviation for query 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoledeviationtype
            (
                NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::HoleDeviation holeDeviation /** holedeviation */ 
            );
            /** Set PMI Dimension Hole Grade for query 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHolegradenumber
            (
                NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::HoleGrade holeGrade /** holegrade */ 
            );
            /** Set PMI Dimension Shaft Deviation for query 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShaftdeviationtype
            (
                NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::ShaftDeviation shaftDeviation /** shaftdeviation */ 
            );
            /** Set PMI Dimension Shaft Grade for query 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShaftgradenumber
            (
                NXOpen::MBD::PMIQueryDimensionCriteriaBuilder::ShaftGrade shaftGrade /** shaftgrade */ 
            );
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
