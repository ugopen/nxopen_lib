#ifndef NXOpen_CAM_DMCMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_DMCMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_DmCmBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class DmCmBuilder;
    }
    class Builder;
    namespace CAM
    {
        class DmCmMultiplePassesCiBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class _DmCmBuilderBuilder;
        /** Represents a DmCmBuilder  <br> To obtain an instance of this class use @link CAM::SurfaceContourBuilder::DmCmBuilder CAM::SurfaceContourBuilder::DmCmBuilder@endlink  <br> */
        class NXOPENCPPEXPORT DmCmBuilder : public Builder
        {
            /** Available types for point type, Contour Milling Drive */
            public: enum DmCmCutPointType
            {
                DmCmCutPointTypeCustom/**custom*/,
                DmCmCutPointTypeAutomatic/**automatic*/
            };

            /** Available types for ext_dis, Contour Milling Drive: Start of Cut */
            public: enum ExtDisType
            {
                ExtDisTypeNone/**None*/,
                ExtDisTypeFixed/**Specify*/,
                ExtDisTypePercent/**Tool Diameter*/
            };

            /** Available types for vector type, Contour Milling Drive */
            public: enum ToolAxisGuideVectorType
            {
                ToolAxisGuideVectorTypeAuto/**automatic*/,
                ToolAxisGuideVectorTypeGuide/**user specified */
            };

            private: friend class  _DmCmBuilderBuilder;
            protected: DmCmBuilder();
            /**Returns  the custom/auto, Contour Milling Drive: Start of Cut <br> License requirements : None */
            public: NXOpen::CAM::DmCmBuilder::DmCmCutPointType DmCmStartCutRadio
            (
            );
            /**Sets  the custom/auto, Contour Milling Drive: Start of Cut <br> License requirements : None */
            public: void SetDmCmStartCutRadio
            (
                NXOpen::CAM::DmCmBuilder::DmCmCutPointType dm_cm_start_cut_radio /** the value of custom/auto */
            );
            /**Returns  the Extend,  Contour Milling Drive: Start of Cut <br> License requirements : None */
            public: bool DmCmStartCutExtend
            (
            );
            /**Sets  the Extend,  Contour Milling Drive: Start of Cut <br> License requirements : None */
            public: void SetDmCmStartCutExtend
            (
                bool dm_cm_start_cut_extend /** the Extend value */
            );
            /**Returns  the ext_dis, Contour Milling Drive: Start of Cut <br> License requirements : None */
            public: NXOpen::CAM::DmCmBuilder::ExtDisType DmCmStartCutDisType
            (
            );
            /**Sets  the ext_dis, Contour Milling Drive: Start of Cut <br> License requirements : None */
            public: void SetDmCmStartCutDisType
            (
                NXOpen::CAM::DmCmBuilder::ExtDisType dm_cm_start_cut_dis_type /** the value of ext_dis */
            );
            /**Returns  the  builder of Distance,  Contour Milling Drive: Start of Cut <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartExtDistSpecValueBuilder
            (
            );
            /**Returns  the start tool side vector, Contour Milling Drive: Start of Cut <br> License requirements : None */
            public: NXOpen::CAM::DmCmBuilder::ToolAxisGuideVectorType DmCmStartCutToolAxisGuideVector
            (
            );
            /**Sets  the start tool side vector, Contour Milling Drive: Start of Cut <br> License requirements : None */
            public: void SetDmCmStartCutToolAxisGuideVector
            (
                NXOpen::CAM::DmCmBuilder::ToolAxisGuideVectorType guideVec /** the value of start tool side vector */
            );
            /**Returns  the custom/auto, Contour Milling Drive: End of Cut <br> License requirements : None */
            public: NXOpen::CAM::DmCmBuilder::DmCmCutPointType DmCmEndCutRadio
            (
            );
            /**Sets  the custom/auto, Contour Milling Drive: End of Cut <br> License requirements : None */
            public: void SetDmCmEndCutRadio
            (
                NXOpen::CAM::DmCmBuilder::DmCmCutPointType dm_cm_end_cut_radio /** the value of custom/auto */
            );
            /**Returns  the Extend,  Contour Milling Drive: End of Cut <br> License requirements : None */
            public: bool DmCmEndCutExtend
            (
            );
            /**Sets  the Extend,  Contour Milling Drive: End of Cut <br> License requirements : None */
            public: void SetDmCmEndCutExtend
            (
                bool dm_cm_end_cut_extend /** the Extend value */
            );
            /**Returns  the ext_dis, Contour Milling Drive: End of Cut <br> License requirements : None */
            public: NXOpen::CAM::DmCmBuilder::ExtDisType DmCmEndCutDisType
            (
            );
            /**Sets  the ext_dis, Contour Milling Drive: End of Cut <br> License requirements : None */
            public: void SetDmCmEndCutDisType
            (
                NXOpen::CAM::DmCmBuilder::ExtDisType dm_cm_end_cut_dis_type /** the value of ext_dis */
            );
            /**Returns  the  builder of Distance,  Contour Milling Drive: End of Cut <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndExtDistSpecValueBuilder
            (
            );
            /**Returns  the end tool side vector, Contour Milling Drive: End of Cut <br> License requirements : None */
            public: NXOpen::CAM::DmCmBuilder::ToolAxisGuideVectorType DmCmEndCutToolAxisGuideVector
            (
            );
            /**Sets  the end tool side vector, Contour Milling Drive: End of Cut <br> License requirements : None */
            public: void SetDmCmEndCutToolAxisGuideVector
            (
                NXOpen::CAM::DmCmBuilder::ToolAxisGuideVectorType guideVec /** the value of end tool side vector */
            );
            /**Returns  the  Follow Wall Bottom  <br> License requirements : None */
            public: bool FollowWallBottom
            (
            );
            /**Sets  the  Follow Wall Bottom  <br> License requirements : None */
            public: void SetFollowWallBottom
            (
                bool follow_wall_bottom /** the Follow Wall Bottom value */
            );
            /**Returns  the part stock builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * ToolPositionOffsetBuilder
            (
            );
            /**Returns  the Contour Profile Drive: Floor Stock / Wall Stock   <br> License requirements : None */
            public: bool DmCmFloorWallStockSame
            (
            );
            /**Sets  the Contour Profile Drive: Floor Stock / Wall Stock   <br> License requirements : None */
            public: void SetDmCmFloorWallStockSame
            (
                bool dm_cm_floor_wall_stock_same /** the Use Floor Stock Same as Wall value */
            );
            /**Returns  the Wall Stock builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * DmCmFloorWallStockWallBuilder
            (
            );
            /**Returns  the Floor Stock builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * DmCmFloorWallStockFloorBuilder
            (
            );
            /**Returns  the Multiple Passes builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DmCmMultiplePassesCiBuilder * DmCmMultiplePassesBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
