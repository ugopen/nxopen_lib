#ifndef NXOpen_ASSEMBLIES_COMPONENT_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_COMPONENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_Component.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    class BasePart;
    class DisplayableObject;
    class ErrorList;
    class INXObject;
    class NXObject;
    namespace Positioning
    {
        class Constraint;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    namespace Assemblies
    {
        class _ComponentBuilder;
        /** 
            Represents a component in a @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink . Note that a
            Component is an occurrence whose prototype is a @link Part Part@endlink . See
            @link NXObject::Prototype NXObject::Prototype@endlink .

             <br> 

            Components are arranged in a tree, with each component having a single parent, and one
            or more children. The top of the tree is the Root Component (see
            @link Assemblies::ComponentAssembly::RootComponent Assemblies::ComponentAssembly::RootComponent@endlink  which has a null
            parent. The components below the root are referred to as "Top Level" components, which
            represent the component parts that have been added directly to the
            ComponentAssembly. (Calling @link Assemblies::ComponentAssembly::AddComponent Assemblies::ComponentAssembly::AddComponent@endlink  will
            create a new Top Level component.) Components beneath the top level represent
            components defined in sub-assemblies of the main assembly.

             <br> 
            

           */
        class NXOPENCPPEXPORT Component : public DisplayableObject, public virtual Routing::ICharacteristic
        {
            private: friend class  _ComponentBuilder;
            protected: Component();
            /**Returns  the parent of the component. For the root component of an assembly, this
                    will be null. See @link Assemblies::ComponentAssembly::RootComponent Assemblies::ComponentAssembly::RootComponent@endlink .
                  <br> License requirements : None */
            public: NXOpen::Assemblies::Component * Parent
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Parent() Parent@endlink instead.
            @deprecated
            */
            public: NXOpen::Assemblies::Component * GetParent
            (
            ) { return this->Parent(); }
            /**Returns  the @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink  which owns this component as a "Top Level" component.
                    For components in a multi-level assembly, this is NOT the same the part that owns this component object. 
                    I.e. it is not the same as calling:
                     @code 
                     NXObject.OwningPart()
                     @endcode 
                     @code 
                    BasePart.ComponentAssembly()
                     @endcode 
                    
                  <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentAssembly * DirectOwner
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DirectOwner() DirectOwner@endlink instead.
            @deprecated
            */
            public: NXOpen::Assemblies::ComponentAssembly * GetDirectOwner
            (
            ) { return this->DirectOwner(); }
            /** Returns the child components of this component  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> GetChildren
            (
            );
            /** Given a prototype object, returns the corresponding occurrence
                in this component  @return  the occurrence of the prototype in this component  <br> License requirements : None */
            public: NXOpen::NXObject * FindOccurrence
            (
                NXOpen::NXObject * proto /** the prototype */
            );
            /** 
                    Gets the layer option. This controls which layer the component's geometry will appear on in its parent part.
                 @return  The layer option of the component in its parent part
                                                 -1 Means that the component's geometry has the layer settings defined in its orginal part
                                                  1-255 Means the components geometry is on the specified layer
                                           <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetLayerOption
            (
            );
            /** 
                    Sets the layer option. This controls which layer the component's geometry will appear on in its parent part.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLayerOption
            (
                int layer /** The new layer for this component in its parent part 
                                                     -1 Means use the original layer settings defined in the component's part.
                                                      0 Means use the current work layer
                                                      1-255 Means use the specified layer.
                                         */
            );
            /**Returns  the name of the reference set which represents the entire part. This
                    can be used as a parameter to @link Assemblies::ComponentAssembly::ReplaceReferenceSet Assemblies::ComponentAssembly::ReplaceReferenceSet@endlink .
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString EntirePartRefsetName
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link EntirePartRefsetName() EntirePartRefsetName@endlink instead.
            @deprecated
            */
            public: NXString GetEntirePartRefsetName
            (
            ) { return this->EntirePartRefsetName(); }
            /**Returns  the name of the reference set which represents the empty set. This
                    can be used as a parameter to @link Assemblies::ComponentAssembly::ReplaceReferenceSet Assemblies::ComponentAssembly::ReplaceReferenceSet@endlink .
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString EmptyPartRefsetName
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link EmptyPartRefsetName() EmptyPartRefsetName@endlink instead.
            @deprecated
            */
            public: NXString GetEmptyPartRefsetName
            (
            ) { return this->EmptyPartRefsetName(); }
            /**Returns  
                    the name of the reference set used for this component
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString ReferenceSet
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ReferenceSet() ReferenceSet@endlink instead.
            @deprecated
            */
            public: NXString GetReferenceSet
            (
            ) { return this->ReferenceSet(); }
            /**
                    Gets the position of a component
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GetPosition
            (
                NXOpen::Point3d* position /** The origin of this component */,
                NXOpen::Matrix3x3* orientation /** The orientation of this component */
            );
            /**Returns 
                    the @link Assemblies::Arrangement Assemblies::Arrangement@endlink  that controls this component's
                    suppression state.  The controlling Arrangement will be defined in a
                    @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink  in the tree above this Component.
                     <br> 
                    Note: In the current release, Arrangements are only used for controlling a
                    component's suppression state. In future releases, further attributes will be
                    controlled via Arrangements.
                     <br> 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * SuppressingArrangement
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link SuppressingArrangement() SuppressingArrangement@endlink instead.
            @deprecated
            */
            public: NXOpen::Assemblies::Arrangement * GetSuppressingArrangement
            (
            ) { return this->SuppressingArrangement(); }
            /**
                    Changes the Arrangement used for this component. If this is the root component
                    (i.e. it has no parent) then this is equivalent to setting the active arrangement
                    in the owner. (See @link Assemblies::Component::DirectOwner Assemblies::Component::DirectOwner@endlink  and
                    @link Assemblies::ComponentAssembly::SetActiveArrangement Assemblies::ComponentAssembly::SetActiveArrangement@endlink .) For
                    non-root components, this sets the arrangement used for this component in the
                    context of its parent component. Note that this method should only be used for
                    components which have children.
                    
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetUsedArrangement
            (
                NXOpen::Assemblies::Arrangement * new_arrangement /** The new @link Assemblies::Arrangement Assemblies::Arrangement@endlink . This Arrangement
                                                                               must be defined in a the ComponentAssembly of this Component's
                                                                               prototype part.
                                                                            */
            );
            /**Returns 
                    the Arrangement used for this component. See @link Assemblies::Component::SetUsedArrangement Assemblies::Component::SetUsedArrangement@endlink 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * UsedArrangement
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link UsedArrangement() UsedArrangement@endlink instead.
            @deprecated
            */
            public: NXOpen::Assemblies::Arrangement * GetUsedArrangement
            (
            ) { return this->UsedArrangement(); }
            /**Returns 
                    the suppressed state of the component in its controlling arrangement. 
                    (See @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink .)
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool IsSuppressed
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link IsSuppressed() IsSuppressed@endlink instead.
            @deprecated
            */
            public: bool GetIsSuppressed
            (
            ) { return this->IsSuppressed(); }
            /**
                    Suppresses the component in the ComponentAssembly that contains its controlling Arrangement. 
                    The component will be suppressed in all Arrangements in the ComponentAssembly, not just
                    in the controlling arrangement.
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 
                     <br> @link Assemblies::ComponentAssembly::SuppressComponents Assemblies::ComponentAssembly::SuppressComponents@endlink  <br> 

                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Suppress
            (
            );
            /**
                    Suppresses an array of components in the ComponentAssembly that contains their
                    controlling Arrangement.  The component will be suppressed in all Arrangements in
                    the ComponentAssembly.  
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 

                     <br> And then calling  <br> 

                     <br> @link Assemblies::ComponentAssembly::SuppressComponents Assemblies::ComponentAssembly::SuppressComponents@endlink  <br> 

                    on the component array. Note that all components should have
                    the same suppressing Arrangement.
                 @return  list of errors encountered during the suppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * Suppress
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be suppressed. Each component will be
                                                                                                    suppressed in its controlling arrangement. Note that
                                                                                                    the components must all be underneath the same assembly
                                                                                                */
            );
            /**
                    Unsuppresses the component in the ComponentAssembly that contains its controlling Arrangement. 
                    The component will be unsuppressed in all Arrangements in the ComponentAssembly.
                     <br> This is equivalent to calling: <br> 

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 
                    @link Assemblies::ComponentAssembly::UnsuppressComponents Assemblies::ComponentAssembly::UnsuppressComponents@endlink 

                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Unsuppress
            (
            );
            /**
                    Unsuppresses an array of components in the ComponentAssembly that contains their
                    controlling Arrangement.  The component will be unsuppressed in all Arrangements in
                    the ComponentAssembly.  This is equivalent to calling:

                     <br> @link Assemblies::Component::SuppressingArrangement Assemblies::Component::SuppressingArrangement@endlink  <br> 
                     <br> @link Assemblies::Arrangement::Owner Assemblies::Arrangement::Owner@endlink  <br> 


                     <br> @link Assemblies::ComponentAssembly::UnsuppressComponents Assemblies::ComponentAssembly::UnsuppressComponents@endlink  <br> 

                    on the component array. Note that all components should have
                    the same suppressing Arrangement.

                 @return  list of errors encountered during the unsuppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * Unsuppress
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be unsuppressed. Each component will be
                                                                                                    unsuppressed in its controlling arrangement. Note that
                                                                                                    the components must all be underneath the same assembly
                                                                                                */
            );
            /** Update the assembly structure for this assembly in the 
                    context of the displayed part to the specified number of
                    levels.
                 <br> License requirements : gateway ("UG GATEWAY") */
            public: void UpdateStructure
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Component tags to start update structure from */,
                int n_levels /** The number of levels to update. If -1 then all levels are updated.*/
            );
            /**Returns  the displayable name of the prototype part.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString DisplayName
            (
            );
            /**Returns  the fixed state of this component.  True if there is an unsuppressed
                    fix constraint on this component and false otherwise.  If the part 
                    controlling the position of this component is not loaded then false
                    will be returned.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool IsFixed
            (
            );
            /**Returns  a fix @link Positioning::Constraint Positioning::Constraint@endlink  of this component.
                    The constraint may be suppressed or NULL.  If the part 
                    controlling the position of this component is not loaded then NULL
                    will be returned.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint * FixConstraint
            (
            );
            /** Returns the @link Positioning::Constraint Positioning::Constraint@endlink s directly connected to this component.  If
                    the part containing those constraints is not loaded then no constraints will be 
                    returned.
                 @return  Constraints directly connected to this component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::Constraint *> GetConstraints
            (
            );
            /** Get all of the characteristics values on the this object.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** value */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** value */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes the input list of characteristics from this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /**   Returns the destination characteristics from the input object.
                          Retrieves the description of which destination characteristics to read
                          from the application view and then reads those destination 
                          characteristics from the object
                          <ul>
                              <li>Ports: Reads characteristics from the port.</li>
                              <li>RCPs: Attempts to find a port at the RCP, reads characteristics from
                                          the port if it exists, otherwise reads from the
                                          stock associated with the rcp.</li>
                              <li>Segments: Reads characteristics from the stock associated with the segment.</li>
                              <li>Components: Reads characteristics directly from the component.</li>
                              <li>Stock: Reads characteristics from the stock or from the stock's data.</li>
                          </ul>
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetDestinationCharacteristics
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
