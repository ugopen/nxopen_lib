#ifndef NXOpen_MOTION_BODYCONTACTRECURDYN_HXX_INCLUDED
#define NXOpen_MOTION_BODYCONTACTRECURDYN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_BodyContactRecurdyn.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_BodyContactRecurdyn.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class BodyContactRecurdyn;
    }
    class NXObject;
    namespace Motion
    {
        class _BodyContactRecurdynBuilder;
        /** Represents a @link Motion::BodyContactRecurdyn Motion::BodyContactRecurdyn@endlink  */
        class NXOPENCPPEXPORT BodyContactRecurdyn : public NXObject
        {
            /** the enum for forec model of 3D contact */
            public: enum ForceModel
            {
                ForceModelImpact/** impact */ ,
                ForceModelPoisson/** poisson */ 
            };

            /** the enum for friction option of 3D contact */
            public: enum CoulombFriction
            {
                CoulombFrictionOff/** off */ ,
                CoulombFrictionOn/** on */ 
            };

            private: friend class  _BodyContactRecurdynBuilder;
            protected: BodyContactRecurdyn();
            /**Returns  the stiffness  <br> License requirements : None */
            public: double Stiffness
            (
            );
            /**Sets  the stiffness  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStiffness
            (
                double stiffness /** stiffness */ 
            );
            /**Returns  the force model type <br> License requirements : None */
            public: NXOpen::Motion::BodyContactRecurdyn::ForceModel ForceModelType
            (
            );
            /**Sets  the force model type <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetForceModelType
            (
                NXOpen::Motion::BodyContactRecurdyn::ForceModel force_model /** force model */ 
            );
            /**Returns  the force exponent  <br> License requirements : None */
            public: double ForceExponent
            (
            );
            /**Sets  the force exponent  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetForceExponent
            (
                double force_exponent /** force exponent */ 
            );
            /**Returns  the material damping  <br> License requirements : None */
            public: double MaterialDamping
            (
            );
            /**Sets  the material damping  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaterialDamping
            (
                double material_damping /** material damping */ 
            );
            /**Returns  the penetration depth  <br> License requirements : None */
            public: double PenetrationDepth
            (
            );
            /**Sets  the penetration depth  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPenetrationDepth
            (
                double penetration_depth /** penetration depth */ 
            );
            /**Returns  the Buffer Radius Factor  <br> License requirements : None */
            public: double BufferRadiusFactor
            (
            );
            /**Sets  the Buffer Radius Factor  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBufferRadiusFactor
            (
                double buffer_radius_factor /** buffer radius factor */ 
            );
            /**Returns  the Maximun Step Size Factor  <br> License requirements : None */
            public: double MaximumStepSizeFactor
            (
            );
            /**Sets  the Maximun Step Size Factor  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaximumStepSizeFactor
            (
                double maximum_step_size_factor /** maximum step size factor */ 
            );
            /**Returns  the Plane Maximum Penetration of the first geometry <br> License requirements : None */
            public: double FirstGeometryMaximumPenetration
            (
            );
            /**Sets  the Plane Maximum Penetration of the first geometry <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstGeometryMaximumPenetration
            (
                double first_geometry_maximum_penetration /** first geometry maximum penetration */ 
            );
            /**Returns  the Plane Tolerance Factor of the first geometry <br> License requirements : None */
            public: double FirstGeometryPlaneToleranceFactor
            (
            );
            /**Sets  the Plane Tolerance Factor of the first geometry <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstGeometryPlaneToleranceFactor
            (
                double first_geometry_plane_tolerance_factor /** first geometry plane tolerance factor */ 
            );
            /**Returns  the Plane Maximum Penetration of the second geometry <br> License requirements : None */
            public: double SecondGeometryMaximumPenetration
            (
            );
            /**Sets  the Plane Maximum Penetration of the second geometry <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondGeometryMaximumPenetration
            (
                double second_geometry_maximum_penetration /** second geometry maximum penetration */ 
            );
            /**Returns  the Plane Tolerance Factor of the second geometry <br> License requirements : None */
            public: double SecondGeometryPlaneToleranceFactor
            (
            );
            /**Sets  the Plane Tolerance Factor of the second geometry <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondGeometryPlaneToleranceFactor
            (
                double second_geometry_plane_tolerance_factor /** second geometry plane tolerance factor */ 
            );
            /**Returns  the coulomb friction option <br> License requirements : None */
            public: NXOpen::Motion::BodyContactRecurdyn::CoulombFriction CoulombFrictionOption
            (
            );
            /**Sets  the coulomb friction option <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCoulombFrictionOption
            (
                NXOpen::Motion::BodyContactRecurdyn::CoulombFriction coulomb_friction /** coulomb friction */ 
            );
            /**Returns  the coulomb coefficient  <br> License requirements : None */
            public: double StaticCoefficient
            (
            );
            /**Sets  the coulomb coefficient  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticCoefficient
            (
                double static_coefficient /** static coefficient */ 
            );
            /**Returns  the stiction velocity  <br> License requirements : None */
            public: double StictionVelocity
            (
            );
            /**Sets  the stiction velocity  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStictionVelocity
            (
                double stiction_velocity /** stiction velocity */ 
            );
            /**Returns  the dynamic coefficient  <br> License requirements : None */
            public: double DynamicCoefficient
            (
            );
            /**Sets  the dynamic coefficient  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicCoefficient
            (
                double dynamic_coefficient /** dynamic coefficient */ 
            );
            /**Returns  the friction velocity  <br> License requirements : None */
            public: double FrictionVelocity
            (
            );
            /**Sets  the friction velocity  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFrictionVelocity
            (
                double friction_velocity /** friction velocity */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
