#ifndef NXOpen_CAE_PROPERTYTABLE_HXX_INCLUDED
#define NXOpen_CAE_PROPERTYTABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PropertyTable.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BeamSectionOptions.hxx>
#include <NXOpen/CAE_MaterialOptions.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class PropertyTable;
    }
    class Axis;
    namespace CAE
    {
        class BeamSectionOptions;
    }
    namespace CAE
    {
        class MaterialOptions;
    }
    namespace CAE
    {
        class NamedPropertyTable;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace Fields
    {
        class FieldExpression;
    }
    class NXObject;
    class Point;
    namespace CAE
    {
        class _PropertyTableBuilder;
        /**  @brief  Represents a property table  

           <br> This is a sub object <br> */
        class NXOPENCPPEXPORT PropertyTable : public NXObject
        {
            private: friend class  _PropertyTableBuilder;
            protected: PropertyTable();
            /**The count of properties in the table  @return  count of properties  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetPropertyCount
            (
            );
            /** Returns the name of the property  @return  name of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetPropertyNameByIndex
            (
                int index /** index of the property */
            );
            /** Returns the string value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString GetStringPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the string value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetStringPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & property_value /** value of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the text value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXString> GetTextPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the text value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTextPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & property_value /** value of the property */
            );
            /** Returns the boolean value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool GetBooleanPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the boolean value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetBooleanPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool property_value /** value of the property */
            );
            /** Returns the integer value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetIntegerPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the integer value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIntegerPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int property_value /** value of the property */
            );
            /** Returns the double value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double GetDoublePropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the double value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDoublePropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double property_value /** value of the property */
            );
            /** Returns the expression @link Expression Expression@endlink  value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * GetScalarPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the expression @link Expression Expression@endlink  value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Expression * property_value /** value of the property */
            );
            /** Returns the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Fields::FieldExpression * GetScalarFieldPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the field expression @link Fields::FieldExpression Fields::FieldExpression@endlink  value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarFieldPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::FieldExpression * property_value /** value of the property */
            );
            /** Returns the direction @link Direction Direction@endlink  value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Direction * GetVectorPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the direction @link Direction Direction@endlink  value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetVectorPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Direction * property_value /** value of the property */
            );
            /** Returns the coordinate system @link CoordinateSystem CoordinateSystem@endlink  
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CoordinateSystem * GetCoordinateSystemPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the coordinate system @link CoordinateSystem CoordinateSystem@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCoordinateSystemPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CoordinateSystem * property_value /** value of the property */
            );
            /** Returns the referenced object value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::NXObject * GetReferencePropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced object value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetReferencePropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject * property_value /** value of the property 
                                                                                            The object passed in can be of the following types 
                                                                                            @link CAE::CAEVertex CAE::CAEVertex@endlink 
                                                                                            @link CAE::CAEEdge CAE::CAEEdge@endlink 
                                                                                            @link CAE::CAEFace CAE::CAEFace@endlink 
                                                                                            @link CAE::CAEBody CAE::CAEBody@endlink 
                                                                                          */
            );
            /** Returns the point value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Point * GetPointPropertyValue
            (
                const NXString & property_name /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the point value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPointPropertyValue
            (
                const NXString & property_name /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Point * property_value /** value of the property */
            );
            /** Returns the scalar array value of the property
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<double> GetScalarArrayPropertyValue
            (
                const NXString & property_name /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the scalar array value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScalarArrayPropertyValue
            (
                const NXString & property_name /** name of the property    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<double> & property_value /** value of the property */
            );
            /** Returns the date time value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void GetDateTimePropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int* property_year /** year of the property */,
                int* property_month /** month of the property */,
                int* property_day /** day of the property */,
                int* property_hour /** hour of the property */,
                int* property_min /** minute of the property */,
                int* property_second /** second of the property */,
                int* property_msec /** milisecond of the property */
            );
            /** Returns the date time value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDateTimePropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int property_year /** year of the property */,
                int property_month /** month of the property */,
                int property_day /** day of the property */,
                int property_hour /** hour of the property */,
                int property_min /** minute of the property */,
                int property_second /** second of the property */,
                int property_msec /** milisecond of the property */
            );
            /** Returns the referenced array object value of the property
                      @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXOpen::CAE::NamedPropertyTable *> GetNamedPropertyTableArrayPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced object array value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNamedPropertyTableArrayPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::NamedPropertyTable *> & property_value /** property value */ 
            );
            /** Returns the integer array value of the property
                      @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<int> GetIntegerArrayPropertyValue
            (
                const NXString & property_name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the integer array value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIntegerArrayPropertyValue
            (
                const NXString & property_name /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & property_value /** property value */ 
            );
            /** Returns the referenced referenced named property table object value of the property
                      @return  Value of Named Proeprty Table Reference  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::NamedPropertyTable * GetNamedPropertyTablePropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the referenced named property table object value of the property
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNamedPropertyTablePropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::NamedPropertyTable * named_property_table /** value of the property 
                                                                                            The object passed in can be of the following types 
                                                                                            @link CAE::PhysicalPropertyTable CAE::PhysicalPropertyTable@endlink  
                                                                                            @link CAE::Laminate CAE::Laminate@endlink 
                                                                                          */
            );
            /** Returns the axis @link Axis Axis@endlink 
                      @return  value of the property  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Axis * GetAxisPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the axis @link Axis Axis@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetAxisPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Axis * property_value /** value of the property */
            );
            /** Returns the  material options @link CAE::MaterialOptions CAE::MaterialOptions@endlink 
                      @return  material options  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::MaterialOptions * GetPhysicalMaterialPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the material options @link CAE::MaterialOptions CAE::MaterialOptions@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPhysicalMaterialPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::MaterialOptions * material_options /** material options */
            );
            /** Returns the  beam section options @link CAE::BeamSectionOptions CAE::BeamSectionOptions@endlink 
                      @return  material options  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::BeamSectionOptions * GetCaeSectionPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the beam section options @link CAE::BeamSectionOptions CAE::BeamSectionOptions@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCaeSectionPropertyValue
            (
                const NXString & property_name /** name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::BeamSectionOptions * beam_section_options /** material options */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
