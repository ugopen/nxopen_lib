#ifndef NXOpen_SCRULEFACTORY_HXX_INCLUDED
#define NXOpen_SCRULEFACTORY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ScRuleFactory.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/SelectionIntentRule.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class ScRuleFactory;
    class Part;
    class Body;
    class Curve;
    class CurveDumbRule;
    class CurveFeatureChainRule;
    class CurveFeatureRule;
    class CurveFeatureTangentRule;
    class DatumPlane;
    class Edge;
    class EdgeBodyRule;
    class EdgeBoundaryRule;
    class EdgeChainRule;
    class EdgeDumbRule;
    class EdgeFaceRule;
    class EdgeFeatureRule;
    class EdgeIntersectRule;
    class EdgeMultipleSeedTangentRule;
    class EdgeSheetBoundaryRule;
    class EdgeTangentRule;
    class EdgeVertexRule;
    class EdgeVertexTangentRule;
    class Face;
    class FaceAdjacentRule;
    class FaceAllBlendRule;
    class FaceBodyRule;
    class FaceBossPocketFacesRule;
    class FaceConnectedBlendRule;
    class FaceDumbRule;
    class FaceFeatureRule;
    class FaceRegionRule;
    class FaceRibFacesRule;
    class FaceSlotFacesRule;
    class FaceTangentRule;
    namespace Features
    {
        class Feature;
    }
    class FollowFilletRule;
    class ICurve;
    class Point;
    class SelectionIntentRule;
    /** This class contains the factory methods for creating selection intent rules  <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
    class NXOPENCPPEXPORT ScRuleFactory
    {
        private: NXOpen::Part* m_owner;
        public: explicit ScRuleFactory(NXOpen::Part *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Creates selection intent rule: @link  EdgeDumbRule   EdgeDumbRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeDumbRule * CreateRuleEdgeDumb
        (
            const std::vector<NXOpen::Edge *> & edges /** Edges which creates this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeChainRule   EdgeChainRule @endlink  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeChainRule * CreateRuleEdgeChain
        (
            NXOpen::Edge * start_edge /** Start edge of edge chain.*/,
            NXOpen::Edge * end_edge /** End edge of edge chain. */,
            bool is_from_start /** True: the chain starts from the start
                                                   point of the start edge */
        );
        /** Creates selection intent rule: @link  EdgeMultipleSeedTangentRule   EdgeMultipleSeedTangentRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeMultipleSeedTangentRule * CreateRuleEdgeMultipleSeedTangent
        (
            const std::vector<NXOpen::Edge *> & seed_edges /** Seed edges. */,
            double angle_tolerance /** Angle tolerance for tangent edges. */,
            bool has_same_convexity /** True: will only find tangnet edges that has the same convexity */
        );
        /** Creates selection intent rule: @link  EdgeTangentRule   EdgeTangentRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeTangentRule * CreateRuleEdgeTangent
        (
            NXOpen::Edge * start_edge /** Start edge of edge chain. */,
            NXOpen::Edge * end_edge /** End edge of edge chain. It can be null (Nothing)*/,
            bool is_from_start /** True: the tangent starts from the start
                                                  point of the start edge if end edge is provided*/,
            double angle_tolerance /** Angle tolerance for tangent edges */,
            bool has_same_convexity /** True: will only find tangnet edges that has the same convexity.*/
        );
        /** Creates selection intent rule: @link  EdgeFaceRule   EdgeFaceRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeFaceRule * CreateRuleEdgeFace
        (
            const std::vector<NXOpen::Face *> & faces /** Faces whose edges are used to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeBodyRule   EdgeBodyRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeBodyRule * CreateRuleEdgeBody
        (
            NXOpen::Body * body /** Body whose edges are uded to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeFeatureRule   EdgeFeatureRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeFeatureRule * CreateRuleEdgeFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose edges are used to create edge feature rule.*/
        );
        /** Creates selection intent rule: @link  EdgeFeatureRule   EdgeFeatureRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeSheetBoundaryRule * CreateRuleEdgeSheetBoundary
        (
            NXOpen::Body * sheet /**  Sheet body whose boundary edges are used to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeBoundaryRule   EdgeBoundaryRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeBoundaryRule * CreateRuleEdgeBoundary
        (
            const std::vector<NXOpen::Face *> & faces_of_features /** Faces whose boundary edges are used to create this rule. */
        );
        /** Creates selection intent rule: @link  EdgeIntersectRule   EdgeIntersectRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeIntersectRule * CreateRuleEdgeIntersect
        (
            const std::vector<NXOpen::Face *> & faces_of_features1 /** Faces of feature1 whose boundary edges are used to create this rule.*/,
            const std::vector<NXOpen::Face *> & faces_of_features2 /** Faces of feature2 whose boundary edges are used to create this rule.*/
        );
        /** Creates selection intent rule: @link  EdgeVertexRule   EdgeVertexRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeVertexRule * CreateRuleEdgeVertex
        (
            NXOpen::Edge * start_edge /** Start edge of edge chain. */,
            bool is_from_start /** True: the chain starts from the start
                                                  point of the start edge if end edge is provided*/
        );
        /** Creates selection intent rule: @link  EdgeVertexTangentRule   EdgeVertexTangentRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::EdgeVertexTangentRule * CreateRuleEdgeVertexTangent
        (
            NXOpen::Edge * start_edge /** Start edge of edge chain. */,
            bool is_from_start /** True: the tangent starts from the start
                                                  point of the start edge if end edge is provided*/,
            double angle_tolerance /** Angle tolerance for tangent edges */,
            bool has_same_convexity /** True: will only find tangent edges that has the same convexity.*/
        );
        /** Creates selection intent rule: @link  CurveDumbRule   CurveDumbRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::CurveDumbRule * CreateRuleCurveDumb
        (
            const std::vector<NXOpen::Curve *> & curves /** Curves which creates this rule. */
        );
        /** Creates selection intent rule: @link  CurveDumbRule   CurveDumbRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::CurveDumbRule * CreateRuleCurveDumbFromPoints
        (
            const std::vector<NXOpen::Point *> & points /** Points which creates this rule. */
        );
        /** Creates selection intent rule: @link  CurveFeatureRule   CurveFeatureRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::CurveFeatureRule * CreateRuleCurveFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  CurveFeatureChainRule   CurveFeatureChainRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::CurveFeatureChainRule * CreateRuleCurveFeatureChain
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose curves are used to create this rule.*/,
            NXOpen::Curve * seed_curve /** Seed curve */,
            NXOpen::Curve * end_curve /** End curve of curve chain. It can be null (Nothing) */,
            bool is_from_seed_start /** True: the chain starts from the start
                                                           point of the seed curve */,
            double gap_tolerance /** Gap tolerance. */
        );
        /** Creates selection intent rule: @link  CurveFeatureTangentRule   CurveFeatureTangentRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::CurveFeatureTangentRule * CreateRuleCurveFeatureTangent
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose tangent curves are used to create this rule. */,
            NXOpen::Curve * seed_curve /** Seed Curve */,
            NXOpen::Curve * end_curve /** End curve of curve chain. It can be null (Nothing)*/,
            bool is_from_seed_start /** True: the chain starts from the start
                                                 point of the seed curve */,
            double angle_tolerance /** Angle tolerance for tangent curves */,
            double gap_tolerance /** Gap tolerance for tangent curves */
        );
        /** Creates selection intent rule: @link  FollowFilletRule   FollowFilletRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FollowFilletRule * CreateRuleFollowFillet
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Features whose curves are used to create this rule.*/,
            const std::vector<NXOpen::Body *> & bodies /** Bodies whose edges are used to create this rule.*/,
            const std::vector<NXOpen::Curve *> & basic_curves /** Non-associative basic curves that are used to create this rule.*/,
            NXOpen::ICurve * seed_wireframe /** Seed wireframe */,
            NXOpen::ICurve * end_wireframe /** End wireframe. It can be null (Nothing) */,
            bool is_from_seed_start /** True: the chain starts from the start point of the seed wireframe */,
            const NXOpen::Point3d & seed_point /** Seed point. */,
            double gap_tolerance /** Gap tolerance. */,
            double angle_tolerance /** Angle tolerance. */,
            NXOpen::FollowFilletRuleType method /** Selection Intent method. */
        );
        /** Creates selection intent rule: @link  FaceDumbRule   FaceDumbRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceDumbRule * CreateRuleFaceDumb
        (
            const std::vector<NXOpen::Face *> & faces /** Feaures whose tangent curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceDumbRule   FaceDumbRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceDumbRule * CreateRuleFaceDatum
        (
            const std::vector<NXOpen::DatumPlane *> & faces /** Feaures whose tangent curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceDumbRule   FaceDumbRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceTangentRule * CreateRuleFaceTangent
        (
            NXOpen::Face * seed_face /** Feaures whose tangent curves are used to create this rule. */,
            const std::vector<NXOpen::Face *> & boundary_faces /** Feaures whose tangent curves are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceBodyRule   FaceBodyRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceBodyRule * CreateRuleFaceBody
        (
            NXOpen::Body * body /** Body faces are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceRegionRule   FaceRegionRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceRegionRule * CreateRuleFaceRegion
        (
            NXOpen::Face * seed_face /** Body faces are used to create this rule. */,
            const std::vector<NXOpen::Face *> & boundary_faces /** Feaures whose tangent faces are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceFeatureRule   FaceFeatureRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceFeatureRule * CreateRuleFaceFeature
        (
            const std::vector<NXOpen::Features::Feature *> & features /** Feaures whose faces are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceAdjacentRule   FaceAdjacentRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceAdjacentRule * CreateRuleFaceAdjacent
        (
            NXOpen::Face * seed_face /** Faces to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceConnectedBlendRule   FaceConnectedBlendRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceConnectedBlendRule * CreateRuleFaceConnectedBlend
        (
            NXOpen::Face * seed_face /** Faces to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceAllBlendRule   FaceAllBlendRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceAllBlendRule * CreateRuleFaceAllBlend
        (
            NXOpen::Body * body /** Body faces are used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceRibFacesRule   FaceRibFacesRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceRibFacesRule * CreateRuleFaceRib
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceSlotFacesRule   FaceSlotFacesRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceSlotFacesRule * CreateRuleFaceSlot
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceBossPocketFacesRule   FaceBossPocketFacesRule @endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceBossPocketFacesRule * CreateRuleFaceBossPocket
        (
            NXOpen::Face * seed /** Seed face used to create this rule. */
        );
        /** Creates selection intent rule: @link  FaceTangentRule   FaceTangentRule @endlink  where the boundaries also update with original intent @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceTangentRule * CreateRuleFaceTangentWithSmartBoundaries
        (
            NXOpen::Face * seed_face /** Seed face to create this rule. */,
            const std::vector<NXOpen::SelectionIntentRule *> & boundary_face_rules /** Rules defining the boundaries. */
        );
        /** Creates selection intent rule: @link  FaceRegionRule   FaceRegionRule @endlink  where the boundaries also update with original intent  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::FaceRegionRule * CreateRuleFaceRegionWithSmartBoundaries
        (
            NXOpen::Face * seed_face /** Seed face  to create this rule. */,
            const std::vector<NXOpen::SelectionIntentRule *> & boundary_face_rules /** Rules defining the boundaries. */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
