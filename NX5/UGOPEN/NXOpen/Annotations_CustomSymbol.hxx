#ifndef NXOpen_ANNOTATIONS_CUSTOMSYMBOL_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_CUSTOMSYMBOL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_CustomSymbol.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_CustomSymbolData.hxx>
#include <NXOpen/Annotations_LeaderBundle.hxx>
#include <NXOpen/CustomSymbols.hxx>
#include <NXOpen/Annotations_DraftingAid.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class CustomSymbol;
    }
    namespace Annotations
    {
        class CustomSymbolData;
    }
    namespace Annotations
    {
        class DraftingAid;
    }
    namespace Annotations
    {
        class LeaderBundle;
    }
    namespace Annotations
    {
        class _CustomSymbolBuilder;
        /** Represents a custom symbol */
        class NXOPENCPPEXPORT CustomSymbol : public Annotations::DraftingAid
        {
            private: friend class  _CustomSymbolBuilder;
            protected: CustomSymbol();
            /** Returns the custom symbol data  @return  Custom symbol data  <br> License requirements : None */
            public: NXOpen::Annotations::CustomSymbolData * GetSymbolData
            (
            );
            /** Sets the custom symbol data  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetSymbolData
            (
                NXOpen::Annotations::CustomSymbolData * data /** New custom symbol data */
            );
            /** Flips the custom symbol horizontally/vertically. 
                        This is only available when editing. This option is unavailable for symbols with leaders.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void FlipSymbol
            (
                NXOpen::Annotations::FlipOption flip_option /** New flip option */
            );
            /** Sets the origin, scale and angle for a custom symbol instance
                        and updates the leaders (if any) as needed.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void UpdateSymbolGeometry
            (
                const NXOpen::Point3d & origin /** New origin */,
                double scale /** New scale  */,
                double angle /** New angle  */
            );
            /** Adds leaders to the custom symbol.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void AddLeader
            (
                NXOpen::Annotations::LeaderBundle * leader /** Specifies the leaders to add */
            );
            /** Removes leader from the custom symbol.  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void RemoveLeader
            (
                int nth_leader /** Specifies which leader to remove */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
