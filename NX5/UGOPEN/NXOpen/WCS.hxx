#ifndef NXOpen_WCS_HXX_INCLUDED
#define NXOpen_WCS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     WCS.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class WCS;
    class BasePart;
    class CartesianCoordinateSystem;
    class CoordinateSystem;
    /** Represents the World Coordinate System.
     <br> 
    The origin coordinates and orientation matrix are always relative to
    the absolute coordinate system.
     <br> 
     <br> 
    In order to use any of the WCS methods, the display part must be
    the part that owns the WCS.
     <br> 
     <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT WCS
    {
        /** Specifies the X, Y, or Z axis */
        public: enum Axis
        {
            AxisXAxis = 1/** xaxis */ ,
            AxisYAxis/** yaxis */ ,
            AxisZAxis/** zaxis */ 
        };

        private: NXOpen::BasePart* m_owner;
        public: explicit WCS(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /**Sets  the origin of the WCS  <br> License requirements : None */
        public: void SetOrigin
        (
            const NXOpen::Point3d & origin /** origin */ 
        );
        /**Returns  the origin of the WCS  <br> License requirements : None */
        public: NXOpen::Point3d Origin
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Origin() Origin@endlink instead.
        @deprecated
        */
        public: NXOpen::Point3d GetOrigin
        (
        ) { return this->Origin(); }
        /** Saves the WCS.  A new cartesian coordinate system is created in the
            <b>work</b> part, even though the WCS is owned by the display part. @return  The saved coordinate system  <br> License requirements : None */
        public: NXOpen::CartesianCoordinateSystem * Save
        (
        );
        /**Returns  the CartesianCoordinateSystem associated with the WCS  <br> License requirements : None */
        public: NXOpen::CartesianCoordinateSystem * CoordinateSystem
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link CoordinateSystem() CoordinateSystem@endlink instead.
        @deprecated
        */
        public: NXOpen::CartesianCoordinateSystem * GetCoordinateSystem
        (
        ) { return this->CoordinateSystem(); }
        /** Sets the origin and orientation matrix of the WCS 
             <br> License requirements : None */
        public: void SetOriginAndMatrix
        (
            const NXOpen::Point3d & origin /** Origin relative to the absolute coordinate system */,
            const NXOpen::Matrix3x3 & matrix /** Orientation relative to the absolute coordinate system.
                                             Must be orthonormal. */
        );
        /** Rotates the WCS about the specified axis.  The angle
            is in degrees.  <br> License requirements : None */
        public: void Rotate
        (
            NXOpen::WCS::Axis rotation_axis /** Which WCS axis to rotate about (X, Y, or Z) */,
            double angle /** Angle of rotation in degrees */
        );
        /**Returns  the visibility of the WCS  <br> License requirements : None */
        public: bool Visibility
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Visibility() Visibility@endlink instead.
        @deprecated
        */
        public: bool GetVisibility
        (
        ) { return this->Visibility(); }
        /**Sets  the visibility of the WCS  <br> License requirements : None */
        public: void SetVisibility
        (
            bool is_visible /** is visible */ 
        );
        /** Changes the coordinate system of the WCS to a new
                coordinate system.  The return value is the old coordinate system. 
                 <br> This method is deprecated. Use the version of this method that takes a @link  CartesianCoordinateSystem  CartesianCoordinateSystem@endlink  as input. <br>   @return  The old coordinate system for the WCS 
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: NXOpen::CoordinateSystem * SetCoordinateSystem
        (
            NXOpen::CoordinateSystem * new_cs /** The new coordinate system for the WCS */
        );
        /** Changes the coordinate system of the WCS to a new
            coordinate system.  The return value is the old coordinate system.  @return  The old coordinate system for the WCS  <br> License requirements : None */
        public: NXOpen::CartesianCoordinateSystem * SetCoordinateSystem
        (
            NXOpen::CartesianCoordinateSystem * new_cs /** The new coordinate system for the WCS */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
