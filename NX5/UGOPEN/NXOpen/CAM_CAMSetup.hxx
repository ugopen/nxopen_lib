#ifndef NXOpen_CAM_CAMSETUP_HXX_INCLUDED
#define NXOpen_CAM_CAMSETUP_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CAMSetup.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CAMObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class CAMSetup;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class NCGroupCollection;
    }
    namespace CAM
    {
        class OperationCollection;
    }
    namespace CAM
    {
        class _CAMSetupBuilder;
        /** cam setup  <br> Use the @link Part Part@endlink  class to get or create a setup <br> */
        class NXOPENCPPEXPORT CAMSetup : public CAM::CAMObject
        {
            /** Output units used in output clsf and postprocess.*/
            public: enum OutputUnits
            {
                OutputUnitsInch/** use inch as output unit */,
                OutputUnitsMetric/** use metric as output unit */,
                OutputUnitsPostDefined/** use post defined unit as output unit */
            };

            /** Paste position.*/
            public: enum Paste
            {
                PasteBefore/** paste before */,
                PasteInside/** paste inside */,
                PasteAfter/** paste after */
            };

            /** ONT view.*/
            public: enum View
            {
                ViewProgramOrder/** program order */,
                ViewMachineMethod/** machine method */,
                ViewGeometry/** geometry */,
                ViewMachineTool/** machine tool */
            };

            private: friend class  _CAMSetupBuilder;
            protected: CAMSetup();
            /** Show 2D workpiece  <br> License requirements : cam_base ("CAM BASE") */
            public: void Show2dWorkpiece
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Show 3D workpiece  <br> License requirements : cam_base ("CAM BASE") */
            public: void Show3dWorkpiece
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Generate tool path  <br> License requirements : cam_base ("CAM BASE") */
            public: void GenerateToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Replay tool path  <br> License requirements : cam_base ("CAM BASE") */
            public: void ReplayToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** List tool path  <br> License requirements : cam_base ("CAM BASE") */
            public: void ListToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Delete tool path  <br> License requirements : cam_base ("CAM BASE") */
            public: void DeleteToolPath
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */
            );
            /** Output CLSF  <br> License requirements : cam_base ("CAM BASE") */
            public: void OutputClsf
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const NXString & clsf_format /** clsf format   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outfile_name /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits output_units /** output file unit */
            );
            /** Postprocess  <br> License requirements : cam_base ("CAM BASE") */
            public: void Postprocess
            (
                const std::vector<NXOpen::CAM::CAMObject *> & objects /** array of objects */,
                const NXString & machine_type /** machine type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & outfile_name /** output file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::CAMSetup::OutputUnits output_units /** output file unit */
            );
            /** Cut objects  <br> License requirements : cam_base ("CAM BASE") */
            public: void CutObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objects_to_be_moved /** array of objects to be moved */
            );
            /** Move objects  <br> License requirements : cam_base ("CAM BASE") */
            public: void MoveObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objects_to_be_moved /** array of objects to be moved */,
                NXOpen::CAM::CAMObject * destination_object /** the destination object */,
                NXOpen::CAM::CAMSetup::Paste paste_position /** paste inside or after the destination object */
            );
            /** Copy objects  @return  array of new objects  <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXOpen::CAM::CAMObject *> CopyObjects
            (
                NXOpen::CAM::CAMSetup::View view /** view */,
                const std::vector<NXOpen::CAM::CAMObject *> & objects_to_be_moved /** array of objects to be moved */,
                NXOpen::CAM::CAMObject * destination_object /** the destination object */,
                NXOpen::CAM::CAMSetup::Paste paste_position /** paste inside or after the destination object */
            );


            private: NXOpen::CAM::NCGroupCollection *cAMGroupCollection;
            /** Returns the NCGroupCollection instance belonging to this setup */
            public: NXOpen::CAM::NCGroupCollection *CAMGroupCollection()
            {
                return cAMGroupCollection;
            }
            private: NXOpen::CAM::OperationCollection *cAMOperationCollection;
            /** Returns the OperationCollection instance belonging to this setup */
            public: NXOpen::CAM::OperationCollection *CAMOperationCollection()
            {
                return cAMOperationCollection;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
