#ifndef NXOpen_ROUTING_HEALPATH_HXX_INCLUDED
#define NXOpen_ROUTING_HEALPATH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_HealPath.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class HealPath;
    }
    namespace Routing
    {
        /** Different heal path creation methods. */
        enum HealMethod
        {
            HealMethodDirect/** direct */ ,
            HealMethodIntersect/** intersect */ ,
            HealMethodXyz/** xyz */ ,
            HealMethodXzy/** xzy */ ,
            HealMethodYxz/** yxz */ ,
            HealMethodYzx/** yzx */ ,
            HealMethodZxy/** zxy */ ,
            HealMethodZyx/** zyx */ ,
            HealMethodMax/** max */ 
        };

        /** Different spline creation options. */
        enum SplineOptions
        {
            SplineOptionsByPoints/** by points */ ,
            SplineOptionsByPoles/** by poles */ 
        };

    }
    namespace Routing
    {
        /** Represents a @link Routing::HealPath Routing::HealPath@endlink  object which holds the data used in the creation of the heal path spline. */
        class NXOPENCPPEXPORT HealPath : public TransientObject
        {
            public: explicit HealPath(void *ptr);
            /** Get the start point. Queries from start object if input is origin.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Point3d GetStartPoint
            (
            );
            /** Set the start point.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStartPoint
            (
                const NXOpen::Point3d & start_point /** start point */ 
            );
            /** Get the end point. Queries from end object if input is origin.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Point3d GetEndPoint
            (
            );
            /** Set the end point.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetEndPoint
            (
                const NXOpen::Point3d & end_point /** end point */ 
            );
            /** Get the start vector. Queries from start object if input is zero vector.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Vector3d GetStartVector
            (
            );
            /** Set the start vector.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStartVector
            (
                const NXOpen::Vector3d & start_vector /** start vector */ 
            );
            /** Get the end vector. Queries from end object if input is zero vector.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Vector3d GetEndVector
            (
            );
            /** Set the end vector.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetEndVector
            (
                const NXOpen::Vector3d & end_vector /** end vector */ 
            );
            /** Get start parameters.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double GetStartParms
            (
            );
            /** Set start parameters.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStartParms
            (
                double start_parms /** start parms */ 
            );
            /** Get end parameters.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double GetEndParms
            (
            );
            /** Set end parameters.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetEndParms
            (
                double end_parms /** end parms */ 
            );
            /** Get start extension.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double GetStartExtension
            (
            );
            /** Set start extension.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStartExtension
            (
                double start_extension /** start extension */ 
            );
            /** Get end extension.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double GetEndExtension
            (
            );
            /** Set end extension.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetEndExtension
            (
                double end_extension /** end extension */ 
            );
            /**Returns  the reverse start end.  Reverse the direction that the start of the heal path
                        takes when the path is healed.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool ReverseStart
            (
            );
            public: void SetReverseStart
            (
                bool reverse /** reverse */ 
            );
            /**Returns  the reverse end end.  Reverse the direction tha tthe end of the heal path takes
                        when the path is healed.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool ReverseEnd
            (
            );
            public: void SetReverseEnd
            (
                bool reverse /** reverse */ 
            );
            /** Get heal method.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::HealMethod GetHealMethod
            (
            );
            /** Set heal method.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetHealMethod
            (
                NXOpen::Routing::HealMethod heal_method /** heal method */ 
            );
            /** Get spline options (by pole/by points).  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::SplineOptions GetSplineOptions
            (
            );
            /** Set spline options.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSplineOptions
            (
                NXOpen::Routing::SplineOptions spline_options /** spline options */ 
            );
            /** Get all the data associated with the heal path creation.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetAllData
            (
                NXOpen::Point3d* start_point /** start point */ ,
                NXOpen::Point3d* end_point /** end point */ ,
                NXOpen::Vector3d* start_vector /** start vector */ ,
                NXOpen::Vector3d* end_vector /** end vector */ ,
                double* start_parms /** start parms */ ,
                double* end_parms /** end parms */ ,
                double* start_extension /** start extension */ ,
                double* end_extension /** end extension */ ,
                bool* reverse_start /** reverse start */ ,
                bool* reverse_end /** reverse end */ ,
                NXOpen::Routing::HealMethod* heal_method /** heal method */ ,
                NXOpen::Routing::SplineOptions* spline_options /** spline options */ 
            );
            /** Set all the data associated with the heal path creation.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetAllData
            (
                const NXOpen::Point3d & start_point /** start point */ ,
                const NXOpen::Point3d & end_point /** end point */ ,
                const NXOpen::Vector3d & start_vector /** start vector */ ,
                const NXOpen::Vector3d & end_vector /** end vector */ ,
                double start_parm /** start parm */ ,
                double end_parm /** end parm */ ,
                double start_extension /** start extension */ ,
                double end_extension /** end extension */ ,
                bool reverse_start /** reverse start */ ,
                bool reverse_end /** reverse end */ ,
                NXOpen::Routing::HealMethod heal_method /** heal method */ ,
                NXOpen::Routing::SplineOptions spline_options /** spline options */ 
            );
            /** Frees the object from memory. After this method is called,
                    it is illegal to use the object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual ~HealPath();
        };
    }
}
#undef EXPORTLIBRARY
#endif
