#ifndef NXOpen_ROUTING_PATHSTOCKBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_PATHSTOCKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_PathStockBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_PathStockBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class PathStockBuilder;
    }
    class Builder;
    class NXObject;
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class _PathStockBuilderBuilder;
        /** Assigns stocks to segments based of users critiera and the current
                default stock.   <br> To create a new instance of this class, use @link Routing::RouteManager::CreatePathStockBuilder Routing::RouteManager::CreatePathStockBuilder@endlink  <br> */
        class NXOPENCPPEXPORT PathStockBuilder : public Builder
        {
            /** Determines how to choose which stock to assign. */
            public: enum AssignMethod
            {
                AssignMethodNone/** No Stock. */,
                AssignMethodDefaultStock/** Default Stock. */,
                AssignMethodFromStartObject/** Finds a stock based off of the
                                                                                default stock and the object
                                                                                selected by the user. */
            };

            private: friend class  _PathStockBuilderBuilder;
            protected: PathStockBuilder();
            /**Returns  the method to determine which stock to assign.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::PathStockBuilder::AssignMethod AssignStockMethod
            (
            );
            /**Sets  the method to determine which stock to assign.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetAssignStockMethod
            (
                NXOpen::Routing::PathStockBuilder::AssignMethod method /** method */ 
            );
            /**Returns  the start object to use for the 
                        @link Routing::PathStockBuilder::AssignMethodFromStartObject Routing::PathStockBuilder::AssignMethodFromStartObject@endlink  
                        method of stock assignment.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::NXObject * StartObject
            (
            );
            /**Sets  the start object to use for the 
                        @link Routing::PathStockBuilder::AssignMethodFromStartObject Routing::PathStockBuilder::AssignMethodFromStartObject@endlink  
                        method of stock assignment.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStartObject
            (
                NXOpen::NXObject * start_object /** start object */ 
            );
            /** Assigns stock using the method defined by this stock builder object.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AssignStock
            (
                const std::vector<NXOpen::Routing::ISegment *> & segments /** segments */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
