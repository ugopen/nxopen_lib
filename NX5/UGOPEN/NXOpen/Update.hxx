#ifndef NXOpen_UPDATE_HXX_INCLUDED
#define NXOpen_UPDATE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Update.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Update;
    class Session;
    class ErrorList;
    class NXObject;
    /** Provides methods for update and delete.  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
    class NXOPENCPPEXPORT Update
    {
        private: NXOpen::Session* m_owner;
        public: explicit Update(NXOpen::Session *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Adds objects to the global delete list.
            The objects in the global delete list will be deleted when the next update is performed.  
            An update can be performed through the @link Update::DoUpdate Update::DoUpdate@endlink  method. 
             <br> 
            Note:  if you are removing objects from a sketch, @link Sketch::DeleteObjects Sketch::DeleteObjects@endlink 
            should be used instead.  
             <br> 
             @return  The number of errors in the update module's
                                       error list.  If errors occurred during the execution
                                       of this method, they will be added to that error list.
                                       To obtain a list of these errors, 
                                       use @link Update::ErrorList Update::ErrorList@endlink   <br> License requirements : None */
        public: int AddToDeleteList
        (
            const std::vector<NXOpen::NXObject *> & objects /** The objects to be deleted */
        );
        /** Adds an object to the global delete list.
            The objects in the global delete list will be deleted when the next update is performed.  
            An update can be performed through the @link Update::DoUpdate Update::DoUpdate@endlink  method. 
            
             <br> 
            Note:  if you are removing objects from a sketch, @link Sketch::DeleteObjects Sketch::DeleteObjects@endlink 
            should be used instead.  
             <br> 
             @return  The number of errors in the update module's
                                       error list.  If errors occurred during the execution
                                       of this method, they will be added to that error list.
                                       To obtain a list of these errors, 
                                       use @link Update::ErrorList Update::ErrorList@endlink   <br> License requirements : None */
        public: int AddToDeleteList
        (
            NXOpen::NXObject * object /** The object to be deleted */
        );
        /** Removes objects from the global delete list.
            Note: if the object is not in the delete list, it will be ignored.  An exception
            will not be raised.  <br> License requirements : None */
        public: void RemoveFromDeleteList
        (
            const std::vector<NXOpen::NXObject *> & objects /** The objects to be removed from the delete list */
        );
        /** Returns the global delete list  @return   <br> License requirements : None */
        public: std::vector<NXOpen::NXObject *> GetDeleteList
        (
        );
        /** Clears the contents of the global delete list.  (Does not delete any of the objects on the list.)   <br> License requirements : None */
        public: void ClearDeleteList
        (
        );
        /** Updates the current session  @return  The number of errors in the update module's error list.
                                       If errors occurred during update they will be added to that
                                       error list.  To obtain a list of these errors, use
                                       @link Update::ErrorList Update::ErrorList@endlink   <br> License requirements : None */
        public: int DoUpdate
        (
            NXOpen::Session::UndoMarkId undo_mark /** If any update error occurs, the system will roll back to this
                                                                  undo mark. */
        );
        /**Returns  the list of all the errors that the Update module has encountered
            since the last time that the list was cleared.  To clear the list,
            use @link Update::ClearErrorList Update::ClearErrorList@endlink .  <br> License requirements : None */
        public: NXOpen::ErrorList * ErrorList
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link ErrorList() ErrorList@endlink instead.
        @deprecated
        */
        public: NXOpen::ErrorList * GetErrorList
        (
        ) { return this->ErrorList(); }
        /** Clears the error list. See @link Update::ErrorList Update::ErrorList@endlink   <br> License requirements : None */
        public: void ClearErrorList
        (
        );
        /**Sets  the state of the interpart delay flag.  If interpart delay is turned on, then
                updates will not be propagated beyond the work part. If off, then updates will be
                applied across all parts in the session.
             <br> License requirements : None */
        public: void SetInterpartDelay
        (
            bool delayed /** The new state of the interpart delay flag. */
        );
        /**Returns  the state of the interpart delay flag.  If interpart delay is turned on, then
                updates will not be propagated beyond the work part. If off, then updates will be
                applied across all parts in the session.
             <br> License requirements : None */
        public: bool InterpartDelay
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link InterpartDelay() InterpartDelay@endlink instead.
        @deprecated
        */
        public: bool GetInterpartDelay
        (
        ) { return this->InterpartDelay(); }
        /** Performs an interpart update. This ensures that all parts in the session are updated 
                with respect to any changes on other loaded parts. Note that this update will always
                occur regardless of the state of the interpart delay flag. See @link Update::SetInterpartDelay Update::SetInterpartDelay@endlink 
             <br> License requirements : None */
        public: void DoInterpartUpdate
        (
            NXOpen::Session::UndoMarkId undo_mark /** If any update error occurs, the system will roll back to this
                                                                  undo mark. */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
