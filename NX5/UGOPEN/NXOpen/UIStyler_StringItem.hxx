#ifndef NXOpen_UISTYLER_STRINGITEM_HXX_INCLUDED
#define NXOpen_UISTYLER_STRINGITEM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_StringItem.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class StringItem;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        /** Represents a StringItem for UI Styler. */
        class NXOPENUICPPEXPORT StringItem : public UIStyler::StylerItem
        {
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            public: explicit StringItem(void *ptr);
            /**Registers activate callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::StringItem::Activate&  activateevent /** activateevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Specifies a filename that contains a bitmap definition. The filename must contain a UBM, XPM, or BMP 
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text 
                label. When a bitmap is present, the system uses the text label as tooltip text when a user places the 
                mouse cursor over the bitmap. We recommend that you use a 16x16 bitmap for this dialog item.   <br> License requirements : None */
            public: void SetBitmap
            (
                const NXString & str_bitmap /** Filename with .ubm, .xpm, or .bmp extension that contains bitmap definition   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the string value for this dialog item. It can be the initial value that is programmatically 
                defined, or interactively entered by the user. <br> License requirements : None */
            public: void SetItemValue
            (
                const NXString & item_val /** String value */
            );
            /**Returns  the string value for this dialog item. It can be the initial value that is programmatically 
                defined, or interactively entered by the user. <br> License requirements : None */
            public: NXString ItemValue
            (
            );
            /**Specifies descriptive text to display for the dialog item. 
                It should describe the dialog item's intended use. If you specify a bitmap for this dialog item, 
                    it uses this text as tooltip text.
                 <br> License requirements : None */
            public: void SetLabel
            (
                const NXString & str_label /** String label to display on the left side of the text field   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies the sensitivity of the dialog item. When you set sensitivity to False, it grays out the 
                dialog item. This indicates that the dialog item exists but is not active. <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** TRUE if sensitive, FALSE if insensitive */
            );
            /** To get senstivity of string control @return  TRUE if sensitive, FALSE if insensitive  <br> License requirements : None */
            public: bool GetSensitivity
            (
            );
            /**Sets  the visibility of the dialog item  <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** TRUE if visible, FALSE if invisible */
            );
            /**Returns  the visibility of the dialog item  <br> License requirements : None */
            public: bool Visibility
            (
            );
            /** Indicates that this dialog item is receiving keyboard focus  <br> License requirements : None */
            public: void SetFocus
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
