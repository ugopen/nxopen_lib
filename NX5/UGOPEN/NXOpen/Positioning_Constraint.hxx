#ifndef NXOpen_POSITIONING_CONSTRAINT_HXX_INCLUDED
#define NXOpen_POSITIONING_CONSTRAINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Positioning_Constraint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Positioning
    {
        class Constraint;
    }
    class Expression;
    class NXObject;
    namespace Positioning
    {
        class ConstraintReference;
    }
    namespace Positioning
    {
        class _ConstraintBuilder;
        /**
            Constraint for use in positioning objects in NX.
            
         <br> To create a new instance of this class, use @link Positioning::Positioner::CreateConstraint Positioning::Positioner::CreateConstraint@endlink  <br> */
        class NXOPENCPPEXPORT Constraint : public NXObject
        {
            /** Specifies the type of a constraint. */
            public: enum Type
            {
                TypeUndefined/** No type. */,
                TypeTouch/** Two geometries touch. */,
                TypeConcentric/** Two geometries share a center and plane. */,
                TypeFix/** One movable object fixed. */,
                TypeDistance/** Two geometries have a specified distance between them */,
                TypeParallel/** Two geometries are parallel */,
                TypePerpendicular/** Two geometries are perpendicular */,
                TypeCenter12/** One geometry is positioned mid-way between two others */,
                TypeCenter22/** An implicit plane between two geometries of one movable object is positioned mid-way between two others */,
                TypeAngle/** Two geometries have a specified angle between them */,
                TypeFit/** Two geometries are coincident */,
                TypeBond/** A number of movable objects form a rigid group. */,
                TypeOrientAngle/** Two geometries have a specified angle between them about an axis */
            };

            /** Specifies alignment of directed geometries used in a constraint. */
            public: enum Alignment
            {
                AlignmentInferAlign/** Allow the solver to decide the alignment */,
                AlignmentCoAlign/** Directions are the same */,
                AlignmentContraAlign/** Directions are opposite */
            };

            /** Specifies the status of a constraint. */
            public: enum SolverStatus
            {
                SolverStatusNewlyCreated/** Not evaluated or suppressed since creation. */,
                SolverStatusSuppressed/** Constraint is suppressed. */,
                SolverStatusOutOfDate/** Needs evaluation. */,
                SolverStatusOverConstrained/** Conflicts with other constraints. */,
                SolverStatusNotConsistentDims/** Cannot solve with current dimension values. Model fully defined. */,
                SolverStatusNotConsistentOther/** Cannot find a solution. Model underdefined.*/,
                SolverStatusNotConsistentUnknown/** Cannot find a solution. */,
                SolverStatusBetweenFixed/** Attempt to put constraint between two fixed objects. */,
                SolverStatusNotSolved/** Not evaluated because other parts of the model are over defined or inconsistent. */,
                SolverStatusSolved/** The constraint is solved and satisfied */,
                SolverStatusCannotSolve/** The constraint has invalid geometry, and the constraint could not be passed to the solver */
            };

            private: friend class  _ConstraintBuilder;
            protected: Constraint();
            /** 
                    Gets all the @link ConstraintReference ConstraintReference@endlink s for the 
                    constraint.
                 @return  ConstraintReferences used by this constraint  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::ConstraintReference *> GetReferences
            (
            );
            /** 
                    Removes a @link ConstraintReference ConstraintReference@endlink s from the constraint. 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteConstraintReference
            (
                NXOpen::Positioning::ConstraintReference * constraint_reference /** The constraint reference to remove. A list 
                                                                                                  of references can be obtained via
                                                                                                  @link GetReferences GetReferences@endlink . */
            );
            /** 
                    Adds geometry to a constraint and sets the movable object
                    to be constrained.
                 @return  The new @link ConstraintReference ConstraintReference@endlink   <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ConstraintReference * CreateConstraintReference
            (
                NXOpen::NXObject * movable_object_id /** Object to be positioned by constraint */,
                NXOpen::NXObject * geometry /** Geometry used to define constraint */,
                bool uses_axis /** Use axis of geometry */,
                bool is_indirect /** Geometry is to be used indirectly to identify geometry in another part */
            );
            /** 
                    Adds geometry to a constraint and sets the movable object
                    to be constrained.  
                 @return  The new @link ConstraintReference ConstraintReference@endlink   <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ConstraintReference * CreateConstraintReference
            (
                NXOpen::NXObject * movable_object_id /** Object to be positioned by constraint */,
                NXOpen::NXObject * geometry /** Geometry used to define constraint */,
                bool uses_axis /** Use axis of geometry */,
                bool is_indirect /** Geometry is to be used indirectly to identify geometry in another part */,
                bool use_port_rotate /** Use rotate vector of @link Routing::Port Routing::Port@endlink . */
            );
            /**Returns  
                    the constraint type.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::Type ConstraintType
            (
            );
            /**Sets  
                    the constraint type.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConstraintType
            (
                NXOpen::Positioning::Constraint::Type constraint_type /** constraint type */ 
            );
            /**Sets  
                    the alignment behaviour for the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConstraintAlignment
            (
                NXOpen::Positioning::Constraint::Alignment alignment /** Alignment behaviour for constraint */
            );
            /**Returns  
                    the alignment behaviour for the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::Alignment ConstraintAlignment
            (
            );
            /** 
                    Reverses the constraint alignment if this is possible.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void FlipAlignment
            (
            );
            /**Sets  
                    the suppression state for the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSuppressed
            (
                bool suppressed /**  The suppression state */
            );
            /**Returns  
                    the suppression state for the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Suppressed
            (
            );
            /** The expression used for constraint - only for distance or angle  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetExpression
            (
                const NXString & expression /** Name of expression used in distance or angle constraint   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  
                    the expression used for constraint.
                    The expression will be unused unless this constraint has type
                    distance or angle.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * Expression
            (
            );
            /** 
                    Set a hint as to which alignment should be used by the
                    solver for this constraint.
                    
                    If the constraint does not solve using this alignment
                    then the hint will be ignored.                
                    
                    The hint can only have an effect when the alignment of
            [version_created("4")] 
                    the constraint, as returned by JA_CONSTRAINT_get_constraint_alignment,
                    is JA_CONSTRAINT_alignment_infer_align.
                    
                    The hint can only have an effect when the constraint has been
                    explicitly added to a @link Network Network@endlink .
                    
                    Passing in JA_CONSTRAINT_alignment_infer_align as the alignment
                    argument will have no effect.
                    
                    The hint is forgotten after an update.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAlignmentHint
            (
                NXOpen::Positioning::Constraint::Alignment alignment /** The alignment hint */
            );
            /**Sets  
                    the persistent state of the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPersistent
            (
                bool persistent /**  The persistent state */
            );
            /**Returns  
                    the persistent state of the constraint.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Persistent
            (
            );
            /**Sets  the flag marking the constraint as an "automatic" constraint.  Automatic constraints are
                    constraints created by the system, but are visible and editable by the user.  Automatic
                    constraints are automatically deleted when one of the referenced objects are deleted
                    by update.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAutomatic
            (
                bool isauto /** The automatic state */
            );
            /**Returns  the flag marking the constraint as an "automatic" constraint.  Automatic constraints are
                    constraints created by the system, but are visible and editable by the user.  Automatic
                    constraints are automatically deleted when one of the referenced objects are deleted
                    by update.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Automatic
            (
            );
            /**
                    Returns a textual conversion report this constraint from when it was converted from a
                    Mating Constraint to a Positioning Constraint. If this isn't a converted constraint
                    or there were no problems converting this constraint, then an empty string is returned.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GenerateConversionReport
            (
                std::vector<NXString> & lines /** The text lines of the conversion report */
            );
            /** 
                    Reverses the constraint direction.  This operation reverses the @link ConstraintReference::OrderConstraintReference::Order @endlink and @link ConstraintReference::SetOrderConstraintReference::SetOrder @endlink 
                    on each @link ConstraintReference ConstraintReference@endlink .
                    So "Inside" becomes "Outside", "Outside" becomes "Inside" and "Unknown" remains as it is.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ReverseDirection
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
