#ifndef NXOpen_ANNOTATIONS_LEADERBUNDLE_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LEADERBUNDLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LeaderBundle.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class LeaderBundle;
    }
    class NXObject;
    class View;
    namespace Annotations
    {
        /** Represents the data for all the leaders of an annotation */
        class NXOPENCPPEXPORT LeaderBundle : public TransientObject
        {
            public: explicit LeaderBundle(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~LeaderBundle();
            /**Returns  the leader type  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderType LeaderType
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LeaderType() LeaderType@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::LeaderType GetLeaderType
            (
            ) { return this->LeaderType(); }
            /**Sets  the leader type  <br> License requirements : None */
            public: void SetLeaderType
            (
                NXOpen::Annotations::LeaderType leader_type /** leader type */ 
            );
            /**Returns  the leader side  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderSide LeaderSide
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LeaderSide() LeaderSide@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::LeaderSide GetLeaderSide
            (
            ) { return this->LeaderSide(); }
            /**Sets  the leader side  <br> License requirements : None */
            public: void SetLeaderSide
            (
                NXOpen::Annotations::LeaderSide leader_side /** leader side */ 
            );
            /**Returns  the leader alignment  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderAlignment LeaderAlignment
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LeaderAlignment() LeaderAlignment@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::LeaderAlignment GetLeaderAlignment
            (
            ) { return this->LeaderAlignment(); }
            /**Sets  the leader alignment  <br> License requirements : None */
            public: void SetLeaderAlignment
            (
                NXOpen::Annotations::LeaderAlignment leader_alignment /** leader alignment */ 
            );
            /**Returns  the number of leaders.
                    Must not exceed
                    @link Annotations::ConstantsMaxLeaders Annotations::ConstantsMaxLeaders@endlink .
                    The only leader types that permit more than one leader are the following:
                    Plain, Around, PlainAligned, and AroundAligned.
                    PlainAligned and AroundAligned require at least one leader. <br> License requirements : None */
            public: int NumberOfLeaders
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link NumberOfLeaders() NumberOfLeaders@endlink instead.
            @deprecated
            */
            public: int GetNumberOfLeaders
            (
            ) { return this->NumberOfLeaders(); }
            /**Sets  the number of leaders.
                    Must not exceed
                    @link Annotations::ConstantsMaxLeaders Annotations::ConstantsMaxLeaders@endlink .
                    The only leader types that permit more than one leader are the following:
                    Plain, Around, PlainAligned, and AroundAligned.
                    PlainAligned and AroundAligned require at least one leader. <br> License requirements : None */
            public: void SetNumberOfLeaders
            (
                int num_leaders /** num leaders */ 
            );
            /** Sets the leader data for the nth leader  <br> License requirements : None */
            public: void SetLeaderData
            (
                int n /** The leader to set the data for */,
                NXOpen::Annotations::LeaderAttachment attachment_type /** attachment type */ ,
                NXOpen::NXObject * attachment_object /** Attachment object.  Should be NULL
                                                    if the attachment type is Screen.
                                                    Must not be NULL if the attachment type
                                                    is OnObject. */,
                NXOpen::View * attachment_view /** The view that the leader will be associated with.
                                                        Must not be NULL */,
                const NXOpen::Point3d & end_point /** The coordinates of the leader's end point.
                                                        If the attachment type is Screen, the 
                                                        coordinates will be view coordinates.
                                                        If the attachment type is OnObject, the
                                                        coordinates will be in the absolute
                                                        coordinate system of the model that owns
                                                        the attachment object */,
                double angle /** angle */ ,
                const std::vector<NXOpen::Point3d> & intermediate_points /** Intermediate points for the leader.  The number of points must not
                                exceed @link Annotations::ConstantsMaxLeaderIntermediatePoints Annotations::ConstantsMaxLeaderIntermediatePoints@endlink .
                                The points are in the view coordinate system.
                                The only leader types that permit intermediate points are the
                                following:  Plain, Around, PlainAligned, AroundAligned,
                                DatumArrow, and GbDatumArrow. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
