#ifndef NXOpen_PREFERENCES_TRACELINESVIEWPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_TRACELINESVIEWPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_TraceLinesViewPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_ITraceLinesViewPreferences.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class TraceLinesViewPreferences;
    }
    namespace Preferences
    {
        class ViewPreferences;
    }
    namespace Preferences
    {
        class ITraceLinesViewPreferences;
    }
    namespace Preferences
    {
        /** Represents set of Trace Lines View Preferences applicable to drafting views.  <br> To obtain an instance of this class, refer to @link Preferences::ViewPreferences Preferences::ViewPreferences@endlink  <br> */
        class NXOPENCPPEXPORT TraceLinesViewPreferences: public virtual Preferences::ITraceLinesViewPreferences
        {
            private: NXOpen::Preferences::ViewPreferences* m_owner;
            public: explicit TraceLinesViewPreferences(NXOpen::Preferences::ViewPreferences *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the visible color. The value should be between 1 and 216.  <br> License requirements : None */
            public: int VisibleColor
            (
            );
            /**Sets  the visible color. The value should be between 1 and 216.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetVisibleColor
            (
                int visible_color /** visible color */ 
            );
            /**Returns  the visible font  <br> License requirements : None */
            public: NXOpen::Preferences::Font VisibleFont
            (
            );
            /**Sets  the visible font  <br> License requirements : drafting ("DRAFTING") */
            public: void SetVisibleFont
            (
                NXOpen::Preferences::Font visible_font /** visible font */ 
            );
            /**Returns  the visible width  <br> License requirements : None */
            public: NXOpen::Preferences::Width VisibleWidth
            (
            );
            /**Sets  the visible width  <br> License requirements : drafting ("DRAFTING") */
            public: void SetVisibleWidth
            (
                NXOpen::Preferences::Width visible_width /** visible width */ 
            );
            /**Returns  the hidden color. The value should be between 1 and 216. <br> License requirements : None */
            public: int HiddenColor
            (
            );
            /**Sets  the hidden color. The value should be between 1 and 216. <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenColor
            (
                int hidden_color /** hidden color */ 
            );
            /**Returns  the hidden font  <br> License requirements : None */
            public: NXOpen::Preferences::Font HiddenFont
            (
            );
            /**Sets  the hidden font  <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenFont
            (
                NXOpen::Preferences::Font hidden_font /** hidden font */ 
            );
            /**Returns  the hidden width  <br> License requirements : None */
            public: NXOpen::Preferences::Width HiddenWidth
            (
            );
            /**Sets  the hidden width  <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenWidth
            (
                NXOpen::Preferences::Width hidden_width /** hidden width */ 
            );
            /**Returns  the status of create gaps  <br> License requirements : None */
            public: bool CreateGapsStatus
            (
            );
            /**Sets  the status of create gaps  <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateGapsStatus
            (
                bool create_gaps /** create gaps */ 
            );
            /**Returns  the gap size.  <br> License requirements : None */
            public: double GapSize
            (
            );
            /**Sets  the gap size.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetGapSize
            (
                double gap_size /** gap size */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
