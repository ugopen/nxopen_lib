#ifndef NXOpen_UISTYLER_TABCONTROL_HXX_INCLUDED
#define NXOpen_UISTYLER_TABCONTROL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_TabControl.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_PageSwitchData.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class TabControl;
    }
    namespace UIStyler
    {
        class PageSwitchData;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        /** Represents a Tab Control for UI Styler. */
        class NXOPENUICPPEXPORT TabControl : public UIStyler::StylerItem
        {
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> SwitchHandler;
            public: explicit TabControl(void *ptr);
            /**Registers switch callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddSwitchHandler
            (
                const NXOpen::UIStyler::TabControl::SwitchHandler&  switchevent /** switchevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Sets  the sensitivity of the dialog item  <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** TRUE if sensitive, FALSE if insensitive */
            );
            /**Returns  the sensitivity of the dialog item  <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets  the visibility of the dialog item <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** TRUE if visible, FALSE if invisible */
            );
            /**Returns  the visibility of the dialog item <br> License requirements : None */
            public: bool Visibility
            (
            );
            /**Returns  the page switch data <br> License requirements : None */
            public: NXOpen::UIStyler::PageSwitchData * PageSwitchData
            (
            );
            /** Sets focus  <br> License requirements : None */
            public: void SetFocus
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
