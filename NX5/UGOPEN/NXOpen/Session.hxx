#ifndef NXOpen_SESSION_HXX_INCLUDED
#define NXOpen_SESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Session.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BaseSession.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/PDM_PersistentSettings.hxx>
#include <NXOpen/PDM_SessionSettings.hxx>
#include <NXOpen/PartCleanup.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Session;
    namespace CAE
    {
        class AfuManager;
    }
    namespace CAE
    {
        class Post;
    }
    namespace CAE
    {
        class Result;
    }
    namespace CAM
    {
        class CAMSession;
    }
    class DisplayManager;
    class EngineeringFunction;
    class ErrorList;
    class Information;
    class LicenseManager;
    class ListingWindow;
    class LogFile;
    class MathUtils;
    class Measurement;
    namespace Options
    {
        class OptionsManager;
    }
    namespace PDM
    {
        class PersistentSettings;
    }
    namespace PDM
    {
        class SessionSettings;
    }
    class PartCleanup;
    class PartCollection;
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Routing
    {
        class DesignRuleManager;
    }
    class Sketch;
    class Update;
    namespace UserDefinedObjects
    {
        class UserDefinedClassManager;
    }
    /** Represents the NX session */
    class NXOPENCPPEXPORT Session : public BaseSession
    {
        /** Describes when an automation library should be unloaded
            from a running session. To use the enum, implement a static function
            called GetUnloadOption in your automation program which returns one
            of these options as an integer. (Note that this function must also
            have a string argument that is currently not used for anything.) NX
            will call this method once the automation program has exited to
            determine when to unload the library. */
        public: enum LibraryUnloadOption
        {
            LibraryUnloadOptionImmediately = 1/** unload the library
                        as soon as the automation program has completed */,
            LibraryUnloadOptionExplicitly/** unload the library
                        from the "Unload Shared Image" dialog */,
            LibraryUnloadOptionAtTermination/** unload the library
                        when the NX session terminates */
        };

        /** Represents a undo mark.  This is used to rollback to previous states of
             the model. */
        public: enum UndoMarkId { UndoMarkIdDummyMember }; // Used as an id
        /** Indicates the visibility of an undo mark */
        public: enum MarkVisibility
        {
            MarkVisibilityVisible/** visible */ ,
            MarkVisibilityInvisible/** invisible */ ,
            MarkVisibilityAnyVisibility/** Use only in query methods */
        };

         /** This structure contains data about an undo mark */
        public:
        struct UndoMarkData
        {
            public: /** ID of the mark */NXOpen::Session::UndoMarkId Id;
            public: /** visibility of the mark */NXOpen::Session::MarkVisibility Visibility;
            public: UndoMarkData() :
                Id((NXOpen::Session::UndoMarkId)0),
                Visibility((NXOpen::Session::MarkVisibility)0)
            {
            }
            /** Constructor for the UndoMarkData struct. */ 
            public: UndoMarkData(NXOpen::Session::UndoMarkId INIT_id /** ID of the mark */, NXOpen::Session::MarkVisibility INIT_visibility /** visibility of the mark */) :
                Id(INIT_id),
                Visibility(INIT_visibility)
            {
            }
        };

        /** Persistence policies for transient modified parts */
        public: enum TransientPartPolicy
        {
            TransientPartPolicyRetainTransience/** Retain transient status when non-retainable mods made */,
            TransientPartPolicyRemoveTransience/** Remove transient status when non-retainable mods made */
        };

        private: static Session *theSession;
        public: static Session *GetSession();
        private: friend class  _SessionBuilder;
        protected: Session();
        /** Creates an undo mark  @return  mark ID  <br> License requirements : None */
        public: NXOpen::Session::UndoMarkId SetUndoMark
        (
            NXOpen::Session::MarkVisibility mark_visibility /** mark visibility */ ,
            const NXString & name /** mark name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Undo to last visible mark  <br> License requirements : None */
        public: void UndoToLastVisibleMark
        (
        );
        /** Undo to a specified number of visible marks starting with the most
                recently created visible mark.  If the number is less than 1, then
                all visible marks are undone.  If the number is greater than the
                total number of visible marks, then all visible marks will be undone.
                Marks undone via this routine may be redone via @link Redo Redo@endlink 
                if the operations undone permit it.  <br> License requirements : None */
        public: void UndoLastNVisibleMarks
        (
            int n /** Number of visible marks to undo */,
            bool* marks_recycled /** True if undo succeeded but no marks remain. This may indicate previous marks have been recycled. */,
            bool* undo_unavailable /** True if not all requested marks were undone and the application has locked the undo system. */
        );
        /** Redo the last undo if possible. Only does one mark but may be repeated
                for all redoable marks. Only marks undone by @link UndoLastNVisibleMarks UndoLastNVisibleMarks@endlink 
                are redoable.  <br> License requirements : None */
        public: void Redo
        (
        );
        /** Undo to the specified mark  <br> License requirements : None */
        public: void UndoToMark
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of mark to undo to */,
            const NXString & mark_name /** Name of mark to undo to.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Undo to the specified mark and output status to status bar. <br> License requirements : None */
        public: void UndoToMarkWithStatus
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of mark to undo to */,
            const NXString & mark_name /** Name of mark to undo to.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes an undo mark.  If you want to delete a mark and all marks that were created after that
            mark, use @link DeleteUndoMarksUpToMark DeleteUndoMarksUpToMark@endlink  instead.  <br> License requirements : None */
        public: void DeleteUndoMark
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of mark */,
            const NXString & mark_name /** Name of mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes all undo marks up to and including the specified mark.
            If you only want to delete a mark, but do not want to delete the marks that were created after 
            that mark, use @link DeleteUndoMark DeleteUndoMark@endlink  instead.   <br> License requirements : None */
        public: void DeleteUndoMarksUpToMark
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of mark */,
            const NXString & mark_name /** Name of mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool delete_all_if_not_found /** Whether to delete all marks if the specified mark is not found */
        );
        /** Deletes all undo marks  <br> License requirements : None */
        public: void DeleteAllUndoMarks
        (
        );
        /** Sets the visibility of the specified undo mark  <br> License requirements : None */
        public: void SetUndoMarkVisibility
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of mark */,
            const NXString & mark_name /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Session::MarkVisibility visibility /** the new visibility */
        );
        /** Returns the visibility of the specified undo mark  @return  visibility of the mark  <br> License requirements : None */
        public: NXOpen::Session::MarkVisibility GetUndoMarkVisibility
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of mark */,
            const NXString & mark_name /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the name of the specified undo mark  @return  the mark's name  <br> License requirements : None */
        public: NXString GetUndoMarkName
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of the mark */
        );
        /** Sets the name of the undo mark  <br> License requirements : None */
        public: void SetUndoMarkName
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of the mark */,
            const NXString & mark_name /** Name of the mark.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns true if the specified mark exists  @return  True if and only if the mark exists  <br> License requirements : None */
        public: bool DoesUndoMarkExist
        (
            NXOpen::Session::UndoMarkId mark_id /** ID of mark */,
            const NXString & mark_name /** Name of the mark.  Used only if mark_id not found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns a list of all the undo marks with the specified visibility  @return  List of the undo marks  <br> License requirements : None */
        public: std::vector<NXOpen::Session::UndoMarkData> GetAllUndoMarks
        (
            NXOpen::Session::MarkVisibility visibility /** Used to limit the results to marks with the specified visibility */
        );
        /** Returns the newest undo mark with the specified visibility  @return  ID of the next undo mark.
                                                       This will be zero if there are no undo marks  <br> License requirements : None */
        public: NXOpen::Session::UndoMarkId GetNewestUndoMark
        (
            NXOpen::Session::MarkVisibility visibility /** the visibility mask */
        );
        /**Returns  the newest visible undo mark  <br> License requirements : None */
        public: NXOpen::Session::UndoMarkId NewestVisibleUndoMark
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link NewestVisibleUndoMark() NewestVisibleUndoMark@endlink instead.
        @deprecated
        */
        public: NXOpen::Session::UndoMarkId GetNewestVisibleUndoMark
        (
        ) { return this->NewestVisibleUndoMark(); }
        /** This method is called by the NX user interface before
            entering a task environment.  This method will make invisible all the undo 
            marks that currently exist.
            The reason for doing this is so that the user sees only the undo marks
            created in the task environment.
            The method @link Session::EndTaskEnvironment Session::EndTaskEnvironment@endlink 
            will restore the marks to the visibility that they had before this
            method was called. 
            This method should not be called if NX is already in a task environment.
             <br> License requirements : None */
        public: void BeginTaskEnvironment
        (
        );
        /** This method deletes all the undo marks that have been created since
            entering the task environment via 
            @link Session::BeginTaskEnvironment Session::BeginTaskEnvironment@endlink .  
            An exception will be thrown if this method is called
            when NX is not in a task environment.   <br> License requirements : None */
        public: void DeleteUndoMarksSetInTaskEnvironment
        (
        );
        /** This method is called by the NX user interface when leaving
            a task environment.  This method will make visible all the undo marks that
            were made invisible by @link Session::BeginTaskEnvironment Session::BeginTaskEnvironment@endlink .
            An exception will be thrown if this method is called
            when NX is not in a task environment.  
             <br> License requirements : None */
        public: void EndTaskEnvironment
        (
        );
        /**Returns  true if and only if NX is in a task environment  <br> License requirements : None */
        public: bool IsInTaskEnvironment
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link IsInTaskEnvironment() IsInTaskEnvironment@endlink instead.
        @deprecated
        */
        public: bool GetIsInTaskEnvironment
        (
        ) { return this->IsInTaskEnvironment(); }
        /**Returns  the active sketch  <br> License requirements : None */
        public: NXOpen::Sketch * ActiveSketch
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link ActiveSketch() ActiveSketch@endlink instead.
        @deprecated
        */
        public: NXOpen::Sketch * GetActiveSketch
        (
        ) { return this->ActiveSketch(); }
        /** Constructs a new PartCleanup object.  @return   <br> License requirements : None */
        public: NXOpen::PartCleanup * NewPartCleanup
        (
        );
        /** Creates a new error list.
            Warning: this method may be removed in a future release  @return   <br> License requirements : None */
        public: NXOpen::ErrorList * NewErrorList
        (
        );
        /** Creates a new database session option controller  @return   <br> License requirements : None */
        public: NXOpen::PDM::SessionSettings * NewDatabaseSessionOptions
        (
        );
        /** Creates a new database persistent option controller  @return   <br> License requirements : None */
        public: NXOpen::PDM::PersistentSettings * NewDatabasePersistentOptions
        (
        );
        /**Returns  the full path to the journal that is currently being
            executed  <br> License requirements : None */
        public: NXString ExecutingJournal
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link ExecutingJournal() ExecutingJournal@endlink instead.
        @deprecated
        */
        public: NXString GetExecutingJournal
        (
        ) { return this->ExecutingJournal(); }
        /** Create the CAM session  <br> License requirements : None */
        public: void CreateCamSession
        (
        );
        /** Check if the CAM session is initialized  @return   <br> License requirements : None */
        public: bool IsCamSessionInitialized
        (
        );
        /**Sets  the persistence policy for transient parts in the session  <br> License requirements : None */
        public: void SetTransientPartPersistencePolicy
        (
            NXOpen::Session::TransientPartPolicy policy /** policy */ 
        );
        /**Returns  the persistence policy for transient parts in the session  <br> License requirements : None */
        public: NXOpen::Session::TransientPartPolicy TransientPartPersistencePolicy
        (
        );
        /** Gets a named property of the object. The property names are based upon the 
                properties provided by the NXOpen API. 
              @return  The value of the property, expressed as a string  <br> License requirements : None */
        public: NXString GetProperty
        (
            NXOpen::TaggedObject * object /** The object to query */,
            const NXString & property_name /** The name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Sets a named property of the object. The property names are based upon the 
                properties provided by the NXOpen API. 
              <br> License requirements : None */
        public: void SetProperty
        (
            NXOpen::TaggedObject * object /** The object to query */,
            const NXString & property_name /** The name of the property   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & value /** The value of the property, expressed as a string */
        );
        /** Gets a list of the named properties of this object  @return  array of property names  <br> License requirements : None */
        public: std::vector<NXString> GetNamedProperties
        (
            NXOpen::TaggedObject * object /** The object to query */
        );
        /** Gets a list of the classes defined in the current session  @return  array of class names  <br> License requirements : None */
        public: std::vector<NXString> GetClasses
        (
        );
        /** Gets a list of the named properties of a named class  <br> License requirements : None */
        public: void GetNamedProperties
        (
            const NXString & class_name /** The name of the class to query   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & properties /** array of property names */,
            std::vector<NXString> & property_types /** type name of corresponding property */
        );
        /** Deletes all @link Facet::FacetedFace Facet::FacetedFace@endlink  and @link Facet::FacetedEdge Facet::FacetedEdge@endlink  objects 
                in the current session  <br> License requirements : None */
        public: void CleanUpFacetedFacesAndEdges
        (
        );


        private: NXOpen::CAE::AfuManager *afuManager;
        /** Returns the @link CAE::AfuManager CAE::AfuManager@endlink  belonging to this session */
        public: NXOpen::CAE::AfuManager *AfuManager()
        {
            return afuManager;
        }
        private: NXOpen::CAE::Result *result;
        /** Returns the @link CAE::Result CAE::Result@endlink  belonging to this session */
        public: NXOpen::CAE::Result *Result()
        {
            return result;
        }
        private: NXOpen::CAE::Post *post;
        /** Returns the @link CAE::Post CAE::Post@endlink  belonging to this session */
        public: NXOpen::CAE::Post *Post()
        {
            return post;
        }
        private: NXOpen::Update *updateManager;
        /** Returns the @link Update Update@endlink  belonging to this session */
        public: NXOpen::Update *UpdateManager()
        {
            return updateManager;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link UpdateManager() UpdateManager@endlink instead.
        @deprecated
        */
        public: NXOpen::Update *GetUpdateManager() { return UpdateManager(); }
        private: NXOpen::PartCollection *parts;
        /** Returns the @link PartCollection PartCollection@endlink  belonging to this session */
        public: NXOpen::PartCollection *Parts()
        {
            return parts;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Parts() Parts@endlink instead.
        @deprecated
        */
        public: NXOpen::PartCollection *GetParts() { return Parts(); }
        private: NXOpen::ListingWindow *listingWindow;
        /** Returns the @link ListingWindow ListingWindow@endlink  belonging to this session */
        public: NXOpen::ListingWindow *ListingWindow()
        {
            return listingWindow;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link ListingWindow() ListingWindow@endlink instead.
        @deprecated
        */
        public: NXOpen::ListingWindow *GetListingWindow() { return ListingWindow(); }
        private: NXOpen::DisplayManager *displayManager;
        /** Returns the @link DisplayManager DisplayManager@endlink  belonging to this session */
        public: NXOpen::DisplayManager *DisplayManager()
        {
            return displayManager;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link DisplayManager() DisplayManager@endlink instead.
        @deprecated
        */
        public: NXOpen::DisplayManager *GetDisplayManager() { return DisplayManager(); }
        private: NXOpen::MathUtils *mathUtils;
        /** Returns the @link MathUtils MathUtils@endlink  instance belonging to this session */
        public: NXOpen::MathUtils *MathUtils()
        {
            return mathUtils;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link MathUtils() MathUtils@endlink instead.
        @deprecated
        */
        public: NXOpen::MathUtils *GetMathUtils() { return MathUtils(); }
        private: NXOpen::EngineeringFunction *engineeringFunction;
        /** Returns the @link EngineeringFunction EngineeringFunction@endlink  instance belonging to this session */
        public: NXOpen::EngineeringFunction *EngineeringFunction()
        {
            return engineeringFunction;
        }
        private: NXOpen::Measurement *measurement;
        /** Returns the @link Measurement Measurement@endlink  instance belonging to this session */
        public: NXOpen::Measurement *Measurement()
        {
            return measurement;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Measurement() Measurement@endlink instead.
        @deprecated
        */
        public: NXOpen::Measurement *GetMeasurement() { return Measurement(); }
        private: NXOpen::Information *information;
        /** Returns the @link Information Information@endlink  instance belonging to this session */
        public: NXOpen::Information *Information()
        {
            return information;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Information() Information@endlink instead.
        @deprecated
        */
        public: NXOpen::Information *GetInformation() { return Information(); }
        private: NXOpen::Preferences::SessionPreferences *preferences;
        /** Returns the preferences instance for the session */
        public: NXOpen::Preferences::SessionPreferences *Preferences()
        {
            return preferences;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Preferences() Preferences@endlink instead.
        @deprecated
        */
        public: NXOpen::Preferences::SessionPreferences *GetPreferences() { return Preferences(); }
        private: NXOpen::LogFile *logFile;
        /** Returns the log file instance for this session */
        public: NXOpen::LogFile *LogFile()
        {
            return logFile;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link LogFile() LogFile@endlink instead.
        @deprecated
        */
        public: NXOpen::LogFile *GetLogFile() { return LogFile(); }
        private: NXOpen::CAM::CAMSession *cAMSession;
        /** Returns the CAM session */
        public: NXOpen::CAM::CAMSession *CAMSession()
        {
            return cAMSession;
        }
        private: NXOpen::Routing::DesignRuleManager *designRuleManager;
        /** Returns the DesignRule */
        public: NXOpen::Routing::DesignRuleManager *DesignRuleManager()
        {
            return designRuleManager;
        }
        private: NXOpen::Options::OptionsManager *optionsManager;
        /** Returns the @link Options::OptionsManager Options::OptionsManager@endlink  instance belonging to this session */
        public: NXOpen::Options::OptionsManager *OptionsManager()
        {
            return optionsManager;
        }
        private: NXOpen::LicenseManager *licenseManager;
        /** Returns the @link LicenseManager LicenseManager@endlink  belonging to this session */
        public: NXOpen::LicenseManager *LicenseManager()
        {
            return licenseManager;
        }
        private: NXOpen::UserDefinedObjects::UserDefinedClassManager *userDefinedClassManager;
        /** Returns the @link UserDefinedClassManager UserDefinedClassManager@endlink  belonging to this session */
        public: NXOpen::UserDefinedObjects::UserDefinedClassManager *UserDefinedClassManager()
        {
            return userDefinedClassManager;
        }
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
