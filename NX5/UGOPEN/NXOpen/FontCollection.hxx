#ifndef NXOpen_FONTCOLLECTION_HXX_INCLUDED
#define NXOpen_FONTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     FontCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class FontCollection;
    class BasePart;
    /** Represents a collection of typographical fonts (for example, Arial, OldEnglish)  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT FontCollection
    {
        private: NXOpen::BasePart* m_owner;
        public: explicit FontCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Adds a font to the part  @return  Integer ID that the method assigns to the font  <br> License requirements : None */
        public: int AddFont
        (
            const NXString & font_name /** Font name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns the name for the font that has the specified integer ID  @return  The font's name  <br> License requirements : None */
        public: NXString GetFontName
        (
            int font_index /** The ID for the font */
        );
        /** Finds out whether the specified ID is associated with a font  @return  True iff the font exists  <br> License requirements : None */
        public: bool DoesFontExist
        (
            int font_index /** ID of the font */
        );
        /** Returns the number of fonts in the part  @return   <br> License requirements : None */
        public: int GetLength
        (
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
