#ifndef NXOpen_UISTYLER_DIALOGITEM_HXX_INCLUDED
#define NXOpen_UISTYLER_DIALOGITEM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_DialogItem.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/SelectionHandle.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_FileOperationData.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class DialogItem;
    }
    class SelectionHandle;
    namespace UIStyler
    {
        class FileOperationData;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        /** Represents a DialogItem for UI Styler. */
        class NXOPENUICPPEXPORT DialogItem : public UIStyler::StylerItem
        {
            /** Describes dialog item index */
            public: enum DialogItemIndex
            {
                DialogItemIndexOk/** Ok index */,
                DialogItemIndexApply/** Apply index */,
                DialogItemIndexBack/** Back index */,
                DialogItemIndexCancel/** Cancel index */
            };

            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Construct;
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Destruct;
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Okay;
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Apply;
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Back;
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Cancel;
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> FileOperation;
            public: explicit DialogItem(void *ptr);
            /**Registers construct callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddConstructHandler
            (
                const NXOpen::UIStyler::DialogItem::Construct&  constructevent /** constructevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Registers destruct callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddDestructHandler
            (
                const NXOpen::UIStyler::DialogItem::Destruct&  destructevent /** destructevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Registers ok callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddOkayHandler
            (
                const NXOpen::UIStyler::DialogItem::Okay&  okayevent /** okayevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Registers apply callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddApplyHandler
            (
                const NXOpen::UIStyler::DialogItem::Apply&  applyevent /** applyevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Registers back callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddBackHandler
            (
                const NXOpen::UIStyler::DialogItem::Back&  backevent /** backevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Registers cancel callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddCancelHandler
            (
                const NXOpen::UIStyler::DialogItem::Cancel&  cancelevent /** cancelevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Registers file operation callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddFileOperationHandler
            (
                const NXOpen::UIStyler::DialogItem::FileOperation&  fileoperationevent /** fileoperationevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Specifies a string to display on the top border of the dialog  <br> License requirements : None */
            public: void SetTitle
            (
                const NXString & str_label /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies the sensitivity of the dialog.  <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /**TRUE if sensitive, FALSE if insensitive */
            );
            /** Specifies the sensitivity of the navigation buttons at the bottom of the dialog. If you set the 
                UF_STYLER_BACK_INDEX button to insensitive at creation time, the system does not show the BACK button; 
                Changing the button's sensitivity while the dialog displays does not show the Back button. 
                 <br> License requirements : None */
            public: void SetNavigationSensitivity
            (
                NXOpen::UIStyler::DialogItem::DialogItemIndex sub_item_index /** Sub item index */,
                bool type /** TRUE if sensitive, FALSE if insensitive */
            );
            /**Specifies wether dialog is allowed to resize  <br> License requirements : None */
            public: void SetResize
            (
                bool type /**TRUE to allow dialog to resize; FALSE to freeze the dialog size*/
            );
            /**Specifies the pixel width for the dialog. You can only set this attribute when the 
                Dialog Resize attribute is set to TRUE. You cannot enter a negative number.  <br> License requirements : None */
            public: void SetWidth
            (
                int width /** width */ 
            );
            /** Gets the selection handle for a given dialog item @return Selection handle  <br> License requirements : None */
            public: NXOpen::SelectionHandle * GetSelectionHandle
            (
            );
            /**Returns  the file operation data  <br> License requirements : None */
            public: NXOpen::UIStyler::FileOperationData * FileOperationData
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
