#ifndef NXOpen_DEBUGSESSION_HXX_INCLUDED
#define NXOpen_DEBUGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DebugSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CallbackTest.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Features_SelectionTestBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    class DebugSession;
    class CallbackTest;
    class ErrorList;
    namespace Features
    {
        class Joe;
    }
    namespace Features
    {
        class JoeBuilder;
    }
    namespace Features
    {
        class SelectionTest;
    }
    namespace Features
    {
        class SelectionTestBuilder;
    }
    class NXObject;
    class Part;
    class _DebugSessionBuilder;
    /** Represents a class that is used for NX testing.  This class should not
    be made available to customers */
    class NXOPENDEBUGSESSIONCPPEXPORT DebugSession : public TaggedObject
    {
        private: static DebugSession *theDebugSession;
        public: static DebugSession *GetDebugSession();
        private: friend class  _DebugSessionBuilder;
        protected: DebugSession();
        /** Does all world checks  <br> License requirements : None */
        public: void DoAllWorldChecks
        (
        );
        /** Used for ErrorList unit testing.
            Adds an error to the ErrorList  <br> License requirements : None */
        public: void AddErrorToList
        (
            NXOpen::ErrorList * error_list /** error list */ ,
            NXOpen::NXObject * failing_object /** failing object */ ,
            const NXString & failing_object_description /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int error_code /** error code */ ,
            const NXString & error_description /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Used for ErrorList unit testing.
            Performs an internal test of the ErrorList module  <br> License requirements : None */
        public: void ErrorListModuleTest
        (
        );
        /** Set a Runtime Debug Token to true or false <br> License requirements : None */
        public: void RdebugSetFlag
        (
            const NXString & name /** Runtime Debug Token   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int value /** value for Runtime Debug Token */
        );
        /** Creates a Joe builder  @return  JoeBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::JoeBuilder * CreateJoeBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::Joe * joe /** @link Features::Joe Features::Joe@endlink  to be edited */
        );
        /** Creates a selection test builder  @return  new SelectionTest builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Features::SelectionTestBuilder * CreateSelectionTestBuilder
        (
            NXOpen::Part * part /** the part that will own the feature */,
            NXOpen::Features::SelectionTest * selection_test /** @link SelectionTest SelectionTest@endlink 
                                                              to be edited, if NULL  then create a new one */
        );
        /** Creates a CallbackTest  @return  CallbackTest object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::CallbackTest * CreateCallbackTest
        (
        );
        /** Feature Publishing Validation  <br> License requirements : None */
        public: void SetFeatPubVal
        (
            bool feat_val /** Feature Publishing Validation On/Off */
        );
    };
}
#undef EXPORTLIBRARY
#endif
