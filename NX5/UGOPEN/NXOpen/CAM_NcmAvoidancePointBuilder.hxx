#ifndef NXOpen_CAM_NCMAVOIDANCEPOINTBUILDER_HXX_INCLUDED
#define NXOpen_CAM_NCMAVOIDANCEPOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_NcmAvoidancePointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class NcmAvoidancePointBuilder;
    }
    class Builder;
    class NXObject;
    class Point;
    namespace CAM
    {
        class _NcmAvoidancePointBuilderBuilder;
        /**
            Represents a @link CAM::NcmClearanceBuilder CAM::NcmClearanceBuilder@endlink 
             <br> This builder cannot be instantiated separately. <br> */
        class NXOPENCPPEXPORT NcmAvoidancePointBuilder : public Builder
        {
            /** the types available for clearance */
            public: enum PointStates
            {
                PointStatesNone/** Avoidance point inactive */,
                PointStatesUseOther/** use from point (only for GoHome point) */,
                PointStatesNoPoint/** use no point (only for GoHome point) */,
                PointStatesUsePoint/** use specified point */
            };

            private: friend class  _NcmAvoidancePointBuilderBuilder;
            protected: NcmAvoidancePointBuilder();
            /**Returns  the avoidance point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the avoidance point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPoint
            (
                NXOpen::Point * newValue /** newvalue */ 
            );
            /**Returns  the point status  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NcmAvoidancePointBuilder::PointStates PointStatus
            (
            );
            /**Sets  the point status  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPointStatus
            (
                NXOpen::CAM::NcmAvoidancePointBuilder::PointStates newValue /** newvalue */ 
            );
            /**Returns  the avoidance tool axis  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * ToolAxis
            (
            );
            /**Sets  the avoidance tool axis  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolAxis
            (
                NXOpen::NXObject * newValue /** newvalue */ 
            );
            /**Returns  the tool axis status  <br> License requirements : cam_base ("CAM BASE") */
            public: int ToolAxisStatus
            (
            );
            /**Sets  the tool axis status  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolAxisStatus
            (
                int newValue /** newvalue */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
