#ifndef NXOpen_FEATURES_EXTRUDE_HXX_INCLUDED
#define NXOpen_FEATURES_EXTRUDE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Extrude.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_BodyFeature.hxx>
#include <NXOpen/Features_ExtrudeLimitData.hxx>
#include <NXOpen/Features_ExtrudeOffsetData.hxx>
#include <NXOpen/Features_ExtrudeTaperData.hxx>
#include <NXOpen/Features_Feature.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class Extrude;
    }
    class Body;
    class Direction;
    namespace Features
    {
        class BodyFeature;
    }
    namespace Features
    {
        class ExtrudeLimitData;
    }
    namespace Features
    {
        class ExtrudeOffsetData;
    }
    namespace Features
    {
        class ExtrudeTaperData;
    }
    class Section;
    namespace Features
    {
        class _ExtrudeBuilder;
        /** Represents an extrude feature */
        class NXOPENCPPEXPORT Extrude : public Features::BodyFeature
        {
            private: friend class  _ExtrudeBuilder;
            protected: Extrude();
            /**Returns  the distance tolerance
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double DistanceTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DistanceTolerance() DistanceTolerance@endlink instead.
            @deprecated
            */
            public: double GetDistanceTolerance
            (
            ) { return this->DistanceTolerance(); }
            /**Returns  the chaining tolerance
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double ChainingTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ChainingTolerance() ChainingTolerance@endlink instead.
            @deprecated
            */
            public: double GetChainingTolerance
            (
            ) { return this->ChainingTolerance(); }
            /**Returns  the planar tolerance
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double PlanarTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link PlanarTolerance() PlanarTolerance@endlink instead.
            @deprecated
            */
            public: double GetPlanarTolerance
            (
            ) { return this->PlanarTolerance(); }
            /**Returns  the angle tolerance
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double AngleTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AngleTolerance() AngleTolerance@endlink instead.
            @deprecated
            */
            public: double GetAngleTolerance
            (
            ) { return this->AngleTolerance(); }
            /** Returns section of the extrude @return  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * GetSection
            (
            );
            /** Returns direction of the extrude @return  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Direction * GetDirection
            (
            );
            /** Returns @link ExtrudeLimitData ExtrudeLimitData@endlink  of extrude feature  @return  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeLimitData * GetLimitData
            (
            );
            /** Returns @link ExtrudeOffsetData ExtrudeOffsetData@endlink  of extrude feature  @return  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeOffsetData * GetOffsetData
            (
            );
            /** Returns @link ExtrudeTaperData ExtrudeTaperData@endlink  of extrude feature  @return  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeTaperData * GetTaperData
            (
            );
            /** Get the boolean operation for creating the extrude and the boolean operation target body  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void GetBooleanOperationAndTarget
            (
                NXOpen::Features::Feature::BooleanType* boolean_operation /** Type of boolean operation. */,
                NXOpen::Body ** target_body /** Target body for boolean operation. Returns null (Nothing) for a boolean create operation.  */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
