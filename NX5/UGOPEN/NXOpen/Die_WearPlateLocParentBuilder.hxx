#ifndef NXOpen_DIE_WEARPLATELOCPARENTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_WEARPLATELOCPARENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_WearPlateLocParentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class WearPlateLocParentBuilder;
    }
    namespace Die
    {
        class WearPlateLocChildBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Die
    {
        class _WearPlateLocParentBuilderBuilder;
        /** Represents a Die Wear Plate Locator sub feature.  <br> This sub feature is created via the main feature builder. <br> */
        class NXOPENCPPEXPORT WearPlateLocParentBuilder : public Features::FeatureBuilder
        {
            /** Settings for the positioning of the locator relative to the wear plate. */
            public: enum PositionType
            {
                PositionTypeLeft/** Position locator to the left of the wear plate. */,
                PositionTypeRight/** Position locator to the right of the wear plate. */,
                PositionTypeBoth/** Position locator on both sides of the wear plate. */,
                PositionTypeNeither/** No locators. */
            };

            private: friend class  _WearPlateLocParentBuilderBuilder;
            protected: WearPlateLocParentBuilder();
            /**Sets  the reverse normal setting of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReverseNormal
            (
                int reverse_normal /** reverse normal */ 
            );
            /**Returns  the reverse normal setting of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: int ReverseNormal
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetWearPlateWidth
            (
                const NXString & width /** Expression value   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the wear plate width of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * WearPlateWidth
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetWearPlateLength
            (
                const NXString & length /** Expression value   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the wear plate length of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * WearPlateLength
            (
            );
            /**Sets  the locator position of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLocatorPosition
            (
                NXOpen::Die::WearPlateLocParentBuilder::PositionType position /** position */ 
            );
            /**Returns  the locator position of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::WearPlateLocParentBuilder::PositionType LocatorPosition
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLocatorWidth
            (
                const NXString & width /** Expression value   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the locator width of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * LocatorWidth
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetLocatorDepth
            (
                const NXString & depth /** Expression value   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the locator depth of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * LocatorDepth
            (
            );
            /**  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetRibSupportWidth
            (
                const NXString & rib_support_width /** Expression value   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the wear plate rib support width of die wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Expression * RibSupportWidth
            (
            );
            /** Gets the pad attributes, note existance of attributes depends on usage in
                    main feature  <br> License requirements : ug_die_design ("Die Design") */
            public: void GetPadAttributes
            (
                NXString* title /** title for attribute */,
                NXString* value /** value of attribute */,
                int* color /** color of pad faces */
            );
            /** Sets the pad attributes, note existance of attributes depends on usage in
                    main feature  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPadAttributes
            (
                const NXString & title /** title for attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** value of attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** color of pad faces */
            );
            /** Gets the relief attributes  <br> License requirements : ug_die_design ("Die Design") */
            public: void GetReliefAttributes
            (
                NXString* title /** title for attribute */,
                NXString* value /** value of attribute */,
                int* color /** color of relief faces */
            );
            /** Sets the relief attributes  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetReliefAttributes
            (
                const NXString & title /** title for attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** value of attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** color of relief faces */
            );
            /** Gets the recess attributes  <br> License requirements : ug_die_design ("Die Design") */
            public: void GetRecessAttributes
            (
                NXString* title /** title for attribute */,
                NXString* value /** value of attribute */,
                int* color /** color of recess faces */
            );
            /** Sets the recess attributes  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetRecessAttributes
            (
                const NXString & title /** title for attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** value of attribute   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int color /** color of recess faces */
            );
            /**Sets  the design status of wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDesignStatus
            (
                bool design_status /** design status */ 
            );
            /**Returns  the design status of wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DesignStatus
            (
            );
            /**Returns  the build status of wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBuildStatusOption BuildStatus
            (
            );
            /**Sets  the display status of wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayStatus
            (
                bool display_status /** display status */ 
            );
            /**Returns  the display status of wear plate and locators  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayStatus
            (
            );
            /** Creates a child wear plate and locator  @return   <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::WearPlateLocChildBuilder * CreateChild
            (
            );
            /** Deletes a child wear plate and locator  <br> License requirements : ug_die_design ("Die Design") */
            public: void DeleteChild
            (
                NXOpen::Die::WearPlateLocChildBuilder * diewearplatelocchild /** diewearplatelocchild */ 
            );
            /** Outputs the children  @return  children  <br> License requirements : ug_die_design ("Die Design") */
            public: std::vector<NXOpen::Die::WearPlateLocChildBuilder *> GetChildren
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
