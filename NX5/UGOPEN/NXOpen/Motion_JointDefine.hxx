#ifndef NXOpen_MOTION_JOINTDEFINE_HXX_INCLUDED
#define NXOpen_MOTION_JOINTDEFINE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_JointDefine.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class JointDefine;
    }
    class CoordinateSystem;
    class Direction;
    namespace Motion
    {
        class Link;
    }
    class NXMatrix;
    class Point;
    namespace Motion
    {
        class _JointDefineBuilder;
        /** Represents a joint define object */
        class NXOPENCPPEXPORT JointDefine : public TaggedObject
        {
            /** Joint define type */
            public: enum Type
            {
                TypeRevolute/** This joint type is a single axis rotation.
                	                                                    This joint removes 5 degrees of freedom.
                	                                                    The origins of csys_1 and csys_2 are
                	                                                    identical and the z axes of csys_1 and
                                                                        csys_2 are colinear and codirected. */,
                TypeSlider/** This joint type is a single translation.
                	                                                    This joint removes 5 degrees of freedom.
                	                                                    The orientations of csys_1 and csys_2 are
                	                                                    identical and the z axes are colinear and
                                                                        codirected. */,
                TypeCylindrical/** This joint type is a single rotation and
                	                                                    a single translation.  This joint removes
                	                                                    4 degrees of freedom.  The z axes of csys_1
                	                                                    and csys_2 are colinear and codirected  */,
                TypeScrew/** This joint type is used to couple the 
                	                                                    rotation and translation of a cylindrical
                	                                                    joint to remove one degree of freedom.  
                	                                                    It should be created on the same pair
                	                                                    of links as the cylindrical joint.  If 
                	                                                    the screw joint needs to be driven, it
                	                                                    may be coupled with a revolution joint and 
                	                                                    a slider joint instead. */,
                TypeUniversal/** This joint type allows two rotations.  It
                                                                            removes 4 degrees of freedom.  The origins
                                                                            of csys_1 and csys_2 are identical.  The
                                                                            rotations about the x axis of csys_2 are
                                                                            equal and opposite to the rotations about
                                                                            the x axis of csys_1. */,
                TypeSpherical/** This joint type allows three rotations.
                	                                                    It removes 3 degrees of freedom.  The
                	                                                    origins of csys_1 and csys_2 are
                	                                                    identical */,
                TypePlanar/** This joint type allows a single rotation
                	                                                    and two translations.  It removes three
                	                                                    degrees of freedom.  The z axes of csys_1
                	                                                    and csys_2 are parallel and codirected.
                	                                                    The origins of csys_1 and csys_2 are in
                	                                                    a common x-y plane. */,
                TypeFixed/** This Joint fixes a link or weld two links, 
                	                                                    It removes 6 degrees of freedom */,
                TypeConstantvelocity/** This joint type allows 2 rotation DOFs,
                                                                            rotation about both z axes of the joint markers,
                                                                            Rotation about the second marker's z-axis is equal 
                                                                            and opposite to the first marker's rotation. 
                                                                            A constant velocity joint is similar to a universal joint, 
                                                                            but the exit angle of a constant velocity joint is equal to 
                                                                            the entry angle.The origins of csys_1 and csys_2
                                                                            are identical. */,
                TypeAtpoint/** This joint type allows 3 DOF: Markers are 
                                                                            always coincident, and only rotational motion 
                                                                            is allowed. */,
                TypeInline/** This joint type indicates a four-degree-of-freedom (3R + 1T DOF) 
                                                                            primitive that allows one translational and three rotational
                                                                            motions of one part with respect to another.One part so that
                                                                            it can only move along a straight line defined on a second part.
                                                                            The location of the inline joint on the first part must remain 
                                                                            on the z-axis of the second part. */,
                TypeInplane/** One part so that it can only move in a plane of a second part.
                                                                           The origin of the inplane joint on the first part must remain 
                                                                           in the xy plane of the second part.Indicates a five-degree-of-freedom 
                                                                           (3R + 2T DOF) primitive that allows both translational and rotational
                                                                           motion of one part with respect to another.For an inplane primitive, 
                                                                           ADAMS/Solver imposes one translational constraint, which confines the
                                                                           translational motion of the I marker to the x-y plane of the J marker. */,
                TypeOrientation/** The coordinate system of one part so that it cannot rotate with respect 
                                                                            to a second part. The axes of the coordinate systems must maintain the
                                                                            same orientation. The location of the origins of the coordinate systems
                                                                            does not matter.Indicates a three-degree-of-freedom (3T DOF) primitive 
                                                                            that allows only translational motion of one part with respect to another .
                                                                            For an orientation primitive, Solver imposes three rotational constraints to 
                                                                            keep the orientation of the I marker identical to the orientation of the J marker. */,
                TypeParallel/** This joint type indicates a four-degree-of-freedom(1R + 3T DOF) primitive that allows 
                                                                            both translational and rotational motion of one part with respect to another .
                                                                            For a parallel axes primitive, Solver imposes two rotational constraints so
                                                                            that the z-axis of the I marker stays parallel to the z-axis of the J marker. 
                                                                            This primitive permits relative rotation about the common z-axis of I and J 
                                                                            and permits all relative displacements. */,
                TypePerpendicular/** This joint type indicates a five-degree-of-freedom (2R +3T DOF) primitive that allows both 
                                                                            translational and rotational motion of one part with respect to Another.
                                                                            For a perpendicular primitive, Solver imposes a single rotational constraint 
                                                                            on the I and the J markers so that their z-axes remain perpendicular. This 
                                                                            allows relative rotations about either z-axis, but does not allow any relative 
                                                                            rotation in the direction perpendicular to both z-axes. */
            };

            private: friend class  _JointDefineBuilder;
            protected: JointDefine();
            /**Returns  the joint type  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::JointDefine::Type JointType
            (
            );
            /**Sets  the joint type  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetJointType
            (
                NXOpen::Motion::JointDefine::Type joint_type /** joint type */ 
            );
            /**Returns  the display scale  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double DisplayScale
            (
            );
            /**Sets  the display scale  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDisplayScale
            (
                double display_scale /** display scale */ 
            );
            /**Returns   the joint name  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets   the joint name  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & joint_name /** joint name */ 
            );
            /**Returns  the option of snap links  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool SnapLinks
            (
            );
            /**Sets  the option of snap links  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSnapLinks
            (
                bool snap_links /** snap links */ 
            );
            /**Returns  the first link object  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::Link * FirstLink
            (
            );
            /**Sets  the first link object  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstLink
            (
                NXOpen::Motion::Link * link1 /** link1 */ 
            );
            /**Returns  the origin of first link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Point * FirstOrigin
            (
            );
            /**Sets  the origin of first link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstOrigin
            (
                NXOpen::Point * origin1 /** origin1 */ 
            );
            /**Returns  the direction of first link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Direction * FirstVector
            (
            );
            /**Sets  the direction of first link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstVector
            (
                NXOpen::Direction * vector1 /** vector1 */ 
            );
            /**Returns  the matrix of first link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::NXMatrix * FirstMatrix
            (
            );
            /**Sets  the matrix of first link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstMatrix
            (
                NXOpen::NXMatrix * matrix1 /** matrix1 */ 
            );
            /**Returns  the csys of first link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::CoordinateSystem * FirstCsys
            (
            );
            /**Sets  the csys of first link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstCsys
            (
                NXOpen::CoordinateSystem * csys1 /** csys1 */ 
            );
            /**Returns  the second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::Link * SecondLink
            (
            );
            /**Sets  the second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondLink
            (
                NXOpen::Motion::Link * link2 /** link2 */ 
            );
            /**Returns  the origin of second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Point * SecondOrigin
            (
            );
            /**Sets  the origin of second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondOrigin
            (
                NXOpen::Point * origin2 /** origin2 */ 
            );
            /**Returns  the direction of second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Direction * SecondVector
            (
            );
            /**Sets  the direction of second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondVector
            (
                NXOpen::Direction * vector2 /** vector2 */ 
            );
            /**Returns  the matrix of second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::NXMatrix * SecondMatrix
            (
            );
            /**Sets  the matrix of second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondMatrix
            (
                NXOpen::NXMatrix * matrix2 /** matrix2 */ 
            );
            /**Returns  the csys of second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::CoordinateSystem * SecondCsys
            (
            );
            /**Sets  the csys of second link  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondCsys
            (
                NXOpen::CoordinateSystem * csys2 /** csys2 */ 
            );
            /**Returns  the screw ratio.  Used only when joint subtype is 
                <ja_type> Motion.Joint.Type.Screw </ja_type>, which is the pitch of a screw's thread  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double ScrewRatio
            (
            );
            /**Sets  the screw ratio.  Used only when joint subtype is 
                <ja_type> Motion.Joint.Type.Screw </ja_type>, which is the pitch of a screw's thread  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetScrewRatio
            (
                double screw_ratio /** screw ratio */ 
            );
            /**Returns  the option of defining limits for joint  <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool LimitsDefined
            (
            );
            /**Sets  the option of defining limits for joint  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetLimitsDefined
            (
                bool limits_defined /** limits defined */ 
            );
            /**Returns  the upper limit.  Only used when limits option is TRUE  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double UpperLimit
            (
            );
            /**Sets  the upper limit.  Only used when limits option is TRUE  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetUpperLimit
            (
                double upper_limit /** upper limit */ 
            );
            /**Returns  the lower limit.  Only used when limits option is TRUE  <br> License requirements : mechanisms ("MECHANISMS") */
            public: double LowerLimit
            (
            );
            /**Sets  the lower limit.  Only used when limits option is TRUE  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetLowerLimit
            (
                double lower_limit /** lower limit */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
