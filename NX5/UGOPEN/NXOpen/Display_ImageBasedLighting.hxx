#ifndef NXOpen_DISPLAY_IMAGEBASEDLIGHTING_HXX_INCLUDED
#define NXOpen_DISPLAY_IMAGEBASEDLIGHTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_ImageBasedLighting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Display_Image.hxx>
#include <NXOpen/Display_ImageBasedLighting.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Display
    {
        class ImageBasedLighting;
    }
    class Builder;
    class Direction;
    namespace Display
    {
        class Image;
    }
    class View;
    namespace Display
    {
        class _ImageBasedLightingBuilder;
        /**
            Represents a @link Display::ImageBasedLighting Display::ImageBasedLighting@endlink 
            Image-based Lighting (IBL) is only performed in High Quality Image 
            renderings.  IBL replaces the Lights in a scene with lighting effects 
            derived from a given image.
             <br> To create a new instance of this class, use @link ViewCollection::CreateImageBasedLighting ViewCollection::CreateImageBasedLighting@endlink  <br> */
        class NXOPENCPPEXPORT ImageBasedLighting : public Builder
        {
            /** images type - environment used for generating image-based lighting */
            public: enum ImagesType
            {
                ImagesTypeBackground/** Use the background image. */,
                ImagesTypeStage/** Use the stage. */,
                ImagesTypeUserDefined/** Use the image file specified. */
            };

            /** shadow type */
            public: enum ShadowsType
            {
                ShadowsTypeNone/** No shadows will be produced. */,
                ShadowsTypeSoftEdged/** Soft-edged,approximated shadows will be generated using a shadow
                                                                                               mapping algorithm. */,
                ShadowsTypeHardEdged/** Hard-edged, precise shadows will be generated using a ray-tracing
                                                                                               algorithm. */,
                ShadowsTypeTranslucentHard/** Hard-edged, precise shadows will be generated using a ray-tracing
                                                                                               algorithm.  Shadows from translucent objects will also be generated
                                                                                               and their color will be determined by the transparent object's
                                                                                               color. */
            };

            private: friend class  _ImageBasedLightingBuilder;
            protected: ImageBasedLighting();
            /**Returns  whether image-based lighting (IBL) is enabled  <br> License requirements : None */
            public: bool UseImageBasedLighting
            (
            );
            /**Sets  whether image-based lighting (IBL) is enabled  <br> License requirements : None */
            public: void SetUseImageBasedLighting
            (
                bool useIBL /** useibl */ 
            );
            /**Returns  the intensity of the image-based lighting light effects  <br> License requirements : None */
            public: double Intensity
            (
            );
            /**Sets  the intensity of the image-based lighting light effects  <br> License requirements : None */
            public: void SetIntensity
            (
                double intensity /** intensity */ 
            );
            /**Returns  the accuracy of the lighting and shadows produced from the given image  <br> License requirements : None */
            public: double Accuracy
            (
            );
            /**Sets  the accuracy of the lighting and shadows produced from the given image  <br> License requirements : None */
            public: void SetAccuracy
            (
                double accuracy /** accuracy */ 
            );
            /**Returns  the image type  <br> License requirements : None */
            public: NXOpen::Display::ImageBasedLighting::ImagesType ImageType
            (
            );
            /**Sets  the image type  <br> License requirements : None */
            public: void SetImageType
            (
                NXOpen::Display::ImageBasedLighting::ImagesType image_type /** image type */ 
            );
            /**Returns  the shadow type  <br> License requirements : None */
            public: NXOpen::Display::ImageBasedLighting::ShadowsType ShadowType
            (
            );
            /**Sets  the shadow type  <br> License requirements : None */
            public: void SetShadowType
            (
                NXOpen::Display::ImageBasedLighting::ShadowsType shadow_type /** shadow type */ 
            );
            /**Returns  the image rotation angle (in degrees)  <br> License requirements : None */
            public: double ImageRotation
            (
            );
            /**Sets  the image rotation angle (in degrees)  <br> License requirements : None */
            public: void SetImageRotation
            (
                double imageRotation /** imagerotation */ 
            );
            /**Returns  the image up vector direction, relative to the absolute coordinate system  <br> License requirements : None */
            public: NXOpen::Direction * ImageUpVector
            (
            );
            /**Sets  the image up vector direction, relative to the absolute coordinate system  <br> License requirements : None */
            public: void SetImageUpVector
            (
                NXOpen::Direction * imageUpVector /** imageupvector */ 
            );
            /**Returns  the image-based lighting's image builder  <br> License requirements : None */
            public: NXOpen::Display::Image * Image
            (
            );
            /**Sets  the image-based lighting's image builder  <br> License requirements : None */
            public: void SetImage
            (
                NXOpen::Display::Image * image_builder /** image builder */ 
            );
            /**Returns  the image filename used for image-based lighting  <br> License requirements : None */
            public: NXString ImageFilename
            (
            );
            /**Sets  the image filename used for image-based lighting  <br> License requirements : None */
            public: void SetImageFilename
            (
                const NXString & image_file_name /** image file name */ 
            );
            /** saves the attributes and optionally updates the display of image-based lighting  <br> License requirements : None */
            public: void CommitAndDisplay
            (
                NXOpen::View * view /** View of the image-based lighting attributes */,
                bool update_display /** True if the display should be updated */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
