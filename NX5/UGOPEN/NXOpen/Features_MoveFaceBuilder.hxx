#ifndef NXOpen_FEATURES_MOVEFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MOVEFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MoveFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_MoveFaceBuilder.hxx>
#include <NXOpen/ModlDirect_SelectBlend.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class MoveFaceBuilder;
    }
    class Axis;
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace ModlDirect
    {
        class SelectBlend;
    }
    class Point;
    class ScCollector;
    namespace Features
    {
        class _MoveFaceBuilderBuilder;
        /**
            Represents a builder for a move face feature, don't use it until nx502.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateMoveFaceBuilder Features::FeatureCollection::CreateMoveFaceBuilder@endlink  <br> */
        class NXOPENCPPEXPORT MoveFaceBuilder : public Features::FeatureBuilder
        {
            /** the move face types, don't use it until nx502 */
            public: enum Types
            {
                TypesTranslateDirectionAndDistance/** Direction and Distance for moving the faces */,
                TypesTranslateBetweenTwoPoints/** Move faces in the direction and distance defined by the two points */,
                TypesRotateAboutAxis/** Move faces by rotating about an axis */,
                TypesRotateBetweenTwoAxes/** Move faces by rotating the axis from the first to the second */
            };

            private: friend class  _MoveFaceBuilderBuilder;
            protected: MoveFaceBuilder();
            /**Returns  the type, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Features::MoveFaceBuilder::Types MoveType
            (
            );
            /**Sets  the type, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMoveType
            (
                NXOpen::Features::MoveFaceBuilder::Types move_type /** move type */ 
            );
            /**Returns  the algorithm version, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AlgorithmVersion
            (
            );
            /**Returns  the face collector holding the faces to move  <br> License requirements : None */
            public: NXOpen::ScCollector * MoveFaceCollector
            (
            );
            /**Returns  the from point in point to point option in move face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Point * FromPoint
            (
            );
            /**Sets  the from point in point to point option in move face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFromPoint
            (
                NXOpen::Point * from_point /** from point */ 
            );
            /**Returns  the to point in point to point option in move face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Point * ToPoint
            (
            );
            /**Sets  the to point in point to point option in move face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToPoint
            (
                NXOpen::Point * to_point /** to point */ 
            );
            /**Returns  the from vector in axis to axis option in move face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Direction * FromVector
            (
            );
            /**Sets  the from vector in axis to axis option in move face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFromVector
            (
                NXOpen::Direction * from_vector /** from vector */ 
            );
            /**Returns  the pivot point in axis to axis option in move face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Point * PivotPoint
            (
            );
            /**Sets  the pivot point in axis to axis option in move face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPivotPoint
            (
                NXOpen::Point * pivot_point /** pivot point */ 
            );
            /**Returns  the to vector in axis to axis option in move face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Direction * ToVector
            (
            );
            /**Sets  the to vector in axis to axis option in move face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToVector
            (
                NXOpen::Direction * to_vector /** to vector */ 
            );
            /**Returns  the face collector holding the all the recognized blend faces. It is auto recognized blends +
                        user selected blends - user excluded blends, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::ModlDirect::SelectBlend * BlendFaces
            (
            );
            /**Returns  the vector for direction and distance option, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Direction * DirVector
            (
            );
            /**Sets  the vector for direction and distance option, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDirVector
            (
                NXOpen::Direction * dir_vector /** dir vector */ 
            );
            /**Returns  the distance for direction and distance option, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );
            /**Returns  the axis for axis and angle option, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Axis * Axis
            (
            );
            /**Sets  the axis for axis and angle option, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAxis
            (
                NXOpen::Axis * axis /** axis */ 
            );
            /**Returns  the angle for axis and angle option, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
