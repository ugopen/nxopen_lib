#ifndef NXOpen_CAE_ELEMENTCREATEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_ELEMENTCREATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ElementCreateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ElementCreateBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class ElementCreateBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SelectFENodeList;
    }
    namespace CAE
    {
        class _ElementCreateBuilderBuilder;
        /**
            Represents a @link CAE::ElementCreateBuilder CAE::ElementCreateBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateElementCreateBuilder CAE::NodeElementManager::CreateElementCreateBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ElementCreateBuilder : public Builder
        {
            /**  Dimension of the element to be created */
            public: enum ElemDimType
            {
                ElemDimTypePoint/** 0D element*/,
                ElemDimTypeBeam/** beam*/,
                ElemDimTypeShell/** shell*/,
                ElemDimTypeSolid/** solid*/
            };

            /**  Option to create new mesh or add to existing mesh */
            public: enum NewMeshType
            {
                NewMeshTypeCreate/** create new mesh*/,
                NewMeshTypeExisting/** add to existing mesh*/
            };

            private: friend class  _ElementCreateBuilderBuilder;
            protected: ElementCreateBuilder();
            /**Returns  the element dimension option  <br> License requirements : None */
            public: NXOpen::CAE::ElementCreateBuilder::ElemDimType ElementDimensionOption
            (
            );
            /**Sets  the element dimension option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementDimensionOption
            (
                NXOpen::CAE::ElementCreateBuilder::ElemDimType elementDimensionOption /** elementdimensionoption */ 
            );
            /**Returns  the element neutral name  <br> License requirements : None */
            public: NXString NeutralName
            (
            );
            /**Sets  the element neutral name  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNeutralName
            (
                const NXString & neutralName /** neutralname */ 
            );
            /**Returns  the mesh collector name  <br> License requirements : None */
            public: NXString CollectorName
            (
            );
            /**Sets  the mesh collector name  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCollectorName
            (
                const NXString & collectorName /** collectorname */ 
            );
            /** Create mesh collector  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void CreateCollector
            (
            );
            /**Returns  the new mesh option  <br> License requirements : None */
            public: NXOpen::CAE::ElementCreateBuilder::NewMeshType NewMeshOption
            (
            );
            /**Sets  the new mesh option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNewMeshOption
            (
                NXOpen::CAE::ElementCreateBuilder::NewMeshType newMeshOption /** newmeshoption */ 
            );
            /**Returns  the mesh name  <br> License requirements : None */
            public: NXString MeshName
            (
            );
            /**Sets  the mesh name  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshName
            (
                const NXString & meshName /** meshname */ 
            );
            /**Returns  the selected node <br> License requirements : None */
            public: NXOpen::CAE::SelectFENodeList * Node
            (
            );
            /**Returns  the label  <br> License requirements : None */
            public: int Label
            (
            );
            /**Sets  the label  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLabel
            (
                int label /** label */ 
            );
            /**Returns  the increment  <br> License requirements : None */
            public: int Increment
            (
            );
            /**Sets  the increment  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetIncrement
            (
                int increment /** increment */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
