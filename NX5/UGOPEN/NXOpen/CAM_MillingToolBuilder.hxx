#ifndef NXOpen_CAM_MILLINGTOOLBUILDER_HXX_INCLUDED
#define NXOpen_CAM_MILLINGTOOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_MillingToolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ToolBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class MillingToolBuilder;
    }
    namespace CAM
    {
        class HolderSectionBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class ToolBuilder;
    }
    namespace CAM
    {
        class _MillingToolBuilderBuilder;
        /** Represents a MillingTool Builder  <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT MillingToolBuilder : public CAM::ToolBuilder
        {
            /** Available types for tool direction milling tool */
            public: enum ToolDirectionTypes
            {
                ToolDirectionTypesNone/** None */,
                ToolDirectionTypesClw/** CLW */,
                ToolDirectionTypesCclw/** CCLW */
            };

            private: friend class  _MillingToolBuilderBuilder;
            protected: MillingToolBuilder();
            /**Returns  the tool direction  <br> License requirements : None */
            public: NXOpen::CAM::MillingToolBuilder::ToolDirectionTypes TlDirection
            (
            );
            /**Sets  the tool direction  <br> License requirements : None */
            public: void SetTlDirection
            (
                NXOpen::CAM::MillingToolBuilder::ToolDirectionTypes tlDirection /** tldirection */ 
            );
            /**Returns  the Number of Flutes builder (inheritable integer)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * TlNumFlutesBuilder
            (
            );
            /**Returns  the Adjust Register   <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * TlAdjRegBuilder
            (
            );
            /**Returns  the Holder Description  <br> License requirements : None */
            public: NXString TlHolderDescription
            (
            );
            /**Sets  the Holder Description  <br> License requirements : None */
            public: void SetTlHolderDescription
            (
                const NXString & tl_holder_description_value /** the tool holder description value */
            );
            /**Returns  the Holder Library Reference  <br> License requirements : None */
            public: NXString TlHolderLibref
            (
            );
            /**Sets  the Holder Library Reference  <br> License requirements : None */
            public: void SetTlHolderLibref
            (
                const NXString & tl_holder_libref_value /** the holder Library Reference value */
            );
            /**Returns  the Z Mount builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlZMountBuilder
            (
            );
            /**Returns  the Z Offset builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlZOffsetBuilder
            (
            );
            /**Returns  the Cutcom Register   <br> License requirements : None */
            public: int TlCutcomReg
            (
            );
            /**Sets  the Cutcom Register   <br> License requirements : None */
            public: void SetTlCutcomReg
            (
                int tl_cutcom_reg_value /**  the tool cutcom register value */
            );
            /**Returns  the Tool Diameter builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlDiameterBuilder
            (
            );
            /**Returns  the length   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlHeightBuilder
            (
            );
            /**Returns  the flute length   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlFluteLnBuilder
            (
            );
            /**Returns  the Taper Angle builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlTaperAngBuilder
            (
            );
            /**Returns  the Shank Diameter builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlShankDiaBuilder
            (
            );
            /**Returns  the low corner radius   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlLowCorRadBuilder
            (
            );
            /**Returns  the up corner radius   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * TlUpCorRadBuilder
            (
            );
            /**Returns  the holder sections builder   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::HolderSectionBuilder * HolderSectionBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
