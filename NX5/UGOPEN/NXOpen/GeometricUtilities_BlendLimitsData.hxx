#ifndef NXOpen_GEOMETRICUTILITIES_BLENDLIMITSDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_BLENDLIMITSDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_BlendLimitsData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_BlendLimitsData.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class BlendLimitsData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class TaggedObjectList;
    namespace GeometricUtilities
    {
        class _BlendLimitsDataBuilder;
        /**
            Represents a @link GeometricUtilities::BlendLimitsData GeometricUtilities::BlendLimitsData@endlink 
            */
        class NXOPENCPPEXPORT BlendLimitsData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _BlendLimitsDataBuilder;
            protected: BlendLimitsData();
            /**Returns  the caps list  <br> License requirements : None */
            public: NXOpen::TaggedObjectList * CapsList
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
