#ifndef NXOpen_LAYOUTDEFINITION_HXX_INCLUDED
#define NXOpen_LAYOUTDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LayoutDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class LayoutDefinition;
    class ModelingView;
    class View;
    /** Represents the definition of a layout.  This includes the arrangement
        and location of the views in the arrangement.
    */
    class NXOPENCPPEXPORT LayoutDefinition : public TransientObject
    {
        /**
                Indicates the arrangement type of a layout.
            */
        public: enum ArrangementType
        {
            ArrangementTypeL1/** One row by one column*/,
            ArrangementTypeL2/** One row by two columns*/,
            ArrangementTypeL3/** Two rows by one column*/,
            ArrangementTypeL4/** Two rows by two columns*/,
            ArrangementTypeL6/** Two rows by three columns*/,
            ArrangementTypeL9/** Three rows by three columns*/,
            ArrangementTypeNonStandard/** A non standard layout.
                                                                       A layout definition 
                                                                       cannot be made with
                                                                       this option. */
        };

        public: explicit LayoutDefinition(void *ptr);
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector.   <br> License requirements : None */
        public: virtual ~LayoutDefinition();
        /**Returns  the arrangement type of the layout definition. <br> License requirements : None */
        public: NXOpen::LayoutDefinition::ArrangementType Arrangement
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Arrangement() Arrangement@endlink instead.
        @deprecated
        */
        public: NXOpen::LayoutDefinition::ArrangementType GetArrangement
        (
        ) { return this->Arrangement(); }
        /** Returns the @link View View@endlink  at specified position in layout.  
                The system throws an exception when a user enters an invalid position.  <br> License requirements : None */
        public: void GetView
        (
            int row /** Row of view */,
            int column /** Column of view */,
            NXOpen::View ** view /** view */ 
        );
        /** Sets the @link ModelingView ModelingView@endlink  at specified position in layout.  
                The system throws an exception when a user enters an invalid position  <br> License requirements : None */
        public: void SetView
        (
            int row /** Row of view */,
            int column /** Column of view */,
            NXOpen::ModelingView * view /** view */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
