#ifndef NXOpen_PREFERENCES_SHADINGVIEWPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_SHADINGVIEWPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_ShadingViewPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IShadingViewPreferences.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class ShadingViewPreferences;
    }
    namespace Preferences
    {
        class ViewPreferences;
    }
    namespace Preferences
    {
        class IShadingViewPreferences;
    }
    namespace Preferences
    {
        /** Represents set of Shading View Preferences applicable to drafting views.  <br> To obtain an instance of this class, refer to @link Preferences::ViewPreferences Preferences::ViewPreferences@endlink  <br> */
        class NXOPENCPPEXPORT ShadingViewPreferences: public virtual Preferences::IShadingViewPreferences
        {
            private: NXOpen::Preferences::ViewPreferences* m_owner;
            public: explicit ShadingViewPreferences(NXOpen::Preferences::ViewPreferences *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Sets  the rendering style. <br> License requirements : drafting ("DRAFTING") */
            public: void SetRenderingStyle
            (
                NXOpen::Preferences::ShadingRenderingStyleOption rendering_style_option /** rendering style option */ 
            );
            /**Returns  the rendering style. <br> License requirements : None */
            public: NXOpen::Preferences::ShadingRenderingStyleOption RenderingStyle
            (
            );
            /**Sets  the shaded cut face color. The value should be between 1 and 216.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetShadedCutFaceColor
            (
                int shaded_cut_face_color /** shaded cut face color */ 
            );
            /**Returns  the shaded cut face color. The value should be between 1 and 216.  <br> License requirements : None */
            public: int ShadedCutFaceColor
            (
            );
            /**Sets  the visible wireframe override color. The value should be between 1 and 216. <br> License requirements : drafting ("DRAFTING") */
            public: void SetOverrideVisibleWireframeColor
            (
                int overrideVisibleWireframeColor /** overridevisiblewireframecolor */ 
            );
            /**Returns  the visible wireframe override color. The value should be between 1 and 216. <br> License requirements : None */
            public: int OverrideVisibleWireframeColor
            (
            );
            /**Sets  the hidden wireframe override color. The value should be between 1 and 216. <br> License requirements : drafting ("DRAFTING") */
            public: void SetOverrideHiddenWireframeColor
            (
                int overrideHiddenWireframeColor /** overridehiddenwireframecolor */ 
            );
            /**Returns  the hidden wireframe override color. The value should be between 1 and 216. <br> License requirements : None */
            public: int OverrideHiddenWireframeColor
            (
            );
            /**Sets  the shading tolerance. <br> License requirements : drafting ("DRAFTING") */
            public: void SetShadingTolerance
            (
                NXOpen::Preferences::ShadingToleranceOption shading_tolerance /** shading tolerance */ 
            );
            /**Returns  the shading tolerance. <br> License requirements : None */
            public: NXOpen::Preferences::ShadingToleranceOption ShadingTolerance
            (
            );
            /**Sets  the custom edge tolerance. <br> License requirements : drafting ("DRAFTING") */
            public: void SetCustomEdgeTolerance
            (
                double custom_edge_tolerance /** custom edge tolerance */ 
            );
            /**Returns  the custom edge tolerance. <br> License requirements : None */
            public: double CustomEdgeTolerance
            (
            );
            /**Sets  the custom face tolerance. <br> License requirements : drafting ("DRAFTING") */
            public: void SetCustomFaceTolerance
            (
                double custom_face_tolerance /** custom face tolerance */ 
            );
            /**Returns  the custom face tolerance. <br> License requirements : None */
            public: double CustomFaceTolerance
            (
            );
            /**Sets  the custom angle tolerance. <br> License requirements : drafting ("DRAFTING") */
            public: void SetCustomAngleTolerance
            (
                double custom_angle_tolerance /** custom angle tolerance */ 
            );
            /**Returns  the custom angle tolerance. <br> License requirements : None */
            public: double CustomAngleTolerance
            (
            );
            /**Sets  the shininess tolerance. <br> License requirements : drafting ("DRAFTING") */
            public: void SetShininess
            (
                double shininess_tolerance /** shininess tolerance */ 
            );
            /**Returns  the shininess tolerance. <br> License requirements : None */
            public: double Shininess
            (
            );
            /**Sets  the two sided light toggle data. <br> License requirements : drafting ("DRAFTING") */
            public: void SetTwoSidedLight
            (
                bool two_sided_light /** two sided light */ 
            );
            /**Returns  the two sided light toggle data. <br> License requirements : None */
            public: bool TwoSidedLight
            (
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
