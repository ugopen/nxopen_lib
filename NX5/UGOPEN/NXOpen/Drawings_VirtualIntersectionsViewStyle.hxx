#ifndef NXOpen_DRAWINGS_VIRTUALINTERSECTIONSVIEWSTYLE_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIRTUALINTERSECTIONSVIEWSTYLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_VirtualIntersectionsViewStyle.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IVirtualIntersectionsViewPreferences.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class VirtualIntersectionsViewStyle;
    }
    namespace Drawings
    {
        class ViewStyle;
    }
    namespace Preferences
    {
        class IVirtualIntersectionsViewPreferences;
    }
    namespace Drawings
    {
        /** Represents set of Virtual Intersections View Style Preferences applicable to drafting views.
                Allows to display imaginary intersection curves.
              <br> To obtain an instance of this class, refer to @link Drawings::ViewStyle Drawings::ViewStyle@endlink  <br> */
        class NXOPENCPPEXPORT VirtualIntersectionsViewStyle: public virtual Preferences::IVirtualIntersectionsViewPreferences
        {
            private: NXOpen::Drawings::ViewStyle* m_owner;
            public: explicit VirtualIntersectionsViewStyle(NXOpen::Drawings::ViewStyle *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Sets  the status of virtual intersection. <br> License requirements : drafting ("DRAFTING") */
            public: void SetVirtualIntersection
            (
                bool virtual_intersection /** virtual intersection */ 
            );
            /**Returns  the status of virtual intersection. <br> License requirements : None */
            public: bool VirtualIntersection
            (
            );
            /**Sets  the status of adjacent blends. <br> License requirements : drafting ("DRAFTING") */
            public: void SetAdjacentBlends
            (
                bool adjacent_blends /** adjacent blends */ 
            );
            /**Returns  the status of adjacent blends. <br> License requirements : None */
            public: bool AdjacentBlends
            (
            );
            /**Sets  the color of adjacent blends. The value should be between 1 and 216. <br> License requirements : drafting ("DRAFTING") */
            public: void SetAdjacentBlendsColor
            (
                int adjacent_blends_color /** adjacent blends color */ 
            );
            /**Returns  the color of adjacent blends. The value should be between 1 and 216. <br> License requirements : None */
            public: int AdjacentBlendsColor
            (
            );
            /**Sets  the font of adjacent blends. <br> License requirements : drafting ("DRAFTING") */
            public: void SetAdjacentBlendsFont
            (
                NXOpen::Preferences::Font adjacent_blends_font /** adjacent blends font */ 
            );
            /**Returns  the font of adjacent blends. <br> License requirements : None */
            public: NXOpen::Preferences::Font AdjacentBlendsFont
            (
            );
            /**Sets  the width of adjacent blends. <br> License requirements : drafting ("DRAFTING") */
            public: void SetAdjacentBlendsWidth
            (
                NXOpen::Preferences::Width adjacent_blends_width /** adjacent blends width */ 
            );
            /**Returns  the width of adjacent blends. <br> License requirements : None */
            public: NXOpen::Preferences::Width AdjacentBlendsWidth
            (
            );
            /**Sets  the status of adjacent blends end gaps. It controls the display of visible ends. If True, the 
            		    visible ends are suppressed from the display. The length of the suppressed end is in drawing 
            		    units and is controlled by the value set in the End Gap field. If False, the visible ends are 
            		    not suppressed from the display.
            		  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAdjacentBlendsEndGaps
            (
                bool adjacent_blends_end_gaps /** adjacent blends end gaps */ 
            );
            /**Returns  the status of adjacent blends end gaps. It controls the display of visible ends. If True, the 
            		    visible ends are suppressed from the display. The length of the suppressed end is in drawing 
            		    units and is controlled by the value set in the End Gap field. If False, the visible ends are 
            		    not suppressed from the display.
            		  <br> License requirements : None */
            public: bool AdjacentBlendsEndGaps
            (
            );
            /**Sets  the value of adjacent blends end gaps.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAdjacentBlendsEndGapsData
            (
                double adjacent_blends_end_gaps_data /** adjacent blends end gaps data */ 
            );
            /**Returns  the value of adjacent blends end gaps.  <br> License requirements : None */
            public: double AdjacentBlendsEndGapsData
            (
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
