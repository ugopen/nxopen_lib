#ifndef NXOpen_DISPLAY_STAGE_HXX_INCLUDED
#define NXOpen_DISPLAY_STAGE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_Stage.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Display_Stage.hxx>
#include <NXOpen/Display_Wall.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Display
    {
        class Stage;
    }
    class Builder;
    namespace Display
    {
        class Wall;
    }
    class Plane;
    class View;
    namespace Display
    {
        class _StageBuilder;
        /**
            Represents a @link Display::Stage Display::Stage@endlink 
            A stage is an environment cube, a six-sided room, that can have between 
            one and six visible walls.  You optionally specify a stage in Studio 
            rendering styles and High Quality Images.
             <br> To create a new instance of this class, use @link ViewCollection::CreateStage ViewCollection::CreateStage@endlink  <br> */
        class NXOPENCPPEXPORT Stage : public Builder
        {
            /** The JA_DISPLAY_STAGE_wall_type is an index to a particular wall in the 
            		    stage.
                    */
            public: enum WallType
            {
                WallTypeLeft/** The left wall of the stage. */,
                WallTypeRight/** The right wall of the stage. */,
                WallTypeTop/** The top wall or "ceiling" of the stage. */,
                WallTypeBottom/** The bottom wall or "floor" of the stage. */,
                WallTypeFront/** The front wall of the stage. */,
                WallTypeBack/** The back wall of the stage. */,
                WallTypeTotal/** The total number of walls in the stage. */
            };

            private: friend class  _StageBuilder;
            protected: Stage();
            /**Returns  the size all of the stage walls (length and width), in part units  <br> License requirements : None */
            public: double Size
            (
            );
            /**Sets  the size all of the stage walls (length and width), in part units  <br> License requirements : None */
            public: void SetSize
            (
                double size /** size */ 
            );
            /**Returns  the offset distance to translate the stage in the z-direction, in part units  <br> License requirements : None */
            public: double Offset
            (
            );
            /**Sets  the offset distance to translate the stage in the z-direction, in part units  <br> License requirements : None */
            public: void SetOffset
            (
                double offset /** offset */ 
            );
            /** The stage's bottom wall to align with the WCS x-axis  <br> License requirements : None */
            public: void FloorXaxis
            (
            );
            /** The stage's bottom wall to align with the WCS y-axis  <br> License requirements : None */
            public: void FloorYaxis
            (
            );
            /** The stage's bottom wall to align with the WCS z-axis  <br> License requirements : None */
            public: void FloorZaxis
            (
            );
            /**Returns  the specify floor plane  <br> License requirements : None */
            public: NXOpen::Plane * SpecifyFloorPlane
            (
            );
            /**Sets  the specify floor plane  <br> License requirements : None */
            public: void SetSpecifyFloorPlane
            (
                NXOpen::Plane * specifyFloorPlane /** specifyfloorplane */ 
            );
            /** The stage's bottom wall (floor) aligns with the given plane.  <br> License requirements : None */
            public: void AlignFloorPlane
            (
                NXOpen::Plane * specifyFloorPlane /** specifyfloorplane */ 
            );
            /** Returns a wall builder, given by the index, in the array of walls for the given stage  @return  the wall  <br> License requirements : None */
            public: NXOpen::Display::Wall * GetWallFromList
            (
                NXOpen::Display::Stage::WallType index /** index to the array of walls */
            );
            /** Sets a wall builder in the array at the given index  <br> License requirements : None */
            public: void SetWallInList
            (
                NXOpen::Display::Stage::WallType index /** index to the array of walls */,
                NXOpen::Display::Wall * wall /** the wall */
            );
            /** Updates the data and display for a given wall  <br> License requirements : None */
            public: void CommitWall
            (
                NXOpen::View * view /** view of the stage and walls */,
                int current_wall_index /** the index of the wall in the stage builder array */,
                bool update_stage_database /** if true, commit the stage builder */
            );
            /** Updates the data and display for a change to the stage's offset  <br> License requirements : None */
            public: void CommitOffset
            (
                NXOpen::View * view /** view of the stage */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
