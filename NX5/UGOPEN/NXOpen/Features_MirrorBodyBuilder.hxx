#ifndef NXOpen_FEATURES_MIRRORBODYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MIRRORBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MirrorBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_MirrorBodyBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class MirrorBodyBuilder;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectBodyList;
    class SelectDatumPlane;
    namespace Features
    {
        class _MirrorBodyBuilderBuilder;
        /**
        	Represents a @link Features::MirrorBody Features::MirrorBody@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateMirrorBodyBuilder Features::FeatureCollection::CreateMirrorBodyBuilder@endlink  <br> */
        class NXOPENCPPEXPORT MirrorBodyBuilder : public Features::FeatureBuilder
        {
            /** the parent part types */
            public: enum ParentPart
            {
                ParentPartWorkPart/** Work Part */,
                ParentPartOtherPart/** Other Part */
            };

            private: friend class  _MirrorBodyBuilderBuilder;
            protected: MirrorBodyBuilder();
            /**Returns  the mirror plane
            		 <br> License requirements : None */
            public: NXOpen::SelectDatumPlane * Plane
            (
            );
            /**Returns  the mirror body list
            		 <br> License requirements : None */
            public: NXOpen::SelectBodyList * MirrorBodyList
            (
            );
            /**Returns  the fix at current timestamp  <br> License requirements : None */
            public: bool FixAtCurrentTimestamp
            (
            );
            /**Sets  the fix at current timestamp  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFixAtCurrentTimestamp
            (
                bool atTimeStamp /** attimestamp */ 
            );
            /**Returns  the associative
            		 <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative
            		 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the reverse direction
            		 <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction
            		 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseDirection
            (
                bool reverse /** reverse */ 
            );
            /**Returns  the parent part type  <br> License requirements : None */
            public: NXOpen::Features::MirrorBodyBuilder::ParentPart ParentPartType
            (
            );
            /**Sets  the parent part type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetParentPartType
            (
                NXOpen::Features::MirrorBodyBuilder::ParentPart sourceType /** sourcetype */ 
            );
            /**Returns  the frec at time stamp  <br> License requirements : None */
            public: NXOpen::Features::Feature * FrecAtTimeStamp
            (
            );
            /**Sets  the frec at time stamp  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFrecAtTimeStamp
            (
                NXOpen::Features::Feature * terminal_frec /** terminal frec */ 
            );
            /**Returns  the make position independent  <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the make position independent  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
