#ifndef NXOpen_UISTYLER_INTEGERSCALE_HXX_INCLUDED
#define NXOpen_UISTYLER_INTEGERSCALE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_IntegerScale.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class IntegerScale;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        /** Represents a IntegerScale for UI Styler */
        class NXOPENUICPPEXPORT IntegerScale : public UIStyler::StylerItem
        {
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> ValueChanged;
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Drag;
            public: explicit IntegerScale(void *ptr);
            /**Registers value change callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddValueChangedHandler
            (
                const NXOpen::UIStyler::IntegerScale::ValueChanged&  valuechangedevent /** Value changed event */,
                bool is_dialog_launching_event /** True if launch any dialog else False */
            );
            /**Registers drag callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddDragHandler
            (
                const NXOpen::UIStyler::IntegerScale::Drag&  dragevent /** dragevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Specifies the scale's maximum and minimum value. <br> License requirements : None */
            public: void SetLimits
            (
                int minimum_value /**to set minimum */,
                int maximum_value /**to set maximum */
            );
            /**Specifies the text for the minimum and maximum label. By default, the system uses the maximum/minimum 
                value as a text label. <br> License requirements : None */
            public: void SetLabels
            (
                const NXString & minimum_label /**minimum limit for label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & maximum_label /**maximum limit for label   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets   <br> License requirements : None */
            public: void SetItemValue
            (
                int item_val /** item val */ 
            );
            /**Returns   <br> License requirements : None */
            public: int ItemValue
            (
            );
            /**Sets  the sensitivity of the dialog item.  <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /**TRUE if sensitive, FALSE if insensitive*/
            );
            /**Returns  the sensitivity of the dialog item.  <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets the visibility of the dialog item.  <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /**TRUE if visible, FALSE if invisible*/
            );
            /**Returns the visibility of the dialog item.  <br> License requirements : None */
            public: bool Visibility
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
