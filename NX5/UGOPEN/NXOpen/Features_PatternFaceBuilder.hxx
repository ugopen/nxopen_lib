#ifndef NXOpen_FEATURES_PATTERNFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_PATTERNFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_PatternFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_PatternFaceBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class PatternFaceBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class ScCollector;
    class SelectObject;
    namespace Features
    {
        class _PatternFaceBuilderBuilder;
        /**
            Represents a builder for a pattern face feature, don't use it until nx502.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreatePatternFaceBuilder Features::FeatureCollection::CreatePatternFaceBuilder@endlink  <br> */
        class NXOPENCPPEXPORT PatternFaceBuilder : public Features::FeatureBuilder
        {
            /** Enumeration of pattern type, don't use it until nx502 */
            public: enum PatternTypes
            {
                PatternTypesRectangular/** This stands for rectangular type. */,
                PatternTypesCircular/** This stands for circular tyep. */,
                PatternTypesMirror/** This stands for mirror tyep. */
            };

            private: friend class  _PatternFaceBuilderBuilder;
            protected: PatternFaceBuilder();
            /**Returns  the select type, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Features::PatternFaceBuilder::PatternTypes Type
            (
            );
            /**Sets  the select type, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::PatternFaceBuilder::PatternTypes pattern_type /** pattern type */ 
            );
            /**Returns  the face to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::ScCollector * Face
            (
            );
            /**Returns  the X vector to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Direction * XVector
            (
            );
            /**Sets  the X vector to pattern, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetXVector
            (
                NXOpen::Direction * x_vector /** x vector */ 
            );
            /**Returns  the axis for circular pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Direction * Axis
            (
            );
            /**Sets  the axis for circular pattern, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAxis
            (
                NXOpen::Direction * axis /** axis */ 
            );
            /**Returns  the point of vector, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the point of vector, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the point of vector, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::SelectObject * Plane
            (
            );
            /**Returns  the Y vector to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Direction * YVector
            (
            );
            /**Sets  the Y vector to pattern, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetYVector
            (
                NXOpen::Direction * y_vector /** y vector */ 
            );
            /**Returns  the X distance to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * XDistance
            (
            );
            /**Returns  the Y distance to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * YDistance
            (
            );
            /**Returns  the angle to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the count of X direction to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * XCount
            (
            );
            /**Returns  the count of Y direction to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * YCount
            (
            );
            /**Returns  the circular count to pattern, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * CircularCount
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
