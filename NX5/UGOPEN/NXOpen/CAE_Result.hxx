#ifndef NXOpen_CAE_RESULT_HXX_INCLUDED
#define NXOpen_CAE_RESULT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Result.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class Result;
    }
    class Session;
    class Unit;
    namespace CAE
    {
        /** Represents analysis results  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT Result
        {
            /** Group Containers */
            public: enum GroupContainer
            {
                GroupContainerZeroDimensional/** zero dimensional */ ,
                GroupContainerOneDimensional/** one dimensional */ ,
                GroupContainerTwoDimensional/** two dimensional */ ,
                GroupContainerThreeDimensional/** three dimensional */ ,
                GroupContainerConnector/** connector */ ,
                GroupContainerOther/** other */ 
            };

            /** Result quantities */
            public: enum Quantity
            {
                QuantityDisplacement/** displacement */ ,
                QuantityRotation/** rotation */ ,
                QuantityContactDisplacement/** contact displacement */ ,
                QuantityVelocity/** velocity */ ,
                QuantityAngularVelocity/** angular velocity */ ,
                QuantityAcceleration/** acceleration */ ,
                QuantityAngularAcceleration/** angular acceleration */ ,
                QuantityVonMisesStress/** von mises stress */ ,
                QuantityVonMisesStrain/** von mises strain */ ,
                QuantityStress/** stress */ ,
                QuantityStrain/** strain */ ,
                QuantityStrainEnergy/** strain energy */ ,
                QuantityStrainEnergyDensity/** strain energy density */ ,
                QuantityStrainEnergyError/** strain energy error */ ,
                QuantityEquivalentPlasticStrain/** equivalent plastic strain */ ,
                QuantityEquivalentCreepStrain/** equivalent creep strain */ ,
                QuantityThickness/** thickness */ ,
                QuantityTemperature/** temperature */ ,
                QuantityTemperatureGradient/** temperature gradient */ ,
                QuantityHeatFlux/** heat flux */ ,
                QuantityThermalEnergy/** thermal energy */ ,
                QuantityHeatFlow/** heat flow */ ,
                QuantityAppliedForce/** applied force */ ,
                QuantityAppliedMoment/** applied moment */ ,
                QuantityReactionForce/** reaction force */ ,
                QuantityReactionMoment/** reaction moment */ ,
                QuantityContactTraction/** contact traction */ ,
                QuantityContactForce/** contact force */ ,
                QuantityElementForce/** element force */ ,
                QuantityElementMoment/** element moment */ ,
                QuantityContactPressure/** contact pressure */ ,
                QuantityFatigueLife/** fatigue life */ ,
                QuantityFatigueDamage/** fatigue damage */ ,
                QuantityFatigueSafetyFactor/** fatigue safety factor */ ,
                QuantityStrengthSafetyFactor/** strength safety factor */ ,
                QuantityElementError/** element error */ ,
                QuantityElementResultants/** element resultants */ ,
                QuantityMaximumTemperature/** maximum temperature */ ,
                QuantityMinimumTemperature/** minimum temperature */ ,
                QuantityTimeAtMaximumTemperature/** time at maximum temperature */ ,
                QuantityTimeAtMinimumTemperature/** time at minimum temperature */ ,
                QuantityConductiveFlux/** conductive flux */ ,
                QuantityTotalHeatLoad/** total heat load */ ,
                QuantityTotalHeatFlux/** total heat flux */ ,
                QuantityHeatResidual/** heat residual */ ,
                QuantityConvectionCoefficient/** convection coefficient */ ,
                QuantityViewFactorsSum/** view factors sum */ ,
                QuantityAdjustedVelocity/** adjusted velocity */ ,
                QuantityPressureOnPositiveSide/** pressure on positive side */ ,
                QuantityPressureOnNegativeSide/** pressure on negative side */ ,
                QuantityStaticPressure/** static pressure */ ,
                QuantityTotalPressure/** total pressure */ ,
                QuantityTurbulenceEnergy/** turbulence energy */ ,
                QuantityTurbulenceDissipation/** turbulence dissipation */ ,
                QuantityFluidDensity/** fluid density */ ,
                QuantityShearStressOnPositiveSide/** shear stress on positive side */ ,
                QuantityShearStressOnNegativeSide/** shear stress on negative side */ ,
                QuantityRoughnessOnPositiveSide/** roughness on positive side */ ,
                QuantityRoughnessOnNegativeSide/** roughness on negative side */ ,
                QuantityYPlusOnPositiveSide/** yplus on positive side */ ,
                QuantityYPlusOnNegativeSide/** yplus on negative side */ ,
                QuantityMassFlux/** mass flux */ ,
                QuantityFluidTemperature/** fluid temperature */ ,
                QuantityConvectiveFlux/** convective flux */ ,
                QuantityLocalConvectionCoefficient/** local convection coefficient */ ,
                QuantityBulkConvectionCoefficient/** bulk convection coefficient */ ,
                QuantityPressure/** pressure */ ,
                QuantityVelocityComponent/** velocity component */ ,
                QuantityMassFlow/** mass flow */ ,
                QuantityElementHeatLoad/** element heat load */ ,
                QuantitySafetyFactor/** safety factor */ ,
                QuantityShellResultants/** shell resultants */ ,
                QuantityBeamResultants/** beam resultants */ ,
                QuantitySpringDashpotResultant/** spring dashpot resultant */ ,
                QuantityPlyFailureIndex/** ply failure index */ ,
                QuantityBondFailureIndex/** bond failure index */ ,
                QuantityTorsionStress/** torsion stress */ ,
                QuantityGridPointForce/** grid point force */ ,
                QuantityGridPointMoment/** grid point moment */ ,
                QuantityRadiativeSourceHeatFlux/** radiative source heat flux */ ,
                QuantityRadiance/** radiance */ ,
                QuantityApparentTemperature/** apparent temperature */ ,
                QuantityFluence/** fluence */ ,
                QuantityRCProduct/** rcproduct */ ,
                QuantityVoltage/** voltage */ ,
                QuantityPowerDensity/** power density */ ,
                QuantityRelativeVelocity/** relative velocity */ ,
                QuantityWaterCumulation/** water cumulation */ ,
                QuantityTurbulentSpecificDissipation/** turbulent specific dissipation */ ,
                QuantityRadiativeHeatFlux/** radiative heat flux */ ,
                QuantityCollimatedHeatFlux/** collimated heat flux */ ,
                QuantityDiffuseHeatFlux/** diffuse heat flux */ ,
                QuantityInfraredHeatFlux/** infrared heat flux */ ,
                QuantityViewFactor/** view factor */ ,
                QuantityUnknown/** unknown */ ,
                QuantityMappedTemperature/** mapped temperature */ ,
                QuantityMappedTemperatureGradient/** mapped temperature gradient */ ,
                QuantityRadiativeAbsorbedHeatFlux/** radiative absorbed heat flux */ ,
                QuantityRadiativeIncidentHeatFlux/** radiative incident heat flux */ ,
                QuantityRadiativeReflectedHeatFlux/** radiative reflected heat flux */ ,
                QuantityRadiativeTransmittedHeatFlux/** radiative transmitted heat flux */ ,
                QuantityCollimatedAbsorbedHeatFlux/** collimated absorbed heat flux */ ,
                QuantityCollimatedIncidentHeatFlux/** collimated incident heat flux */ ,
                QuantityCollimatedReflectedHeatFlux/** collimated reflected heat flux */ ,
                QuantityCollimatedTransmittedHeatFlux/** collimated transmitted heat flux */ ,
                QuantityDiffuseAbsorbedHeatFlux/** diffuse absorbed heat flux */ ,
                QuantityDiffuseIncidentHeatFlux/** diffuse incident heat flux */ ,
                QuantityDiffuseReflectedHeatFlux/** diffuse reflected heat flux */ ,
                QuantityDiffuseTransmittedHeatFlux/** diffuse transmitted heat flux */ ,
                QuantityInfraredAbsorbedHeatFlux/** infrared absorbed heat flux */ ,
                QuantityInfraredIncidentHeatFlux/** infrared incident heat flux */ ,
                QuantityInfraredReflectedHeatFlux/** infrared reflected heat flux */ ,
                QuantityInfraredTransmittedHeatFlux/** infrared transmitted heat flux */ ,
                QuantityAlbedoViewFactor/** albedo view factor */ ,
                QuantityEarthViewFactor/** earth view factor */ ,
                QuantitySolarViewFactor/** solar view factor */ ,
                QuantityQuality/** quality */ ,
                QuantityRadiationPatch/** radiation patch */ ,
                QuantityAbsorbedRadiation/** absorbed radiation */ ,
                QuantityIncidentRadiation/** incident radiation */ ,
                QuantityReflectedRadiation/** reflected radiation */ ,
                QuantityTransmittedRadiation/** transmitted radiation */ ,
                QuantityRefractiveIndex/** refractive index */ ,
                QuantityRefractiveIndexGradient/** refractive index gradient */ ,
                QuantityOpticalPathLength/** optical path length */ ,
                QuantityLaserPower/** laser power */ ,
                QuantityPumpingPower/** pumping power */ ,
                QuantityRadiativeFluxinSolid/** radiative fluxin solid */ ,
                QuantityFluidScalar/** fluid scalar */ ,
                QuantityWallDistance/** wall distance */ ,
                QuantityRelativeHumidity/** relative humidity */ ,
                QuantitySpecificHumidity/** specific humidity */ ,
                QuantityMachNumber/** mach number */ ,
                QuantityPredictedPercentDissatisfied/** predicted percent dissatisfied */ ,
                QuantityPercentMeanVote/** percent mean vote */ ,
                QuantityStressLevelCrossingRate/** stress level crossing rate */ ,
                QuantityVonMisesStressLevelCrossingRate/** von mises stress level crossing rate */ ,
                QuantityVonMisesStrainLevelCrossingRate/** von mises strain level crossing rate */ ,
                QuantityDisplacementLevelCrossingRate/** displacement level crossing rate */ ,
                QuantityRotationLevelCrossingRate/** rotation level crossing rate */ ,
                QuantityVelocityLevelCrossingRate/** velocity level crossing rate */ ,
                QuantityAngularVelocityLevelCrossingRate/** angular velocity level crossing rate */ ,
                QuantityAccelerationLevelCrossingRate/** acceleration level crossing rate */ ,
                QuantityAngularAccelerationLevelCrossingRate/** angular acceleration level crossing rate */ ,
                QuantityElementForceLevelCrossingRate/** element force level crossing rate */ ,
                QuantityElementMomentLevelCrossingRate/** element moment level crossing rate */ ,
                QuantityShellResultantsLevelCrossingRate/** shell resultants level crossing rate */ ,
                QuantityBeamResultantsLevelCrossingRate/** beam resultants level crossing rate */ ,
                QuantitySpringDashpotResultantsLevelCrossingRate/** spring dashpot resultants level crossing rate */ 
            };

            /** Result locations */
            public: enum Location
            {
                LocationNodal/** nodal */ ,
                LocationElement/** element */ ,
                LocationElementNodal/** element nodal */ 
            };

            /** Result sections */
            public: enum Section
            {
                SectionNotApplicable/** not applicable */ ,
                SectionTop/** top */ ,
                SectionMiddle/** middle */ ,
                SectionBottom/** bottom */ ,
                SectionMinimum/** minimum */ ,
                SectionMaximum/** maximum */ ,
                SectionStressRecoveryPointC/** stress recovery point c */ ,
                SectionStressRecoveryPointD/** stress recovery point d */ ,
                SectionStressRecoveryPointE/** stress recovery point e */ ,
                SectionStressRecoveryPointF/** stress recovery point f */ ,
                SectionAll/** all */ 
            };

            /** Result data types */
            public: enum DataType
            {
                DataTypeScalar/** scalar */ ,
                DataTypeVector/** vector */ ,
                DataTypeSixVector/** six vector */ ,
                DataTypeTensor/** tensor */ ,
                DataTypeElementResultantShell/** element resultant shell */ ,
                DataTypeElementResultantBeam/** element resultant beam */ ,
                DataTypeElementResultantSpringDashpot/** element resultant spring dashpot */ 
            };

            /** Result components */
            public: enum Component
            {
                ComponentScalar/** scalar */ ,
                ComponentX/** x */ ,
                ComponentY/** y */ ,
                ComponentZ/** z */ ,
                ComponentMagnitude/** magnitude */ ,
                ComponentXx/** xx */ ,
                ComponentYy/** yy */ ,
                ComponentZz/** zz */ ,
                ComponentXy/** xy */ ,
                ComponentYz/** yz */ ,
                ComponentZx/** zx */ ,
                ComponentDeterminant/** determinant */ ,
                ComponentMean/** mean */ ,
                ComponentMaximumShear/** maximum shear */ ,
                ComponentMinimumPrincipal/** minimum principal */ ,
                ComponentMiddlePrincipal/** middle principal */ ,
                ComponentMaximumPrincipal/** maximum principal */ ,
                ComponentOctahedral/** octahedral */ ,
                ComponentVonMises/** von mises */ ,
                ComponentMembraneXX/** membrane xx */ ,
                ComponentMembraneYY/** membrane yy */ ,
                ComponentMembraneXY/** membrane xy */ ,
                ComponentBendingXX/** bending xx */ ,
                ComponentBendingYY/** bending yy */ ,
                ComponentBendingXY/** bending xy */ ,
                ComponentShearYZ/** shear yz */ ,
                ComponentShearXZ/** shear xz */ ,
                ComponentAxial/** axial */ ,
                ComponentBendingS/** bending s */ ,
                ComponentBendingT/** bending t */ ,
                ComponentTorsion/** torsion */ ,
                ComponentShearS/** shear s */ ,
                ComponentShearT/** shear t */ ,
                ComponentSpringDashpotForce/** spring dashpot force */ 
            };

            /** Complex options */
            public: enum Complex
            {
                ComplexReal/** real */ ,
                ComplexImaginary/** imaginary */ ,
                ComplexAmplitude/** amplitude */ ,
                ComplexSignedAmplitude/** signed amplitude */ ,
                ComplexPhaseAngle/** phase angle */ 
            };

            /** Coordinate systems */
            public: enum CoordinateSystem
            {
                CoordinateSystemAbsoluteRectangular/** absolute rectangular */ ,
                CoordinateSystemAbsoluteCylindrical/** absolute cylindrical */ ,
                CoordinateSystemAbsoluteSpherical/** absolute spherical */ ,
                CoordinateSystemWorkRectangular/** work rectangular */ ,
                CoordinateSystemWorkCylindrical/** work cylindrical */ ,
                CoordinateSystemWorkSpherical/** work spherical */ ,
                CoordinateSystemLocal/** local */ 
            };

            /** Element-value criterions */
            public: enum ElementValueCriterion
            {
                ElementValueCriterionAverage/** average */ ,
                ElementValueCriterionCentroid/** centroid */ ,
                ElementValueCriterionMaximum/** maximum */ ,
                ElementValueCriterionMinimum/** minimum */ 
            };

            /** Deformation scales */
            public: enum DeformationScale
            {
                DeformationScaleModel/** model */ ,
                DeformationScaleAbsolute/** absolute */ 
            };

             /** Result type structure to specify a result dataset */
            public:
            struct Type
            {
                public: /** quantity */ NXOpen::CAE::Result::Quantity Quantity;
                public: /** location */ NXOpen::CAE::Result::Location Location;
                public: /** section */ NXOpen::CAE::Result::Section Section;
                public: Type() :
                    Quantity((NXOpen::CAE::Result::Quantity)0),
                    Location((NXOpen::CAE::Result::Location)0),
                    Section((NXOpen::CAE::Result::Section)0)
                {
                }
                /** Constructor for the Type struct. */ 
                public: Type(NXOpen::CAE::Result::Quantity INIT_quantity /** quantity */ , NXOpen::CAE::Result::Location INIT_location /** location */ , NXOpen::CAE::Result::Section INIT_section /** section */ ) :
                    Quantity(INIT_quantity),
                    Location(INIT_location),
                    Section(INIT_section)
                {
                }
            };

             /** Averaging structure to specify averaging options */
            public:
            struct Averaging
            {
                public: /** do averaging */ bool DoAveraging;
                public: /** average across property ids */ bool AverageAcrossPropertyIds;
                public: /** average across material ids */ bool AverageAcrossMaterialIds;
                public: /** average across element types */ bool AverageAcrossElementTypes;
                public: Averaging() :
                    DoAveraging(),
                    AverageAcrossPropertyIds(),
                    AverageAcrossMaterialIds(),
                    AverageAcrossElementTypes()
                {
                }
                /** Constructor for the Averaging struct. */ 
                public: Averaging(bool INIT_do_averaging /** do averaging */ , bool INIT_average_across_property_ids /** average across property ids */ , bool INIT_average_across_material_ids /** average across material ids */ , bool INIT_average_across_element_types /** average across element types */ ) :
                    DoAveraging(INIT_do_averaging),
                    AverageAcrossPropertyIds(INIT_average_across_property_ids),
                    AverageAcrossMaterialIds(INIT_average_across_material_ids),
                    AverageAcrossElementTypes(INIT_average_across_element_types)
                {
                }
            };

             /** Element-value structure to specify element value options */
            public:
            struct ElementValue
            {
                public: /** do element value */ bool DoElementValue;
                public: /** criterion */ NXOpen::CAE::Result::ElementValueCriterion Criterion;
                public: ElementValue() :
                    DoElementValue(),
                    Criterion((NXOpen::CAE::Result::ElementValueCriterion)0)
                {
                }
                /** Constructor for the ElementValue struct. */ 
                public: ElementValue(bool INIT_do_element_value /** do element value */ , NXOpen::CAE::Result::ElementValueCriterion INIT_criterion /** criterion */ ) :
                    DoElementValue(INIT_do_element_value),
                    Criterion(INIT_criterion)
                {
                }
            };

             /** Result parameter structure to specify complete result state for the color display */
            public:
            struct ResultParameters
            {
                public: /** load case number starting from 0 */int LoadCaseIndex;
                public: /** iteration number starting from 0 */int IterationIndex;
                public: /** type */ NXOpen::CAE::Result::Type Type;
                public: /** component */ NXOpen::CAE::Result::Component Component;
                public: /** section */ int Section;
                public: /** plynumber */ int Plynumber;
                public: /** layer */ int Layer;
                public: /** averaging */ NXOpen::CAE::Result::Averaging Averaging;
                public: /** coordinate system */ NXOpen::CAE::Result::CoordinateSystem CoordinateSystem;
                public: /** element value */ NXOpen::CAE::Result::ElementValue ElementValue;
                public: /** complex */ NXOpen::CAE::Result::Complex Complex;
                public: /** phase angle */ double PhaseAngle;
                public: /** absolute value */ bool AbsoluteValue;
                public: /** scale value */ double ScaleValue;
                public: /** unit */ NXOpen::Unit * Unit;
                public: ResultParameters() :
                    LoadCaseIndex(),
                    IterationIndex(),
                    Type(),
                    Component((NXOpen::CAE::Result::Component)0),
                    Section(),
                    Plynumber(),
                    Layer(),
                    Averaging(),
                    CoordinateSystem((NXOpen::CAE::Result::CoordinateSystem)0),
                    ElementValue(),
                    Complex((NXOpen::CAE::Result::Complex)0),
                    PhaseAngle(),
                    AbsoluteValue(),
                    ScaleValue(),
                    Unit()
                {
                }
                /** Constructor for the ResultParameters struct. */ 
                public: ResultParameters(int INIT_load_case_index /** load case number starting from 0 */, int INIT_iteration_index /** iteration number starting from 0 */, NXOpen::CAE::Result::Type INIT_type /** type */ , NXOpen::CAE::Result::Component INIT_component /** component */ , int INIT_section /** section */ , int INIT_plynumber /** plynumber */ , int INIT_layer /** layer */ , NXOpen::CAE::Result::Averaging INIT_averaging /** averaging */ , NXOpen::CAE::Result::CoordinateSystem INIT_coordinate_system /** coordinate system */ , NXOpen::CAE::Result::ElementValue INIT_element_value /** element value */ , NXOpen::CAE::Result::Complex INIT_complex /** complex */ , double INIT_phase_angle /** phase angle */ , bool INIT_absolute_value /** absolute value */ , double INIT_scale_value /** scale value */ , NXOpen::Unit * INIT_unit /** unit */ ) :
                    LoadCaseIndex(INIT_load_case_index),
                    IterationIndex(INIT_iteration_index),
                    Type(INIT_type),
                    Component(INIT_component),
                    Section(INIT_section),
                    Plynumber(INIT_plynumber),
                    Layer(INIT_layer),
                    Averaging(INIT_averaging),
                    CoordinateSystem(INIT_coordinate_system),
                    ElementValue(INIT_element_value),
                    Complex(INIT_complex),
                    PhaseAngle(INIT_phase_angle),
                    AbsoluteValue(INIT_absolute_value),
                    ScaleValue(INIT_scale_value),
                    Unit(INIT_unit)
                {
                }
            };

             /** Deformation parameter structure to specify complete result state for the deformed shape */
            public:
            struct DeformationParameters
            {
                public: /** load case number starting from 0 */int LoadCaseIndex;
                public: /** iteration number starting from 0 */int IterationIndex;
                public: /** type */ NXOpen::CAE::Result::Type Type;
                public: /** complex */ NXOpen::CAE::Result::Complex Complex;
                public: /** phase angle */ double PhaseAngle;
                public: /** deformation scale */ NXOpen::CAE::Result::DeformationScale DeformationScale;
                public: /** absolute scale value */ double AbsoluteScaleValue;
                public: /** model percent scale value */ double ModelPercentScaleValue;
                public: DeformationParameters() :
                    LoadCaseIndex(),
                    IterationIndex(),
                    Type(),
                    Complex((NXOpen::CAE::Result::Complex)0),
                    PhaseAngle(),
                    DeformationScale((NXOpen::CAE::Result::DeformationScale)0),
                    AbsoluteScaleValue(),
                    ModelPercentScaleValue()
                {
                }
                /** Constructor for the DeformationParameters struct. */ 
                public: DeformationParameters(int INIT_load_case_index /** load case number starting from 0 */, int INIT_iteration_index /** iteration number starting from 0 */, NXOpen::CAE::Result::Type INIT_type /** type */ , NXOpen::CAE::Result::Complex INIT_complex /** complex */ , double INIT_phase_angle /** phase angle */ , NXOpen::CAE::Result::DeformationScale INIT_deformation_scale /** deformation scale */ , double INIT_absolute_scale_value /** absolute scale value */ , double INIT_model_percent_scale_value /** model percent scale value */ ) :
                    LoadCaseIndex(INIT_load_case_index),
                    IterationIndex(INIT_iteration_index),
                    Type(INIT_type),
                    Complex(INIT_complex),
                    PhaseAngle(INIT_phase_angle),
                    DeformationScale(INIT_deformation_scale),
                    AbsoluteScaleValue(INIT_absolute_scale_value),
                    ModelPercentScaleValue(INIT_model_percent_scale_value)
                {
                }
            };

            private: NXOpen::Session* m_owner;
            public: explicit Result(NXOpen::Session *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
