#ifndef NXOpen_ROUTING_DESIGNRULEMANAGER_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRuleManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DesignRuleManager;
    }
    class Session;
    namespace Routing
    {
        class DesignRule;
    }
    namespace Routing
    {
        /** Represents @link Routing::DesignRuleManager Routing::DesignRuleManager@endlink  object  <br> Creator not available in KF. <br> */
        class NXOPENCPPEXPORT DesignRuleManager
        {
            private: NXOpen::Session* m_owner;
            public: explicit DesignRuleManager(NXOpen::Session *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Add an object to be checked during the next concurrent design rule check  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void LogConcurrent
            (
            );
            /** Remove an object from the list of objects to be checked at the next design rule check  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void UnlogConcurrent
            (
            );
            /**  Inquire the list of objects to be checked at the next concurrent check  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetConcurrent
            (
                std::vector<NXOpen::Routing::DesignRule *> & objects /** objects */ 
            );
            /** Expand the current list of objects on the concurrent check list to include 'dependents'  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ExpandConcurrent
            (
            );
            /** Remove all objects from the concurrent check list  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ClearConcurrent
            (
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
