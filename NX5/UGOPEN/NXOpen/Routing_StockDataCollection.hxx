#ifndef NXOpen_ROUTING_STOCKDATACOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_STOCKDATACOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_StockDataCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class StockDataCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class StockData;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        /** Represents a collection of @link Routing::StockData Routing::StockData@endlink  objects.   <br> To obtain an instance of this class, refer to @link Routing::RouteManager Routing::RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT StockDataCollection : public TaggedObjectCollection
        {
            private: NXOpen::Routing::RouteManager* m_owner;
            public: explicit StockDataCollection(NXOpen::Routing::RouteManager *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef Routing::StockData * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Routing::StockDataCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Routing::StockDataCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /**  Creates (or finds an existing @link Routing::StockData Routing::StockData@endlink ) object in the work
                      part that has the characteristics specified by the input list of characteristic values.  Creates
                      the stock by copying the stock defined in the qualified part to the work part. The qualified stock
                      part is specified by the PART_NAME or MEMBER_NAME in the list.  If there is no PART_NAME or MEMBER_NAME
                      a stock data, the OD or WIDTH/HEIGHT values are used to generate either a circular or rectangular
                      stock data.  
                       <br> 
                        Use this routine to create stock data's in the work part in order to create stocks.  Use
                        @link Routing::RouteManager::SetPartTypeFlag Routing::RouteManager::SetPartTypeFlag@endlink  to create a qualified
                        stock data part.  
                        
                        Example Use:
                         @code 

                            values = theSession.Preferences.RoutingApplicationView.PartPreferences.PartLibrary.CreateCriteria ( );
                            values.SetCharacteristic ( "OD", 10.0 );
                            stock_data = workPart.RouteManager.StockDataCollection.CreateStockData ( values );
                            stocks = workPart.RouteManager.StockCollection.CreateStock ( stock_data, anchor, cross_section, segments );
                            workPart.RouteManager.SetPartTypeFlag( Routing.RouteManager.PartType.Stock );
                         @endcode 

                       <br> 
                       @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::StockData * CreateStockData
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Creates a new stock data in the work part.  The new stock data contains all of the 
                     @link Routing::CrossSection Routing::CrossSection@endlink  and @link Routing::Anchor Routing::Anchor@endlink  objects
                     in the work part.  After calling this routine call @link Routing::RouteManager::SetPartTypeFlag Routing::RouteManager::SetPartTypeFlag@endlink 
                     to @link NXOpen::Routing::RouteManager::PartTypeStock NXOpen::Routing::RouteManager::PartTypeStock@endlink , 
                     @link NXOpen::Routing::RouteManager::PartTypeOverstock NXOpen::Routing::RouteManager::PartTypeOverstock@endlink , or
                     @link NXOpen::Routing::RouteManager::PartTypeFiller NXOpen::Routing::RouteManager::PartTypeFiller@endlink  to properly qualify this
                     as a stock definition part.
                      @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::StockData * CreateStockData
            (
            );
            public: void RemoveUnusedStockData
            (
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
