#ifndef NXOpen_MEASUREMENT_HXX_INCLUDED
#define NXOpen_MEASUREMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Measurement.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Measurement;
    class Session;
    class Curve;
    class DisplayableObject;
    class Edge;
    class Face;
    class ICurve;
    class NXObject;
    /**
    Provides methods for calculating and displaying the measurement information.
     <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
    class NXOPENCPPEXPORT Measurement
    {
        /** 
            Describes type of the 'Deviation Checking' report. 
            */
        public: enum DeviationReportType
        {
            DeviationReportTypeNoDeviation/** No Deviation*/,
            DeviationReportTypeAllDeviation/** All Deviation*/,
            DeviationReportTypeMaximumDistance/** Maximum Distance*/,
            DeviationReportTypeMinimumDistance/** Minimum Distance*/,
            DeviationReportTypeMaximumAngle/** Maximum Angle*/,
            DeviationReportTypeMinimumAngle/** Minimum Angle*/
        };

        private: NXOpen::Session* m_owner;
        public: explicit Measurement(NXOpen::Session *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** 
            Calculates and displays 'Total Arc Length' of all the selected objects.
             <br> Type of allowed input objects  are - @link Edge Edge@endlink ,@link Line Line@endlink ,@link Arc Arc@endlink ,@link Spline Spline@endlink ,and @link Curve Curve@endlink   <br> 
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayArcLength
        (
            const std::vector<NXOpen::DisplayableObject *> & selected_objects /** Array of objects for which length to be calculated */
        );
        /** 
            Calculates and returns 'Total Arc Length' of all the selected objects.
             <br> Type of allowed input objects  are - @link Edge Edge@endlink ,@link Line Line@endlink ,@link Arc Arc@endlink ,@link Spline Spline@endlink ,and @link Curve Curve@endlink   <br> 
             @return  Total Arc Length  <br> License requirements : None */
        public: double GetArcLength
        (
            const std::vector<NXOpen::DisplayableObject *> & selected_objects /** Array of objects for which length to be calculated */
        );
        /** 
            Calculates and displays 'Minimum Distance " between objects.
            Start points are NOT specified for any of the objects.
             <br> Type of allowed input objects  are -  Curve, Edge, Face, Body, Plane, or Csys etc. <br> 
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayMinimumDistance
        (
            NXOpen::DisplayableObject * object1 /** First object */,
            NXOpen::DisplayableObject * object2 /** Second object*/,
            NXOpen::Point3d* close_point1 /** Close point on first object */,
            NXOpen::Point3d* close_point2 /** Close point on second object */
        );
        /** 
            Calculates and displays 'Minimum Distance' between objects.
            Start points are specified for both the objects. If any of object is Point,Pass NULL to the object
            and pass a point co-ordinates as a start point.
             <br> Type of allowed input objects  are -  Point, Curve, Edge, Face, Body, Plane, or Csys etc. <br> 
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayMinimumDistance
        (
            NXOpen::NXObject * object1 /** First object */,
            const NXOpen::Point3d & start_point_for_object_1 /**Start point for first object */,
            NXOpen::NXObject * object2 /** Second object */,
            const NXOpen::Point3d & start_point_for_object_2 /**Start point for second object */,
            NXOpen::Point3d* close_point1 /** Close point on first object */,
            NXOpen::Point3d* close_point2 /** Close point on second object */
        );
        /** 
            Calculates and displays 'Minimum Distance' between objects.
            Start points are specified only for object1.If any of object is Point,Pass NULL to the object1
            and pass a point co-ordinates as a start_point_for_object_1.
             <br> Type of allowed input objects  are -  Point, Curve, Edge, Face, Body, Plane, or Csys etc. <br> 
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayMinimumDistance
        (
            NXOpen::NXObject * object1 /** First object */,
            const NXOpen::Point3d & start_point_for_object_1 /**Start point for first object */,
            NXOpen::NXObject * object2 /** Second object */,
            NXOpen::Point3d* close_point1 /** Close point on first object */,
            NXOpen::Point3d* close_point2 /** Close point on second object */
        );
        /** 
            Calculates and displays 'Minimum Distance' between objects.
            Start points are specified only for object2.If any of object is Point,Pass NULL to the object2
            and pass a point co-ordinates as a start_point_for_object_2.
             <br> Type of allowed input objects  are -  Point, Curve, Edge, Face, Body, Plane, or Csys etc. <br> 
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayMinimumDistance
        (
            NXOpen::NXObject * object1 /** First object */,
            NXOpen::NXObject * object2 /** Second object */,
            const NXOpen::Point3d & start_point_for_object_2 /**Start point for second object */,
            NXOpen::Point3d* close_point1 /** Close point on first object */,
            NXOpen::Point3d* close_point2 /** Close point on second object */
        );
        /** 
            Calculates and returns 'Minimum Distance " between objects.
            Start points are NOT specified for any of the objects.
             <br> Type of allowed input objects  are -  Curve, Edge, Face, Body, Plane, or Csys etc. <br> 
             @return  minimum distance between two objects <br> License requirements : None */
        public: double GetMinimumDistance
        (
            NXOpen::NXObject * object1 /** First object */,
            NXOpen::NXObject * object2 /** Second object */,
            NXOpen::Point3d* close_point1 /** Close point on first object */,
            NXOpen::Point3d* close_point2 /** Close point on second object */,
            double* accuracy /**Accuracy of calculation */
        );
        /** 
            Calculates and returns 'Minimum Distance " between objects.
            Start points are specified for both the objects. 
            If any of object is Point,Pass NULL to the object and pass a point co-ordinates as a start point.
             <br> Type of allowed input objects  are -  Point, Curve, Edge, Face, Body, Plane, or Csys etc. <br> 
             @return  minimum distance between two objects <br> License requirements : None */
        public: double GetMinimumDistance
        (
            NXOpen::NXObject * object1 /** First object */,
            const NXOpen::Point3d & start_point_for_object_1 /**Start point for first object */,
            NXOpen::NXObject * object2 /** Second object */,
            const NXOpen::Point3d & start_point_for_object_2 /**Start point for second object */,
            NXOpen::Point3d* close_point1 /** Close point on first object */,
            NXOpen::Point3d* close_point2 /** Close point on second object */,
            double* accuracy /**Accuracy of calculation */
        );
        /** 
            Calculates and returns 'Minimum Distance " between objects.
            Start points are specified only for first object.
            If any of object is Point,Pass NULL to the object1 and pass a point co-ordinates as a start_point_for_object_1.
             <br> Type of allowed input objects  are -  Point, Curve, Edge, Face, Body, Plane, or Csys etc. <br> 
             @return  minimum distance between two objects <br> License requirements : None */
        public: double GetMinimumDistance
        (
            NXOpen::NXObject * object1 /** First object */,
            const NXOpen::Point3d & start_point_for_object_1 /**Start point for first object */,
            NXOpen::NXObject * object2 /** Second object */,
            NXOpen::Point3d* close_point1 /** Close point on first object */,
            NXOpen::Point3d* close_point2 /** Close point on second object */,
            double* accuracy /**Accuracy of calculation */
        );
        /** 
            Calculates and returns 'Minimum Distance " between objects.
            Start points are specified only for second object.
            If any of object is Point,Pass NULL to the object2 and pass a point co-ordinates as a start_point_for_object_2.
             <br> Type of allowed input objects  are -  Point, Curve, Edge, Face, Body, Plane, or Csys etc. <br> 
             @return  Minimum distance between two objects <br> License requirements : None */
        public: double GetMinimumDistance
        (
            NXOpen::NXObject * object1 /** First object */,
            NXOpen::NXObject * object2 /** Second object */,
            const NXOpen::Point3d & start_point_for_object_2 /**Start point for second object */,
            NXOpen::Point3d* close_point1 /** Close point on first object */,
            NXOpen::Point3d* close_point2 /** Close point on second object */,
            double* accuracy /**Accuracy of calculation */
        );
        /** 
            Calculates and displays 'Angle' between objects.
             <br> Type of allowed input objects  are -  Edge, Face, Body, Curve, Direction or Feature etc. <br> 
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayAngle
        (
            NXOpen::NXObject * object1 /**First object */,
            const NXOpen::Point3d & position1 /** Point position on first object*/,
            NXOpen::NXObject * object2 /**Second object*/,
            const NXOpen::Point3d & position2 /** Point position on second object*/
        );
        /** 
            Calculates and returns 'True Angle' between objects.
             <br> Type of allowed input objects  are -  Edge, Face, Body, Curve, Direction or Feature etc. <br> 
             @return  Angle between object1 and object2 <br> License requirements : None */
        public: double GetAngle
        (
            NXOpen::NXObject * object1 /**First object */,
            const NXOpen::Point3d & position1 /** Point position on first object*/,
            NXOpen::NXObject * object2 /**Second object*/,
            const NXOpen::Point3d & position2 /** Point position on second object*/
        );
        /** 
            Checks deviations between curves (curve to curve),and displays the report.
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayDeviationChecking
        (
            NXOpen::ICurve * curve1 /** Curve used for deviation checking */,
            NXOpen::ICurve * curve2 /** Curve used for deviation checking */,
            int num_of_check_points /** Number of equally spaced sample check points */,
            double distance_tolerance /** Distance Tolerance */,
            double angular_tolerance /** Angle Tolerance */,
            NXOpen::Measurement::DeviationReportType report_type /** Type of the report */
        );
        /** 
            Checks deviations between a curve and a face (curve to face), and displays the report.
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayDeviationChecking
        (
            NXOpen::Curve * curve1 /** Curve used for deviation checking */,
            NXOpen::Face * face2 /** Face used for deviation checking */,
            int num_of_check_points /** Number of equally spaced sample check points*/,
            double distance_tolerance /** Distance Tolerance */,
            double angular_tolerance /** Angle Tolerance */,
            NXOpen::Measurement::DeviationReportType report_type /** Type of the report */
        );
        /** 
            Checks deviations between a edge and a face (edge to face), and displays the report.
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayDeviationChecking
        (
            NXOpen::Face * face1 /** Face on which edge1 lies */,
            NXOpen::Edge * edge1 /** Edge used for deviation checking */,
            NXOpen::Face * face2 /** Face used for deviation checking */,
            int num_of_check_points /** Number of equally spaced sample check points */,
            double distance_tolerance /** Distance Tolerance */,
            double angular_tolerance /** Angle Tolerance */,
            NXOpen::Measurement::DeviationReportType report_type /** Type of the report */
        );
        /** 
            Checks deviations between faces (face to face), and displays the report.
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayDeviationChecking
        (
            NXOpen::Face * face1 /** First face used for deviation checking */,
            NXOpen::Face * face2 /** Second face used for deviation checking */,
            int num_of_check_points_u /** Number of equally spaced sample check points in u direction */,
            int num_of_check_points_v /** Number of equally spaced sample check points in v direction */,
            double distance_tolerance /** Distance Tolerance */,
            double angular_tolerance /** Angle Tolerance */,
            NXOpen::Measurement::DeviationReportType report_type /** Type of the report */
        );
        /** 
            Checks deviations between edges (edge to edge), and displays the report.
             <br> In Interactive mode, output will be displayed in the listing window <br> 
             <br> In Batch mode, output will be displayed to the standard output (stdout) <br> 
             <br> License requirements : None */
        public: void DisplayDeviationChecking
        (
            NXOpen::Face * face1 /** Face on which edge1 lies */,
            NXOpen::Edge * edge1 /** First edge used for deviation checking */,
            NXOpen::Face * face2 /** Face on which edge2 lies */,
            NXOpen::Edge * edge2 /** Second edge used for deviation checking */,
            int num_of_check_points /** Number of equally spaced sample check points */,
            double distance_tolerance /** Distance Tolerance */,
            double angular_tolerance /** Angle Tolerance */,
            NXOpen::Measurement::DeviationReportType report_type /** Type of the report */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
