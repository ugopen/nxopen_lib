#ifndef NXOpen_ANNOTATIONS_DIMENSIONSET_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DIMENSIONSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DimensionSet.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_Annotation.hxx>
#include <NXOpen/Annotations_IContainer.hxx>
#include <NXOpen/Annotations_Associativity.hxx>
#include <NXOpen/Annotations_DimensionData.hxx>
#include <NXOpen/Annotations_PmiData.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class DimensionSet;
    }
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class Associativity;
    }
    namespace Annotations
    {
        class Dimension;
    }
    namespace Annotations
    {
        class DimensionData;
    }
    namespace Annotations
    {
        class IContainer;
    }
    namespace Annotations
    {
        class PmiData;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    class NXObject;
    class Xform;
    namespace Annotations
    {
        class _DimensionSetBuilder;
        /** Represents a dimension set  <br> This is an abstract class. <br> */
        class NXOPENCPPEXPORT DimensionSet : public Annotations::Annotation, public virtual Annotations::IContainer
        {
            private: friend class  _DimensionSetBuilder;
            protected: DimensionSet();
            /**Returns  the dimension offset  <br> License requirements : None */
            public: double DimensionOffset
            (
            );
            /**Sets  the dimension offset  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetDimensionOffset
            (
                double dimension_offset /** dimension offset */ 
            );
            /** Adds a dimension to the set  @return  Dimension added to the set  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Annotations::Dimension * AddDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */,
                bool auto_adjust_narrow_dim /** If narrow dimension should be 
                                                     automatically adjusted */
            );
            /** Adds a PMI dimension to the PMI dimension set. The new dimension is created on the same plane
                        as the existing dimensions.  @return  Dimension added to the set  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::Dimension * AddPmiDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                const NXOpen::Point3d & origin /** Origin for the dimension */,
                bool auto_adjust_narrow_dim /** If narrow dimension should be 
                                                     automatically adjusted */
            );
            /** Adds a PMI dimension to the PMI dimension set. The new dimension is created on the same plane
                        as the existing dimensions.  @return  Dimension added to the set  <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::Dimension * AddPmiDimension
            (
                NXOpen::Annotations::DimensionData * dimension_data /** Dimension data */,
                NXOpen::Annotations::PmiData * pmi_data /** PMI data */,
                NXOpen::Xform * annotation_plane /** Annotation plane on which the dimensions lie */,
                const NXOpen::Point3d & origin /** Origin for the dimension */,
                bool auto_adjust_narrow_dim /** If narrow dimension should be 
                                                     automatically adjusted */
            );
            /** Reverse the offset of Baseline/Chain Dimension  <br> License requirements : geometric_tol ("GDT") */
            public: void ReverseOffset
            (
            );
            /** Returns all the sub dimensions of this set  @return    <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::Dimension *> GetAllSubDimensions
            (
            );
            /** Returns the objects in the container  @return  List of objects  <br> License requirements : None */
            public: virtual std::vector<NXOpen::NXObject *> GetObjects
            (
            );
            /** Removes an object in the container. The container object is deleted when
                        the last object in it is deleted  <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: virtual void RemoveObject
            (
                NXOpen::NXObject * object /** Object to remove */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
