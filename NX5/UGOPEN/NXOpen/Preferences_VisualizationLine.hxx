#ifndef NXOpen_PREFERENCES_VISUALIZATIONLINE_HXX_INCLUDED
#define NXOpen_PREFERENCES_VISUALIZATIONLINE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_VisualizationLine.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class VisualizationLine;
    }
    class UI;
    namespace Preferences
    {
        /** This class is for UI related preferences changes  <br> To obtain an instance of this class, refer to @link UI UI@endlink  <br> */
        class NXOPENUICPPEXPORT VisualizationLine
        {
            private: NXOpen::UI* m_owner;
            public: explicit VisualizationLine(NXOpen::UI *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Regenerates after changing tolerance  <br> License requirements : None */
            public: void RegenerateFromToleranceChange
            (
                bool update_mode_change /** whether update_mode has changed */,
                bool studio /** studio or non studio */
            );
            /** Updates the UI after line font is changed  <br> License requirements : None */
            public: void UpdateLineFontObjects
            (
                bool do_software_update /** The do_software_update flag should be set to TRUE when changing
                                                                    from software fonts to hardware fonts or when changing dash */
            );
            /**Returns  the depth sorted wireframe. Specifies whether the graphics driver should sort objects by depth in wireframe views.  <br> License requirements : None */
            public: bool DepthSortedWireframe
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DepthSortedWireframe() DepthSortedWireframe@endlink instead.
            @deprecated
            */
            public: bool GetDepthSortedWireframe
            (
            ) { return this->DepthSortedWireframe(); }
            /**Sets  the depth sorted wireframe. Specifies whether the graphics driver should sort objects by depth in wireframe views.  <br> License requirements : None */
            public: void SetDepthSortedWireframe
            (
                bool depth_sorted_wireframe /** depth sorted wireframe */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
