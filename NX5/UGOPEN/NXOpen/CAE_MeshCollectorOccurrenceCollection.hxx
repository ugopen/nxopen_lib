#ifndef NXOpen_CAE_MESHCOLLECTOROCCURRENCECOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_MESHCOLLECTOROCCURRENCECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MeshCollectorOccurrenceCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class MeshCollectorOccurrenceCollection;
    }
    namespace CAE
    {
        class FEModelOccurrence;
    }
    namespace CAE
    {
        class MeshCollectorOccurrence;
    }
    namespace CAE
    {
        class MeshCollectorOccurrenceBuilder;
    }
    namespace CAE
    {
        /**  @brief  Provides methods for managing mesh collector occurrences 
                @link CAE::MeshCollectorOccurrence CAE::MeshCollectorOccurrence@endlink  in a sim part  

           <br> To obtain an instance of this class, refer to @link CAE::FEModelOccurrence CAE::FEModelOccurrence@endlink  <br> */
        class NXOPENCPPEXPORT MeshCollectorOccurrenceCollection : public TaggedObjectCollection
        {
            private: NXOpen::CAE::FEModelOccurrence* m_owner;
            public: explicit MeshCollectorOccurrenceCollection(NXOpen::CAE::FEModelOccurrence *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef CAE::MeshCollectorOccurrence * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::CAE::MeshCollectorOccurrenceCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::CAE::MeshCollectorOccurrenceCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link CAE::MeshCollectorOccurrence CAE::MeshCollectorOccurrence@endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  mesh collector occurrence with this identifier  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshCollectorOccurrence * FindObject
            (
                const NXString & journal_identifier /** MeshCollector name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a mesh collector occurrence builder for the mesh collector occurrence overrides
                      @return  MeshCollector Occurrence Builder  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::MeshCollectorOccurrenceBuilder * CreateOccurrenceBuilder
            (
                NXOpen::CAE::MeshCollectorOccurrence * mesh_collector /** @link MeshCollectorOccurrence MeshCollectorOccurrence@endlink  to be edited */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
