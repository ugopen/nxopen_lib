#ifndef NXOpen_ROUTING_CHARACTERISTICLIST_HXX_INCLUDED
#define NXOpen_ROUTING_CHARACTERISTICLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_CharacteristicList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
    }
    namespace Routing
    {
        /**
                 Contains a list of characteristics.
                 A characteristics is a name-value pair where the value can be an integer, real or string.

            */
        class NXOPENCPPEXPORT CharacteristicList : public TransientObject
        {
             /** Contains the type and name of a characteristic */
            public:
            struct CharacteristicInformation
            {
                public: /** characteristic type  */NXOpen::NXObject::AttributeType Type;
                public: /** characteristic name */NXString Name;
                public: CharacteristicInformation() :
                    Type((NXOpen::NXObject::AttributeType)0),
                    Name()
                {
                }
                /** Constructor for the CharacteristicInformation struct. */ 
                public: CharacteristicInformation(NXOpen::NXObject::AttributeType INIT_type /** characteristic type  */, NXString INIT_name /** characteristic name */) :
                    Type(INIT_type),
                    Name(INIT_name)
                {
                }
            };

            public: explicit CharacteristicList(void *ptr);
            /** Frees the memory associated with this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual ~CharacteristicList();
            /** Gets the value of an integer characteristic.  @return  The integer value of the characteristic.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int GetIntegerCharacteristic
            (
                const NXString & name /** The name of the characteristic.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of an integer characteristic associated with the input name.
                        The method adds a new characteristic to the list if one does not exist already or converts
                        the type of an existing characteristic to integer if necessary.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** The integer value of the characteristic */
            );
            /** Gets the value of a real characteristic.  @return  The real value of the characteristic  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double GetRealCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of an real characteristic associated with the input name.
                        The method adds a new characteristic to the list if one doesn't exist already or converts
                        the type of an existing characteristic to real if necessary.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** The real value of the characteristic */
            );
            /** Gets the value of a string characteristic  @return  The string value of the characteristic  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString GetStringCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of an string characteristic.
                        The method adds a new characteristic to the list if one does not exist already or converts
                        the type of an existing characteristic to string if necessary.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** The string value of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the titles of all characteristics that have the specified type.  @return  The list of characteristic names.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::CharacteristicList::CharacteristicInformation> GetCharacteristicTitlesByType
            (
                NXOpen::NXObject::AttributeType type /** The characteristic type.
                                          <br> 
                                         Specifying @link NXObject::
                                         AttributeTypeAny NXObject::
                                         AttributeTypeAny@endlink  returns the                                                             titles of all characteristics in the list.  <br> 
                                                                            See @link NXObject::AttributeType NXObject::AttributeType@endlink  for more information. */
            );
            /** Removes a characteristic from the characteristic list.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void DeleteCharacteristic
            (
                const NXString & name /** The name of the characteristic   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::NXObject::AttributeType type /** The type of the characteristic. <br> 
                                                                            @link NXObject::AttributeTypeAny NXObject::AttributeTypeAny@endlink  is not valid. <br> 
                                                                            See @link NXObject::AttributeType NXObject::AttributeType@endlink  for more information. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
