#ifndef NXOpen_DISPLAY_SELPREF_HXX_INCLUDED
#define NXOpen_DISPLAY_SELPREF_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_SelPref.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Display_SelPref.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Display
    {
        class SelPref;
    }
    class Builder;
    namespace Display
    {
        class _SelPrefBuilder;
        /**
            Represents a @link Display::SelPref Display::SelPref@endlink 
             <br> To obtain a instance of this class use @link Display::SelPrefCollection::CreateSelPref Display::SelPrefCollection::CreateSelPref@endlink  <br> */
        class NXOPENCPPEXPORT SelPref : public Builder
        {
            /** Represents the mouse gesture type */
            public: enum MouseGesture
            {
                MouseGestureLasso/** lasso */ ,
                MouseGestureRectangle/** rectangle */ 
            };

            /** Represents the selection rule type */
            public: enum SelectionRule
            {
                SelectionRuleInside/** inside */ ,
                SelectionRuleOutside/** outside */ ,
                SelectionRuleCrossing/** crossing */ ,
                SelectionRuleInsideCrossing/** inside crossing */ ,
                SelectionRuleOutsideCrossing/** outside crossing */ 
            };

            /** Represents the shaded views type */
            public: enum ShadedViews
            {
                ShadedViewsHighlightEdges/** highlight edges */ ,
                ShadedViewsHighlightFaces/** highlight faces */ 
            };

            /** Represents the face analysis views type */
            public: enum FaceAnalysisViews
            {
                FaceAnalysisViewsHighlightEdges/** highlight edges */ ,
                FaceAnalysisViewsHighlightFaces/** highlight faces */ 
            };

            /** Represents the selection radius type */
            public: enum SelectionRadius
            {
                SelectionRadiusMedium/** medium */ ,
                SelectionRadiusSmall/** small */ ,
                SelectionRadiusLarge/** large */ 
            };

            /** Represents the method type */
            public: enum Method
            {
                MethodSimple/** simple */ ,
                MethodWcs/** wcs */ ,
                MethodWcsLeft/** wcs left */ ,
                MethodWcsRight/** wcs right */ 
            };

            private: friend class  _SelPrefBuilder;
            protected: SelPref();
            /**Returns  the mouse gesture type  <br> License requirements : None */
            public: NXOpen::Display::SelPref::MouseGesture MouseGestureType
            (
            );
            /**Sets  the mouse gesture type  <br> License requirements : None */
            public: void SetMouseGestureType
            (
                NXOpen::Display::SelPref::MouseGesture mouseGestureType /** mousegesturetype */ 
            );
            /**Returns  the selection rule type  <br> License requirements : None */
            public: NXOpen::Display::SelPref::SelectionRule SelectionRuleType
            (
            );
            /**Sets  the selection rule type  <br> License requirements : None */
            public: void SetSelectionRuleType
            (
                NXOpen::Display::SelPref::SelectionRule selectionRuleType /** selectionruletype */ 
            );
            /**Returns  the highlight selection on rollover toggle  <br> License requirements : None */
            public: bool HighlightSelectionOnRolloverToggle
            (
            );
            /**Sets  the highlight selection on rollover toggle  <br> License requirements : None */
            public: void SetHighlightSelectionOnRolloverToggle
            (
                bool highlightSelectionOnRolloverToggle /** highlightselectiononrollovertoggle */ 
            );
            /**Returns  the rollover delay  <br> License requirements : None */
            public: int RolloverDelay
            (
            );
            /**Sets  the rollover delay  <br> License requirements : None */
            public: void SetRolloverDelay
            (
                int rolloverDelay /** rolloverdelay */ 
            );
            /**Returns  the highlight with thick width toggle  <br> License requirements : None */
            public: bool HighlightWithThickWidthToggle
            (
            );
            /**Sets  the highlight with thick width toggle  <br> License requirements : None */
            public: void SetHighlightWithThickWidthToggle
            (
                bool highlightWithThickWidthToggle /** highlightwiththickwidthtoggle */ 
            );
            /**Returns  the highlight hidden edges toggle  <br> License requirements : None */
            public: bool HighlightHiddenEdgesToggle
            (
            );
            /**Sets  the highlight hidden edges toggle  <br> License requirements : None */
            public: void SetHighlightHiddenEdgesToggle
            (
                bool highlightHiddenEdgesToggle /** highlighthiddenedgestoggle */ 
            );
            /**Returns  the shaded views type  <br> License requirements : None */
            public: NXOpen::Display::SelPref::ShadedViews ShadedViewsType
            (
            );
            /**Sets  the shaded views type  <br> License requirements : None */
            public: void SetShadedViewsType
            (
                NXOpen::Display::SelPref::ShadedViews shadedViewsType /** shadedviewstype */ 
            );
            /**Returns  the face analysis views type  <br> License requirements : None */
            public: NXOpen::Display::SelPref::FaceAnalysisViews FaceAnalysisViewsType
            (
            );
            /**Sets  the face analysis views type  <br> License requirements : None */
            public: void SetFaceAnalysisViewsType
            (
                NXOpen::Display::SelPref::FaceAnalysisViews faceAnalysisViewsType /** faceanalysisviewstype */ 
            );
            /**Returns  the quick pick on delay toggle  <br> License requirements : None */
            public: bool QuickPickOnDelayToggle
            (
            );
            /**Sets  the quick pick on delay toggle  <br> License requirements : None */
            public: void SetQuickPickOnDelayToggle
            (
                bool quickPickOnDelayToggle /** quickpickondelaytoggle */ 
            );
            /**Returns  the delay  <br> License requirements : None */
            public: int Delay
            (
            );
            /**Sets  the delay  <br> License requirements : None */
            public: void SetDelay
            (
                int delay /** delay */ 
            );
            /**Returns  the selection radius type  <br> License requirements : None */
            public: NXOpen::Display::SelPref::SelectionRadius SelectionRadiusType
            (
            );
            /**Sets  the selection radius type  <br> License requirements : None */
            public: void SetSelectionRadiusType
            (
                NXOpen::Display::SelPref::SelectionRadius selectionRadiusType /** selectionradiustype */ 
            );
            /**Returns  the show crosshairs toggle  <br> License requirements : None */
            public: bool ShowCrosshairsToggle
            (
            );
            /**Sets  the show crosshairs toggle  <br> License requirements : None */
            public: void SetShowCrosshairsToggle
            (
                bool showCrosshairsToggle /** showcrosshairstoggle */ 
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : None */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the method type  <br> License requirements : None */
            public: NXOpen::Display::SelPref::Method MethodType
            (
            );
            /**Sets  the method type  <br> License requirements : None */
            public: void SetMethodType
            (
                NXOpen::Display::SelPref::Method methodType /** methodtype */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
