#ifndef NXOpen_ROUTING_SBENDCORNER_HXX_INCLUDED
#define NXOpen_ROUTING_SBENDCORNER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_SBendCorner.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class SBendCorner;
    }
    class NXObject;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class SplineSegment;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _SBendCornerBuilder;
        /** 
            The Routing SBendCorner defines a S-Bend. There are 5 possible S-bend types. 
         <br> 
        The UI input is two work part line segment-ending RCPs, each of which
        implicitly provides a 3D point and vector.  An S-bend heals the
        separation between the two segments with a C1 continuous spline segment.
         <br> 
         <br> 
        To disambiguate among 5 S-bend types (see below), the user may need to
        further indicate whether the S-bend starts bending immediately at the
        end of one or both of the 2 input segments.  Some arrangements of 2
        segments do not require further user input to disambiguate among the
        possible S-bend types.
         <br> 
         <br> 
        The direction vectors of the 2 input segments must either be 
        perpendicular (types 1,2,3) or parallel (types 4,5).
         <br> 
         <br> 
        The closest distance between the (infinite) lines containing the input
        segments must be less that twice the bend radius.  If this condition
        does not hold, then 2 right angle bends could connect the 2 input
        segments, i.e., an S-bend is unnecessary.
         <br> 
         <br> 
        Every S-bend has two bends, whose radii are always equal.  Except for
        type 2 and 3, the bend angles are equal and in the range
        [ Pi/4, Pi/2 ].
         <br> 
         <br> 
        S-bends never cause a cutback of an input segment, although type 1,2,4
        S-bends may add a straight line extension to one of the segment ends
        before the bending starts.  Type 1 S-bends may add a straight line
        extension to both segment ends.
         <br> 
         <br> 
        INPUT <br> 
        <ul> 
            <li> R bend radius, which the user supplies, e.g., from a bend table.</li>
            <li> P1 Work part X,Y,Z of segment 1's end.</li>
            <li> Vec1 Tangent at P1, pointing toward the open end of the segment.</li>
            <li> P2, Vec2 Similar to segment 1 above...</li>
        </ul>  

         <br> 
            For computation solving purposes, the above input becomes a bend
            radius, height, width, and possibly a depth.
         <br> 

         <br>  OUTPUT bend angle(s): <br> 
        <ul> 
        <li> a (alpha)   (all S-bend types)</li>
        <li> g (gamma)   (Type 3 only)</li>
        <li> Extension lengths, if any.</li>
        </ul>


        Bend angles are computed at the centers of the bend arcs
         <br> 

        S-bends fall into two categories:
         <br> 

        <ul>
            <li>End tangents are perpendicular. <br> 

                Three types are possible.  In the 3D diagrams below: <br> 
                
         <br> 
                    The constructor line, AB, is the perpendicular distance
                    between the lines that the segments define. <br> 
                    <ul>
                        <li>Height (H):  length of A-B</li>
                        <li>Depth  (D):  length of A-P1</li>
                        <li>Width  (W):  length of B-P2</li>
                    </ul>
                    The A-B, A-P1, B-P2 vectors are mutually perpendicular.
                <ul>
                <li>Type 1:  does not have a middle straight line portion.
                 @code 
                
                                           /
                                         / seg1
                                   P1  /
                                     *
                                   /
                                 /
                               /
                             
                           / /
                         /  :
                     A /    :
                      |     :
                      |      ,
                      |       ,  \<---- bends meet (no straight segment)
                      |        :
                      |         :
                      |          `-,
                      |             ``-,_
                      +------------------`-*------------
                     B                      P2   seg2
                      @endcode 
         <br> 
                    The bend from segment 2 lies in the plane A,B,P2.  The bend
                    from segment 1 is always 90 degrees, and thus terminates
                    somewhere in the plane A,B,P2.  The bend from segment 1 always
                    starts on an extension of segment 1 that is a distance R from
                    A. <br> 
         <br> 
                    Segment 2 may also have to extend toward B before its bend
                    starts. <br> 
         <br> 
                    Geometrically, the height is the sum of the vertical
                    components of bend 1 and bend 2. <br> 
                    </li>
        <li>
                Type 2:  middle straight line portion
                 @code 
                                           /
                                         / seg1
                                   P1  /
                                     *
                                   /
                                 /
                               /
                             
                           / /
                         /  :
                     A /    :
                      |     :
                      |      \
                      |       \ \<---- straight segment
                      |        \
                      |         \ \<----- bend ends
                      |          `-,
                      |             ``-,_
                      +------------------`-*------------
                     B                      P2   seg2
                 @endcode 
                   <br>   Similar to Type 1: <br> 
                   <br>  The bend from segment 2 lies in the plane A,B,P2. <br> 

                         <br>  The bend from segment 1 is always 90 degrees, and thus
                        terminates somewhere in the plane A,B,P2. <br> 

                         <br>  The bend from segment 1 always starts on an extension of
                        segment 1 that is a distance R from A. <br> 

                     <br>  Unlike Type 1: <br> 
                         <br>  Segment 2's bend always starts at P2, i.e., segment 2
                        never has an extension. <br> 
                        </li>
                        <li>
                Type 3:  middle straight line portion.  user chooses between Type 2-3.
                 @code 
                                           /
                                         / seg1
                                   P1  /
                                     *
                                   
                                 / '
                               /  '
                             /   : \<---- segment 1's bend ends
                           /     |
                         /       |
                     A /         |
                      |          | \<--- straight segment
                      |          |
                      |          |
                      |          |
                      |          |
                      |           \ \<---- segment 2's bend ends
                      |            `-,_
                      +----------------`-*------------
                     B                    P2   seg2
         @endcode 
                <br>       The bend radius isn't big enough to span the height so a
                    middle straight line segment is necessary. <br> 

                 <br>      Neither segment can have an extension, i.e., the bends start
                    at P1 and P2.  Unlike in Type 2, segment 2's bend does not lie
                    in the plane A,B,P2, i.e., both bends immediately start
                    bending toward each other. <br> 
                    </li>
                </ul>
                </li>
        <li>
             <br>      End tangents are parallel, i.e., bend lies entirely within a
                plane.  This category falls into two types. <br> 
                <ul>
                <li>
                Type 4:  no middle straight line portion
                 @code 
                      seg1       P1
                    ------------*-.
                                   `.
                                     :  \<--- where bends meet
                                      `,
                                       `-*---------*--------
                               A          E2        P2   seg2
         @endcode 
                   <br>    The height, H, is length (A-P1), where A is the projection of
                    P1 onto the line that seg2 defines. <br> 

                    <br>   Because both bend angles are the same, the bends meet at half
                    the height H/2. <br> 
                </li>
                <li>
                Type 5:  middle straight line portion
                 @code 
                      seg1       P1
                    ------------*-.
                                   `.
                                     \
                                      \ \<--- middle straight line segment
                                       \
                                        `.
                                         `-*------------
                               A          P2      seg2
         @endcode 
                 <br>      The height, H, is length (A-P1), where A is the projection of
                    P1 onto the line that seg2 defines.  The width, W, is the A-P2
                    length. <br> 
                  </li>
                  </ul>
                  </li>
                  </ul>

             <br>  Support Information:  <br> 
            ===============================
             <br>  
              o  An extension as described above is the distance leading up to the 
                 bend arc. 
             <br> 
              <br> Use the @link Routing::SBendCornerCollection Routing::SBendCornerCollection@endlink  to obtain an instance. <br> */
        class NXOPENCPPEXPORT SBendCorner : public NXObject
        {
            private: friend class  _SBendCornerBuilder;
            protected: SBendCorner();
            /** Gets the segment being used to represent the S-Bend.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::SplineSegment * GetSegment
            (
            );
            /** Gets the S-Bend radius of a S-Bend corner.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double GetSBendRadius
            (
            );
            /** Returns an array of stocks for the S-Bend object  @return  Stock objects of the S-Bend corner.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::Stock *> GetSBendStocks
            (
            );
            /** Returns the data for the S-Bend object  @return  TRUE:  if bend ratio is used;
                                                                     FALSE: otherwise.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool GetSBendData
            (
                int* sbend_type /** S-Bend type */,
                NXOpen::Routing::ControlPoint ** start_rcp /** S-Bend start Control point */,
                NXOpen::Routing::ControlPoint ** end_rcp /** S-Bend end Control point */,
                NXOpen::Routing::SplineSegment ** segment /** S-Bend segment*/,
                double* radius_or_ratio /** Bend radius or bend_ratio. */
            );
            /** Set the data for the S-Bend object  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSBendData
            (
                int sbend_type /** S-Bend type */,
                NXOpen::Routing::ControlPoint * start_rcp /** The start Control point for the S-Bend. */,
                NXOpen::Routing::ControlPoint * end_rcp /** The end Control point for the S-Bend. */,
                NXOpen::Routing::SplineSegment * segment /** S-Bend segment*/,
                double radius_or_ratio /** S-Bend radius or bend_ratio. */,
                bool use_bend_ratio /** TRUE:  if bend ratio is used;
                                                                        FALSE: otherwise. */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
