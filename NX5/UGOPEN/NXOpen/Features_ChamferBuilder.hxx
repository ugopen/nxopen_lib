#ifndef NXOpen_FEATURES_CHAMFERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CHAMFERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ChamferBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ChamferBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    namespace Features
    {
        class _ChamferBuilderBuilder;
        /** Represents the chamfer builder data. 
            <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateChamferBuilder Features::FeatureCollection::CreateChamferBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ChamferBuilder : public Features::FeatureBuilder
        {
            /** This enum represents the chamfer parameter options */
            public: enum ChamferOption
            {
                ChamferOptionSymmetricOffsets/** Symmetric offsets */,
                ChamferOptionTwoOffsets/** Two offset distances */,
                ChamferOptionOffsetAndAngle/** Offset distance and angle */
            };

            /** This enum represents the offset method options */
            public: enum OffsetMethod
            {
                OffsetMethodEdgesAlongFaces/** Offset edges along faces */,
                OffsetMethodFacesAndTrim/** Offset faces and trim */
            };

            private: friend class  _ChamferBuilderBuilder;
            protected: ChamferBuilder();
            /**Sets  the smart collector  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSmartCollector
            (
                NXOpen::ScCollector * sc /** sc */ 
            );
            /**Sets  the offset reverse status  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseOffsets
            (
                bool reverse /** reverse */ 
            );
            /**Sets  the chamfer all instance status  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAllInstances
            (
                bool all_instances /** all instances */ 
            );
            /**Sets  the chamfer parameter option.
                     <br> 
                       @link Features::ChamferBuilder::ChamferOptionSymmetricOffsets Features::ChamferBuilder::ChamferOptionSymmetricOffsets@endlink 
                       @link Features::ChamferBuilder::ChamferOptionTwoOffsets Features::ChamferBuilder::ChamferOptionTwoOffsets@endlink 
                       @link Features::ChamferBuilder::ChamferOptionOffsetAndAngle Features::ChamferBuilder::ChamferOptionOffsetAndAngle@endlink 
                     <br> 
                    Each of these options correspond to a chamfer defined by two equal 
                    offset distances, two unequal offset distances, an offset distance
                    and angle respectively.
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOption
            (
                NXOpen::Features::ChamferBuilder::ChamferOption opt /** opt */ 
            );
            /**Sets   the offset method. <br> 
                       @link Features::ChamferBuilder::OffsetMethodEdgesAlongFaces Features::ChamferBuilder::OffsetMethodEdgesAlongFaces@endlink 
                       @link Features::ChamferBuilder::OffsetMethodFacesAndTrim Features::ChamferBuilder::OffsetMethodFacesAndTrim@endlink 
                        <br> 
                    The EdgesAlongFaces method is the normal chamfer in which the chamfer
                    boundary is determined by offsetting the input edges along its adjacent
                    faces. The FacesAndTrim method is the free-form chamfer in which the
                    chamfer boundary is determined by offsetting the adjacent faces of the
                    input edges, using the chamfer parameters in either case. 
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMethod
            (
                NXOpen::Features::ChamferBuilder::OffsetMethod method /** method */ 
            );
            /**Sets  the first offset distance (expression)  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFirstOffset
            (
                const NXString & offset_expression /** offset expression */ 
            );
            /**Sets  the second offset distance (expression)  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondOffset
            (
                const NXString & offset_expression /** offset expression */ 
            );
            /**Sets  the chamfer angle (expression)  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngle
            (
                const NXString & angle_expression /** angle expression */ 
            );
            /**Returns  the smart collector  <br> License requirements : None */
            public: NXOpen::ScCollector * SmartCollector
            (
            );
            /**Returns  the offset reverse status  <br> License requirements : None */
            public: bool ReverseOffsets
            (
            );
            /**Returns  the chamfer all instance status  <br> License requirements : None */
            public: bool AllInstances
            (
            );
            /**Returns  the chamfer parameter option.
                     <br> 
                       @link Features::ChamferBuilder::ChamferOptionSymmetricOffsets Features::ChamferBuilder::ChamferOptionSymmetricOffsets@endlink 
                       @link Features::ChamferBuilder::ChamferOptionTwoOffsets Features::ChamferBuilder::ChamferOptionTwoOffsets@endlink 
                       @link Features::ChamferBuilder::ChamferOptionOffsetAndAngle Features::ChamferBuilder::ChamferOptionOffsetAndAngle@endlink 
                     <br> 
                    Each of these options correspond to a chamfer defined by two equal 
                    offset distances, two unequal offset distances, an offset distance
                    and angle respectively.
                 <br> License requirements : None */
            public: NXOpen::Features::ChamferBuilder::ChamferOption Option
            (
            );
            /**Returns   the offset method. <br> 
                       @link Features::ChamferBuilder::OffsetMethodEdgesAlongFaces Features::ChamferBuilder::OffsetMethodEdgesAlongFaces@endlink 
                       @link Features::ChamferBuilder::OffsetMethodFacesAndTrim Features::ChamferBuilder::OffsetMethodFacesAndTrim@endlink 
                        <br> 
                    The EdgesAlongFaces method is the normal chamfer in which the chamfer
                    boundary is determined by offsetting the input edges along its adjacent
                    faces. The FacesAndTrim method is the free-form chamfer in which the
                    chamfer boundary is determined by offsetting the adjacent faces of the
                    input edges, using the chamfer parameters in either case. 
                 <br> License requirements : None */
            public: NXOpen::Features::ChamferBuilder::OffsetMethod Method
            (
            );
            /**Returns  the first offset distance (expression)  <br> License requirements : None */
            public: NXString FirstOffset
            (
            );
            /**Returns  the first offset expression object of chamfer.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * FirstOffsetExp
            (
            );
            /**Returns  the second offset distance (expression)  <br> License requirements : None */
            public: NXString SecondOffset
            (
            );
            /**Returns  the second offset expression object of chamfer.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * SecondOffsetExp
            (
            );
            /**Returns  the chamfer angle (expression)  <br> License requirements : None */
            public: NXString Angle
            (
            );
            /**Returns  the angle expression object of chamfer.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * AngleExp
            (
            );
            /** Creates the chamfer preview body  @return  Parasolid body  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int CreatePreview
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
