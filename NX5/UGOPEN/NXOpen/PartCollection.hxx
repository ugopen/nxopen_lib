#ifndef NXOpen_PARTCOLLECTION_HXX_INCLUDED
#define NXOpen_PARTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Part.hxx>
#include <NXOpen/PartCloseResponses.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/PartReopenReport.hxx>
#include <NXOpen/PartSaveStatus.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class PartCollection;
    class Session;
    class Part;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class FileNew;
    class LoadOptions;
    namespace PDM
    {
        class PartManager;
    }
    class PartCloseResponses;
    class PartLoadStatus;
    class PartReopenReport;
    class PartSaveStatus;
    class SaveOptions;
    /** Represents the collection of all parts in a session.

     <br>  
     Several methods including @link PartCollection::NewDisplay PartCollection::NewDisplay@endlink ,
     @link PartCollection::OpenDisplay PartCollection::OpenDisplay@endlink  and @link BasePart::SaveAs BasePart::SaveAs@endlink 
     can take part names in NX Manager command-line format while running in NX Manager mode.
     This format is as follows:
     <br> 

     @code 
         Master Part:        \@DB/part-number/revision
                             \@DB/part-number/revision/master
                             \@DB/part-number/revision/master
                             \@DB/part-number/revision/master/version
         Non-Master Part:    \@DB/part-number/revision/type/name
                             \@DB/part-number/revision/type/name/version
     @endcode 

     <br> 
     The separator character ('/') may be any character not used in
     the part-number, revision or type fields. It is inferred
     as the first character after the "\@DB" prefix.
     <br> 
     <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
    class NXOPENCPPEXPORT PartCollection : public TaggedObjectCollection
    {
        /**  @brief  Indicates the reason why it was not possible to use Design in Context (i.e. to set
                the work part to a component of the displayed part.)  

          Used as a return code for
                @link SetDisplay SetDisplay@endlink 
            */
        public: enum SdpsStatus
        {
            SdpsStatusOk/** The work part was set successfully. This code indicates 
                                                                success: all other codes indicate failure */,
            SdpsStatusOutsideModelling/** The modelling application is not active */,
            SdpsStatusDrawingDisplayed/** A drawing is currently displayed */,
            SdpsStatusInPartsList/** The Part List module is active */,
            SdpsStatusGdt/** The Tolerancing module is active */,
            SdpsStatusUnitsMismatch/** The work part and displayed part have different units */
        };

        /** Controls the reference set used when setting the work component. See @link SetWorkComponent SetWorkComponent@endlink  */
        public: enum RefsetOption
        {
            RefsetOptionEntire/** Use the "Entire Part" reference set for the new work component  */,
            RefsetOptionCurrent/** Use the component's current reference set */
        };

        /** Controls the behavior when setting the work component. See @link SetWorkComponent SetWorkComponent@endlink  */
        public: enum WorkComponentOption
        {
            WorkComponentOptionVisible/** If the given work component is not visible, chose another component that 
                                                            represents the same part. If no suitable visible component can be found,
                                                            throw an exception. This option ensures that the new work component will
                                                            always be visible. */,
            WorkComponentOptionGiven/** Use the given work component, regardless of visibility. */
        };

        private: NXOpen::Session* m_owner;
        public: explicit PartCollection(NXOpen::Session *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Iterator for accessing the contents of the collection. */
        class iterator
        {
        public:
            typedef Part * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::PartCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::PartCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link  BasePart   BasePart @endlink  with the given name. The part must have been loaded 
            in this session.
            
            An exception will be thrown if no object can be found with the given name.
             @return  The part with the given name.  <br> License requirements : None */
        public: NXOpen::BasePart * FindObject
        (
            const NXString & name /** The name of the @link  BasePart   BasePart @endlink . This may either be the full pathname of the leaf name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**  @brief Creates a new .prt part and sets this part as the display part. 

         
            
                 <br> 
                <b>Note:</b> This method should only be used to create new .prt parts.
                Use @link PartCollection::NewDisplay PartCollection::NewDisplay@endlink  to
                create other types of parts other than .prt parts.
                 <br> 
             @return  Newly created part  <br> License requirements : None */
        public: NXOpen::Part * NewDisplay
        (
            const NXString & name /** Name of new part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Part::Units units /** Units of new part */
        );
        /** Creates a new part and sets this part as the display part.  @return  Newly created part  <br> License requirements : None */
        public: NXOpen::BasePart * NewBaseDisplay
        (
            const NXString & name /** Name of new part   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::BasePart::Units units /** Units of new part */
        );
        /**  @brief Opens an existing .prt part, but does not set it to be the displayed part. 

         
                See @link OpenDisplay OpenDisplay@endlink .

                 <br> 
                <b>Note:</b> This method should only be used to open .prt parts.
                Use @link PartCollection::OpenBase PartCollection::OpenBase@endlink  to
                open other types of parts other than .prt parts.
                 <br> 
             @return   <br> License requirements : None */
        public: NXOpen::Part * Open
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** load_status /** Parts
                        that could not be loaded and their associated errors. */
        );
        /** Opens an existing part, but does not set it to be the displayed part.
                See @link OpenBaseDisplay OpenBaseDisplay@endlink .
             @return   <br> License requirements : None */
        public: NXOpen::BasePart * OpenBase
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** load_status /** Parts
                        that could not be loaded and their associated errors. */
        );
        /**  @brief Opens an existing .prt part and sets this part as the display part. 

         
                
                 <br> 
                <b>Note:</b> This method should only be used to open .prt parts.
                Use @link PartCollection::OpenBaseDisplay PartCollection::OpenBaseDisplay@endlink  to
                open other types of parts other than .prt parts.
                 <br> 

                This method will load components in the following manner depending
                on how the @link NXOpen::LoadOptions::ComponentsToLoad NXOpen::LoadOptions::ComponentsToLoad@endlink  
                property is set:
                 <br> 
                1) "All Components" (@link NXOpen::LoadOptions::LoadComponentsAll NXOpen::LoadOptions::LoadComponentsAll@endlink )
                   will load all components of the assembly.
                 <br> 
                 <br> 

                2) "Last Used Component Set" (@link NXOpen::LoadOptions::LoadComponentsLastSet NXOpen::LoadOptions::LoadComponentsLastSet@endlink )
                    will load the components in the last saved component set.

                 <br> 
                 <br> 

                3) "No Components" (@link NXOpen::LoadOptions::LoadComponentsNone NXOpen::LoadOptions::LoadComponentsNone@endlink ),
                   "Use Last Filter" (@link NXOpen::LoadOptions::LoadComponentsLastFilter NXOpen::LoadOptions::LoadComponentsLastFilter@endlink ) or
                   "Specify Filter" (@link NXOpen::LoadOptions::LoadComponentsSpecifyFilter NXOpen::LoadOptions::LoadComponentsSpecifyFilter@endlink )
                   will load none of the components of the assembly.
                 <br> 
             @return   <br> License requirements : None */
        public: NXOpen::Part * OpenDisplay
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** load_status /** Parts 
                        that could not be loaded and their associated errors. */
        );
        /** Opens an existing part and sets this part as the display part.

                This method will load components in the following manner depending
                on how the @link NXOpen::LoadOptions::ComponentsToLoad NXOpen::LoadOptions::ComponentsToLoad@endlink  
                property is set:
                 <br> 
                1) "All Components" (@link NXOpen::LoadOptions::LoadComponentsAll NXOpen::LoadOptions::LoadComponentsAll@endlink )
                   will load all components of the assembly.
                 <br> 
                 <br> 

                2) "Last Used Component Set" (@link NXOpen::LoadOptions::LoadComponentsLastSet NXOpen::LoadOptions::LoadComponentsLastSet@endlink )
                    will load the components in the last saved component set.

                 <br> 
                 <br> 

                3) "No Components" (@link NXOpen::LoadOptions::LoadComponentsNone NXOpen::LoadOptions::LoadComponentsNone@endlink ),
                   "Use Last Filter" (@link NXOpen::LoadOptions::LoadComponentsLastFilter NXOpen::LoadOptions::LoadComponentsLastFilter@endlink ) or
                   "Specify Filter" (@link NXOpen::LoadOptions::LoadComponentsSpecifyFilter NXOpen::LoadOptions::LoadComponentsSpecifyFilter@endlink )
                   will load none of the components of the assembly.
                 <br> 
             @return   <br> License requirements : None */
        public: NXOpen::BasePart * OpenBaseDisplay
        (
            const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartLoadStatus ** load_status /** Parts 
                        that could not be loaded and their associated errors. */
        );
        /** Saves all modified parts in a session.  <br> License requirements : None */
        public: void SaveAll
        (
            bool* any_parts_modified /** Indicates whether any parts
                        in the session were actually modified before the save operation
                        was called. If false, then no parts were modified and, thus, a
                        save was not attempted on any of the parts. */,
            NXOpen::PartSaveStatus ** save_status /** Parts that could not be saved and their associated errors. */
        );
        /** Closes all the parts open in the session.  <br> License requirements : None */
        public: void CloseAll
        (
            NXOpen::BasePart::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If 
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /** Closes all the parts open in the session.
             <br> This method is deprecated. Use the overloaded version of this method
            that takes @link BasePart::CloseModified BasePart::CloseModified@endlink  instead.
             <br>  
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: void CloseAll
        (
            NXOpen::Part::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link Part::CloseModifiedUseResponses Part::CloseModifiedUseResponses@endlink . If 
                        @link Part::CloseModifiedUseResponses Part::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /** Reopens all modified parts in the session.  @return  Report
                   containing results of reopen command  <br> License requirements : None */
        public: NXOpen::PartReopenReport * ReopenAll
        (
            NXOpen::BasePart::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If 
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /** Reopens all modified parts in the session.
             <br> This method is deprecated. Use the overloaded version of this method
            that takes @link BasePart::CloseModified BasePart::CloseModified@endlink  instead.
             <br>  
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: void ReopenAll
        (
            NXOpen::Part::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If 
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopen_report /** Report
                       containing results of reopen command */
        );
        /**Returns  the current work part of the session. This is either the displayed part, or 
                a part represented by a component in the displayed part's @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink .
                See: @link WorkComponent WorkComponent@endlink 

                 <br>  An error will be thrown if the work part is not a .prt part.  <br> 
              <br> License requirements : None */
        public: NXOpen::Part * Work
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Work() Work@endlink instead.
        @deprecated
        */
        public: NXOpen::Part * GetWork
        (
        ) { return this->Work(); }
        /**Returns  the current work part of the session. This is either the displayed part, or 
                a part represented by a component in the displayed part's @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink .
                See: @link WorkComponent WorkComponent@endlink 
              <br> License requirements : None */
        public: NXOpen::BasePart * BaseWork
        (
        );
        /**Returns  the current display part of the session. An error will be thrown if the
            display part is not a .prt part.  <br> License requirements : None */
        public: NXOpen::Part * Display
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Display() Display@endlink instead.
        @deprecated
        */
        public: NXOpen::Part * GetDisplay
        (
        ) { return this->Display(); }
        /**Returns  the current display part of the session.  <br> License requirements : None */
        public: NXOpen::BasePart * BaseDisplay
        (
        );
        /** Sets the current work part. The work component will be set to one of the visible components that 
                represent this part in the current visible assembly. See @link SetWorkComponent SetWorkComponent@endlink . 
                If no visible component is available, then an exception is thrown.
             <br> License requirements : None */
        public: void SetWork
        (
            NXOpen::BasePart * part /** The new work part. */
        );
        /**Returns 
               the work component. This is the component in the displayed part's 
               @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink  which represents the current work part. 
               Note that there may be several different components which represent the same 
               work part. In this case, one of them will be selected as the work component, while
               the others will be greyed out on the main display.
             <br> License requirements : None */
        public: NXOpen::Assemblies::Component * WorkComponent
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link WorkComponent() WorkComponent@endlink instead.
        @deprecated
        */
        public: NXOpen::Assemblies::Component * GetWorkComponent
        (
        ) { return this->WorkComponent(); }
        /**
               Sets the work component. If the part represented by the new work component is not
               already the work part, then sets the work part appropriately. The new component's 
               reference set will be set to "Entire Part".
                <br> 
               Note that if the given work component is not visible, but an alternative component
               which represents the same part is visible, then the alternative component will be chosen
               as the new work component. If no visible component can be found, an exception is thrown
                <br> 
               
             <br> License requirements : None */
        public: void SetWorkComponent
        (
            NXOpen::Assemblies::Component * work_component /** The new work component. This must be a component defined in the 
                                                                         @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink  of the current displayed part. 
                                                                         May be null, in which case the work part is reset to the displayed part.
                                                                     */,
            NXOpen::PartLoadStatus ** load_status /** Any errors found when loading the new work part. */
        );
        /**
               Sets the work component. If the part represented by the new work component is not
               already the work part, then sets the work part appropriately.
             <br> License requirements : None */
        public: void SetWorkComponent
        (
            NXOpen::Assemblies::Component * work_component /** The new work component. This must be a component defined in the 
                                                                         @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink  of the current displayed part. 
                                                                         May be null, in which case the work part is reset to the displayed part.
                                                                     */,
            NXOpen::PartCollection::RefsetOption refset_option /** Controls the reference set of the new component. */,
            NXOpen::PartCollection::WorkComponentOption visibility /** Controls the behavior if the new component is not visible */,
            NXOpen::PartLoadStatus ** load_status /** Any errors found when loading the new work part. */
        );
        /** 
                Sets the displayed part.
             @return  Returns OK if the work part could be maintained, or a status code
                                                           indicating the reason  <br> License requirements : None */
        public: NXOpen::PartCollection::SdpsStatus SetDisplay
        (
            NXOpen::BasePart * part /** The new displayed part */,
            bool maintain_work_part /** If true, and if the current work part is a component of the
                                                           new displayed part, then the work part remains unchanged. Otherwise
                                                           the work part is set to the new displayed part.
                                                       */,
            bool set_entire_part /** If true, and if maintain_work_part is true,
                                                                         the reference set of the work_component will be set 
                                                                         to "Entire Part". If false, it will be left unchanged. See
                                                                         @link NXOpen::Assemblies::ComponentAssembly::ReplaceReferenceSet NXOpen::Assemblies::ComponentAssembly::ReplaceReferenceSet@endlink 
                                                                     */,
            NXOpen::PartLoadStatus ** load_status /** Any errors found when loading the new work part. */
        );
        /** Constructs a new PartCloseResponses class. This class is used to
            communicate whether to close certain parts if they are modified during part close.  @return   <br> License requirements : None */
        public: NXOpen::PartCloseResponses * NewPartCloseResponses
        (
        );
        /** Creates a @link FileNew FileNew@endlink   @return   <br> License requirements : None */
        public: NXOpen::FileNew * FileNew
        (
        );


        private: NXOpen::LoadOptions *loadOptions;
        /** The @link LoadOptions LoadOptions@endlink  that determines how parts are loaded in this session */
        public: NXOpen::LoadOptions *LoadOptions()
        {
            return loadOptions;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link LoadOptions() LoadOptions@endlink instead.
        @deprecated
        */
        public: NXOpen::LoadOptions *GetLoadOptions() { return LoadOptions(); }
        private: NXOpen::SaveOptions *saveOptions;
        /** The @link SaveOptions SaveOptions@endlink  that determines how parts are saved in this session */
        public: NXOpen::SaveOptions *SaveOptions()
        {
            return saveOptions;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link SaveOptions() SaveOptions@endlink instead.
        @deprecated
        */
        public: NXOpen::SaveOptions *GetSaveOptions() { return SaveOptions(); }
        private: NXOpen::PDM::PartManager *pDMPartManager;
        /** The @link NXOpen::PDM::PartManager NXOpen::PDM::PartManager@endlink  that manages creation of parts in NX Manager mode */
        public: NXOpen::PDM::PartManager *PDMPartManager()
        {
            return pDMPartManager;
        }
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
