#ifndef NXOpen_DRAWINGS_GENERALVIEWSTYLE_HXX_INCLUDED
#define NXOpen_DRAWINGS_GENERALVIEWSTYLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_GeneralViewStyle.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IGeneralViewPreferences.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class GeneralViewStyle;
    }
    namespace Drawings
    {
        class ViewStyle;
    }
    class Expression;
    namespace Preferences
    {
        class IGeneralViewPreferences;
    }
    namespace Drawings
    {
        /** Represents set of General View Styles Preferences applicable to drafting views.  <br> To obtain an instance of this class, refer to @link Drawings::ViewStyle Drawings::ViewStyle@endlink  <br> */
        class NXOPENCPPEXPORT GeneralViewStyle: public virtual Preferences::IGeneralViewPreferences
        {
            private: NXOpen::Drawings::ViewStyle* m_owner;
            public: explicit GeneralViewStyle(NXOpen::Drawings::ViewStyle *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the status of silhouettes curves, if true silhouettes for 
            		    selected drawing member views added else silhouettes removed 
            		    from the selected member views. 
            		 <br> License requirements : None */
            public: bool Silhouettes
            (
            );
            /**Sets  the status of silhouettes curves, if true silhouettes for 
            		    selected drawing member views added else silhouettes removed 
            		    from the selected member views. 
            		 <br> License requirements : drafting ("DRAFTING") */
            public: void SetSilhouettes
            (
                bool silhouettes /** silhouettes */ 
            );
            /**Returns  the status of reference, that toggles a view from active to reference.
            		    If true, the view is considered a reference view.
            		  <br> License requirements : None */
            public: bool Reference
            (
            );
            /**Sets  the status of reference, that toggles a view from active to reference.
            		    If true, the view is considered a reference view.
            		  <br> License requirements : drafting ("DRAFTING") */
            public: void SetReference
            (
                bool reference /** reference */ 
            );
            /**Returns  the status of UV grid, if true, grid curves for selected drawing
            		    member views are added else the grid curves are removed from 
            		    the selected member views.
            	      <br> License requirements : None */
            public: bool UvGrid
            (
            );
            /**Sets  the status of UV grid, if true, grid curves for selected drawing
            		    member views are added else the grid curves are removed from 
            		    the selected member views.
            	      <br> License requirements : drafting ("DRAFTING") */
            public: void SetUvGrid
            (
                bool uv_grid /** uv grid */ 
            );
            /**Returns  the status of Automatic update, if true then position, 
            		    hidden lines, silhouettes, view bounds, section views, and 
            		    section view details updated after a model change else 
            		    the above items are not updated after a model change. 
            		 <br> License requirements : None */
            public: bool AutomaticUpdate
            (
            );
            /**Sets  the status of Automatic update, if true then position, 
            		    hidden lines, silhouettes, view bounds, section views, and 
            		    section view details updated after a model change else 
            		    the above items are not updated after a model change. 
            		 <br> License requirements : drafting ("DRAFTING") */
            public: void SetAutomaticUpdate
            (
                bool automatic_update /** automatic update */ 
            );
            /**Returns  the status of Automatic Anchor Point. <br> License requirements : None */
            public: bool AutomaticAnchorPoint
            (
            );
            /**Sets  the status of Automatic Anchor Point. <br> License requirements : drafting ("DRAFTING") */
            public: void SetAutomaticAnchorPoint
            (
                bool automatic_anchor_point /** automatic anchor point */ 
            );
            /**Sets  the boundary status. <br> License requirements : drafting ("DRAFTING") */
            public: void SetBoundaryStatus
            (
                bool boundary_status /** boundary status */ 
            );
            /**Returns  the boundary status. <br> License requirements : None */
            public: bool BoundaryStatus
            (
            );
            /**Returns  the render count. <br> License requirements : None */
            public: int RenderCount
            (
            );
            /**Sets  the render count. <br> License requirements : drafting ("DRAFTING") */
            public: void SetRenderCount
            (
                int render_count /** render count */ 
            );
            /**Returns  the display of view label. <br> License requirements : None */
            public: bool ViewLabel
            (
            );
            /**Sets  the display of view label. <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewLabel
            (
                bool view_label /** view label */ 
            );
            /**Returns  the display of scale label. <br> License requirements : None */
            public: bool ScaleLabel
            (
            );
            /**Sets  the display of scale label. <br> License requirements : drafting ("DRAFTING") */
            public: void SetScaleLabel
            (
                bool scale_label /** scale label */ 
            );
            /** the status of center line, if true automatically creates 
            		    linear, cylindrical, and bolt circle centerlines (with a 
            		    circular instance set) for views where the hole or pin axis
            		    is perpendicular or parallel to the plane of the drawing view.
            	     <br> License requirements : drafting ("DRAFTING") */
            public: void SetCenterlines
            (
                bool centerlines /** centerlines */ 
            );
            /**Returns  the value of tolerance, that specifies a chord height tolerance
            		    value for silhouette and hidden line generation in a given 
            		    drawing view.
                     <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the value of tolerance, that specifies a chord height tolerance
            		    value for silhouette and hidden line generation in a given 
            		    drawing view.
                     <br> License requirements : drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the value of angle of a member view. <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the value of angle of a member view. <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the scale of a member view. <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale of a member view. <br> License requirements : drafting ("DRAFTING") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the expression for scale  <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Expression * ExpressionForScale
            (
            );
            /**Sets  the expression for scale  <br> License requirements : drafting ("DRAFTING") */
            public: void SetExpressionForScale
            (
                NXOpen::Expression * expression_for_scale /** expression for scale */ 
            );
            /**Returns  the extracted edge, that provides an alternative way to display
            		    model geometry in a drawing view.
                     <br> License requirements : None */
            public: NXOpen::Preferences::GeneralExtractedEdgesOption ExtractedEdges
            (
            );
            /**Sets  the extracted edge, that provides an alternative way to display
            		    model geometry in a drawing view.
                     <br> License requirements : drafting ("DRAFTING") */
            public: void SetExtractedEdges
            (
                NXOpen::Preferences::GeneralExtractedEdgesOption edges_option /** edges option */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
