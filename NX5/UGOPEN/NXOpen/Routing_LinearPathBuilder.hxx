#ifndef NXOpen_ROUTING_LINEARPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_LINEARPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_LinearPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_ElbowSnapSettings.hxx>
#include <NXOpen/Routing_LinearPathBuilder.hxx>
#include <NXOpen/Routing_LinearPathSettings.hxx>
#include <NXOpen/Routing_PathStockBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class LinearPathBuilder;
    }
    class Builder;
    class NXObject;
    class Point;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ElbowSnapSettings;
    }
    namespace Routing
    {
        class LinearPathSettings;
    }
    namespace Routing
    {
        class PathStockBuilder;
    }
    namespace Routing
    {
        class _LinearPathBuilderBuilder;
        /** Builder for creating routing linear paths.   These paths can include
                constrained line segments,  bend corners and elbows.  This fuctionality
                can only be used with the Assemblies Positioning functionality.  The
                work part must have been converted to use Assemblies Positioning
                using the Convert Mating Conditions tool.


                To create a control point (and it's associated segment) first create
                a preview control point, then define the control point using either
                a smart point (@link Routing::LinearPathBuilder::SetControlPointDefiningPoint Routing::LinearPathBuilder::SetControlPointDefiningPoint@endlink ), 
                or some other object 
                (@link Routing::LinearPathBuilder::SetControlPointDefiningObject Routing::LinearPathBuilder::SetControlPointDefiningObject@endlink ).  

             <br> To create a new instance of this class, use @link Routing::RouteManager::CreateLinearPathBuilder Routing::RouteManager::CreateLinearPathBuilder@endlink  <br> */
        class NXOPENCPPEXPORT LinearPathBuilder : public Builder
        {
            private: friend class  _LinearPathBuilderBuilder;
            protected: LinearPathBuilder();
            /**Returns  the elbow snapping settings for determining location of control points
                        as the user drags their mouse.  Only useful in the UI.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ElbowSnapSettings * ElbowSnapSettings
            (
            );
            /**Sets  the elbow snapping settings for determining location of control points
                        as the user drags their mouse.  Only useful in the UI.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetElbowSnapSettings
            (
                NXOpen::Routing::ElbowSnapSettings * snap_settings /** snap settings */ 
            );
            /**Returns  the builder for assigning stock to the new path. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::PathStockBuilder * PathStockBuilder
            (
            );
            /**Sets  the builder for assigning stock to the new path. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPathStockBuilder
            (
                NXOpen::Routing::PathStockBuilder * stock_builder /** stock builder */ 
            );
            /**Returns  the settings that determine what constraints to apply to the new path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::LinearPathSettings * LinearPathSettings
            (
            );
            /**Sets  the settings that determine what constraints to apply to the new path.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLinearPathSettings
            (
                NXOpen::Routing::LinearPathSettings * settings_builder /** settings builder */ 
            );
            /** Add a new control point to the path.  This control point is considered
                        to be a preview control point to show what the path will look like
                        interactively.   This control point will be deleted when the commit
                        method is invoked unless the rcp has been fully defined.
                         @return  Preview control point, 
                                                                                will be NULL if there
                                                                                is already a control 
                                                                                point at the given location. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * AddPreviewControlPoint
            (
                const NXOpen::Point3d & location /** location */ 
            );
            /** Fully defines a preview control point using the given point.  The control
                        point is not made associative directly to the input point.  The control point
                        is made associative (depending on the linear path settings) to the
                        objects that the input point is associative to. 
                        
                        A control point may only be defined once. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetControlPointDefiningPoint
            (
                NXOpen::Routing::ControlPoint * preview_rcp /** Must be a control point
                                                                                    created by 
                                    @link Routing::LinearPathBuilder::AddPreviewControlPoint Routing::LinearPathBuilder::AddPreviewControlPoint@endlink */,
                NXOpen::Point * point /** NULL not allowed. */
            );
            /** Fully defines a preview control point.  The preview control point's location is
                        set to the given position, and the control point is constrained to the
                        given object (depending on the linear path settings).  

                        A control point may only be defined once. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetControlPointDefiningObject
            (
                NXOpen::Routing::ControlPoint * preview_rcp /** Must be a control point
                                                                                    created by 
                                    @link Routing::LinearPathBuilder::AddPreviewControlPoint Routing::LinearPathBuilder::AddPreviewControlPoint@endlink */,
                const NXOpen::Point3d & position /** position */ ,
                NXOpen::NXObject * object /** NULL allowed. */
            );
            /** Removes the last fully-defined control point in the path.  Also removes any 
                        preview control points.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void RemoveLastNonPreviewControlPoint
            (
            );
            /** Notifies the builder that some routing preferences have changed, and that the
                        builder (and it's associated builders) must update their values to refelect those
                        changes.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SettingChanged
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
