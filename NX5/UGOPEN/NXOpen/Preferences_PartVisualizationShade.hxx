#ifndef NXOpen_PREFERENCES_PARTVISUALIZATIONSHADE_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTVISUALIZATIONSHADE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartVisualizationShade.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class PartVisualizationShade;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of shade visualization preferences applicable to entire part <br> To obtain an instance of this class, refer to @link Preferences::PartPreferences Preferences::PartPreferences@endlink  <br> */
        class NXOPENCPPEXPORT PartVisualizationShade
        {
            /** Describes the available tolerance types for Shaded View. Each of these options maps tolerance values to 
             three specific faceting operations: Facet Edge Tolerance, Facet Chord Tolerance, and Angular Tolerance.  */
            public: enum ShadedViewToleranceType
            {
                ShadedViewToleranceTypeCoarse/** For Coarse: Facet Edge Tolerance is 0.01, Facet 
                                                                                            Chord Tolerance is 0.01, and Angular Tolerance is 0.0  */,
                ShadedViewToleranceTypeStandard/** For Standard: Facet Edge Tolerance is 0.005, Facet 
                                                                                            Chord Tolerance is 0.005 , and Angular Tolerance is 15 */,
                ShadedViewToleranceTypeFine/** For Fine: Facet Edge Tolerance is 0.0005, Facet 
                                                                                            Chord Tolerance is 0.0025, and Angular Tolerance is 6 */,
                ShadedViewToleranceTypeExtrafine/** For Extrafine: Facet Edge Tolerance is 0.005, Facet 
                                                                                            Chord Tolerance is 0.001, and Angular Tolerance is 6 */,
                ShadedViewToleranceTypeUltrafine/** For Ultrafine: Facet Edge Tolerance is 0.0005, Facet 
                                                                                            Chord Tolerance is 0.0005, and Angular Tolerance is 3 */,
                ShadedViewToleranceTypeCustomize/** Customize. User can specify the Edge Tolerance,
                                                                                            Face Tolerance and Angle Tolerance specifically. */
            };

            /** Describes the available tolerance types for Advanced View. Each of these options maps tolerance values to 
               for specific operations : Curve Edge Chord Distance, Surface Chord Distance, Angular Tolerance, Facet Width 
               Tolerance */
            public: enum AdvViewToleranceType
            {
                AdvViewToleranceTypeCoarse/** Coarse  */,
                AdvViewToleranceTypeStandard/** Standard*/,
                AdvViewToleranceTypeFine/** Fine  */,
                AdvViewToleranceTypeExtrafine/** Extrafine */,
                AdvViewToleranceTypeSuperfine/** Superfine */,
                AdvViewToleranceTypeUltrafine/** Ultrafine  */,
                AdvViewToleranceTypeCustomize/** Custamize. User can specify the Edge Tolerance,
                                                                                            Face Tolerance and Angle Tolerance, Width Tolerance
                                                                                            specifically.  */
            };

            /** Describes whether the applied changes are applicable to visible object or all object or no object */
            public: enum ViewUpdateModeType
            {
                ViewUpdateModeTypeVisibleObject/** Applicable only to visible object */,
                ViewUpdateModeTypeAllObject/** Applicable to all object */,
                ViewUpdateModeTypeNone/** No object */
            };

            /** Describes whether the shaded face edges are having no color or body color or user defined color. */
            public: enum ShadedFaceEdge
            {
                ShadedFaceEdgeOff/** Option is off */,
                ShadedFaceEdgeBodyColor/** Body Color  */,
                ShadedFaceEdgeSpecifyColor/** Specified Color */
            };

            /** Describes whether the shaded face edges are invisible or dashed visible or with a color to depict the hidden geometry */
            public: enum HiddenShadedFaceEdges
            {
                HiddenShadedFaceEdgesInvisible/** If selected, shaded face edges that are 
                                                                                           hidden are not displayed  */,
                HiddenShadedFaceEdgesDashed/** If selected, hidden shaded face edges are 
                                                                                           displayed in the body color with a dashed line 
                                                                                           font. */,
                HiddenShadedFaceEdgesHiddenColor/** If any color is selected, hidden shaded face 
                                                                                            edges are displayed in that color.*/
            };

            private: NXOpen::Preferences::PartPreferences* m_owner;
            public: explicit PartVisualizationShade(NXOpen::Preferences::PartPreferences *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the tolerance for shaded view.  <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationShade::ShadedViewToleranceType ShadedViewTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShadedViewTolerance() ShadedViewTolerance@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartVisualizationShade::ShadedViewToleranceType GetShadedViewTolerance
            (
            ) { return this->ShadedViewTolerance(); }
            /**Sets  the tolerance for shaded view.  <br> License requirements : None */
            public: void SetShadedViewTolerance
            (
                NXOpen::Preferences::PartVisualizationShade::ShadedViewToleranceType shaded_view_tolerance /** shaded view tolerance */ 
            );
            /**Returns  the edge tolerance for shaded view.  <br> License requirements : None */
            public: double ShadedViewEdgeTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShadedViewEdgeTolerance() ShadedViewEdgeTolerance@endlink instead.
            @deprecated
            */
            public: double GetShadedViewEdgeTolerance
            (
            ) { return this->ShadedViewEdgeTolerance(); }
            /**Sets  the edge tolerance for shaded view.  <br> License requirements : None */
            public: void SetShadedViewEdgeTolerance
            (
                double shaded_view_edge_tolerance /** shaded view edge tolerance */ 
            );
            /**Returns  the face tolerance for shaded view.  <br> License requirements : None */
            public: double ShadedViewFaceTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShadedViewFaceTolerance() ShadedViewFaceTolerance@endlink instead.
            @deprecated
            */
            public: double GetShadedViewFaceTolerance
            (
            ) { return this->ShadedViewFaceTolerance(); }
            /**Sets  the face tolerance for shaded view.  <br> License requirements : None */
            public: void SetShadedViewFaceTolerance
            (
                double shaded_view_face_tolerance /** shaded view face tolerance */ 
            );
            /**Returns  the angle tolerance for shaded view.  <br> License requirements : None */
            public: double ShadedViewAngleTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShadedViewAngleTolerance() ShadedViewAngleTolerance@endlink instead.
            @deprecated
            */
            public: double GetShadedViewAngleTolerance
            (
            ) { return this->ShadedViewAngleTolerance(); }
            /**Sets  the angle tolerance for shaded view.  <br> License requirements : None */
            public: void SetShadedViewAngleTolerance
            (
                double shaded_view_angle_tolerance /** shaded view angle tolerance */ 
            );
            /**Returns  the update mode for shaded view.  <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationShade::ViewUpdateModeType ShadedViewUpdateMode
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShadedViewUpdateMode() ShadedViewUpdateMode@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartVisualizationShade::ViewUpdateModeType GetShadedViewUpdateMode
            (
            ) { return this->ShadedViewUpdateMode(); }
            /**Sets  the update mode for shaded view.  <br> License requirements : None */
            public: void SetShadedViewUpdateMode
            (
                NXOpen::Preferences::PartVisualizationShade::ViewUpdateModeType shaded_view_update_mode /** shaded view update mode */ 
            );
            /**Returns  the tolerance for advanced visualization views.  <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationShade::AdvViewToleranceType AdvancedVisViewTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AdvancedVisViewTolerance() AdvancedVisViewTolerance@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartVisualizationShade::AdvViewToleranceType GetAdvancedVisViewTolerance
            (
            ) { return this->AdvancedVisViewTolerance(); }
            /**Sets  the tolerance for advanced visualization views.  <br> License requirements : None */
            public: void SetAdvancedVisViewTolerance
            (
                NXOpen::Preferences::PartVisualizationShade::AdvViewToleranceType advanced_vis_view_tolerance /** advanced vis view tolerance */ 
            );
            /**Returns  the edge tolerance for advanced visualization views.   <br> License requirements : None */
            public: double AdvancedVisViewEdgeTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AdvancedVisViewEdgeTolerance() AdvancedVisViewEdgeTolerance@endlink instead.
            @deprecated
            */
            public: double GetAdvancedVisViewEdgeTolerance
            (
            ) { return this->AdvancedVisViewEdgeTolerance(); }
            /**Sets  the edge tolerance for advanced visualization views.   <br> License requirements : None */
            public: void SetAdvancedVisViewEdgeTolerance
            (
                double advanced_vis_view_edge_tolerance /** advanced vis view edge tolerance */ 
            );
            /**Returns  the face tolerance for advanced visualization views.   <br> License requirements : None */
            public: double AdvancedVisViewFaceTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AdvancedVisViewFaceTolerance() AdvancedVisViewFaceTolerance@endlink instead.
            @deprecated
            */
            public: double GetAdvancedVisViewFaceTolerance
            (
            ) { return this->AdvancedVisViewFaceTolerance(); }
            /**Sets  the face tolerance for advanced visualization views.   <br> License requirements : None */
            public: void SetAdvancedVisViewFaceTolerance
            (
                double advanced_vis_view_face_tolerance /** advanced vis view face tolerance */ 
            );
            /**Returns  the angle tolerance for advanced visualization views.  <br> License requirements : None */
            public: double AdvancedVisViewAngleTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AdvancedVisViewAngleTolerance() AdvancedVisViewAngleTolerance@endlink instead.
            @deprecated
            */
            public: double GetAdvancedVisViewAngleTolerance
            (
            ) { return this->AdvancedVisViewAngleTolerance(); }
            /**Sets  the angle tolerance for advanced visualization views.  <br> License requirements : None */
            public: void SetAdvancedVisViewAngleTolerance
            (
                double advanced_vis_view_angle_tolerance /** advanced vis view angle tolerance */ 
            );
            /**Returns  the width tolerance for advanced Visualization Views.   <br> License requirements : None */
            public: double AdvancedVisViewWidthTolerance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AdvancedVisViewWidthTolerance() AdvancedVisViewWidthTolerance@endlink instead.
            @deprecated
            */
            public: double GetAdvancedVisViewWidthTolerance
            (
            ) { return this->AdvancedVisViewWidthTolerance(); }
            /**Sets  the width tolerance for advanced Visualization Views.   <br> License requirements : None */
            public: void SetAdvancedVisViewWidthTolerance
            (
                double advanced_vis_view_width_tolerance /** advanced vis view width tolerance */ 
            );
            /**Returns  the update mode for advanced visualization views.  <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationShade::ViewUpdateModeType AdvancedVisViewUpdateMode
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link AdvancedVisViewUpdateMode() AdvancedVisViewUpdateMode@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartVisualizationShade::ViewUpdateModeType GetAdvancedVisViewUpdateMode
            (
            ) { return this->AdvancedVisViewUpdateMode(); }
            /**Sets  the update mode for advanced visualization views.  <br> License requirements : None */
            public: void SetAdvancedVisViewUpdateMode
            (
                NXOpen::Preferences::PartVisualizationShade::ViewUpdateModeType advanced_vis_view_update_mode /** advanced vis view update mode */ 
            );
            /**Returns  the shade hidden geometry color.   <br> License requirements : None */
            public: int HiddenGeometryColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HiddenGeometryColor() HiddenGeometryColor@endlink instead.
            @deprecated
            */
            public: int GetHiddenGeometryColor
            (
            ) { return this->HiddenGeometryColor(); }
            /**Sets  the shade hidden geometry color.   <br> License requirements : None */
            public: void SetHiddenGeometryColor
            (
                int hidden_geom_color /** hidden geom color */ 
            );
            /**Returns  the shaded face edges option.
             <br> This property is deprecated. Use @link NXOpen::Preferences::ViewVisualizationVisual::ShadedEdgeStyleNXOpen::Preferences::ViewVisualizationVisual::ShadedEdgeStyle @endlink and @link NXOpen::Preferences::ViewVisualizationVisual::SetShadedEdgeStyleNXOpen::Preferences::ViewVisualizationVisual::SetShadedEdgeStyle @endlink  instead.
             <br>  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationShade::ShadedFaceEdge ShadedFaceEdgeOption
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShadedFaceEdgeOption() ShadedFaceEdgeOption@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartVisualizationShade::ShadedFaceEdge GetShadedFaceEdgeOption
            (
            ) { return this->ShadedFaceEdgeOption(); }
            /**Sets  the shaded face edges option.
             <br> This property is deprecated. Use @link NXOpen::Preferences::ViewVisualizationVisual::ShadedEdgeStyleNXOpen::Preferences::ViewVisualizationVisual::ShadedEdgeStyle @endlink and @link NXOpen::Preferences::ViewVisualizationVisual::SetShadedEdgeStyleNXOpen::Preferences::ViewVisualizationVisual::SetShadedEdgeStyle @endlink  instead.
             <br>  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : None */
            public: void SetShadedFaceEdgeOption
            (
                NXOpen::Preferences::PartVisualizationShade::ShadedFaceEdge shaded_face_edge_option /** shaded face edge option */ 
            );
            /**Returns  the shaded edge faces color.
             <br> This property is deprecated. Use @link NXOpen::Preferences::ViewVisualizationVisual::ShadedEdgeColorNXOpen::Preferences::ViewVisualizationVisual::ShadedEdgeColor @endlink and @link NXOpen::Preferences::ViewVisualizationVisual::SetShadedEdgeColorNXOpen::Preferences::ViewVisualizationVisual::SetShadedEdgeColor @endlink  instead.
             <br>  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : None */
            public: int ShadedFaceEdgesColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShadedFaceEdgesColor() ShadedFaceEdgesColor@endlink instead.
            @deprecated
            */
            public: int GetShadedFaceEdgesColor
            (
            ) { return this->ShadedFaceEdgesColor(); }
            /**Sets  the shaded edge faces color.
             <br> This property is deprecated. Use @link NXOpen::Preferences::ViewVisualizationVisual::ShadedEdgeColorNXOpen::Preferences::ViewVisualizationVisual::ShadedEdgeColor @endlink and @link NXOpen::Preferences::ViewVisualizationVisual::SetShadedEdgeColorNXOpen::Preferences::ViewVisualizationVisual::SetShadedEdgeColor @endlink  instead.
             <br>  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : None */
            public: void SetShadedFaceEdgesColor
            (
                int shaded_face_edges_color /** shaded face edges color */ 
            );
            /**Returns  the shaded hidden shaded face edges option.
             <br> This property is deprecated. Use @link NXOpen::Preferences::ViewVisualizationVisual::HiddenEdgeStyleNXOpen::Preferences::ViewVisualizationVisual::HiddenEdgeStyle @endlink and @link NXOpen::Preferences::ViewVisualizationVisual::SetHiddenEdgeStyleNXOpen::Preferences::ViewVisualizationVisual::SetHiddenEdgeStyle @endlink  instead.
             <br>  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : None */
            public: NXOpen::Preferences::PartVisualizationShade::HiddenShadedFaceEdges HiddenShadedFaceEdgesOption
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HiddenShadedFaceEdgesOption() HiddenShadedFaceEdgesOption@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::PartVisualizationShade::HiddenShadedFaceEdges GetHiddenShadedFaceEdgesOption
            (
            ) { return this->HiddenShadedFaceEdgesOption(); }
            /**Sets  the shaded hidden shaded face edges option.
             <br> This property is deprecated. Use @link NXOpen::Preferences::ViewVisualizationVisual::HiddenEdgeStyleNXOpen::Preferences::ViewVisualizationVisual::HiddenEdgeStyle @endlink and @link NXOpen::Preferences::ViewVisualizationVisual::SetHiddenEdgeStyleNXOpen::Preferences::ViewVisualizationVisual::SetHiddenEdgeStyle @endlink  instead.
             <br>  
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : None */
            public: void SetHiddenShadedFaceEdgesOption
            (
                NXOpen::Preferences::PartVisualizationShade::HiddenShadedFaceEdges hidden_shaded_face_edges_choice /** hidden shaded face edges choice */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
