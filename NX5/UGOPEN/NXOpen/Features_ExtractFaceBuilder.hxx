#ifndef NXOpen_FEATURES_EXTRACTFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EXTRACTFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ExtractFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ExtractFaceBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ExtractFaceBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectFace;
    class SelectFaceList;
    class SelectObjectList;
    namespace Features
    {
        class _ExtractFaceBuilderBuilder;
        /**
            Represents a @link Features::ExtractFace Features::ExtractFace@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateExtractFaceBuilder Features::FeatureCollection::CreateExtractFaceBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ExtractFaceBuilder : public Features::FeatureBuilder
        {
            /** enum for feature type being extracted */
            public: enum ExtractType
            {
                ExtractTypeFace/** type to extract face */,
                ExtractTypeRegionOfFaces/** type to extract region */,
                ExtractTypeBody/** type to extract body */
            };

            /** enum for scope of part*/
            public: enum ParentPartType
            {
                ParentPartTypeWorkPart/** intra part mode */,
                ParentPartTypeOtherPart/** inter part mode */,
                ParentPartTypePositionIndependent/** position independent mode */
            };

            /** type of resulting surface */
            public: enum FaceSurfaceType
            {
                FaceSurfaceTypeSameAsOriginal/** extracted surface same as original */,
                FaceSurfaceTypePolynomialCubic/** extracted surface is poly cubic approx. of orinal surface */,
                FaceSurfaceTypeGeneralBSurface/** extracted surface is B-surface approx. of orinal surface */
            };

            private: friend class  _ExtractFaceBuilderBuilder;
            protected: ExtractFaceBuilder();
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::ExtractType Type
            (
            );
            /**Sets  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::ExtractFaceBuilder::ExtractType type /** type */ 
            );
            /**Returns  the source part type  <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::ParentPartType ParentPart
            (
            );
            /**Sets  the source part type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetParentPart
            (
                NXOpen::Features::ExtractFaceBuilder::ParentPartType parentPart /** parentpart */ 
            );
            /**Returns  the faces  <br> License requirements : None */
            public: NXOpen::SelectFaceList * FacesToExtract
            (
            );
            /**Returns  the Face Normal  <br> License requirements : None */
            public: bool FaceReverseDirection
            (
            );
            /**Sets  the Face Normal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceReverseDirection
            (
                bool faceNormal /** facenormal */ 
            );
            /**Returns  the seed faces  <br> License requirements : None */
            public: NXOpen::SelectFace * SeedFace
            (
            );
            /**Returns  the seed face normal  <br> License requirements : None */
            public: bool SeedReverseDirection
            (
            );
            /**Sets  the seed face normal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSeedReverseDirection
            (
                bool seedNormal /** seednormal */ 
            );
            /**Returns  the boundary faces  <br> License requirements : None */
            public: NXOpen::SelectFaceList * BoundaryFaces
            (
            );
            /**Returns  the traverse interior edges  <br> License requirements : None */
            public: bool TraverseInteriorEdges
            (
            );
            /**Sets  the traverse interior edges  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTraverseInteriorEdges
            (
                bool traverseInteriorEdges /** traverseinterioredges */ 
            );
            /**Returns  the use tangent angles  <br> License requirements : None */
            public: bool UseTangentEdgeAngles
            (
            );
            /**Sets  the use tangent angles  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUseTangentEdgeAngles
            (
                bool useTangentAngles /** usetangentangles */ 
            );
            /**Returns  the angle Tolerance  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle Tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the bodies  <br> License requirements : None */
            public: NXOpen::SelectObjectList * BodyToExtract
            (
            );
            /**Returns  the body Normal  <br> License requirements : None */
            public: bool BodyReverseDirection
            (
            );
            /**Sets  the body Normal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBodyReverseDirection
            (
                bool bodyNormal /** bodynormal */ 
            );
            /**Returns  the associative  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the fix at timestamp  <br> License requirements : None */
            public: bool FixAtCurrentTimestamp
            (
            );
            /**Sets  the fix at timestamp  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFixAtCurrentTimestamp
            (
                bool fixAtTimestamp /** fixattimestamp */ 
            );
            /**Returns  the delete holes  <br> License requirements : None */
            public: bool DeleteHoles
            (
            );
            /**Sets  the delete holes  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeleteHoles
            (
                bool deleteHoles /** deleteholes */ 
            );
            /**Returns  the hide original  <br> License requirements : None */
            public: bool HideOriginal
            (
            );
            /**Sets  the hide original  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHideOriginal
            (
                bool hideOriginal /** hideoriginal */ 
            );
            /**Returns  the surface type  <br> License requirements : None */
            public: NXOpen::Features::ExtractFaceBuilder::FaceSurfaceType SurfaceType
            (
            );
            /**Sets  the surface type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSurfaceType
            (
                NXOpen::Features::ExtractFaceBuilder::FaceSurfaceType surfaceType /** surfacetype */ 
            );
            /**Returns  the makepositionindependent  <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the makepositionindependent  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
