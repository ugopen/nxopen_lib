#ifndef NXOpen_SKETCHALONGPATHBUILDER_HXX_INCLUDED
#define NXOpen_SKETCHALONGPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchAlongPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SketchAlongPathBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SketchAlongPathBuilder;
    class Builder;
    class Direction;
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class Section;
    class SelectIReferenceAxis;
    class _SketchAlongPathBuilderBuilder;
    /**
    Use the @link SketchAlongPathBuilder SketchAlongPathBuilder@endlink  to create or reattach a @link Sketch Sketch@endlink  along a path.
     <br> To create a new instance of this class, use @link SketchCollection::CreateSketchAlongPathBuilder SketchCollection::CreateSketchAlongPathBuilder@endlink  <br> */
    class NXOPENCPPEXPORT SketchAlongPathBuilder : public Builder
    {
        /** Indicates the orientation of the plane */
        public: enum PlaneOrientationType
        {
            PlaneOrientationTypeNormalToPath/** Normal to Path */,
            PlaneOrientationTypeNormalToVector/** Normal to Vector */,
            PlaneOrientationTypeParallelToVector/** Parallel to Vector */,
            PlaneOrientationTypeThroughAxis/** Through Axis */
        };

        private: friend class  _SketchAlongPathBuilderBuilder;
        protected: SketchAlongPathBuilder();
        /**Returns  the path  <br> License requirements : None */
        public: NXOpen::Section * Section
        (
        );
        /**Returns  the plane location  <br> License requirements : None */
        public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * PlaneLocation
        (
        );
        /**Returns  the plane orientation type  <br> License requirements : None */
        public: NXOpen::SketchAlongPathBuilder::PlaneOrientationType PlaneOrientation
        (
        );
        /**Sets  the plane orientation type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetPlaneOrientation
        (
            NXOpen::SketchAlongPathBuilder::PlaneOrientationType planeOrientationType /** planeorientationtype */ 
        );
        /**Returns  the flag to indicate the plane normal is reversed   <br> License requirements : None */
        public: bool ReversePlaneNormal
        (
        );
        /**Sets  the flag to indicate the plane normal is reversed   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetReversePlaneNormal
        (
            bool reversePlaneNormal /** reverseplanenormal */ 
        );
        /**Returns  the plane orientation axis for one of the types of "Normal to Vector", "Parallel to Vector" and "Through Axis"  <br> License requirements : None */
        public: NXOpen::Direction * PlaneOrientationAxis
        (
        );
        /**Sets  the plane orientation axis for one of the types of "Normal to Vector", "Parallel to Vector" and "Through Axis"  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetPlaneOrientationAxis
        (
            NXOpen::Direction * vector /** vector */ 
        );
        /**Returns  the horizontal reference  <br> License requirements : None */
        public: NXOpen::SelectIReferenceAxis * Axis
        (
        );
        /**Returns  the flag to indicate the horizontal reference axis is reversed  <br> License requirements : None */
        public: bool ReverseAxis
        (
        );
        /**Sets  the flag to indicate the horizontal reference axis is reversed  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetReverseAxis
        (
            bool reverseAxis /** reverseaxis */ 
        );
        /**Returns  the parameter indicating the location of the next solution  <br> License requirements : None */
        public: double NextThroughPointSolution
        (
        );
    };
}
#undef EXPORTLIBRARY
#endif
