#ifndef NXOpen_CAM_TURNFEATUREGEOMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TURNFEATUREGEOMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurnFeatureGeomBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_FeatureGeomBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurnFeatureGeomBuilder;
    }
    namespace CAM
    {
        class FeatureGeomBuilder;
    }
    class NXObject;
    class Point;
    namespace CAM
    {
        class _TurnFeatureGeomBuilderBuilder;
        /** Represents a TurnFeatureGeom Builder  <br> To create a new instance of this class, use @link CAM::NCGroupCollection::CreateTurnFeatureGeomBuilder CAM::NCGroupCollection::CreateTurnFeatureGeomBuilder@endlink  <br> */
        class NXOPENCPPEXPORT TurnFeatureGeomBuilder : public CAM::FeatureGeomBuilder
        {
            /** The radial trim plane 1 mode options */
            public: enum RadialTrimPlane1Modes
            {
                RadialTrimPlane1ModesNone/** Plane is inactive. */,
                RadialTrimPlane1ModesPoint/** Plane is defined by a point. */,
                RadialTrimPlane1ModesDistance/** Plane is defined by a distance value. */
            };

            /** The radial trim plane 2 mode options */
            public: enum RadialTrimPlane2Modes
            {
                RadialTrimPlane2ModesNone/** Plane is inactive. */,
                RadialTrimPlane2ModesPoint/** Plane is defined by a point. */,
                RadialTrimPlane2ModesDistance/** Plane is defined by a distance value. */
            };

            /** The axial trim plane 1 mode options */
            public: enum AxialTrimPlane1Modes
            {
                AxialTrimPlane1ModesNone/** Plane is inactive. */,
                AxialTrimPlane1ModesPoint/** Plane is defined by a point. */,
                AxialTrimPlane1ModesDistance/** Plane is defined by a distance value. */
            };

            /** The axial trim plane 2 mode options */
            public: enum AxialTrimPlane2Modes
            {
                AxialTrimPlane2ModesNone/** Plane is inactive. */,
                AxialTrimPlane2ModesPoint/** Plane is defined by a point. */,
                AxialTrimPlane2ModesDistance/** Plane is defined by a distance value. */
            };

            /** The trim point 1 mode options */
            public: enum TrimPoint1Modes
            {
                TrimPoint1ModesNone/** Point is inactive. */,
                TrimPoint1ModesPoint/** Point is active. */
            };

            /** The trim point 1 angle mode options */
            public: enum TrimPoint1AngleModes
            {
                TrimPoint1AngleModesAuto/** Angle is calculated automatically. */,
                TrimPoint1AngleModesVector/** Angle is defined by a vector. */,
                TrimPoint1AngleModesAngle/** Angle is defined by a value. */
            };

            /** The trim point 2 mode options */
            public: enum TrimPoint2Modes
            {
                TrimPoint2ModesNone/** Point is inactive. */,
                TrimPoint2ModesPoint/** Point is active. */
            };

            /** The trim point 2 angle mode options */
            public: enum TrimPoint2AngleModes
            {
                TrimPoint2AngleModesAuto/** Angle is calculated automatically. */,
                TrimPoint2AngleModesVector/** Angle is defined by a vector. */,
                TrimPoint2AngleModesAngle/** Angle is defined by a value. */
            };

            private: friend class  _TurnFeatureGeomBuilderBuilder;
            protected: TurnFeatureGeomBuilder();
            /**Returns  the radial trim plane 1 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder::RadialTrimPlane1Modes RadialTrimPlane1Mode
            (
            );
            /**Sets  the radial trim plane 1 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialTrimPlane1Mode
            (
                NXOpen::CAM::TurnFeatureGeomBuilder::RadialTrimPlane1Modes radialTrimPlane1Mode /** the radial trim plane 1 mode value */
            );
            /**Returns  the radial trim plane 1 point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * RadialTrimPlane1Point
            (
            );
            /**Sets  the radial trim plane 1 point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialTrimPlane1Point
            (
                NXOpen::Point * radialTrimPlane1Point /** the radial trim plane 1 point value */
            );
            /**Returns  the radial trim plane 1 value  <br> License requirements : cam_base ("CAM BASE") */
            public: double RadialTrimPlane1Value
            (
            );
            /**Sets  the radial trim plane 1 value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialTrimPlane1Value
            (
                double radialTrimPlane1Value /** the radial trim plane 1 value value */
            );
            /**Returns  the radial trim plane 2 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder::RadialTrimPlane2Modes RadialTrimPlane2Mode
            (
            );
            /**Sets  the radial trim plane 2 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialTrimPlane2Mode
            (
                NXOpen::CAM::TurnFeatureGeomBuilder::RadialTrimPlane2Modes radialTrimPlane2Mode /** the radial trim plane 2 mode value */
            );
            /**Returns  the radial trim plane 2 point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * RadialTrimPlane2Point
            (
            );
            /**Sets  the radial trim plane 2 point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialTrimPlane2Point
            (
                NXOpen::Point * radialTrimPlane2Point /** the radial trim plane 2 point value */
            );
            /**Returns  the radial trim plane 2 value  <br> License requirements : cam_base ("CAM BASE") */
            public: double RadialTrimPlane2Value
            (
            );
            /**Sets  the radial trim plane 2 value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialTrimPlane2Value
            (
                double radialTrimPlane2Value /** the radial trim plane 2 value value */
            );
            /**Returns  the axial trim plane 1 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder::AxialTrimPlane1Modes AxialTrimPlane1Mode
            (
            );
            /**Sets  the axial trim plane 1 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialTrimPlane1Mode
            (
                NXOpen::CAM::TurnFeatureGeomBuilder::AxialTrimPlane1Modes axialTrimPlane1Mode /** the axial trim plane 1 mode value */
            );
            /**Returns  the axial trim plane 1 point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * AxialTrimPlane1Point
            (
            );
            /**Sets  the axial trim plane 1 point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialTrimPlane1Point
            (
                NXOpen::Point * axialTrimPlane1Point /** the axial trim plane 1 point value */
            );
            /**Returns  the axial trim plane 1 value  <br> License requirements : cam_base ("CAM BASE") */
            public: double AxialTrimPlane1Value
            (
            );
            /**Sets  the axial trim plane 1 value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialTrimPlane1Value
            (
                double axialTrimPlane1Value /** the axial trim plane 1 value value */
            );
            /**Returns  the axial trim plane 2 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder::AxialTrimPlane2Modes AxialTrimPlane2Mode
            (
            );
            /**Sets  the axial trim plane 2 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialTrimPlane2Mode
            (
                NXOpen::CAM::TurnFeatureGeomBuilder::AxialTrimPlane2Modes axialTrimPlane2Mode /** the axial trim plane 2 mode value */
            );
            /**Returns  the axial trim plane 2 point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * AxialTrimPlane2Point
            (
            );
            /**Sets  the axial trim plane 2 point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialTrimPlane2Point
            (
                NXOpen::Point * axialTrimPlane2Point /** the axial trim plane 2 point value */
            );
            /**Returns  the axial trim plane 2 value  <br> License requirements : cam_base ("CAM BASE") */
            public: double AxialTrimPlane2Value
            (
            );
            /**Sets  the axial trim plane 2 value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialTrimPlane2Value
            (
                double axialTrimPlane2Value /** the axial trim plane 2 value value */
            );
            /**Returns  the trim point 1 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder::TrimPoint1Modes TrimPoint1Mode
            (
            );
            /**Sets  the trim point 1 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint1Mode
            (
                NXOpen::CAM::TurnFeatureGeomBuilder::TrimPoint1Modes trimPoint1Mode /** the trim point 1 mode value */
            );
            /**Returns  the trim point 1 point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * TrimPoint1Point
            (
            );
            /**Sets  the trim point 1 point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint1Point
            (
                NXOpen::Point * trimPoint1Point /** the trim point 1 point value */
            );
            /**Returns  the trim point 1 extend distance value  <br> License requirements : cam_base ("CAM BASE") */
            public: double TrimPoint1ExtendDistance
            (
            );
            /**Sets  the trim point 1 extend distance value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint1ExtendDistance
            (
                double trimPlane1ExtendDistance /** the trim point 1 extend distance value */
            );
            /**Returns  the trim point 1 angle mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder::TrimPoint1AngleModes TrimPoint1AngleMode
            (
            );
            /**Sets  the trim point 1 angle mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint1AngleMode
            (
                NXOpen::CAM::TurnFeatureGeomBuilder::TrimPoint1AngleModes trimPoint1AngleMode /** the trim point 1 angle mode value */
            );
            /**Returns  the trim point 1 vector  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * TrimPoint1Vector
            (
            );
            /**Sets  the trim point 1 vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint1Vector
            (
                NXOpen::NXObject * trimPoint1Vector /** the trim point 1 vector value */
            );
            /**Returns  the trim point 1 angle  <br> License requirements : cam_base ("CAM BASE") */
            public: double TrimPoint1Angle
            (
            );
            /**Sets  the trim point 1 angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint1Angle
            (
                double trimPoint1Angle /** the trim point 1 angle value */
            );
            /**Returns  the trim point 1 angle offset  <br> License requirements : cam_base ("CAM BASE") */
            public: double TrimPoint1AngleOffset
            (
            );
            /**Sets  the trim point 1 angle offset  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint1AngleOffset
            (
                double trimPoint1AngleOffset /** the trim point 1 angle offset value */
            );
            /**Returns  the trim point 1 check part geometry  <br> License requirements : cam_base ("CAM BASE") */
            public: bool TrimPoint1CheckPartGeometry
            (
            );
            /**Sets  the trim point 1 check part geometry  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint1CheckPartGeometry
            (
                bool trimPoint1CheckPartGeometry /** the trim point 1 check part geometry value */
            );
            /**Returns  the trim point 2 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder::TrimPoint2Modes TrimPoint2Mode
            (
            );
            /**Sets  the trim point 2 mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint2Mode
            (
                NXOpen::CAM::TurnFeatureGeomBuilder::TrimPoint2Modes trimPoint2Mode /** the trim point 2 mode value */
            );
            /**Returns  the trim point 2 point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * TrimPoint2Point
            (
            );
            /**Sets  the trim point 2 point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint2Point
            (
                NXOpen::Point * trimPoint2Point /** the trim point 2 point value */
            );
            /**Returns  the trim point 2 extend distance value  <br> License requirements : cam_base ("CAM BASE") */
            public: double TrimPoint2ExtendDistance
            (
            );
            /**Sets  the trim point 2 extend distance value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint2ExtendDistance
            (
                double trimPlane2ExtendDistance /** the trim point 2 extend distance value */
            );
            /**Returns  the trim point 2 angle mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder::TrimPoint2AngleModes TrimPoint2AngleMode
            (
            );
            /**Sets  the trim point 2 angle mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint2AngleMode
            (
                NXOpen::CAM::TurnFeatureGeomBuilder::TrimPoint2AngleModes trimPoint2AngleMode /** the trim point 2 angle mode value */
            );
            /**Returns  the trim point 2 vector  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * TrimPoint2Vector
            (
            );
            /**Sets  the trim point 2 vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint2Vector
            (
                NXOpen::NXObject * trimPoint2Vector /** the trim point 2 vector value */
            );
            /**Returns  the trim point 2 angle  <br> License requirements : cam_base ("CAM BASE") */
            public: double TrimPoint2Angle
            (
            );
            /**Sets  the trim point 2 angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint2Angle
            (
                double trimPoint2Angle /** the trim point 2 angle value */
            );
            /**Returns  the trim point 2 angle offset  <br> License requirements : cam_base ("CAM BASE") */
            public: double TrimPoint2AngleOffset
            (
            );
            /**Sets  the trim point 2 angle offset  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint2AngleOffset
            (
                double trimPoint2AngleOffset /** the trim point 2 angle offset value */
            );
            /**Returns  the trim point 2 check part geometry  <br> License requirements : cam_base ("CAM BASE") */
            public: bool TrimPoint2CheckPartGeometry
            (
            );
            /**Sets  the trim point 2 check part geometry  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimPoint2CheckPartGeometry
            (
                bool trimPoint2CheckPartGeometry /** the trim point 2 check part geometry value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
