#ifndef NXOpen_SKETCHINTERSECTIONCURVEBUILDER_HXX_INCLUDED
#define NXOpen_SKETCHINTERSECTIONCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchIntersectionCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveFitOptions.hxx>
#include <NXOpen/SketchIntersectionCurveBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SketchIntersectionCurveBuilder;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveFitOptions;
    }
    class ScCollector;
    class _SketchIntersectionCurveBuilderBuilder;
    /** Represents a @link SketchIntersectionCurve SketchIntersectionCurve@endlink  builder  <br> To obtain an instance of this class use @link SketchCollection::CreateIntersectionCurveBuilder SketchCollection::CreateIntersectionCurveBuilder@endlink . <br> */
    class NXOPENCPPEXPORT SketchIntersectionCurveBuilder : public Features::FeatureBuilder
    {
        private: friend class  _SketchIntersectionCurveBuilderBuilder;
        protected: SketchIntersectionCurveBuilder();
        /**Returns  the faces to intersect  <br> License requirements : None */
        public: NXOpen::ScCollector * FaceCollector
        (
        );
        /** This method needs to be called whenever the number of faces to intersect changes <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void CollectorUpdated
        (
        );
        /**Returns  the ignore holes option  <br> License requirements : None */
        public: bool IgnoreHoles
        (
        );
        /**Sets  the ignore holes option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetIgnoreHoles
        (
            bool ignore_holes /** ignore holes */ 
        );
        /**Returns  the join curves option  <br> License requirements : None */
        public: bool JoinCurves
        (
        );
        /**Sets  the join curves option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetJoinCurves
        (
            bool join_curves /** join curves */ 
        );
        /**Returns  the distance tolerance  <br> License requirements : None */
        public: double DistanceTolerance
        (
        );
        /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetDistanceTolerance
        (
            double distance_tolerance /** distance tolerance */ 
        );
        /**Returns  the angular tolerance  <br> License requirements : None */
        public: double AngleTolerance
        (
        );
        /**Sets  the angular tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetAngleTolerance
        (
            double angle_tolerance /** angle tolerance */ 
        );
        /** Method to get the alternate solution corresponding to solutionIndex <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void AlternateSolution
        (
            int solutionIndex /** solutionindex */ 
        );
        /**Returns  the curve fit method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::GeometricUtilities::CurveFitOptions * CurveFitMethod
        (
        );
        /** This method needs to be called whenever the curve fit options changes  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void CurveFitMethodUpdated
        (
        );
    };
}
#undef EXPORTLIBRARY
#endif
