#ifndef NXOpen_CAE_RESPONSESIMULATION_MODALPROPERTIES_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_MODALPROPERTIES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_ModalProperties.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class ModalProperties;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class NormalMode;
        }
    }
    class NXObject;
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class _ModalPropertiesBuilder;
            /** Represents the modal presentation of a response analysis meta solution */
            class NXOPENCPPEXPORT ModalProperties : public NXObject
            {
                private: friend class  _ModalPropertiesBuilder;
                protected: ModalProperties();
                /** Returns the count of normal modes  @return   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: int GetNormalModeCount
                (
                );
                /** Returns the count of constrain modes  @return   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: int GetConstrainModeCount
                (
                );
                /** Returns the count of attachment modes  @return   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: int GetAttachmentModeCount
                (
                );
                /** Returns normal mode with specified node ID  @return   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::NormalMode * GetNormalModeById
                (
                    int mode_id /** mode id */ 
                );
                /** Returns all normal modes  @return   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: std::vector<NXOpen::CAE::ResponseSimulation::NormalMode *> GetNormalModes
                (
                );
                /** set activate or deactivate status for all normal modes  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void Activate
                (
                    bool activate /** activate */ 
                );
                /** Set damping factors for all normal modes  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetDampingFactors
                (
                    double viscous_damping /** viscous damping */ ,
                    double hysteretic_damping /** hysteretic damping */ 
                );
                /** Set rayleigh's damping for all normal modes  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetRayleighDamping
                (
                    double alpha_factor /** alpha factor */ ,
                    double belta_factor /** belta factor */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
