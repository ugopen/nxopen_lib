#ifndef NXOpen_ROUTING_ROUTEMANAGER_HXX_INCLUDED
#define NXOpen_ROUTING_ROUTEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_RouteManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_DesignRuleViolationCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class RouteManager;
    }
    class Part;
    namespace Assemblies
    {
        class Component;
    }
    class Direction;
    class NXObject;
    namespace Routing
    {
        class AnchorCollection;
    }
    namespace Routing
    {
        class BendCornerCollection;
    }
    namespace Routing
    {
        class BuiltInPathCollection;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ControlPointCollection;
    }
    namespace Routing
    {
        class CopeCornerCollection;
    }
    namespace Routing
    {
        class CornerCollection;
    }
    namespace Routing
    {
        class CrossSectionCollection;
    }
    namespace Routing
    {
        class DesignRuleCollection;
    }
    namespace Routing
    {
        class DesignRuleViolation;
    }
    namespace Routing
    {
        class DesignRuleViolationCollection;
    }
    namespace Routing
    {
        class DiscontinuityCornerCollection;
    }
    namespace Routing
    {
        class ElbowSnapSettings;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class CableConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ConnectorDeviceCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalDeviceRelationshipCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalStockDeviceCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDeviceCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class JumperConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class NonPathConnectionCollection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class PathConnectionCollection;
        }
    }
    namespace Routing
    {
        class FillerCollection;
    }
    namespace Routing
    {
        class FittingPortCollection;
    }
    namespace Routing
    {
        class FixturePortCollection;
    }
    namespace Routing
    {
        class FormboardFrameCollection;
    }
    namespace Routing
    {
        class InterfaceTerminalRelationshipCollection;
    }
    namespace Routing
    {
        class LinearPathBuilder;
    }
    namespace Routing
    {
        class LinearPathSettings;
    }
    namespace Routing
    {
        class MiterCornerCollection;
    }
    namespace Routing
    {
        class MultiPortCollection;
    }
    namespace Routing
    {
        class OffsetPathCollection;
    }
    namespace Routing
    {
        class OverstockApplicationCollection;
    }
    namespace Routing
    {
        class PathStockBuilder;
    }
    namespace Routing
    {
        class PortCollection;
    }
    namespace Routing
    {
        class PortConnectionCollection;
    }
    namespace Routing
    {
        class RouteLogicalAssociationCollection;
    }
    namespace Routing
    {
        class RoutePartDescriptorCollection;
    }
    namespace Routing
    {
        class RoutingSystemCollection;
    }
    namespace Routing
    {
        class RunCollection;
    }
    namespace Routing
    {
        class SBendCornerCollection;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class StockCollection;
    }
    namespace Routing
    {
        class StockDataCollection;
    }
    namespace Routing
    {
        class TerminalPortCollection;
    }
    namespace Routing
    {
        class WireCollection;
    }
    namespace Routing
    {
        /** Contains the type of the routing part as well as the collection objects for creating
                and iterating over routing objects.
                 <br> 
                See the NX Routing help for detailed information on the Connection data model.
                 <br> 
             <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT RouteManager
        {
            /** Collector types for Routing information */
            public: enum PartType
            {
                PartTypePart/** part */ ,
                PartTypeStock/** stock */ ,
                PartTypeFabrication/** fabrication */ ,
                PartTypeStockComponent/** stock component */ ,
                PartTypeWireComponent/** wire component */ ,
                PartTypeOverstock/** overstock */ ,
                PartTypeLogical/** logical */ ,
                PartTypeTemplateAssy/** template assy */ ,
                PartTypeConnector/** connector */ ,
                PartTypeSplice/** splice */ ,
                PartTypeDevice/** device */ ,
                PartTypeFiller/** filler */ ,
                PartTypeUnknown = -1/** unknown */ 
            };

            /** Describes how fabrications are reported on the Bill of Material (BOM). */
            public: enum BomLevel
            {
                BomLevelSummery/** summery */ ,
                BomLevelItemized/** itemized */ 
            };

            /** Describes how system reports the lengths of the stock. */
            public: enum BomStockLength
            {
                BomStockLengthSingleSum/** single sum */ ,
                BomStockLengthListEach/** list each */ 
            };

            /** Is the fabrication numbering option on or off? */
            public: enum BomFabrication
            {
                BomFabricationOff/** off */ ,
                BomFabricationOn/** on */ 
            };

            /** Controls how line items are reported in the Parts List. */
            public: enum BomBlankLines
            {
                BomBlankLinesOff/** off */ ,
                BomBlankLinesOn/** on */ 
            };

            /** Route List import modes

                      The following tables describes the effects of the various modes
                      depending on the type (XML, HRN, CMP) of import.
                       @code 
                                              ++--------------+---------------+-----------------+
                    +------------+------------++ Deletes      | Replaces data | Preserves       |
                    |            | Import     || unmatched    | in matching   | existing        |
                    | ImportMode | File Type  || elements     | elements      | connectors      |
                    +============+============++==============+===============+=================+
                    | Update     | XML        || Yes          | Yes           | No              |
                    |            | Legacy CMP || No           | Yes           | Yes             |
                    |            | Legacy HRN || Yes(1)       | Yes(2)        | Yes             |
                    +------------+------------++--------------+---------------+-----------------+
                    | Merge      | XML        || No           | Yes           | Yes             |
                    |            | Legacy CMP || No           | Yes           | Yes             |
                    |            | Legacy HRN || No           | Yes(2)        | Yes             |
                    +------------+------------++--------------+---------------+-----------------+
                    | Append     | XML        || No           | No            | Yes             |
                    |            | Legacy CMP || No           | No            | Yes             |
                    |            | Legacy HRN || No           | No            | Yes             |
                    +------------+------------++--------------+---------------+-----------------+
                                 
                                 
                                              ++--------------+---------------+-----------------+------------------+
                    +------------+------------++ May add new  | May add new   | May create      | May create       |
                    |            | Import     || connectors   | connections   | duplicate       | duplicate        |
                    | ImportMode | File Type  ||              |               | connector names | connection names |
                    +============+============++==============+===============+=================+==================+
                    | Update     | XML        || Yes          | Yes           | Yes(3)          | Yes(3)           |
                    |            | Legacy CMP || Yes          | No            | No              | No               |
                    |            | Legacy HRN || Yes          | Yes           | No              | No               |
                    +------------+------------++--------------+---------------+-----------------+------------------+
                    | Merge      | XML        || Yes          | Yes           | Yes(3)          | Yes(3)           |
                    |            | Legacy CMP || Yes          | No            | No              | No               |
                    |            | Legacy HRN || Yes          | Yes           | No              | No               |
                    +------------+------------++--------------+---------------+-----------------+------------------+
                    | Append     | XML        || Yes          | Yes           | Yes             | Yes              |
                    |            | Legacy CMP || Yes          | No            | Yes             | No               |
                    |            | Legacy HRN || Yes          | Yes           | No              | Yes              |
                    +------------+------------++--------------+---------------+-----------------+------------------+
                                 
                                 
                                              ++--------------+---------------+-----------------+
                                              || Maintains    | Maintains     | Elements        |
                                              || assignment   | routing       | matching        |
                    +------------+------------++ information  | information   | criterion       |
                    |            | Import     || for matching | for matching  |                 |
                    | ImportMode | File Type  || connectors   | connections   |                 |
                    +============+============++==============+===============+=================+
                    | Update     | XML        || Yes          | Yes           | GUID            |
                    |            | Legacy CMP || Yes          | Yes           | Names(4)        |
                    |            | Legacy HRN || Yes          | Yes           | Names(4)        |
                    +------------+------------++--------------+---------------+-----------------+
                    | Merge      | XML        || Yes          | Yes           | GUID            |
                    |            | Legacy CMP || Yes          | Yes           | Names(4)        |
                    |            | Legacy HRN || Yes          | Yes           | Names(4)        |
                    +------------+------------++--------------+---------------+-----------------+
                    | Append     | XML        || No           | No            | N/A             |
                    |            | Legacy CMP || No           | No            | N/A             |
                    |            | Legacy HRN || No           | No            | N/A             |
                    +------------+------------++--------------+---------------+-----------------+
                       @endcode 

                       <ol>
                         <li> Connection list data only (no connectors)</li>
                         <li> Connector data is not updated</li>
                         <li> Since matches are made using GUIDs only, no attempt is made to prevent duplicate names</li>
                         <li> Technically, legacy import does check GUIDs as well but using GUID is not practical with legacy import</li>
                       </ol>
                            */
            public: enum ImportMode
            {
                ImportModeUpdate = 700/** Update existing objects with data from the imported objects. */,
                ImportModeMerge/** Update existing objects with data from the imported objects. */,
                ImportModeAppend/** Create the imported objects as new objects. */
            };

            private: NXOpen::Part* m_owner;
            public: explicit RouteManager(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Returns the default length tolerance for the current root part.  @return  Length tolerance value used by Routing in units
                                                            of the current root part.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double GetLengthTolerance
            (
            );
            /**Returns  the down direction for the part used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Direction * DownDirection
            (
            );
            /**Sets  the down direction for the part used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDownDirection
            (
                NXOpen::Direction * down_direction /** down direction */ 
            );
            /**Returns  the type for the part used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::RouteManager::PartType PartTypeFlag
            (
            );
            /**Sets  the type for the part used by Routing.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPartTypeFlag
            (
                NXOpen::Routing::RouteManager::PartType type /** type */ 
            );
            /** Connects the input component to the stocks and other components in the work part.  
                         <br> 
                            Subdivides segments intersected by ports of the part
                            and marked interior if the segment is "inside" of the part.  Segments are considered
                            inside if all of the end @link Routing::ControlPoint Routing::ControlPoint@endlink  objects of the
                            segments are inside the bounding box of the component.  Interior segments are
                            not displayable.
                         <br> 
                         <br> 
                            All stocks are split at the new interior segments.  The interior stocks are
                            hidden and do not show up in the bill of materials.
                         <br> 
                         <br> 
                            In addition this routine adds fixture ports of the input component to fixed
                            length splines that are intersected by the ports.
                         <br> 
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void InsertIntoStock
            (
                NXOpen::Assemblies::Component * component /** Must be in the same part as the @link Routing::RouteManager Routing::RouteManager@endlink  object.*/
            );
            /** Disconnects the input component from stocks and components in the work part.
                         <br> 
                            This the opposite of @link Routing::RouteManager::InsertIntoStock Routing::RouteManager::InsertIntoStock@endlink . 
                            Interior segments are marked as non-interior, and any subdivisions performed by
                            @link Routing::RouteManager::InsertIntoStock Routing::RouteManager::InsertIntoStock@endlink  are reversed to
                            the previous state. 
                         <br> 
                         <br> 
                            Interior stocks are marked as non-interior and merge with the existing stocks
                            that were connected to the component.
                         <br> 
                      <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void LiftFromStock
            (
                NXOpen::Assemblies::Component * component /** Must be in the same part as the @link Routing::RouteManager Routing::RouteManager@endlink  object.*/
            );
            /** Loads a part based on the input @link Routing::CharacteristicList Routing::CharacteristicList@endlink .  
                        This object can be created on the fly, or returned from a search through the part library using
                       the @link Preferences::RoutingPartLibrary::MatchCriteria Preferences::RoutingPartLibrary::MatchCriteria@endlink  or 
                       @link Preferences::RoutingPartLibrary::MatchCriteriaWithFilter Preferences::RoutingPartLibrary::MatchCriteriaWithFilter@endlink  methods.
                       @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Part * LoadPart
            (
                NXOpen::Routing::CharacteristicList * part_entry /**  Must contain a PART_NAME for a regular part, or a MEMBER_NAME and PART_NAME
                                     for part family parts. */
            );
            /** Logs objects to be checked during the next concurrent design rule check.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void LogConcurrent
            (
                const std::vector<NXOpen::NXObject *> & objects /** Must be in the same part as the @link Routing::RouteManager Routing::RouteManager@endlink  object.*/
            );
            /** Gets objects logged for concurrent design rule check.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> GetConcurrent
            (
            );
            /** Exports all of the NX Routing electrical information from the currently open part 
                        to the given file.
                    
                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ExportPlmxml
            (
                const NXString & plmxml_filename /** The name of the file into which this method will write 
                                    the NX Routing PLM XML data.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Imports NX Routing electrical information from the given PLM XML file 
                        into the current work part.
                    
                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ImportPlmxml
            (
                const NXString & plmxml_filename /** The name of the file from which this method will read 
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode import_operation /** The import mode: update, merge, or append.
                                    See @link Routing::RouteManager::ImportMode Routing::RouteManager::ImportMode@endlink  for more information. */
            );
            /** Imports NX Routing electrical information from the given 
                        XML or legacy component file into the current work part.
                    
                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ImportLegacyComponentFile
            (
                const NXString & import_filename /** The name of the file from which this method will read 
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode import_operation /** The import mode: update, merge, or append.
                                    See @link Routing::RouteManager::ImportMode Routing::RouteManager::ImportMode@endlink  for more information. */,
                const NXString & import_format_name /** The name of the format from the Routing List (RLIST) configuration file
                                    that describes the fields in the legacy file.
                                    For more information, see the RLIST Configuration File section of the 
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all of the NX Routing electrical information from the currently open part 
                        to the given XML or legacy component file.
                    
                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ExportLegacyComponentFile
            (
                const NXString & export_filename /** The name of the file into which this method will write 
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & exportFormatName /** The name of the format from the Routing List (RLIST) configuration file
                                    that defines the fields this method will create in the legacy file.
                                    For more information, see the RLIST Configuration File section of the 
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Imports NX Routing electrical information from the given
                        XML or legacy harness file into the current work part.
                    
                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ImportLegacyHarnessFile
            (
                const NXString & import_filename /** The name of the file from which this method will read 
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode import_operation /** The import mode: update, merge, or append.
                                    See @link Routing::RouteManager::ImportMode Routing::RouteManager::ImportMode@endlink  for more information. */,
                const NXString & import_format_name /** The name of the format from the Routing List (RLIST) configuration file
                                    that describes the fields in the legacy file.
                                    For more information, see the RLIST Configuration File section of the 
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Exports all of the NX Routing electrical information from the currently open part 
                        to the given XML or legacy harness file.
                    
                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ExportLegacyHarnessFile
            (
                const NXString & export_filename /** The name of the file into which this method will write 
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & exportFormatName /** The name of the format that from the Routing List (RLIST) configuration file
                                    defines the fields this method will create in the legacy file.
                                    For more information, see the RLIST Configuration File section of the 
                                    Part Table File document in the Routing Systems Configuration Overview
                                    section of the Routing Quick Reference Guide.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Imports NX Routing electrical information from the given XML 
                        file into the current work part.
                    
                        Returns an error if
                        <ul>
                            <li>Unable to read the file</li>
                            <li>There is no part file open</li>
                        </ul>
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ImportXmlFile
            (
                const NXString & import_filename /** The name of the file from which this method will read 
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Routing::RouteManager::ImportMode import_operation /** The import mode: update, merge, or append.
                                    See @link Routing::RouteManager::ImportMode Routing::RouteManager::ImportMode@endlink  for more information. */
            );
            /** Exports all of the NX Routing electrical information from the currently open part 
                        to the given XML file.
                    
                        Returns an error if
                        <ul>
                            <li>Unable to write to the file</li>
                            <li>There is no Routing electrical information in the part</li>
                            <li>There is no part file open</li>
                        </ul>
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ExportXmlFile
            (
                const NXString & export_filename /** The name of the file into which this method will write 
                                    the NX Routing electrical information.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Executes the Routing Design Rules against the work part  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void CheckDesignRules
            (
                NXOpen::Routing::DesignRuleViolationCollection::Mode mode /** mode */ ,
                NXOpen::Routing::DesignRuleViolationCollection::Reason reason /** reason */ ,
                const std::vector<NXOpen::NXObject *> & objects /** The objects to check.  May be empty. */,
                std::vector<NXOpen::Routing::DesignRuleViolation *> & violations /** The violations generated by the check.  May be empty. */
            );
            /** Places a cut elbow at the given Routing Control Point (RCP).  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void PlaceCutElbow
            (
                NXOpen::Routing::CharacteristicList * load_charx /** Characteristics used for searching the component to load. */,
                NXOpen::Routing::CharacteristicList * apply_charx /** Characteristics to apply to the component. */,
                NXOpen::Routing::ControlPoint * rcp /** The Routing Control Point (RCP) at which to place the cut elbow. */
            );
            /** Deletes the given Routing Control Points (RCP), segments, curves, and components.
                    
                        Useful for deleting all of the objects along a path.

                        <ol>
                        <li>Given a Routing Control Point (RCP):</li>
                            <ul>
                            <li>Log input RCP to delete.</li>
                            <li>If a side bend RCP, log bend segments to update.</li>
                            <li>If a bend corner RCP, log bend corner, bend arc and bend segment RCPs to delete.</li>
                            </ul>

                        <li>Given a Segment</li>
                            <ul>
                            <li>Log segment, associated bend corner, bend RCP and bend arc to delete.</li>
                            </ul>

                        <li>Given an Instances</li>
                            <ul>
                            <li>Delete component instances from the assembly.</li>
                            </ul>

                        <li>Given any other objects</li>
                            <ul>
                            <li>Log to delete.</li>
                            </ul>
                        </ol>

                        NOTE: Does not delete occurrence or segments with other dependencies.
                     @return  Objects from the given list of objects that survived.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> DeletePath
            (
                const std::vector<NXOpen::NXObject *> & objects /** The objects to delete. */
            );
            /** Changes the given stock or component to a new object that matches the given characteristics.
                    
                        Useful for unifying all of the stocks and components (e.g. elbows and tees) in
                        a path to the same characteristics.
                     <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void UnifyPath
            (
                NXOpen::TaggedObject * input_object /** The stock, elbow, or tee to change. */,
                NXOpen::Routing::CharacteristicList * new_charx_list /** The characteristics to use in finding a replacement for the given object. */
            );
            /** Repositions part component given position and transformation  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void RepositionPartOccurrence
            (
                NXOpen::Assemblies::Component * part_occ /** part occ */ ,
                const NXOpen::Point3d & position /** part occurrence to move */,
                const NXOpen::Matrix3x3 & transform /** new transform for the part occurrence */
            );
            /** Replace part  @return    <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Assemblies::Component * RouteReplacePart
            (
                NXOpen::Assemblies::Component * old_occ /** old occ */ ,
                NXOpen::Part * new_part /** new part */ ,
                const NXString & comp_name /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & refset /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int occ_layer /** occ layer */ 
            );
            /** Replaces old component with new component. Creates a port map. Lifts the part from the stock. 
                        Replaces various references from one set of port occurrences to another set of port occurrences 
                        and copies the old characteristics on the new occurrence.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ReplaceComponents
            (
                NXOpen::Assemblies::Component * old_occ /** old occ */ ,
                NXOpen::Assemblies::Component * new_occ /** new occ */ ,
                const NXString & refset_name /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Transforms routing objects. The transformation can be a Move or a Copy. 
                        NULL objects should not be passed for transformation.   @return  Objects surviving the operation (the 
                                                                                            copied objects for a copy, the moved objects
                                                                                            for a move).   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> TransformObjects
            (
                bool all_stock /** if TRUE: Copies all stock else Copies 
                                                                                    specified stocks only*/,
                const std::vector<NXOpen::Routing::Stock *> & specified_stocks /** Specified stocks, not used 
                                                                                                    if copying all stocks */,
                const std::vector<NXOpen::NXObject *> & objects /** Routing objects (segments, control 
                                                                                               points, components, etc.) to transform */,
                const NXOpen::Point3d & position /** Delta position, determines the translation. */,
                const NXOpen::Matrix3x3 & transform /** Rotation matrix, specifies the rotation to apply. */,
                bool copy_operation /** if true, copies the input tags and moves the copy. 
                                                                                If false, just moves the input tags.  */
            );
            /** Finds the duplicate Routing Control Points (RCPs) within given tolerance and merges them.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void MergeDuplicateRcps
            (
                const std::vector<NXOpen::Routing::ControlPoint *> & rcps /** The Routing Control Points (RCPs) */,
                double tolerance /** Tolerance value to determine duplicate RCPs */
            );
            /** Removes the @link Assemblies::Component Assemblies::Component@endlink  objects from the assembly 
                        and updates the routing path data.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void RemoveComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to remove, this method will
                                                                    delete these objects. */
            );
            /** Connects ports present in this @link Assemblies::Component Assemblies::Component@endlink .  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void ConnectPartPorts
            (
                NXOpen::Assemblies::Component * component /** component */ 
            );
            /** Creates a Routing fabrication, a sub-assembly made of
                        @link Assemblies::Component Assemblies::Component@endlink s and
                        @link Routing::Stock Routing::Stock@endlink  from the assembly in which
                        the Routing Fabrication is created. @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Part * BuildFabrication
            (
                const NXString & filename /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                NXOpen::Routing::CharacteristicList * charx_data /** charx data */ 
            );
            /** Creates Bill of Material (BOM). BOM generates a table with the relevant 
                        information regarding the existing routing objects present in the NX window.
                        Various options are available on the BOM dialog to control the generated output. 
                        These options are the inputs to this function.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void CreateBom
            (
                NXOpen::Routing::RouteManager::BomLevel level /** How fabrications are reported. */,
                NXOpen::Routing::RouteManager::BomStockLength length /** How stock length is reported. */,
                NXOpen::Routing::RouteManager::BomFabrication fab_numbering /** Is fabrication numbering option on/off? */,
                NXOpen::Routing::RouteManager::BomBlankLines blank_lines /**  Is show blank lines option on/off? */,
                NXOpen::Part * format_file_part /** Part List format file part. */
            );
            /** Loads the part list format (template) file. Part list is based on this
                        format and using this Bill of Material (BOM) is generated.  @return  Template part.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Part * ImportPartListFormatFile
            (
                const NXString & file_name /** File name to load.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Freezes the item numbers in the parts list to their current assignment. Once this
                        is done, items can be added or removed from the parts list without changing the
                        item numbers of the items already on the parts list.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void FreezePartsList
            (
            );
            /** Creates a linear path builder for building a path consisting of
                        lines, arcs (bends) and elbows.   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::LinearPathBuilder * CreateLinearPathBuilder
            (
            );
            /** Creates a snap elbow settings object, this object is only useful for
                       @link Routing::LinearPathBuilder Routing::LinearPathBuilder@endlink  object.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ElbowSnapSettings * CreateElbowSnapSettings
            (
            );
            /** Creates a path stock builder.  This builder can be used for assigning stock
                        to new path segments based off of the current default stock and the
                        settings in this builder.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::PathStockBuilder * CreatePathStockBuilder
            (
            );
            /** Creates a linear path settings object which stores preferences to
                        apply when creating linear paths using a @link Routing::LinearPathBuilder Routing::LinearPathBuilder@endlink .
                         @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::LinearPathSettings * CreateLinearPathSettings
            (
            );


            private: NXOpen::Routing::BuiltInPathCollection *builtInPaths;
            /** BuiltInPath collection */
            public: NXOpen::Routing::BuiltInPathCollection *BuiltInPaths()
            {
                return builtInPaths;
            }
            private: NXOpen::Routing::ControlPointCollection *controlPoints;
            /** ControlPoint collection */
            public: NXOpen::Routing::ControlPointCollection *ControlPoints()
            {
                return controlPoints;
            }
            private: NXOpen::Routing::PortCollection *ports;
            /** Port Collection */
            public: NXOpen::Routing::PortCollection *Ports()
            {
                return ports;
            }
            private: NXOpen::Routing::PortConnectionCollection *portConnections;
            /** PortConnection Collection */
            public: NXOpen::Routing::PortConnectionCollection *PortConnections()
            {
                return portConnections;
            }
            private: NXOpen::Routing::FixturePortCollection *fixturePorts;
            /** FixturePort Collection */
            public: NXOpen::Routing::FixturePortCollection *FixturePorts()
            {
                return fixturePorts;
            }
            private: NXOpen::Routing::FittingPortCollection *fittingPorts;
            /** FittingPort Collection */
            public: NXOpen::Routing::FittingPortCollection *FittingPorts()
            {
                return fittingPorts;
            }
            private: NXOpen::Routing::MultiPortCollection *multiPorts;
            /** MultiPort Collection */
            public: NXOpen::Routing::MultiPortCollection *MultiPorts()
            {
                return multiPorts;
            }
            private: NXOpen::Routing::TerminalPortCollection *terminalPorts;
            /** TerminalPort Collection */
            public: NXOpen::Routing::TerminalPortCollection *TerminalPorts()
            {
                return terminalPorts;
            }
            private: NXOpen::Routing::OffsetPathCollection *offsetPaths;
            /** OffsetPath Collection */
            public: NXOpen::Routing::OffsetPathCollection *OffsetPaths()
            {
                return offsetPaths;
            }
            private: NXOpen::Routing::RunCollection *runs;
            /** Run Collection */
            public: NXOpen::Routing::RunCollection *Runs()
            {
                return runs;
            }
            private: NXOpen::Routing::RoutingSystemCollection *routingSystems;
            /** RoutingSystem Collection */
            public: NXOpen::Routing::RoutingSystemCollection *RoutingSystems()
            {
                return routingSystems;
            }
            private: NXOpen::Routing::RouteLogicalAssociationCollection *routeLogicalAssociations;
            /** RouteLogicalAssociation Collection */
            public: NXOpen::Routing::RouteLogicalAssociationCollection *RouteLogicalAssociations()
            {
                return routeLogicalAssociations;
            }
            private: NXOpen::Routing::CornerCollection *corners;
            /** Corner collection */
            public: NXOpen::Routing::CornerCollection *Corners()
            {
                return corners;
            }
            private: NXOpen::Routing::BendCornerCollection *bendCorners;
            /** BendCorner collection */
            public: NXOpen::Routing::BendCornerCollection *BendCorners()
            {
                return bendCorners;
            }
            private: NXOpen::Routing::CopeCornerCollection *copeCorners;
            /** CopeCorner collection */
            public: NXOpen::Routing::CopeCornerCollection *CopeCorners()
            {
                return copeCorners;
            }
            private: NXOpen::Routing::DiscontinuityCornerCollection *discontinuityCorners;
            /** DiscontinuityCorner collection */
            public: NXOpen::Routing::DiscontinuityCornerCollection *DiscontinuityCorners()
            {
                return discontinuityCorners;
            }
            private: NXOpen::Routing::MiterCornerCollection *miterCorners;
            /** MiterCorner collection */
            public: NXOpen::Routing::MiterCornerCollection *MiterCorners()
            {
                return miterCorners;
            }
            private: NXOpen::Routing::SBendCornerCollection *sBendCorners;
            /** SBendCorner collection */
            public: NXOpen::Routing::SBendCornerCollection *SBendCorners()
            {
                return sBendCorners;
            }
            private: NXOpen::Routing::RoutePartDescriptorCollection *routePartDescriptors;
            /** RoutePartDescriptor collection */
            public: NXOpen::Routing::RoutePartDescriptorCollection *RoutePartDescriptors()
            {
                return routePartDescriptors;
            }
            private: NXOpen::Routing::AnchorCollection *anchors;
            /** Anchor collection */
            public: NXOpen::Routing::AnchorCollection *Anchors()
            {
                return anchors;
            }
            private: NXOpen::Routing::StockCollection *stocks;
            /** Stock collection */
            public: NXOpen::Routing::StockCollection *Stocks()
            {
                return stocks;
            }
            private: NXOpen::Routing::StockDataCollection *stockDatas;
            /** StockData collection */
            public: NXOpen::Routing::StockDataCollection *StockDatas()
            {
                return stockDatas;
            }
            private: NXOpen::Routing::CrossSectionCollection *crossSections;
            /** CrossSection collection */
            public: NXOpen::Routing::CrossSectionCollection *CrossSections()
            {
                return crossSections;
            }
            private: NXOpen::Routing::WireCollection *wires;
            /** Wire Collection */
            public: NXOpen::Routing::WireCollection *Wires()
            {
                return wires;
            }
            private: NXOpen::Routing::OverstockApplicationCollection *overstockApplications;
            /** OverstockApplication collection */
            public: NXOpen::Routing::OverstockApplicationCollection *OverstockApplications()
            {
                return overstockApplications;
            }
            private: NXOpen::Routing::FillerCollection *fillers;
            /** Filler stock Application collection */
            public: NXOpen::Routing::FillerCollection *Fillers()
            {
                return fillers;
            }
            private: NXOpen::Routing::FormboardFrameCollection *formboardFrames;
            /** FormboardFrame collection */
            public: NXOpen::Routing::FormboardFrameCollection *FormboardFrames()
            {
                return formboardFrames;
            }
            private: NXOpen::Routing::Electrical::CableConnectionCollection *cableConnections;
            /** CableConnection collection */
            public: NXOpen::Routing::Electrical::CableConnectionCollection *CableConnections()
            {
                return cableConnections;
            }
            private: NXOpen::Routing::Electrical::NonPathConnectionCollection *nonPathConnections;
            /** NonPathConnection collection */
            public: NXOpen::Routing::Electrical::NonPathConnectionCollection *NonPathConnections()
            {
                return nonPathConnections;
            }
            private: NXOpen::Routing::Electrical::ConnectorDeviceCollection *connectorDevices;
            /** ConnectorDevice collection */
            public: NXOpen::Routing::Electrical::ConnectorDeviceCollection *ConnectorDevices()
            {
                return connectorDevices;
            }
            private: NXOpen::Routing::Electrical::HarnessDeviceCollection *harnessDevices;
            /** HarnessDevice collection */
            public: NXOpen::Routing::Electrical::HarnessDeviceCollection *HarnessDevices()
            {
                return harnessDevices;
            }
            private: NXOpen::Routing::Electrical::ElectricalStockDeviceCollection *electricalStockDevice;
            /** ElectricalStockDevice collection */
            public: NXOpen::Routing::Electrical::ElectricalStockDeviceCollection *ElectricalStockDevice()
            {
                return electricalStockDevice;
            }
            private: NXOpen::Routing::Electrical::PathConnectionCollection *pathConnections;
            /** PathConnection collection */
            public: NXOpen::Routing::Electrical::PathConnectionCollection *PathConnections()
            {
                return pathConnections;
            }
            private: NXOpen::Routing::InterfaceTerminalRelationshipCollection *interfaceTerminalRelationships;
            /** InterfaceTerminalRelationship collection */
            public: NXOpen::Routing::InterfaceTerminalRelationshipCollection *InterfaceTerminalRelationships()
            {
                return interfaceTerminalRelationships;
            }
            private: NXOpen::Routing::Electrical::JumperConnectionCollection *jumperConnections;
            /** JumperConnection collection */
            public: NXOpen::Routing::Electrical::JumperConnectionCollection *JumperConnections()
            {
                return jumperConnections;
            }
            private: NXOpen::Routing::Electrical::ElectricalDeviceRelationshipCollection *electricalDeviceRelationships;
            /** ElectricalDeviceRelationship Connection collection */
            public: NXOpen::Routing::Electrical::ElectricalDeviceRelationshipCollection *ElectricalDeviceRelationships()
            {
                return electricalDeviceRelationships;
            }
            private: NXOpen::Routing::DesignRuleCollection *designRules;
            /** RoutingDesignRule collection */
            public: NXOpen::Routing::DesignRuleCollection *DesignRules()
            {
                return designRules;
            }
            private: NXOpen::Routing::DesignRuleViolationCollection *designRulesViolation;
            /** RoutingDesignRuleViolation collection */
            public: NXOpen::Routing::DesignRuleViolationCollection *DesignRulesViolation()
            {
                return designRulesViolation;
            }
            private: NXOpen::Routing::Electrical::ConnectionCollection *electricalConnections;
            /** Routing Electrical Connection collection */
            public: NXOpen::Routing::Electrical::ConnectionCollection *ElectricalConnections()
            {
                return electricalConnections;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
