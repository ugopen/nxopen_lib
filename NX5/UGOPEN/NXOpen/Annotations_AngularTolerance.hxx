#ifndef NXOpen_ANNOTATIONS_ANGULARTOLERANCE_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ANGULARTOLERANCE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_AngularTolerance.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Dimensions.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class AngularTolerance;
    }
    class Expression;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents angular tolerance */
        class NXOPENCPPEXPORT AngularTolerance : public TransientObject
        {
            public: explicit AngularTolerance(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~AngularTolerance();
            /**Returns  the tolerance type  <br> License requirements : None */
            public: NXOpen::Annotations::ToleranceType ToleranceType
            (
            );
            /**Sets  the tolerance type  <br> License requirements : None */
            public: void SetToleranceType
            (
                NXOpen::Annotations::ToleranceType type /** New tolerance type */
            );
            /** Returns the upper tolerance in degrees  @return  Upper tolerance in degrees  <br> License requirements : None */
            public: NXOpen::Annotations::Value GetUpperToleranceDegrees
            (
            );
            /** Sets the upper tolerance in degrees  <br> License requirements : None */
            public: void SetUpperToleranceDegrees
            (
                const NXOpen::Annotations::Value & upper_tolerance_degrees /** New upper tolerance in degrees */
            );
            /** Returns the lower tolerance in degrees  @return  Lower tolerance in degrees  <br> License requirements : None */
            public: NXOpen::Annotations::Value GetLowerToleranceDegrees
            (
            );
            /** Sets the lower tolerance in degrees  <br> License requirements : None */
            public: void SetLowerToleranceDegrees
            (
                const NXOpen::Annotations::Value & lower_tolerance_degrees /** New lower tolerance in degrees */
            );
            /**Returns  the number of decimal places for dimension  <br> License requirements : None */
            public: int DimensionDecimalPlaces
            (
            );
            /**Sets  the number of decimal places for dimension  <br> License requirements : None */
            public: void SetDimensionDecimalPlaces
            (
                int dimension_decimal_places /** New number of dimension decimal places */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
