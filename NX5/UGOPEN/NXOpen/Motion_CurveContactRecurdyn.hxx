#ifndef NXOpen_MOTION_CURVECONTACTRECURDYN_HXX_INCLUDED
#define NXOpen_MOTION_CURVECONTACTRECURDYN_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_CurveContactRecurdyn.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_CurveContactRecurdyn.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class CurveContactRecurdyn;
    }
    class NXObject;
    namespace Motion
    {
        class _CurveContactRecurdynBuilder;
        /** Represents a @link Motion::CurveContactRecurdyn Motion::CurveContactRecurdyn@endlink  */
        class NXOPENCPPEXPORT CurveContactRecurdyn : public NXObject
        {
            private: friend class  _CurveContactRecurdynBuilder;
            protected: CurveContactRecurdyn();
            /**Returns  the stiffness  <br> License requirements : None */
            public: double Stiffness
            (
            );
            /**Sets  the stiffness  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStiffness
            (
                double stiffness /** stiffness */ 
            );
            /**Returns  the force exponent  <br> License requirements : None */
            public: double ForceExponent
            (
            );
            /**Sets  the force exponent  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetForceExponent
            (
                double force_exponent /** force exponent */ 
            );
            /**Returns  the material damping  <br> License requirements : None */
            public: double MaterialDamping
            (
            );
            /**Sets  the material damping  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaterialDamping
            (
                double material_damping /** material damping */ 
            );
            /**Returns  the penetration depth  <br> License requirements : None */
            public: double PenetrationDepth
            (
            );
            /**Sets  the penetration depth  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPenetrationDepth
            (
                double penetration_depth /** penetration depth */ 
            );
            /**Returns  the Buffer Radius Factor  <br> License requirements : None */
            public: double BufferRadiusFactor
            (
            );
            /**Sets  the Buffer Radius Factor  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBufferRadiusFactor
            (
                double buffer_radius_factor /** buffer radius factor */ 
            );
            /**Returns  the Maximun Step Size Factor  <br> License requirements : None */
            public: double MaximumStepSizeFactor
            (
            );
            /**Sets  the Maximun Step Size Factor  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaximumStepSizeFactor
            (
                double maximum_step_size_factor /** maximum step size factor */ 
            );
            /**Returns  the Curve Tolerance Factor  <br> License requirements : None */
            public: double CurveToleranceFactor
            (
            );
            /**Sets  the Curve Tolerance Factor  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCurveToleranceFactor
            (
                double curve_tolerance_factor /** curve tolerance factor */ 
            );
            /**Returns  the first curve maximum penetration  <br> License requirements : None */
            public: double FirstCurveMaximumPenetration
            (
            );
            /**Sets  the first curve maximum penetration  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstCurveMaximumPenetration
            (
                double first_curve_maximum_penetration /** first curve maximum penetration */ 
            );
            /**Returns  the second curve maximum penetration  <br> License requirements : None */
            public: double SecondCurveMaximumPenetration
            (
            );
            /**Sets  the second curve maximum penetration  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondCurveMaximumPenetration
            (
                double second_curve_maximum_penetration /** second curve maximum penetration */ 
            );
            /**Returns  the static coefficient  <br> License requirements : None */
            public: double StaticCoefficient
            (
            );
            /**Sets  the static coefficient  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticCoefficient
            (
                double static_coefficient /** static coefficient */ 
            );
            /**Returns  the slip velocity  <br> License requirements : None */
            public: double SlipVelocity
            (
            );
            /**Sets  the slip velocity  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSlipVelocity
            (
                double slip_velocity /** slip velocity */ 
            );
            /**Returns  the dynamic coefficient  <br> License requirements : None */
            public: double DynamicCoefficient
            (
            );
            /**Sets  the dynamic coefficient  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicCoefficient
            (
                double dynamic_coefficient /** dynamic coefficient */ 
            );
            /**Returns  the transition velocity  <br> License requirements : None */
            public: double TransitionVelocity
            (
            );
            /**Sets  the transition velocity  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTransitionVelocity
            (
                double transition_velocity /** transition velocity */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
