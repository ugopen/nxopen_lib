#ifndef NXOpen_FEATURES_PATCHBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_PATCHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_PatchBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_PatchBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class PatchBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectBody;
    class SelectDisplayableObject;
    class SelectFace;
    namespace Features
    {
        class _PatchBuilderBuilder;
        /**
            Represents a @link Features::PatchBuilder Features::PatchBuilder@endlink  
            Lets you use a sheet body to replace some of the faces of a solid body.
            You can also patch a sheet to another sheet.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreatePatchBuilder Features::FeatureCollection::CreatePatchBuilder@endlink  <br> */
        class NXOPENCPPEXPORT PatchBuilder : public Features::FeatureBuilder
        {
            private: friend class  _PatchBuilderBuilder;
            protected: PatchBuilder();
            /**Returns  the target.
                    A solid or sheet body acts as the target for the patch feature.  <br> License requirements : None */
            public: NXOpen::SelectBody * Target
            (
            );
            /**Returns  the tool.
                    A sheet acts as the tool for the patch feature.  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * Tool
            (
            );
            /**Returns  the reverse direction.
                    If set to true, the target body faces against the direction are removed,
                    else the target body faces where the direction points to are removed.
                    The default direction is defined by the normal vector of the first face in tool body,
                    or of the seed face if specified.  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction.
                    If set to true, the target body faces against the direction are removed,
                    else the target body faces where the direction points to are removed.
                    The default direction is defined by the normal vector of the first face in tool body,
                    or of the seed face if specified.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the seed face.
                    Use a single face of the tool sheet that has multiple faces as the direction.  <br> License requirements : None */
            public: NXOpen::SelectFace * SeedFace
            (
            );
            /**Returns  the create hole patch.
                    Patch the closed tool sheet to the target body to create a hole-like patch feature.
                    Note if the edges of the tool sheet have gaps that are larger than the tolerance,
                    the patching may not work as expected.  <br> License requirements : None */
            public: bool CreateHolePatch
            (
            );
            /**Sets  the create hole patch.
                    Patch the closed tool sheet to the target body to create a hole-like patch feature.
                    Note if the edges of the tool sheet have gaps that are larger than the tolerance,
                    the patching may not work as expected.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCreateHolePatch
            (
                bool createHolePatch /** createholepatch */ 
            );
            /**Returns  the tolerance.
                    The upper gap between the edges of the target and tool body  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance.
                    The upper gap between the edges of the target and tool body  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
