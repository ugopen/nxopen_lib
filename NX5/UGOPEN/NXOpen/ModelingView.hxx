#ifndef NXOpen_MODELINGVIEW_HXX_INCLUDED
#define NXOpen_MODELINGVIEW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModelingView.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/View.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class ModelingView;
    class ModelingViewHighQualityImage;
    class View;
    class _ModelingViewBuilder;
    /**
     Represents a Modeling View
     <br> Modeling Views may only be created by Save As. <br> */
    class NXOPENCPPEXPORT ModelingView : public View
    {
        /** Defines whether to disable and enable capping. If enabled, the capping
                color can be further defined by 'cap_color', or using the color of the 
                solid that is being sectioned. If desired, solid interference check can 
                also be enabled for visual inspection 
         @deprecated Deprecated in NX5 <br> 
        */
        public: enum SectionCap
        {
            SectionCapOff/** disable */,
            SectionCapOn/** enable using cap_color */,
            SectionCapBodyColor/** enable using color of solid body */,
            SectionCapBodyColorAndInterference/** with interference check */
        };

        /** This arbitrarily defines an initaial reference point. If the 'primary' plane,
                which is farther from WCS, or the 'secondary' plane, which is closer to WCS, 
                should be the active sectioning (cutting) plane 
         @deprecated Deprecated in NX5 <br> 
        */
        public: enum SectionPlane
        {
            SectionPlanePrimary/** Primary */,
            SectionPlaneSecondary/** Secondary */
        };

         /** This defines the attributes data for dynamic sectioning 
         @deprecated Deprecated in NX5 <br> 
        */
        public:
        struct OtherSectionAttrT
        {
            public: /** If true, all enabled planes are moved as a group */bool Lock;
            public: /** Enable or disable capping */NXOpen::ModelingView::SectionCap CapType;
            public: /** capping color index from UG's color table */int CapColor;
            public: /** Either 1/2/6 planes can be active at a time */int TotalPlanesActive;
            public: /** To select the 'active' plane (of the 2 set) */NXOpen::ModelingView::SectionPlane ActivePlane;
            public: OtherSectionAttrT() :
                Lock(),
                CapType((NXOpen::ModelingView::SectionCap)0),
                CapColor(),
                TotalPlanesActive(),
                ActivePlane((NXOpen::ModelingView::SectionPlane)0)
            {
            }
            /** Constructor for the OtherSectionAttrT struct. */ 
            public: OtherSectionAttrT(bool INIT_lock /** If true, all enabled planes are moved as a group */, NXOpen::ModelingView::SectionCap INIT_cap_type /** Enable or disable capping */, int INIT_cap_color /** capping color index from UG's color table */, int INIT_total_planes_active /** Either 1/2/6 planes can be active at a time */, NXOpen::ModelingView::SectionPlane INIT_active_plane /** To select the 'active' plane (of the 2 set) */) :
                Lock(INIT_lock),
                CapType(INIT_cap_type),
                CapColor(INIT_cap_color),
                TotalPlanesActive(INIT_total_planes_active),
                ActivePlane(INIT_active_plane)
            {
            }
        };

        private: friend class  _ModelingViewBuilder;
        protected: ModelingView();
        /** Changes the set of lights used in the given view to the
                "Default" set, which for now is the Scene Ambient,
                Scene Left Top and Scene Right Top lights.  If the definition
                of the "Default" set should ever change, the implementation
                of this method would change accordingly.
             <br> License requirements : None */
        public: void UseDefaultLights
        (
        );
        /** Changes the set of lights used in the given view to the
                "Scene" set, which for now includes the eight predefined
                scene lights (including the Scene Ambient light).
                If the definition of the "Scene" set should ever change,
                the implementation of this method would change accordingly.
             <br> License requirements : None */
        public: void UseSceneLights
        (
        );
        /**Returns  the toggle between enabling or disabling the Dynamic Sectioning viewing  <br> License requirements : None */
        public: bool DisplaySectioningToggle
        (
        );
        /**Sets  the toggle between enabling or disabling the Dynamic Sectioning viewing  <br> License requirements : None */
        public: void SetDisplaySectioningToggle
        (
            bool new_state /** To enable or disable dyanamic Sectioning on display */
        );
        /** To adjust and orient the Sectioning planes as a quick display trick. It is not to
                confuse this operation with the TRUE modeling boolean operation.         
                All the attributes used are for the benefit of the UI dialog. The View Sectioning
                operation is really meanlingless when it is not in interactive mode without visual
                feedback (UI). But for journaling playback to work properly, we must remember the
                states of all the setting in the dialog. 
                
                There can be a max of six section planes at one time 'sectioning' out a geometry.
                When all are enabled, they are 3 set of 2-parallel planes. These 3 sets are ALWAYS
                perpendicular to each other much like the XYZ coordinate. Therefore, one 1 rotation
                matrix is required to orient all these 6 planes. Either 1, 2 or 6 planes can be enabled
                at anytime. Initially, these 3 sets are parallel to the x-y plane, x-z plane, and the 
                y-z plane of the WCS respectively. 
                
                With this API, user can update the distance of all 6 planes even the number of 
                active planes are 1 or 2. Therefore, the sizeof 'plane_dist' array does not have
                to be the same as field total_planes_active in @link ModelingView::OtherSectionAttrT ModelingView::OtherSectionAttrT@endlink .
                
                For further details on how dynamic sectioning works, please refer to the UG doc.
                
                 <br> This method is deprecated. 
                Use @link BasePart::CreateDynamicSectionBuilder BasePart::CreateDynamicSectionBuilder@endlink  
                to create section builder and modify view sectioning definition.
                 <br> 
                
         @deprecated Deprecated in NX5 <br> 
         <br> License requirements : None */
        public: void SetDisplaySectioning
        (
            const NXOpen::Matrix3x3 & section_matrix /** Section planes matrix relative to ABS coord */,
            const NXOpen::Point3d & section_origin /** Center of rectangle representing the active plane */,
            const std::vector<double> & plane_dist /** distance from section_object_origin of the 6 planes */,
            const NXOpen::ModelingView::OtherSectionAttrT & other_attrs /** additional sectioning attrs */
        );
        /** To adjust and orient the Sectioning planes as a quick display trick. It is not to
                confuse this operation with the TURE modeling boolean operation.         
                All the attributes used are for the benefit of the UI dialog. The View Sectioning
                operation is really meanlingless when it is not in interactive mode without visual
                feedback (UI). But for journaling playback to work properly, we must remember the
                states of all the setting in the dialog. 
                
                There can be a max of six section planes at one time 'sectioning' out a geometry.
                When all are enabled, they are 3 set of 2-parallel planes. These 3 sets are ALWAYS
                perpendicular to each other much like the XYZ coordinate. Therefore, one 1 rotation
                matrix is required to orient all these 6 planes. Either 1, 2 or 6 planes can be enabled
                at anytime. Initially, these 3 sets are parallel to the x-y plane, x-z plane, and the 
                y-z plane of the WCS respectively. 
                
                With this API, user can update the distance of all 6 planes even the number of 
                active planes are 1 or 2. Therefore, the sizeof 'plane_dist' array does not have
                to be the same as field total_planes_active in @link ModelingView::OtherSectionAttrT ModelingView::OtherSectionAttrT@endlink .
                
                For further details on how dynamic sectioning works, please refer to the UG doc.
                
                 <br> This method is deprecated. 
                Use @link BasePart::CreateDynamicSectionBuilder BasePart::CreateDynamicSectionBuilder@endlink  
                to create section builder and query sectioning attributes stored in a view.
                 <br>         
                
         @deprecated Deprecated in NX5 <br> 
         <br> License requirements : None */
        public: void GetDisplaySectioning
        (
            NXOpen::Matrix3x3* section_matrix /** Section planes matrix relative to ABS coord */,
            NXOpen::Point3d* section_origin /** Center of rectangle representing the active plane */,
            std::vector<double> & plane_dist /** distance from section_object_origin of the 6 planes */,
            NXOpen::ModelingView::OtherSectionAttrT* other_attrs /** additional sectioning attrs */
        );


        private: NXOpen::ModelingViewHighQualityImage *hiqhQualityImage;
        /** Returns the High Quality Image instance belonging to a view */
        public: NXOpen::ModelingViewHighQualityImage *HiqhQualityImage()
        {
            return hiqhQualityImage;
        }
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
