#ifndef NXOpen_FEATURES_WAVEDATUMBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_WAVEDATUMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_WaveDatumBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_WaveDatumBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class WaveDatumBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectObjectList;
    namespace Features
    {
        class _WaveDatumBuilderBuilder;
        /**  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateWaveDatumBuilder Features::FeatureCollection::CreateWaveDatumBuilder@endlink  <br> */
        class NXOPENCPPEXPORT WaveDatumBuilder : public Features::FeatureBuilder
        {
            private: friend class  _WaveDatumBuilderBuilder;
            protected: WaveDatumBuilder();
            /**Returns  the datum to link  <br> License requirements : None */
            public: NXOpen::SelectObjectList * Datums
            (
            );
            /**Returns  the display scale  <br> License requirements : None */
            public: double DisplayScale
            (
            );
            /**Sets  the display scale  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDisplayScale
            (
                double displayScale /** displayscale */ 
            );
            /**Returns  the associative  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the hideoriginal  <br> License requirements : None */
            public: bool HideOriginal
            (
            );
            /**Sets  the hideoriginal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHideOriginal
            (
                bool hideoriginal /** hideoriginal */ 
            );
            /**Returns  the makepositionindependent  <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the makepositionindependent  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
