#ifndef NXOpen_ROUTING_ELECTRICAL_CONNECTORDEVICE_HXX_INCLUDED
#define NXOpen_ROUTING_ELECTRICAL_CONNECTORDEVICE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Electrical_ConnectorDevice.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_SingleDevice.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        namespace Electrical
        {
            class ConnectorDevice;
        }
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class CableDevice;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class Connection;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalPartDefinitionShadow;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class ElectricalStockDevice;
        }
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDevice;
        }
    }
    namespace Routing
    {
        class LogicalTerminal;
    }
    namespace Routing
    {
        class SingleDevice;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class _ConnectorDeviceBuilder;
            /**
                        The Electrical ConnectorDevice corresponds to a connector instance of
                        @link Routing::SingleDevice Routing::SingleDevice@endlink .
                     <br> To create a new instance of this class, use @link Routing::Electrical::ConnectorDeviceCollection::CreateConnectorDevice Routing::Electrical::ConnectorDeviceCollection::CreateConnectorDevice@endlink  <br> */
            class NXOPENCPPEXPORT ConnectorDevice : public Routing::SingleDevice
            {
                /** Component type */
                public: enum ComponentType
                {
                    ComponentTypeNone/** none */ ,
                    ComponentTypeConnector/** connector */ ,
                    ComponentTypeSplice/** splice */ ,
                    ComponentTypeDevice/** device */ ,
                    ComponentTypeOther/** other */ 
                };

                /** Assignment method */
                public: enum Assign
                {
                    AssignNone/** none */ ,
                    AssignAuto/** auto */ ,
                    AssignManual/** manual */ 
                };

                private: friend class  _ConnectorDeviceBuilder;
                protected: ConnectorDevice();
                /** Get part definition.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::ElectricalPartDefinitionShadow * GetPartDefinition
                (
                );
                /** Sets part definition.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetPartDefinition
                (
                    NXOpen::Routing::Electrical::ElectricalPartDefinitionShadow * elec_part_definition_shadow /** elec part definition shadow */ 
                );
                /** Get terminals.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: std::vector<NXOpen::Routing::LogicalTerminal *> GetTerminals
                (
                );
                /** Remove a terminal.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: bool RemoveTerminal
                (
                    NXOpen::Routing::LogicalTerminal * route_terminal_to_remove /** route terminal to remove */ 
                );
                /**Returns  the connector type.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::ConnectorDevice::ComponentType ConnectorType
                (
                );
                /**Sets  the connector type.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetConnectorType
                (
                    NXOpen::Routing::Electrical::ConnectorDevice::ComponentType elec_rlist_component /** elec rlist component */ 
                );
                /** Get assign method.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::ConnectorDevice::Assign GetAssignMethod
                (
                );
                /** Get the nearest @link Routing::Electrical::HarnessDevice Routing::Electrical::HarnessDevice@endlink  encountered up the parent-child hierarchy.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::HarnessDevice * FindNearestHarnessDevice
                (
                );
                /** Get the nearest @link Routing::Electrical::CableDevice Routing::Electrical::CableDevice@endlink  encountered up the parent-child hierarchy.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::Electrical::CableDevice * FindNearestCableDevice
                (
                );
                /** Is the device a NX device?  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: bool IsNxDevice
                (
                    NXOpen::Routing::Electrical::HarnessDevice * elec_harness_device /** elec harness device */ 
                );
                /** Is the device a connector?  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: bool IsNxConnector
                (
                    NXOpen::Routing::Electrical::HarnessDevice * elec_harness_device /** elec harness device */ 
                );
                /** Is the device used in a routed connection?  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: bool IsUsedInRoutedConnection
                (
                    NXOpen::Routing::Electrical::HarnessDevice * elec_harness_device /** elec harness device */ 
                );
                /** Unassign connector.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void UnassignConnector
                (
                );
                /** Assign a connector manually.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void ManuallyAssignConnector
                (
                    NXOpen::Assemblies::Component * elec_connector_part_occurrence /** Component to assign. */
                );
                /** Find routed stock devices.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: std::vector<NXOpen::Routing::Electrical::ElectricalStockDevice *> FindRoutedStockDevices
                (
                );
                /** Get status of a connector device (assigned or not).  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: bool IsAssigned
                (
                );
                /** Find stock devices.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: std::vector<NXOpen::Routing::Electrical::ElectricalStockDevice *> FindStockDevices
                (
                );
                /** Find connections.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: std::vector<NXOpen::Routing::Electrical::Connection *> FindConnections
                (
                );
                /**Returns  the component name.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXString ComponentName
                (
                );
                /**Sets  the component name.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: void SetComponentName
                (
                    const NXString & component_name /** component name */ 
                );
                /** Get @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  given the name of the terminal.
                                If a terminal does not exists creates a terminal @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") */
                public: NXOpen::Routing::LogicalTerminal * GetTerminal
                (
                    const NXString & terminal_name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                    bool create_terminal /** TRUE - creates a new terminal if one does not exist with given name*/
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
