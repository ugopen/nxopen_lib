#ifndef NXOpen_ANNOTATIONS_LINEANDARROWPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LINEANDARROWPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LineAndArrowPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class LineAndArrowPreferences;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents line and arrow preferences */
        class NXOPENCPPEXPORT LineAndArrowPreferences : public TransientObject
        {
            public: explicit LineAndArrowPreferences(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~LineAndArrowPreferences();
            /**Returns  the first arrow type  <br> License requirements : None */
            public: NXOpen::Annotations::ArrowheadType FirstArrowType
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link FirstArrowType() FirstArrowType@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::ArrowheadType GetFirstArrowType
            (
            ) { return this->FirstArrowType(); }
            /**Sets  the first arrow type  <br> License requirements : None */
            public: void SetFirstArrowType
            (
                NXOpen::Annotations::ArrowheadType first_arrow_type /** first arrow type */ 
            );
            /**Returns  the second arrow type  <br> License requirements : None */
            public: NXOpen::Annotations::ArrowheadType SecondArrowType
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link SecondArrowType() SecondArrowType@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::ArrowheadType GetSecondArrowType
            (
            ) { return this->SecondArrowType(); }
            /**Sets  the second arrow type  <br> License requirements : None */
            public: void SetSecondArrowType
            (
                NXOpen::Annotations::ArrowheadType second_arrow_type /** second arrow type */ 
            );
            /**Returns  the leader location  <br> License requirements : None */
            public: NXOpen::Annotations::VerticalTextJustification LeaderLocation
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LeaderLocation() LeaderLocation@endlink instead.
            @deprecated
            */
            public: NXOpen::Annotations::VerticalTextJustification GetLeaderLocation
            (
            ) { return this->LeaderLocation(); }
            /**Sets  the leader location  <br> License requirements : None */
            public: void SetLeaderLocation
            (
                NXOpen::Annotations::VerticalTextJustification leader_location /** leader location */ 
            );
            /**Returns  the arrowhead length  <br> License requirements : None */
            public: double ArrowheadLength
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ArrowheadLength() ArrowheadLength@endlink instead.
            @deprecated
            */
            public: double GetArrowheadLength
            (
            ) { return this->ArrowheadLength(); }
            /**Sets  the arrowhead length  <br> License requirements : None */
            public: void SetArrowheadLength
            (
                double arrowhead_length /** arrowhead length */ 
            );
            /**Returns  the arrowhead included angle  <br> License requirements : None */
            public: double ArrowheadIncludedAngle
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ArrowheadIncludedAngle() ArrowheadIncludedAngle@endlink instead.
            @deprecated
            */
            public: double GetArrowheadIncludedAngle
            (
            ) { return this->ArrowheadIncludedAngle(); }
            /**Sets  the arrowhead included angle  <br> License requirements : None */
            public: void SetArrowheadIncludedAngle
            (
                double arrowhead_included_angle /** arrowhead included angle */ 
            );
            /**Returns  the dot arrowhead diameter  <br> License requirements : None */
            public: double DotArrowheadDiameter
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link DotArrowheadDiameter() DotArrowheadDiameter@endlink instead.
            @deprecated
            */
            public: double GetDotArrowheadDiameter
            (
            ) { return this->DotArrowheadDiameter(); }
            /**Sets  the dot arrowhead diameter  <br> License requirements : None */
            public: void SetDotArrowheadDiameter
            (
                double dot_arrowhead_diameter /** dot arrowhead diameter */ 
            );
            /**Returns  the stub length  <br> License requirements : None */
            public: double StubLength
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link StubLength() StubLength@endlink instead.
            @deprecated
            */
            public: double GetStubLength
            (
            ) { return this->StubLength(); }
            /**Sets  the stub length  <br> License requirements : None */
            public: void SetStubLength
            (
                double stub_length /** stub length */ 
            );
            /**Returns  the text to line distance  <br> License requirements : None */
            public: double TextToLineDistance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link TextToLineDistance() TextToLineDistance@endlink instead.
            @deprecated
            */
            public: double GetTextToLineDistance
            (
            ) { return this->TextToLineDistance(); }
            /**Sets  the text to line distance  <br> License requirements : None */
            public: void SetTextToLineDistance
            (
                double text_to_line_distance /** text to line distance */ 
            );
            /**Returns  the line past arrow distance  <br> License requirements : None */
            public: double LinePastArrowDistance
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LinePastArrowDistance() LinePastArrowDistance@endlink instead.
            @deprecated
            */
            public: double GetLinePastArrowDistance
            (
            ) { return this->LinePastArrowDistance(); }
            /**Sets  the line past arrow distance  <br> License requirements : None */
            public: void SetLinePastArrowDistance
            (
                double line_past_arrow_distance /** line past arrow distance */ 
            );
            /**Returns  the oblique extension line angle  <br> License requirements : None */
            public: double ObliqueExtensionLineAngle
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ObliqueExtensionLineAngle() ObliqueExtensionLineAngle@endlink instead.
            @deprecated
            */
            public: double GetObliqueExtensionLineAngle
            (
            ) { return this->ObliqueExtensionLineAngle(); }
            /**Sets  the oblique extension line angle  <br> License requirements : None */
            public: void SetObliqueExtensionLineAngle
            (
                double oblique_extension_line_angle /** oblique extension line angle */ 
            );
            /**Returns  the first position to extension line distance  <br> License requirements : None */
            public: double FirstPosToExtLineDist
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link FirstPosToExtLineDist() FirstPosToExtLineDist@endlink instead.
            @deprecated
            */
            public: double GetFirstPosToExtLineDist
            (
            ) { return this->FirstPosToExtLineDist(); }
            /**Sets  the first position to extension line distance  <br> License requirements : None */
            public: void SetFirstPosToExtLineDist
            (
                double first_pos_to_extension_line_distance /** first pos to extension line distance */ 
            );
            /**Returns  the second position to extension line distance  <br> License requirements : None */
            public: double SecondPosToExtLineDist
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link SecondPosToExtLineDist() SecondPosToExtLineDist@endlink instead.
            @deprecated
            */
            public: double GetSecondPosToExtLineDist
            (
            ) { return this->SecondPosToExtLineDist(); }
            /**Sets  the second position to extension line distance  <br> License requirements : None */
            public: void SetSecondPosToExtLineDist
            (
                double second_pos_to_extension_line_distance /** second pos to extension line distance */ 
            );
            /**Returns  the datum extension line past the arrow distance  <br> License requirements : None */
            public: double DatumLengthPastArrow
            (
            );
            /**Sets  the datum extension line past the arrow distance  <br> License requirements : None */
            public: void SetDatumLengthPastArrow
            (
                double datum_length_past_arrow /** datum length past arrow */ 
            );
            /**Returns  the text to stub spacing factor  <br> License requirements : None */
            public: double TextOverStubSpaceFactor
            (
            );
            /**Sets  the text to stub spacing factor  <br> License requirements : None */
            public: void SetTextOverStubSpaceFactor
            (
                double text_over_stub_space_factor /** text over stub space factor */ 
            );
            /** Returns the first extension line color, font, and width  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetFirstExtensionLineCfw
            (
            );
            /** Sets the first extension line color, font, and width  <br> License requirements : None */
            public: void SetFirstExtensionLineCfw
            (
                const NXOpen::Annotations::LineCfw & first_extension_line_cfw /** first extension line cfw */ 
            );
            /** Returns the first arrowhead color, font, and width  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetFirstArrowheadCfw
            (
            );
            /** Sets the first arrowhead color, font, and width  <br> License requirements : None */
            public: void SetFirstArrowheadCfw
            (
                const NXOpen::Annotations::LineCfw & first_arrowhead_cfw /** first arrowhead cfw */ 
            );
            /** Returns the first arrow line color, font, and width  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetFirstArrowLineCfw
            (
            );
            /** Sets the first arrow line color, font, and width  <br> License requirements : None */
            public: void SetFirstArrowLineCfw
            (
                const NXOpen::Annotations::LineCfw & first_arrow_line_cfw /** first arrow line cfw */ 
            );
            /** Returns the second extension line color, font, and width  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetSecondExtensionLineCfw
            (
            );
            /** Sets the second extension line color, font, and width  <br> License requirements : None */
            public: void SetSecondExtensionLineCfw
            (
                const NXOpen::Annotations::LineCfw & second_extension_line_cfw /** second extension line cfw */ 
            );
            /** Returns the second arrowhead color, font, and width  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetSecondArrowheadCfw
            (
            );
            /** Sets the second arrowhead color, font, and width  <br> License requirements : None */
            public: void SetSecondArrowheadCfw
            (
                const NXOpen::Annotations::LineCfw & second_arrowhead_cfw /** second arrowhead cfw */ 
            );
            /** Returns the second arrow line color, font, and width  @return   <br> License requirements : None */
            public: NXOpen::Annotations::LineCfw GetSecondArrowLineCfw
            (
            );
            /** Sets the second arrow line color, font, and width  <br> License requirements : None */
            public: void SetSecondArrowLineCfw
            (
                const NXOpen::Annotations::LineCfw & second_arrow_line_cfw /** second arrow line cfw */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
