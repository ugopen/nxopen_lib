#ifndef NXOpen_ANNOTATIONS_CUSTOMSYMBOLTEXTDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_CUSTOMSYMBOLTEXTDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_CustomSymbolTextData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CustomSymbols.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class CustomSymbolTextData;
    }
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** Represents custom symbol text data */
        class NXOPENCPPEXPORT CustomSymbolTextData : public TransientObject
        {
            public: explicit CustomSymbolTextData(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~CustomSymbolTextData();
            /**Returns  the text type  <br> License requirements : None */
            public: NXOpen::Annotations::TextType TextType
            (
            );
            /**Returns  the control text index. Valid for the text type
                        @link Annotations::TextTypeControlled Annotations::TextTypeControlled@endlink .  <br> License requirements : None */
            public: int ControlTextIndex
            (
            );
            /**Sets  the control text index. Valid for the text type
                        @link Annotations::TextTypeControlled Annotations::TextTypeControlled@endlink .  <br> License requirements : None */
            public: void SetControlTextIndex
            (
                int index /** New control text index */
            );
            /** Returns the text. Valid for the text type
                        @link Annotations::TextTypeArbitrary Annotations::TextTypeArbitrary@endlink  and            
                        @link Annotations::TextTypePartiallyControlled Annotations::TextTypePartiallyControlled@endlink .  @return  List of lines  <br> License requirements : None */
            public: std::vector<NXString> GetText
            (
            );
            /** Sets the text. Valid for the text type
                        @link Annotations::TextTypeArbitrary Annotations::TextTypeArbitrary@endlink  and        
                        @link Annotations::TextTypePartiallyControlled Annotations::TextTypePartiallyControlled@endlink .  <br> License requirements : None */
            public: void SetText
            (
                std::vector<NXString> & lines /** List of lines */
            );
            /**Returns  the integer value. Valid for the text type
                        @link Annotations::TextTypeInteger Annotations::TextTypeInteger@endlink .  <br> License requirements : None */
            public: int IntegerValue
            (
            );
            /**Sets  the integer value. Valid for the text type
                        @link Annotations::TextTypeInteger Annotations::TextTypeInteger@endlink .  <br> License requirements : None */
            public: void SetIntegerValue
            (
                int int_value /** New integer value */
            );
            /**Returns  the real value. Valid for the text type
                        @link Annotations::TextTypeReal Annotations::TextTypeReal@endlink .  <br> License requirements : None */
            public: double RealValue
            (
            );
            /**Sets  the real value. Valid for the text type
                        @link Annotations::TextTypeReal Annotations::TextTypeReal@endlink .  <br> License requirements : None */
            public: void SetRealValue
            (
                double real_value /** New real value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
