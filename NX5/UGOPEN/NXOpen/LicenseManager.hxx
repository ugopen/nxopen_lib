#ifndef NXOpen_LICENSEMANAGER_HXX_INCLUDED
#define NXOpen_LICENSEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LicenseManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class LicenseManager;
    class Session;
    /** Provides utility methods for managing licenses.
        
         <br> This class only manages the licenses that are used by the current NX Open
        application. If several applications are loaded in a session, each application will
        have its own independent license manager. It is possible for two applications to both
        reserve the same license.  Although this will only reserve a single license from the
        FLEX server, the license will not be released to the server until both applications
        have released it. 
         <br> 
        
         <br> 
        The main NX User Interface will also manage licenses independently. If an NX Open 
        application releases the "solid_modeling" license, but the main NX UI is still using that 
        license, then it will not be returned to the server.
         <br> 

         <br> Methods for this class use the license feature name, which can be found in the
        documentation for NX Open methods and properties. This is in the format 
        <tt>License requirements: license feature name ("license description")</tt>.  For
        example, given <tt>License requirements: solid_modeling ("SOLIDS MODELING")</tt>, then
        the license feature name, <tt>solid_modeling</tt> would be used. <br> 
        
      <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
    class NXOPENCPPEXPORT LicenseManager
    {
        private: NXOpen::Session* m_owner;
        public: explicit LicenseManager(NXOpen::Session *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Reserve a license for the current NX Open application.  <br> License requirements : None */
        public: void Reserve
        (
            const NXString & license /** License feature name to be reserved   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Release a license for the current NX Open application.  <br> License requirements : None */
        public: void Release
        (
            const NXString & license /** License feature name to be released   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Returns true if the license is reserved by the current NX Open application.  @return  
         @deprecated Deprecated in NX5 <br> 
         <br> License requirements : None */
        public: bool IsReserved
        (
            const NXString & license /** License feature name to be queried   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
