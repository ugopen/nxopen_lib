#ifndef NXOpen_FEATURES_DRAFTBODYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_DRAFTBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_DraftBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_DraftBodyBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class DraftBodyBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    class SelectDisplayableObject;
    namespace Features
    {
        class _DraftBodyBuilderBuilder;
        /**
            Represents a @link Features::DraftBody Features::DraftBody@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateDraftBodyBuilder Features::FeatureCollection::CreateDraftBodyBuilder@endlink  <br> */
        class NXOPENCPPEXPORT DraftBodyBuilder : public Features::FeatureBuilder
        {
            /** Describes the Draft Body method as true draft or isocline draft.
                     */
            public: enum Method
            {
                MethodIsocline/** Indicates use of isocline algorithm to create draft. Default value. */,
                MethodTrueDraft/** Indicates use of true draft algorithm to create draft.*/
            };

            /** Describes the different match options.
                     */
            public: enum MatchOption
            {
                MatchOptionNone/** No match option is specified */,
                MatchOptionAll/** All faces-to-draft are to be matched */,
                MatchOptionAllButSelected/** All faces-to-draft except the ones explicitly indicated are to be matched */
            };

            /** Describes the different repair options.
                     */
            public: enum RepairOption
            {
                RepairOptionNone/** No repair option is specified */,
                RepairOptionBlends/** Repair concave miter corners with blends */,
                RepairOptionPlanes/** Repair concave miter corners with planes */,
                RepairOptionBoth/** Repair concave miter corners with both blends and planes */
            };

            /** Describes the different Draft Body types
                     */
            public: enum Types
            {
                TypesEdges/** From Edges */,
                TypesFaces/** Faces to Draft */
            };

            private: friend class  _DraftBodyBuilderBuilder;
            protected: DraftBodyBuilder();
            /**Returns  the draft body type  <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::Types Type
            (
            );
            /**Sets  the draft body type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::DraftBodyBuilder::Types type /** type */ 
            );
            /**Returns  the parting object  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * PartingObject
            (
            );
            /**Returns  the draw direction  <br> License requirements : None */
            public: NXOpen::Direction * DrawDirection
            (
            );
            /**Sets  the draw direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrawDirection
            (
                NXOpen::Direction * drawDirection /** drawdirection */ 
            );
            /**Returns  the stationary edges above parting  <br> License requirements : None */
            public: NXOpen::ScCollector * StationaryEdgesAboveParting
            (
            );
            /**Returns  the stationary edges below parting  <br> License requirements : None */
            public: NXOpen::ScCollector * StationaryEdgesBelowParting
            (
            );
            /**Returns  the faces to draft  <br> License requirements : None */
            public: NXOpen::ScCollector * FacesToDraft
            (
            );
            /**Returns  the draft angle  <br> License requirements : None */
            public: NXOpen::Expression * DraftAngle
            (
            );
            /**Returns  the draft method  <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::Method DraftMethod
            (
            );
            /**Sets  the draft method  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDraftMethod
            (
                NXOpen::Features::DraftBodyBuilder::Method draftMethod /** draftmethod */ 
            );
            /**Returns  the matching option  <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::MatchOption MatchingOption
            (
            );
            /**Sets  the matching option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchingOption
            (
                NXOpen::Features::DraftBodyBuilder::MatchOption matchingOption /** matchingoption */ 
            );
            /**Returns  the edges that will not be matched when matching option is AllButSelected  <br> License requirements : None */
            public: NXOpen::ScCollector * UnmatchedEdges
            (
            );
            /**Returns  the faces that will not be matched when matching option is AllButSelected  <br> License requirements : None */
            public: NXOpen::ScCollector * UnmatchedFaces
            (
            );
            /**Returns  the repairing option  <br> License requirements : None */
            public: NXOpen::Features::DraftBodyBuilder::RepairOption RepairingOption
            (
            );
            /**Sets  the repairing option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRepairingOption
            (
                NXOpen::Features::DraftBodyBuilder::RepairOption repairingOption /** repairingoption */ 
            );
            /**Returns  the repair radius  <br> License requirements : None */
            public: NXOpen::Expression * RepairRadius
            (
            );
            /**Returns  the extreme face point overrides stationary  <br> License requirements : None */
            public: bool ExtremeFacePointOverridesStationary
            (
            );
            /**Sets  the extreme face point overrides stationary  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtremeFacePointOverridesStationary
            (
                bool extremeFacePointOverridesStationary /** extremefacepointoverridesstationary */ 
            );
            /**Returns  the edges to move to drafted face  <br> License requirements : None */
            public: NXOpen::ScCollector * EdgesToMoveToDraftedFace
            (
            );
            /**Returns  the faces to move to drafted face  <br> License requirements : None */
            public: NXOpen::ScCollector * FacesToMoveToDraftedFace
            (
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
