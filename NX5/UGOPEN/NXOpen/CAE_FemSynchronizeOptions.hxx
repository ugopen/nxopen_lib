#ifndef NXOpen_CAE_FEMSYNCHRONIZEOPTIONS_HXX_INCLUDED
#define NXOpen_CAE_FEMSYNCHRONIZEOPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FemSynchronizeOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class FemSynchronizeOptions;
    }
    namespace CAE
    {
        /**  @brief  Represents the synchronize options to be used when a FEM part is created
                          These options will be used to synchronize the specified entities from the
                          master CAD part file to the FEM part file  

           <br> To create a new instance of this class, use @link CAE::FemPart::NewFemSynchronizeOptions CAE::FemPart::NewFemSynchronizeOptions@endlink  <br> */
        class NXOPENCPPEXPORT FemSynchronizeOptions : public TransientObject
        {
            public: explicit FemSynchronizeOptions(void *ptr);
            /**Sets all the synchronize options to the given boolean value <br> License requirements : None */
            public: void SetAllSynchronizeFlags
            (
                bool synchronize_option /** synchronize option */ 
            );
            /**Sets  the synchronize points flag  <br> License requirements : None */
            public: void SetSynchronizePointsFlag
            (
                bool synchronize_option /** synchronize option */ 
            );
            /**Returns  the synchronize points flag  <br> License requirements : None */
            public: bool SynchronizePointsFlag
            (
            );
            /**Sets  the synchronize coordinate system flag  <br> License requirements : None */
            public: void SetSynchronizeCoordinateSystemFlag
            (
                bool synchronize_option /** synchronize option */ 
            );
            /**Returns  the synchronize coordinate system flag  <br> License requirements : None */
            public: bool SynchronizeCoordinateSystemFlag
            (
            );
            /**Sets  the synchronize lines flag  <br> License requirements : None */
            public: void SetSynchronizeLinesFlag
            (
                bool synchronize_option /** synchronize option */ 
            );
            /**Returns  the synchronize lines flag  <br> License requirements : None */
            public: bool SynchronizeLinesFlag
            (
            );
            /**Sets  the synchronize arcs flag  <br> License requirements : None */
            public: void SetSynchronizeArcsFlag
            (
                bool synchronize_option /** synchronize option */ 
            );
            /**Returns  the synchronize arcs flag  <br> License requirements : None */
            public: bool SynchronizeArcsFlag
            (
            );
            /**Sets  the synchronize splines flag  <br> License requirements : None */
            public: void SetSynchronizeSplinesFlag
            (
                bool synchronize_option /** synchronize option */ 
            );
            /**Returns  the synchronize splines flag  <br> License requirements : None */
            public: bool SynchronizeSplinesFlag
            (
            );
            /**Sets  the synchronize sketch curves flag  <br> License requirements : None */
            public: void SetSynchronizeSketchCurvesFlag
            (
                bool synchronize_option /** synchronize option */ 
            );
            /**Returns  the synchronize sketch curves flag  <br> License requirements : None */
            public: bool SynchronizeSketchCurvesFlag
            (
            );
            /** Destroys the object  <br> License requirements : None */
            public: virtual ~FemSynchronizeOptions();
        };
    }
}
#undef EXPORTLIBRARY
#endif
