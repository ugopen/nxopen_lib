#ifndef NXOpen_SMARTOBJECT_HXX_INCLUDED
#define NXOpen_SMARTOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SmartObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SmartObject;
    class DisplayableObject;
    class _SmartObjectBuilder;
    /** Represents a smart object.

        For more information, refer to the smart object 
        documentation in the <a href="../ugopen_doc/uf_so/index.html"> NXOpen API Reference Guide</a>.
     <br> This is an abstract class, and cannot be instantiated <br> */
    class NXOPENCPPEXPORT SmartObject : public DisplayableObject
    {
        /** Specifies when the smart object updates. */
        public: enum UpdateOption
        {
            UpdateOptionDontUpdate/** No update occurs. */,
            UpdateOptionWithinModeling/** Updates within modeling (e.g. a feature). */,
            UpdateOptionAfterModeling/** Updates after modeling (e.g. a dimension). */,
            UpdateOptionAfterParentBody/** Updates after the parent body. */
        };

        /** Specifies the smart object visibility. */
        public: enum VisibilityOption
        {
            VisibilityOptionInvisible/** Default creation. */,
            VisibilityOptionVisible/** visible */ ,
            VisibilityOptionVisibleIfParentInvisible/** Visible if a parent is not loaded (for extract). */
        };

        private: friend class  _SmartObjectBuilder;
        protected: SmartObject();
        /**Returns  the update option.  <br> License requirements : None */
        public: NXOpen::SmartObject::UpdateOption Update
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Update() Update@endlink instead.
        @deprecated
        */
        public: NXOpen::SmartObject::UpdateOption GetUpdate
        (
        ) { return this->Update(); }
        /** Removes the smart object parameters.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void RemoveParameters
        (
        );
        /** Edit a smart object by replacing its parameters using parameters of 
               other smart object of the same class.
               Other smart object is destroyed after editing.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void ReplaceParameters
        (
            NXOpen::SmartObject * other_so /** other so */ 
        );
        /** Evaluate a smart object. 
               Typically smart object should be logged for update and final update should be
               performed at correct time so that smart object is processed with all its dependencies.
               In some situations, such as after replacing parameters of smart object, if it needs
               to be used immediately without performing final update, it may be forced to evaluate.
               When evaluate is called, smart object is evaluated based on current state of
               its parents and its children are not affected.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Evaluate
        (
        );
        /**Returns  the visibility.  <br> License requirements : None */
        public: NXOpen::SmartObject::VisibilityOption Visibility
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Visibility() Visibility@endlink instead.
        @deprecated
        */
        public: NXOpen::SmartObject::VisibilityOption GetVisibility
        (
        ) { return this->Visibility(); }
        /** Sets the visibility.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetVisibility
        (
            NXOpen::SmartObject::VisibilityOption visibility /** visibility */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
