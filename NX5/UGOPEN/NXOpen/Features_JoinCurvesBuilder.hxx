#ifndef NXOpen_FEATURES_JOINCURVESBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_JOINCURVESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_JoinCurvesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_JoinCurvesBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveOptions.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class JoinCurvesBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveOptions;
    }
    class Section;
    namespace Features
    {
        class _JoinCurvesBuilderBuilder;
        /**
            Represents a @link Features::JoinCurves Features::JoinCurves@endlink  builder.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateJoinCurvesBuilder Features::FeatureCollection::CreateJoinCurvesBuilder@endlink  <br> */
        class NXOPENCPPEXPORT JoinCurvesBuilder : public Features::FeatureBuilder
        {

            public: enum OutputCurve
            {
                OutputCurveGeneral/**General output curve*/,
                OutputCurveCubic/**Cubic output curve*/,
                OutputCurveQuintic/**Quintic output curve*/,
                OutputCurveAdvanced/**Advanced output curve*/
            };

            private: friend class  _JoinCurvesBuilderBuilder;
            protected: JoinCurvesBuilder();
            /**Returns  the section that collects the input curves that are to be joined. Multiple loops or
                    self intersecting curves should not be added to the section.  <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Returns  the Curve Options. This object contains the data about the associativity and corresponding action
                    on the input curves. A feature is created only if the associativity is switched ON and the input curves
                    can not be deleted or replaced.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::CurveOptions * CurveOptions
            (
            );
            /**Returns  the output curve type. If the output curve type is advaned, the maximum degree for output
                    spline and maximum number of segments should also be provided. <br> License requirements : None */
            public: NXOpen::Features::JoinCurvesBuilder::OutputCurve OutputCurveType
            (
            );
            /**Sets  the output curve type. If the output curve type is advaned, the maximum degree for output
                    spline and maximum number of segments should also be provided. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOutputCurveType
            (
                NXOpen::Features::JoinCurvesBuilder::OutputCurve outputCurveType /** outputcurvetype */ 
            );
            /**Returns  the maximum degree of the advanced spline output. This integer is only used in cases where the output
                    curve option is set to advanced type. <br> License requirements : None */
            public: int MaximumDegree
            (
            );
            /**Sets  the maximum degree of the advanced spline output. This integer is only used in cases where the output
                    curve option is set to advanced type. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaximumDegree
            (
                int maximumDegree /** maximumdegree */ 
            );
            /**Returns  the maximum number of segments of the advanced spline output. This integer is only used in cases where
                    the output curve option is set to advanced type. <br> License requirements : None */
            public: int MaximumSegments
            (
            );
            /**Sets  the maximum number of segments of the advanced spline output. This integer is only used in cases where
                    the output curve option is set to advanced type. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaximumSegments
            (
                int maximumSegments /** maximumsegments */ 
            );
            /**Returns  the distance tolerance. This tolerance is used while creating the joined curve. The same tolerance
                    is also applied to the section. <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance. This tolerance is used while creating the joined curve. The same tolerance
                    is also applied to the section. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance. This tolerance is used while creating the joined curve. The same tolerance
                    is also applied to the section. <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance. This tolerance is used while creating the joined curve. The same tolerance
                    is also applied to the section. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
