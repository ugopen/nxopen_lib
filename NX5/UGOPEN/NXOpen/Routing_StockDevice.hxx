#ifndef NXOpen_ROUTING_STOCKDEVICE_HXX_INCLUDED
#define NXOpen_ROUTING_STOCKDEVICE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_StockDevice.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_SingleDevice.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class StockDevice;
    }
    namespace Routing
    {
        class SingleDevice;
    }
    namespace Routing
    {
        class StockDefinition;
    }
    namespace Routing
    {
        class _StockDeviceBuilder;
        /** 
                The Routing StockDevice corresponds to a generic stock instance 
                of @link Routing::SingleDevice Routing::SingleDevice@endlink .
             <br> Creator not available in KF. <br> */
        class NXOPENCPPEXPORT StockDevice : public Routing::SingleDevice
        {
            private: friend class  _StockDeviceBuilder;
            protected: StockDevice();
            /**Returns  the stock length.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double StockLength
            (
            );
            /**Sets  the stock length.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockLength
            (
                double stock_length /** stock length */ 
            );
            /**Returns  the stock definition.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::StockDefinition * StockDefinition
            (
            );
            /**Sets  the stock definition.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockDefinition
            (
                NXOpen::Routing::StockDefinition * route_stock_definition /** route stock definition */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
