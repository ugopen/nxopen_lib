#ifndef NXOpen_CAE_FEMODEL_HXX_INCLUDED
#define NXOpen_CAE_FEMODEL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FEModel.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_IFEModel.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class FEModel;
    }
    namespace CAE
    {
        class BeamSectionCollection;
    }
    namespace CAE
    {
        class IFEModel;
    }
    namespace CAE
    {
        class MeshCollection;
    }
    namespace CAE
    {
        class MeshCollectorCollection;
    }
    namespace CAE
    {
        class MeshCollectorManager;
    }
    namespace CAE
    {
        class MeshControlCollection;
    }
    namespace CAE
    {
        class NodeElementManager;
    }
    namespace CAE
    {
        class _FEModelBuilder;
        /**  @brief  This class represents a Finite Element Model.
                          This class will act as the gateway to the 
                          Finite Element Nodes (@link CAE::FENode CAE::FENode@endlink ) and Elements (@link CAE::FEElement CAE::FEElement@endlink ) in the model. 
                          Only one instance of this class will exist in each fem part file 

           <br> To obtain an instance of this class, use @link CAE::FemPart::FEModel CAE::FemPart::FEModel@endlink  <br> */
        class NXOPENCPPEXPORT FEModel : public CAE::IFEModel
        {
             /** Structure to specify the Node, Element, and Physical property table start ids and offsets for use in JA_FE_MODEL_append_femodel */
            public:
            struct IdSpecificationObject
            {
                public: /** String to prepend to fem object names such as element collector, material and section */NXString FemObjectPrependName;
                public: /** Start id to use for imported nodes */int NodeStartId;
                public: /** If true node_start_id will be used as an offset for imported node ids */bool NodeIdOffset;
                public: /** Start id to use for imported elements */int ElementStartId;
                public: /** If true element_start_id will be used as an offset for imported element ids */bool ElementIdOffset;
                public: /** Start id to use for imported physical property tables */int PhysicalPropertyTableStartId;
                public: /** If true physical_property_table_start_id will be used as an offset for imported physical property table ids */bool PhysicalPropertyTableIdOffset;
                public: IdSpecificationObject() :
                    FemObjectPrependName(),
                    NodeStartId(),
                    NodeIdOffset(),
                    ElementStartId(),
                    ElementIdOffset(),
                    PhysicalPropertyTableStartId(),
                    PhysicalPropertyTableIdOffset()
                {
                }
                /** Constructor for the IdSpecificationObject struct. */ 
                public: IdSpecificationObject(NXString INIT_fem_object_prepend_name /** String to prepend to fem object names such as element collector, material and section */, int INIT_node_start_id /** Start id to use for imported nodes */, bool INIT_node_id_offset /** If true node_start_id will be used as an offset for imported node ids */, int INIT_element_start_id /** Start id to use for imported elements */, bool INIT_element_id_offset /** If true element_start_id will be used as an offset for imported element ids */, int INIT_physical_property_table_start_id /** Start id to use for imported physical property tables */, bool INIT_physical_property_table_id_offset /** If true physical_property_table_start_id will be used as an offset for imported physical property table ids */) :
                    FemObjectPrependName(INIT_fem_object_prepend_name),
                    NodeStartId(INIT_node_start_id),
                    NodeIdOffset(INIT_node_id_offset),
                    ElementStartId(INIT_element_start_id),
                    ElementIdOffset(INIT_element_id_offset),
                    PhysicalPropertyTableStartId(INIT_physical_property_table_start_id),
                    PhysicalPropertyTableIdOffset(INIT_physical_property_table_id_offset)
                {
                }
            };

            private: friend class  _FEModelBuilder;
            protected: FEModel();
            /** Finds the @link  NXObject   NXObject @endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return   <br> License requirements : None */
            public: NXOpen::TaggedObject * Find
            (
                const NXString & journal_identifier /** Journal identifier of the object   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** This method appends finite element model data from a source fem
                     <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AppendFemodel
            (
                NXOpen::CAE::FEModel * source_fem /** Source finite element model to append data from */,
                const NXOpen::CAE::FEModel::IdSpecificationObject & id_spec /** Node, Element, and Physical property table id specification object */
            );


            private: NXOpen::CAE::MeshControlCollection *meshControls;
            /** Returns the mesh control collection belonging to this fem part */
            public: NXOpen::CAE::MeshControlCollection *MeshControls()
            {
                return meshControls;
            }
            private: NXOpen::CAE::MeshCollection *meshes;
            /** Returns the mesh collection belonging to the part */
            public: NXOpen::CAE::MeshCollection *Meshes()
            {
                return meshes;
            }
            private: NXOpen::CAE::MeshCollectorCollection *meshCollectors;
            /** Returns the mesh collector collection belonging to the part */
            public: NXOpen::CAE::MeshCollectorCollection *MeshCollectors()
            {
                return meshCollectors;
            }
            private: NXOpen::CAE::BeamSectionCollection *beamSections;
            /** Returns the Beam Section collection belonging to the part */
            public: NXOpen::CAE::BeamSectionCollection *BeamSections()
            {
                return beamSections;
            }
            private: NXOpen::CAE::NodeElementManager *nodeElementMgr;
            /** Returns the node element manager belonging to this fem part */
            public: NXOpen::CAE::NodeElementManager *NodeElementMgr()
            {
                return nodeElementMgr;
            }
            private: NXOpen::CAE::MeshCollectorManager *meshCollectorMgr;
            /** Returns the mesh collector manager belonging to the part */
            public: NXOpen::CAE::MeshCollectorManager *MeshCollectorMgr()
            {
                return meshCollectorMgr;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
