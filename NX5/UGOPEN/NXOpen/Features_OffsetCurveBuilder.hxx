#ifndef NXOpen_FEATURES_OFFSETCURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_OFFSETCURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_OffsetCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_OffsetCurveBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveFitOptions.hxx>
#include <NXOpen/GeometricUtilities_CurveOptions.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class OffsetCurveBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveFitOptions;
    }
    namespace GeometricUtilities
    {
        class CurveOptions;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class Point;
    class Section;
    namespace Features
    {
        class _OffsetCurveBuilderBuilder;
        /** Represents a @link Features::OffsetCurve Features::OffsetCurve@endlink  builder  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateOffsetCurveBuilder Features::FeatureCollection::CreateOffsetCurveBuilder@endlink  <br> */
        class NXOPENCPPEXPORT OffsetCurveBuilder : public Features::FeatureBuilder
        {
            /** Represents the Offset Curve trim option */
            public: enum TrimOption
            {
                TrimOptionNone/** None */,
                TrimOptionExtendTangents/** Extend Tangents */,
                TrimOptionFillet/** Fillet */
            };

            /** Represents the Offset Curve types */
            public: enum Types
            {
                TypesDistance/** Distance */,
                TypesDraft/** Draft */,
                TypesLawControl/** Law Control */,
                TypesAxial3d/** 3D Axial */
            };

            private: friend class  _OffsetCurveBuilderBuilder;
            protected: OffsetCurveBuilder();
            /**Returns  the offset type  <br> License requirements : None */
            public: NXOpen::Features::OffsetCurveBuilder::Types Type
            (
            );
            /**Sets  the offset type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetType
            (
                NXOpen::Features::OffsetCurveBuilder::Types type /** type */ 
            );
            /**Returns  the curves to offset  <br> License requirements : None */
            public: NXOpen::Section * CurvesToOffset
            (
            );
            /**Returns  the point on offset plane  <br> License requirements : None */
            public: NXOpen::Point * PointOnOffsetPlane
            (
            );
            /**Sets  the point on offset plane  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetPointOnOffsetPlane
            (
                NXOpen::Point * pointOnOffsetPlane /** pointonoffsetplane */ 
            );
            /**Returns  the distance  <br> License requirements : None */
            public: NXOpen::Expression * OffsetDistance
            (
            );
            /**Returns  the height  <br> License requirements : None */
            public: NXOpen::Expression * DraftHeight
            (
            );
            /**Returns  the angle  <br> License requirements : None */
            public: NXOpen::Expression * DraftAngle
            (
            );
            /**Returns  the Law builder  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * LawControl
            (
            );
            /**Returns  the offset3d  <br> License requirements : None */
            public: NXOpen::Expression * Offset3dDistance
            (
            );
            /**Returns  the direction  <br> License requirements : None */
            public: NXOpen::Direction * AxialOffsetDirection
            (
            );
            /**Sets  the direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetAxialOffsetDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
            /**Returns  the number of copies  <br> License requirements : None */
            public: int NumberOfCopies
            (
            );
            /**Sets  the number of copies  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetNumberOfCopies
            (
                int numberOfCopies /** numberofcopies */ 
            );
            /**Returns  the reverse direction  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the input curves  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveOptions * InputCurvesOptions
            (
            );
            /**Returns  the trim  <br> License requirements : None */
            public: NXOpen::Features::OffsetCurveBuilder::TrimOption TrimMethod
            (
            );
            /**Sets  the trim  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetTrimMethod
            (
                NXOpen::Features::OffsetCurveBuilder::TrimOption trim /** trim */ 
            );
            /**Returns  the extend factor  <br> License requirements : None */
            public: double ExtendFactor
            (
            );
            /**Sets  the extend factor  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetExtendFactor
            (
                double extendFactor /** extendfactor */ 
            );
            /**Returns  the group objects  <br> License requirements : None */
            public: bool GroupObjects
            (
            );
            /**Sets  the group objects  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetGroupObjects
            (
                bool groupObjects /** groupobjects */ 
            );
            /**Returns  the rough offset  <br> License requirements : None */
            public: bool RoughOffset
            (
            );
            /**Sets  the rough offset  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetRoughOffset
            (
                bool roughOffset /** roughoffset */ 
            );
            /**Returns  the curve fit method  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveFitOptions * CurveFitMethod
            (
            );
            /**Returns  the distance tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
