#ifndef NXOpen_CAM_TURNAVOIDANCEGEOMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TURNAVOIDANCEGEOMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_TurnAvoidanceGeomBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_FeatureGeomBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class TurnAvoidanceGeomBuilder;
    }
    namespace CAM
    {
        class FeatureGeomBuilder;
    }
    class NXObject;
    class Point;
    namespace CAM
    {
        class _TurnAvoidanceGeomBuilderBuilder;
        /** Represents a TurnAvoidanceGeom Builder  <br> To create a new instance of this class, use @link CAM::NCGroupCollection::CreateTurnAvoidanceGeomBuilder CAM::NCGroupCollection::CreateTurnAvoidanceGeomBuilder@endlink  <br> */
        class NXOPENCPPEXPORT TurnAvoidanceGeomBuilder : public CAM::FeatureGeomBuilder
        {
            /** The from point mode options */
            public: enum FromPointModes
            {
                FromPointModesNone/** Point is inactive. */,
                FromPointModesPoint/** Point is defined by a point. */
            };

            /** The start point motion type options */
            public: enum StartPointMotionTypes
            {
                StartPointMotionTypesNone/** Point is inactive. */,
                StartPointMotionTypesDirect/** Motion type: Direct to point. */,
                StartPointMotionTypesRadialThenAxial/** Motion type: Radial then axial to point. */,
                StartPointMotionTypesAxialThenRadial/** Motion type: Axial then axial to point. */,
                StartPointMotionTypesClearRadialThenDirect/** Motion type: Radial to clearance plane then direct to point. */,
                StartPointMotionTypesClearAxialThenDirect/** Motion type: Axial to clearance plane then direct to point. */
            };

            /** The start point mode options */
            public: enum StartPointModes
            {
                StartPointModesPoint/** Point is defined by point. */,
                StartPointModesDeltaAngleDistance/** Point is defined by angle and distance. */,
                StartPointModesDeltaVectorDistance/** Point is defined by vector and distance. */,
                StartPointModesDeltaMove/** Point is defined by delta move (X and Y coordinate). */
            };

            /** The approach path mode options */
            public: enum ApproachPathModes
            {
                ApproachPathModesNone/** Path is inactive. */,
                ApproachPathModesPoints/** Path is defined by points. */
            };

            /** The start of engage motion type options */
            public: enum StartOfEngageMotionTypes
            {
                StartOfEngageMotionTypesAutomatic/** Motion type: Automatic to start of engage. */,
                StartOfEngageMotionTypesDirect/** Motion type: Direct to start of engage. */,
                StartOfEngageMotionTypesRadialThenAxial/** Motion type: Radial then axial to start of engage. */,
                StartOfEngageMotionTypesAxialThenRadial/** Motion type: Axial then radial to start of engage. */,
                StartOfEngageMotionTypesClearRadialThenDirect/** Motion type: Radial to clearance plane then direct to start of engage. */,
                StartOfEngageMotionTypesClearAxialThenDirect/** Motion type: Axial to clearance plane then direct to start of engage. */
            };

            /** The departure path mode options */
            public: enum DeparturePathModes
            {
                DeparturePathModesNone/** Path is inactive. */,
                DeparturePathModesPoints/** Path is defined by points. */,
                DeparturePathModesSameAsApproach/** Path is locked approach path. */
            };

            /** The return point motion type options */
            public: enum ReturnPointMotionTypes
            {
                ReturnPointMotionTypesNone/** Point is inactive. */,
                ReturnPointMotionTypesAutomatic/** Motion type: Automatic to point. */,
                ReturnPointMotionTypesDirect/** Motion type: Direct to point. */,
                ReturnPointMotionTypesRadialThenAxial/** Motion type: Radial then axial to point. */,
                ReturnPointMotionTypesAxialThenRadial/** Motion type: Axial then axial to point. */,
                ReturnPointMotionTypesClearRadialThenDirect/** Motion type: Radial to clearance plane then direct to point. */,
                ReturnPointMotionTypesClearAxialThenDirect/** Motion type: Axial to clearance plane then direct to point. */,
                ReturnPointMotionTypesClearRadialOnly/** Motion type: Radial to clearance plane only (no motion to point). */,
                ReturnPointMotionTypesClearAxialOnly/** Motion type: Axial to clearance plane only (no motion to point). */
            };

            /** The return point mode options */
            public: enum ReturnPointModes
            {
                ReturnPointModesPoint/** Point is defined by point. */,
                ReturnPointModesDeltaAngleDistance/** Point is defined by angle and distance. */,
                ReturnPointModesDeltaVectorDistance/** Point is defined by vector and distance. */,
                ReturnPointModesDeltaMove/** Point is defined by delta move (X and Y coordinate). */,
                ReturnPointModesSameAsStart/** Point is locked start point. */
            };

            /** The gohome point motion type options */
            public: enum GohomePointMotionTypes
            {
                GohomePointMotionTypesNone/** Point is inactive. */,
                GohomePointMotionTypesDirect/** Motion type: Direct to point. */,
                GohomePointMotionTypesRadialThenAxial/** Motion type: Radial then axial to point. */,
                GohomePointMotionTypesAxialThenRadial/** Motion type: Axial then axial to point. */,
                GohomePointMotionTypesClearRadialThenDirect/** Motion type: Radial to clearance plane then direct to point. */,
                GohomePointMotionTypesClearAxialThenDirect/** Motion type: Axial to clearance plane then direct to point. */
            };

            /** The gohome point mode options */
            public: enum GohomePointModes
            {
                GohomePointModesPoint/** Point is defined by point. */,
                GohomePointModesSameAsFrom/** Point is locked to from point. */
            };

            /** The radial plane mode options */
            public: enum RadialPlaneModes
            {
                RadialPlaneModesNone/** Plane is inactive. */,
                RadialPlaneModesPoint/** Plane is defined by point. */,
                RadialPlaneModesDistance/** Plane is defined by distance value. */
            };

            /** The axial plane mode options */
            public: enum AxialPlaneModes
            {
                AxialPlaneModesNone/** Plane is inactive. */,
                AxialPlaneModesPoint/** Plane is defined by point. */,
                AxialPlaneModesDistance/** Plane is defined by distance value. */
            };

            private: friend class  _TurnAvoidanceGeomBuilderBuilder;
            protected: TurnAvoidanceGeomBuilder();
            /**Returns  the from point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::FromPointModes FromPointMode
            (
            );
            /**Sets  the from point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFromPointMode
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::FromPointModes fromPointMode /** the from point mode value */
            );
            /**Returns  the from point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * FromPoint
            (
            );
            /**Sets  the from point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFromPoint
            (
                NXOpen::Point * fromPoint /** the from point value */
            );
            /**Returns  the start point motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::StartPointMotionTypes StartPointMotionType
            (
            );
            /**Sets  the start point motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPointMotionType
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::StartPointMotionTypes startPointMotionType /** the start point motion type value */
            );
            /**Returns  the start point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::StartPointModes StartPointMode
            (
            );
            /**Sets  the start point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPointMode
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::StartPointModes startPointMode /** the start point mode value */
            );
            /**Returns  the start point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** the start point value */
            );
            /**Returns  the start delta angle  <br> License requirements : cam_base ("CAM BASE") */
            public: double StartDeltaAngle
            (
            );
            /**Sets  the start delta angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaAngle
            (
                double startDeltaAngle /** the start delta angle value */
            );
            /**Returns  the start delta distance  <br> License requirements : cam_base ("CAM BASE") */
            public: double StartDeltaDistance
            (
            );
            /**Sets  the start delta distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaDistance
            (
                double startDeltaDistance /** the start delta distance value */
            );
            /**Returns  the start delta vector  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * StartDeltaVector
            (
            );
            /**Sets  the start delta vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaVector
            (
                NXOpen::NXObject * startDeltaVector /** the start delta vector value */
            );
            /**Returns  the start delta X  <br> License requirements : cam_base ("CAM BASE") */
            public: double StartDeltaX
            (
            );
            /**Sets  the start delta X  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaX
            (
                double startDeltaX /** the start delta x value */
            );
            /**Returns  the start delta Y  <br> License requirements : cam_base ("CAM BASE") */
            public: double StartDeltaY
            (
            );
            /**Sets  the start delta Y  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartDeltaY
            (
                double startDeltaY /** the start delta x value */
            );
            /**Returns  the approach path mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::ApproachPathModes ApproachPathMode
            (
            );
            /**Sets  the approach path mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetApproachPathMode
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::ApproachPathModes approachPathMode /** the approach path mode value */
            );
            /**Returns  the start of engage motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::StartOfEngageMotionTypes StartOfEngageMotionType
            (
            );
            /**Sets  the start of engage motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStartOfEngageMotionType
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::StartOfEngageMotionTypes startOfEngageMotionType /** the start of_engage motion type value */
            );
            /**Returns  the departure path mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::DeparturePathModes DeparturePathMode
            (
            );
            /**Sets  the departure path mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDeparturePathMode
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::DeparturePathModes departurePathMode /** the departure path mode value */
            );
            /**Returns  the return point motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::ReturnPointMotionTypes ReturnPointMotionType
            (
            );
            /**Sets  the return point motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnPointMotionType
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::ReturnPointMotionTypes returnPointMotionType /** the return point motion type value */
            );
            /**Returns  the return point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::ReturnPointModes ReturnPointMode
            (
            );
            /**Sets  the return point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnPointMode
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::ReturnPointModes returnPointMode /** the return point mode value */
            );
            /**Returns  the return point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * ReturnPoint
            (
            );
            /**Sets  the return point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnPoint
            (
                NXOpen::Point * returnPoint /** the return point value */
            );
            /**Returns  the return delta angle  <br> License requirements : cam_base ("CAM BASE") */
            public: double ReturnDeltaAngle
            (
            );
            /**Sets  the return delta angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnDeltaAngle
            (
                double returnDeltaAngle /** the return delta angle value */
            );
            /**Returns  the return delta distance  <br> License requirements : cam_base ("CAM BASE") */
            public: double ReturnDeltaDistance
            (
            );
            /**Sets  the return delta distance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnDeltaDistance
            (
                double returnDeltaDistance /** the return delta distance value */
            );
            /**Returns  the return delta vector  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * ReturnDeltaVector
            (
            );
            /**Sets  the return delta vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnDeltaVector
            (
                NXOpen::NXObject * returnDeltaVector /** the return delta vector value */
            );
            /**Returns  the return delta X  <br> License requirements : cam_base ("CAM BASE") */
            public: double ReturnDeltaX
            (
            );
            /**Sets  the return delta X  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnDeltaX
            (
                double returnDeltaX /** the return delta x value */
            );
            /**Returns  the return delta Y  <br> License requirements : cam_base ("CAM BASE") */
            public: double ReturnDeltaY
            (
            );
            /**Sets  the return delta Y  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReturnDeltaY
            (
                double returnDeltaY /** the return delta x value */
            );
            /**Returns  the gohome point motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::GohomePointMotionTypes GohomePointMotionType
            (
            );
            /**Sets  the gohome point motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGohomePointMotionType
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::GohomePointMotionTypes gohomePointMotionType /** the gohome point motion type value */
            );
            /**Returns  the gohome point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::GohomePointModes GohomePointMode
            (
            );
            /**Sets  the gohome point mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGohomePointMode
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::GohomePointModes gohomePointMode /** the gohome point mode value */
            );
            /**Returns  the gohome point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * GohomePoint
            (
            );
            /**Sets  the gohome point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetGohomePoint
            (
                NXOpen::Point * gohomePoint /** the gohome point value */
            );
            /**Returns  the radial plane mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::RadialPlaneModes RadialPlaneMode
            (
            );
            /**Sets  the radial plane mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialPlaneMode
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::RadialPlaneModes radialPlaneMode /** the radial plane mode value */
            );
            /**Returns  the radial plane point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * RadialPlanePoint
            (
            );
            /**Sets  the radial plane point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialPlanePoint
            (
                NXOpen::Point * radialPlanePoint /** the radial plane point value */
            );
            /**Returns  the radial plane value  <br> License requirements : cam_base ("CAM BASE") */
            public: double RadialPlaneValue
            (
            );
            /**Sets  the radial plane value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialPlaneValue
            (
                double radialPlaneValue /** the radial plane value value */
            );
            /**Returns  the axial plane mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder::AxialPlaneModes AxialPlaneMode
            (
            );
            /**Sets  the axial plane mode  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialPlaneMode
            (
                NXOpen::CAM::TurnAvoidanceGeomBuilder::AxialPlaneModes axialPlaneMode /** the axial plane mode value */
            );
            /**Returns  the axial plane point  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::Point * AxialPlanePoint
            (
            );
            /**Sets  the axial plane point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialPlanePoint
            (
                NXOpen::Point * axialPlanePoint /** the axial plane point value */
            );
            /**Returns  the axial plane value  <br> License requirements : cam_base ("CAM BASE") */
            public: double AxialPlaneValue
            (
            );
            /**Sets  the axial plane value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAxialPlaneValue
            (
                double axialPlaneValue /** the axial plane value value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
