#ifndef NXOpen_UISTYLER_MULTISELECTLIST_HXX_INCLUDED
#define NXOpen_UISTYLER_MULTISELECTLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_MultiSelectList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class MultiSelectList;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        /** Represents a MultiSelectList for UI Styler */
        class NXOPENUICPPEXPORT MultiSelectList : public UIStyler::StylerItem
        {
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> DoubleClick;
            public: explicit MultiSelectList(void *ptr);
            /**Called when a dialog user selects an entry with a double mouse click or presses Return on 
                a selected item.  <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::MultiSelectList::Activate&  activateevent /** activateevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Registers double click callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddDoubleClickHandler
            (
                const NXOpen::UIStyler::MultiSelectList::DoubleClick&  doubleclickevent /** doubleclickevent */ ,
                bool is_dialog_launching_event /** is dialog launching event */ 
            );
            /**Specifies an array of character strings for item names that are used as selectable choices for this 
                dialog item.
                 <br> License requirements : None */
            public: void SetListItems
            (
                std::vector<NXString> & item_val /**array of character strings for item names  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets an array of character strings for item names that are used as selectable choices for this 
                dialog item. @return  An array of character strings for item names <br> License requirements : None */
            public: std::vector<NXString> GetListItems
            (
            );
            /**Specifies particular list items to be selected. <br> License requirements : None */
            public: void SetSelected
            (
                int subIndex /** An index of particular list items to be selected */
            );
            /**Specifies all list entry to be selected. <br> License requirements : None */
            public: void SetAllSelected
            (
            );
            /**Gets the indices of all selected list entries are desired; @return  An array of integers for item indices of selected items  <br> License requirements : None */
            public: std::vector<int> GetAllIndicesSelected
            (
            );
            /**Gets the names of all selected list entries are desired.  @return  An array of character strings of selected items <br> License requirements : None */
            public: std::vector<NXString> GetAllNameSelected
            (
            );
            /**Sets  the senstivity  <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** type */ 
            );
            /**Returns  the senstivity  <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets the visibility <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** type */ 
            );
            /**Returns the visibility <br> License requirements : None */
            public: bool Visibility
            (
            );
            /** Indicates that this dialog item is receiving keyboard focus.
                 <br> License requirements : None */
            public: void Focus
            (
            );
            /**Requests a list entry to be deselected.
                 <br> License requirements : None */
            public: void Deselect
            (
                int subItemIndex /** Index of the list entry to be deselected.*/
            );
            /**  <br> License requirements : None */
            public: void InsertSubitems
            (
                int subitem_index /** Sub item index */,
                std::vector<NXString> & multi_entries /** An array of items to be inserted   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Appends one or more entries to be inserted into the list  <br> License requirements : None */
            public: void Append
            (
                std::vector<NXString> & multi_entries /**An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list.  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Deletes sub item  <br> License requirements : None */
            public: void DeleteSubitem
            (
                int subItemIndex /** Zero-based index of a list entry to be deleted */
            );
            /** Requests a list entry to be scrolled up to the first line in the list  <br> License requirements : None */
            public: void ShowSubItem
            (
                int subItemIndex /** Zero-based index of a list entry to be scrolled up 
                                                to the first line of the list.*/
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
