#ifndef NXOpen_FEATURES_SHEETMETAL_CLOSEDCORNERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_CLOSEDCORNERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_ClosedCornerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class ClosedCornerBuilder;
        }
    }
    class Expression;
    class Face;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class _ClosedCornerBuilderBuilder;
            /** Represents a Closed corner feature builder.  <br> To create a new instance of this class, use @link Features::SheetMetal::SheetmetalManager::CreateClosedCornerFeatureBuilder Features::SheetMetal::SheetmetalManager::CreateClosedCornerFeatureBuilder@endlink  <br> */
            class NXOPENCPPEXPORT ClosedCornerBuilder : public Features::FeatureBuilder
            {
                /**This enum represents Corner Closure type*/
                public: enum ClosureTypeOptions
                {
                    ClosureTypeOptionsClose/** close */ ,
                    ClosureTypeOptionsOverlap/** overlap */ 
                };

                /**This enum represents Corner treatment type*/
                public: enum TreatmentTypeOptions
                {
                    TreatmentTypeOptionsCircularCutout/** circular cutout */ ,
                    TreatmentTypeOptionsClosed/** closed */ ,
                    TreatmentTypeOptionsOpen/** open */ 
                };

                private: friend class  _ClosedCornerBuilderBuilder;
                protected: ClosedCornerBuilder();
                /**Sets  the treatment type <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetTreatmentType
                (
                    NXOpen::Features::SheetMetal::ClosedCornerBuilder::TreatmentTypeOptions treatment_type /** The type of treatment specified for the corner*/
                );
                /**Returns  the treatment type <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::ClosedCornerBuilder::TreatmentTypeOptions TreatmentType
                (
                );
                /**Sets  the closure type <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetClosureType
                (
                    NXOpen::Features::SheetMetal::ClosedCornerBuilder::ClosureTypeOptions closure_type /** The type of closure specified for the corner*/
                );
                /**Returns  the closure type <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Features::SheetMetal::ClosedCornerBuilder::ClosureTypeOptions ClosureType
                (
                );
                /** Sets the diameter <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetDiameter
                (
                    const NXString & diameter /** The diameter for the circular cutout corner treatment   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Returns the diameter @return  The diameter for the circular cutout corner treatment  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * GetDiameter
                (
                );
                /** Sets the gap. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetGap
                (
                    const NXString & gap /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Returns the gap. @return   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * GetGap
                (
                );
                /** Sets the overlap <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void SetOverlap
                (
                    const NXString & overlap /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /** Returns the overlap. @return   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: NXOpen::Expression * GetOverlap
                (
                );
                /** Add a face pair. <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void AddFacePair
                (
                    NXOpen::Face * first_face /**  A bend face from a bend */,
                    NXOpen::Face * second_face /**  A bend face from an adjacent bend */
                );
                /** Return the face pair.  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void GetFacePair
                (
                    int index /** Index of the desired face pair */,
                    NXOpen::Face ** first_face /** First face of the face pair */,
                    NXOpen::Face ** second_face /** Second face of the face pair */
                );
                /** Returns the number of face pairs already identified for the three bend corner feature.
                         @return  The number of face pairs currently identified  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: int GetNumberOfFacePairs
                (
                );
                /** Validates the builder data. @return  Returns 0 if the data in the builder is valid  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: int ValidateBuilderData
                (
                );
                /** Removes a face pair (that represents a unique corner) from the list of face pairs already added.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
                public: void RemoveFacePair
                (
                    NXOpen::Face * first_face /** A face from an already selected face pair */,
                    NXOpen::Face * second_face /** The other face from the face pair */
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
