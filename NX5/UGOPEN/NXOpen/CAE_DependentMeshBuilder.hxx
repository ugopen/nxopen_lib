#ifndef NXOpen_CAE_DEPENDENTMESHBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DEPENDENTMESHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DependentMeshBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_DependentMeshBuilder.hxx>
#include <NXOpen/CAE_DependentMeshListItemBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class DependentMeshBuilder;
    }
    class Builder;
    namespace CAE
    {
        class CAEEdge;
    }
    namespace CAE
    {
        class DependentMesh;
    }
    namespace CAE
    {
        class DependentMeshListItemBuilder;
    }
    namespace CAE
    {
        class DependentMeshListItemBuilderList;
    }
    namespace CAE
    {
        class SelectCAEFace;
    }
    namespace CAE
    {
        class _DependentMeshBuilderBuilder;
        /**
            Represents a @link CAE::DependentMesh CAE::DependentMesh@endlink 
             <br> To create a new instance of this class, use @link CAE::MeshCollection::CreateDependentMeshBuilder CAE::MeshCollection::CreateDependentMeshBuilder@endlink  <br> */
        class NXOPENCPPEXPORT DependentMeshBuilder : public Builder
        {
            /** The mesh type for face dependency */
            public: enum MeshType
            {
                MeshTypeFree/** Free mesh */,
                MeshTypeMap/** Map mesh */
            };

            private: friend class  _DependentMeshBuilderBuilder;
            protected: DependentMeshBuilder();
            /**Returns  the master face  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SelectCAEFace * MasterFace
            (
            );
            /**Returns  the target face  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SelectCAEFace * TargetFace
            (
            );
            /**Returns  the loop list  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DependentMeshListItemBuilderList * LoopList
            (
            );
            /** The list item  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DependentMeshListItemBuilder * CreateNewListItem
            (
                NXOpen::CAE::CAEEdge * tMasterEdge /** The master edge */,
                NXOpen::CAE::CAEEdge * tTargetEdge /** The target edge */,
                bool fFlipDirection /** flip direction */
            );
            /** The mesh type  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DependentMeshBuilder::MeshType GetMeshType
            (
            );
            /** The mesh type  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshType
            (
                NXOpen::CAE::DependentMeshBuilder::MeshType type /** Mesh Type */
            );
            /** Commits the creation of the @link DependentMesh DependentMesh@endlink  objects
                        or Commits the changes made to the @link DependentMesh DependentMesh@endlink 
                      @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DependentMesh * CommitDependentMesh
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
