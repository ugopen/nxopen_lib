#ifndef NXOpen_POSITIONING_NETWORK_HXX_INCLUDED
#define NXOpen_POSITIONING_NETWORK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Positioning_Network.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Positioning
    {
        class Network;
    }
    namespace Assemblies
    {
        class Component;
    }
    class NXObject;
    namespace Positioning
    {
        class Constraint;
    }
    namespace Positioning
    {
        class _NetworkBuilder;
        /**
            Network for use in positioning objects in NX.
            A network consists of explicitly added constraints and movable objects
            together with others implicitly added because they are connected by 
            to those in the network.
         <br> Use @link Positioning::Positioner::EstablishNetwork Positioning::Positioner::EstablishNetwork@endlink  to create an instance of this class. <br> */
        class NXOPENCPPEXPORT Network : public NXObject
        {
            /** Specifies the solver status of a movable object. */
            public: enum ObjectStatus
            {
                ObjectStatusUnknown/** Not yet evaluated. */,
                ObjectStatusFixed/** Attempt to put constraint between two fixed objects. */,
                ObjectStatusOverDefined/** Conflicts with other constraints. */,
                ObjectStatusNotConsistentDims/** Cannot solve with current dimension values. Model fully defined. */,
                ObjectStatusNotConsistentOther/** Cannot find a solution. Model underdefined.*/,
                ObjectStatusNotConsistentUnknown/** One movable object fixed. */,
                ObjectStatusNotChanged/** Not evaluated because other parts of the model are over defined or inconsistent. */,
                ObjectStatusWellDefined/** The constraint is solved and satisfied */,
                ObjectStatusUnderDefined/** The constraint is solved and satisfied */
            };

            private: friend class  _NetworkBuilder;
            protected: Network();
            /** 
                    Add a @link Constraint Constraint@endlink  to the network.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddConstraint
            (
                NXOpen::Positioning::Constraint * constraint /** The @link Constraint Constraint@endlink  to be added */
            );
            /** 
                    Add a movable object to the network. An object explicitly added
                    by this method will be directly moved by calls 
                    to @link Positioning::Network::DragByRay Positioning::Network::DragByRay@endlink 
                    and @link Positioning::Network::DragByTransform Positioning::Network::DragByTransform@endlink .        
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddMovableObject
            (
                NXOpen::NXObject * movable_object /** An @link NXObject NXObject@endlink  to be moved */
            );
            /** 
                    Remove a movable object from the network. An object explicitly
                    removed by this method will not be directly moved by calls 
                    to @link Positioning::Network::DragByRay Positioning::Network::DragByRay@endlink 
                    and @link Positioning::Network::DragByTransform Positioning::Network::DragByTransform@endlink , though it
                    may still be moved indirectly if constrained to other movable objects.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RemoveMovableObject
            (
                NXOpen::NXObject * movable_object /** An @link NXObject NXObject@endlink  to be removed from the network */
            );
            /** 
                    Solves the constraint network and applies the results to the
                    affected movable objects in the model.  Does not do an update.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ApplyToModel
            (
            );
            /** 
                    Solves the constraint network.
                    Does not apply the results to the model and does not 
                    do an update.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Solve
            (
            );
            /**Sets  
                    the move objects state for the network.
                    When set the display positions of objects are immediately updated
                    upon constraint creation or edit.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetMoveObjectsState
            (
                bool move_objects_state /** move objects state */ 
            );
            /**Returns  
                    the move objects state for the network.
                    When set the display positions of objects are immediately updated
                    upon constraint creation or edit.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool MoveObjectsState
            (
            );
            /** 
                    Returns the display objects to their model positions.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ResetDisplay
            (
            );
            /** 
                    Returns the solver status of a movable object.
                 @return  The solver status of the movable object  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Network::ObjectStatus GetMovableObjectStatus
            (
                NXOpen::NXObject * movable_object /** An @link NXObject NXObject@endlink  positioned by the network */
            );
            /**Returns  
                    the @link Assemblies::Component Assemblies::Component@endlink  in which the display is changed
                    by solving the network. The display component can be NULL if display
                    changes are made in the part of the network.
                    The prototype of the display component should be the part containing the
                    network.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * DisplayComponent
            (
            );
            /**Sets  
                    the @link Assemblies::Component Assemblies::Component@endlink  in which the display is changed
                    by solving the network. The display component can be NULL if display
                    changes are made in the part of the network.
                    The prototype of the display component should be the part containing the
                    network.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDisplayComponent
            (
                NXOpen::Assemblies::Component * display_component /** The component in which the constraints are displayed. Can be NULL. */
            );
            /** 
                    Notify the network that a sequence of drag operations is about to
                    begin.
                     <br> 
                    This must be called before a series of calls to
                    @link Positioning::Network::DragByRay Positioning::Network::DragByRay@endlink  or
                    @link Positioning::Network::DragByTransform Positioning::Network::DragByTransform@endlink .
                    Following a drag, and before any other changes to a network
                    are made, @link Positioning::Network::EndDrag Positioning::Network::EndDrag@endlink 
                    should be called.
                     <br> 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void BeginDrag
            (
            );
            /** 
                    Move objects which have been added to the network using 
                    @link Positioning::Network::AddMovableObject Positioning::Network::AddMovableObject@endlink .
                    Constraints are honored during the drag so that other
                    objects may also move as a result of this call.
                    On the first call to this method, a notional point is added to each of
                    the objects to be dragged.  On subsequent calls, this notional point,
                    and hence the dragged object, is kept as close as possible to the ray
                    determined by point and direction. If there are no constraints then the
                    point will stay on the ray.

                     <br> 
                    A series of calls to this method can be made between calls to
                    @link Positioning::Network::BeginDrag Positioning::Network::BeginDrag@endlink  and
                    @link Positioning::Network::EndDrag Positioning::Network::EndDrag@endlink .
                     <br> 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DragByRay
            (
                const NXOpen::Point3d & point /** A point on the ray */,
                const NXOpen::Vector3d & direction /** The direction of the ray */
            );
            /** 
                    Move objects which have been added to the network using 
                    @link Positioning::Network::AddMovableObject Positioning::Network::AddMovableObject@endlink .
                    Constraints are honored during the drag so that other
                    objects may also move as a result of this call.
                    The rotation is applied first, then the translation.

                     <br> 
                    A series of calls to this method can be made between calls to
                    @link Positioning::Network::BeginDrag Positioning::Network::BeginDrag@endlink  and
                    @link Positioning::Network::EndDrag Positioning::Network::EndDrag@endlink .
                     <br> 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DragByTransform
            (
                const NXOpen::Vector3d & translation /** The translation to be applied */,
                const NXOpen::Matrix3x3 & rotation /** The rotation to be applied */
            );
            /** 
                    Notify the network that a sequence of drag operations has
                    ended.
                     <br> 
                    This must be called after a series of calls to
                    @link Positioning::Network::DragByRay Positioning::Network::DragByRay@endlink  or
                    @link Positioning::Network::DragByTransform Positioning::Network::DragByTransform@endlink .
                     <br> 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EndDrag
            (
            );
            /** 
                    Set the elements of the moving_group. 
                    The elements of the moving_group will move as a rigid body
                    during a solve or drag operation.  Objects outside the moving
                    group can all be prevented from moving by setting 
                    @link Positioning::Network::NonMovingGroupGroundedPositioning::Network::NonMovingGroupGrounded @endlink and @link Positioning::Network::SetNonMovingGroupGroundedPositioning::Network::SetNonMovingGroupGrounded @endlink 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetMovingGroup
            (
                const std::vector<NXOpen::NXObject *> & movable_objects /** The @link NXObject NXObject@endlink s to be moved */
            );
            /** 
                    Remove all elements from the moving_group.
                    See @link Positioning::Network::SetMovingGroup Positioning::Network::SetMovingGroup@endlink .
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EmptyMovingGroup
            (
            );
            /**Sets  
                    the grounded state of non-moving_group objects.
                    When set all objects outside the moving_group are fixed and will
                    not move during a solve or drag.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetNonMovingGroupGrounded
            (
                bool ground /** ground */ 
            );
            /**Returns  
                    the grounded state of non-moving_group objects.
                    When set all objects outside the moving_group are fixed and will
                    not move during a solve or drag.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool NonMovingGroupGrounded
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
