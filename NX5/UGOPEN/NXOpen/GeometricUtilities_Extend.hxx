#ifndef NXOpen_GEOMETRICUTILITIES_EXTEND_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_EXTEND_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_Extend.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class Extend;
    }
    class DisplayableObject;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _ExtendBuilder;
        /** Represents an extend data. 
            */
        class NXOPENCPPEXPORT Extend : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents the type of extend */
            public: enum ExtendType
            {
                ExtendTypeValue/** value */ ,
                ExtendTypeUntilNext/** until next */ ,
                ExtendTypeUntilSelected/** until selected */ ,
                ExtendTypeUntilExtended/** until extended */ ,
                ExtendTypeThroughAll/** through all */ ,
                ExtendTypeSymmetric/** symmetric */ ,
                ExtendTypePercent/** percent */ ,
                ExtendTypeArcLength/** arc length */ ,
                ExtendTypeThruPoint/** thru point */ 
            };

            private: friend class  _ExtendBuilder;
            protected: Extend();
            /**Sets  the extend target for the following types
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected@endlink .  
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilExtended NXOpen::GeometricUtilities::Extend::ExtendTypeUntilExtended@endlink .  
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilNext NXOpen::GeometricUtilities::Extend::ExtendTypeUntilNext@endlink .  
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTarget
            (
                NXOpen::DisplayableObject * selected_object /** For @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected@endlink 
                                                                                    it can be face, solid body,sheet body and datums.*/
            );
            /**Returns  the extend target for the following types
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected NXOpen::GeometricUtilities::Extend::ExtendTypeUntilSelected@endlink .  
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilExtended NXOpen::GeometricUtilities::Extend::ExtendTypeUntilExtended@endlink .  
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeUntilNext NXOpen::GeometricUtilities::Extend::ExtendTypeUntilNext@endlink .  
                     <br> License requirements : None */
            public: NXOpen::DisplayableObject * Target
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Target() Target@endlink instead.
            @deprecated
            */
            public: NXOpen::DisplayableObject * GetTarget
            (
            ) { return this->Target(); }
            /**Returns  the extend value for the following type
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeValue NXOpen::GeometricUtilities::Extend::ExtendTypeValue@endlink .
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * Value
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Value() Value@endlink instead.
            @deprecated
            */
            public: NXOpen::Expression * GetValue
            (
            ) { return this->Value(); }
            /** Set extend value for the following type
                        @link NXOpen::GeometricUtilities::Extend::ExtendTypeValue NXOpen::GeometricUtilities::Extend::ExtendTypeValue@endlink .
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetValue
            (
                const NXString & value_expression /** For @link NXOpen::GeometricUtilities::Extend::ExtendTypeValue NXOpen::GeometricUtilities::Extend::ExtendTypeValue@endlink   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Sets  the extend type 
                        @link NXOpen::GeometricUtilities::Extend::ExtendType NXOpen::GeometricUtilities::Extend::ExtendType@endlink .
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimType
            (
                NXOpen::GeometricUtilities::Extend::ExtendType extend_type /** extend type */ 
            );
            /**Returns  the extend type 
                        @link NXOpen::GeometricUtilities::Extend::ExtendType NXOpen::GeometricUtilities::Extend::ExtendType@endlink .
                     <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Extend::ExtendType TrimType
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link TrimType() TrimType@endlink instead.
            @deprecated
            */
            public: NXOpen::GeometricUtilities::Extend::ExtendType GetTrimType
            (
            ) { return this->TrimType(); }
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
