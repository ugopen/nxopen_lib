#ifndef NXOpen_ANNOTATIONS_GDT_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_GDT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_Gdt.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_IFcf.hxx>
#include <NXOpen/Annotations_FcfFrameData.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/Annotations_SimpleDraftingAid.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class Gdt;
    }
    namespace Annotations
    {
        class FcfFrameData;
    }
    namespace Annotations
    {
        class IFcf;
    }
    namespace Annotations
    {
        class SimpleDraftingAid;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    namespace Annotations
    {
        class _GdtBuilder;
        /** 
            Represents a Geometric Dimensioning and Tolerancing symbol
             <br> This is an abstract class, and cannot be instantiated <br> */
        class NXOPENCPPEXPORT Gdt : public Annotations::SimpleDraftingAid, public virtual Annotations::IFcf
        {
            private: friend class  _GdtBuilder;
            protected: Gdt();
            /** Sets the symbol color, font, and width.
                    The changes are not applied to the system until
                    an update is performed.  An update can be performed by calling @link Update::DoUpdate Update::DoUpdate@endlink .
                     <br> License requirements : drafting ("DRAFTING") */
            public: void SetSymbolCfw
            (
                const NXOpen::Annotations::LineCfw & cfw /** cfw */ 
            );
            /**Returns  a flag indicating whether the leader has a stubbed datum style.
                    This property is not applicable to GDTs with the following leader
                    types: plain, around, plain-aligned, around-aligned, and on-dimension.
                    Do not attempt to set this property for these
                    leader types.  <br> License requirements : None */
            public: bool HasStubbedDatumStyle
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HasStubbedDatumStyle() HasStubbedDatumStyle@endlink instead.
            @deprecated
            */
            public: bool GetHasStubbedDatumStyle
            (
            ) { return this->HasStubbedDatumStyle(); }
            /**Sets  a flag indicating whether the leader has a stubbed datum style.
                    This property is not applicable to GDTs with the following leader
                    types: plain, around, plain-aligned, around-aligned, and on-dimension.
                    Do not attempt to set this property for these
                    leader types.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetHasStubbedDatumStyle
            (
                bool stubbed /** stubbed */ 
            );
            /**Returns  a flag indicating whether this GDT has a leader position parameter.  
                    GDTs with the following leader types do not have a leader position
                    parameter: plain, around, plain-aligned, around-aligned <br> License requirements : None */
            public: bool HasLeaderPositionParameter
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link HasLeaderPositionParameter() HasLeaderPositionParameter@endlink instead.
            @deprecated
            */
            public: bool GetHasLeaderPositionParameter
            (
            ) { return this->HasLeaderPositionParameter(); }
            /**Returns  a parameter which indicates where the leader end point is located on
                    the object that it is attached to.  0.0 indicates the start of the 
                    object that it is attached to and 1.0 indicates the end of the object.
                    This property is not applicable to GDTs with the following leader
                    types: plain, around, plain-aligned, around-aligned.
                    You should not attempt to read this parameter unless 
                    @link Annotations::Gdt::HasLeaderPositionParameter Annotations::Gdt::HasLeaderPositionParameter@endlink  is true. 
                    You should not attempt to
                    change this parameter unless
                    @link Annotations::Gdt::CanChangeLeaderPositionParameter Annotations::Gdt::CanChangeLeaderPositionParameter@endlink 
                    returns true. 
                    This parameter cannot not set for GDTs with the following leader
                    types: plain, around, plain-aligned, around-aligned, on-annotation,
                    and on-stub.  <br> License requirements : None */
            public: double LeaderPositionParameter
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link LeaderPositionParameter() LeaderPositionParameter@endlink instead.
            @deprecated
            */
            public: double GetLeaderPositionParameter
            (
            ) { return this->LeaderPositionParameter(); }
            /**Sets  a parameter which indicates where the leader end point is located on
                    the object that it is attached to.  0.0 indicates the start of the 
                    object that it is attached to and 1.0 indicates the end of the object.
                    This property is not applicable to GDTs with the following leader
                    types: plain, around, plain-aligned, around-aligned.
                    You should not attempt to read this parameter unless 
                    @link Annotations::Gdt::HasLeaderPositionParameter Annotations::Gdt::HasLeaderPositionParameter@endlink  is true. 
                    You should not attempt to
                    change this parameter unless
                    @link Annotations::Gdt::CanChangeLeaderPositionParameter Annotations::Gdt::CanChangeLeaderPositionParameter@endlink 
                    returns true. 
                    This parameter cannot not set for GDTs with the following leader
                    types: plain, around, plain-aligned, around-aligned, on-annotation,
                    and on-stub.  <br> License requirements : drafting ("DRAFTING") */
            public: void SetLeaderPositionParameter
            (
                double param /** param */ 
            );
            /**Returns  a flag indicating whether the @link Annotations::Gdt::LeaderPositionParameter Annotations::Gdt::LeaderPositionParameter@endlink  can be changed  <br> License requirements : None */
            public: bool CanChangeLeaderPositionParameter
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link CanChangeLeaderPositionParameter() CanChangeLeaderPositionParameter@endlink instead.
            @deprecated
            */
            public: bool GetCanChangeLeaderPositionParameter
            (
            ) { return this->CanChangeLeaderPositionParameter(); }
            /** Returns the single FCF frames data  @return  FCF frame data  <br> License requirements : None */
            public: virtual NXOpen::Annotations::FcfFrameData * GetFcfFrameData
            (
            );
            /** Sets the single FCF frames data  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetFcfFrameData
            (
                NXOpen::Annotations::FcfFrameData * data /**  FCF frame data */
            );
            /** Returns the multiple FCF frames data  @return  FCF frame datas  <br> License requirements : None */
            public: virtual std::vector<NXOpen::Annotations::FcfFrameData *> GetFcfFrameDataArray
            (
            );
            /** Sets the multiple FCF frames data  <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetFcfFrameData
            (
                const std::vector<NXOpen::Annotations::FcfFrameData *> & fcf_frame_data /**  FCF frame datas */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
