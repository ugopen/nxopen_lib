#ifndef NXOpen_ROUTING_DESIGNRULEVIOLATION_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULEVIOLATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRuleViolation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DesignRuleViolation;
    }
    class NXObject;
    namespace Routing
    {
        class DesignRuleOverride;
    }
    namespace Routing
    {
        class _DesignRuleViolationBuilder;
        /** Represents @link Routing::DesignRuleViolation Routing::DesignRuleViolation@endlink  object  <br> Design Rule Violations are automatically created when a rule is executed <br> */
        class NXOPENCPPEXPORT DesignRuleViolation : public NXObject
        {
            private: friend class  _DesignRuleViolationBuilder;
            protected: DesignRuleViolation();
            /**Returns  the short description of the design rule violation is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString ShortDescription
            (
            );
            /**Sets  the short description of the design rule violation is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetShortDescription
            (
                const NXString & description /** description */ 
            );
            /**Returns  the long description of the design rule violation is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString LongDescription
            (
            );
            /**Sets  the long description of the design rule violation is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLongDescription
            (
                const NXString & description /** description */ 
            );
            /** Add an object in violation to the violation  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AddObjects
            (
                const std::vector<NXOpen::Routing::DesignRuleViolation *> & violationObjects /** violationobjects */ 
            );
            /** Get the array of objects in violation  @return  Caller frees the array  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::NXObject *> GetObjects
            (
            );
            /**Returns  the override object for the violation is inquired  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::DesignRuleOverride * Override
            (
            );
            /**Sets  the override object for the violation is inquired  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetOverride
            (
                NXOpen::Routing::DesignRuleOverride * overrideObject /** overrideobject */ 
            );
            /**Returns  the date/time stamp of the violation is inquired  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int TimeStamp
            (
            );
            /**Sets  the date/time stamp of the violation is inquired  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetTimeStamp
            (
                int timestamp /** timestamp */ 
            );
            /** Sets the violation override  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetViolationOverride
            (
                const NXString & user /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & reason /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int timestamp /** timestamp */ 
            );
            /** Violation is overridden or not is inquired  @return    <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool IsRuleOverridden
            (
            );
            /** Override object will be deleted  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void DeleteRuleOverride
            (
                NXOpen::Routing::DesignRuleOverride * deleteObject /** deleteobject */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
