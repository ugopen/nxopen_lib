#ifndef NXOpen_FEATURES_CONSTRAINFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CONSTRAINFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ConstrainFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_ConstrainFaceBuilder.hxx>
#include <NXOpen/ModlDirect_SelectBlend.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ConstrainFaceBuilder;
    }
    class Direction;
    class Expression;
    class Face;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace ModlDirect
    {
        class SelectBlend;
    }
    class NXObject;
    class Point;
    class ScCollector;
    namespace Features
    {
        class _ConstrainFaceBuilderBuilder;
        /**
            Represents a builder for a constrain face feature, don't use it until nx502.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateConstrainFaceBuilder Features::FeatureCollection::CreateConstrainFaceBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ConstrainFaceBuilder : public Features::FeatureBuilder
        {
            /** the constrain face types, don't use it until nx502 */
            public: enum Types
            {
                TypesDistance/** Direction for constraining the faces */,
                TypesAngle/** Move faces by rotating about an axis or vector */,
                TypesAlign/** Move faces by aligning to the constraint face */,
                TypesParallel/** Move faces parallel to the constraint face */,
                TypesPerpendicular/** Move faces perpendicular to the constraint face */,
                TypesTangent/** Move faces tangent to the constraint face */
            };

            /** the reference object types, don't use it until nx502 */
            public: enum ReferenceTypes
            {
                ReferenceTypesFaceOrEdge/** Use face or edge as reference object */,
                ReferenceTypesVector/** Use vector as reference object */
            };

            private: friend class  _ConstrainFaceBuilderBuilder;
            protected: ConstrainFaceBuilder();
            /**Returns  the constrain face type in constrain face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Features::ConstrainFaceBuilder::Types ConstrainType
            (
            );
            /**Sets  the constrain face type in constrain face, don't use it until nx502  <br> License requirements : None */
            public: void SetConstrainType
            (
                NXOpen::Features::ConstrainFaceBuilder::Types constrain_type /** constrain type */ 
            );
            /**Returns  the face collector holding the faces to move, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::ScCollector * ConstrainFaceCollector
            (
            );
            /**Returns  the constraint face in constrain face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Face * ConstraintFace
            (
            );
            /**Sets  the constraint face in constrain face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetConstraintFace
            (
                NXOpen::Face * constraint_face /** constraint face */ 
            );
            /**Returns  the reference object type in constrain face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Features::ConstrainFaceBuilder::ReferenceTypes ReferenceType
            (
            );
            /**Sets  the reference object type in constrain face, don't use it until nx502  <br> License requirements : None */
            public: void SetReferenceType
            (
                NXOpen::Features::ConstrainFaceBuilder::ReferenceTypes reference_type /** reference type */ 
            );
            /**Returns  the reference object in constrain face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::NXObject * ReferenceObject
            (
            );
            /**Sets  the reference object in constrain face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReferenceObject
            (
                NXOpen::NXObject * reference_vector /** reference vector */ 
            );
            /**Returns  the reference vector in constrain face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Direction * ReferenceVector
            (
            );
            /**Sets  the reference vector in constrain face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReferenceVector
            (
                NXOpen::Direction * reference_vector /** reference vector */ 
            );
            /**Returns  the pivot point in constrain face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Point * PivotPoint
            (
            );
            /**Sets  the pivot point in constrain face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPivotPoint
            (
                NXOpen::Point * pivot_point /** pivot point */ 
            );
            /**Returns  the tangent point in constrain face, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Point * TangentPoint
            (
            );
            /**Sets  the tangent point in constrain face, don't use it until nx502  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTangentPoint
            (
                NXOpen::Point * tangent_point /** tangent point */ 
            );
            /**Returns  the face collector holding the all the recognized blend faces. It is auto recognized blends +
                        user selected blends - user excluded blends, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::ModlDirect::SelectBlend * BlendFaces
            (
            );
            /**Returns  the distance for direction and distance option, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );
            /**Returns  the angle for axis and angle option, don't use it until nx502  <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
