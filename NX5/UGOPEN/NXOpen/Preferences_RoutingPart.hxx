#ifndef NXOpen_PREFERENCES_ROUTINGPART_HXX_INCLUDED
#define NXOpen_PREFERENCES_ROUTINGPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_RoutingPart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class RoutingPart;
    }
    namespace Preferences
    {
        class RoutingApplicationView;
    }
    namespace Preferences
    {
        class RoutingPartLibrary;
    }
    namespace Preferences
    {
        /**  Contains the preferences related to placing/finding/adding parts and generating
                the Routing bill of materials.   <br> To obtain an instance of this class, refer to @link Preferences::RoutingApplicationView Preferences::RoutingApplicationView@endlink  <br> */
        class NXOPENCPPEXPORT RoutingPart
        {
            /** Whether or not use the preferred port when determining placement solutions. */
            public: enum UsePreferredPort
            {
                UsePreferredPortFalse/** false */ ,
                UsePreferredPortTrue/** true */ 
            };

            /** Available methods for determining which port is the preferredport during
                        calculation of placement solutions. */
            public: enum PreferredPortMethod
            {
                PreferredPortMethodAttribute/** Examine an attribute applied to the
                                                                                port, and match it's value to a desired
                                                                                value. */,
                PreferredPortMethodName/** Compare the ports name with a desired value. */
            };

            /** The detail levels available for the Routing bill of material. */
            public: enum DetailLevel
            {
                DetailLevelSummary/** summary */ ,
                DetailLevelItemized/** itemized */ 
            };

            /** The fabrication numbering methods available for the Routing bill of material. */
            public: enum FabricationNumbering
            {
                FabricationNumberingSequence/** Sequential numbering of fabrications in the parts list. */,
                FabricationNumberingOriginal/** Use the fabrication number in the parts list. */
            };

            /** The stock length display options available for the Routing bill of material. */
            public: enum StockLengthDisplay
            {
                StockLengthDisplaySum/** Display single sum for each type of stock. */,
                StockLengthDisplayItem/** Display length of each stock individually. */
            };

            private: NXOpen::Preferences::RoutingApplicationView* m_owner;
            public: explicit RoutingPart(NXOpen::Preferences::RoutingApplicationView *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  whether or not to use the preffered placement port during
                        calcluation of placement solutions during place part.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Preferences::RoutingPart::UsePreferredPort UsePreferredPortFlag
            (
            );
            /**Sets  whether or not to use the preffered placement port during
                        calcluation of placement solutions during place part.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetUsePreferredPortFlag
            (
                NXOpen::Preferences::RoutingPart::UsePreferredPort use_flag /** use flag */ 
            );
            /**Returns  the current method for determining the preferred placement port.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Preferences::RoutingPart::PreferredPortMethod PreferredPortMethodFlag
            (
            );
            /** Sets the method for determining the preferred port to 
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodName NXOpen::Preferences::RoutingPart::PreferredPortMethodName@endlink  and
                        sets the desired port name.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPreferredPortName
            (
                const NXString & desired_port /** Port name to match.  Must not be NULL and
                                                                        the length of the string must be less than 50.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the desired port name for method type
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodName NXOpen::Preferences::RoutingPart::PreferredPortMethodName@endlink   @return  NULL if method is not
                                @link NXOpen::Preferences::RoutingPart::PreferredPortMethodName NXOpen::Preferences::RoutingPart::PreferredPortMethodName@endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString GetPreferredPortName
            (
            );
            /** Sets the method for determining the preferred port to 
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink  and
                        sets the desired port attribute and it's value.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPreferredPortAttribute
            (
                const NXString & attribute_name /** Attribute name on port to match.  
                                                                       Must not be NULL and
                                                                       the length of the string must be less than 50.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & attribute_value /** Value of the attribute to match.    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the attribute and it's value for determining the preferred port for method type 
                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetPreferredPortAttribute
            (
                NXString* attribute_name /** NULL if method is not 
                                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink  */,
                NXString* attribute_value /** NULL if method is not
                                        @link NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute NXOpen::Preferences::RoutingPart::PreferredPortMethodAttribute@endlink  */
            );
            /**Returns  the maximum number of placement solutions to generate when determining
                        placement solutions for a component.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int MaximumSolutions
            (
            );
            /**Sets  the maximum number of placement solutions to generate when determining
                        placement solutions for a component.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetMaximumSolutions
            (
                int max_sols /** max sols */ 
            );
            /**Returns  the layer to apply to new components.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int Layer
            (
            );
            /**Sets  the layer to apply to new components.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the name of the template Routing bill of material part file.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString BomFormatPart
            (
            );
            /**Sets  the name of the template Routing bill of material part file.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetBomFormatPart
            (
                const NXString & bom_part /** bom part */ 
            );
            /**Returns  the detail level for the Routing bill of material.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Preferences::RoutingPart::DetailLevel BomDetailLevelFlag
            (
            );
            /**Sets  the detail level for the Routing bill of material.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetBomDetailLevelFlag
            (
                NXOpen::Preferences::RoutingPart::DetailLevel detail /** detail */ 
            );
            /**Returns  the fabrication numbering for the Routing bill of material.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Preferences::RoutingPart::FabricationNumbering FabricationNumberingFlag
            (
            );
            /**Sets  the fabrication numbering for the Routing bill of material.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetFabricationNumberingFlag
            (
                NXOpen::Preferences::RoutingPart::FabricationNumbering numbering /** numbering */ 
            );
            /**Returns  the stock length display for the Routing bill of material.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Preferences::RoutingPart::StockLengthDisplay StockLengthDisplayFlag
            (
            );
            /**Sets  the stock length display for the Routing bill of material.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockLengthDisplayFlag
            (
                NXOpen::Preferences::RoutingPart::StockLengthDisplay display /** display */ 
            );
            /**Returns  the list of characters that cannot be used when generating sequences
                        of terminals in qualify part.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString InvalidSequenceCharacters
            (
            );
            /**Sets  the list of characters that cannot be used when generating sequences
                        of terminals in qualify part.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetInvalidSequenceCharacters
            (
                const NXString & invalid_chars /** invalid chars */ 
            );
            /**Returns  the node in the part library to use for searching for the default
                        elbow to place during create path.  The part library node must 
                        have a type of @link NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable@endlink . A
                        NULL node indicates no default elbow part table.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString DefaultElbowNode
            (
            );
            /**Sets  the node in the part library to use for searching for the default
                        elbow to place during create path.  The part library node must 
                        have a type of @link NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable NXOpen::Preferences::RoutingPartLibrary::NodeTypeTable@endlink . A
                        NULL node indicates no default elbow part table.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDefaultElbowNode
            (
                const NXString & elbow_node /** elbow node */ 
            );


            private: NXOpen::Preferences::RoutingPartLibrary *partLibrary;
            /** The Routing part library. */
            public: NXOpen::Preferences::RoutingPartLibrary *PartLibrary()
            {
                return partLibrary;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
