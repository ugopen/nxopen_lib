#ifndef NXOpen_FEATURES_JOEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_JOEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_JoeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_JoeBuilder.hxx>
#include <NXOpen/Features_JoeListItem.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_EnumTest.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/GeometricUtilities_StringTestBuilder.hxx>
#include <NXOpen/GeometricUtilities_ValueTestBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class JoeBuilder;
    }
    class Expression;
    class ExpressionCollectorSetList;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class JoeListItem;
    }
    namespace Features
    {
        class JoeListItemList;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class EnumTest;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    namespace GeometricUtilities
    {
        class StringTestBuilder;
    }
    namespace GeometricUtilities
    {
        class ValueTestBuilder;
    }
    class Point;
    class Section;
    class SelectObject;
    class SelectObjectList;
    namespace Features
    {
        class _JoeBuilderBuilder;
        /** Builds a Joe feature  <br> To create a new instance of this class, use @link DebugSession::CreateJoeBuilder DebugSession::CreateJoeBuilder@endlink  <br> */
        class NXOPENDEBUGSESSIONCPPEXPORT JoeBuilder : public Features::FeatureBuilder
        {
            /** Enumeration of discreet types */
            public: enum DiscreetTypes
            {
                DiscreetTypesOption1/** option1 */ ,
                DiscreetTypesOption2/** option2 */ 
            };

            private: friend class  _JoeBuilderBuilder;
            protected: JoeBuilder();
            /**Returns  the toggle  <br> License requirements : None */
            public: bool Toggle
            (
            );
            /**Sets  the toggle  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToggle
            (
                bool convex /** convex */ 
            );
            /** Do an action  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ActionButton
            (
            );
            /**Returns  the tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the discreet type  <br> License requirements : None */
            public: NXOpen::Features::JoeBuilder::DiscreetTypes DiscreetType
            (
            );
            /**Sets  the discreet type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDiscreetType
            (
                NXOpen::Features::JoeBuilder::DiscreetTypes discreetType /** discreettype */ 
            );
            /**Returns  the integer  <br> License requirements : None */
            public: int Integer
            (
            );
            /**Sets  the integer  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInteger
            (
                int integer /** integer */ 
            );
            /**Returns  the radius dimension  <br> License requirements : None */
            public: NXOpen::Expression * RadiusDimension
            (
            );
            /**Returns  the name  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /** The lines of text  @return   <br> License requirements : None */
            public: std::vector<NXString> GetLines
            (
            );
            /**  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLines
            (
                const std::vector<NXString> & lines /** lines */ 
            );
            /** Non-iti lines of text  @return   <br> License requirements : None */
            public: std::vector<NXString> GetNonItiLines
            (
            );
            /**  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNonItiLines
            (
                std::vector<NXString> & lines /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the section  <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Returns  the selected object  <br> License requirements : None */
            public: NXOpen::SelectObjectList * Selection
            (
            );
            /**Returns  the expression  <br> License requirements : None */
            public: NXOpen::Expression * Expression
            (
            );
            /**Returns  the length  <br> License requirements : None */
            public: NXOpen::Expression * Dimension
            (
            );
            /**Returns  the double linear dimension  <br> License requirements : None */
            public: NXOpen::Expression * DoubleLinearDimension
            (
            );
            /**Returns  the two-sided linear dimension  <br> License requirements : None */
            public: NXOpen::Expression * TwoSidedLinear
            (
            );
            /**Returns  the angular dimension  <br> License requirements : None */
            public: NXOpen::Expression * AngularDimension
            (
            );
            /**Returns  the two-sided angular dimension  <br> License requirements : None */
            public: NXOpen::Expression * TwoSidedAngular
            (
            );
            /**Returns  the location  <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the location  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPoint
            (
                NXOpen::Point * location /** location */ 
            );
            /**Returns  the boolean operation  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /**Returns   <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * OnPathDim
            (
            );
            /**Returns   <br> License requirements : None */
            public: NXOpen::SelectObject * Path
            (
            );
            /**Returns  the list  <br> License requirements : None */
            public: NXOpen::Features::JoeListItemList * List
            (
            );
            /**Returns  the enum test  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EnumTest * EnumTest
            (
            );
            /**Returns  the string test  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::StringTestBuilder * StringTest
            (
            );
            /**Returns  the value test  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ValueTestBuilder * ValueTest
            (
            );
            /**Returns  the seldimlist  <br> License requirements : None */
            public: NXOpen::ExpressionCollectorSetList * Seldimlist
            (
            );
            /** Creates a new list item  @return   <br> License requirements : None */
            public: NXOpen::Features::JoeListItem * NewListItem
            (
                double value /** initial value in part units */,
                const NXString & name /** name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int position /** position */
            );
            /**Returns  the flag that if true, section, selection, and other selections are disabled  <br> License requirements : None */
            public: bool DisableSelections
            (
            );
            /**Sets  the flag that if true, section, selection, and other selections are disabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDisableSelections
            (
                bool disableSelections /** disableselections */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
