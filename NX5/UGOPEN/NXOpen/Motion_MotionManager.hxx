#ifndef NXOpen_MOTION_MOTIONMANAGER_HXX_INCLUDED
#define NXOpen_MOTION_MOTIONMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_MotionManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class MotionManager;
    }
    class Part;
    namespace Motion
    {
        class BodyContactCollection;
    }
    namespace Motion
    {
        class CurveContactCollection;
    }
    namespace Motion
    {
        class GraphManager;
    }
    namespace Motion
    {
        class JointCollection;
    }
    namespace Motion
    {
        class JointDriverCollection;
    }
    namespace Motion
    {
        class LinkCollection;
    }
    namespace Motion
    {
        class MotionSolutionCollection;
    }
    namespace Motion
    {
        /** A manager to deal with all motion objects, Revised by Jason Fu   <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT MotionManager
        {
            private: NXOpen::Part* m_owner;
            public: explicit MotionManager(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 


            private: NXOpen::Motion::JointCollection *joints;
            /** Returns the @link Motion::JointCollection  Motion::JointCollection @endlink  belonging to this part */
            public: NXOpen::Motion::JointCollection *Joints()
            {
                return joints;
            }
            private: NXOpen::Motion::LinkCollection *links;
            /** Returns the @link Motion::LinkCollection  Motion::LinkCollection @endlink  belonging to this part */
            public: NXOpen::Motion::LinkCollection *Links()
            {
                return links;
            }
            private: NXOpen::Motion::JointDriverCollection *jointDrivers;
            /** Returns the @link Motion::JointDriverCollection Motion::JointDriverCollection@endlink  belonging to this part */
            public: NXOpen::Motion::JointDriverCollection *JointDrivers()
            {
                return jointDrivers;
            }
            private: NXOpen::Motion::GraphManager *graphs;
            /** Returns the @link Motion::GraphManager Motion::GraphManager@endlink  for this part*/
            public: NXOpen::Motion::GraphManager *Graphs()
            {
                return graphs;
            }
            private: NXOpen::Motion::MotionSolutionCollection *motionSolutions;
            /** Returns the @link Motion::MotionSolutionCollection Motion::MotionSolutionCollection@endlink  belonging to this part */
            public: NXOpen::Motion::MotionSolutionCollection *MotionSolutions()
            {
                return motionSolutions;
            }
            private: NXOpen::Motion::BodyContactCollection *bodyContacts;
            /** Returns the @link Motion::BodyContactCollection Motion::BodyContactCollection@endlink  belonging to this part */
            public: NXOpen::Motion::BodyContactCollection *BodyContacts()
            {
                return bodyContacts;
            }
            private: NXOpen::Motion::CurveContactCollection *curveContacts;
            /** Returns the @link Motion::CurveContactCollection Motion::CurveContactCollection@endlink  belonging to this part */
            public: NXOpen::Motion::CurveContactCollection *CurveContacts()
            {
                return curveContacts;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
