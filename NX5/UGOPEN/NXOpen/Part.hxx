#ifndef NXOpen_PART_HXX_INCLUDED
#define NXOpen_PART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Part.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/ExpressionCollectorSet.hxx>
#include <NXOpen/ExpressionSectionSet.hxx>
#include <NXOpen/PartCloseResponses.hxx>
#include <NXOpen/PartReopenReport.hxx>
#include <NXOpen/PartSaveStatus.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Part;
    namespace Annotations
    {
        class AnnotationManager;
    }
    namespace Annotations
    {
        class DimensionCollection;
    }
    namespace Annotations
    {
        class GdtCollection;
    }
    namespace Annotations
    {
        class LabelCollection;
    }
    namespace Annotations
    {
        class NoteCollection;
    }
    namespace Annotations
    {
        class PmiManager;
    }
    namespace Assemblies
    {
        class ComponentGroupCollection;
    }
    namespace Assemblies
    {
        namespace ProductInterface
        {
            class Collection;
        }
    }
    namespace Assemblies
    {
        class RelinkerCollection;
    }
    class BasePart;
    class Body;
    class BodyCollection;
    namespace BodyDes
    {
        class OnestepUnformCollection;
    }
    namespace CAM
    {
        class CAMSetup;
    }
    class ClipboardOperationsManager;
    class CutViewCollection;
    class DraftPointDataCollection;
    class DraftingManager;
    namespace Drawings
    {
        class DraftingViewCollection;
    }
    namespace Drawings
    {
        class DrawingSheetCollection;
    }
    class ExpressionCollectorSet;
    class ExpressionSectionSet;
    class ExpressionSet;
    namespace Facet
    {
        class FacetedBodyCollection;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureCollection;
    }
    namespace GeometricUtilities
    {
        class BlendStopshortBuilderCollection;
    }
    namespace GeometricUtilities
    {
        class FaceSetDataCollection;
    }
    namespace GeometricUtilities
    {
        class FaceSetOffsetCollection;
    }
    namespace GeometricUtilities
    {
        class GeometryLocationDataCollection;
    }
    namespace GeometricUtilities
    {
        class SpinePointDataCollection;
    }
    class ImportManager;
    namespace Motion
    {
        class MarkerCollection;
    }
    namespace Motion
    {
        class MotionManager;
    }
    namespace Motion
    {
        class PackagingCollection;
    }
    class NXObject;
    class ObjectList;
    class PartCloseResponses;
    class PartReopenReport;
    class PartSaveOptions;
    class PartSaveStatus;
    class Point;
    namespace Preferences
    {
        class ViewPreferences;
    }
    class RegionPoint;
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class SegmentManager;
    }
    class ScCollector;
    class ScRuleFactory;
    class Section;
    class SketchCollection;
    class SketchEvaluatorCollection;
    namespace Tooling
    {
        class AddReusablePartCollection;
    }
    class TracelineCollection;
    class ValidationCollection;
    class _PartBuilder;
    /**  @brief  Represents an NX part of type .prt.  

        <br> Use the @link PartCollection PartCollection@endlink  class to load or create a part. <br> */
    class NXOPENCPPEXPORT Part : public BasePart
    {
        /** The units of the part file. */
        public: enum Units
        {
            UnitsInches/** inches */ ,
            UnitsMillimeters/** millimeters */ 
        };

        /** Used to specify whether a part's components should be saved (if modified)
            when the part is saved. 
         @deprecated Deprecated in NX4 <br> 
        */
        public: enum SaveComponents
        {
            SaveComponentsFalse/** false */ ,
            SaveComponentsTrue/** true */ 
        };

        /** Used to specify whether a part should be closed after it is saved. 
         @deprecated Deprecated in NX4 <br> 
        */
        public: enum CloseAfterSave
        {
            CloseAfterSaveFalse/** false */ ,
            CloseAfterSaveTrue/** true */ 
        };

         /** Contains part history event information 
         @deprecated Deprecated in NX4 <br> 
        */
        public:
        struct HistoryEvent
        {
            public: /** program name */NXString Program;
            public: /** user id */NXString User;
            public: /** type of machine. eg.  NT Intel */NXString Machine;
            public: /** time of last change */NXString Time;
            public: /** version number */int Version;
            public: HistoryEvent() :
                Program(),
                User(),
                Machine(),
                Time(),
                Version()
            {
            }
            /** Constructor for the HistoryEvent struct. */ 
            public: HistoryEvent(NXString INIT_program /** program name */, NXString INIT_user /** user id */, NXString INIT_machine /** type of machine. eg.  NT Intel */, NXString INIT_time /** time of last change */, int INIT_version /** version number */) :
                Program(INIT_program),
                User(INIT_user),
                Machine(INIT_machine),
                Time(INIT_time),
                Version(INIT_version)
            {
            }
        };

         /** Contains feature update status report */
        public:
        struct FeatureUpdateStatus
        {
            public: /** the feature */NXOpen::Features::Feature * Feature;
            public: /** status of the feature (e.g. Suppressed) */NXString Status;
            public: /** error message */NXString ErrorMessage;
            public: FeatureUpdateStatus() :
                Feature(),
                Status(),
                ErrorMessage()
            {
            }
            /** Constructor for the FeatureUpdateStatus struct. */ 
            public: FeatureUpdateStatus(NXOpen::Features::Feature * INIT_feature /** the feature */, NXString INIT_status /** status of the feature (e.g. Suppressed) */, NXString INIT_error_message /** error message */) :
                Feature(INIT_feature),
                Status(INIT_status),
                ErrorMessage(INIT_error_message)
            {
            }
        };

        /** Indicates how part close should handle component parts when they are modified 
         @deprecated Deprecated in NX4 <br> 
        */
        public: enum CloseModified
        {
            CloseModifiedUseResponses/** Use the responses in
                        @link PartCloseResponses PartCloseResponses@endlink  to determine whether to close a
                        modified part or not */,
            CloseModifiedCloseModified/** Close all modified parts */,
            CloseModifiedDontCloseModified/** Do not close any modified parts */
        };

        /** Specifies the preview mode of the part file. 
         @deprecated Deprecated in NX4 <br> 
        */
        public: enum Preview
        {
            PreviewNo/** No preview image is stored for the part. */,
            PreviewOnSave/** Create a preview image when the part is saved. */,
            PreviewOnDemand/** Create a preview image on demand. */
        };

        private: friend class  _PartBuilder;
        protected: Part();
        /** Saves the part whether it is modified or not.  @return  Parts that could not be saved and their associated errors.  <br> License requirements : None */
        public: NXOpen::PartSaveStatus * Save
        (
            NXOpen::BasePart::SaveComponents save_component_parts /** The part's
                        components are saved if modified if this parameter is set to
                        @link BasePart::SaveComponentsTrue BasePart::SaveComponentsTrue@endlink . */,
            NXOpen::BasePart::CloseAfterSave close /** The part is closed if
                        this parameter is set to @link BasePart::CloseAfterSaveTrue BasePart::CloseAfterSaveTrue@endlink . */
        );
        /** Saves the part whether it is modified or not.
             <br> This method is deprecated. Use @link BasePart::Save BasePart::Save@endlink  instead.
             <br>  
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: void Save
        (
            NXOpen::Part::SaveComponents save_component_parts /** The part's
                        components are saved if modified if this parameter is set to
                        @link Part::SaveComponentsTrue Part::SaveComponentsTrue@endlink . */,
            NXOpen::Part::CloseAfterSave close /** The part is closed if
                        this parameter is set to @link Part::CloseAfterSaveTrue Part::CloseAfterSaveTrue@endlink . */,
            NXOpen::PartSaveStatus ** save_status /** Parts that could not be saved and their associated errors. */
        );
        /** Creates copy of target part.  @return  Parts that could could not saved and their associated errors.  <br> License requirements : None */
        public: NXOpen::PartSaveStatus * SaveAs
        (
            const NXString & new_file_name /** name of new part file to create   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates copy of target part.
             <br> This method is deprecated. Use @link BasePart::SaveAs BasePart::SaveAs@endlink  instead.
             <br>   @return  the new part 
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: NXOpen::Part * SaveAs
        (
            const NXString & new_file_name /** name of new part file to create   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::PartSaveStatus ** save_status /** Parts that could could not saved and their associated errors. */
        );
        /** Reopens a loaded part.  @return  The reloaded part  <br> License requirements : None */
        public: NXOpen::BasePart * Reopen
        (
            NXOpen::BasePart::CloseWholeTree whole_tree /** If true, unloads all components of the part.
                        If false, unloads only the top-level part */,
            NXOpen::BasePart::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopen_report /** Report
                       containing results of reopen command */
        );
        /** Reopens a loaded part.
             <br> This method is deprecated. Use @link BasePart::Reopen BasePart::Reopen@endlink  instead.
             <br>   @return  The reloaded part 
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: NXOpen::Part * Reopen
        (
            bool whole_tree /** If true, unloads all components of the part.
                        If false, unloads only the top-level part */,
            NXOpen::Part::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopen_report /** Report
                       containing results of reopen command */
        );
        /** Reopens a loaded part.  @return  The reloaded part  <br> License requirements : None */
        public: NXOpen::BasePart * ReopenAs
        (
            const NXString & file_name /** name of part file to open   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::BasePart::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopen_report /** Report
                       containing results of reopen command */
        );
        /** Reopens a loaded part.
             <br> This method is deprecated. Use @link BasePart::ReopenAs BasePart::ReopenAs@endlink  instead.
             <br>   @return  The reloaded part 
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: NXOpen::Part * ReopenAs
        (
            const NXString & file_name /** name of part file to open   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Part::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */,
            NXOpen::PartReopenReport ** reopen_report /** Report
                       containing results of reopen command */
        );
        /** Closes an open part.  <br> License requirements : None */
        public: void Close
        (
            NXOpen::BasePart::CloseWholeTree whole_tree /** If true, unloads all components of the part.
                        If false, unloads only the top-level part */,
            NXOpen::BasePart::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /** Closes an open part.
             <br> This method is deprecated. Use @link BasePart::Close BasePart::Close@endlink  instead.
             <br>  
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: void Close
        (
            bool whole_tree /** If true, unloads all components of the part.
                        If false, unloads only the top-level part */,
            NXOpen::Part::CloseModified close_modified /** Behavior of close if component
                        parts are modified. */,
            NXOpen::PartCloseResponses * responses /** Class representing list of parts to close or leave open if modified. Only
                        used if closed_modified is set to
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink . If
                        @link BasePart::CloseModifiedUseResponses BasePart::CloseModifiedUseResponses@endlink  is set, then
                        any parts that are candidates for being closed that are not in this list
                        will be closed whether modified or not. See
                        @link PartCloseResponses PartCloseResponses@endlink  for how to add responses to this
                        class. */
        );
        /** Get the history of a part.
             <br> This method is deprecated. Use @link BasePart::GetHistoryInformation BasePart::GetHistoryInformation@endlink  instead.
             <br>   @return  list of history data for the part. The list is sorted in
                                    descending order on version number.  <br> License requirements : None */
        public: std::vector<NXOpen::Part::HistoryEvent> GetHistory
        (
        );
        /**Returns  the preview mode
             <br> This property is deprecated. Use @link BasePart::PartPreviewModeBasePart::PartPreviewMode @endlink and @link BasePart::SetPartPreviewModeBasePart::SetPartPreviewMode @endlink  instead.
             <br>  
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: NXOpen::Part::Preview PreviewMode
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link PreviewMode() PreviewMode@endlink instead.
        @deprecated
        */
        public: NXOpen::Part::Preview GetPreviewMode
        (
        ) { return this->PreviewMode(); }
        /**Sets  the preview mode
             <br> This property is deprecated. Use @link BasePart::PartPreviewModeBasePart::PartPreviewMode @endlink and @link BasePart::SetPartPreviewModeBasePart::SetPartPreviewMode @endlink  instead.
             <br>  
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: void SetPreviewMode
        (
            NXOpen::Part::Preview mode /** mode */ 
        );
        /** Returns a list of child parts in the current session that
            contain interpart geometry.  @return   <br> License requirements : None */
        public: std::vector<NXOpen::Part *> GetInterpartChildren
        (
        );
        /** Returns a list of parts in the current session that contain the
            defining geometry for linked geometry in this part.  @return   <br> License requirements : None */
        public: std::vector<NXOpen::Part *> GetInterpartParents
        (
        );
        /**Returns  the current feature.  <br> License requirements : None */
        public: NXOpen::Features::Feature * CurrentFeature
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link CurrentFeature() CurrentFeature@endlink instead.
        @deprecated
        */
        public: NXOpen::Features::Feature * GetCurrentFeature
        (
        ) { return this->CurrentFeature(); }
        /** Get feature update status report  @return  list of affected features  <br> License requirements : None */
        public: std::vector<NXOpen::Part::FeatureUpdateStatus> GetUpdateStatusReport
        (
            int* num_failed /** number of failed features */
        );
        /** Sets the timestamp for the part to the timestamp of the latest feature in the part.
            Use this when you have deleted the latest feature and you want to reuse the timestamp
            assigned to that feature  <br> License requirements : None */
        public: void ResetTimestampToLatestFeature
        (
        );
        /** Constructs a new PartCloseResponses class. This class is used to
            communicate whether to close certain parts if they are modified during part close.  @return  
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : None */
        public: NXOpen::PartCloseResponses * NewPartCloseResponses
        (
        );
        /** Deletes all retained drafting objects in the current layout of part that are currently
            in  the "retained" state.  <br> License requirements : None */
        public: void DeleteRetainedDraftingObjectsInCurrentLayout
        (
        );
        /** Creates an empty list that can be populated with any NXObject  @return  ObjectList object  <br> License requirements : None */
        public: NXOpen::ObjectList * CreateObjectList
        (
        );
        /** Creates an ExpressionSet item that contains a selection collection and a corresponding expression
                 <br> This method is deprecated. Use @link CreateExpressionSectionSet CreateExpressionSectionSet@endlink  or
                @link CreateExpressionCollectorSet CreateExpressionCollectorSet@endlink instead.
                Note that this API cannot be used together with the new APIs.
                 <br> 
              @return  New ExpressionSet object 
         @deprecated Deprecated in NX5 <br> 
         <br> License requirements : None */
        public: NXOpen::ExpressionSet * CreateExpressionSet
        (
            NXOpen::NXObject * collector /** Collector object */,
            const NXString & value /** initial expression string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & units_type /** units of expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int index /** index of this item in a list, -1 if N/A or unknown */
        );
        /** Creates an empty ExpressionSet item
                 <br> This method is deprecated. Use @link CreateEmptyExpressionSectionSet CreateEmptyExpressionSectionSet@endlink  or
                @link CreateEmptyExpressionCollectorSet CreateEmptyExpressionCollectorSet@endlink instead.
                Note that this API cannot be used together with the new APIs.
                 <br> 
              @return  New empty ExpressionSet object 
         @deprecated Deprecated in NX5 <br> 
         <br> License requirements : None */
        public: NXOpen::ExpressionSet * CreateEmptyExpressionSet
        (
        );
        /** Creates an ExpressionSectionSet item that contains a @link Section Section@endlink  collection
                and a corresponding expression  @return  New ExpressionSectionSet object  <br> License requirements : None */
        public: NXOpen::ExpressionSectionSet * CreateExpressionSectionSet
        (
            NXOpen::Section * section /** Section object */,
            const NXString & value /** initial expression string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & units_type /** units of expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int index /** index of this item in a list, -1 if N/A or unknown */
        );
        /** Creates an empty ExpressionSectionSet item
              @return  New ExpressionSectionSet object  <br> License requirements : None */
        public: NXOpen::ExpressionSectionSet * CreateEmptyExpressionSectionSet
        (
        );
        /** Creates an ExpressionCollectorSet item that contains a @link ScCollector ScCollector@endlink  collection
                and a corresponding expression  @return  New ExpressionCollectorSet object  <br> License requirements : None */
        public: NXOpen::ExpressionCollectorSet * CreateExpressionCollectorSet
        (
            NXOpen::ScCollector * collector /** Selection object */,
            const NXString & value /** initial expression string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & units_type /** units of expression   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            int index /** index of this item in a list, -1 if N/A or unknown */
        );
        /** Creates an empty ExpressionCollectorSet item
              @return  New ExpressionCollectorSet object  <br> License requirements : None */
        public: NXOpen::ExpressionCollectorSet * CreateEmptyExpressionCollectorSet
        (
        );
        /**Returns  the CAM setup of the work part  <br> License requirements : cam_base ("CAM BASE") */
        public: NXOpen::CAM::CAMSetup * CamSetup
        (
        );
        /** Creates CAM setup  @return  the created cam setup  <br> License requirements : cam_base ("CAM BASE") */
        public: NXOpen::CAM::CAMSetup * CreateCamSetup
        (
            const NXString & template_name /** the name of the template type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Delete CAM setup  <br> License requirements : cam_base ("CAM BASE") */
        public: void DeleteCamSetup
        (
        );
        /** Creates an item that contains a point and its corresponding body context for a region  @return  Region point object  <br> License requirements : None */
        public: NXOpen::RegionPoint * CreateRegionPoint
        (
            NXOpen::Point * point /** Point object */,
            NXOpen::Body * body /** Body context object for point */
        );
        /** Creates an empty item that contains a point and its corresponding body context for a region  @return  New empty Region point object  <br> License requirements : None */
        public: NXOpen::RegionPoint * CreateEmptyRegionPoint
        (
        );


        private: NXOpen::Annotations::AnnotationManager *annotations;
        /** Returns the AnnotationManager for part */
        public: NXOpen::Annotations::AnnotationManager *Annotations()
        {
            return annotations;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Annotations() Annotations@endlink instead.
        @deprecated
        */
        public: NXOpen::Annotations::AnnotationManager *GetAnnotations() { return Annotations(); }
        private: NXOpen::BodyCollection *bodies;
        /** Returns the BodyCollection instance belonging to this part */
        public: NXOpen::BodyCollection *Bodies()
        {
            return bodies;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Bodies() Bodies@endlink instead.
        @deprecated
        */
        public: NXOpen::BodyCollection *GetBodies() { return Bodies(); }
        private: NXOpen::CutViewCollection *cutViews;
        /** Returns the CutViewCollection instance belonging to this part */
        public: NXOpen::CutViewCollection *CutViews()
        {
            return cutViews;
        }
        private: NXOpen::Annotations::DimensionCollection *dimensions;
        /** Returns the DimensionCollection instance belonging to this part */
        public: NXOpen::Annotations::DimensionCollection *Dimensions()
        {
            return dimensions;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Dimensions() Dimensions@endlink instead.
        @deprecated
        */
        public: NXOpen::Annotations::DimensionCollection *GetDimensions() { return Dimensions(); }
        private: NXOpen::Drawings::DraftingViewCollection *draftingViews;
        /** Returns the DraftingViewCollection instance belonging to this part */
        public: NXOpen::Drawings::DraftingViewCollection *DraftingViews()
        {
            return draftingViews;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link DraftingViews() DraftingViews@endlink instead.
        @deprecated
        */
        public: NXOpen::Drawings::DraftingViewCollection *GetDraftingViews() { return DraftingViews(); }
        private: NXOpen::Drawings::DrawingSheetCollection *drawingSheets;
        /** Returns the DrawingSheetCollection instance belonging to this part */
        public: NXOpen::Drawings::DrawingSheetCollection *DrawingSheets()
        {
            return drawingSheets;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link DrawingSheets() DrawingSheets@endlink instead.
        @deprecated
        */
        public: NXOpen::Drawings::DrawingSheetCollection *GetDrawingSheets() { return DrawingSheets(); }
        private: NXOpen::Features::FeatureCollection *features;
        /** Returns the FeatureCollection instance belonging to this part */
        public: NXOpen::Features::FeatureCollection *Features()
        {
            return features;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Features() Features@endlink instead.
        @deprecated
        */
        public: NXOpen::Features::FeatureCollection *GetFeatures() { return Features(); }
        private: NXOpen::PartSaveOptions *saveOptions;
        /** Returns the PartSaveOptions instance belonging to this part */
        public: NXOpen::PartSaveOptions *SaveOptions()
        {
            return saveOptions;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link SaveOptions() SaveOptions@endlink instead.
        @deprecated
        */
        public: NXOpen::PartSaveOptions *GetSaveOptions() { return SaveOptions(); }
        private: NXOpen::ScRuleFactory *scRuleFactory;
        /** Returns the ScRuleFactory instance belonging to this part */
        public: NXOpen::ScRuleFactory *ScRuleFactory()
        {
            return scRuleFactory;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link ScRuleFactory() ScRuleFactory@endlink instead.
        @deprecated
        */
        public: NXOpen::ScRuleFactory *GetScRuleFactory() { return ScRuleFactory(); }
        private: NXOpen::Annotations::NoteCollection *notes;
        /** Returns a collection of notes */
        public: NXOpen::Annotations::NoteCollection *Notes()
        {
            return notes;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Notes() Notes@endlink instead.
        @deprecated
        */
        public: NXOpen::Annotations::NoteCollection *GetNotes() { return Notes(); }
        private: NXOpen::Annotations::LabelCollection *labels;
        /** Returns a collection of labels */
        public: NXOpen::Annotations::LabelCollection *Labels()
        {
            return labels;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Labels() Labels@endlink instead.
        @deprecated
        */
        public: NXOpen::Annotations::LabelCollection *GetLabels() { return Labels(); }
        private: NXOpen::Annotations::GdtCollection *gdts;
        /** Returns a collection of GDTs */
        public: NXOpen::Annotations::GdtCollection *Gdts()
        {
            return gdts;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Gdts() Gdts@endlink instead.
        @deprecated
        */
        public: NXOpen::Annotations::GdtCollection *GetGdts() { return Gdts(); }
        private: NXOpen::ValidationCollection *validations;
        /** Returns the validation  for this part */
        public: NXOpen::ValidationCollection *Validations()
        {
            return validations;
        }
        private: NXOpen::Motion::MarkerCollection *markers;
        /** Return a collection of Markers */
        public: NXOpen::Motion::MarkerCollection *Markers()
        {
            return markers;
        }
        private: NXOpen::Routing::RouteManager *routeManager;
        /** Returns the RouteManager for this part*/
        public: NXOpen::Routing::RouteManager *RouteManager()
        {
            return routeManager;
        }
        private: NXOpen::Routing::SegmentManager *segmentManager;
        /** Returns the SegmentManager for this part*/
        public: NXOpen::Routing::SegmentManager *SegmentManager()
        {
            return segmentManager;
        }
        private: NXOpen::SketchCollection *sketches;
        /** Returns the SketchCollection instance belonging to this part */
        public: NXOpen::SketchCollection *Sketches()
        {
            return sketches;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Sketches() Sketches@endlink instead.
        @deprecated
        */
        public: NXOpen::SketchCollection *GetSketches() { return Sketches(); }
        private: NXOpen::TracelineCollection *tracelines;
        /** Returns a collection of tracelines */
        public: NXOpen::TracelineCollection *Tracelines()
        {
            return tracelines;
        }
        private: NXOpen::GeometricUtilities::FaceSetOffsetCollection *faceSetOffsets;
        /** Returns the FaceSetOffsets instance belonging to this part */
        public: NXOpen::GeometricUtilities::FaceSetOffsetCollection *FaceSetOffsets()
        {
            return faceSetOffsets;
        }
        private: NXOpen::Motion::PackagingCollection *packagingCollection;
        /** Returns the PackagingCollection for this part*/
        public: NXOpen::Motion::PackagingCollection *PackagingCollection()
        {
            return packagingCollection;
        }
        private: NXOpen::Motion::MotionManager *motionManager;
        /** Returns the MotionManager for this part*/
        public: NXOpen::Motion::MotionManager *MotionManager()
        {
            return motionManager;
        }
        private: NXOpen::DraftPointDataCollection *draftPointData;
        /** Returns the collection of DraftPointData */
        public: NXOpen::DraftPointDataCollection *DraftPointData()
        {
            return draftPointData;
        }
        private: NXOpen::Assemblies::RelinkerCollection *relinkers;
        /** Returns the RelinkerCollection instance belonging to this part */
        public: NXOpen::Assemblies::RelinkerCollection *Relinkers()
        {
            return relinkers;
        }
        private: NXOpen::BodyDes::OnestepUnformCollection *onestepUnforms;
        /** Returns the BodyDes.OnestepUnformCollection instance belonging to this part */
        public: NXOpen::BodyDes::OnestepUnformCollection *OnestepUnforms()
        {
            return onestepUnforms;
        }
        private: NXOpen::Tooling::AddReusablePartCollection *reusableParts;
        /** Returns the AddReusablePartCollection instance belonging to this part */
        public: NXOpen::Tooling::AddReusablePartCollection *ReusableParts()
        {
            return reusableParts;
        }
        private: NXOpen::SketchEvaluatorCollection *sketchEvaluators;
        /** Returns the collection of SketchEvaluator */
        public: NXOpen::SketchEvaluatorCollection *SketchEvaluators()
        {
            return sketchEvaluators;
        }
        private: NXOpen::DraftingManager *drafting;
        /** Returns the DraftingManager for part */
        public: NXOpen::DraftingManager *Drafting()
        {
            return drafting;
        }
        private: NXOpen::Assemblies::ComponentGroupCollection *componentGroups;
        /** Returns the collection of ComponentGroups for this part */
        public: NXOpen::Assemblies::ComponentGroupCollection *ComponentGroups()
        {
            return componentGroups;
        }
        private: NXOpen::ImportManager *importManager;
        /** Returns the import manager for this part */
        public: NXOpen::ImportManager *ImportManager()
        {
            return importManager;
        }
        private: NXOpen::Facet::FacetedBodyCollection *facetedBodies;
        /** Returns the FacetedBodyCollection instance belonging to this part */
        public: NXOpen::Facet::FacetedBodyCollection *FacetedBodies()
        {
            return facetedBodies;
        }
        private: NXOpen::Assemblies::ProductInterface::Collection *productInterface;
        /** Returns the ProductInterface Collection */
        public: NXOpen::Assemblies::ProductInterface::Collection *ProductInterface()
        {
            return productInterface;
        }
        private: NXOpen::ClipboardOperationsManager *clipboardOperationsManager;
        /** Returns the ClipboardOperations manager for this part */
        public: NXOpen::ClipboardOperationsManager *ClipboardOperationsManager()
        {
            return clipboardOperationsManager;
        }
        private: NXOpen::Preferences::ViewPreferences *viewPreferences;
        /** Returns the ViewPreferences Collection */
        public: NXOpen::Preferences::ViewPreferences *ViewPreferences()
        {
            return viewPreferences;
        }
        private: NXOpen::GeometricUtilities::SpinePointDataCollection *spinePointData;
        /** Returns the SpinePointDataCollection instance belonging to this part */
        public: NXOpen::GeometricUtilities::SpinePointDataCollection *SpinePointData()
        {
            return spinePointData;
        }
        private: NXOpen::Annotations::PmiManager *pmiManager;
        /** Returns the PmiManager for this part */
        public: NXOpen::Annotations::PmiManager *PmiManager()
        {
            return pmiManager;
        }
        private: NXOpen::GeometricUtilities::BlendStopshortBuilderCollection *blendStopshortBuilder;
        /** Returns the BlendStopshortBuilderCollection instance belonging to this part */
        public: NXOpen::GeometricUtilities::BlendStopshortBuilderCollection *BlendStopshortBuilder()
        {
            return blendStopshortBuilder;
        }
        private: NXOpen::GeometricUtilities::FaceSetDataCollection *faceSetData;
        /** Returns the FaceSetDataCollection instance belonging to this part */
        public: NXOpen::GeometricUtilities::FaceSetDataCollection *FaceSetData()
        {
            return faceSetData;
        }
        private: NXOpen::GeometricUtilities::GeometryLocationDataCollection *geometryLocationData;
        /** Returns the GeometryLocationDataCollection instance belonging to this part */
        public: NXOpen::GeometricUtilities::GeometryLocationDataCollection *GeometryLocationData()
        {
            return geometryLocationData;
        }
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
