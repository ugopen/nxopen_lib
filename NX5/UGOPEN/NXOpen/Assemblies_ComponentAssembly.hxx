#ifndef NXOpen_ASSEMBLIES_COMPONENTASSEMBLY_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_COMPONENTASSEMBLY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ComponentAssembly.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class ArrangementCollection;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class ExplosionCollection;
    }
    class ErrorList;
    class NXObject;
    class Part;
    class PartLoadStatus;
    namespace Positioning
    {
        class ComponentPositioner;
    }
    namespace Positioning
    {
        class MatingConverter;
    }
    namespace Assemblies
    {
        class _ComponentAssemblyBuilder;
        /**
          Represents the set of @link Assemblies::Component Assemblies::Component@endlink s that make up an
          assembly. Components are arranged in a tree structure, with a single component at the
          root. (See @link Assemblies::ComponentAssembly::RootComponent Assemblies::ComponentAssembly::RootComponent@endlink .) The
          components directly below the root are added to this assembly by calling
          @link Assemblies::ComponentAssembly::AddComponent Assemblies::ComponentAssembly::AddComponent@endlink . These "Top Level" components are
          said to be owned directly by this assembly. Top Level components may themselves have
          subcomponents.

           <br> 
          Certain methods in this class will only operate on Top Level components. For example,
          @link Assemblies::ComponentAssembly::MoveComponent Assemblies::ComponentAssembly::MoveComponent@endlink  will throw an exception if the
          input component is not owned directly by this assembly.  
           <br> 

           <br> 
          Note, however, that input components will be mapped onto the correct component in the
          assembly. See @link Assemblies::ComponentAssembly::MapComponentFromParent Assemblies::ComponentAssembly::MapComponentFromParent@endlink .
           <br> 

           <br> 
          For any methods that specify a component's position, the orientation matrix is in column order. 
          The first column of the matrix specifies the X axis, the second the Y axis, and the third the Z
          axis.
           <br> 
         <br> To obtain an instance of this class, use @link BasePart::ComponentAssembly BasePart::ComponentAssembly@endlink  <br> */
        class NXOPENCPPEXPORT ComponentAssembly : public NXObject
        {
            /** Defines how a component substitution operation is performed.
                 */
            public: enum SubstitutionMode
            {
                SubstitutionModeNonAssociative/** The old component is deleted, and the new one is added */,
                SubstitutionModeSingleComponent/** An associative substitution is performed. As far as possible,
                                                                                        this will attempt to preserve mating conditions and interpart
                                                                                        links. */,
                SubstitutionModeAll/** An associative substitution is performed on all components that
                                                                                        represent the same prototype part. This effectively substitutes
                                                                                        one child part for a new one. */
            };

            private: friend class  _ComponentAssemblyBuilder;
            protected: ComponentAssembly();
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddComponent
            (
                const NXString & part_to_add /** The part that defines the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & reference_set_name /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & component_name /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & base_point /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** load_status /** Result of loading the
                                                                                                    part_to_add */
            );
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddComponent
            (
                NXOpen::Part * part_to_add /** The part that defines the new component */,
                const NXString & reference_set_name /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & component_name /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & base_point /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** load_status /** Result of loading the
                                                                                                    part_to_add */
            );
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly as master part.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddMasterPartComponent
            (
                const NXString & part_to_add /** The part that defines the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & reference_set_name /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & component_name /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & base_point /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer.
                                                         */,
                NXOpen::PartLoadStatus ** load_status /** Result of loading the part_to_add */
            );
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly as master part.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddMasterPartComponent
            (
                NXOpen::Part * part_to_add /** The part that defines the new component */,
                const NXString & reference_set_name /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & component_name /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & base_point /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer.
                                                         */,
                NXOpen::PartLoadStatus ** load_status /** Result of loading the part_to_add */
            );
            /**Returns  the top-level component, i.e. the component at the root of the component
                    tree. This component corresponds to the part that owns this
                    @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink . The components below this will correspond to
                    parts added by calling @link Assemblies::ComponentAssembly::AddComponent Assemblies::ComponentAssembly::AddComponent@endlink .
                     <br> 
                    Note that this will be NULL if there are no components in the tree. (I.e. if the part
                    that owns this ComponentAssembly is a piece part.)
                     <br> 
                 <br> License requirements : None */
            public: NXOpen::Assemblies::Component * RootComponent
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link RootComponent() RootComponent@endlink instead.
            @deprecated
            */
            public: NXOpen::Assemblies::Component * GetRootComponent
            (
            ) { return this->RootComponent(); }
            /**
                    Substitutes an old component with a new component. The new component represents a new part, but 
                    will be placed in the same location as the original.
                 @return  The new Component that replaces the old one.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * SubstituteComponent
            (
                NXOpen::Assemblies::Component * component /** The old component to be substituted. */,
                NXOpen::Part * part /** The new part */,
                const NXString & new_name /** The name for the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & reference_set /** The name of the reference set for the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int layer /** The layer for the new component 
                                                                    -1 means use the original layers defined in the component.
                                                                    0 means use the work layer
                                                                    1-256 means use the specified layer.
                                                              */,
                NXOpen::Assemblies::ComponentAssembly::SubstitutionMode mode /** Defines the substitution mode */
            );
            /** Removes a component from this assemebly.   <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RemoveComponent
            (
                NXOpen::Assemblies::Component * component /** The component to remove. Must be directly owned by this assembly. */
            );
            /** Maps a component in a parent assembly onto a corresponding component in this
                    assembly. For example, given an Axle assembly: 
                     @code 
                                           
                           Axle
                         /      \          
                        /        \         
                     Left        Right     
                     Wheel       Wheel     

                     @endcode  
                    and a Car assembly containing two Axle components:
                     @code 
                     
                                       Car
                                _______ |_______                   
                               /                \                  
                              /                  \                 
                         Front                     Rear            
                         Axle                      Axle            
                       /      \                  /      \          
                      /        \                /        \         
                 Front Left  Front Right    Rear Left   Rear Right 
                   Wheel       Wheel         Wheel       Wheel     

                     @endcode 

                    then calling Axle.MapComponentFromParent with the Front Left Wheel component will
                    return the Left Wheel component. Note that calling Car.MapComponentFromParent on
                    Left Wheel will not work. See @link Assemblies::ComponentAssembly::MapComponentsFromSubassembly Assemblies::ComponentAssembly::MapComponentsFromSubassembly@endlink .
                    

                     <br> 
                    Calling Axle.MapComponent with the Left Wheel component will simply return Left
                    Wheel, i.e. it is a null operation.
                     <br> 

                     <br> 
                    Note that calling this method may load additional assembly data from the Axle part. 
                     <br> 

                 @return  The mapped component. This will be defined in the
                                                                                 component tree of this assembly parameter.
                                                                             <br> License requirements : None */
            public: NXOpen::Assemblies::Component * MapComponentFromParent
            (
                NXOpen::Assemblies::Component * component /** The component to map. This should be defined in the
                                                                                    tree of a parent assembly which contains this assembly.
                                                                                */
            );
            /** Maps a component in a subassembly onto the corresponding components in this
                    parent assembly. For example, given an Axle assembly: 
                     @code 
                                           
                           Axle
                         /      \          
                        /        \         
                     Left        Right     
                     Wheel       Wheel     

                     @endcode  
                    and a Car assembly containing two Axle components:
                     @code 
                     
                                       Car
                                _______ |_______                   
                               /                \                  
                              /                  \                 
                         Front                     Rear            
                         Axle                      Axle            
                       /      \                  /      \          
                      /        \                /        \         
                 Front Left  Front Right    Rear Left   Rear Right 
                   Wheel       Wheel         Wheel       Wheel     

                     @endcode 

                    then calling Car.MapComponentsFromSubassembly on Left Wheel will return
                    Front Left Wheel and Rear Left Wheel.
                    See also @link Assemblies::ComponentAssembly::MapComponentFromParent Assemblies::ComponentAssembly::MapComponentFromParent@endlink .
                    
                 @return  The mapped components. 
                                                                                      <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> MapComponentsFromSubassembly
            (
                NXOpen::Assemblies::Component * component /** The component to map. This must be defined in a subassembly
                                                                                            of this assembly.
                                                                                         */
            );
            /**Returns 
                    the currently active @link Assemblies::Arrangement Assemblies::Arrangement@endlink  for this ComponentAssembly
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * ActiveArrangement
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ActiveArrangement() ActiveArrangement@endlink instead.
            @deprecated
            */
            public: NXOpen::Assemblies::Arrangement * GetActiveArrangement
            (
            ) { return this->ActiveArrangement(); }
            /**Sets 
                    the currently active @link Assemblies::Arrangement Assemblies::Arrangement@endlink  for this ComponentAssembly
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetActiveArrangement
            (
                NXOpen::Assemblies::Arrangement * new_arrangement /** The new active @link Assemblies::Arrangement Assemblies::Arrangement@endlink . This Arrangement
                                                                                must be defined in this ComponentAssembly.
                                                                            */
            );
            /**
                    Suppresses an array of components
                 @return  list of errors encountered during the suppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be suppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be suppressed.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Suppresses an array of components in all @link Assemblies::Arrangement Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the suppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be suppressed */
            );
            /**
                    Unsuppresses an array of components in this ComponentAssembly
                 @return  list of errors encountered during the unsuppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * UnsuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be unsuppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be unsuppressed.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Unsuppresses an array of components in all @link Assemblies::Arrangement Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the unsuppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * UnsuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be unsuppressed */
            );
            /**
                    Release control of the suppression state of an array of components. The components
                    will no longer have their suppression state controlled by the given arrangements. (Note
                    that it is not an error if the given arrangements do not control the components.)
                 @return  list of errors encountered during the release  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * ReleaseSuppression
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be released */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be released.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Release control of the suppression state of an array of components. The components
                    will no longer have their suppression state controlled by any of the arrangements
                    in the ComponentAssembly.
                 @return  list of errors encountered during the release  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * ReleaseSuppression
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be released */
            );
            /** 
                    Convenience method for setting the reference set used to represent a component
                    to be the entire part.
                 <br> License requirements : None */
            public: void SetEntirePartRefset
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly. */
            );
            /** 
                    Convenience method for setting the reference set used to represent a component
                    to be empty
                 <br> License requirements : None */
            public: void SetEmptyRefset
            (
                NXOpen::Assemblies::Component * component /** The component to edit.  Must be directly owned by this assembly. */
            );
            /** 
                    Sets the reference set used to represent each component in an array. This is the equivalent of calling:
                     @code 
                    Assemblies.Component.DirectOwner
                     @endcode 
                     @code 
                    Assemblies.ComponentAssembly.ReplaceReferenceSet
                     @endcode 
                     <br> 
                    on each component in the array. However, this method will ensure that the reference set operations
                    are carried out in the correct order, so that any effects caused by a parent's reference set change will
                    be correctly reflected in the children. If changing reference set on components at various levels in the
                    assembly, use this method.
                     <br> 
                    
                 @return  list of errors encountered during the edit <br> License requirements : None */
            public: NXOpen::ErrorList * ReplaceReferenceSetInOwners
            (
                const NXString & new_reference_set /** The name of the new reference set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be edited. Each component 
                                                                                                    will have its reference set updated in its
                                                                                                    owning assembly. */
            );
            /** Replaces the reference set used by a component.  <br> License requirements : None */
            public: void ReplaceReferenceSet
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly. */,
                const NXString & new_reference_set /** The name of the new reference set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Moves a component by specifying a translation and rotation. Note that these are
                    specified in the coordinates of this assembly, which are not necesasrily the
                    coordinates of the displayed part.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void MoveComponent
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly  */,
                const NXOpen::Vector3d & translation /** The translation delta */,
                const NXOpen::Matrix3x3 & rotation /** The rotation delta */
            );
            /**Returns  the component positioner for this assembly.  The positioner manages the component constraints.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ComponentPositioner * Positioner
            (
            );
            /** Creates a @link Positioning::MatingConverter Positioning::MatingConverter@endlink  object for this assembly.
                    This can be used to convert Mating Conditions in this part and in its child components
                    to Positioning Constraints. Note that this part need not be the work part for this. 
                 @return  The new Mating Converter  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::MatingConverter * CreateMatingConverter
            (
            );


            private: NXOpen::Assemblies::ArrangementCollection *arrangements;
            /** The collection of @link Assemblies::Arrangement Assemblies::Arrangement@endlink s defined in the ComponentAssembly */
            public: NXOpen::Assemblies::ArrangementCollection *Arrangements()
            {
                return arrangements;
            }
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link Arrangements() Arrangements@endlink instead.
            @deprecated
            */
            public: NXOpen::Assemblies::ArrangementCollection *GetArrangements() { return Arrangements(); }
            private: NXOpen::Assemblies::ExplosionCollection *explosions;
            /** The collection of @link Assemblies::Explosion Assemblies::Explosion@endlink s defined in the ComponentAssembly */
            public: NXOpen::Assemblies::ExplosionCollection *Explosions()
            {
                return explosions;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
