#ifndef NXOpen_XFORMCOLLECTION_HXX_INCLUDED
#define NXOpen_XFORMCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     XformCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class XformCollection;
    class BasePart;
    class Xform;
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class Explosion;
    }
    class Axis;
    class CoordinateSystem;
    class Direction;
    class DisplayableObject;
    class ICurve;
    class NXObject;
    class Offset;
    class Point;
    class Scalar;
    /** Represents a collection of smart xforms.  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT XformCollection : public TaggedObjectCollection
    {
        private: NXOpen::BasePart* m_owner;
        public: explicit XformCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Iterator for accessing the contents of the collection. */
        class iterator
        {
        public:
            typedef Xform * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::XformCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::XformCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /**
             Creates a Xform without parameters.
             @return    <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            const NXOpen::Point3d & origin /**   Origin point */,
            const NXOpen::Vector3d & x_direction /**   X direction */,
            const NXOpen::Vector3d & y_direction /**   Y direction */,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ ,
            double scale /** scale */ 
        );
        /**
            Creates a Xform that based off the model space coordinate system.
            The X and Y Axes are the X and Y Axes of the absolute transform.  The origin is the
            origin of the absolute transform.
             @return    <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::SmartObject::UpdateOption update_option /** update option */ ,
            double scale /** scale */ 
        );
        /** Create a Xform based on three points.
             The origin is the first point, the X-Axis is the vector from the first to the
              second point, and the Y-Axis is the vector from the first to the third
              point.
             @return    <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * point1 /** point1 */ ,
            NXOpen::Point * point2 /** point2 */ ,
            NXOpen::Point * point3 /** point3 */ ,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates a Xform by three planes.  
            Defines a xform based on the input of three planes.  These can be either planar faces or datum planes.
            The X-Axis is normal of the first plane, the Y-Axis is normal of the second plane, the origin is the 
            intersection of the three plane.  The plane can either be a planar @link Face Face@endlink  or 
            a @link DatumPlane DatumPlane@endlink . 
             @return    <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::DisplayableObject * plane1 /** plane1 */ ,
            NXOpen::DisplayableObject * plane2 /** plane2 */ ,
            NXOpen::DisplayableObject * plane3 /** plane3 */ ,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates a Xform by picking up a point from an existing coordinate system
             @return  Xform  <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::CoordinateSystem * csys /** Existing coordinate system */,
            NXOpen::Point * point0 /** Start point */,
            NXOpen::Point * point1 /** End point */,
            NXOpen::Scalar * rotation_scalar_x /** Scalar of X rotation */,
            NXOpen::Scalar * rotation_scalar_y /** Scalar of Y rotation */,
            NXOpen::Scalar * rotation_scalar_z /** Scalar of Z rotation */,
            int rotation_option /** Determine the sequence of applying rotation and translation.
                                                                         If the value is 0, then a translation is first applied.
                                                                         Otherwise, a roation is first applied.
                                                                     */,
            NXOpen::SmartObject::UpdateOption update_option /** Update option of smart object */,
            double scale /** Xform scalar */
        );
        /** Creates a Xform by offsetting an existing coordinate system through
                a translation and a rotation
             @return  Xform  <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::CoordinateSystem * csys /** Existing coordinate system */,
            NXOpen::Offset * point0 /** Start point */,
            NXOpen::Offset * point1 /** End point */,
            NXOpen::Scalar * rotation_scalar_x /** Scalar of X rotation */,
            NXOpen::Scalar * rotation_scalar_y /** Scalar of Y rotation */,
            NXOpen::Scalar * rotation_scalar_z /** Scalar of Z rotation */,
            int rotation_option /** Determine the sequence of applying rotation and translation.
                                                                         If the value is 0, then a translation is first applied.
                                                                         Otherwise, a roation is first applied.
                                                                     */,
            NXOpen::SmartObject::UpdateOption update_option /** Update option of smart object */,
            double scale /** Xform scalar */
        );
        /** Creates a Xform based on a point and two vectors.

         @return    <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * origin /** origin */ ,
            NXOpen::Direction * x_direction /** x direction */ ,
            NXOpen::Direction * y_direction /** y direction */ ,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates a Xform based on two vectors. The X and Y Axes are vectors, with the
        origin being the vector intersection point.
         @return    <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Direction * x_direction /** x direction */ ,
            NXOpen::Direction * y_direction /** y direction */ ,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates a Xform based on a plane and a vector.  The X-Axis is the plane normal
         direction, the Y-Axis is the direction of the projection of the vector onto the plane,
         and the origin is the intersection of the plane and the vector.  The plane can
         either be a planar @link Face Face@endlink  or
         a @link DatumPlane DatumPlane@endlink .

         @return    <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::DisplayableObject * plane /** plane */ ,
            NXOpen::Direction * axis /** axis */ ,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ ,
            double scale /** scale */ 
        );
        /** Creates an Xform using a Z axis and X point
        The X-Axis is the vector from the Z-Axis vector to the point;
        the Y-Axis is computed from the X and Z axis; the origin is the
        intersection of the three vectors.  @return   <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * x_point /** x point */ ,
            NXOpen::Axis * z_axis /** z axis */ ,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ 
        );
        /** Creates an Xform through a point and perpendicular to a curve or edge.  The Z-axis is
        tangent to the curve or edge, and the X-Y plane goes through the point.
        When you select a linear curve, the X-Axis is a perpendicular vector from the curve to the point.
        When you select a non-linear curve, the
        X-Axis points in an arbitrary orientation and not towards the selected point.  @return   <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * point /** The X-Y plane will go through this point */,
            NXOpen::Point * helper_point /** helper point */ ,
            NXOpen::ICurve * curve /** The Z-axis will be tangent to the curve */,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ 
        );
        /** 
            Creates a Xform in the context of given @link Assemblies::Component Assemblies::Component@endlink .
             @return   <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Assemblies::Component * work_occ /** work occ */ ,
            NXOpen::Assemblies::Component * context_object /** context object */ ,
            NXOpen::SmartObject::UpdateOption update_option /** update option */ 
        );
        /** 
            Creates a Xform using the current viewing coordinate system. The X-Axis is parallel 
            to the bottom of view; the Y-Axis is parallel to side of view; the origin is the 
            origin of the view (middle of the graphics screen).

             @return   <br> License requirements : None */
        public: NXOpen::Xform * CreateXformFromCurrentView
        (
            NXOpen::SmartObject::UpdateOption update_option /** update option */ ,
            double scale /** scale */ 
        );
        /**
            Creates a Xform from the Xform of a a selected curve, plane, or drafting object.  If the
            selected curve is non-planar an error will be thrown.  If the curve is arc, ellipse, hyperbola,
            parabola, or circle, the origin will be at the respective curve's center.  If the object
            is planar face or a datum plane, the Z-axis is the normal vector of the plane.
             @return   <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::NXObject * object /** Object from which XForm creates */,
            NXOpen::SmartObject::UpdateOption update_option /** Update option of smart object */
        );
        /** Creates an Xform based on an object and an explosion.
             @return  Xform  <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::NXObject * object /** NX object */,
            NXOpen::Assemblies::Explosion * explosion /** Explosion */,
            NXOpen::SmartObject::UpdateOption update_option /** Update option of smart object */
        );
        /** 
             Creates a extract Xform based on object. 
             @return  Xform  <br> License requirements : None */
        public: NXOpen::Xform * CreateExtractXform
        (
            NXOpen::NXObject * object /** NX object */,
            NXOpen::SmartObject::UpdateOption update_option /** Update option of smart object   */,
            bool force_xform_creation /** Force the interpart xform to be created  */,
            NXOpen::NXObject ** proto /** Prototype of the object being extracted */
        );
        /** Creates an Xform based on the delta difference between the source and
                destination components in the explosion.
             @return  Xform  <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Assemblies::Explosion * explosion /** Explosion */,
            NXOpen::Assemblies::Component * source_component /** Source component */,
            NXOpen::Assemblies::Component * dest_component /** Destination component */,
            NXOpen::SmartObject::UpdateOption update_option /** Update option of smart object */
        );
        /** Creates an Xform based on origin and a direction.
                The direction passed is taken as the X, Y or Z axis
                based on the JA_TYPE_x_y_z_axis passed. 
                The other two directions are evaluated from the cross product 
                to a non-parallel global axis (global X, Y or Z) 
                @return   <br> License requirements : None */
        public: NXOpen::Xform * CreateXform
        (
            NXOpen::Point * origin /** origin of the Xform */,
            NXOpen::XYZAxis axis /** specifies whether the direction passed is
                                                               X, Y or Z of the Xform */,
            NXOpen::Direction * direction /** specifies X direction */,
            NXOpen::Scalar * scale /** scalar factor */,
            NXOpen::SmartObject::UpdateOption update_option /** update option to be used after creating the Xform  */
        );
        /** Creates an Xform based on the delta difference between the source and
                destination components in the explosion.
             @return  Xform  <br> License requirements : None */
        public: NXOpen::Xform * CreateXformWithReverseNormal
        (
            NXOpen::Xform * xform /** XForm to be reversed normal  */,
            NXOpen::SmartObject::UpdateOption update_option /** Update option of smart object */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
