#ifndef NXOpen_GEOMETRICANALYSIS_GAPFLUSHNESSBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_GAPFLUSHNESSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_GapFlushnessBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricAnalysis_GapFlushnessBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class GapFlushnessBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Point;
    class ScCollector;
    class Section;
    namespace GeometricAnalysis
    {
        class _GapFlushnessBuilderBuilder;
        /** GapFlushnessBuilder class   <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisObjectCollection::CreateGapFlushnessBuilder GeometricAnalysis::AnalysisObjectCollection::CreateGapFlushnessBuilder@endlink  <br> */
        class NXOPENCPPEXPORT GapFlushnessBuilder : public Builder
        {
            /** This enum represents the Gap and Flushness Analysis Object evaluation types */
            public: enum EvaluationTypes
            {
                EvaluationTypesAbsolute/** absolute */,
                EvaluationTypesVisual/** visual   */
            };

            /** This enum represents evaluation mode  */
            public: enum EvaluationModes
            {
                EvaluationModesPoint/** at point */,
                EvaluationModesCurveNumber/** along curve and number  */,
                EvaluationModesCurve/** along curve and distance*/
            };

            /** This enum represents cross-section alignment type  */
            public: enum SectionAlignments
            {
                SectionAlignmentsCurve/** curve*/,
                SectionAlignmentsCurveView/** curve in view*/,
                SectionAlignmentsSpecifiedDirection/** specified direction */
            };

            /** This enum represents Label Display Option type  */
            public: enum DisplayOptions
            {
                DisplayOptionsGapOnly/** gap only*/,
                DisplayOptionsFlushnessOnly/** flushness only*/,
                DisplayOptionsBoth/** both */
            };

            /** This enum represents Cross Section Curves Options  */
            public: enum SectionCurveOptions
            {
                SectionCurveOptionsContactCurve/** use contact curve*/,
                SectionCurveOptionsUserDefined/** use user defined curve */
            };

            /** This enum represents panel type  */
            public: enum PanelTypes
            {
                PanelTypesHem/** type hem */,
                PanelTypesFlange/** type flange*/,
                PanelTypesWall/** type wall */
            };

            private: friend class  _GapFlushnessBuilderBuilder;
            protected: GapFlushnessBuilder();
            /**Sets  the sample number  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSampleNumber
            (
                int sampleNumber /** samplenumber */ 
            );
            /**Returns  the sample number  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int SampleNumber
            (
            );
            /**Sets  the show out of range labels  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetShowOutRangeLabels
            (
                bool showOutRangeLabels /** showoutrangelabels */ 
            );
            /**Returns  the show out of range labels  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool ShowOutRangeLabels
            (
            );
            /**Sets  the preview option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPreviewOption
            (
                bool previewOption /** previewoption */ 
            );
            /**Returns  the preview option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool PreviewOption
            (
            );
            /**Sets  the cross section curve option      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCrossSectionCurveOption
            (
                NXOpen::GeometricAnalysis::GapFlushnessBuilder::SectionCurveOptions section_curve_option /** section curve option */ 
            );
            /**Returns  the cross section curve option      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::GapFlushnessBuilder::SectionCurveOptions CrossSectionCurveOption
            (
            );
            /**Returns  the evaluation type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::GapFlushnessBuilder::EvaluationTypes EvaluationType
            (
            );
            /**Sets  the evaluation type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEvaluationType
            (
                NXOpen::GeometricAnalysis::GapFlushnessBuilder::EvaluationTypes evaluation_type /** evaluation type */ 
            );
            /**Sets  the evaluation Method     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEvaluationMode
            (
                NXOpen::GeometricAnalysis::GapFlushnessBuilder::EvaluationModes evaluation_mode /** evaluation mode */ 
            );
            /**Returns  the evaluation Method     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::GapFlushnessBuilder::EvaluationModes EvaluationMode
            (
            );
            /**Sets  the Section Alignment      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSectionAlignment
            (
                NXOpen::GeometricAnalysis::GapFlushnessBuilder::SectionAlignments section_alignment /** section alignment */ 
            );
            /**Returns  the Section Alignment      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::GapFlushnessBuilder::SectionAlignments SectionAlignment
            (
            );
            /**Sets  the display option type     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLabelDisplayOption
            (
                NXOpen::GeometricAnalysis::GapFlushnessBuilder::DisplayOptions display_option /** display option */ 
            );
            /**Returns  the display option type     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::GapFlushnessBuilder::DisplayOptions LabelDisplayOption
            (
            );
            /**Sets  the section alignment vector      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSectionAlignmentDirection
            (
                NXOpen::Direction * dir /** Section Alignment Direction vector */
            );
            /**Returns  the section alignment vector      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Direction * SectionAlignmentDirection
            (
            );
            /**Sets  the evaluation point      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEvaluationPoint
            (
                NXOpen::Point * dir /** Evaluation point */
            );
            /**Returns  the evaluation point      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Point * EvaluationPoint
            (
            );
            /**Returns  the Sample Distance       <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * SampleDistance
            (
            );
            /**Sets  the nominal value  for gap        <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNominalGap
            (
                double nominalGap /** nominalgap */ 
            );
            /**Returns  the nominal value  for gap        <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double NominalGap
            (
            );
            /**Sets  the negative tolerance for gap      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNegativeGapTolerance
            (
                double negativeTolGap /** negativetolgap */ 
            );
            /**Returns  the negative tolerance for gap      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double NegativeGapTolerance
            (
            );
            /**Sets  the positive tolerance for gap       <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPositiveGapTolerance
            (
                double positiveTolGap /** positivetolgap */ 
            );
            /**Returns  the positive tolerance for gap       <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double PositiveGapTolerance
            (
            );
            /**Sets  the nominal value  for flushness       <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNominalFlushness
            (
                double nominalFlush /** nominalflush */ 
            );
            /**Returns  the nominal value  for flushness       <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double NominalFlushness
            (
            );
            /**Sets  the negative tolerance for flushness       <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNegativeFlushnessTolerance
            (
                double negativeTolFlush /** negativetolflush */ 
            );
            /**Returns  the negative tolerance for flushness       <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double NegativeFlushnessTolerance
            (
            );
            /**Sets  the positive tolerance for flushness   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPositiveFlushnessTolerance
            (
                double positiveTolFlush /** positivetolflush */ 
            );
            /**Returns  the positive tolerance for flushness   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double PositiveFlushnessTolerance
            (
            );
            /**Sets  the Label Display Nominal      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNominalLabelDisplayed
            (
                bool showlabel_nominal /** showlabel nominal */ 
            );
            /**Returns  the Label Display Nominal      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsNominalLabelDisplayed
            (
            );
            /**Sets  the Label Display negative tolerance      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNegativeToleranceLabelDisplayed
            (
                bool showlabel_negative /** showlabel negative */ 
            );
            /**Returns  the Label Display negative tolerance      <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsNegativeToleranceLabelDisplayed
            (
            );
            /**Sets  the Label Display positive tolerance     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPositiveToleranceLabelDisplayed
            (
                bool showlabel_positive /** showlabel positive */ 
            );
            /**Returns  the Label Display positive tolerance     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool IsPositiveToleranceLabelDisplayed
            (
            );
            /**Returns  the Base Panel type    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::GapFlushnessBuilder::PanelTypes BasePanelType
            (
            );
            /**Returns  the Second Panel type    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricAnalysis::GapFlushnessBuilder::PanelTypes SecondPanelType
            (
            );
            /**Sets  the Base Panel type    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBasePanelType
            (
                NXOpen::GeometricAnalysis::GapFlushnessBuilder::PanelTypes panel_type /** panel type */ 
            );
            /**Sets  the Second Panel type    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSecondPanelType
            (
                NXOpen::GeometricAnalysis::GapFlushnessBuilder::PanelTypes panel_type /** panel type */ 
            );
            /**Returns  the Base Panel face selection     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::ScCollector * BasePanelFaces
            (
            );
            /**Returns  the Second Panel face selection       <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::ScCollector * SecondPanelFaces
            (
            );
            /**Returns  the Base Panel inner contact section  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * BasePanelInnerContactCurves
            (
            );
            /**Returns  the Base Panel outer contact section   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * BasePanelOuterContactCurves
            (
            );
            /**Returns  the Second Panel inner contact section   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * SecondPanelInnerContactCurves
            (
            );
            /**Returns  the Second Panel outer contact section  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * SecondPanelOuterContactCurves
            (
            );
            /**Returns  the Cross Section Curves  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Section * CrossSectionCurves
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
