#ifndef NXOpen_SKETCH_HXX_INCLUDED
#define NXOpen_SKETCH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Sketch.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IProfile.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Sketch;
    class Arc;
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Curve;
    class DisplayableObject;
    class ErrorList;
    class Expression;
    namespace Features
    {
        class Feature;
    }
    class INXObject;
    class IProfile;
    class IReferenceAxis;
    class ISurface;
    class NXMatrix;
    class NXObject;
    namespace Preferences
    {
        class SketchPreferences;
    }
    class SketchConstraint;
    class SketchDimensionalConstraint;
    class SketchGeometricConstraint;
    class SketchHelpedGeometricConstraint;
    class SketchTangentConstraint;
    class SmartObject;
    class _SketchBuilder;
    /** Represents a sketch  <br> Use the @link SketchCollection SketchCollection@endlink  class to create a sketch. <br> */
    class NXOPENCPPEXPORT Sketch : public DisplayableObject, public virtual IProfile
    {
        /** Represents the status of the sketch */
        public: enum Status
        {
            StatusUnknown/** unknown */ ,
            StatusNotEvaluated/** not evaluated */ ,
            StatusUnderConstrained/** More constraints are needed to fully constrain the sketch */,
            StatusWellConstrained/** The sketch is fully constrained */,
            StatusOverConstrained/** The sketch has more constraints than is needed */,
            StatusInconsistentlyConstrained/** The sketch has conflicting constraints */
        };

        /** Used to indicate whether to reorient the view when the sketch is activated */
        public: enum ViewReorient
        {
            ViewReorientFalse/** Do not reorient view to sketch */,
            ViewReorientTrue/** Reorient view to sketch */
        };

        /** Used to indicate how much the updating should occur */
        public: enum UpdateLevel
        {
            UpdateLevelSketchOnly/** Only update the sketch */,
            UpdateLevelModel/** Update the full model and the sketch */
        };

        /** Indicates the visibility of the constraints */
        public: enum ConstraintVisibility
        {
            ConstraintVisibilityNone/** No constraints visible */,
            ConstraintVisibilitySome/** Certain constraints are visible.
                                                          Equivalent to having the UI show-all-constraints and show-no-constraints toggles off */,
            ConstraintVisibilityAll/** All constraints are visible */
        };

        /** Indicates if the infer constraints will be created or not */
        public: enum CreateInferConstraintSetting
        {
            CreateInferConstraintSettingOn/** Create infer constraints */,
            CreateInferConstraintSettingOff/** Dont create infer constraints */
        };

        /** Used in ConstraintGeometry to indicate what type of point, if any, the geometry is */
        public: enum ConstraintPointType
        {
            ConstraintPointTypeNone/** The geometry is not a point */,
            ConstraintPointTypeStartVertex/** Start vertex (e.g. the start point of a line) */,
            ConstraintPointTypeEndVertex/** End vertex (e.g. the end point of a line) */,
            ConstraintPointTypeArcCenter/** Center of a circle, arc, or ellipse */,
            ConstraintPointTypeSplineDefiningPoint/** A defining point of a spline. */,
            ConstraintPointTypeAnchor/** The anchor point of a conic */
        };

         /** Used by the create geometric constraint methods to indicate what geometry
            the constraint should be applied to.
             @code 
            Examples:

            Assume in these examples that you have a Line object in a variable named line1 and a
            Spline object in a variable named spline1.

            1. To specify an entire line, set
            Geometry = line1
            PointType = None
            SplineDefiningPointIndex = 0

            2. To specify the start vertex of a line, set
            Geometry = line1
            PointType = StartVertex
            SplineDefiningPointIndex = 0

            3. To specify the third defining point of a spline
            Geometry = spline1
            PointType = SplingDefiningPoint
            SplineDefiningPointIndex = 3

            4. To specify the first defining point of a spline
            Geometry = spline1
            PointType = StartVertex
            SplineDefiningPointIndex = 0
                -- OR --
            Geometry = spline1
            PointType = SplingDefiningPoint
            SplineDefiningPointIndex = 1

            Notes on splines:
            - spline defining points are numbered starting from 1
            - to specify the first [or last] defining point of a spline, you can either
            use PointType = SplineDefiningPoint and set SplineDefiningPointIndex
            or use PointType = StartVertex [or EndVertex]
            - SplineDefiningPointIndex is only used when PointType = SplineDefiningPoint
             @endcode 
            */
        public:
        struct ConstraintGeometry
        {
            public: /** geometry */ NXOpen::NXObject * Geometry;
            public: /** point type */ NXOpen::Sketch::ConstraintPointType PointType;
            public: /** Ignored unless PointType is SplineDefiningPoint.
                                                     Spline control points are numbered starting from 1 */int SplineDefiningPointIndex;
            public: ConstraintGeometry() :
                Geometry(),
                PointType((NXOpen::Sketch::ConstraintPointType)0),
                SplineDefiningPointIndex()
            {
            }
            /** Constructor for the ConstraintGeometry struct. */ 
            public: ConstraintGeometry(NXOpen::NXObject * INIT_geometry /** geometry */ , NXOpen::Sketch::ConstraintPointType INIT_point_type /** point type */ , int INIT_spline_defining_point_index /** Ignored unless PointType is SplineDefiningPoint.
                                                     Spline control points are numbered starting from 1 */) :
                Geometry(INIT_geometry),
                PointType(INIT_point_type),
                SplineDefiningPointIndex(INIT_spline_defining_point_index)
            {
            }
        };

        /** Used in @link Sketch::DimensionGeometry Sketch::DimensionGeometry@endlink  to indicate what type of
            geometry to use */
        public: enum AssocType
        {
            AssocTypeNone/** Use the entire geometric item, as opposed to a point */,
            AssocTypeStartPoint/** Start point. E.g. the start point of a line */,
            AssocTypeEndPoint/** End point. E.g. the start point of a line */,
            AssocTypeArcCenter/** Center of an arc, circle, or ellipse */,
            AssocTypeTangency/** Create the dimension tangent to the geometric item */,
            AssocTypeCurvePoint/** A point on a spline */,
            AssocTypeAnchorPoint/** The anchor of a conic */,
            AssocTypeMidpoint/** The midpoint of a curve */
        };

         /** Used in the dimension creation methods to indicate what geometry to
            create the dimension on.

             @code 
            Examples:
            1. To specify the start point of line1
            Geometry = line1
            AssocType = StartPoint
            AssocValue = 0
             @endcode 
            */
        public:
        struct DimensionGeometry
        {
            public: /** geometry */ NXOpen::NXObject * Geometry;
            public: /** assoc type */ NXOpen::Sketch::AssocType AssocType;
            public: /** See table for meaning.
             @code 
            The AssocValue has the following meanings:
            AssocType           AssocValue meaning
            ----------          -------------------
            Tangency            parameter percentage (0 - 100) (used to find approximate tangent point)
            CurvePoint          the index number of the defining point of the spline(starting from 1)
            all else            not used
             @endcode 
                                     */int AssocValue;
            public: /** help point */NXOpen::Point3d HelpPoint;
            public: /** The view the geometry is dependent on, if any */NXOpen::NXObject * View;
            public: DimensionGeometry() :
                Geometry(),
                AssocType((NXOpen::Sketch::AssocType)0),
                AssocValue(),
                HelpPoint(),
                View()
            {
            }
            /** Constructor for the DimensionGeometry struct. */ 
            public: DimensionGeometry(NXOpen::NXObject * INIT_geometry /** geometry */ , NXOpen::Sketch::AssocType INIT_assoc_type /** assoc type */ , int INIT_assoc_value /** See table for meaning.
             @code 
            The AssocValue has the following meanings:
            AssocType           AssocValue meaning
            ----------          -------------------
            Tangency            parameter percentage (0 - 100) (used to find approximate tangent point)
            CurvePoint          the index number of the defining point of the spline(starting from 1)
            all else            not used
             @endcode 
                                     */, NXOpen::Point3d INIT_help_point /** help point */, NXOpen::NXObject * INIT_view /** The view the geometry is dependent on, if any */) :
                Geometry(INIT_geometry),
                AssocType(INIT_assoc_type),
                AssocValue(INIT_assoc_value),
                HelpPoint(INIT_help_point),
                View(INIT_view)
            {
            }
        };

        /** Used in ConstraintHelp to indicate what type of help it is */
        public: enum ConstraintGeometryHelpType
        {
            ConstraintGeometryHelpTypePoint/** point */ ,
            ConstraintGeometryHelpTypeParameter/** parameter */ 
        };

         /** Used by several constraint creation methods that need a help point or parameter
            to indicate how to create the constraint.  The manner that the help point is used
            depends on the type of constraint */
        public:
        struct ConstraintGeometryHelp
        {
            public: /** Point or Parameter */NXOpen::Sketch::ConstraintGeometryHelpType Type;
            public: /** Ignored unless type is Point */NXOpen::Point3d Point;
            public: /** Ignored unless type is Parameter.
                                      Represents a parameter, typically along a curve */double Parameter;
            public: ConstraintGeometryHelp() :
                Type((NXOpen::Sketch::ConstraintGeometryHelpType)0),
                Point(),
                Parameter()
            {
            }
            /** Constructor for the ConstraintGeometryHelp struct. */ 
            public: ConstraintGeometryHelp(NXOpen::Sketch::ConstraintGeometryHelpType INIT_type /** Point or Parameter */, NXOpen::Point3d INIT_point /** Ignored unless type is Point */, double INIT_parameter /** Ignored unless type is Parameter.
                                      Represents a parameter, typically along a curve */) :
                Type(INIT_type),
                Point(INIT_point),
                Parameter(INIT_parameter)
            {
            }
        };

        /** Represents the class of the constraint.  There are two classes of constraints: geometric and dimension */
        public: enum ConstraintClass
        {
            ConstraintClassNotConstraint/** not constraint */ ,
            ConstraintClassAny/** Used in query methods that filter by constraint class
                                                    to select both types of constraints */,
            ConstraintClassGeometric/** A non-dimension constraint */,
            ConstraintClassDimension/** A dimensional constraint */
        };

        /** Represents the type of constraint */
        public: enum ConstraintType
        {
            ConstraintTypeNoCon/** Used in query methods that filter by constraint type
                                                    to select any type of constraint */,
            ConstraintTypeFixed/** fixed */ ,
            ConstraintTypeHorizontal/** horizontal */ ,
            ConstraintTypeVertical/** vertical */ ,
            ConstraintTypeParallel/** parallel */ ,
            ConstraintTypePerpendicular/** perpendicular */ ,
            ConstraintTypeCollinear/** collinear */ ,
            ConstraintTypeEqualLength/** equal length */ ,
            ConstraintTypeEqualRadius/** equal radius */ ,
            ConstraintTypeConstantLength/** constant length */ ,
            ConstraintTypeConstantAngle/** constant angle */ ,
            ConstraintTypeCoincident/** coincident */ ,
            ConstraintTypeConcentric/** concentric */ ,
            ConstraintTypeMirror/** mirror */ ,
            ConstraintTypePointOnCurve/** point on curve */ ,
            ConstraintTypeMidpoint/** midpoint */ ,
            ConstraintTypeTangent/** tangent */ ,
            ConstraintTypeRadiusDim/** radius dim */ ,
            ConstraintTypeDiameterDim/** diameter dim */ ,
            ConstraintTypeHorizontalDim/** horizontal dim */ ,
            ConstraintTypeVerticalDim/** vertical dim */ ,
            ConstraintTypeParallelDim/** parallel dim */ ,
            ConstraintTypePerpendicularDim/** perpendicular dim */ ,
            ConstraintTypeAngularDim/** system will decide if it is major or minor */,
            ConstraintTypeReservedCon1/** Do not use */,
            ConstraintTypeReservedCon2/** Do not use */,
            ConstraintTypeReservedCon3/** Do not use */,
            ConstraintTypeReservedCon4/** Do not use */,
            ConstraintTypeReservedCon5/** Do not use */,
            ConstraintTypeReservedCon6/** Do not use */,
            ConstraintTypePointOnString/** point on string */ ,
            ConstraintTypeSlope/** slope */ ,
            ConstraintTypeUniformScaled/** uniform scaled */ ,
            ConstraintTypeNonUniformScaled/** non uniform scaled */ ,
            ConstraintTypeAssocTrim/** Limited support */,
            ConstraintTypeAssocOffset/** Limited support */,
            ConstraintTypePerimeterDim/** perimeter dim */ ,
            ConstraintTypeMinorAngularDim/** minor angular dim */ ,
            ConstraintTypeMajorAngularDim/** major angular dim */ ,
            ConstraintTypeLastConType/** The last constraint type indicator;
                                            NOT to be used. */
        };

        /** Used by @link CreateDimension CreateDimension@endlink , @link CreateRadialDimension CreateRadialDimension@endlink 
                @link CreateDiameterDimension CreateDiameterDimension@endlink  and @link CreatePerimeterDimension CreatePerimeterDimension@endlink 
                to determine whether to create driving or reference dimension */
        public: enum DimensionOption
        {
            DimensionOptionCreateAsDriving/** Create dimension as driving   */,
            DimensionOptionCreateAsReference/** Create dimension as reference */
        };

        /** Used by @link AddGeometry AddGeometry@endlink  to determine whether to treat an
            ellipse as an ellipse or generic conic when adding the curve to
            a sketch.  Treating an ellipse as a conic means that the ellipse
            will be given an anchor point.  This affects, among other things,
            how the ellipse behaves when it is dragged.

            In order for an ellipse to be treated as a conic, its
            end angle minus its start angle must be less than 180 degrees.
            */
        public: enum AddEllipseOption
        {
            AddEllipseOptionTreatAsEllipse/** treat as ellipse */ ,
            AddEllipseOptionTreatAsConic/** treat as conic */ 
        };

        /** Indicates whether the input curves should be trimmed when doing a fillet */
        public: enum TrimInputOption
        {
            TrimInputOptionFalse/** Do not trim the input curves */,
            TrimInputOptionTrue/** Trim the input curves */
        };

        /** Indicates whether the 3rd curve should be deleted when doing a 3 curve fillet */
        public: enum DeleteThirdCurveOption
        {
            DeleteThirdCurveOptionFalse/** Do not delete the 3rd curve */,
            DeleteThirdCurveOptionTrue/** Delete the 3rd curve */
        };

        /** Used in fillet to indicate whether a radius dimension should be created
            by the fillet */
        public: enum CreateDimensionOption
        {
            CreateDimensionOptionFalse/** Do not create a radius dimension */,
            CreateDimensionOptionTrue/** Create a radius dimension */
        };

        /** Indicates whether the alternate solution should be used instead of the regular solution.
                The alternate solution for an arc is the portion of the full circle that is left out of the
                regular solution.  For example, if the regular solution is an arc that goes from 0 to 45 degrees,
                the alternate solution will be an arc with the same center and origin but that goes from 45 degrees to 360.
                */
        public: enum AlternateSolutionOption
        {
            AlternateSolutionOptionFalse/** Use the regular solution */,
            AlternateSolutionOptionTrue/** Use the alternate solution */
        };

        /** Specifies the plane type used for a Sketch */
        public: enum PlaneOption
        {
            PlaneOptionExistingPlane/** existing plane */ ,
            PlaneOptionNewPlane/** new plane */ ,
            PlaneOptionNewCsys/** new csys */ 
        };

        /** Used when adding a point or curve to a sketch.
            Specifies whether to infer coincident constraints between the geometry that already exists
            in the sketch and the geometry being added to the sketch.  If you choose to infer constraints,
            coincident constraints will be created if an end point of the geometry being added is at
            the same location (within system tolerance) as another end point in the sketch.
            */
        public: enum InferConstraintsOption
        {
            InferConstraintsOptionInferNoConstraints/** Do not infer constraints */,
            InferConstraintsOptionInferCoincidentConstraints/** Infer constraints */
        };

        private: friend class  _SketchBuilder;
        protected: Sketch();
        /** Deletes objects from the sketch  @return  List of errors encountered during the delete  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::ErrorList * DeleteObjects
        (
            const std::vector<NXOpen::NXObject *> & objects /** Objects to be deleted */
        );
        /**
            Reattaches a sketch.
            For documentation for the parameters for this method, see the documentation for
            @link SketchCollection::CreateSketch SketchCollection::CreateSketch@endlink 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Reattach
        (
            NXOpen::ISurface * attachment_plane /** attachment plane */ ,
            NXOpen::IReferenceAxis * reference_axis /** reference axis */ ,
            const NXOpen::Vector3d & reference_direction /** reference direction */ ,
            NXOpen::AxisOrientation reference_axis_orientation /** reference axis orientation */ ,
            NXOpen::Sense reference_axis_sense /** reference axis sense */ ,
            NXOpen::PlaneNormalOrientation normal_orientation /** normal orientation */ ,
            const NXOpen::Point3d & local_coordinate_system_origin /** Origin of the sketch's local coordinate system */
        );
        /** Activates the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Activate
        (
            NXOpen::Sketch::ViewReorient orient_view /** Indicates whether to orient the view to the sketch during activation */
        );
        /** Deactivates the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Deactivate
        (
            NXOpen::Sketch::ViewReorient orient_view /** Indicates whether to orient the view to the model during deactivation */,
            NXOpen::Sketch::UpdateLevel update_level /** Indicates whether just the sketch should be updated or the entire model */
        );
        /**Returns  true if the sketch is active  <br> License requirements : None */
        public: bool IsActive
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link IsActive() IsActive@endlink instead.
        @deprecated
        */
        public: bool GetIsActive
        (
        ) { return this->IsActive(); }
        /**
            Sets the reference direction of the sketch.
            For documentation for the parameters for this method, see the documentation for
            @link SketchCollection::CreateSketch SketchCollection::CreateSketch@endlink .
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetReferenceDirection
        (
            NXOpen::IReferenceAxis * reference_axis /** reference axis */ ,
            const NXOpen::Vector3d & reference_direction /** reference direction */ ,
            NXOpen::AxisOrientation reference_axis_orientation /** reference axis orientation */ ,
            NXOpen::Sense reference_axis_sense /** reference axis sense */ 
        );
        /** Flips the reference direction of the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void FlipReferenceDirection
        (
        );
        /** Flips the outward normal vector of the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void FlipNormal
        (
        );
        /**Returns  the plane that the sketch is attached to  <br> License requirements : None */
        public: NXOpen::ISurface * AttachPlane
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link AttachPlane() AttachPlane@endlink instead.
        @deprecated
        */
        public: NXOpen::ISurface * GetAttachPlane
        (
        ) { return this->AttachPlane(); }
        /** Gets the reference direction of the sketch  @return   <br> License requirements : None */
        public: NXOpen::Vector3d GetReferenceDirection
        (
            NXOpen::IReferenceAxis ** reference_axis /**
                                    An edge, datum axis, datum plane, or face that the sketch uses as a reference.
                                    May be NULL. */,
            NXOpen::AxisOrientation* reference_axis_orientation /** Indicates whether the reference axis is horizontal or vertical */,
            NXOpen::Sense* reference_axis_sense /** If reference axis is an edge or datum axis,
                                       this parameter indicates whether the reference axis is
                                       in the same direction as the edge or datum axis or in the opposite
                                       direction.  If reference axis is not an edge or datum axis, this parameter is not used. */
        );
        /**Returns  the location of the origin of the local coordinate system for the sketch  <br> License requirements : None */
        public: NXOpen::Point3d Origin
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Origin() Origin@endlink instead.
        @deprecated
        */
        public: NXOpen::Point3d GetOrigin
        (
        ) { return this->Origin(); }
        /**Returns  the orientation matrix of the local coordinate system of the sketch  <br> License requirements : None */
        public: NXOpen::NXMatrix * Orientation
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Orientation() Orientation@endlink instead.
        @deprecated
        */
        public: NXOpen::NXMatrix * GetOrientation
        (
        ) { return this->Orientation(); }
        /**Returns  the visibility of the constraints in the sketch  <br> License requirements : None */
        public: NXOpen::Sketch::ConstraintVisibility VisibilityOfConstraints
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link VisibilityOfConstraints() VisibilityOfConstraints@endlink instead.
        @deprecated
        */
        public: NXOpen::Sketch::ConstraintVisibility GetVisibilityOfConstraints
        (
        ) { return this->VisibilityOfConstraints(); }
        /**Sets  the visibility of the constraints in the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetVisibilityOfConstraints
        (
            NXOpen::Sketch::ConstraintVisibility visibility /** visibility */ 
        );
        /**Returns  the toggle that controls the creation of infer constraints in sketch  <br> License requirements : None */
        public: NXOpen::Sketch::CreateInferConstraintSetting CreateInferConstraintsSetting
        (
        );
        /**Sets  the toggle that controls the creation of infer constraints in sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetCreateInferConstraintsSetting
        (
            NXOpen::Sketch::CreateInferConstraintSetting create_infer_con /** create infer con */ 
        );
        /** Creates a coincident constraint  @return  The coincident constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateCoincidentConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom1 /** Must be a vertex */,
            const NXOpen::Sketch::ConstraintGeometry & geom2 /** Must be a vertex */
        );
        /** Creates a fixed constraint  @return  The fixed constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateFixedConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Can be any curve, point, or vertex in the sketch */
        );
        /** Creates enough fixed constraints on the curve and all of its vertices such that the geometry is fully
                fixed without any redundant fixed constraints.  @return  The fixed constraints  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::SketchGeometricConstraint *> CreateFullyFixedConstraints
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Can be any curve, point, or vertex in the sketch */
        );
        /** Creates a horizontal constraint  @return  The horizontal constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateHorizontalConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Must be a line */
        );
        /** Creates a vertical constraint  @return  The vertical constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateVerticalConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom /** Must be a line */
        );
        /** Creates a tangent constraint.
           Note: the input constraint geometries cannot both be linear.  @return  The tangent constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchTangentConstraint * CreateTangentConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & geom1 /** A curve, edge, or datum axis */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom1_help /** geom1 help */ ,
            const NXOpen::Sketch::ConstraintGeometry & geom2 /** A curve, edge, or datum axis */,
            const NXOpen::Sketch::ConstraintGeometryHelp & geom2_help /** geom2 help */ 
        );
        /** Creates a constant length constraint  @return  The constant length constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateConstantLengthConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom /** Must be a line */
        );
        /** Creates a constant angle constraint  @return  The constant angle constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateConstantAngleConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom /** Must be a line */
        );
        /** Creates a uniform scale constraint  @return  The uniform scale constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateUniformScaledConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom /** Must be a spline */
        );
        /** Creates a non-uniform scale constraint  @return  The non-uniform scale constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateNonUniformScaledConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom /** Must be a spline */
        );
        /** Creates a parallel constraint.
            A parallel constraint can only be created between one of the following pairs:
            (line, line or linear edge), (line, datum axis or datum plane), (line or linear edge, ellipse),
            (line, ellipse or elliptical edge), (ellipse, ellipse or elliptical edge).
             @return  The parallel constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateParallelConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** First input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** Second input geometry for the constraint */
        );
        /** Creates a perpendicular constraint.
            A perpendicular constraint can only be created between one of the following pairs:
            (line, line or linear edge), (line, datum axis or datum plane), (line or linear edge, ellipse),
            (line, ellipse or elliptical edge), (ellipse, ellipse or elliptical edge).
             @return  The perpendicular constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreatePerpendicularConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** First input geometry for the constraint */,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** Second input geometry for the constraint */
        );
        /** Creates a collinear constraint.
            One of the input constraint geometries must be a line.  @return  The collinear constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateCollinearConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** Must be a line, linear edge, datum axis, or datum plane */,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** Must be a line, linear edge, datum axis, or datum plane */
        );
        /** Creates an equal length constraint.
            One of the input constraint geometries must be a line.  @return  The equal length constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateEqualLengthConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** Must be a line or linear edge */,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** Must be a line or linear edge */
        );
        /** Creates an equal radius constraint.
           One of the input constraint geometries must be a curve.  @return  The equal radius constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateEqualRadiusConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** Must be an arc or edge shaped as an arc */,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** Must be an arc or edge shaped as an arc */
        );
        /** Creates a concentric constraint.
            One of the input constraint geometries must be a curve.  @return  The concentric constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateConcentricConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** Must be an arc or ellipse or edge shaped as an arc or ellipse */,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** Must be an arc or ellipse or edge shaped as an arc or ellipse */
        );
        /** Creates a midpoint constraint.
            One of the input constraint geometries must be a vertex and the other
            must be a curve or edge.  @return  The midpoint constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateMidpointConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** con geom2 */ 
        );
        /** Creates a slope constraint.
            One of the input constraint geometries must a spline defining point.
            The other must be datum axis, datum plane, or a curve or edge shaped as a line, arc, ellipse, conic, or spline.  @return  The slope constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchGeometricConstraint * CreateSlopeConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** con geom2 */ 
        );
        /** Creates a point on curve constraint.
            One of the input geometries must be a vertex and the other must be a
            curve, edge, datum axis, or datum plane.  @return  The point on curve constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnCurveConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** con geom1 */ ,
            const NXOpen::Sketch::ConstraintGeometry & con_geom2 /** con geom2 */ ,
            const NXOpen::Sketch::ConstraintGeometryHelp & help /** help */ 
        );
        /**
            Creates a point on string constraint.
             @return  The point on string constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnStringConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** Must be a vertex */,
            const std::vector<NXOpen::Curve *> & curves_in_string /** Must all be part of the same string.
                                                                                                      (You can create a string of curves through the UI
                                                                                                      through the Edit -\> Project command.) */,
            const NXOpen::Sketch::ConstraintGeometryHelp & help_data /** help data */ ,
            int curve_which_help_param_applies_to /** If helpData is a parameter, this parameter indicates
                       which curve in the curvesInString that the help parameter applies to.  Otherwise, this parameter is not used */
        );
        /**
            Creates a point on string constraint.  The string is specified using a single curve
            in the string.  The constraint is created on the entire string
            that curveInString belongs to.
             @return  The point on string constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchHelpedGeometricConstraint * CreatePointOnStringConstraint
        (
            const NXOpen::Sketch::ConstraintGeometry & con_geom1 /** Must be a vertex */,
            NXOpen::Curve * curve_in_string /** A curve in the string that you want to create the constraint on.
                                                                  The constraint is created on the entire string
                                                                  that this curve belongs to.
                                                                  (You can create a string of curves through the UI
                                                                  through the Edit -\> Project command.) */,
            const NXOpen::Sketch::ConstraintGeometryHelp & help_data /** help data */ 
        );
        /** Creates a dimension between two geometric objects.  Do not use for radial, diameter, or
            perimeter dimensions.  To create a radial or diameter constraint,
            use @link CreateRadialDimension CreateRadialDimension@endlink  or @link CreateDiameterDimension CreateDiameterDimension@endlink .
            To create a perimeter dimension, use @link CreatePerimeterDimension CreatePerimeterDimension@endlink   @return  The dimensional constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateDimension
        (
            NXOpen::Sketch::ConstraintType dim_type /** Must be one of the dimension types and should not
                                                        be a radial, diametral, or perimeter dimension */,
            const NXOpen::Sketch::DimensionGeometry & dim_object1 /** First input geometry */,
            const NXOpen::Sketch::DimensionGeometry & dim_object2 /** Second input geometry */,
            const NXOpen::Point3d & dim_origin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a dimension between two geometric objects.  Do not use for radial, diameter, or
            perimeter dimensions.  To create a radial or diameter constraint,
            use @link CreateRadialDimension CreateRadialDimension@endlink  or @link CreateDiameterDimension CreateDiameterDimension@endlink .
            To create a perimeter dimension, use @link CreatePerimeterDimension CreatePerimeterDimension@endlink . This function
            takes in an argument to create the dimension as driving or reference.  @return  The dimensional constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateDimension
        (
            NXOpen::Sketch::ConstraintType dim_type /** Must be one of the dimension types and should not
                                                        be a radial, diametral, or perimeter dimension */,
            const NXOpen::Sketch::DimensionGeometry & dim_object1 /** First input geometry */,
            const NXOpen::Sketch::DimensionGeometry & dim_object2 /** Second input geometry */,
            const NXOpen::Point3d & dim_origin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption ref_dim /** option for creating driving or reference dimension */
        );
        /** Creates a radial dimension constraint  @return  The radial dimension constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateRadialDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dim_object1 /** Should be an arc */,
            const NXOpen::Point3d & dim_origin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a radial dimension constraint. Accepts a flag to create the dimension as driving or reference  @return  The radial dimension constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateRadialDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dim_object1 /** Should be an arc */,
            const NXOpen::Point3d & dim_origin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption ref_dim /** option for creating driving or reference dimension */
        );
        /** Creates a diameter dimension constraint  @return  The diametral dimension constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateDiameterDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dim_object1 /** Should be an arc */,
            const NXOpen::Point3d & dim_origin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Creates a diameter dimension constraint. Accepts a flag to create the dim as driving or reference  @return  The diametral dimension constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreateDiameterDimension
        (
            const NXOpen::Sketch::DimensionGeometry & dim_object1 /** Should be an arc */,
            const NXOpen::Point3d & dim_origin /** The location where the dimension should be placed */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */,
            NXOpen::Sketch::DimensionOption ref_dim /** option for creating driving or reference dimension */
        );
        /** Creates a perimeter dimension constraint  @return  The perimeter dimensional constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchDimensionalConstraint * CreatePerimeterDimension
        (
            const std::vector<NXOpen::Curve *> & curves /** The curves that form the perimeter */,
            const NXOpen::Point3d & dim_origin /** Not currently used */,
            NXOpen::Expression * expression /** Defining expression for the dimension.  Can be NULL */
        );
        /** Updates the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Update
        (
        );
        /** Updates the given set of geometries in the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void Update
        (
            const std::vector<NXOpen::NXObject *> & geoms /** Geoms that need to be updated */
        );
        /** Updates the geometry display without updating the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateGeometryDisplay
        (
        );
        /** Updates the geometry display of given set of geoms without updating the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateGeometryDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Updates the dimension display without updating the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateDimensionDisplay
        (
        );
        /** Updates the dimension display of given set of geoms without updating the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateDimensionDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Updates the dimension display of given set of dims without updating the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateDimensionDisplay
        (
            const std::vector<NXOpen::NXObject *> & dims /** Dims for which cons must be re-displayed */
        );
        /** Updates the constraint display without updating the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateConstraintDisplay
        (
        );
        /** Updates the constraint display of given set of geoms without updating the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void UpdateConstraintDisplay
        (
            const std::vector<NXOpen::SmartObject *> & geoms /** Geoms for which cons must be re-displayed */
        );
        /** Adds a curve or point to the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void AddGeometry
        (
            NXOpen::DisplayableObject * crv /** Must be a curve or point */,
            NXOpen::Sketch::InferConstraintsOption infer_coincident_constraints /** Whether to automatically create coincident constraints
                                                         when adding the geometry.  If this flag is true and there exists
                                                         another curve or point in the sketch that has a vertex that
                                                         is at the same location (within system tolerance)
                                                         as one of the vertices for crv, a coincident constraint
                                                         will be created */
        );
        /** Adds a curve or point to the sketch.  Infers coincident constraints with other geometry
            in the sketch  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void AddGeometry
        (
            NXOpen::DisplayableObject * crv /** Must be a curve or point */
        );
        /** Adds a curve or point to a sketch.
              <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void AddGeometry
        (
            NXOpen::Curve * crv /** Must be a curve or point */,
            NXOpen::Sketch::InferConstraintsOption infer_coincident_constraints /** Whether to automatically create coincident constraints
                                                         when adding the geometry.  If this flag is true and there exists
                                                         another curve or point in the sketch that has a vertex that
                                                         is at the same location (within system tolerance)
                                                         as one of the vertices for crv, a coincident constraint
                                                         will be created */,
            NXOpen::Sketch::AddEllipseOption ellipse_option /** If you are adding an ellipse to the sketch, this parameter
                                                                    indicates whether the ellipse should be treated as an
                                                                    ellipse or general conic.  If you are not adding an ellipse, the
                                                                    option is ignored.
                                                                    See the documentation for @link Sketch::AddEllipseOption Sketch::AddEllipseOption@endlink  for more details.
                                                                    The default value is
                                                                    @link Sketch::AddEllipseOptionTreatAsEllipse Sketch::AddEllipseOptionTreatAsEllipse@endlink .
                                                                    In order to treat an ellipse as a conic, its end angle minus its
                                                                    start angle must be less than 180 degrees.*/
        );
        /** Gets the status of the sketch and the number of degrees of freedom that remain in the sketch.
            The status of the sketch indicates whether the sketch is fully constrained or under, over, or
            inconsistently constrained.  @return  The sketch's status, which indicates how well constrained the sketch is  <br> License requirements : None */
        public: NXOpen::Sketch::Status GetStatus
        (
            int* dof_needed /** The number of degrees of freedom left in the sketch */
        );
        /** Gets all constraints in the sketch of a particular type  @return  All the constraints in the sketch of the specified type  <br> License requirements : None */
        public: std::vector<NXOpen::SketchConstraint *> GetAllConstraintsOfType
        (
            NXOpen::Sketch::ConstraintClass con_class /** Optional filter.  Use @link Sketch::ConstraintClassAny Sketch::ConstraintClassAny@endlink  if you
                                                          do not want to filter by constraint class */,
            NXOpen::Sketch::ConstraintType con_type /** Optional filter.  Use @link Sketch::ConstraintTypeNoCon Sketch::ConstraintTypeNoCon@endlink  if you
                                                        do not want to filter by constraint type */
        );
        /** Gets all the constraints associated with a particular geometric item  @return  All the constraints associated with the geometry that is input  <br> License requirements : None */
        public: std::vector<NXOpen::SketchConstraint *> GetConstraintsForGeometry
        (
            NXOpen::SmartObject * geometry /** Must be a curve or point */,
            NXOpen::Sketch::ConstraintClass con_class /** Optional filter.  Use @link Sketch::ConstraintClassAny Sketch::ConstraintClassAny@endlink  if you
                                                          do not want to filter by constraint class */
        );
        /** Returns all the expressions in the sketch  @return  All the expressions in the sketch  <br> License requirements : None */
        public: std::vector<NXOpen::Expression *> GetAllExpressions
        (
        );
        /** Returns all the curves and points in the sketch  @return  All the curves and points in the sketch  <br> License requirements : None */
        public: std::vector<NXOpen::NXObject *> GetAllGeometry
        (
        );
        /**Returns  a flag indicating whether the degree of freedom arrows are currently being
            displayed  <br> License requirements : None */
        public: bool DOFDisplay
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link DOFDisplay() DOFDisplay@endlink instead.
        @deprecated
        */
        public: bool GetDOFDisplay
        (
        ) { return this->DOFDisplay(); }
        /**Sets  a flag indicating whether the degree of freedom arrows are currently being
            displayed  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetDOFDisplay
        (
            bool display_dof /** display dof */ 
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            const NXOpen::Point3d & help_point1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & help_point2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption do_trim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::CreateDimensionOption create_radius_dim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternate_solution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Fillets curves and creates appropriate constraints.
            If the input curves have mirror constraints, the fillet is also performed on the mirror curves.
             @return  The fillet arcs that are created.
                                 If the input curves do not have any mirror constraints, the number of fillet arcs will always be one.
                                 If the input curves have mirror constraints, fillets will be created on the mirrored curves,
                                 and all the fillet arcs that were created are returned  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::Arc *> Fillet
        (
            NXOpen::Curve * curve1 /** First curve for the fillet */,
            NXOpen::Curve * curve2 /** Second curve for the fillet */,
            NXOpen::Curve * curve3 /** Third curve for the fillet */,
            const NXOpen::Point3d & help_point1 /** Should be a point on the first curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & help_point2 /** Should be a point on the second curve.  Indicates where the fillet should be created */,
            const NXOpen::Point3d & help_point3 /** Should be a point on the third curve.  Indicates where the fillet should be created */,
            double radius /** Radius of the fillet */,
            NXOpen::Sketch::TrimInputOption do_trim /** Indicates whether the input curves should get trimmed by the fillet */,
            NXOpen::Sketch::DeleteThirdCurveOption do_delete /** Indicates whether the third curve should be deleted */,
            NXOpen::Sketch::CreateDimensionOption create_radius_dim /** Indicates whether a radius dimension should be created */,
            NXOpen::Sketch::AlternateSolutionOption alternate_solution /** Indicates whether the alternate solution should be used instead of the regular solution.
                                                                                The alternate solution for an arc is the portion of the full circle that is left out of the
                                                                                regular solution.*/,
            std::vector<NXOpen::SketchConstraint *> & constraints /** The constraints that were created by the fillet.
                                                                                                    If the input curves get trimmed, coincident and tangent constraints are created.
                                                                                                    If the input curves do not get trimmed, point on curve and tangent constraints are created. */
        );
        /** Creates a reflection of the input geometry.
                 <br> 
                This API is now deprecated.
                Please use @link SketchMirrorBuilder SketchMirrorBuilder@endlink  instead.
                 <br> 
             @return  The mirrored geometry that was created 
         @deprecated Deprecated in NX5 <br> 
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::SmartObject *> MirrorObjects
        (
            NXOpen::DisplayableObject * centerline /** Axis of reflection for the mirror. Must be a linear curve, edge, datum axis or datum plane */,
            const std::vector<NXOpen::SmartObject *> & objects_to_mirror /** Points and curves to mirror.  None of the curves may be used as a centerline for another mirror operation */
        );
        /** Creates a reflection of the input geometry.  @return  The mirrored geometry that was created 
         @deprecated Deprecated in NX4 <br> 
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::NXObject *> MirrorObjects
        (
            NXOpen::DisplayableObject * centerline /** Axis of reflection for the mirror. Must be a linear curve, edge, datum axis or datum plane */,
            const std::vector<NXOpen::NXObject *> & objects_to_mirror /** Points and curves to mirror.  None of the curves may be used as a centerline for another mirror operation */
        );
        /**Returns  the feature associated with this sketch  <br> License requirements : None */
        public: NXOpen::Features::Feature * Feature
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Feature() Feature@endlink instead.
        @deprecated
        */
        public: NXOpen::Features::Feature * GetFeature
        (
        ) { return this->Feature(); }
        /** Deletes all geometric constraints associated with the object and all of its
                vertices. Converts all the driving dimensions associated with the object and its
                vertices to reference dimensions.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void DeleteConstraintsOnGeometries
        (
            const std::vector<NXOpen::NXObject *> & objects /** Objects whose constraints needs to be deleted */
        );
        /** Creates copies of input objects and constraints between these objects.  @return  Copies of objects  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::NXObject *> CopyObjects
        (
            const std::vector<NXOpen::NXObject *> & input_objects /** Objects to be copied */
        );
        /** Unblanks dimensions in the active sketch associated with the input sketch geometry  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void ShowDimensions
        (
            const std::vector<NXOpen::DisplayableObject *> & input_objects /** Geometry and groups in active sketch */
        );
        /** Blanks dimensions in the active sketch associated with the input sketch geometry.   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void HideDimensions
        (
            const std::vector<NXOpen::DisplayableObject *> & input_objects /** Geometry and groups in active sketch */
        );
        /** Creates Automatic Constraints on input set of geometries.  @return  Array of deduced constraints  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: std::vector<NXOpen::SketchConstraint *> AutoConstrain
        (
            double linear_tolerance /** Capture Distance           */,
            double angular_tolerance /** Capture Angle              */,
            bool allow_remote_constraints /** Allow remote constraints   */,
            const std::vector<NXOpen::SmartObject *> & geometries /** Array of geometries     */,
            const std::vector<NXOpen::Sketch::ConstraintType> & autoconstraint_types /** Constraint type array      */
        );
        /** Makes the sketch placement face and directional reference internal to the sketch
               if they are both datums referenced only by the sketch.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void MakeDatumsInternal
        (
        );
        /** Makes the internal sketch placement face and directional reference datums external.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void MakeDatumsExternal
        (
        );


        private: NXOpen::Preferences::SketchPreferences *preferences;
        /** Contains preferences for the sketch */
        public: NXOpen::Preferences::SketchPreferences *Preferences()
        {
            return preferences;
        }
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Preferences() Preferences@endlink instead.
        @deprecated
        */
        public: NXOpen::Preferences::SketchPreferences *GetPreferences() { return Preferences(); }
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
