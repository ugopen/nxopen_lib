#ifndef NXOpen_ARC_HXX_INCLUDED
#define NXOpen_ARC_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Arc.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Conic.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class Arc;
    class Conic;
    class NXMatrix;
    class _ArcBuilder;
    /** Represents an arc curve.  The start and end angles of the arc are
        measured relative to the X and Y axes of the orientation matrix.  <br> To create a new instance of this class, use @link CurveCollection::CreateArc CurveCollection::CreateArc@endlink  <br> */
    class NXOPENCPPEXPORT Arc : public Conic
    {
        private: friend class  _ArcBuilder;
        protected: Arc();
        /**Returns  the radius of the arc.  <br> License requirements : None */
        public: double Radius
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link Radius() Radius@endlink instead.
        @deprecated
        */
        public: double GetRadius
        (
        ) { return this->Radius(); }
        /**Returns  the start angle of the arc.  <br> License requirements : None */
        public: double StartAngle
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link StartAngle() StartAngle@endlink instead.
        @deprecated
        */
        public: double GetStartAngle
        (
        ) { return this->StartAngle(); }
        /**Returns  the angle of the arc.  <br> License requirements : None */
        public: double EndAngle
        (
        );
        /** <b>Deprecated</b>:<br>
        &nbsp;&nbsp;&nbsp;Use @link EndAngle() EndAngle@endlink instead.
        @deprecated
        */
        public: double GetEndAngle
        (
        ) { return this->EndAngle(); }
        /** Sets the radius of the arc.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetRadius
        (
            double radius /** radius */ 
        );
        /** Sets the center, radius, start and end angles, and orientation
                matrix of the arc.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetParameters
        (
            double radius /** The radius must be greater than zero. */,
            const NXOpen::Point3d & center /** center */ ,
            double start_angle /** In radians */,
            double end_angle /** In radians.  The end angle must not equal the start angle. */,
            NXOpen::NXMatrix * matrix /** Orientation matrix */
        );
        /** Sets the center, radius, and start and end angles of the arc.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: void SetParameters
        (
            double radius /** Must be greater than zero */,
            const NXOpen::Point3d & center /** center */ ,
            double start_angle /** In radians */,
            double end_angle /** In radians.  The end angle must not equal the start angle */
        );
    };
}
#undef EXPORTLIBRARY
#endif
