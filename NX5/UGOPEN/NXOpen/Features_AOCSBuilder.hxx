#ifndef NXOpen_FEATURES_AOCSBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_AOCSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_AOCSBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class AOCSBuilder;
    }
    class ExpressionSectionSetList;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXObject;
    class ObjectList;
    class ScCollector;
    class Section;
    namespace Features
    {
        class _AOCSBuilderBuilder;
        /** Represents a Offset In Face(aka Associative offset curve on face)feature builder.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateAocsBuilder Features::FeatureCollection::CreateAocsBuilder@endlink  <br> */
        class NXOPENCPPEXPORT AOCSBuilder : public Features::FeatureBuilder
        {
            /** AOCS builder offset type enum. */
            public: enum OffsetType
            {
                OffsetTypeChordal/** offset_type_chordal */,
                OffsetTypeArclength/** offset_type_arclength */,
                OffsetTypeGeodesic/** offset_type_geodesic */,
                OffsetTypeTangential/** offset_type_tangential */
            };

            /** AOCS builder trim and extend type enum. 
             @deprecated Deprecated in NX5 <br> 
            */
            public: enum TrimExtend
            {
                TrimExtendNone/** no extension */,
                TrimExtendTangent/** tangent extension */
            };

            /** AOCS builder trim to each other within section type enum. */
            public: enum Trim
            {
                TrimNone/** no trimming */,
                TrimWithinSection/** allow trimming */
            };

            /** AOCS builder extend to each other within section type enum. */
            public: enum Extend
            {
                ExtendNone/** no extension */,
                ExtendWithinSection/** allow extension */
            };

            /** AOCS builder extend to face edges type enum. */
            public: enum ExtendToFace
            {
                ExtendToFaceNone/** no extentsion */,
                ExtendToFaceBoundary/** extend till face boundary */
            };

            private: friend class  _AOCSBuilderBuilder;
            protected: AOCSBuilder();
            /**Returns  the face collector.  <br> License requirements : None */
            public: NXOpen::ScCollector * FaceCollector
            (
            );
            /**Sets  the face collector.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFaceCollector
            (
                NXOpen::ScCollector * collector /** collector */ 
            );
            /**Returns  the list of offsets. This is deprecated. Please use
                        @link Offsets Offsets@endlink  instead. Note that it is no
                        longer necessary to set this list, as a new list is automatically created when
                        a new instance of this class is instantiated.
                    
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : None */
            public: NXOpen::ObjectList * OffsetStringsList
            (
            );
            /**Sets  the list of offsets. This is deprecated. Please use
                        @link Offsets Offsets@endlink  instead. Note that it is no
                        longer necessary to set this list, as a new list is automatically created when
                        a new instance of this class is instantiated.
                    
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOffsetStringsList
            (
                NXOpen::ObjectList * seldimlist /** seldimlist */ 
            );
            /**Returns  the list of offsets.  <br> License requirements : None */
            public: NXOpen::ExpressionSectionSetList * Offsets
            (
            );
            /**Returns  the offset mode for the AOCS operation.  <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::OffsetType OffsetMode
            (
            );
            /**Sets  the offset mode for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOffsetMode
            (
                NXOpen::Features::AOCSBuilder::OffsetType offset_mode /** offset mode */ 
            );
            /**Returns  the extend method option for the AOCS operation.
                         This is deprecated. Please use
                        @link Trim Trim@endlink  and
                        @link Extend Extend@endlink instead.
                    
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::TrimExtend TrimExtendMethod
            (
            );
            /**Sets  the extend method option for the AOCS operation.
                         This is deprecated. Please use
                        @link Trim Trim@endlink  and
                        @link Extend Extend@endlink instead.
                    
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimExtendMethod
            (
                NXOpen::Features::AOCSBuilder::TrimExtend extend_method /** extend method */ 
            );
            /**Returns  the trim method option for the AOCS operation.  <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::Trim TrimMethod
            (
            );
            /**Sets  the trim method option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimMethod
            (
                NXOpen::Features::AOCSBuilder::Trim trim_method /** trim method */ 
            );
            /**Returns  the extend method option for the AOCS operation.  <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::Extend ExtendMethod
            (
            );
            /**Sets  the extend method option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtendMethod
            (
                NXOpen::Features::AOCSBuilder::Extend extend_method /** extend method */ 
            );
            /**Returns  the cross boundary option for the AOCS operation.  <br> License requirements : None */
            public: bool TrimToFaceEdgesOption
            (
            );
            /**Sets  the cross boundary option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimToFaceEdgesOption
            (
                bool trim_to_face_edges /** trim to face edges */ 
            );
            /**Returns  the span option for the AOCS operation.  <br> License requirements : None */
            public: NXOpen::Features::AOCSBuilder::ExtendToFace ExtendToFaceOption
            (
            );
            /**Sets  the span option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtendToFaceOption
            (
                NXOpen::Features::AOCSBuilder::ExtendToFace extend_to_face_option /** extend to face option */ 
            );
            /**Returns  the distance tolerance for the AOCS operation.  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distance_tolerance /** distance tolerance */ 
            );
            /**Returns  the angular tolerance for the AOCS operation.  <br> License requirements : None */
            public: double AngularTolerance
            (
            );
            /**Sets  the angular tolerance for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngularTolerance
            (
                double angular_tolerance /** angular tolerance */ 
            );
            /**Returns  the associative output option for the AOCS operation.  <br> License requirements : None */
            public: bool AssociativeOutputOption
            (
            );
            /**Sets  the associative output option for the AOCS operation.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociativeOutputOption
            (
                bool associative /** associative */ 
            );
            /** Reverse the direction of all offsets of the section.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void FlipAllOffsetsOfSection
            (
                NXOpen::Section * section /** input section */
            );
            /** Reverse the offset direction.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void FlipOffset
            (
                NXOpen::NXObject * seldimitem /** input list item */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
