#ifndef NXOpen_CAM_DMSURFSTEPOVERCIBUILDER_HXX_INCLUDED
#define NXOpen_CAM_DMSURFSTEPOVERCIBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_DmSurfStepoverCiBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class DmSurfStepoverCiBuilder;
    }
    class Builder;
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class _DmSurfStepoverCiBuilderBuilder;
        /** Represents a DmSurfStepoverCiBuilder  <br> This is an abstract class and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT DmSurfStepoverCiBuilder : public Builder
        {
            /** Available types for SDM: Stepover*/
            public: enum StepoverType
            {
                StepoverTypeScollap/**Scallop*/,
                StepoverTypeNumber/**Number*/
            };

            private: friend class  _DmSurfStepoverCiBuilderBuilder;
            protected: DmSurfStepoverCiBuilder();
            /**Returns  the type, SDM: Stepover <br> License requirements : None */
            public: NXOpen::CAM::DmSurfStepoverCiBuilder::StepoverType Stepover
            (
            );
            /**Sets  the type, SDM: Stepover <br> License requirements : None */
            public: void SetStepover
            (
                NXOpen::CAM::DmSurfStepoverCiBuilder::StepoverType dm_surf_stepover /** the value of Stepover */
            );
            /**Returns  the  builder of Scallop Height, SDM: Stepover <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * StepoverScallopBuilder
            (
            );
            /**Returns  the  builder of Horizontal Limit, SDM: Stepover <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * HorizonalLimitBuilder
            (
            );
            /**Returns  the  builder of Vertical Limit, SDM: Stepover <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * VerticalLimitBuilder
            (
            );
            /**Returns  the  Number of Steps, SDM: Stepover  <br> License requirements : None */
            public: int NumStepover
            (
            );
            /**Sets  the  Number of Steps, SDM: Stepover  <br> License requirements : None */
            public: void SetNumStepover
            (
                int dm_surf_stepover_num_stepover /** the Number of Steps value */
            );
            /**Returns  the  First Direction, SDM: Stepover  <br> License requirements : None */
            public: int FirstDir
            (
            );
            /**Sets  the  First Direction, SDM: Stepover  <br> License requirements : None */
            public: void SetFirstDir
            (
                int dm_surf_stepover_first_dir /** the First Direction value */
            );
            /**Returns  the  Second Direction, SDM: Stepover  <br> License requirements : None */
            public: int SecondDir
            (
            );
            /**Sets  the  Second Direction, SDM: Stepover  <br> License requirements : None */
            public: void SetSecondDir
            (
                int dm_surf_stepover_second_dir /** the Second Direction value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
