#ifndef NXOpen_ENGINEERINGFUNCTION_HXX_INCLUDED
#define NXOpen_ENGINEERINGFUNCTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     EngineeringFunction.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class EngineeringFunction;
    class Session;
    /** Contains Engineering Function methods  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
    class NXOPENCPPEXPORT EngineeringFunction
    {
        private: NXOpen::Session* m_owner;
        public: explicit EngineeringFunction(NXOpen::Session *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Calculate the gravity acceleration.  @return  gravity acceleration  <br> License requirements : None */
        public: double GravityAcceleration
        (
        );
        /** Calculate the final velocity from initial velocity, acceleration and time.  @return  final velocity  <br> License requirements : None */
        public: double LinearMotionFinalVelocity1
        (
            double v0 /** initial velocity */,
            double a /** acceleration */,
            double t /** time */
        );
        /** Calculate the final velocity from initial displacement, initial velocity,
                acceleration and position.  @return  final velocity  <br> License requirements : None */
        public: double LinearMotionFinalVelocity2
        (
            double v0 /** initial velocity */,
            double x0 /** initial displacement */,
            double a /** acceleration */,
            double x /** position */
        );
        /** Calculate the displacement from initial displacement, initial velocity,
                acceleration and time.  @return  displacement  <br> License requirements : None */
        public: double LinearMotionDisplacement
        (
            double x0 /** initial displacement */,
            double v0 /** initial velocity */,
            double a /** acceleration */,
            double t /** time */
        );
        /** Calculate the centripetal acceleration from velocity and radius or distance.  @return  centripetal acceleration  <br> License requirements : None */
        public: double CircularMotionCentripetalAcceleration
        (
            double v /** velocity */,
            double r /** distance */
        );
        /** Calculate the centrifugal force from velocity, radius and mass.  @return  centrifugal force  <br> License requirements : None */
        public: double CentrifugalForce
        (
            double m /** mass */,
            double v /** velocity */,
            double r /** radius of curve */
        );
        /** Calculate the period from frequency.  @return  period  <br> License requirements : None */
        public: double Period
        (
            double f /** frequency */
        );
        /** Calculate the frequency from period.  @return  frequency  <br> License requirements : None */
        public: double Frequency
        (
            double t /** period */
        );
        /** Calculate the Newton's second law of motion.  @return  net forces  <br> License requirements : None */
        public: double NewtonMotionSecondLaw
        (
            double m /** mass */,
            double a /** acceleration */
        );
        /** Calculate the period of pendulum motion.  @return  period  <br> License requirements : None */
        public: double PendulumPeriod
        (
            double l /** length */,
            double g /** gravity acceleration */
        );
        /** Calculate the frequency of pendulum motion.  @return  frequency  <br> License requirements : None */
        public: double PendulumFrequency
        (
            double l /** length */,
            double g /** gravity acceleration */
        );
        /** Calculate the restoring force in the spring-mass system.  @return  restoring force  <br> License requirements : None */
        public: double SpringRestoringForce
        (
            double k /** spring constant */,
            double x /** position */
        );
        /** Calculate the potential energy in the spring-mass system.  @return  potential energy  <br> License requirements : None */
        public: double SpringPotentialEnergy
        (
            double k /** spring constant */,
            double x /** position */
        );
        /** Calculate the period in the spring-mass system.  @return  period  <br> License requirements : None */
        public: double SpringPeriod
        (
            double k /** spring constant */,
            double m /** mass */
        );
        /** Calculate the work done on a system.  @return  work done  <br> License requirements : None */
        public: double WorkDone
        (
            double f /** force */,
            double s /** distance */,
            double angle /** angle */
        );
        /** Calculate the power.  @return  power  <br> License requirements : None */
        public: double Power
        (
            double f /** force */,
            double v /** velocity */,
            double angle /** angle */
        );
        /** Calculate the average power.  @return  average power  <br> License requirements : None */
        public: double AveragePower
        (
            double w /** work done */,
            double tc /** change in time */
        );
        /** Calculate the linear kinetic energy.  @return  kinetic energy  <br> License requirements : None */
        public: double LinearKineticEnergy
        (
            double m /** mass */,
            double v /** velocity */
        );
        /** Calculate the gravitational potential energy.  @return  gravitational potential energy  <br> License requirements : None */
        public: double GravitationalPotentialEnergy
        (
            double m /** mass */,
            double h /** height */,
            double g /** gravity acceleration */
        );
        /** Calculate the momentum.  @return  momentum  <br> License requirements : None */
        public: double Momentum
        (
            double m /** mass */,
            double v /** velocity */
        );
        /** Calculate the torque.  @return  torque  <br> License requirements : None */
        public: double Torque
        (
            double f /** force */,
            double r /** distance */,
            double angle /** angle */
        );
        /** Calculate the friction force.  @return  friction force  <br> License requirements : None */
        public: double FrictionForce
        (
            double n /** normal force */,
            double u /** coefficient of friction */
        );
        /** Calculate the impulse from force and change in time.  @return  impulse  <br> License requirements : None */
        public: double Impulse1
        (
            double f /** force */,
            double tc /** change in time */
        );
        /** Calculate the impulse from mass and change in velocity.  @return  impulse  <br> License requirements : None */
        public: double Impulse2
        (
            double m /** mass */,
            double vc /** change in velocity */
        );
        /** Calculate the area moment of inertia of circular cross section.  @return  area moment of inertia  <br> License requirements : None */
        public: double CircularAreaMomentOfInertia
        (
            double r /** Radii of Circular Cross Section */
        );
        /** Calculate the displacement under a center load.  @return  displacement  <br> License requirements : None */
        public: double CenterLoadDisplacement
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum displacement under a center load.  @return  maximum displacement  <br> License requirements : None */
        public: double CenterLoadDisplacementMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the slope under a center load.  @return  slope  <br> License requirements : None */
        public: double CenterLoadSlope
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the moment under a center load.  @return  moment  <br> License requirements : None */
        public: double CenterLoadMoment
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */
        );
        /** Calculate the shear force under a center load.  @return  shear force  <br> License requirements : None */
        public: double CenterLoadShearForce
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */
        );
        /** Calculate the displacement under a Intermediate load.  @return  displacement  <br> License requirements : None */
        public: double IntermediateLoadDisplacement
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the slope under a Intermediate load.  @return  slope  <br> License requirements : None */
        public: double IntermediateLoadSlope
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the moment under a intermediate load.  @return  moment  <br> License requirements : None */
        public: double IntermediateLoadMoment
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */
        );
        /** Calculate the shear force under a Intermediate load.  @return  shear force  <br> License requirements : None */
        public: double IntermediateLoadShearForce
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */
        );
        /** Calculate the maximum shear force under a Intermediate load.  @return  maximum shear force  <br> License requirements : None */
        public: double IntermediateLoadShearForceMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */
        );
        /** Calculate the maximum bending stress under a Intermediate load.  @return  bending maximum stress  <br> License requirements : None */
        public: double IntermediateLoadBendingStressMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double c /** distance from neutral axis to extreme fibers */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum moment under a Intermediate load.  @return  maximum moment  <br> License requirements : None */
        public: double IntermediateLoadMomentMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */
        );
        /** Calculate the maximum slope under a Intermediate load.  @return  maximum slope  <br> License requirements : None */
        public: double IntermediateLoadSlopeMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum displacement under a Intermediate load.  @return  maximum displacement  <br> License requirements : None */
        public: double IntermediateLoadDisplacementMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum shear force under a center load.  @return  maximum shear force  <br> License requirements : None */
        public: double CenterLoadShearForceMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */
        );
        /** Calculate the maximum moment under a center load.  @return  maximum moment  <br> License requirements : None */
        public: double CenterLoadMomentMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */
        );
        /** Calculate the maximum bending stress under a center load.  @return  maximum bending stress  <br> License requirements : None */
        public: double CenterLoadBendingStressMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double c /** distance from neutral axis to extreme fibers */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum slope under a center load.  @return  maximum slope  <br> License requirements : None */
        public: double CenterLoadSlopeMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum displacement under two symmetric loads.  @return  maximum displacement  <br> License requirements : None */
        public: double SymmetricLoadDisplacementMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum slope under two symmetric loads.  @return  maximum slope  <br> License requirements : None */
        public: double SymmetricLoadSlopeMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum moment under two symmetric loads.  @return  maximum moment  <br> License requirements : None */
        public: double SymmetricLoadMomentMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */
        );
        /** Calculate the maximum bending stress under two symmetric loads.  @return  maximum bending stress  <br> License requirements : None */
        public: double SymmetricLoadBendingStressMaximum
        (
            double pp /** load on beam */,
            double a /** location of load */,
            double c /** distance from neutral axis to extreme fibers */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum shear force under two symmetric loads.  @return  maximum shear force  <br> License requirements : None */
        public: double SymmetricLoadShearForceMaximum
        (
            double pp /** load on beam */
        );
        /** Calculate the shear force under two symmetric loads.  @return  shear force  <br> License requirements : None */
        public: double SymmetricLoadShearForce
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */
        );
        /** Calculate the moment under two symmetric loads.  @return  moment  <br> License requirements : None */
        public: double SymmetricLoadMoment
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */
        );
        /** Calculate the slope under two symmetric loads.  @return  slope  <br> License requirements : None */
        public: double SymmetricLoadSlope
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the displacement under two symmetric loads.  @return  displacement  <br> License requirements : None */
        public: double SymmetricLoadDisplacement
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double a /** location of load */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the displacement under a uniform Load.  @return  displacement  <br> License requirements : None */
        public: double UniformLoadDisplacement
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the slope under a uniform Load.  @return  slope  <br> License requirements : None */
        public: double UniformLoadSlope
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the moment under a uniform Load.  @return  moment  <br> License requirements : None */
        public: double UniformLoadMoment
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */
        );
        /** Calculate the shear force under a uniform Load.  @return  shear force  <br> License requirements : None */
        public: double UniformLoadShearForce
        (
            double x /** location of calculation */,
            double l /** length of the beam */,
            double pp /** load on beam */
        );
        /** Calculate the maximum shear force under a uniform Load.  @return  maximum shear force  <br> License requirements : None */
        public: double UniformLoadShearForceMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */
        );
        /** Calculate the maximum moment under a uniform Load.  @return  maximum moment  <br> License requirements : None */
        public: double UniformLoadMomentMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */
        );
        /** Calculate the maximum slope under a uniform Load.  @return  maximum slope  <br> License requirements : None */
        public: double UniformLoadSlopeMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum displacement under a uniform Load.  @return  maximum displacement  <br> License requirements : None */
        public: double UniformLoadDisplacementMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double e /** yong's modulus */,
            double i /** moment of inertia */
        );
        /** Calculate the maximum bending stress under a uniform Load.  @return  maximum bending stress  <br> License requirements : None */
        public: double UniformLoadBendingStressMaximum
        (
            double l /** length of the beam */,
            double pp /** load on beam */,
            double c /** distance from neutral axis to extreme fibers */,
            double i /** moment of inertia */
        );
        /** Calculate the force exerted by a compression spring (with a known spring constant)
               when given the spring length before and after loading  @return  spring force  <br> License requirements : None */
        public: double CompressionSpringForce
        (
            double lf /** spring free length */,
            double ld /** spring length when deformed */,
            double k /** spring constant */
        );
        /** Calculate the deformed length of a compression spring (with a known spring constant)
               when loaded with a force.  @return  spring length when deformed  <br> License requirements : None */
        public: double CompressionSpringDeformedLength
        (
            double lf /** spring free length */,
            double f /** spring force */,
            double k /** spring constant */
        );
        /** Calculate the spring constant for a compression spring that exerts a force 
               when deformed to the length.  @return  spring constant  <br> License requirements : None */
        public: double CompressionSpringConstant
        (
            double lf /** spring free length */,
            double ld /** spring length when deformed */,
            double f /** spring force */
        );
        /** Calculate the maximum shear stress in the spring from the provided spring geometry.  @return  maximum shear stress  <br> License requirements : None */
        public: double CompressionSpringShearStressMaximum
        (
            double f /** spring force */,
            double d /** wire diameter */,
            double dout /** outer diameter of spring */
        );
        /** Calculate the spring constant k for a compression spring from design parameters.  @return  spring constant  <br> License requirements : None */
        public: double CompressionSpringConstantFromParam
        (
            double g /** shear modulus */,
            double d2 /** coil diameter */,
            double d /** wire diameter */,
            double tn /** number of turns */
        );
        /** Calculate the natural critical damping from the mass and stiffness.  @return  critical damping  <br> License requirements : None */
        public: double VibrationNaturalCriticalDamping1
        (
            double m /** mass */,
            double k /** stiffness */
        );
        /** Calculate the natural critical damping from the mass and natural angular frequency.  @return  critical damping  <br> License requirements : None */
        public: double VibrationNaturalCriticalDamping2
        (
            double m /** mass */,
            double wn /** natural angular frequency */
        );
        /** Calculate the damping ratio.  @return  damping ratio  <br> License requirements : None */
        public: double VibrationDampingRatio
        (
            double cv /** damping */,
            double cc /** critical damping */
        );
        /** Calculate the angular frequency from the damping ration and the natural angular frequcncy.  @return  damped angular frequency  <br> License requirements : None */
        public: double VibrationDampedAngularFrequency
        (
            double dr /** damping ratio */,
            double wn /** natural angular frequency */
        );
        /** Calculate the natural angular frequency from the mass and stiffness.  @return  natural angular frequency  <br> License requirements : None */
        public: double VibrationNaturalAngularFrequency
        (
            double m /** mass */,
            double k /** stiffness */
        );
        /** Calculate the natural frequency from natural angular frequency.  @return  natural Frequency  <br> License requirements : None */
        public: double VibrationNaturalFrequency
        (
            double wn /** natural angular frequency */
        );
        /** Calculate the damped frequency from natural angular frequency.  @return  damped frequency  <br> License requirements : None */
        public: double VibrationDampedFrequency
        (
            double wd /** damped angular frequency */
        );
        /** Calculate the max. cross-section diameter from the bore and the groove diameter.  @return  max. cross-section diameter  <br> License requirements : None */
        public: double ORingRadialSectionMaximum
        (
            double bd /** bore diameter */,
            double btol /** bore tolerance */,
            double gd /** groove diameter */,
            double gtol /** groove tolerance */,
            double cmax /** maximum compression */,
            double cstol /** cross-section diameter tolerance */
        );
        /** Calculate the min. cross-section diameter from the bore and the groove diameter.  @return  min. cross-section diameter  <br> License requirements : None */
        public: double ORingRadialSectionMinimum
        (
            double bd /** bore diameter */,
            double btol /** bore tolerance */,
            double gd /** groove diameter */,
            double gtol /** groove tolerance */,
            double cmin /** minimum compression */,
            double cstol /** cross-section diameter tolerance */
        );
        /** Calculate the recommended o-ring inner diameter from groove diameter.  @return  recommended o-ring inner diameter  <br> License requirements : None */
        public: double ORingRadialInnerDia
        (
            double gd /** groove diameter */,
            double gtol /** groove tolerance */
        );
        /** Calculate the suggested groove width from the cross-section diameter.  @return  suggested groove width  <br> License requirements : None */
        public: double ORingRadialGrooveWidth
        (
            double cs /** cross-section diameter */
        );
        /** Calculate the bore diameter from section diameter, inner diameter, compression and stretch.  @return  bore diameter  <br> License requirements : None */
        public: double ORingRadialBoreDia
        (
            double cs /** o-ring section diameter */,
            double id /** o-ring inner diameter */,
            double cn /** nominal compression ratio */,
            double str /** nominal stretch ratio */
        );
        /** Calculate the groove diameter from o-ring inner diameter and stretch ratio.  @return  groove diameter  <br> License requirements : None */
        public: double ORingRadialGrooveDia
        (
            double id /** o-ring inner diameter */,
            double str /** nominal stretch ratio */
        );
        /** Calculate the groove diameter from bore diameter, section diameter and compression ratio.  @return  groove diameter  <br> License requirements : None */
        public: double ORingRadialGrooveDiaBore
        (
            double bd /** bore diameter */,
            double cs /** cross_section diameter */,
            double cn /** nominal compression ratio */
        );
        /** Calculate the stretch ratio from inner diameter of o-ring and groove diameter  @return  stretch ratio  <br> License requirements : None */
        public: double ORingRadialStretch
        (
            double id /** o-ring inner diameter */,
            double gd /** groove diameter */
        );
        /** Calculate the gear ratio from the output and input rate.  @return  gear ratio  <br> License requirements : None */
        public: double GearRatio
        (
            double orate /** output rate */,
            double irate /** input rate */
        );
        /** Calculate the pitch diameter from module.  @return  pitch diameter  <br> License requirements : None */
        public: double SpurGearPitchDiameter
        (
            double m /** module */,
            double n /** number of teeth */
        );
        /** Calculate the circular pitch from module.  @return  circular pitch  <br> License requirements : None */
        public: double SpurGearCircularPitch1
        (
            double m /** module */
        );
        /** Calculate the circular pitch from the pitch diameter and number of teeth.  @return  circular pitch  <br> License requirements : None */
        public: double SpurGearCircularPitch2
        (
            double d /** pitch diameter */,
            double n /** number of teeth */
        );
        /** Calculate the module from the diametral pitch.  @return  module  <br> License requirements : None */
        public: double SpurGearModule
        (
            double pd /** diametral pitch */
        );
        /** Calculate the number of teeth from the module and pitch diameter.  @return  number of teeth  <br> License requirements : None */
        public: double SpurGearNumberOfTeeth
        (
            double m /** module */,
            double d /** pitch diameter */
        );
        /** Calculate the addendum from the module.  @return  addendum  <br> License requirements : None */
        public: double SpurGearAddendum
        (
            double m /** module */
        );
        /** Calculate the dedendum from the module.  @return  dedendum  <br> License requirements : None */
        public: double SpurGearDedendum
        (
            double m /** module */
        );
        /** Calculate the outside diameter from the module and pitch diameter.  @return  outside diameter  <br> License requirements : None */
        public: double SpurGearOutsideDiameter1
        (
            double m /** module */,
            double d /** pitch diameter */
        );
        /** Calculate the outside diameter from the module and number of teeth.  @return  outside diameter  <br> License requirements : None */
        public: double SpurGearOutsideDiameter2
        (
            double m /** module */,
            double n /** number of teeth */
        );
        /** Calculate the root diameter from pitch diameter and module.  @return  root diameter  <br> License requirements : None */
        public: double SpurGearRootDiameter
        (
            double m /** module */,
            double d /** pitch diameter */
        );
        /** Calculate the base circle diameter from the pitch diameter and pressure
             angle.  @return  base circle diameter  <br> License requirements : None */
        public: double SpurGearBaseCircleDiameter
        (
            double d /** pitch diameter */,
            double pangle /** pressure angle */
        );
        /** Calculate the base pitch from the module and pressure angle.  @return  base pitch  <br> License requirements : None */
        public: double SpurGearBasePitch
        (
            double m /** module */,
            double pangle /** pressure angle */
        );
        /** Calculate the tooth thickness at standard pitch diameter from module.  @return  tooth thickness at standard pitch diameter  <br> License requirements : None */
        public: double SpurGearToothThickness
        (
            double m /** module */
        );
        /** Calculate the center distance from the module and number of teeth.  @return  center distance  <br> License requirements : None */
        public: double SpurGearCenterDistance
        (
            double m /** module */,
            double n1 /** number of first gear teeth */,
            double n2 /** number of second gear teeth */
        );
        /** Calculate the min. number teeth for no undercutting from pressure angle.  @return  min. number teeth for no undercutting  <br> License requirements : None */
        public: double SpurGearMinimumNumberNoUndercutting
        (
            double pangle /** pressure angle */
        );
        /** Calculate the contact ratio from outside radii, base-circle radii, center
             distance and pressure angle.  @return  contact radio  <br> License requirements : None */
        public: double SpurGearContactRatio
        (
            double m /** module */,
            double r1o /** outside radii of gear a */,
            double r2o /** outside radii of gear b */,
            double r1b /** base-circle radii of gear a */,
            double r2b /** base-circle radii of gear b */,
            double c /** center distance */,
            double pangle /** pressure angle */
        );
        /** Calculate the linear backlash along pitch circle from change in center
             distance and pressure angle.  @return  linear backlash along line of action  <br> License requirements : None */
        public: double SpurGearLinearBacklash1
        (
            double cc /** change in center distance */,
            double pangle /** pressure angle */
        );
        /** Calculate the linear backlash along pitch circle from change in tooth
             thickness.  @return  linear backlash along line of action  <br> License requirements : None */
        public: double SpurGearLinearBacklash2
        (
            double ct /** change in tooth thickness */
        );
        /** Calculate the linear backlash along line of action from linear backlash
             along pitch circle.  @return  linear backlash along line of action  <br> License requirements : None */
        public: double SpurGearLinearBacklash3
        (
            double ct /** linear backlash along pitch circle */,
            double pangle /** pressure angle */
        );
        /** Calculate the angular backlash from linear backlash along pitch circle.  @return  angular backlash  <br> License requirements : None */
        public: double SpurGearAngularBacklash
        (
            double ct /** linear backlash along pitch circle */,
            double d /** pitch diameter */
        );
        /** Calculate the x direction normal stress of the same space point in a rotated
             coordinate system from the stresses at a space point in the body.  @return  new x direction normal stress  <br> License requirements : None */
        public: double NewCoordinateNormalStressX
        (
            double xstress /** x direction normal stress */,
            double ystress /** y direction normal stress */,
            double sstress /** shear stress */,
            double rangle /** coordinate rotation angle */
        );
        /** Calculate the y direction normal stress of the same space point in a rotated
             coordinate system from the stresses at a space point in the body.  @return  new y direction normal stress  <br> License requirements : None */
        public: double NewCoordinateNormalStressY
        (
            double xstress /** x direction normal stress */,
            double ystress /** y direction normal stress */,
            double sstress /** shear stress */,
            double rangle /** coordinate rotation angle */
        );
        /** Calculate the shear stress of the same space point in a rotated coordinate
             system from the stresses at a space point in the body.  @return  new shear stress  <br> License requirements : None */
        public: double NewCoordinateShearStressXy
        (
            double xstress /** x direction normal stress */,
            double ystress /** y direction normal stress */,
            double sstress /** shear stress */,
            double rangle /** coordinate rotation angle */
        );
        /** Calculate the x direction normal strain of the same space point in a rotated
             coordinate system from the strains at a space point in the body.  @return  new x direction normal strain  <br> License requirements : None */
        public: double NewCoordinateNormalStrainX
        (
            double xstrain /** x direction normal strain */,
            double ystrain /** y direction normal strain */,
            double sstrain /** shear strain */,
            double rangle /** coordinate rotation angle */
        );
        /** Calculate the y direction normal strain of the same space point in a rotated
             coordinate system from the strains at a space point in the body.  @return  new y direction normal strain  <br> License requirements : None */
        public: double NewCoordinateNormalStrainY
        (
            double xstrain /** x direction normal strain */,
            double ystrain /** y direction normal strain */,
            double sstrain /** shear strain */,
            double rangle /** coordinate rotation angle */
        );
        /** Calculate the shear strain of the same space point in a rotated coordinate
             system from the strains at a space point in the body.  @return  new shear strain  <br> License requirements : None */
        public: double NewCoordinateShearStrainXy
        (
            double xstrain /** x direction normal strain */,
            double ystrain /** y direction normal strain */,
            double sstrain /** shear strain */,
            double rangle /** coordinate rotation angle */
        );
        /** Calculate the maximum principal stress from the stress components at a space
             point in the body.  @return  maximum principal stress  <br> License requirements : None */
        public: double PrincipalStressMaximum
        (
            double xstress /** x direction normal stress */,
            double ystress /** y direction normal stress */,
            double sstress /** shear stress */
        );
        /** Calculate the minimum principal stress from the stress components at a space
             point in the body.  @return  minimum principal stress  <br> License requirements : None */
        public: double PrincipalStressMinimum
        (
            double xstress /** x direction normal stress */,
            double ystress /** y direction normal stress */,
            double sstress /** shear stress */
        );
        /** Calculate the principal stress angle from the stress components at a space
             point in the body.  @return  principal stress angle  <br> License requirements : None */
        public: double PrincipalStressAngle
        (
            double xstress /** x direction normal stress */,
            double ystress /** y direction normal stress */,
            double sstress /** shear stress */
        );
        /** Calculate the maximum shear stress from the stress components at a space
             point in the body.  @return  maximum shear stress  <br> License requirements : None */
        public: double ShearStressMaximum1
        (
            double xstress /** x direction normal stress */,
            double ystress /** y direction normal stress */,
            double sstress /** shear stress */
        );
        /** Calculate the maximum shear stress from the principal stress at a space
             point in the body.  @return  maximum shear stress  <br> License requirements : None */
        public: double ShearStressMaximum2
        (
            double stress1 /** maximum principal stress */,
            double stress2 /** minimum principal stress */
        );
        /** Calculate the maximum shear stress angle from the stress components at
             a space point in the body.  @return  maximum shear stress angle  <br> License requirements : None */
        public: double ShearStressAngleMaximum
        (
            double xstress /** x direction normal stress */,
            double ystress /** y direction normal stress */,
            double sstress /** shear stress */
        );
        /** Calculate the maximum principal strain from the strain components at
             a space point in the body.  @return  maximum principal strain  <br> License requirements : None */
        public: double PrincipalStrainMaximum
        (
            double xstrain /** x direction normal strain */,
            double ystrain /** y direction normal strain */,
            double sstrain /** shear strain */
        );
        /** Calculate the minimum principal strain from the strain components at
             a space point in the body.  @return  minimum principal strain  <br> License requirements : None */
        public: double PrincipalStrainMinimum
        (
            double xstrain /** x direction normal strain */,
            double ystrain /** y direction normal strain */,
            double sstrain /** shear strain */
        );
        /** Calculate the principal strain angle from the strain components at a
             space point in the body.  @return  principal strain angle  <br> License requirements : None */
        public: double PrincipalStrainAngle
        (
            double xstrain /** x direction normal strain */,
            double ystrain /** y direction normal strain */,
            double sstrain /** shear strain */
        );
        /** Calculate the maximum shear strain from the strain components at a
             space point in the body.  @return  maximum shear strain  <br> License requirements : None */
        public: double ShearStrainMaximum1
        (
            double xstrain /** x direction normal strain */,
            double ystrain /** y direction normal strain */,
            double sstrain /** shear strain */
        );
        /** Calculate the maximum shear strain from the principal strain at a
             space point in the body.  @return  maximum shear strain  <br> License requirements : None */
        public: double ShearStrainMaximum2
        (
            double strain1 /** maximum principal strain */,
            double strain2 /** minimum_principal_strain */
        );
        /** Calculate the maximum shear strain angle from the strain components
             at a space point in the body.  @return  maximum shear strain angle  <br> License requirements : None */
        public: double ShearStrainAngleMaximum
        (
            double xstrain /** x direction normal strain */,
            double ystrain /** y direction normal strain */,
            double sstrain /** shear strain */
        );
        /** Calculate the youngs modulus from shear modulus and poisson ratio.  @return  youngs modulus  <br> License requirements : None */
        public: double YoungsModulusFromPoissonShear
        (
            double g /** shear modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the youngs modulus from bulk modulus and poisson ratio.  @return  youngs modulus  <br> License requirements : None */
        public: double YoungsModulusFromBulkPoisson
        (
            double k /** bulk modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the youngs modulus from 1st Lame constant and poisson ratio.  @return  youngs modulus  <br> License requirements : None */
        public: double YoungsModulusFromPoissonLame
        (
            double l /** 1st Lame constant */,
            double v /** poisson ratio */
        );
        /** Calculate the youngs modulus from bulk modulus and shear modulus.  @return  youngs modulus  <br> License requirements : None */
        public: double YoungsModulusFromBulkShear
        (
            double k /** bulk modulus */,
            double g /** shear modulus */
        );
        /** Calculate the youngs modulus from shear modulus and 1st Lame constant.  @return  youngs modulus  <br> License requirements : None */
        public: double YoungsModulusFromShearLame
        (
            double g /** shear modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the youngs modulus from bulk modulus and 1st Lame constant.  @return  youngs modulus  <br> License requirements : None */
        public: double YoungsModulusFromBulkLame
        (
            double k /** bulk modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the poisson ratio from youngs modulus and shear modulus.  @return  poisson ratio  <br> License requirements : None */
        public: double PoissonRatioFromYoungsShear
        (
            double e /** youngs modulus */,
            double g /** shear modulus */
        );
        /** Calculate the poisson ratio from bulk modulus and youngs modulus.  @return  poisson ratio  <br> License requirements : None */
        public: double PoissonRatioFromYoungsBulk
        (
            double e /** youngs modulus */,
            double k /** bulk modulus */
        );
        /** Calculate the poisson ratio from youngs modulus and 1st Lame constant.  @return  poisson ratio  <br> License requirements : None */
        public: double PoissonRatioFromYoungsLame
        (
            double e /** youngs modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the poisson ratio from shear modulus and bulk modulus.  @return  poisson ratio  <br> License requirements : None */
        public: double PoissonRatioFromShearBulk
        (
            double g /** shear modulus */,
            double k /** bulk modulus */
        );
        /** Calculate the poisson ratio from shear modulus and 1st Lame constant.  @return  poisson ratio  <br> License requirements : None */
        public: double PoissonRatioFromShearLame
        (
            double g /** shear modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the poisson ratio from bulk modulus and 1st Lame constant.  @return  poisson ratio  <br> License requirements : None */
        public: double PoissonRatioFromBulkLame
        (
            double k /** bulk modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the shear modulus from youngs modulus and poisson ratio.  @return  shear modulus  <br> License requirements : None */
        public: double ShearModulusFromYoungsPoisson
        (
            double e /** youngs modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the shear modulus from youngs modulus and bulk modulus.  @return  shear modulus  <br> License requirements : None */
        public: double ShearModulusFromYoungsBulk
        (
            double e /** youngs modulus */,
            double k /** bulk modulus */
        );
        /** Calculate the shear modulus from youngs modulus and 1st Lame constant.  @return  shear modulus  <br> License requirements : None */
        public: double ShearModulusFromYoungsLame
        (
            double e /** youngs modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the shear modulus from bulk modulus and poisson ratio.  @return  shear modulus  <br> License requirements : None */
        public: double ShearModulusFromBulkPoisson
        (
            double k /** bulk modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the shear modulus from poisson ratio and 1st Lame constant.  @return  shear modulus  <br> License requirements : None */
        public: double ShearModulusFromPoissonLame
        (
            double v /** poisson ratio */,
            double l /** 1st Lame constant */
        );
        /** Calculate the shear modulus from bulk modulus and 1st Lame constant.  @return  shear modulus  <br> License requirements : None */
        public: double ShearModulusFromBulkLame
        (
            double k /** bulk modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the bulk modulus from youngs modulus and poisson ratio.  @return  bulk modulus  <br> License requirements : None */
        public: double BulkModulusFromYoungsPoisson
        (
            double e /** youngs modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the bulk modulus from youngs modulus and shear modulus.  @return  bulk modulus  <br> License requirements : None */
        public: double BulkModulusFromYoungsShear
        (
            double e /** youngs modulus */,
            double g /** shear modulus */
        );
        /** Calculate the bulk modulus from youngs modulus and 1st Lame constant.  @return  bulk modulus  <br> License requirements : None */
        public: double BulkModulusFromYoungsLame
        (
            double e /** youngs modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the bulk modulus from shear modulus and poisson ratio.  @return  bulk modulus  <br> License requirements : None */
        public: double BulkModulusFromShearPoisson
        (
            double g /** shear modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the bulk modulus from poisson ratio and 1st Lame constant.  @return  bulk modulus  <br> License requirements : None */
        public: double BulkModulusFromPoissonLame
        (
            double v /** poisson ratio */,
            double l /** 1st Lame constant */
        );
        /** Calculate the bulk modulus from shear modulus and 1st Lame constant.  @return  bulk modulus  <br> License requirements : None */
        public: double BulkModulusFromShearLame
        (
            double g /** shear modulus */,
            double l /** 1st Lame constant */
        );
        /** Calculate the 1st Lame constant from youngs modulus and poisson.  @return  1st Lame constant  <br> License requirements : None */
        public: double FirstLameFromYoungsPoisson
        (
            double e /** youngs modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the 1st Lame constant from youngs modulus and shear modulus.  @return  1st Lame constant  <br> License requirements : None */
        public: double FirstLameFromYoungsShear
        (
            double e /** youngs modulus */,
            double g /** shear modulus */
        );
        /** Calculate the 1st Lame constant from youngs modulus and bulk modulus.  @return  1st Lame constant  <br> License requirements : None */
        public: double FirstLameFromYoungsBulk
        (
            double e /** youngs modulus */,
            double k /** bulk modulus */
        );
        /** Calculate the 1st Lame constant from shear modulus and poisson ratio.  @return  1st Lame constant  <br> License requirements : None */
        public: double FirstLameFromShearPoisson
        (
            double g /** shear modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the 1st Lame constant from bulk modulus and poisson ratio.  @return  1st Lame constant  <br> License requirements : None */
        public: double FirstLameFromBulkPoisson
        (
            double k /** bulk modulus */,
            double v /** poisson ratio */
        );
        /** Calculate the 1st Lame constant from bulk modulus and shear modulus.  @return  1st Lame constant  <br> License requirements : None */
        public: double FirstLameFromBulkShear
        (
            double k /** bulk modulus */,
            double g /** shear modulus */
        );
        /** Calculate the pressure drop in a section of uniform pipe running from input point
                to output point.  @return  pressure drop  <br> License requirements : None */
        public: double PipePressureLossOfLaminarFlow
        (
            double pin /** Pressure at Input Point(absolute) */,
            double fv /** Average Fluid Velocity in Pipe */,
            double fd /** Fluid Density */,
            double zz /** Elevation Gain from Input Point to Output Point */,
            double l /** Pipe Length from Input Point to Output Point */,
            double d /** Pipe Diameter */,
            double u /** Fluid Viscosity(dynamic) */,
            double g /** Gravity Acceleration */
        );
        /** Calculate the maximum tensile stress of a square flat plate supported at top and bottom
                of all four edges under a uniformly distributed load over the surface of the plate. @return  maximum tensile stress  <br> License requirements : None */
        public: double SquareTopBottomSupportedUniformLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a square flat plate supported at top and bottom
                of all four edges under a uniformly distributed load over the surface of the plate. @return  maximum deflection  <br> License requirements : None */
        public: double SquareTopBottomSupportedUniformLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a square flat plate supported at the bottom
                only of all four edges under a uniformly distributed load over the surface of the plate. @return  maximum tensile stress  <br> License requirements : None */
        public: double SquareBottomSupportedUniformLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a square flat plate supported at the bottom only
                of all four edges under a uniformly distributed load over the surface of the plate. @return  maximum deflection  <br> License requirements : None */
        public: double SquareBottomSupportedUniformLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a square flat plate with all edges supported
                above and below, or below only under a concentrated load at the center.  @return  maximum tensile stress  <br> License requirements : None */
        public: double SquareEdgesSupportedCenterLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double r0 /** Radius of Area to Which Load Is Applied */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a square flat plate with all edges supported
                above and below, or below only under a concentrated load at the center.  @return  maximum deflection  <br> License requirements : None */
        public: double SquareEdgesSupportedCenterLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double r0 /** Radius of Area to Which Load Is Applied */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a square flat plate with all edges firmly
                fixed under a uniformly distributed load over the surface of the plate.  @return  maximum tensile stress  <br> License requirements : None */
        public: double SquareEdgesFixedCenterLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a square flat plate with all edges firmly
                fixed under a uniformly distributed load over the surface of the plate.  @return  maximum deflection  <br> License requirements : None */
        public: double SquareEdgesFixedCenterLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a square flat plate with all edges firmly
                fixed under a uniform load over small circular area at the center.  @return  maximum tensile stress  <br> License requirements : None */
        public: double SquareEdgesFixedCircularCenterLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double r0 /** Radius of Area to Which Load Is Applied */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a square flat plate with all edges firmly
                fixed under a uniform load over small circular area at the center.  @return  maximum deflection  <br> License requirements : None */
        public: double SquareEdgesFixedCircularCenterLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double l /** Distance between Supports (Length of Plate) */,
            double r0 /** Radius of Area to Which Load Is Applied */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a rectangular plate with all edges supported
                at top and bottom under a uniformly distributed load over the surface of the plate.  @return  maximum tensile stress  <br> License requirements : None */
        public: double RectangularEdgesSupportedUniformLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double ll /** Length of Plate Long Side */,
            double ls /** Length of Plate Short Side */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a rectangular plate with all edges supported
                at top and bottom under a uniformly distributed load over the surface of the plate.  @return  maximum deflection  <br> License requirements : None */
        public: double RectangularEdgesSupportedUniformLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double ll /** Length of Plate Long Side */,
            double ls /** Length of Plate Short Side */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a rectangular plate with all edges fixed
                under a uniformly distributed load of the plate.  @return  maximum tensile stress  <br> License requirements : None */
        public: double RectangularEdgesFixedUniformLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double ll /** Length of Plate Long Side */,
            double ls /** Length of Plate Short Side */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a rectangular plate with all edges fixed
                under a uniformly distributed load of the plate.  @return  maximum deflection  <br> License requirements : None */
        public: double RectangularEdgesFixedUniformLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double ll /** Length of Plate Long Side */,
            double ls /** Length of Plate Short Side */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a circular flat plate with the edge supported
                around the circumference under a uniformly distributed load over the  surface of the plate.  @return  maximum tensile stress  <br> License requirements : None */
        public: double CircularEdgesSupportedUniformLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double r /** Radius of Plate to Supporting Edge */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a circular flat plate with the edge supported
                around the circumference under a uniformly distributed load over the surface of the plate.  @return  maximum deflection  <br> License requirements : None */
        public: double CircularEdgesSupportedUniformLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double r /** Radius of Plate to Supporting Edge */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a circular flat plate with the edge
                supported around the circumference under a concentrated load at the center.  @return  maximum tensile stress  <br> License requirements : None */
        public: double CircularEdgesSupportedCenterLoadStress
        (
            double w /** Concentrated Load */,
            double r /** Radius of Plate to Supporting Edge */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a circular flat plate with the edge supported
                around the circumference under a concentrated load at the center.  @return  maximum deflection  <br> License requirements : None */
        public: double CircularEdgesSupportedCenterLoadDeflection
        (
            double w /** Concentrated Load */,
            double r /** Radius of Plate to Supporting Edge */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a circular flat plate with the edge fixed
                around circumference under a uniformly distributed load over the surface of the plate.  @return  maximum tensile stress  <br> License requirements : None */
        public: double CircularEdgesFixedUniformLoadStress
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double r /** Radius of Plate to Supporting Edge */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a circular flat plate with the edge fixed around
                circumference under a uniformly distributed load over the surface of the plate.  @return  maximum deflection  <br> License requirements : None */
        public: double CircularEdgesFixedUniformLoadDeflection
        (
            double pp /** Uniformly Distributed Load Acting on Plate */,
            double r /** Radius of Plate to Supporting Edge */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        /** Calculate the maximum tensile stress of a circular flat plate with the edge fixed
                around circumference under a concentrated load at the center.  @return  maximum tensile stress  <br> License requirements : None */
        public: double CircularEdgesFixedCenterLoadStress
        (
            double w /** Concentrated Load */,
            double r /** Radius of Plate to Supporting Edge */,
            double t /** Thickness of Plate */
        );
        /** Calculate the maximum deflection of a circular flat plate with the edge fixed
                around circumference under a concentrated load at the center.  @return  maximum deflection  <br> License requirements : None */
        public: double CircularEdgesFixedCenterLoadDeflection
        (
            double w /** Concentrated Load */,
            double r /** Radius of Plate to Supporting Edge */,
            double t /** Thickness of Plate */,
            double e /** Youngs Modulus */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
