#ifndef NXOpen_GEOMETRICUTILITIES_LAWBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_LAWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_LawBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlongSpineBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class AlongSpineBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Section;
    class SelectSelectObject;
    namespace GeometricUtilities
    {
        class _LawBuilderBuilder;
        /** Represents a @link GeometricUtilities::LawBuilder GeometricUtilities::LawBuilder@endlink  */
        class NXOPENCPPEXPORT LawBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the lawType enum */
            public: enum Type
            {
                TypeConstant/** constant law type*/,
                TypeLinear/** linear law type */,
                TypeCubic/** cubic law type  */,
                TypeLinearAlongSpine/** linear_along_spine law type  */,
                TypeCubicAlongSpine/** by equation law type  */,
                TypeByEquation/** cubic along spine law type  */,
                TypeByLawCurve/** by law curve law type  */
            };

            /** Describes the option on whether to retain the original profile. */
            public: enum RetainLawCurveOption
            {
                RetainLawCurveOptionKeepOriginal/** Keeps the original profile as it is during edit pre NX3 parms */,
                RetainLawCurveOptionReplace/** Deletes the old profile, so that user has to select new one during edit pre NX3 parms */
            };

            private: friend class  _LawBuilderBuilder;
            protected: LawBuilder();
            /**Returns  the Law type  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder::Type LawType
            (
            );
            /**Sets  the Law type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetLawType
            (
                NXOpen::GeometricUtilities::LawBuilder::Type lawType /** Set the lawType */
            );
            /**Returns  the Value. This will be used only when the law type is constant  <br> License requirements : None */
            public: NXOpen::Expression * Value
            (
            );
            /**Returns  the startValue. This will be used only when the law type is linear/cubic  <br> License requirements : None */
            public: NXOpen::Expression * StartValue
            (
            );
            /**Returns  the endValue. This will be used only when the law type is linear/cubic  <br> License requirements : None */
            public: NXOpen::Expression * EndValue
            (
            );
            /**Returns  the lawCurveOption.  This will be used only during the edit of Pre NX3 feature Parms  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder::RetainLawCurveOption LawCurveOption
            (
            );
            /**Sets  the lawCurveOption.  This will be used only during the edit of Pre NX3 feature Parms  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetLawCurveOption
            (
                NXOpen::GeometricUtilities::LawBuilder::RetainLawCurveOption lawCurveOption /** lawcurveoption */ 
            );
            /**Returns  the alongSpineData. This will be used only when the law type is linear along spine/cubic along spine  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::AlongSpineBuilder * AlongSpineData
            (
            );
            /**Returns  the parameter. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder  <br> License requirements : None */
            public: NXString Parameter
            (
            );
            /**Sets  the parameter. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetParameter
            (
                const NXString & parameter /** Set the name of parameter expression */
            );
            /**Returns  the function. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder  <br> License requirements : None */
            public: NXString Function
            (
            );
            /**Sets  the function. This will be used only when the law type is by equation. 
                    Make sure that the expression should be created before setting it in to the builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetFunction
            (
                const NXString & function /** Set the name of function expression */
            );
            /**Returns  the lawCurve. This will be used only when the law type is by law curve  <br> License requirements : None */
            public: NXOpen::Section * LawCurve
            (
            );
            /**Returns  the baseLine. This will be used only when the law type is by law curve  <br> License requirements : None */
            public: NXOpen::SelectSelectObject * BaseLine
            (
            );
            /**Returns  the reverseDirection. This will be used only when the law type is by law curve  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverseDirection. This will be used only when the law type is by law curve  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** Set the reverse direction flag */
            );
            /** Sets the spine dynamically into builder  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetSpineIntoBuilder
            (
                NXOpen::Section * spine /** Set the Spine into builder */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
