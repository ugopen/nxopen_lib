#ifndef NXOpen_FEATURES_DIVIDECURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_DIVIDECURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_DivideCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_DivideCurveBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class DivideCurveBuilder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class Point;
    class SelectCurve;
    class SelectObject;
    class SelectPointList;
    namespace Features
    {
        class _DivideCurveBuilderBuilder;
        /**
            Represents a builder for non-associative divide curve operation.
             <br> To create a new instance of this class, use @link Features::BaseFeatureCollection::CreateDivideCurveBuilder Features::BaseFeatureCollection::CreateDivideCurveBuilder@endlink  <br> */
        class NXOPENCPPEXPORT DivideCurveBuilder : public Features::FeatureBuilder
        {
            /** Represents the Divide Curve equal segment method types */
            public: enum EqualSegmentOption
            {
                EqualSegmentOptionEqualParameter/** Equal Parameter */,
                EqualSegmentOptionEqualArcLength/** Equal Arc length */
            };

            /** Represents the Divide Curve Bounding Objects option types */
            public: enum BoundingObjectOption
            {
                BoundingObjectOptionExistingCurve/** Existing Curve */,
                BoundingObjectOptionProjectPoint/** Project Point */,
                BoundingObjectOptionTwoPoints/** Two Points */,
                BoundingObjectOptionPointAndVector/** Point and Vector */,
                BoundingObjectOptionByPlane/** By Plane */
            };

            /** Represents the Divide Curve Input Arc length direction flag */
            public: enum InputArcLengthDirectionFlag
            {
                InputArcLengthDirectionFlagStart/** Input Arc length from start */,
                InputArcLengthDirectionFlagEnd/** Input Arc length from end */
            };

            /** Represents the Divide Curve at Knot option types */
            public: enum KnotPointOption
            {
                KnotPointOptionByNumber/** By Number */,
                KnotPointOptionSelectPoint/** Screen Position */,
                KnotPointOptionAllKnotpoints/** All Knotpoints */
            };

            /** Represents the Divide Curve at Corner option types */
            public: enum CornerOption
            {
                CornerOptionByNumber/** By Number */,
                CornerOptionSelectPoint/** Screen Position */,
                CornerOptionAllCornerpoints/** All Cornerpoints */
            };

            /** Represents the Divide Curve types */
            public: enum Types
            {
                TypesEqualSegments/** Equal Segments */,
                TypesByBoundingObjects/** By Bounding Objects */,
                TypesInputArcLengthSegments/** Input Arc Length Segments */,
                TypesAtKnotpoints/** At Knotpoints */,
                TypesAtCorners/** At Corners */
            };

            private: friend class  _DivideCurveBuilderBuilder;
            protected: DivideCurveBuilder();
            /**Returns  the divide type  <br> License requirements : None */
            public: NXOpen::Features::DivideCurveBuilder::Types Type
            (
            );
            /**Sets  the divide type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetType
            (
                NXOpen::Features::DivideCurveBuilder::Types type /** type */ 
            );
            /**Returns  the select dividing curve  <br> License requirements : None */
            public: NXOpen::SelectCurve * DividingCurve
            (
            );
            /**Returns  the equal segment method  <br> License requirements : None */
            public: NXOpen::Features::DivideCurveBuilder::EqualSegmentOption EqualSegmentMethod
            (
            );
            /**Sets  the equal segment method  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetEqualSegmentMethod
            (
                NXOpen::Features::DivideCurveBuilder::EqualSegmentOption equalSegmentMethod /** equalsegmentmethod */ 
            );
            /**Returns  the equal parameter segments  <br> License requirements : None */
            public: int EqualParameterSegments
            (
            );
            /**Sets  the equal parameter segments  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetEqualParameterSegments
            (
                int equalParameterSegments /** equalparametersegments */ 
            );
            /**Returns  the equal arc length segments  <br> License requirements : None */
            public: int EqualArcLengthSegments
            (
            );
            /**Sets  the equal arc length segments  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetEqualArcLengthSegments
            (
                int equalArcLengthSegments /** equalarclengthsegments */ 
            );
            /**Returns  the bounding object method  <br> License requirements : None */
            public: NXOpen::Features::DivideCurveBuilder::BoundingObjectOption BoundingObjectMethod
            (
            );
            /**Sets  the bounding object method  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingObjectMethod
            (
                NXOpen::Features::DivideCurveBuilder::BoundingObjectOption boundingObjectMethod /** boundingobjectmethod */ 
            );
            /**Returns  the existing bounding curve  <br> License requirements : None */
            public: NXOpen::SelectObject * BoundingCurve
            (
            );
            /**Returns  the bounding project point  <br> License requirements : None */
            public: NXOpen::Point * BoundingProjectPoint
            (
            );
            /**Sets  the bounding project point  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingProjectPoint
            (
                NXOpen::Point * projectPoint /** projectpoint */ 
            );
            /**Returns  the bounding point1  <br> License requirements : None */
            public: NXOpen::Point * BoundingPoint1
            (
            );
            /**Sets  the bounding point1  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingPoint1
            (
                NXOpen::Point * point1 /** point1 */ 
            );
            /**Returns  the bounding point2  <br> License requirements : None */
            public: NXOpen::Point * BoundingPoint2
            (
            );
            /**Sets  the bounding point2  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingPoint2
            (
                NXOpen::Point * point2 /** point2 */ 
            );
            /**Returns  the bounding point  <br> License requirements : None */
            public: NXOpen::Point * BoundingPoint
            (
            );
            /**Sets  the bounding point  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the bounding vector  <br> License requirements : None */
            public: NXOpen::Direction * BoundingVector
            (
            );
            /**Sets  the bounding vector  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the bounding plane  <br> License requirements : None */
            public: NXOpen::Plane * BoundingPlane
            (
            );
            /**Sets  the bounding plane  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetBoundingPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the intersection reference  <br> License requirements : None */
            public: NXOpen::Point * IntersectionReference
            (
            );
            /**Sets  the intersection reference  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetIntersectionReference
            (
                NXOpen::Point * intersectionReference /** intersectionreference */ 
            );
            /**Returns  the arc length  <br> License requirements : None */
            public: double ArcLength
            (
            );
            /**Sets  the arc length  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetArcLength
            (
                double arcLength /** arclength */ 
            );
            /**Returns  the input arc length direction flag  <br> License requirements : None */
            public: NXOpen::Features::DivideCurveBuilder::InputArcLengthDirectionFlag DirectionFlag
            (
            );
            /**Sets  the input arc length direction flag  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetDirectionFlag
            (
                NXOpen::Features::DivideCurveBuilder::InputArcLengthDirectionFlag directionFlag /** directionflag */ 
            );
            /**Returns  the knot point method  <br> License requirements : None */
            public: NXOpen::Features::DivideCurveBuilder::KnotPointOption KnotPointMethod
            (
            );
            /**Sets  the knot point method  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetKnotPointMethod
            (
                NXOpen::Features::DivideCurveBuilder::KnotPointOption knotPointMethod /** knotpointmethod */ 
            );
            /**Returns  the knot point number  <br> License requirements : None */
            public: int KnotPointNumber
            (
            );
            /**Sets  the knot point number  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetKnotPointNumber
            (
                int knotPointNumber /** knotpointnumber */ 
            );
            /**Returns  the knot point  <br> License requirements : None */
            public: NXOpen::SelectPointList * KnotPoint
            (
            );
            /**Returns  the corner method  <br> License requirements : None */
            public: NXOpen::Features::DivideCurveBuilder::CornerOption CornerMethod
            (
            );
            /**Sets  the corner method  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCornerMethod
            (
                NXOpen::Features::DivideCurveBuilder::CornerOption cornerMethod /** cornermethod */ 
            );
            /**Returns  the corner number  <br> License requirements : None */
            public: int CornerNumber
            (
            );
            /**Sets  the corner number  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCornerNumber
            (
                int cornerNumber /** cornernumber */ 
            );
            /**Returns  the corner point  <br> License requirements : None */
            public: NXOpen::SelectPointList * CornerPoint
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
