#ifndef NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
#define NXOpen_FEATURES_FEATURECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FeatureCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_JoinCurvesBuilder.hxx>
#include <NXOpen/Features_RasterImage.hxx>
#include <NXOpen/Features_ThroughCurveMeshBuilder.hxx>
#include <NXOpen/Features_ThroughCurvesBuilder.hxx>
#include <NXOpen/HumanPosturePrediction.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class FeatureCollection;
    }
    class Part;
    namespace Features
    {
        class Feature;
    }
    class Body;
    class CutView;
    namespace Die
    {
        class DieCollection;
    }
    namespace Features
    {
        class AOCSBuilder;
    }
    namespace Features
    {
        class BlockFeatureBuilder;
    }
    namespace Features
    {
        class BooleanBuilder;
    }
    namespace Features
    {
        class BooleanFeature;
    }
    namespace Features
    {
        class BridgeCurveBuilder;
    }
    namespace Features
    {
        class BulkHeadsBuilder;
    }
    namespace Features
    {
        class ChamferBuilder;
    }
    namespace Features
    {
        class CircularBlendCurve;
    }
    namespace Features
    {
        class CircularBlendCurveBuilder;
    }
    namespace Features
    {
        class CompositeCurveBuilder;
    }
    namespace Features
    {
        class ConstrainFaceBuilder;
    }
    namespace Features
    {
        class CurveLengthBuilder;
    }
    namespace Features
    {
        class CurveOnSurface;
    }
    namespace Features
    {
        class CurveOnSurfaceBuilder;
    }
    namespace Features
    {
        class CylinderBuilder;
    }
    namespace Features
    {
        class DatumAxisBuilder;
    }
    namespace Features
    {
        class DatumCsysBuilder;
    }
    namespace Features
    {
        class DatumPlaneBuilder;
    }
    namespace Features
    {
        class DecksBuilder;
    }
    namespace Features
    {
        class DeleteFaceBuilder;
    }
    namespace Features
    {
        class DividefaceBuilder;
    }
    namespace Features
    {
        class DraftBodyBuilder;
    }
    namespace Features
    {
        class DraftBuilder;
    }
    namespace Features
    {
        class EdgeBlendBuilder;
    }
    namespace Features
    {
        class EmbossBuilder;
    }
    namespace Features
    {
        class ExtractFaceBuilder;
    }
    namespace Features
    {
        class ExtrudeBuilder;
    }
    namespace Features
    {
        class ExtrudeFeatureBuilder;
    }
    namespace Features
    {
        class FaceBlendBuilder;
    }
    namespace Features
    {
        class FrameBarOutBuilder;
    }
    namespace Features
    {
        class GeomcopyBuilder;
    }
    namespace Features
    {
        class GlobalShaping;
    }
    namespace Features
    {
        class GlobalShapingBuilder;
    }
    namespace Features
    {
        class HoleFeatureBuilder;
    }
    namespace Features
    {
        class HumanBuilder;
    }
    namespace Features
    {
        class InsertFramesBuilder;
    }
    namespace Features
    {
        class InsertSheetBody;
    }
    namespace Features
    {
        class InsertSheetBodyBuilder;
    }
    namespace Features
    {
        class IntersectionCurveBuilder;
    }
    namespace Features
    {
        class ItFramesBuilder;
    }
    namespace Features
    {
        class JoinCurvesBuilder;
    }
    namespace Features
    {
        class MainDimensionsBuilder;
    }
    namespace Features
    {
        class MarkingLineBuilder;
    }
    namespace Features
    {
        class MasterCutBuilder;
    }
    namespace Features
    {
        class MeshSurfaceBuilder;
    }
    namespace Features
    {
        class MirrorBodyBuilder;
    }
    namespace Features
    {
        class MirrorFeatureBuilder;
    }
    namespace Features
    {
        class MoveFaceBuilder;
    }
    namespace Features
    {
        class OffsetCurveBuilder;
    }
    namespace Features
    {
        class OffsetEmbossBuilder;
    }
    namespace Features
    {
        class OffsetFaceBuilder;
    }
    namespace Features
    {
        class OffsetRegionBuilder;
    }
    namespace Features
    {
        class OffsetSurfaceBuilder;
    }
    namespace Features
    {
        class OvercrownBuilder;
    }
    namespace Features
    {
        class PatchBuilder;
    }
    namespace Features
    {
        class PatternFaceBuilder;
    }
    namespace Features
    {
        class ProjectCurveBuilder;
    }
    namespace Features
    {
        class RPOBuilder;
    }
    namespace Features
    {
        class RapidSurface;
    }
    namespace Features
    {
        class RapidSurfaceBuilder;
    }
    namespace Features
    {
        class RasterImage;
    }
    namespace Features
    {
        class ResizeBlendBuilder;
    }
    namespace Features
    {
        class RevolveBuilder;
    }
    namespace Features
    {
        class ScaleBuilder;
    }
    namespace Features
    {
        class SectionCurveBuilder;
    }
    namespace Features
    {
        class SectionInertiaAnalysis;
    }
    namespace Features
    {
        class SectionInertiaAnalysisBuilder;
    }
    namespace Features
    {
        class SewBuilder;
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class AeroSheetmetalManager;
        }
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class SheetmetalManager;
        }
    }
    namespace Features
    {
        class ShellBuilder;
    }
    namespace Features
    {
        class SketchOnPathBuilder;
    }
    namespace Features
    {
        class StudioSpline;
    }
    namespace Features
    {
        class StudioSplineBuilder;
    }
    namespace Features
    {
        class StudioSurfaceBuilder;
    }
    namespace Features
    {
        class Swept;
    }
    namespace Features
    {
        class SweptBuilder;
    }
    namespace Features
    {
        class ThickenBuilder;
    }
    namespace Features
    {
        class ThroughCurveMeshBuilder;
    }
    namespace Features
    {
        class ThroughCurvesBuilder;
    }
    namespace Features
    {
        class TransFrameBuilder;
    }
    namespace Features
    {
        class TrimBodyBuilder;
    }
    namespace Features
    {
        class TrimCurve;
    }
    namespace Features
    {
        class TrimCurveBuilder;
    }
    namespace Features
    {
        class TrimExtendBuilder;
    }
    namespace Features
    {
        class TrimSheetBuilder;
    }
    namespace Features
    {
        class TubeBuilder;
    }
    namespace Features
    {
        class Unsew;
    }
    namespace Features
    {
        class UnsewBuilder;
    }
    namespace Features
    {
        class UntrimBuilder;
    }
    namespace Features
    {
        class UserDefinedObjectFeatureBuilder;
    }
    namespace Features
    {
        class VarsweepBuilder;
    }
    namespace Features
    {
        class WaveDatumBuilder;
    }
    namespace Features
    {
        class WavePointBuilder;
    }
    namespace Features
    {
        class WaveRoutingBuilder;
    }
    namespace Features
    {
        class YFrameBuilder;
    }
    namespace Features
    {
        class ZFrameBuilder;
    }
    class HumanPosturePrediction;
    class HumanPosturePredictionBuilder;
    class NXObject;
    namespace Weld
    {
        class WeldManager;
    }
    namespace Features
    {
        /** Represents a collection of features  <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
        class NXOPENCPPEXPORT FeatureCollection : public TaggedObjectCollection
        {
            private: NXOpen::Part* m_owner;
            public: explicit FeatureCollection(NXOpen::Part *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef Features::Feature * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }
                explicit iterator(NXOpen::Features::FeatureCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }
                iterator(const iterator &other)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Features::FeatureCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a Mesh Surface feature builder  @return  MeshSurfaceBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MeshSurfaceBuilder * CreateMeshSurfaceBuilder
            (
                NXOpen::Features::Feature * mesh_surf /** @link Features::Ruled Features::Ruled@endlink ,
                                                                               @link Features::ThroughCurves Features::ThroughCurves@endlink ,
                                                                               @link Features::ThroughCurveMesh Features::ThroughCurveMesh@endlink 
                                                                               to be edited */
            );
            /** Creates a Block feature builder  @return  BlockFeatureBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BlockFeatureBuilder * CreateBlockFeatureBuilder
            (
                NXOpen::Features::Feature * block /** @link Block Block@endlink  to be edited */
            );
            /** Creates a Extrude feature builder  @return  ExtrudeFeatureBuilder object 
             @deprecated Deprecated in NX4 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeFeatureBuilder * CreateExtrudeFeatureBuilder
            (
                NXOpen::Features::Feature * extrude /** @link Extrude Extrude@endlink  to be edited */
            );
            /** Creates a Extrude builder  @return  ExtrudeBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtrudeBuilder * CreateExtrudeBuilder
            (
                NXOpen::Features::Feature * extrude /** @link Extrude Extrude@endlink  to be edited */
            );
            /** Creates a UserDefinedObjectFeature builder  @return  UserDefinedObjectFeatureBuilder object  <br> License requirements : None */
            public: NXOpen::Features::UserDefinedObjectFeatureBuilder * CreateUserDefinedObjectFeatureBuilder
            (
                NXOpen::Features::Feature * udo_feature /** @link UserDefinedObjectFeature UserDefinedObjectFeature@endlink  to be edited - may be NULL if creating a new feature. */
            );
            /** Creates a Revolve builder  @return  RevolveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RevolveBuilder * CreateRevolveBuilder
            (
                NXOpen::Features::Feature * revolve /** @link RevolveBuilder RevolveBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Emboss builder  @return  EmbossBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EmbossBuilder * CreateEmbossBuilder
            (
                NXOpen::Features::Feature * emboss /** @link EmbossBuilder EmbossBuilder@endlink  to be edited */
            );
            /** Creates a Offsetemboss builder  @return  OffsetEmbossBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetEmbossBuilder * CreateOffsetEmbossBuilder
            (
                NXOpen::Features::Feature * offset_emboss /** @link OffsetEmbossBuilder OffsetEmbossBuilder@endlink  to be edited */
            );
            /** Creates a Divideface builder  @return  DividefaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DividefaceBuilder * CreateDividefaceBuilder
            (
                NXOpen::Features::Feature * divideface /** @link DividefaceBuilder DividefaceBuilder@endlink 
                                                                       to be edited */
            );
            /** Creates a Overcrown feature builder  @return  OvercrownBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OvercrownBuilder * CreateOvercrownFeatureBuilder
            (
                NXOpen::Features::Feature * overcrown /** @link OvercrownBuilder OvercrownBuilder@endlink 
                                                                  to be edited, if NULL then create a new one. */
            );
            /** Creates a Curvelength builder  @return  CurveLengthBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CurveLengthBuilder * CreateCurvelengthBuilder
            (
                NXOpen::Features::Feature * curvelength /** @link CurveLengthBuilder CurveLengthBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Datum Axis feature builder  @return  DatumAxisBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumAxisBuilder * CreateDatumAxisBuilder
            (
                NXOpen::Features::Feature * datum_axis /** @link DatumAxisFeature DatumAxisFeature@endlink 
                                                                   to be edited */
            );
            /** Creates a Datum Plane feature builder  @return  DatumPlaneBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumPlaneBuilder * CreateDatumPlaneBuilder
            (
                NXOpen::Features::Feature * dplane /** @link DatumPlaneFeature DatumPlaneFeature@endlink 
                                                               to be edited */
            );
            /** Creates a Sketch On Path feature builder  @return  SketchOnPathBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SketchOnPathBuilder * CreateSketchOnPathBuilder
            (
                NXOpen::Features::Feature * sketch_feature /** Sketch On Path feature
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a Hole feature builder  @return  HoleFeatureBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::HoleFeatureBuilder * CreateHoleFeatureBuilder
            (
                NXOpen::Features::Feature * hole /** @link Hole Hole@endlink  to be edited */
            );
            /** Creates a Relative Positioning Object builder  @return  RPOBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::RPOBuilder * CreateRpoBuilder
            (
                NXOpen::Features::Feature * rpo /** @link Feature Feature@endlink  to be repositioned */
            );
            /** Creates a Chamfer feature builder  @return  ChamferBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ChamferBuilder * CreateChamferBuilder
            (
                NXOpen::Features::Feature * chamfer /** Chamfer
                                                             to be edited, if NULL then create a new one */
            );
            /** Creates a Edge Blend feature builder  @return  EdgeBlendBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::EdgeBlendBuilder * CreateEdgeBlendBuilder
            (
                NXOpen::Features::Feature * edgeblend /** @link EdgeBlendBuilder EdgeBlendBuilder@endlink 
                                                                     to be edited, if NULL then create a new one */
            );
            /** Creates a unite feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateUniteFeature
            (
                NXOpen::Body * target_body /** Target body */,
                bool retain_target_body /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & tool_bodies /** Tool bodies */,
                bool retain_tool_bodies /** Retain option for tool bodies */,
                bool allow_non_associative_boolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* non_associative_boolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterized_solids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a subtract feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateSubtractFeature
            (
                NXOpen::Body * target_body /** Target body */,
                bool retain_target_body /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & tool_bodies /** Tool bodies */,
                bool retain_tool_bodies /** Retain option for tool bodies */,
                bool allow_non_associative_boolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* non_associative_boolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterized_solids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates an intersect feature.  @return  Array of boolean features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::BooleanFeature *> CreateIntersectFeature
            (
                NXOpen::Body * target_body /** Target body */,
                bool retain_target_body /** Retain option for target body */,
                const std::vector<NXOpen::Body *> & tool_bodies /** Tool bodies */,
                bool retain_tool_bodies /** Retain option for tool bodies */,
                bool allow_non_associative_boolean /** Allow boolean operation even if it results into non-associative boolean */,
                bool* non_associative_boolean /** True if operation resulted in a non-associative boolean.
                                                                     False otherwise */,
                bool* unparameterized_solids /** True if operation resulted in unparameterized solids.
                                                                     False otherwise */
            );
            /** Creates a Varsweep feature builder  @return VarsweepBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VarsweepBuilder * CreateVarsweepBuilder
            (
                NXOpen::Features::Feature * varsweep /** Varsweep to be edited */
            );
            /** Creates a Face Blend feature builder  @return  FaceBlendBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::FaceBlendBuilder * CreateFaceBlendBuilder
            (
                NXOpen::Features::Feature * face_blend /** @link FaceBlendBuilder FaceBlendBuilder@endlink  to be edited */
            );
            /** Returns all the features in the part  @return  Features in the part  <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetFeatures
            (
            );
            /** Finds the @link  Feature   Feature @endlink  with the given identifier as recorded in a journal.
                An object may not return the same value as its JournalIdentifier in different versions of
                the software. However newer versions of the software should find the same object when
                FindObject is passed older versions of its journal identifier. In general, this method
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  Feature with this identifier  <br> License requirements : None */
            public: NXOpen::Features::Feature * FindObject
            (
                const NXString & journal_identifier /** Identifier of the body you want   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Suppress the given features  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be suppressed */
            );
            /** Unsuppress the given features  @return  Features which were not unsuppressed due to errors  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::Features::Feature *> UnsuppressFeatures
            (
                const std::vector<NXOpen::Features::Feature *> & features /** Features to be unsuppressed */
            );
            /** Get the feature associated with an object  @return  Feature associated with object. Set to Null if no feature is associated to the object.  <br> License requirements : None */
            public: NXOpen::Features::Feature * GetAssociatedFeature
            (
                NXOpen::NXObject * object /** Object to find associated feature. */
            );
            /** Creates a human feature builder.  @return  HumanBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Features::HumanBuilder * CreateHumanBuilder
            (
                NXOpen::Features::Feature * human /** @link Human Human@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a human posture prediction builder.  @return  @link HumanPosturePredictionBuilder HumanPosturePredictionBuilder@endlink  object  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanPosturePredictionBuilder * CreateHumanPosturePredictionBuilder
            (
                NXOpen::HumanPosturePrediction * posture_prediction /** @link HumanPosturePrediction HumanPosturePrediction@endlink  to be edited,
                                                                                                         if NULL then create a new one */
            );
            /** Creates an Offset Surface builder  @return  OffsetSurfaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetSurfaceBuilder * CreateOffsetSurfaceBuilder
            (
                NXOpen::Features::Feature * offset_surface /** @link OffsetSurfaceBuilder OffsetSurfaceBuilder@endlink 
                                                                            to be edited */
            );
            /** Creates a @link Features::PatchBuilder Features::PatchBuilder@endlink   @return  PatchBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatchBuilder * CreatePatchBuilder
            (
                NXOpen::Features::Feature * patch /** Patch Features to be edited */
            );
            /** Creates a Boolean builder  @return  BooleanBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BooleanBuilder * CreateBooleanBuilder
            (
                NXOpen::Features::BooleanFeature * boolean_feature /** @link BooleanFeature BooleanFeature@endlink  to be edited */
            );
            /** Creates a trim body builder object  @return  Features.TrimBodyBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimBodyBuilder * CreateTrimBodyBuilder
            (
                NXOpen::Features::Feature * trimbody_feat /** @link Features::TrimBody Features::TrimBody@endlink  to be edited */
            );
            /** Creates an Shell builder  @return  ShellBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ShellBuilder * CreateShellBuilder
            (
                NXOpen::Features::Feature * shell /** @link Features::ShellBuilder Features::ShellBuilder@endlink  to be edited */
            );
            /** Creates a Datum CSYS feature builder  @return  DatumCsysBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DatumCsysBuilder * CreateDatumCsysBuilder
            (
                NXOpen::Features::Feature * datum_csys /** @link Features::DatumCsysBuilder Features::DatumCsysBuilder@endlink  to be edited */
            );
            /** Creates a draft builder  @return  DraftBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBuilder * CreateDraftBuilder
            (
                NXOpen::Features::Feature * draft /** @link DraftBuilder DraftBuilder@endlink 
                                                                  to be edited, if NULL  then create a new one */
            );
            /** Creates a raster image  @return  RasterImage object  <br> License requirements : studio_visualize ("STUDIO VISUALIZE") */
            public: NXOpen::Features::RasterImage * CreateRasterImage
            (
                const NXOpen::Point3d & origin /** The origin for the raster image */,
                const NXOpen::Matrix3x3 & matrix /** The rotation matrix for the raster image */,
                double length /** Length of the image, given in the units parameter */,
                double height /** Height of the image, give in the units parameter */,
                const NXString & image_file_name /** Name of the image file to use.
                                                                      For now, it must be a .tif file   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double translucency /** 0.0 for no translucency, 1.0 for fully tranparent */,
                NXOpen::Features::RasterImage::MaxTextureSize maximum_texture_size /** maximum texture size */ 
            );
            /** Create a Master Cut builder  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MasterCutBuilder * CreateMasterCutBuilder
            (
                NXOpen::Features::Feature * master_cut /** @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  to be edited,
                                                                                 if NULL then create a new one  */
            );
            /** Creates an Offset In Face builder  @return  AOCSBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::AOCSBuilder * CreateAocsBuilder
            (
                NXOpen::Features::Feature * aocs /** @link Features::AOCSBuilder Features::AOCSBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::OffsetFaceBuilder Features::OffsetFaceBuilder@endlink   @return  OffsetFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetFaceBuilder * CreateOffsetFaceBuilder
            (
                NXOpen::Features::Feature * offsetface /** @link Features::OffsetFace Features::OffsetFace@endlink 
                                                                  to be edited, if NULL then create a new one */
            );
            /** Creates a @link Features::TubeBuilder Features::TubeBuilder@endlink   @return  TubeBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TubeBuilder * CreateTubeBuilder
            (
                NXOpen::Features::Feature * tube /** @link Features::TubeBuilder Features::TubeBuilder@endlink  to be edited */
            );
            /** Creates @link Features::MirrorFeatureBuilder Features::MirrorFeatureBuilder@endlink   @return  MirrorFeatureBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorFeatureBuilder * CreateMirrorFeatureBuilder
            (
                NXOpen::Features::Feature * mirror_fea /** @link Features::MirrorFeatureBuilder Features::MirrorFeatureBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::ScaleBuilder Features::ScaleBuilder@endlink   @return  ScaleBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ScaleBuilder * CreateScaleBuilder
            (
                NXOpen::Features::Feature * scale /** @link Features::Scale Features::Scale@endlink  to be edited */
            );
            /** Creates a Sew feature builder  @return  SewBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SewBuilder * CreateSewBuilder
            (
                NXOpen::Features::Feature * sew /** @link Features::SewBuilder Features::SewBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::SectionCurveBuilder Features::SectionCurveBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionCurveBuilder * CreateSectionCurveBuilder
            (
                NXOpen::Features::Feature * section_curves /** @link Features::SectionCurve Features::SectionCurve@endlink  to be edited */
            );
            /** Creates a @link Features::IntersectionCurveBuilder Features::IntersectionCurveBuilder@endlink   @return  IntersectionCurveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::IntersectionCurveBuilder * CreateIntersectionCurveBuilder
            (
                NXOpen::Features::Feature * intersection_curve /** @link Features::IntersectionCurveBuilder Features::IntersectionCurveBuilder@endlink  to be edited */
            );
            /** Creates a Thicken feature builder  @return  ThickenBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThickenBuilder * CreateThickenBuilder
            (
                NXOpen::Features::Feature * thicken /** @link Features::Thicken Features::Thicken@endlink  to be edited */
            );
            /** Creates a @link Features::TrimExtendBuilder Features::TrimExtendBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimExtendBuilder * CreateTrimExtendBuilder
            (
                NXOpen::Features::Feature * trim_extend /** @link Features::TrimExtend Features::TrimExtend@endlink  to be edited */
            );
            /** Creates a @link Features::GeomcopyBuilder Features::GeomcopyBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GeomcopyBuilder * CreateGeomcopyBuilder
            (
                NXOpen::Features::Feature * geomcopy /** @link Features::Geomcopy Features::Geomcopy@endlink  to be edited */
            );
            /** Creates a @link Features::ProjectCurveBuilder Features::ProjectCurveBuilder@endlink   @return  ProjectCurveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ProjectCurveBuilder * CreateProjectCurveBuilder
            (
                NXOpen::Features::Feature * project_curve /** @link Features::ProjectCurve Features::ProjectCurve@endlink  to be edited */
            );
            /** Creates a @link Features::ExtractFaceBuilder Features::ExtractFaceBuilder@endlink   @return  Extract face builder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ExtractFaceBuilder * CreateExtractFaceBuilder
            (
                NXOpen::Features::Feature * copy_face /** CopyFace Feature to be edited */
            );
            /** Creates a @link Features::MainDimensionsBuilder Features::MainDimensionsBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::MainDimensionsBuilder * CreateMainDimensionsBuilder
            (
                NXOpen::Features::Feature * main_dimensions /** @link Features::MainDimensions Features::MainDimensions@endlink  to be edited */
            );
            /** Creates a @link Features::FrameBarOutBuilder Features::FrameBarOutBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::FrameBarOutBuilder * CreateFrameBarOutBuilder
            (
                NXOpen::Features::Feature * frame_bar_out /** frame bar out */ 
            );
            /** Creates a @link Features::DecksBuilder Features::DecksBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::DecksBuilder * CreateDecksBuilder
            (
                NXOpen::Features::Feature * decks /** @link Features::Decks Features::Decks@endlink  to be edited */
            );
            /** Creates a @link Features::BulkHeadsBuilder Features::BulkHeadsBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::BulkHeadsBuilder * CreateBulkHeadsBuilder
            (
                NXOpen::Features::Feature * bulkHead /** @link Features::BulkHeads Features::BulkHeads@endlink  to be edited */
            );
            /** Creates a @link Features::ItFramesBuilder Features::ItFramesBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::ItFramesBuilder * CreateItFramesBuilder
            (
                NXOpen::Features::Feature * itFrame /** itframe */ 
            );
            /** Creates a @link Features::InsertSheetBodyBuilder Features::InsertSheetBodyBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::InsertSheetBodyBuilder * CreateInsertSheetBodyBuilder
            (
                NXOpen::Features::InsertSheetBody * insert_sheet_body /** @link Features::InsertSheetBody Features::InsertSheetBody@endlink  to be edited */
            );
            public: NXOpen::Features::TransFrameBuilder * CreateTransFrameBuilder
            (
                NXOpen::Features::Feature * transFrame /** @link Features::TransFrame Features::TransFrame@endlink  to be edited */
            );
            public: NXOpen::Features::InsertFramesBuilder * CreateInsertFramesBuilder
            (
                NXOpen::Features::Feature * insertFrames /** InsertFrames Features to be edited */
            );
            /** Creates a @link Features::ZFrameBuilder Features::ZFrameBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::ZFrameBuilder * CreateZFrameBuilder
            (
                NXOpen::Features::Feature * transFrame /**  ZFrame Features to be edited */
            );
            /** Creates a @link Features::YFrameBuilder Features::YFrameBuilder@endlink   @return   <br> License requirements : nx_ship_concept ("Ship Concept") */
            public: NXOpen::Features::YFrameBuilder * CreateYFrameBuilder
            (
                NXOpen::Features::Feature * transFrame /** YFrame Feature to be edited */
            );
            /** Creates a @link Features::JoinCurvesBuilder Features::JoinCurvesBuilder@endlink   @return  JoinCurvesBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::JoinCurvesBuilder * CreateJoinCurvesBuilder
            (
                NXOpen::Features::Feature * join_curves /** @link Features::JoinCurves Features::JoinCurves@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a Studio Spline builder  @return  StudioSplineBuilder object  <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::StudioSplineBuilder * CreateStudioSplineBuilder
            (
                NXOpen::Features::StudioSpline * spline_feature /** @link Features::StudioSpline Features::StudioSpline@endlink  to be edited */
            );
            /** Creates a Curve On Surface feature builder  @return  CurveOnSurfaceBuilder object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::CurveOnSurfaceBuilder * CreateCurveOnSurfaceBuilder
            (
                NXOpen::Features::CurveOnSurface * cos_feature /** @link Features::CurveOnSurface Features::CurveOnSurface@endlink  to be edited */
            );
            /** Creates a @link Features::UntrimBuilder Features::UntrimBuilder@endlink   @return  Features.UntrimBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::UntrimBuilder * CreateUntrimBuilder
            (
                NXOpen::Features::Feature * untrim /** @link Features::Untrim Features::Untrim@endlink  to be edited */
            );
            /** Creates a Wavedatum Builder  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveDatumBuilder * CreateWaveDatumBuilder
            (
                NXOpen::Features::Feature * wavedatum /** Wavedatum Features to be edited */
            );
            /** Creates a @link Features::WaveRoutingBuilder Features::WaveRoutingBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WaveRoutingBuilder * CreateWaveRoutingBuilder
            (
                NXOpen::Features::Feature * waverouting /** Waverouting Features to be edited */
            );
            /** Creates a @link Features::WavePointBuilder Features::WavePointBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::WavePointBuilder * CreateWavePointBuilder
            (
                NXOpen::Features::Feature * wavepoint /** Wavepoint Features to be edited */
            );
            /** Creates a @link Features::TrimSheetBuilder Features::TrimSheetBuilder@endlink   @return  Trim Sheet Builder object <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::TrimSheetBuilder * CreateTrimsheetBuilder
            (
                NXOpen::Features::Feature * trim_sheet /** @link Features::TrimSheet Features::TrimSheet@endlink  to be edited,
                                                                            if NULL then create a new one*/
            );
            /** Creates a @link Features::CircularBlendCurveBuilder Features::CircularBlendCurveBuilder@endlink   @return  CircularBlendCurveBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CircularBlendCurveBuilder * CreateCircularBlendCurveBuilder
            (
                NXOpen::Features::CircularBlendCurve * circular_blend_curve /** @link Features::CircularBlendCurve Features::CircularBlendCurve@endlink  to be edited,
                                                                                                     , if NULL then create a new one  */
            );
            /** Creates a Rapid Surfacing feature builder  @return  RapidSurfaceBuilder object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::RapidSurfaceBuilder * CreateRapidSurfaceBuilder
            (
                NXOpen::Features::RapidSurface * rapid_surface /** @link Features::RapidSurface Features::RapidSurface@endlink  to be edited */
            );
            /** Creates a @link Features::UnsewBuilder Features::UnsewBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::UnsewBuilder * CreateUnsewBuilder
            (
                NXOpen::Features::Unsew * unsew /** @link Features::Unsew Features::Unsew@endlink  to be edited */
            );
            /** Creates a @link Features::MirrorBodyBuilder Features::MirrorBodyBuilder@endlink   @return  MirrorBodyBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MirrorBodyBuilder * CreateMirrorBodyBuilder
            (
                NXOpen::Features::Feature * mirror_body /** @link Features::MirrorBodyBuilder Features::MirrorBodyBuilder@endlink  to be edited */
            );
            /** Creates a @link Features::DraftBodyBuilder Features::DraftBodyBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DraftBodyBuilder * CreateDraftBodyBuilder
            (
                NXOpen::Features::Feature * draft_body /** @link Features::DraftBody Features::DraftBody@endlink  to be edited */
            );
            /** Returns a list of features that generated update alerts during recent update  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetPartFeaturesWithNewAlerts
            (
            );
            /** Returns a list of all features from a given part that have update alerts  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Features::Feature *> GetAllPartFeaturesWithAlerts
            (
            );
            /** Creates a @link Features::GlobalShapingBuilder Features::GlobalShapingBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingBuilder * CreateGlobalShapingBuilder
            (
                NXOpen::Features::GlobalShaping * global_shaping /** @link Features::GlobalShaping Features::GlobalShaping@endlink  to be edited */
            );
            /** Creates a @link Features::TrimCurveBuilder Features::TrimCurveBuilder@endlink    @return  Trim Curve Builder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::TrimCurveBuilder * CreateTrimCurveBuilder
            (
                NXOpen::Features::TrimCurve * trim_curve /** @link Features::TrimCurve Features::TrimCurve@endlink  to be edited */
            );
            /** Creates a @link Features::OffsetCurveBuilder Features::OffsetCurveBuilder@endlink   @return  Offset Curve Builder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: NXOpen::Features::OffsetCurveBuilder * CreateOffsetCurveBuilder
            (
                NXOpen::Features::Feature * offset_curve /** @link Features::OffsetCurve Features::OffsetCurve@endlink  to be edited */
            );
            /** Delete all informational alerts from all the features in a given part <br> License requirements : None */
            public: void DeleteAllPartInformationalFeatureAlerts
            (
            );
            /** Creates a @link Features::ThroughCurveMeshBuilder Features::ThroughCurveMeshBuilder@endlink   @return  ThroughCurveMeshBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThroughCurveMeshBuilder * CreateThroughCurveMeshBuilder
            (
                NXOpen::Features::Feature * through_curve_mesh /** @link Features::ThroughCurveMesh Features::ThroughCurveMesh@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link Features::BridgeCurveBuilder Features::BridgeCurveBuilder@endlink   @return   <br> License requirements : features_modeling ("FEATURES MODELING"), solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::BridgeCurveBuilder * CreateBridgeCurveBuilder
            (
                NXOpen::Features::Feature * bridge_curve /** @link Features::BridgeCurve Features::BridgeCurve@endlink  to be edited */
            );
            /** Creates a @link Features::SweptBuilder Features::SweptBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SweptBuilder * CreateSweptBuilder
            (
                NXOpen::Features::Swept * swept /** @link Features::Swept Features::Swept@endlink  to be edited */
            );
            /** Creates a @link Features::CylinderBuilder Features::CylinderBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CylinderBuilder * CreateCylinderBuilder
            (
                NXOpen::Features::Feature * cylinder /** @link Features::Cylinder Features::Cylinder@endlink  to be edited */
            );
            /** Creates a @link Features::CompositeCurveBuilder Features::CompositeCurveBuilder@endlink   @return  Features.CompositeCurveBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::CompositeCurveBuilder * CreateCompositeCurveBuilder
            (
                NXOpen::Features::Feature * composite_curve /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a @link Features::ThroughCurvesBuilder Features::ThroughCurvesBuilder@endlink   @return  ThroughCurvesBuilder object <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ThroughCurvesBuilder * CreateThroughCurvesBuilder
            (
                NXOpen::Features::Feature * through_curves /** @link Features::ThroughCurves Features::ThroughCurves@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a Studio Surface Builder  @return  StudioSurfaceBuilder
                object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::StudioSurfaceBuilder * CreateStudioSurfaceBuilder
            (
                NXOpen::Features::Feature * studio_surface /** @link Features::StudioSurface Features::StudioSurface@endlink  to be edited */
            );
            /** Creates a @link Features::SectionInertiaAnalysisBuilder Features::SectionInertiaAnalysisBuilder@endlink   @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SectionInertiaAnalysisBuilder * CreateSectionInertiaAnalysisBuilder
            (
                NXOpen::Features::SectionInertiaAnalysis * section_inertia_analysis /** @link Features::SectionInertiaAnalysis Features::SectionInertiaAnalysis@endlink  to be edited */
            );
            /**  @return  True if master cut is visible in view
                                                                 False otherwise  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool GetIsMasterCutVisibleInView
            (
                NXOpen::Features::Feature * masterCut /** @link Features::MasterCutBuilder Features::MasterCutBuilder@endlink  to be tested */,
                NXOpen::CutView * view /** Cut view */
            );
            public: NXOpen::Features::MarkingLineBuilder * CreateMarkingLineBuilder
            (
                NXOpen::Features::Feature * markingLine /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a delete face builder, don't use it until nx502  @return  Features.DeleteFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::DeleteFaceBuilder * CreateDeleteFaceBuilder
            (
                NXOpen::Features::Feature * delete_face /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a resize blend builder, don't use it until nx502  @return  Features.ResizeBlendBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ResizeBlendBuilder * CreateResizeBlendBuilder
            (
                NXOpen::Features::Feature * resize_blend /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Create a move face builder, don't use it until nx502  @return  Features.MoveFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::MoveFaceBuilder * CreateMoveFaceBuilder
            (
                NXOpen::Features::Feature * move_face /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates an offset region builder, don't use it until nx502  @return  Features.OffsetRegionBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::OffsetRegionBuilder * CreateOffsetRegionBuilder
            (
                NXOpen::Features::Feature * offset_region /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Creates a pattern face builder, don't use it until nx502  @return  Features.PatternFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::PatternFaceBuilder * CreatePatternFaceBuilder
            (
                NXOpen::Features::Feature * pattern_face /** @link Features::Feature Features::Feature@endlink  to be edited */
            );
            /** Create a constrain face builder, don't use it until nx502  @return  Features.ConstrainFaceBuilder object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::ConstrainFaceBuilder * CreateConstrainFaceBuilder
            (
                NXOpen::Features::Feature * constrain_face /** @link Features::Feature Features::Feature@endlink  to be edited */
            );


            private: NXOpen::Features::SheetMetal::SheetmetalManager *sheetmetalManager;
            /** Returns the Straight Brake Sheetmetal Manager for this part */
            public: NXOpen::Features::SheetMetal::SheetmetalManager *SheetmetalManager()
            {
                return sheetmetalManager;
            }
            private: NXOpen::Features::SheetMetal::AeroSheetmetalManager *aeroSheetmetalManager;
            /** Returns the aerospace sheet metal manager for this part */
            public: NXOpen::Features::SheetMetal::AeroSheetmetalManager *AeroSheetmetalManager()
            {
                return aeroSheetmetalManager;
            }
            private: NXOpen::Die::DieCollection *dies;
            /** Returns the DieCollection instance belonging to this part */
            public: NXOpen::Die::DieCollection *Dies()
            {
                return dies;
            }
            private: NXOpen::Weld::WeldManager *weldManager;
            /** Returns the WeldManager for this part */
            public: NXOpen::Weld::WeldManager *WeldManager()
            {
                return weldManager;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
