#ifndef NXOpen_FEATURES_HUMANBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_HUMANBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_HumanBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/HumanData.hxx>
#include <NXOpen/HumanPosturePrediction.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class HumanBuilder;
    }
    class CoordinateSystem;
    namespace Features
    {
        class FeatureBuilder;
    }
    class HumanPosturePrediction;
    class Point;
    namespace Features
    {
        class _HumanBuilderBuilder;
        /** Represents a human feature.  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateHumanBuilder Features::FeatureCollection::CreateHumanBuilder@endlink  <br> */
        class NXOPENCPPEXPORT HumanBuilder : public Features::FeatureBuilder
        {
            private: friend class  _HumanBuilderBuilder;
            protected: HumanBuilder();
            /** Sets human name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetName
            (
                const NXString & name /** Name of the human   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the human name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString Name
            (
            );
            /** Sets custom human figure file name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetCustomHumanFileName
            (
                const NXString & custom_file_name /** Figure file name if created from cloning   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the custom human figure file name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString CustomHumanFileName
            (
            );
            /** Sets human stature data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetStatureData
            (
                NXOpen::HumanData::StatureType stature_type /** Flag for percentile stature in database or actual stature measure */,
                double stature /** Stature value                                                     */,
                NXOpen::HumanData::StatureUnitType stature_unit /** Unit for stature                                                  */
            );
            /** Gets human stature data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void GetStatureData
            (
                NXOpen::HumanData::StatureType* stature_type /** Flag for percentile stature in database or actual stature measure */,
                double* stature /** Stature value                                                     */,
                NXOpen::HumanData::StatureUnitType* stature_unit /** Unit for stature                                                  */
            );
            /** Sets human weight data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetWeightData
            (
                NXOpen::HumanData::WeightType weight_type /** Flag for percentile weight in database or actual weight value     */,
                double weight /** Weight value                                                      */,
                NXOpen::HumanData::WeightUnitType weight_unit /** Unit for weight                                                   */
            );
            /** Gets human weight data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void GetWeightData
            (
                NXOpen::HumanData::WeightType* weight_type /** Flag for percentile weight in database or actual weight value     */,
                double* weight /** Weight value                                                      */,
                NXOpen::HumanData::WeightUnitType* weight_unit /** Unit for weight                                                   */
            );
            /** Sets human gender data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetGender
            (
                NXOpen::HumanData::GenderType gender /** Gender of the human */
            );
            /**Returns  the human gender data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::GenderType Gender
            (
            );
            /** Sets database for human  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetDatabase
            (
                NXOpen::HumanData::DatabaseType database /** Indicates database used for creating the human */
            );
            /**Returns  the database for human  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::DatabaseType Database
            (
            );
            /** Sets human position  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetPosition
            (
                const NXOpen::Point3d & location /** Human global location  */
            );
            /**Returns  the human position  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d Position
            (
            );
            /** Sets human orientaion  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetOrientation
            (
                const NXOpen::Matrix3x3 & orientation /** Human orientation matrix relative to the absolute coordinate
                                                                                             system. Must be orthonormal */
            );
            /**Returns  the human orientaion  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Matrix3x3 Orientation
            (
            );
            /** Sets human stature data using expression  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetExpressionStatureData
            (
                const NXString & stature_expression /** Stature expression for custom stature input    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the human stature data using expression  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString ExpressionStatureData
            (
            );
            /** Sets human weight data using expression  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetExpressionWeightData
            (
                const NXString & weight_expression /** Weight expression for custom weight input    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the human weight data using expression  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString ExpressionWeightData
            (
            );
            /** Sets the reference point  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetReferencePoint
            (
                bool associative /** Flag for associative reference point */,
                NXOpen::HumanData::ReferencePointType reference_point_type /** Type of reference point type */,
                NXOpen::Point * reference_point /** Reference point */
            );
            /** Sets the reference point coordinates. A dumb point will be created according to input point coordinates
                        and set as reference point of human. The associative status of the reference will be set as FALSE.  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetReferencePointCoordinates
            (
                const NXOpen::Point3d & reference_point_coordinates /** Reference point coordinates */
            );
            /**Returns  the reference point coordinates  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d ReferencePointCoordinates
            (
            );
            /** Sets the reference point type  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetReferencePointType
            (
                NXOpen::HumanData::ReferencePointType reference_point_type /** Type of reference point type */
            );
            /**Returns  the reference point type  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::ReferencePointType ReferencePointType
            (
            );
            /** Sets the hand shape data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandShapeData
            (
                int hand_type /** Left hand,right hand or both hands */,
                const NXString & handshape_name /** Name of hand shape in the list   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & neutral_handshape_name /** Name of neutral hand shape   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & handshape_lib /** Library of hand shape   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double handshape_value /** Value for applying hand shape */
            );
            /** Set joint limits  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetJointLimits
            (
                NXOpen::HumanData::JointType joint_name /** Joint name */,
                double joint_x_lower_limit /** X value of lower joint limit */,
                double joint_x_upper_limit /** X value of upper joint limit */,
                double joint_y_lower_limit /** Y value of lower joint limit */,
                double joint_y_upper_limit /** Y value of upper joint limit */,
                double joint_z_lower_limit /** Z value of lower joint limit */,
                double joint_z_upper_limit /** Z value of upper joint limit */,
                bool is_symmetric /** Flag of adjust symmetrical joint */
            );
            /** Set joint data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetJointData
            (
                NXOpen::HumanData::JointType joint_name /** Joint name */,
                double joint_x_value /** X value for applying adjust joint */,
                double joint_y_value /** Y value for applying adjust joint */,
                double joint_z_value /** Z value for applying adjust joint */,
                bool is_symmetric /** Flag of adjust symmetrical joint */
            );
            /** Update human  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void DoUpdate
            (
                bool update_posture_prediction /** Flag of update posture prediction */,
                bool update_reference_point /** Flag of update reference point */,
                bool update_reach_zone /** Flag of update reach zone */
            );
            /** Set flag for reset posture  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetResetPosture
            (
            );
            /** Set segment data for segment scaling  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetSegmentScalingData
            (
                NXOpen::HumanData::SegmentScalingType segment_name /** Segment name                            */,
                double depth_factor /** Depth factor value for segment scaling   */,
                double breadth_factor /** Breadth factor value for segment scaling */,
                double length_factor /** Length factor value for segment scaling  */
            );
            /** Set flag for reset segment  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetResetSegment
            (
            );
            /** Set flag for show human skeleton  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetShowSkeleton
            (
                bool show_skeleton /** Flag for showing skeleton */
            );
            /** Set data for advanced scaling  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetAdvancedScalingData
            (
                NXOpen::HumanData::AdvancedScalingType data_name /** Advanced scaling data name  */,
                double data_value /** Advanced scaling data value */
            );
            /** Export custom human file  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void ExportCustomHumanFile
            (
                const NXString & human_file_name /** Custom human file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Export custom posture file  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void ExportCustomPostureFile
            (
                const NXString & posture_file_name /** Custom posture file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Load custom posture file  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void LoadCustomPostureFile
            (
                const NXString & posture_file_name /** Custom posture file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set posture data  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetPostureData
            (
                const NXString & posture_name /** Posture name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & posture_lib /** Posture library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Add hand shape library  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void AddHandShapeLib
            (
                const NXString & handshape_lib /** Hand shape library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Remove hand shape library  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void RemoveHandShapeLib
            (
                const NXString & handshape_lib /** Hand shape library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Add posture library  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void AddPostureLib
            (
                const NXString & posture_lib /** Posture library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Remove posture library  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void RemovePostureLib
            (
                const NXString & posture_lib /** Posture library name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the type of inverse kinematics: dynamic drag or active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsType InverseKinematicsType
            (
            );
            /**Sets  the type of inverse kinematics: dynamic drag or active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetInverseKinematicsType
            (
                NXOpen::HumanData::InverseKinematicsType type /** the type of inverse kinematics */
            );
            /**Returns  the manipulated body parts for dynamic drag  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsBodyParts BodyParts
            (
            );
            /**Sets  the manipulated body parts for dynamic drag  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBodyParts
            (
                NXOpen::HumanData::InverseKinematicsBodyParts bodyParts /** the body parts of dynamic drag */
            );
            /**Returns  the status of lock wrist for dynamic drag of left hand or right hand. If true, the wrist will be locked when
                        dragging hands  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool LockWrist
            (
            );
            /**Sets  the status of lock wrist for dynamic drag of left hand or right hand. If true, the wrist will be locked when
                        dragging hands  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetLockWrist
            (
                bool lockWrist /** the flag of lock wrist of inverse kinematics */
            );
            /**Returns  the motion initiation joint for dynamic drag of left hand or right hand  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsInitJoint InitJoint
            (
            );
            /**Sets  the motion initiation joint for dynamic drag of left hand or right hand  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetInitJoint
            (
                NXOpen::HumanData::InverseKinematicsInitJoint initJoint /** the motion initiation joint: waist or shoulder */
            );
            /**Returns  the status of follow foot move for dynamic drag of left foot or right foot. If true, human follows foot move to keep balance  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool FollowFoot
            (
            );
            /**Sets  the status of follow foot move for dynamic drag of left foot or right foot. If true, human follows foot move to keep balance  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetFollowFoot
            (
                bool followFoot /** the status of follow foot move */
            );
            /**Returns  the position of dynamic drag.  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d InverseKinematicsPosition
            (
            );
            /**Sets  the position of dynamic drag.  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetInverseKinematicsPosition
            (
                const NXOpen::Point3d & position /** dynamic drag global location */
            );
            /**Returns  the orientaion of dynamic drag  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Matrix3x3 InverseKinematicsOrientation
            (
            );
            /**Sets  the orientaion of dynamic drag  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetInverseKinematicsOrientation
            (
                const NXOpen::Matrix3x3 & orientation /** Inverse kinematics orientation matrix relative to
                                                                     the absolute coordinate system. Must be orthonormal */
            );
            /**Returns  the balance type of active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsBalanceType BalanceType
            (
            );
            /**Sets  the balance type of active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBalanceType
            (
                NXOpen::HumanData::InverseKinematicsBalanceType balanceType /** the balance type for active reach: allow step, no step or seated */
            );
            /**Returns  the head eye type of active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::InverseKinematicsHeadEyeType HeadEyeType
            (
            );
            /**Sets  the head eye type of active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHeadEyeType
            (
                NXOpen::HumanData::InverseKinematicsHeadEyeType headEyeType /** the head eye type for active reach: follow last defined or fixate */
            );
            /** Gets hand goal type for active reach  @return  hand goal type for active reach: point, csys or hand figure  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanData::HandGoalType GetHandGoalType
            (
                NXOpen::HumanData::SideType side /** left side or right side                                     */
            );
            /** Sets hand goal type for active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalType
            (
                NXOpen::HumanData::SideType side /** left side or right side                                     */,
                NXOpen::HumanData::HandGoalType goal_type /** hand goal type for active reach: point, csys or hand figure */
            );
            /** Gets the allow normal status of hand goal for active reach  @return  the allow normal flag of hand goal  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool GetHandGoalAllowNormal
            (
                NXOpen::HumanData::SideType side /** left side or right side            */
            );
            /** Sets the allow normal status of hand goal for active reach, if it is TRUE, use the palmcenter site with the target z axis normal
                        to define the hand orientation  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalAllowNormal
            (
                NXOpen::HumanData::SideType side /** left side or right side            */,
                bool allow_normal /** the allow normal flag of hand goal */
            );
            /** Gets the allow rotate status of hand goal for active reach  @return  the allow rotate flag of hand goal  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool GetHandGoalAllowRotate
            (
                NXOpen::HumanData::SideType side /** left side or right side            */
            );
            /** Sets the allow rotate status of hand for active reach, if it is TRUE, rotate the target z axis normal to the best guess
                        directions to define the hand orientation  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalAllowRotate
            (
                NXOpen::HumanData::SideType side /** left side or right side            */,
                bool allow_rotate /** the allow rotate flag of hand goal */
            );
            /** Gets hand goal position for active reach, returns NULL if the hand goal type is not hand figure  @return  hand goal global location for active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point3d GetHandGoalPosition
            (
                NXOpen::HumanData::SideType side /** left side or right side                    */
            );
            /** Sets hand goal position for active reach, the hand goal type should be hand figure  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalPosition
            (
                NXOpen::HumanData::SideType side /** left side or right side   */,
                const NXOpen::Point3d & goal_position /** hand goal global location */
            );
            /** Gets hand goal orientaion for active reach, returns NULL if the hand goal type is not hand figure or point  @return  hand goal orientation matrix
                                                                               relative to the absolute coordinate system. Must be orthonormal  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Matrix3x3 GetHandGoalOrientation
            (
                NXOpen::HumanData::SideType side /** left side or right side                                     */
            );
            /** Sets hand goal orientaion for active reach, the hand goal type should be hand figure or point  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalOrientation
            (
                NXOpen::HumanData::SideType side /** left side or right side                                     */,
                const NXOpen::Matrix3x3 & goal_orientation /** hand goal orientation matrix
                                                                                       relative to the absolute coordinate system. Must be orthonormal */
            );
            /** Gets hand goal point for active reach, returns NULL if the hand goal type is not point  @return  the goal point           <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point * GetHandGoalPoint
            (
                NXOpen::HumanData::SideType side /** left side or right side */
            );
            /** Sets hand goal point for active reach, the hand goal type should be point  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalPoint
            (
                NXOpen::HumanData::SideType side /** left side or right side */,
                NXOpen::Point * goal_point /** the goal point          */
            );
            /** Gets hand goal csys for active reach, returns NULL if the hand goal type is not csys  @return  the goal csys            <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::CoordinateSystem * GetHandGoalCsys
            (
                NXOpen::HumanData::SideType side /** left side or right side */
            );
            /** Sets hand goal csys for active reach, the hand goal type should be set as csys  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetHandGoalCsys
            (
                NXOpen::HumanData::SideType side /** left side or right side */,
                NXOpen::CoordinateSystem * goal_csys /** the goal csys           */
            );
            /** Gets barrier point for active reach, returns NULL if there is no barrier  @return  the barrier point  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Point * GetBarrierPoint
            (
            );
            /** Sets barrier point active reach, the human will be hold by the position of point in active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBarrierPoint
            (
                NXOpen::Point * barrier_point /** the barrier point */
            );
            /** Gets barrier normal dirrection for active reach, returns NULL if the there is no barrier  @return  the normal of barrier plane  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::Vector3d GetBarrierNormal
            (
            );
            /** Sets barrier normal direction for active reach, the human will be hold by the position of point 
                        and orientaion of the barrier normal in active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBarrierNormal
            (
                const NXOpen::Vector3d & barrier_normal /** the normal of barrier plane, use the arbitrary normal direction
                                                                     if normal is not set */
            );
            /** Gets barrier csys for active reach, returns NULL if there is no barrier  @return  the barrier csys  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::CoordinateSystem * GetBarrierCsys
            (
            );
            /** Sets barrier csys for active reach, the human will be hold by the position and orientaion of the csys in
                        active reach  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBarrierCsys
            (
                NXOpen::CoordinateSystem * barrier_csys /** the goal csys */
            );
            /**Returns  the current study name of comfort analysis  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXString CurrentComfortStudyName
            (
            );
            /**Sets  the current study name of comfort analysis  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetCurrentComfortStudyName
            (
                const NXString & studyName /** the current comfort study name */
            );
            /** Get the default body parts site CSYS display flag.  @return  the body site display flag  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: bool GetBodySiteDisplayFlag
            (
                NXOpen::HumanData::EditDisplayBodyParts bodyPart /** the body part of human     */
            );
            /** Set the default body parts site CSYS display flag. If true, then display the site CSYS of human default body parts.  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetBodySiteDisplayFlag
            (
                NXOpen::HumanData::EditDisplayBodyParts bodyPart /** the body part of human     */,
                bool displayFlag /** the body site display flag */
            );
            /** Get the segment site name of edit human display.  @return  the segment sites name  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: std::vector<NXString> GetSegmentSitesName
            (
            );
            /** Set the segment site name of edit human display.  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: void SetSegmentSitesName
            (
                std::vector<NXString> & segmentSitesName /** the segment sites name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Get the posture prediction object from human builder. Posture prediction should be done first before
                        get it from human builder  @return  @link HumanPosturePrediction HumanPosturePrediction@endlink  to be edited, NULL then no posture prediction has been done  <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
            public: NXOpen::HumanPosturePrediction * GetPosturePrediction
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
