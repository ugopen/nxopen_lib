#ifndef NXOpen_GEOMETRICUTILITIES_VALUETESTBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_VALUETESTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ValueTestBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricUtilities_ValueTestBuilder.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ValueTestBuilder;
    }
    class Builder;
    class NXColor;
    namespace GeometricUtilities
    {
        class _ValueTestBuilderBuilder;
        /**
            Represents a @link ValueTestBuilder ValueTestBuilder@endlink 
             <br> Temporary Fix <br> */
        class NXOPENDEBUGSESSIONCPPEXPORT ValueTestBuilder : public Builder
        {
            private: friend class  _ValueTestBuilderBuilder;
            protected: ValueTestBuilder();
            /**Returns  the keyin  <br> License requirements : None */
            public: double Keyin
            (
            );
            /**Sets  the keyin  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetKeyin
            (
                double keyin /** keyin */ 
            );
            /**Returns  the icon keyin  <br> License requirements : None */
            public: double IconKeyin
            (
            );
            /**Sets  the icon keyin  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIconKeyin
            (
                double iconKeyin /** iconkeyin */ 
            );
            /**Returns  the spin  <br> License requirements : None */
            public: double Spin
            (
            );
            /**Sets  the spin  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSpin
            (
                double spin /** spin */ 
            );
            /**Returns  the scale  <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scale  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the scale default  <br> License requirements : None */
            public: double ScaleDefault
            (
            );
            /**Sets  the scale default  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScaleDefault
            (
                double scaleDefault /** scaledefault */ 
            );
            /**Returns  the scale keyin  <br> License requirements : None */
            public: double ScaleKeyin
            (
            );
            /**Sets  the scale keyin  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScaleKeyin
            (
                double scaleDefault /** scaledefault */ 
            );
            /**Returns  the int keyin  <br> License requirements : None */
            public: int IntKeyin
            (
            );
            /**Sets  the int keyin  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntKeyin
            (
                int intKeyin /** intkeyin */ 
            );
            /**Returns  the int spin  <br> License requirements : None */
            public: int IntSpin
            (
            );
            /**Sets  the int spin  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntSpin
            (
                int intSpin /** intspin */ 
            );
            /**Returns  the int scale  <br> License requirements : None */
            public: int IntScale
            (
            );
            /**Sets  the int scale  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntScale
            (
                int intScale /** intscale */ 
            );
            /**Returns  the int scale keyin  <br> License requirements : None */
            public: int IntScaleKeyin
            (
            );
            /**Sets  the int scale keyin  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIntScaleKeyin
            (
                int intScale /** intscale */ 
            );
            /**Sets  the color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /** Sets the array of colors  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMultipleColors
            (
                const std::vector<NXOpen::NXColor *> & colors /** colors */ 
            );
            /** Sets the RGB color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRgbColor
            (
                const std::vector<double> & rgb /** Array of 3 rgb values, each between 0 and 1 */
            );
            /**Returns  the color  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::NXColor * Color
            (
            );
            /** Returns the colors  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::NXColor *> GetMultipleColors
            (
            );
            /** Returns the RGB color  @return  Array of 3 rgb values, each between 0 and 1  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<double> GetRgbColor
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
