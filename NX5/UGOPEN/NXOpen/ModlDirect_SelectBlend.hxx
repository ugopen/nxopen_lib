#ifndef NXOpen_MODLDIRECT_SELECTBLEND_HXX_INCLUDED
#define NXOpen_MODLDIRECT_SELECTBLEND_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModlDirect_SelectBlend.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/ModlDirect_SelectBlend.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace ModlDirect
    {
        class SelectBlend;
    }
    class Face;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class ScCollector;
    namespace ModlDirect
    {
        class _SelectBlendBuilder;
        /**
            Represents a @link ModlDirect::SelectBlend ModlDirect::SelectBlend@endlink 
            Allows user to specify blend faces.
            */
        class NXOPENCPPEXPORT SelectBlend : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _SelectBlendBuilder;
            protected: SelectBlend();
            /**Returns  the blend faces collector.  <br> License requirements : None */
            public: NXOpen::ScCollector * FaceCollector
            (
            );
            /** Auto regonize the adjacent blends of input base faces  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RecognizeBlends
            (
                const std::vector<NXOpen::Face *> & baseFaces /** the base faces */,
                std::vector<NXOpen::Face *> & blends /** the adjacent blend faces */
            );
            /** Include the use selected blend face  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void IncludeBlend
            (
                NXOpen::Face * blendFace /** the blend face to include */
            );
            /** Exclude the user de-selected blend face  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void ExcludeBlend
            (
                NXOpen::Face * blendFace /** the blend face to exclude */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
