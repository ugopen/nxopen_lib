#ifndef NXOpen_OPTIONS_DRAFTINGSTANDARDCHANGELIST_HXX_INCLUDED
#define NXOpen_OPTIONS_DRAFTINGSTANDARDCHANGELIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Options_DraftingStandardChangeList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Options_ChangeList.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Options
    {
        class DraftingStandardChangeList;
    }
    namespace Options
    {
        /** 
        Records changes to option values at the specified level. 

         <br> 
        A DraftingStandardChangeList is created with a given level, and all of the edit operations apply to that
        level for drafting standard defaults.  Each method for setting a value throws an error if the option value 
        is locked at a higher level, or the specified value is not valid. 
         <br> 
         <br> 
        All methods in this class use an option
        name as a unique identifier for accessing individual options and throw an error if an
        option with the given name is not found. All existing option names and their allowed
        values are described in the Online Documentation. 
         <br> 
         <br> Use @link Options::OptionsManager::NewOptionsDraftingStandardChangeList Options::OptionsManager::NewOptionsDraftingStandardChangeList@endlink  to create a new instance of this class <br> */
        class NXOPENCPPEXPORT DraftingStandardChangeList : public TransientObject
        {
            public: explicit DraftingStandardChangeList(void *ptr);
            /**Returns  the current level of options   <br> License requirements : None */
            public: NXOpen::Options::LevelType CurrentLevel
            (
            );
            /** Sets the value of an @link  Options::OptionTypeInt   Options::OptionTypeInt @endlink  option. 
                If the option is of type @link  Options::OptionTypeReal   Options::OptionTypeReal @endlink  then the value parameter is converted to double.
                Throws an error if the option type is not @link  Options::OptionTypeInt   Options::OptionTypeInt @endlink  or @link  Options::OptionTypeReal   Options::OptionTypeReal @endlink .  <br> License requirements : None */
            public: void SetValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** Option value. */
            );
            /** Sets the value of a @link  Options::OptionTypeReal   Options::OptionTypeReal @endlink  option.
                    Throws an error if the option type is not @link  Options::OptionTypeReal   Options::OptionTypeReal @endlink . 
                 <br> License requirements : None */
            public: void SetValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** Option value. */
            );
            /** Sets the value of a @link  Options::OptionTypeString   Options::OptionTypeString @endlink  option. 
                    Throws an error if the option type is not @link  Options::OptionTypeString   Options::OptionTypeString @endlink . 
                 <br> License requirements : None */
            public: void SetValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /** Option value   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of a @link  Options::OptionTypeStringList   Options::OptionTypeStringList @endlink  option.
                    Throws an error if the option type is not @link  Options::OptionTypeStringList   Options::OptionTypeStringList @endlink .     
                  <br> License requirements : None */
            public: void SetValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                std::vector<NXString> & value /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of a @link  Options::OptionTypeLogical   Options::OptionTypeLogical @endlink  option.
                    Throws an error if the option type is not @link  Options::OptionTypeLogical   Options::OptionTypeLogical @endlink .         
                  <br> License requirements : None */
            public: void SetValue
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool value /** Option value */
            );
            /** Sets the user comment. Throws an error if the value does not exist at this level.  <br> License requirements : None */
            public: void SetUserComment
            (
                const NXString & name /** Option name.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & comment /** User comment text. */
            );
            /** Lock option value.   <br> License requirements : None */
            public: void LockValue
            (
                const NXString & name /** Option name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Unlock option value.  <br> License requirements : None */
            public: void UnlockValue
            (
                const NXString & name /** Option name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Saves the drafting standard defaults at the current level.  <br> License requirements : None */
            public: void Save
            (
            );
            /** Dispose the changes <br> License requirements : None */
            public: virtual ~DraftingStandardChangeList();
            /** Load the drafting standard defaults at the current level.  <br> License requirements : None */
            public: void Load
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
