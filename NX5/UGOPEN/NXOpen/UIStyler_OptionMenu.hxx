#ifndef NXOpen_UISTYLER_OPTIONMENU_HXX_INCLUDED
#define NXOpen_UISTYLER_OPTIONMENU_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_OptionMenu.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class OptionMenu;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        /** Represents a OptionMenu for UI Styler. */
        class NXOPENUICPPEXPORT OptionMenu : public UIStyler::StylerItem
        {
            public: typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            public: explicit OptionMenu(void *ptr);
            /**Registers activate callback. This method should be called before calling @link  Dialog::Show   Dialog::Show @endlink  or @link  Dialog::RegisterWithUiMenu   Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::OptionMenu::Activate&  activateevent /** Callback for activate event */,
                bool is_dialog_launching_event /** TRUE if dialog is going to launch, FALSE if not */
            );
            /** Set an array of bitmap filenames  <br> License requirements : None */
            public: void SetBitmap
            (
                std::vector<NXString> & bitmaps /** An array of one or more bitmap filenames. 
                        If all bitmaps for the option menu reside in the same file, specify an array of just one entry, 
                        which contains the bitmap filename for this attribute. All existing choices for the option menu 
                        remains intact when this attribute is set. Only the bitmaps are changed. Note that the number of 
                        bitmaps must match the number of existing choices.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns an array of bitmaps  @return   <br> License requirements : None */
            public: std::vector<NXString> GetBitmap
            (
            );
            /** Sets label  <br> License requirements : None */
            public: void SetLabel
            (
                const NXString & str_label /** Text to be set for the descriptive label.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set an array of items  <br> License requirements : None */
            public: void SetItems
            (
                std::vector<NXString> & str_list_array /** An array of new choices to be used for the 
                        dialog item. Note that this removes all existing choices (both text and bitmaps)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns an array if items  @return   <br> License requirements : None */
            public: std::vector<NXString> GetItems
            (
            );
            /**Sets  the item value  <br> License requirements : None */
            public: void SetItemValue
            (
                int subitem_index /** Zero-based index indicating the choice to be selected. 
                        It must be in the range of existing choices. */
            );
            /**Returns  the item value  <br> License requirements : None */
            public: int ItemValue
            (
            );
            /** Sets the sensitivity  <br> License requirements : None */
            public: void SetSensitivity
            (
                int subitem_index /** If the entire dialog item should change to the new Sensitivity state, 
                        set this field to UF_STYLER_NO_SUB_INDEX. If only one subitem should change to the new sensitivity state,
                        set this field to its zero-based index. */,
                bool type /** TRUE if sensitive, FALSE if insensitive */
            );
            /** Gets the sensitivity  @return   <br> License requirements : None */
            public: bool GetSensitivity
            (
            );
            /**Sets  the visibility  <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** TRUE if visible, FALSE if invisible */
            );
            /**Returns  the visibility  <br> License requirements : None */
            public: bool Visibility
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
