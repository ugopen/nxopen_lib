#ifndef NXOpen_TRACELINECOLLECTION_HXX_INCLUDED
#define NXOpen_TRACELINECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     TracelineCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AutomaticTraceline.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class TracelineCollection;
    class Part;
    class Traceline;
    namespace Assemblies
    {
        class Explosion;
    }
    class AutomaticTraceline;
    class Direction;
    class Point;
    /** Represents a collection of tracelines  <br> To obtain an instance of this class, refer to @link Part Part@endlink  <br> */
    class NXOPENCPPEXPORT TracelineCollection : public TaggedObjectCollection
    {
        private: NXOpen::Part* m_owner;
        public: explicit TracelineCollection(NXOpen::Part *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Iterator for accessing the contents of the collection. */
        class iterator
        {
        public:
            typedef Traceline * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }
            explicit iterator(NXOpen::TracelineCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }
            iterator(const iterator &other)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::TracelineCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Create an automatic traceline  @return  Created traceline  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
        public: NXOpen::AutomaticTraceline * CreateAutomaticTraceline
        (
            NXOpen::Assemblies::Explosion * explosion /** Explosion */,
            NXOpen::Point * start_point /** Start point */,
            NXOpen::Direction * start_direction /** Start direction */,
            NXOpen::Point * end_point /** End point */,
            NXOpen::Direction * end_direction /** End direction */,
            const NXOpen::Matrix3x3 & orientation /** Orientation */,
            NXOpen::AutomaticTraceline::ModeOption mode /** Mode */,
            int solution /** Solution number */,
            double start_offset /** Start offset */,
            double end_offset /** End offset */,
            const std::vector<int> & segment_indices /** Segment indices */,
            const std::vector<double> & segment_lengths /** Segment lengths */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
