#ifndef NXOpen_ROUTING_WIRE_HXX_INCLUDED
#define NXOpen_ROUTING_WIRE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Wire.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_IPath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class Wire;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    class NXObject;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class IPath;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _WireBuilder;
        /** The Routing Wire object is the set of information needed to define
             * a ROUTE_wire.   <br> Creator not available in KF. <br> */
        class NXOPENCPPEXPORT Wire : public NXObject, public virtual Routing::IPath
        {
            private: friend class  _WireBuilder;
            protected: Wire();
            /** the stocks for the wire.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::Stock *> GetStock
            (
            );
            /** the segments for the wire.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: std::vector<NXOpen::Routing::ISegment *> GetSegments
            (
            );
            /** Returns the list of all of the segments contained in the IPath  @return  list of all of the segments in this IPath object  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual std::vector<NXOpen::Routing::ISegment *> GetSegmentList
            (
            );
            /** Adds segment(s) to an IPath object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void AddSegmentsToList
            (
                const std::vector<NXOpen::Routing::ISegment *> & objs /** list of segments that are to be added */
            );
            /** Removes segment(s) from the IPath object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void DelSegmentsFromList
            (
                const std::vector<NXOpen::Routing::ISegment *> & objs /** list of segments that are to be deleted */
            );
            /**Returns  the start ControlPoint for an IPath object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::ControlPoint * ControlPointStart
            (
            );
            /**Returns  the end ControlPoint for an IPath object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::ControlPoint * ControlPointEnd
            (
            );
            /**Sets  the start ControlPoint for an IPath object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetControlPointStart
            (
                NXOpen::Routing::ControlPoint * start /** start ControlPoint for the IPath object */
            );
            /**Sets  the end ControlPoint for an IPath object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetControlPointEnd
            (
                NXOpen::Routing::ControlPoint * end /** end ControlPoint for the IPath object */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
