#ifndef NXOpen_GEOMETRICUTILITIES_DRAFTVARIABLEANGLEDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_DRAFTVARIABLEANGLEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_DraftVariableAngleData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class DraftVariableAngleData;
    }
    namespace GeometricUtilities
    {
        class DraftPointData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _DraftVariableAngleDataBuilder;
        /** Represents data containing variable angle draft point data objects
             <br> This class will not be created by the user. <br> */
        class NXOPENCPPEXPORT DraftVariableAngleData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _DraftVariableAngleDataBuilder;
            protected: DraftVariableAngleData();
            /** Adds @link GeometricUtilities::DraftPointData GeometricUtilities::DraftPointData@endlink  objects	
            		  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void AddDraftPoints
            (
                const std::vector<NXOpen::GeometricUtilities::DraftPointData *> & points /** Array of DraftPointData Objects */
            );
            /** Removes @link GeometricUtilities::DraftPointData GeometricUtilities::DraftPointData@endlink  objects
            		  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveDraftPoints
            (
                const std::vector<NXOpen::GeometricUtilities::DraftPointData *> & points /** Array of DraftPointData Objects */
            );
            /** Returns @link GeometricUtilities::DraftPointData GeometricUtilities::DraftPointData@endlink  objects
            		  @return  Array of DraftPointData Objects  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: std::vector<NXOpen::GeometricUtilities::DraftPointData *> GetDraftPoints
            (
            );
            /** Returns number of @link GeometricUtilities::DraftPointData GeometricUtilities::DraftPointData@endlink  objects
            		  @return  Number of DraftPointData Objects  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int GetNumberOfDraftPoints
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
