#ifndef NXOpen_PREFERENCES_WORKPLANE_HXX_INCLUDED
#define NXOpen_PREFERENCES_WORKPLANE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_WorkPlane.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class WorkPlane;
    }
    class NXObject;
    namespace Preferences
    {
        class _WorkPlaneBuilder;
        /** Represents the set of WorkPlanePreferences preferences applicable to part. Sets parameters for the 
        Graphics Window grid and the Work Plane Emphasis mode.  <br> An instance of this class can be obtained using @link Preferences::SessionPreferences::WorkPlane Preferences::SessionPreferences::WorkPlane@endlink 
              or @link Preferences::PartPreferences::Workplane Preferences::PartPreferences::Workplane@endlink  <br> */
        class NXOPENCPPEXPORT WorkPlane : public NXObject
        {
            /** Describes whether the Grid type selected is Polar or Rectangular */
            public: enum Grid
            {
                GridPolar/** Polar Grid */,
                GridRectangular/** Rectangular Grid */
            };

            private: friend class  _WorkPlaneBuilder;
            protected: WorkPlane();
            /**Returns  the show and hide grid flag. If true displays the grid pattern in the graphics window else hides   <br> License requirements : None */
            public: bool ShowGrid
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link ShowGrid() ShowGrid@endlink instead.
            @deprecated
            */
            public: bool GetShowGrid
            (
            ) { return this->ShowGrid(); }
            /**Sets  the show and hide grid flag. If true displays the grid pattern in the graphics window else hides   <br> License requirements : None */
            public: void SetShowGrid
            (
                bool show_grid /** show grid */ 
            );
            /**Returns  the show and hide grid labels flag. If true displays the grid labels in the graphics window else hides   <br> License requirements : None */
            public: bool ShowLabels
            (
            );
            /**Sets  the show and hide grid labels flag. If true displays the grid labels in the graphics window else hides   <br> License requirements : None */
            public: void SetShowLabels
            (
                bool show_labels /** show labels */ 
            );
            /**Returns  the snap to grid flag. If true enables snapping (moves an indicated screen position point to the nearest 
                grid point). Points snap to the grid even when Show Grid is off.  <br> License requirements : None */
            public: bool SnapToGrid
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link SnapToGrid() SnapToGrid@endlink instead.
            @deprecated
            */
            public: bool GetSnapToGrid
            (
            ) { return this->SnapToGrid(); }
            /**Sets  the snap to grid flag. If true enables snapping (moves an indicated screen position point to the nearest 
                grid point). Points snap to the grid even when Show Grid is off.  <br> License requirements : None */
            public: void SetSnapToGrid
            (
                bool snap_to_grid /** snap to grid */ 
            );
            /**Returns  the grid non uniform flag. If true grid is non uniform. A uniform grid has the same spacing in X and Y. 
                A non-uniform grid allows for different spacing in X and Y.  <br> License requirements : None */
            public: bool GridIsNonUniform
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridIsNonUniform() GridIsNonUniform@endlink instead.
            @deprecated
            */
            public: bool GetGridIsNonUniform
            (
            ) { return this->GridIsNonUniform(); }
            /**Sets  the grid non uniform flag. If true grid is non uniform. A uniform grid has the same spacing in X and Y. 
                A non-uniform grid allows for different spacing in X and Y.  <br> License requirements : None */
            public: void SetGridIsNonUniform
            (
                bool grid_is_non_uniform /** grid is non uniform */ 
            );
            /**Returns  the emphasis flag for rectangular grid    <br> License requirements : None */
            public: bool RectangularGridEmphasis
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link RectangularGridEmphasis() RectangularGridEmphasis@endlink instead.
            @deprecated
            */
            public: bool GetRectangularGridEmphasis
            (
            ) { return this->RectangularGridEmphasis(); }
            /**Sets  the emphasis flag for rectangular grid    <br> License requirements : None */
            public: void SetRectangularGridEmphasis
            (
                bool rectangular_grid_emphasis /** rectangular grid emphasis */ 
            );
            /**Returns  the emphasis flag for polar grid  <br> License requirements : None */
            public: bool PolarGridEmphasis
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link PolarGridEmphasis() PolarGridEmphasis@endlink instead.
            @deprecated
            */
            public: bool GetPolarGridEmphasis
            (
            ) { return this->PolarGridEmphasis(); }
            /**Sets  the emphasis flag for polar grid  <br> License requirements : None */
            public: void SetPolarGridEmphasis
            (
                bool isPolarGridEmphasisOn /** ispolargridemphasison */ 
            );
            /**Returns  the grid color. Specifies the color of grid.   <br> License requirements : None */
            public: int GridColor
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridColor() GridColor@endlink instead.
            @deprecated
            */
            public: int GetGridColor
            (
            ) { return this->GridColor(); }
            /**Sets  the grid color. Specifies the color of grid.   <br> License requirements : None */
            public: void SetGridColor
            (
                int grid_color /** grid color */ 
            );
            /**Returns  the grid type. It may be polar or rectangular   <br> License requirements : None */
            public: NXOpen::Preferences::WorkPlane::Grid GridType
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridType() GridType@endlink instead.
            @deprecated
            */
            public: NXOpen::Preferences::WorkPlane::Grid GetGridType
            (
            ) { return this->GridType(); }
            /**Sets  the grid type. It may be polar or rectangular   <br> License requirements : None */
            public: void SetGridType
            (
                NXOpen::Preferences::WorkPlane::Grid grid_type /** grid type */ 
            );
            /**Returns  the grid line every XC spacing. Draws an emphasis line every n grid lines.  <br> License requirements : None */
            public: int GridLineEveryXcSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridLineEveryXcSpacing() GridLineEveryXcSpacing@endlink instead.
            @deprecated
            */
            public: int GetGridLineEveryXcSpacing
            (
            ) { return this->GridLineEveryXcSpacing(); }
            /**Sets  the grid line every XC spacing. Draws an emphasis line every n grid lines.  <br> License requirements : None */
            public: void SetGridLineEveryXcSpacing
            (
                int grid_line_every_x /** grid line every x */ 
            );
            /**Returns  the grid line every YC spacing. Draws an emphasis line every n grid lines.  <br> License requirements : None */
            public: int GridLineEveryYcSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridLineEveryYcSpacing() GridLineEveryYcSpacing@endlink instead.
            @deprecated
            */
            public: int GetGridLineEveryYcSpacing
            (
            ) { return this->GridLineEveryYcSpacing(); }
            /**Sets  the grid line every YC spacing. Draws an emphasis line every n grid lines.  <br> License requirements : None */
            public: void SetGridLineEveryYcSpacing
            (
                int grid_line_every_y /** grid line every y */ 
            );
            /**Returns  the emphasis every XC spacing. Places an emphasis (solid) line every n lines   <br> License requirements : None */
            public: int GridEmphasisEveryXcSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridEmphasisEveryXcSpacing() GridEmphasisEveryXcSpacing@endlink instead.
            @deprecated
            */
            public: int GetGridEmphasisEveryXcSpacing
            (
            ) { return this->GridEmphasisEveryXcSpacing(); }
            /**Sets  the emphasis every XC spacing. Places an emphasis (solid) line every n lines   <br> License requirements : None */
            public: void SetGridEmphasisEveryXcSpacing
            (
                int grid_emphasis_every_x /** grid emphasis every x */ 
            );
            /**Returns  the grid unit XC spacing. Determines where the system draws grid lines.   <br> License requirements : None */
            public: double GridUnitXcSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridUnitXcSpacing() GridUnitXcSpacing@endlink instead.
            @deprecated
            */
            public: double GetGridUnitXcSpacing
            (
            ) { return this->GridUnitXcSpacing(); }
            /**Sets  the grid unit XC spacing. Determines where the system draws grid lines.   <br> License requirements : None */
            public: void SetGridUnitXcSpacing
            (
                double grid_unit_xc_spacing /** grid unit xc spacing */ 
            );
            /**Returns  the emphasis every YC spacing. Places an emphasis (solid) line every n lines   <br> License requirements : None */
            public: int GridEmphasisEveryYcSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridEmphasisEveryYcSpacing() GridEmphasisEveryYcSpacing@endlink instead.
            @deprecated
            */
            public: int GetGridEmphasisEveryYcSpacing
            (
            ) { return this->GridEmphasisEveryYcSpacing(); }
            /**Sets  the emphasis every YC spacing. Places an emphasis (solid) line every n lines   <br> License requirements : None */
            public: void SetGridEmphasisEveryYcSpacing
            (
                int grid_emphasis_every_y /** grid emphasis every y */ 
            );
            /**Returns  the grid unit YC spacing. Determines where the system draws grid lines.  <br> License requirements : None */
            public: double GridUnitYcSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridUnitYcSpacing() GridUnitYcSpacing@endlink instead.
            @deprecated
            */
            public: double GetGridUnitYcSpacing
            (
            ) { return this->GridUnitYcSpacing(); }
            /**Sets  the grid unit YC spacing. Determines where the system draws grid lines.  <br> License requirements : None */
            public: void SetGridUnitYcSpacing
            (
                double grid_unit_yc_spacing /** grid unit yc spacing */ 
            );
            /**Returns  the grid unit radial spacing.This value is the number of inches or millimeters between 
                successive concentric circles of grid points that are centered at the WCS origin.   <br> License requirements : None */
            public: double GridUnitRadialSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridUnitRadialSpacing() GridUnitRadialSpacing@endlink instead.
            @deprecated
            */
            public: double GetGridUnitRadialSpacing
            (
            ) { return this->GridUnitRadialSpacing(); }
            /**Sets  the grid unit radial spacing.This value is the number of inches or millimeters between 
                successive concentric circles of grid points that are centered at the WCS origin.   <br> License requirements : None */
            public: void SetGridUnitRadialSpacing
            (
                double grid_unit_radial_spacing /** grid unit radial spacing */ 
            );
            /**Returns  the grid unit angular spacing. This is the number of degrees between successive 
                rays of grid points that emanate from the WCS origin   <br> License requirements : None */
            public: double GridUnitAngularSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridUnitAngularSpacing() GridUnitAngularSpacing@endlink instead.
            @deprecated
            */
            public: double GetGridUnitAngularSpacing
            (
            ) { return this->GridUnitAngularSpacing(); }
            /**Sets  the grid unit angular spacing. This is the number of degrees between successive 
                rays of grid points that emanate from the WCS origin   <br> License requirements : None */
            public: void SetGridUnitAngularSpacing
            (
                double grid_unit_angular_spacing /** grid unit angular spacing */ 
            );
            /**Returns  the grid emphasis every radial spacing   <br> License requirements : None */
            public: int GridEmphasisRadialSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridEmphasisRadialSpacing() GridEmphasisRadialSpacing@endlink instead.
            @deprecated
            */
            public: int GetGridEmphasisRadialSpacing
            (
            ) { return this->GridEmphasisRadialSpacing(); }
            /**Sets  the grid emphasis every radial spacing   <br> License requirements : None */
            public: void SetGridEmphasisRadialSpacing
            (
                int grid_emphasis_radial_spacing /** grid emphasis radial spacing */ 
            );
            /**Returns  the grid emphasis every angular spacing.  Draws an emphasis line every n grid lines   <br> License requirements : None */
            public: int GridEmphasisAngularSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridEmphasisAngularSpacing() GridEmphasisAngularSpacing@endlink instead.
            @deprecated
            */
            public: int GetGridEmphasisAngularSpacing
            (
            ) { return this->GridEmphasisAngularSpacing(); }
            /**Sets  the grid emphasis every angular spacing.  Draws an emphasis line every n grid lines   <br> License requirements : None */
            public: void SetGridEmphasisAngularSpacing
            (
                int grid_emphasis_angular_spacing /** grid emphasis angular spacing */ 
            );
            /**Returns  the grid line every radial spacing   <br> License requirements : None */
            public: int GridLineEveryRadialSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridLineEveryRadialSpacing() GridLineEveryRadialSpacing@endlink instead.
            @deprecated
            */
            public: int GetGridLineEveryRadialSpacing
            (
            ) { return this->GridLineEveryRadialSpacing(); }
            /**Sets  the grid line every radial spacing   <br> License requirements : None */
            public: void SetGridLineEveryRadialSpacing
            (
                int grid_line_every_radial_spacing /** grid line every radial spacing */ 
            );
            /**Returns  the grid line every angular spacing.   <br> License requirements : None */
            public: int GridLineEveryAngularSpacing
            (
            );
            /** <b>Deprecated</b>:<br>
            &nbsp;&nbsp;&nbsp;Use @link GridLineEveryAngularSpacing() GridLineEveryAngularSpacing@endlink instead.
            @deprecated
            */
            public: int GetGridLineEveryAngularSpacing
            (
            ) { return this->GridLineEveryAngularSpacing(); }
            /**Sets  the grid line every angular spacing.   <br> License requirements : None */
            public: void SetGridLineEveryAngularSpacing
            (
                int grid_line_every_angular_spacing /** grid line every angular spacing */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
