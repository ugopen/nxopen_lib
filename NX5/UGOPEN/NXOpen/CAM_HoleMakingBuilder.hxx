#ifndef NXOpen_CAM_HOLEMAKINGBUILDER_HXX_INCLUDED
#define NXOpen_CAM_HOLEMAKINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_HoleMakingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class HoleMakingBuilder;
    }
    namespace CAM
    {
        class FeedsBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    namespace CAM
    {
        class _HoleMakingBuilderBuilder;
        /** Represents a HoleMaking Builder  <br> To create a new instance of this class, use @link CAM::OperationCollection::CreateHoleMakingBuilder CAM::OperationCollection::CreateHoleMakingBuilder@endlink  <br> */
        class NXOPENCPPEXPORT HoleMakingBuilder : public CAM::OperationBuilder
        {
            /** Available types for Control Point Type in Hole Making Operation */
            public: enum ControlPointTypes
            {
                ControlPointTypesToolTip/** tool tip */,
                ControlPointTypesShoulder/** shoulder */
            };

            /** Available types for model depth in Hole Making Operation */
            public: enum ModelDepthTypes
            {
                ModelDepthTypesAlways/** always */,
                ModelDepthTypesRule/** rule */
            };

            private: friend class  _HoleMakingBuilderBuilder;
            protected: HoleMakingBuilder();
            /**Returns  the Engage Feed Rate  <br> License requirements : cam_base ("CAM BASE") */
            public: double EngageFeedRate
            (
            );
            /**Sets  the Engage Feed Rate  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEngageFeedRate
            (
                double engageFeed /** The Engage Feed Rate value */
            );
            /**Returns  the Rapid Feed Rate  <br> License requirements : cam_base ("CAM BASE") */
            public: double RapidFeedRate
            (
            );
            /**Sets  the Rapid Feed Rate  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRapidFeedRate
            (
                double rapidFeed /** The Rapid Feed Rate value */
            );
            /**Returns  the clearance vertical builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * ClrVertBuilder
            (
            );
            /**Returns  the Clearance Distance builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * ClrDistBuilder
            (
            );
            /**Returns  the Allow Oversize Tool flag  <br> License requirements : None */
            public: bool AllowOversizeTool
            (
            );
            /**Sets  the Allow Oversize Tool flag  <br> License requirements : None */
            public: void SetAllowOversizeTool
            (
                bool allowOversize /** the Allow Oversize Tool flag */
            );
            /**Returns  the oversize tool percent builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * OversizeToolPercentBuilder
            (
            );
            /**Returns  the control point type  <br> License requirements : None */
            public: NXOpen::CAM::HoleMakingBuilder::ControlPointTypes ControlPointType
            (
            );
            /**Sets  the control point type  <br> License requirements : None */
            public: void SetControlPointType
            (
                NXOpen::CAM::HoleMakingBuilder::ControlPointTypes controlPoint /** the control point type */
            );
            /**Returns  the rapto offset builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * RaptoOffsetBuilder
            (
            );
            /**Returns  the rapto offset flag  <br> License requirements : None */
            public: bool RaptoOffsetToggle
            (
            );
            /**Sets  the rapto offset flag  <br> License requirements : None */
            public: void SetRaptoOffsetToggle
            (
                bool raptoOffset /** the rapto offset flag */
            );
            /**Returns  the user defined tool path flag  <br> License requirements : None */
            public: bool UseUserDefinedTp
            (
            );
            /**Sets  the user defined tool path flag  <br> License requirements : None */
            public: void SetUseUserDefinedTp
            (
                bool useUserTp /** the user defined tool path flag */
            );
            /**Returns  the check flute length flag  <br> License requirements : None */
            public: bool CheckFluteLength
            (
            );
            /**Sets  the check flute length flag  <br> License requirements : None */
            public: void SetCheckFluteLength
            (
                bool checkFluteLength /** the check flute length flag */
            );
            /**Returns  the check tool length flag  <br> License requirements : None */
            public: bool CheckToolLength
            (
            );
            /**Sets  the check tool length flag  <br> License requirements : None */
            public: void SetCheckToolLength
            (
                bool checkToolLength /** the check tool length flag */
            );
            /**Returns  the use query flag  <br> License requirements : None */
            public: bool UseQuery
            (
            );
            /**Sets  the use query flag  <br> License requirements : None */
            public: void SetUseQuery
            (
                bool useQuery /** the use query flag */
            );
            /**Returns  the model depth type  <br> License requirements : None */
            public: NXOpen::CAM::HoleMakingBuilder::ModelDepthTypes ModelDepthType
            (
            );
            /**Sets  the model depth type  <br> License requirements : None */
            public: void SetModelDepthType
            (
                NXOpen::CAM::HoleMakingBuilder::ModelDepthTypes modelDepth /** the model depth type */
            );
            /**Returns  the blind hole stock builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * BlindHoleStockBuilder
            (
            );
            /**Returns  the thru clear builder (inheritable double)  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableDoubleBuilder * ThruClearBuilder
            (
            );
            /**Returns  the feeds and speeds builder  <br> License requirements : None */
            public: NXOpen::CAM::FeedsBuilder * FeedsBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
