#ifndef NXOpen_ANNOTATIONS_COMPONENTDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_COMPONENTDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_ComponentData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_ArcComponent.hxx>
#include <NXOpen/Annotations_ArrowComponent.hxx>
#include <NXOpen/Annotations_LineComponent.hxx>
#include <NXOpen/Annotations_TextComponent.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class ComponentData;
    }
    namespace Annotations
    {
        class ArcComponent;
    }
    namespace Annotations
    {
        class ArrowComponent;
    }
    namespace Annotations
    {
        class LineComponent;
    }
    namespace Annotations
    {
        class TextComponent;
    }
    class DisplayableObject;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        /** A ComponentData object can be used to query the components of an annotation.  
                These components include line components, arrow components, arc components,
                and text components.  These components can then be queried for type
                specific information about the object.  */
        class NXOPENCPPEXPORT ComponentData : public TransientObject
        {
            public: explicit ComponentData(void *ptr);
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.   <br> License requirements : None */
            public: virtual ~ComponentData();
            /** Queries the line components, (@link Annotations::LineComponent Annotations::LineComponent@endlink ), in an annotation.  
                        Each line component can be queried for line specific information.  @return  All of the lines components that exist in the annotation  <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::LineComponent *> GetLineComponents
            (
            );
            /** Queries the arrow components, (@link Annotations::ArrowComponent Annotations::ArrowComponent@endlink ), in an annotation.  
                        Each arrow component can be queried for arrow specific information.  @return  All of the arrow components that exist in the annotation  <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::ArrowComponent *> GetArrowComponents
            (
            );
            /** Queries the arc components, (@link Annotations::ArcComponent Annotations::ArcComponent@endlink ), in an annotation.  
                        Each arc component can be queried for arc specific information.  @return  All of the arc components that exist in the annotation  <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::ArcComponent *> GetArcComponents
            (
            );
            /** Queries the text components, (@link Annotations::ArcComponent Annotations::ArcComponent@endlink ), in an annotation.  
                        Each text component can be queried for text specific information.  @return  All of the text components that exist in the annotation  <br> License requirements : None */
            public: std::vector<NXOpen::Annotations::TextComponent *> GetTextComponents
            (
            );
            /** Returns the entities that display the annotation. Each entity can be queried to get 
                        the line, arc and text information. Note that entities could be line, arc, spline and annotation
                        objects.  @return  List of entities that display the annotation  <br> License requirements : None */
            public: std::vector<NXOpen::DisplayableObject *> GetEntities
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
