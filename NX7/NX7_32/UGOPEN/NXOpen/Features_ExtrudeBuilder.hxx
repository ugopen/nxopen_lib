#ifndef NXOpen_FEATURES_EXTRUDEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EXTRUDEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ExtrudeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ExtrudeBuilder;
    }
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class FeatureOffset;
    }
    namespace GeometricUtilities
    {
        class FeatureOptions;
    }
    namespace GeometricUtilities
    {
        class Limits;
    }
    namespace GeometricUtilities
    {
        class MultiDraft;
    }
    class Section;
    namespace Features
    {
        class _ExtrudeBuilderBuilder;
        /** Represents a extrude feature builder. It creates or edits extrude feature.
             <br> 
            This class provides methods to get the various extrude sub components.
             <br> 
             <br> 
            Following are default values and options.
             <br> 

             <br> 
            <b> Section </b> User must set it
             <br> 
             <br> 
            <b> Direction </b>  Sections default direction
             <br> 
             <br> 
            <b> Limit Type </b>
             <br> 
             <br> 
            <b> Start Limit Distance </b> 0.0/0.0   [in/mm]
             <br> 
             <br> 
            <b> End Limit Distance </b>  1.0/25.0  [in/mm]
             <br> 
             <br> 
            <b> Draft Type </b> @link  GeometricUtilities::SimpleDraft::SimpleDraftTypeNoDraft   GeometricUtilities::SimpleDraft::SimpleDraftTypeNoDraft @endlink 
             <br> 
             <br> 
            <b> Offset Type </b>  @link  Features::ExtrudeOffsetData::OffsetTypeNone   Features::ExtrudeOffsetData::OffsetTypeNone @endlink 
             <br> 
             <br> 
            <b> Boolean Sign </b>  @link  Features::Feature::BooleanTypeCreate   Features::Feature::BooleanTypeCreate @endlink 
             <br> 
             <br> 
            <b> Boolean Target </b>  NULL
             <br> 

          <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateExtrudeBuilder Features::FeatureCollection::CreateExtrudeBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ExtrudeBuilder : public Features::FeatureBuilder
        {
            private: friend class  _ExtrudeBuilderBuilder;
            protected: ExtrudeBuilder();
            /**Returns  the section
                 <br> License requirements : None */
            public: NXOpen::Section * Section
            (
            );
            /**Sets  the section
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSection
            (
                NXOpen::Section * section /** Section to be extruded This parameter may not be NULL.*/
            );
            /**Returns  the extrude direction
                 <br> License requirements : None */
            public: NXOpen::Direction * Direction
            (
            );
            /**Sets  the extrude direction
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** Extrude direction This parameter may not be NULL.*/
            );
            /**Returns  the distance tolerance
                 <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distance tolerance */ 
            );
            /**Returns  the chaining tolerance
                 <br> License requirements : None */
            public: double ChainingTolerance
            (
            );
            /**Sets  the chaining tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetChainingTolerance
            (
                double chainingTolerance /** chaining tolerance */ 
            );
            /**Returns  the planar tolerance
                 <br> License requirements : None */
            public: double PlanarTolerance
            (
            );
            /**Sets  the planar tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPlanarTolerance
            (
                double planarTolerance /** planar tolerance */ 
            );
            /**Returns  the angle tolerance
                 <br> License requirements : None */
            public: double AngularTolerance
            (
            );
            /**Sets  the angle tolerance
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngularTolerance
            (
                double angleTolerance /** angle tolerance */ 
            );
            /**Returns  the extrude boolean operation
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /**Returns  the extrude draft operation
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::MultiDraft * Draft
            (
            );
            /**Returns  the extrude Offset operation
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOffset * Offset
            (
            );
            /**Returns  the extrude limits
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Limits * Limits
            (
            );
            /**Returns  the feature options
                 <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOptions * FeatureOptions
            (
            );
            /**Returns  the Offset enabled status
                    This is deprecated. Please use @link GeometricUtilities::FeatureOffset::Option GeometricUtilities::FeatureOffset::Option@endlink  instead.
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : None */
            public: bool OffsetEnabled
            (
            );
            /**Sets  the Offset enabled status
                    This is deprecated. Please use @link GeometricUtilities::FeatureOffset::Option GeometricUtilities::FeatureOffset::Option@endlink  instead.
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOffsetEnabled
            (
                bool offsetEnabled /** If true then offset will be enabled on this extrude, else it will be disabled. */
            );
            /**Returns  the Draft enabled status
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : None */
            public: bool DraftEnabled
            (
            );
            /**Sets  the Draft enabled status
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDraftEnabled
            (
                bool draftEnabled /** If true then draft will be enabled on this extrude, else draft is disabled. */
            );
            /** Set the parent sketch internalization status for use during extrude feature creation
                    This is deprecated. Please use @link Features::FeatureBuilder::ParentFeatureInternal Features::FeatureBuilder::ParentFeatureInternal@endlink  instead.
                
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void MakeParentSketchInternal
            (
                bool internalizeParentSketch /** If true, internalize the parent sketch, else the sketch will remain external. */
            );
            /** SET all the tolerances at once
                 <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToleranceValues
            (
                double distanceTolerance /** distance tolerance */ ,
                double chainingTolerance /** chaining tolerance */ ,
                double planarTolerance /** planar tolerance */ ,
                double angularTolerance /** angular tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
