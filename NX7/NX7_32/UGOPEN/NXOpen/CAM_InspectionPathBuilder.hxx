#ifndef NXOpen_CAM_INSPECTIONPATHBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionPathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionPathBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionPathBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class SelectNXObject;
    namespace CAM
    {
        class _InspectionPathBuilderBuilder;
        /** Represents the builder for a CMM Inspection path.  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionPathBuilder CAM::InspectionOperationCollection::CreateInspectionPathBuilder@endlink  <br> */
        class NXOPENCPPEXPORT InspectionPathBuilder : public CAM::OperationBuilder
        {
            /** the inspection mode */
            public: enum InspectModeType
            {
                InspectModeTypeDefault/** Default from method */,
                InspectModeTypeProgram/** Specified by program */,
                InspectModeTypeManual/** Manual */,
                InspectModeTypeAuto/** Auto determined by application */
            };

            /** the path point sequence optimization method */
            public: enum SequenceType
            {
                SequenceTypeNone/** None */,
                SequenceTypeNearest/** Nearest neighbor */,
                SequenceTypeUStrip/** U strip */,
                SequenceTypeVStrip/** V strip */
            };

            private: friend class  _InspectionPathBuilderBuilder;
            protected: InspectionPathBuilder();
            /**Returns  the selector for the inspection feature  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectFeature
            (
            );
            /**Returns  the inspection feature operation name  <br> License requirements : None */
            public: NXString FeatureOpName
            (
            );
            /**Sets  the inspection feature operation name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatureOpName
            (
                const NXString & featureOpName /** featureopname */ 
            );
            /**Returns  the approach direction vector reverser  <br> License requirements : None */
            public: bool ApproachDirection
            (
            );
            /**Sets  the approach direction vector reverser  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetApproachDirection
            (
                bool direction /** direction */ 
            );
            /**Returns  the inspection path operation name  <br> License requirements : None */
            public: NXString PathOpName
            (
            );
            /**Sets  the inspection path operation name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPathOpName
            (
                const NXString & pathOpName /** pathopname */ 
            );
            /**Returns  the number of points in the path  <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * NumPoints
            (
            );
            /**Returns  the inspection mode setting  <br> License requirements : None */
            public: NXOpen::CAM::InspectionPathBuilder::InspectModeType InspectionMode
            (
            );
            /**Sets  the inspection mode setting  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetInspectionMode
            (
                NXOpen::CAM::InspectionPathBuilder::InspectModeType inspectMode /** inspectmode */ 
            );
            /**Returns  the path point sequence optimization setting  <br> License requirements : None */
            public: NXOpen::CAM::InspectionPathBuilder::SequenceType SequenceOptimization
            (
            );
            /**Sets  the path point sequence optimization setting  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSequenceOptimization
            (
                NXOpen::CAM::InspectionPathBuilder::SequenceType sequenceOpt /** sequenceopt */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
