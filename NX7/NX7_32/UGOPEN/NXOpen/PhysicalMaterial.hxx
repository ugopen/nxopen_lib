#ifndef NXOpen_PHYSICALMATERIAL_HXX_INCLUDED
#define NXOpen_PHYSICALMATERIAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PhysicalMaterial.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Material.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class PhysicalMaterial;
    class Material;
    class NXObject;
    class _PhysicalMaterialBuilder;
    /** Represents Physical Material */
    class NXOPENCPPEXPORT PhysicalMaterial : public Material
    {
        /** The different categories of materials. The material list generated will be filtered based on the category */
        public: enum Category
        {
            CategoryMetals/** Metals                              */,
            CategoryPlastics/** Plastics                            */,
            CategoryPolymers/** Polymers                            */,
            CategoryCeramics/** Ceramics                            */,
            CategoryOther/** Other (Not metal, plastic, etc.)    */
        };

        /** The different types of materials. The material list generated will be filtered based on
                the material type chosen */
        public: enum Type
        {
            TypeIsotropic/** Isotropic                           */,
            TypeOrthotropic/** Orthotropic                         */,
            TypeAnisotropic/** Anisotropic                         */,
            TypeFluid = 4/** Fluid                               */,
            TypeGeneralHyperelastic/** Hyperelastic - General              */,
            TypeMooneyrivlin/** Mooney Rivlin                       */,
            TypeMooneyrivlintestdata/** Mooney Rivlin - test data option    */,
            TypePolynomial/** Polynomial                          */,
            TypeReducedpolynomial/** Reduced Polynomial                  */,
            TypeOgden/** Ogden                               */,
            TypeOgdentestdata/** Ogden - test data option            */,
            TypeFoam/** Foam                                */,
            TypeFoamtestdata/** Foam - test data option             */,
            TypeBlatz/** Blatz-Ko                            */,
            TypeArrudaboyce/** Arruda-Boyce                        */,
            TypeArrudaboycetestdata/** Arruda-Boyce - test data option     */,
            TypeNeohooke/** Neo Hooke                           */,
            TypeNeohooketestdata/** Neo Hooke - test data option        */,
            TypeMarlow/** Marlow                              */,
            TypeVanderwaals/** Van Der Waals                       */,
            TypeYeoh/** Yeoh                                */,
            TypeYeohtestdata/** Yeoh - test data option             */,
            TypeGent/** Gent                                */,
            TypeGasket/** Gasket                              */,
            TypeGasketbehavior/** Gasket Behavior                     */
        };

        private: friend class  _PhysicalMaterialBuilder;
        protected: PhysicalMaterial();
        /** This method assigns the material to the passed in objects
             <br> License requirements : None */
        public: void AssignObjects
        (
            const std::vector<NXOpen::NXObject *> & objects /** object to which this material should be assigned*/
        );
        /** This method unassigns the material from all the objects to which it is assigned to
             <br> License requirements : None */
        public: void UnassignAllObjects
        (
        );
        /** This method copies a material to a new name  @return  the new material copied from this material  <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * Copy
        (
            NXOpen::NXObject * partObject /** object in part where to copy material to */
        );
        /** This method deletes a material   <br> License requirements : None */
        public: void Delete
        (
        );
        /** This method retrieves the material type
             @return  the type for the material  <br> License requirements : None */
        public: NXOpen::PhysicalMaterial::Type GetMaterialType
        (
        );
        /** This method retrieves the material category
             @return  the category for the material  <br> License requirements : None */
        public: NXString GetCategory
        (
        );
        /** This method sets the material category
             <br> License requirements : None */
        public: void SetCategory
        (
            const NXString & materialCategory /** the category for the material   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** This method retrieves the material description
             @return  the description for the material  <br> License requirements : None */
        public: NXString GetDescription
        (
        );
        /** This method sets the material description
             <br> License requirements : None */
        public: void SetDescription
        (
            const NXString & materialDescription /** the description for the material */
        );
        /** This method retrieves the material description
             <br> License requirements : None */
        public: void GetUsage
        (
            std::vector<NXOpen::NXObject *> & objects /** the objects using the material           */
        );
        /** This method copies a library material to a different part  @return  the new material copied from this material  <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * CopyLibMatlToPart
        (
            NXOpen::NXObject * partObject /** object in part where to copy material to */
        );
    };
}
#undef EXPORTLIBRARY
#endif
