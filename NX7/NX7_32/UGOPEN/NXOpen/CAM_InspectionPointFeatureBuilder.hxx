#ifndef NXOpen_CAM_INSPECTIONPOINTFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONPOINTFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionPointFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionPointFeatureBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionPointFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Point;
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionPointFeatureBuilderBuilder;
        /** Represents a CMM Inspection Point Feature builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionPointFeatureBuilder CAM::InspectionOperationCollection::CreateInspectionPointFeatureBuilder@endlink  <br> */
        class NXOPENCPPEXPORT InspectionPointFeatureBuilder : public CAM::OperationBuilder
        {
            /** Coordinate system that the inspection feature data is relative to */
            public: enum CsysRefTypeEnum
            {
                CsysRefTypeEnumRelativetoPCS/** Relative to Part Coordinate System */,
                CsysRefTypeEnumAbsolute/** Relative to Absolute Coordinate System */
            };

            private: friend class  _InspectionPointFeatureBuilderBuilder;
            protected: InspectionPointFeatureBuilder();
            /**Returns  the selected point  <br> License requirements : None */
            public: NXOpen::Point * SelectPoint
            (
            );
            /**Sets  the selected point  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSelectPoint
            (
                NXOpen::Point * selectPoint /** selectpoint */ 
            );
            /**Returns  the selected projection faces  <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectProjectionFaces
            (
            );
            /**Returns  the reverse normal vector direction button  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse normal vector direction button  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the coordinate system reference type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionPointFeatureBuilder::CsysRefTypeEnum CsysReferenceType
            (
            );
            /**Sets  the coordinate system reference type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysReferenceType
            (
                NXOpen::CAM::InspectionPointFeatureBuilder::CsysRefTypeEnum csysReferenceType /** csysreferencetype */ 
            );
            /**Returns  the point X coordinate  <br> License requirements : None */
            public: double PointX
            (
            );
            /**Sets  the point X coordinate  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointX
            (
                double pointX /** pointx */ 
            );
            /**Returns  the point Y coordinate  <br> License requirements : None */
            public: double PointY
            (
            );
            /**Sets  the point Y coordinate  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointY
            (
                double pointY /** pointy */ 
            );
            /**Returns  the point Z coordinate  <br> License requirements : None */
            public: double PointZ
            (
            );
            /**Sets  the point Z coordinate  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointZ
            (
                double pointZ /** pointz */ 
            );
            /**Returns  the normal vector I component  <br> License requirements : None */
            public: double NormalVectorI
            (
            );
            /**Sets  the normal vector I component  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorI
            (
                double normalVectorI /** normalvectori */ 
            );
            /**Returns  the normal vector J component  <br> License requirements : None */
            public: double NormalVectorJ
            (
            );
            /**Sets  the normal vector J component  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorJ
            (
                double normalVectorJ /** normalvectorj */ 
            );
            /**Returns  the normal vector K component  <br> License requirements : None */
            public: double NormalVectorK
            (
            );
            /**Sets  the normal vector K component  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorK
            (
                double normalVectorK /** normalvectork */ 
            );
            /**Returns  the name of the inspection point feature  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the inspection point feature  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /** Updates point inspection feature characteristic parameters based on selected geometry  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParams
            (
            );
            /** Flips the point inspection feature normal vector  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void FlipNormal
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
