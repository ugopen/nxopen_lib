#ifndef NXOpen_GEOMETRICANALYSIS_DEVIATIONCHECKING_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_DEVIATIONCHECKING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_DeviationChecking.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricAnalysis_DeviationChecking.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class DeviationChecking;
    }
    class Builder;
    class SelectIBaseCurve;
    class SelectIParameterizedSurface;
    namespace GeometricAnalysis
    {
        class _DeviationCheckingBuilder;
        /**
            Represents a @link GeometricAnalysis::DeviationChecking GeometricAnalysis::DeviationChecking@endlink 
             <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisManager::CreateDeviationCheckingObject GeometricAnalysis::AnalysisManager::CreateDeviationCheckingObject@endlink  <br> */
        class NXOPENCPPEXPORT DeviationChecking : public Builder
        {
            /** the deviation type to be shown */
            public: enum DeviationOptions
            {
                DeviationOptionsNoDeviations/** show no
                           deviations */,
                DeviationOptionsAllDeviations/** show all
                           deviations */,
                DeviationOptionsMaximumDistance/** show
                           maximum distance deviation */,
                DeviationOptionsMinimumDistance/** show
                           minimum distance deviation */,
                DeviationOptionsMaximumAngle/** show maximum
                           angle deviation */,
                DeviationOptionsMinimumAngle/** show minimum
                           angle deviation */
            };

            /** the type of deviation checking to be performed */
            public: enum Types
            {
                TypesCurveToCurve/** check 
                            curve/edge to curve/edge deviation */,
                TypesCurveToFace/** check curve/edge
                            to face deviation */,
                TypesEdgeToFace/** check edge to face
                            deviation */,
                TypesFaceToFace/** check face to face
                            deviation */,
                TypesEdgeToEdge/** check edge to edge
                            deviation */
            };

            private: friend class  _DeviationCheckingBuilder;
            protected: DeviationChecking();
            /**Returns  the deviation checking type. Depending on the value of the deviation
                      checking type, different inputs are required. See the
                      documentation for each of the inputs.  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::DeviationChecking::Types Type
            (
            );
            /**Sets  the deviation checking type. Depending on the value of the deviation
                      checking type, different inputs are required. See the
                      documentation for each of the inputs.  <br> License requirements : None */
            public: void SetType
            (
                NXOpen::GeometricAnalysis::DeviationChecking::Types type /** type */ 
            );
            /**Returns  the first curve or edge - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesCurveToCurve GeometricAnalysis::DeviationChecking::TypesCurveToCurve@endlink . 
                       <br> License requirements : None */
            public: NXOpen::SelectIBaseCurve * FirstCurve
            (
            );
            /**Returns  the second curve or edge - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesCurveToCurve GeometricAnalysis::DeviationChecking::TypesCurveToCurve@endlink . 
                       <br> License requirements : None */
            public: NXOpen::SelectIBaseCurve * SecondCurve
            (
            );
            /**Returns  the curve  - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesCurveToFace GeometricAnalysis::DeviationChecking::TypesCurveToFace@endlink . 
                       <br> License requirements : None */
            public: NXOpen::SelectIBaseCurve * Curve
            (
            );
            /**Returns  the first face - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesFaceToFace GeometricAnalysis::DeviationChecking::TypesFaceToFace@endlink . 
                       <br> License requirements : None */
            public: NXOpen::SelectIParameterizedSurface * FirstFace
            (
            );
            /**Returns  the second face - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesFaceToFace GeometricAnalysis::DeviationChecking::TypesFaceToFace@endlink 
                      or the face  - required for the deviation checking when @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesCurveToFace GeometricAnalysis::DeviationChecking::TypesCurveToFace@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToFace GeometricAnalysis::DeviationChecking::TypesEdgeToFace@endlink . 
                       <br> License requirements : None */
            public: NXOpen::SelectIParameterizedSurface * SecondFace
            (
            );
            /**Returns  the first edge or edge  - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToEdge GeometricAnalysis::DeviationChecking::TypesEdgeToEdge@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToFace GeometricAnalysis::DeviationChecking::TypesEdgeToFace@endlink . 
                       <br> License requirements : None */
            public: NXOpen::SelectIBaseCurve * FirstEdge
            (
            );
            /**Returns  the second edge - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToEdge GeometricAnalysis::DeviationChecking::TypesEdgeToEdge@endlink .
                       <br> License requirements : None */
            public: NXOpen::SelectIBaseCurve * SecondEdge
            (
            );
            /**Returns  the face associated with the first edge or edge  - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToEdge GeometricAnalysis::DeviationChecking::TypesEdgeToEdge@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToFace GeometricAnalysis::DeviationChecking::TypesEdgeToFace@endlink . 
                       <br> License requirements : None */
            public: NXOpen::SelectIParameterizedSurface * FaceOfFirstEdge
            (
            );
            /**Returns  the face associated with the second edge  - required for the deviation checking when
                      @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToEdge GeometricAnalysis::DeviationChecking::TypesEdgeToEdge@endlink .
                       <br> License requirements : None */
            public: NXOpen::SelectIParameterizedSurface * FaceOfSecondEdge
            (
            );
            /**Returns  the number of check points to be shown for the deviation checking  -
                      required when @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesCurveToCurve GeometricAnalysis::DeviationChecking::TypesCurveToCurve@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesCurveToFace GeometricAnalysis::DeviationChecking::TypesCurveToFace@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToFace GeometricAnalysis::DeviationChecking::TypesEdgeToFace@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToEdge GeometricAnalysis::DeviationChecking::TypesEdgeToEdge@endlink 
                      . <br> License requirements : None */
            public: int NumberCheckPoints
            (
            );
            /**Sets  the number of check points to be shown for the deviation checking  -
                      required when @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesCurveToCurve GeometricAnalysis::DeviationChecking::TypesCurveToCurve@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesCurveToFace GeometricAnalysis::DeviationChecking::TypesCurveToFace@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToFace GeometricAnalysis::DeviationChecking::TypesEdgeToFace@endlink 
                      or
                      @link GeometricAnalysis::DeviationChecking::TypesEdgeToEdge GeometricAnalysis::DeviationChecking::TypesEdgeToEdge@endlink 
                      . <br> License requirements : None */
            public: void SetNumberCheckPoints
            (
                int numberCheckPoints /** numbercheckpoints */ 
            );
            /**Returns  the number of u check points to be shown for the deviation checking
                      - required when @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesFaceToFace GeometricAnalysis::DeviationChecking::TypesFaceToFace@endlink 
                       <br> License requirements : None */
            public: int NumberUcheckPoints
            (
            );
            /**Sets  the number of u check points to be shown for the deviation checking
                      - required when @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesFaceToFace GeometricAnalysis::DeviationChecking::TypesFaceToFace@endlink 
                       <br> License requirements : None */
            public: void SetNumberUcheckPoints
            (
                int numberUCheckPoints /** numberucheckpoints */ 
            );
            /**Returns  the number of v check points to be shown for the deviation checking
                      - required when @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesFaceToFace GeometricAnalysis::DeviationChecking::TypesFaceToFace@endlink 
                       <br> License requirements : None */
            public: int NumberVcheckPoints
            (
            );
            /**Sets  the number of v check points to be shown for the deviation checking
                      - required when @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  is set to
                      @link GeometricAnalysis::DeviationChecking::TypesFaceToFace GeometricAnalysis::DeviationChecking::TypesFaceToFace@endlink 
                       <br> License requirements : None */
            public: void SetNumberVcheckPoints
            (
                int numberVCheckPoints /** numbervcheckpoints */ 
            );
            /**Returns  the distance tolerance to be used for the deviation checking  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance to be used for the deviation checking  <br> License requirements : None */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance to be used for the deviation checking  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance to be used for the deviation checking  <br> License requirements : None */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the number or type of deviations to be shown for the deviation checking  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::DeviationChecking::DeviationOptions DeviationOption
            (
            );
            /**Sets  the number or type of deviations to be shown for the deviation checking  <br> License requirements : None */
            public: void SetDeviationOption
            (
                NXOpen::GeometricAnalysis::DeviationChecking::DeviationOptions deviationOption /** deviationoption */ 
            );
            /** Performs deviation checking.  Before calling this method, set
                        property @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  to specify the type of 
                        deviation checking, and the two objects (curve/face/edge) to be used the deviation
                        checking. The type of the objects required
                        depends on @link DeviationChecking::Type DeviationChecking::Type @endlink and @link DeviationChecking::SetType DeviationChecking::SetType @endlink  set above. Also set the
                        number check points to be displayed or u and v check points, the
                        distance tolerance, and the angle tolerance before calling the
                        method @link DeviationChecking::Check DeviationChecking::Check@endlink . 
                        @link DeviationChecking::Check DeviationChecking::Check@endlink  displays the
                        deviation as per the specification above in the graphics and lists
                        in the information window of NX.
                         <br> License requirements : None */
            public: void Check
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
