#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_CURVEALIGNEDBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_CURVEALIGNEDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_CurveAlignedBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_CurveAlignedBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_SectionPlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class CurveAlignedBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionPlaneBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class ScCollector;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _CurveAlignedBuilderBuilder;
            /** Represents the Curve Aligned specification for a @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder@endlink .*/
            class NXOPENCPPEXPORT CurveAlignedBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
            {
                private: friend class  _CurveAlignedBuilderBuilder;
                protected: CurveAlignedBuilder();
                /**Returns  the curves  <br> License requirements : None */
                public: NXOpen::ScCollector * Curves
                (
                );
                /**Returns  a value indicating whether to project the curve to a plane  <br> License requirements : None */
                public: bool UseProjectedCurve
                (
                );
                /**Sets  a value indicating whether to project the curve to a plane  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetUseProjectedCurve
                (
                    bool useProjectedCurve /** useprojectedcurve */ 
                );
                /**Returns  the user specified project plane  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionPlaneBuilder * SpecifiedPlane
                (
                );
                /**Returns  a value indicating how many sections should be created  <br> License requirements : None */
                public: int Number
                (
                );
                /**Sets  a value indicating how many sections should be created  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNumber
                (
                    int number /** number */ 
                );
                /**Returns  a value indicating whether the spacing is applied  <br> License requirements : None */
                public: bool IsSpacingEnabled
                (
                );
                /**Sets  a value indicating whether the spacing is applied  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSpacingEnabled
                (
                    bool isSpacingEnabled /** isspacingenabled */ 
                );
                /**Returns  a value indicating the space between sections  <br> License requirements : None */
                public: double Spacing
                (
                );
                /**Sets  a value indicating the space between sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSpacing
                (
                    double spacing /** spacing */ 
                );
                /**Returns  a value indicating the distance from the start position  <br> License requirements : None */
                public: double Offset
                (
                );
                /**Sets  a value indicating the distance from the start position  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetOffset
                (
                    double offset /** offset */ 
                );
                /** Returns true if the inputs to the component are sufficient for 
                            commit to be called.  For example, if the component requires
                            you to set some property, this method will return false if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
