#ifndef NXOpen_ANNOTATIONS_LINEWELDDATABUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LINEWELDDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LineWeldDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_LineWeldDataBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class LineWeldDataBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _LineWeldDataBuilderBuilder;
        /** Represents a @link Annotations::LineWeldDataBuilder Annotations::LineWeldDataBuilder@endlink  */
        class NXOPENCPPEXPORT LineWeldDataBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /**  */
            public: enum FinishSymbolType
            {
                FinishSymbolTypeNone/** none */ ,
                FinishSymbolTypeChipping/** chipping */ ,
                FinishSymbolTypeGrinding/** grinding */ ,
                FinishSymbolTypeHammering/** hammering */ ,
                FinishSymbolTypeMachining/** machining */ ,
                FinishSymbolTypeRolling/** rolling */ ,
                FinishSymbolTypePeening/** peening */ 
            };

            /**  */
            public: enum ContourSymbolType
            {
                ContourSymbolTypeNone/** none */ ,
                ContourSymbolTypeConvex/** convex */ ,
                ContourSymbolTypeFlat/** flat */ ,
                ContourSymbolTypeConcave/** concave */ ,
                ContourSymbolTypeBlendedToesIsoAndDinOnly/** blended toes iso and din only */ ,
                ContourSymbolTypeBackingStripPermanentIsoAndDinOnly/** backing strip permanent iso and din only */ ,
                ContourSymbolTypeBackingStripRemovableIsoAndDinOnly/** backing strip removable iso and din only */ ,
                ContourSymbolTypeFlush/** flush */ ,
                ContourSymbolTypeMachiningGradedJunction/** machining graded junction */ 
            };

            /**  */
            public: enum WeldSizeCodeType
            {
                WeldSizeCodeTypeNone/** none */ ,
                WeldSizeCodeTypeA/** a */ ,
                WeldSizeCodeTypeC/** c */ ,
                WeldSizeCodeTypeD/** d */ ,
                WeldSizeCodeTypeS/** s */ ,
                WeldSizeCodeTypeZ/** z */ ,
                WeldSizeCodeTypeP/** p */ 
            };

            /**  */
            public: enum WeldSymbolType
            {
                WeldSymbolTypeNone/** none */ ,
                WeldSymbolTypeButtWeldWithRaisedEdges/** butt weld with raised edges */ ,
                WeldSymbolTypeSingleFlange/** single flange */ ,
                WeldSymbolTypeSquareButt/** square butt */ ,
                WeldSymbolTypeVButt/** vbutt */ ,
                WeldSymbolTypeVButtWithBroadRootFace/** vbutt with broad root face */ ,
                WeldSymbolTypeBevelButt/** bevel butt */ ,
                WeldSymbolTypeBevelButtWithBroadRootFace/** bevel butt with broad root face */ ,
                WeldSymbolTypeUButt/** ubutt */ ,
                WeldSymbolTypeJButt/** jbutt */ ,
                WeldSymbolTypeFlareV/** flare v */ ,
                WeldSymbolTypeFlareBevel/** flare bevel */ ,
                WeldSymbolTypeFillet/** fillet */ ,
                WeldSymbolTypePlugSlot/** plug slot */ ,
                WeldSymbolTypeEdge/** edge */ ,
                WeldSymbolTypeSpot/** spot */ ,
                WeldSymbolTypeSeam/** seam */ ,
                WeldSymbolTypeSteepFlankedVButt/** steep flanked vbutt */ ,
                WeldSymbolTypeSteepFlankedBevelButt/** steep flanked bevel butt */ ,
                WeldSymbolTypeBacking/** backing */ ,
                WeldSymbolTypeSurfaceJoint/** surface joint */ ,
                WeldSymbolTypeInclinedJoint/** inclined joint */ ,
                WeldSymbolTypeFoldJoint/** fold joint */ ,
                WeldSymbolTypeStud/** stud */ ,
                WeldSymbolTypeSurfacing/** surfacing */ ,
                WeldSymbolTypeIntermittent/** intermittent */ ,
                WeldSymbolTypeBackingPlate/** backing plate */ 
            };

            private: friend class  _LineWeldDataBuilderBuilder;
            protected: LineWeldDataBuilder();
            /**Returns  the finishing method for the weld symbol  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::FinishSymbolType FinishSymbol
            (
            );
            /**Sets  the finishing method for the weld symbol  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFinishSymbol
            (
                NXOpen::Annotations::LineWeldDataBuilder::FinishSymbolType finishSymbol /** finishsymbol */ 
            );
            /**Returns  the supplementary contour weld symbols that identify the shape of the weld surface or execution of a weld for both top and bottom of the reference line  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::ContourSymbolType ContourSymbol
            (
            );
            /**Sets  the supplementary contour weld symbols that identify the shape of the weld surface or execution of a weld for both top and bottom of the reference line  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetContourSymbol
            (
                NXOpen::Annotations::LineWeldDataBuilder::ContourSymbolType contourSymbol /** contoursymbol */ 
            );
            /**Returns  the groove or coutersink angle <br> License requirements : None */
            public: NXString GrooveCountersinkAngle
            (
            );
            /**Sets  the groove or coutersink angle <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetGrooveCountersinkAngle
            (
                const NXString & grooveCountersinkAngle /** groovecountersinkangle */ 
            );
            /**Returns  the number of welds or root opening or depth of weld  <br> License requirements : None */
            public: NXString NumberRootDepth
            (
            );
            /**Sets  the number of welds or root opening or depth of weld  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetNumberRootDepth
            (
                const NXString & numberRootDepth /** numberrootdepth */ 
            );
            /**Returns  the weld size letter code  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::WeldSizeCodeType WeldSizeCode
            (
            );
            /**Sets  the weld size letter code  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetWeldSizeCode
            (
                NXOpen::Annotations::LineWeldDataBuilder::WeldSizeCodeType weldSizeCode /** weldsizecode */ 
            );
            /**Returns  the weld size  <br> License requirements : None */
            public: NXString WeldSize
            (
            );
            /**Sets  the weld size  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetWeldSize
            (
                const NXString & weldSize /** weldsize */ 
            );
            /**Returns  the weld symbol  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder::WeldSymbolType WeldSymbol
            (
            );
            /**Sets  the weld symbol  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetWeldSymbol
            (
                NXOpen::Annotations::LineWeldDataBuilder::WeldSymbolType weldSymbol /** weldsymbol */ 
            );
            /**Returns  the length or pitch  <br> License requirements : None */
            public: NXString LengthPitch
            (
            );
            /**Sets  the length or pitch  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetLengthPitch
            (
                const NXString & lengthPitch /** lengthpitch */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
