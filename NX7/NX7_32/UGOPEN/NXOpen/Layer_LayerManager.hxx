#ifndef NXOpen_LAYER_LAYERMANAGER_HXX_INCLUDED
#define NXOpen_LAYER_LAYERMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layer_LayerManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Layer.hxx>
#include <NXOpen/Layer_StateCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Layer
    {
        class LayerManager;
    }
    class BasePart;
    class DisplayableObject;
    namespace Layer
    {
        class StateCollection;
    }
    class NXObject;
    class View;
    namespace Layer
    {
        /** Represents an object that manages layers  <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
        class NXOPENCPPEXPORT LayerManager
        {
            private: NXOpen::BasePart* m_owner;
            public: explicit LayerManager(NXOpen::BasePart *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Sets  the work layer.
                    If you change the work layer, the old work layer is changed to Selectable.  <br> License requirements : None */
            public: void SetWorkLayer
            (
                int newWorkLayer /** Layer number for the new work layer */
            );
            /**Returns  the work layer.
                    If you change the work layer, the old work layer is changed to Selectable.  <br> License requirements : None */
            public: int WorkLayer
            (
            );
            /** Changes the states of the specified layers in the part. 
                    Note: there must be exactly one work layer.  If you change the work layer,
                    you must specify a new work layer.  If you set the work layer, the
                    old work layer will be changed to Selectable, unless you specify otherwise.
                     <br> License requirements : None */
            public: void ChangeStates
            (
                const std::vector<NXOpen::Layer::StateInfo> & stateArray /** 
                                Indicates the new states for the layers. */,
                bool fitAll /** Whether to refit the view to what is visible after the layer states have been changed */
            );
            /** Changes the states of the specified layers in the part. 
                    Note: there must be exactly one work layer.  If you change the work layer,
                    you must specify a new work layer.  If you set the work layer, the
                    old work layer will be changed to Selectable, unless you specify otherwise.
                     <br> License requirements : None */
            public: void ChangeStates
            (
                const std::vector<NXOpen::Layer::StateInfo> & stateArray /** 
                                Indicates the new states for the layers. */
            );
            /** Gets the states for all layers in the part  @return  Indicates the states for all layers in the part.  <br> License requirements : None */
            public: NXOpen::Layer::StateCollection * GetStates
            (
            );
            /** Sets the states for all layers in the part.
                        Note: there must be exactly one work layer.  <br> License requirements : None */
            public: void SetStates
            (
                NXOpen::Layer::StateCollection * stateCollection /** The states for all layers in the part.  */,
                bool fitAll /** Whether to refit the view to what is visible after the layer states have been changed */
            );
            /** Sets the states for all layers in the part.
                        Note: there must be exactly one work layer.  <br> License requirements : None */
            public: void SetStates
            (
                NXOpen::Layer::StateCollection * stateCollection /** The states for all layers in the part.  */
            );
            /** Sets the state of the specified layer.
                    The specified layer must not be the work layer.
                    If you are changing the state of the layer to Work,
                    the old work layer will be changed to Selectable.
                     <br> License requirements : None */
            public: void SetState
            (
                int layer /** layer */ ,
                NXOpen::Layer::State state /** state */ 
            );
            /** Sets the state of the specified layer.
                    The specified layer must not be the work layer.
                    If you are changing the state of the layer to Work,
                    the old work layer will be changed to Selectable.
                     <br> License requirements : None */
            public: void SetState
            (
                int layer /** layer */ ,
                NXOpen::Layer::State state /** state */ ,
                bool fitAll /** Whether to refit the view to what is visible after the layer state has been changed */
            );
            /** Gets the state of the specified layer  @return   <br> License requirements : None */
            public: NXOpen::Layer::State GetState
            (
                int layer /** layer */ 
            );
            /** Moves objects to the specified layer.
                    The specified part may be the displayed part or the work part.  If it is
                    the work part but not the displayed part, then none of the objects to be
                    moved may be currently displayed.
                     <br>  This method is deprecated.  Please use
                    @link Layer::LayerManager::MoveDisplayableObjects Layer::LayerManager::MoveDisplayableObjects@endlink  instead. <br> 
                     <br>  Only objects of class @link DisplayableObject DisplayableObject@endlink  may be
                    moved, with the following restrictions: <br> 
                     <br>  Objects of class @link CAE::CAEEdge CAE::CAEEdge@endlink ,
                    @link CAE::CAEFace CAE::CAEFace@endlink , @link CAE::CAEVertex CAE::CAEVertex@endlink ,
                    @link Edge Edge@endlink , @link Face Face@endlink  or
                    @link View View@endlink  may not be moved. <br>  
             @deprecated Deprecated in NX5 <br> 
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void MoveObjects
            (
                int newLayer /** The layer to move the objects to */,
                const std::vector<NXOpen::NXObject *> & objectArray /** The objects to be moved */
            );
            /** Moves displayable objects to the specified layer.
                    The specified part may be the displayed part or the work part.  If it is
                    the work part but not the displayed part, then none of the objects to be
                    moved may be currently displayed.
                     <br>  Objects of class @link CAE::CAEEdge CAE::CAEEdge@endlink ,
                    @link CAE::CAEFace CAE::CAEFace@endlink , @link CAE::CAEVertex CAE::CAEVertex@endlink ,
                    @link Edge Edge@endlink , @link Face Face@endlink  or
                    @link View View@endlink  may not be moved. <br>   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void MoveDisplayableObjects
            (
                int newLayer /** The layer to move the objects to */,
                const std::vector<NXOpen::DisplayableObject *> & objectArray /** The objects to be moved */
            );
            /** Returns all objects on the specified layer  @return  All the objects on the specified layer  <br> License requirements : None */
            public: std::vector<NXOpen::NXObject *> GetAllObjectsOnLayer
            (
                int layer /** layer */ 
            );
            /** Copies objects to the specified layer
                     <br>  Objects of class @link Assemblies::Component Assemblies::Component@endlink ,
                    @link DatumAxis DatumAxis@endlink , @link DatumPlane DatumPlane@endlink 
                    @link Edge Edge@endlink , @link Face Face@endlink ,
                    @link Features::Feature Features::Feature@endlink  or @link View View@endlink ,
                    may not be copied. <br> 
                     <br>  Objects of type UF_cs2_vertex_type may not be copied.  <br>  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void CopyObjects
            (
                int newLayer /** The layer to move the objects to */,
                const std::vector<NXOpen::NXObject *> & objectArray /** The objects to be copied */
            );
            /** Gets the visibility of all layers in a specified view  <br> License requirements : None */
            public: void GetVisibilitiesInView
            (
                NXOpen::View * view /** The view object being queried */,
                std::vector<NXOpen::Layer::StateInfo> & stateArray /** The current states for the layers.
                                                                The returned states can only be
                                                                @link Layer::StateVisible Layer::StateVisible@endlink  and
                                                                @link Layer::StateHidden Layer::StateHidden@endlink .
                                                                state_array[i] is for layer i+1 */
            );
            /** Sets specified layer(s) visibility in a specified view  <br> License requirements : None */
            public: void SetObjectsVisibilityOnLayer
            (
                NXOpen::View * view /** The view object being modified */,
                const std::vector<NXOpen::Layer::StateInfo> & stateArray /** The new states for the layers.
                                                             The given states may only be
                                                             @link Layer::StateVisible Layer::StateVisible@endlink  and
                                                             @link Layer::StateHidden Layer::StateHidden@endlink . */,
                bool doUpdate /** Whether to update the view(s) after the layer states have been changed */
            );
            /** Resets a view's layer visibility to the global states  <br> License requirements : None */
            public: void ResetViewVisibilityToGlobal
            (
                NXOpen::View * view /** The view object */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
