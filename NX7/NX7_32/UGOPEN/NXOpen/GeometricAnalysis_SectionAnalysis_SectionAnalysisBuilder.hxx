#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_SectionAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_AlongCurveBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_CircularGridBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_IsoparametricGridBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_ParallelPlanesBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_QuadrilateralGridBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_SectionAnalysisBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_TriangularGridBuilder.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionAnalysisBuilder;
        }
    }
    class Builder;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class AlongCurveBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class CircularGridBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class IsoparametricGridBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class ParallelPlanesBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class QuadrilateralGridBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class TriangularGridBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    class SelectTaggedObjectList;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _SectionAnalysisBuilderBuilder;
            /** Represents a @link GeometricAnalysis::SectionAnalysisObject GeometricAnalysis::SectionAnalysisObject@endlink  builder.  <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisBuilder GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisBuilder@endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            AlongCurve.CurveRange.AnchorPosition </td> <td> 
             
            Start </td> </tr> 

            <tr><td> 
             
            AlongCurve.Method </td> <td> 
             
            Perpendicular </td> </tr> 

            <tr><td> 
             
            AlongCurve.Spacing.BoundSections1 </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            AlongCurve.Spacing.BoundSections2 </td> <td> 
             
            True </td> </tr> 

            <tr><td> 
             
            AlongCurve.Spacing.Interval1 </td> <td> 
             
            25.0 </td> </tr> 

            <tr><td> 
             
            AlongCurve.Spacing.Interval2 </td> <td> 
             
            50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

            <tr><td> 
             
            AlongCurve.Spacing.LockInterval1 </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            AlongCurve.Spacing.LockInterval2 </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            AlongCurve.Spacing.SectionNumber1 </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            AlongCurve.Spacing.SectionNumber2 </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            CalculationMethod </td> <td> 
             
            Curvature </td> </tr> 

            <tr><td> 
             
            CircularGrid.CircularFrame.AnchorAttachment </td> <td> 
             
            None </td> </tr> 

            <tr><td> 
             
            CircularGrid.CircularFrame.Subtype </td> <td> 
             
            Arbitrary </td> </tr> 

            <tr><td> 
             
            CircularGrid.Spacing.Interval1 </td> <td> 
             
            45.0 </td> </tr> 

            <tr><td> 
             
            IsoparametricGrid.Method </td> <td> 
             
            UV </td> </tr> 

            <tr><td> 
             
            IsoparametricGrid.Spacing.Interval1 </td> <td> 
             
            25.0 </td> </tr> 

            <tr><td> 
             
            IsoparametricGrid.Spacing.Interval2 </td> <td> 
             
            25.0 </td> </tr> 

            <tr><td> 
             
            IsoparametricGrid.SurfaceRange.AnchorPosition </td> <td> 
             
            Vertex1 </td> </tr> 

            <tr><td> 
             
            NeedleDirection </td> <td> 
             
            Outside </td> </tr> 

            <tr><td> 
             
            Output </td> <td> 
             
            AnalysisObject </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.IsXDirectionEnabled </td> <td> 
             
            True </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.IsYDirectionEnabled </td> <td> 
             
            True </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.IsZDirectionEnabled </td> <td> 
             
            True </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Method </td> <td> 
             
            Parallel </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.Interval1 </td> <td> 
             
            50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.Interval2 </td> <td> 
             
            50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.Interval3 </td> <td> 
             
            50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.IsSectionNumberSpecified1 </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.IsSectionNumberSpecified2 </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.IsSectionNumberSpecified3 </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.SectionNumber1 </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.SectionNumber2 </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            ParallelPlanes.Spacing.SectionNumber3 </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            QuadrilateralGrid.QuadrilateralFrame.AnchorAttachment </td> <td> 
             
            None </td> </tr> 

            <tr><td> 
             
            QuadrilateralGrid.QuadrilateralFrame.Subtype </td> <td> 
             
            Arbitrary </td> </tr> 

            <tr><td> 
             
            ScalingMethod </td> <td> 
             
            Linear </td> </tr> 

            <tr><td> 
             
            ShowInflectionPoints </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            ShowPeakPoints </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            ShowSectionLength </td> <td> 
             
            False </td> </tr> 

            <tr><td> 
             
            TriangularGrid.TriangularFrame.AnchorAttachment </td> <td> 
             
            None </td> </tr> 

            <tr><td> 
             
            TriangularGrid.TriangularFrame.Subtype </td> <td> 
             
            Arbitrary </td> </tr> 

            <tr><td> 
             
            Type </td> <td> 
             
            Parallel </td> </tr> 

            </table>  
            */
            class NXOPENCPPEXPORT SectionAnalysisBuilder : public Builder
            {
                /** Represents the sectioning types */
                public: enum Types
                {
                    TypesParallel/** Parallel Planes */,
                    TypesIsoparametric/** Isoparametric */,
                    TypesAlongCurve/** Along Curve */,
                    TypesQuadrilateral/** Quadrilateral */,
                    TypesTriangular/** Triangular */,
                    TypesCircular/** Circular */
                };

                /** The output options */
                public: enum OutputType
                {
                    OutputTypeAnalysisObject/** Analysis Object */,
                    OutputTypeSectionCurves/** section curves */,
                    OutputTypeBoth/** Both Analysis Object and section curves */
                };

                /** The needle direction */
                public: enum NeedleDirectionType
                {
                    NeedleDirectionTypeInside/** Inside */,
                    NeedleDirectionTypeOutside/** Outside */
                };

                /** The calculation method */
                public: enum CalculationMethodType
                {
                    CalculationMethodTypeCurvature/** Curvature */,
                    CalculationMethodTypeRadiusofCurvature/** Radius of curvature */
                };

                /** The scaling method */
                public: enum ScalingMethodType
                {
                    ScalingMethodTypeLinear/** Linear */,
                    ScalingMethodTypeLogarithmic/** Logarithmic */
                };

                private: friend class  _SectionAnalysisBuilderBuilder;
                protected: SectionAnalysisBuilder();
                /**Returns  the sectioning type  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::Types Type
                (
                );
                /**Sets  the sectioning type  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetType
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::Types type /** type */ 
                );
                /**Returns  the references (faces or faceted bodies)  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::SelectTaggedObjectList * References
                (
                );
                /**Returns  the parallel planes section specifications. 
                                Only used when type is @link SectionAnalysisBuilder::TypesParallel SectionAnalysisBuilder::TypesParallel@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::ParallelPlanesBuilder * ParallelPlanes
                (
                );
                /**Returns  the isoparametric grid. 
                                Only used when type is @link SectionAnalysisBuilder::TypesIsoparametric SectionAnalysisBuilder::TypesIsoparametric@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::IsoparametricGridBuilder * IsoparametricGrid
                (
                );
                /**Returns  the along curve section specifications. 
                                Only used when type is @link SectionAnalysisBuilder::TypesAlongCurve SectionAnalysisBuilder::TypesAlongCurve@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::AlongCurveBuilder * AlongCurve
                (
                );
                /**Returns  the quadrilateral grid. 
                                Only used when type is @link SectionAnalysisBuilder::TypesQuadrilateral SectionAnalysisBuilder::TypesQuadrilateral@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::QuadrilateralGridBuilder * QuadrilateralGrid
                (
                );
                /**Returns  the triangular grid. 
                                Only used when type is @link SectionAnalysisBuilder::TypesTriangular SectionAnalysisBuilder::TypesTriangular@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::TriangularGridBuilder * TriangularGrid
                (
                );
                /**Returns  the circular grid. 
                                Only used when type is @link SectionAnalysisBuilder::TypesCircular SectionAnalysisBuilder::TypesCircular@endlink   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::CircularGridBuilder * CircularGrid
                (
                );
                /**Returns  the comb options  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricUtilities::CombOptionsBuilder * CombOptions
                (
                );
                /**Returns  the flag to show the peak points of the sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowPeakPoints
                (
                );
                /**Sets  the flag to show the peak points of the sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowPeakPoints
                (
                    bool showPeakPoints /** showpeakpoints */ 
                );
                /**Returns  the flag to show the inflection points of planar sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowInflectionPoints
                (
                );
                /**Sets  the flag to show the inflection points of planar sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowInflectionPoints
                (
                    bool showInflectionPoints /** showinflectionpoints */ 
                );
                /**Returns  the flag to show the section length labels  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowSectionLength
                (
                );
                /**Sets  the flag to show the section length labels  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowSectionLength
                (
                    bool showSectionLength /** showsectionlength */ 
                );
                /** Create curves from the sections of Section Analysis object 
                 @deprecated Deprecated in NX7.0 <br> 
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void CreateCurves
                (
                );
                /**Returns  the output  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::OutputType Output
                (
                );
                /**Sets  the output  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetOutput
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::OutputType output /** output */ 
                );
                /**Returns  the needle direction  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::NeedleDirectionType NeedleDirection
                (
                );
                /**Sets  the needle direction  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNeedleDirection
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::NeedleDirectionType needleDirection /** needledirection */ 
                );
                /**Returns  the calculation method  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::CalculationMethodType CalculationMethod
                (
                );
                /**Sets  the calculation method  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetCalculationMethod
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::CalculationMethodType calculationMethod /** calculationmethod */ 
                );
                /**Returns  the scaling method  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::ScalingMethodType ScalingMethod
                (
                );
                /**Sets  the scaling method  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetScalingMethod
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::ScalingMethodType scalingMethod /** scalingmethod */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
