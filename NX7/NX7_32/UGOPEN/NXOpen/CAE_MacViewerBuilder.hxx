#ifndef NXOpen_CAE_MACVIEWERBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MACVIEWERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MacViewerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_MacViewerBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class MacViewerBuilder;
    }
    class Builder;
    namespace CAE
    {
        class _MacViewerBuilderBuilder;
        /** Represents the correlation MAC matrix viewer builder  <br> To create a new instance of this class, use @link CAE::CorrelSolutionCollection::CreateMacViewerBuilder CAE::CorrelSolutionCollection::CreateMacViewerBuilder@endlink  <br> */
        class NXOPENCPPEXPORT MacViewerBuilder : public Builder
        {
            private: friend class  _MacViewerBuilderBuilder;
            protected: MacViewerBuilder();
            /** Access the reference modes  @return  SM allocated array containing the mode frequencies  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: std::vector<double> GetReferenceModes
            (
                int* all /** process all modes (ignored) */,
                std::vector<int> & refModeNumbers /** SM allocated array containing the mode numbers */
            );
            /** Set the reference modes  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetReferenceModes
            (
                int all /** process all modes (ignored) */,
                const std::vector<int> & refModeNumbers /** The mode numbers */,
                const std::vector<double> & refModeFrequencies /** The mode frequencies */
            );
            /** Access the working modes  @return  SM allocated array containing the mode frequencies  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: std::vector<double> GetWorkingModes
            (
                std::vector<int> & modeNumbers /** SM allocated array containing the mode numbers */
            );
            /** Set the working modes  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWorkingModes
            (
                const std::vector<int> & modeNumbers /** The mode numbers */,
                const std::vector<double> & modeFrequencies /** The mode frequencies */
            );
            /** Access the mac values  @return  SM allocated array containing the mac values  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: std::vector<double> GetMacValues
            (
            );
            /** Set the mac values  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetMacValues
            (
                const std::vector<double> & mac /** The mac values */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
