#ifndef NXOpen_CAM_OPERATIONTRANSFORMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_OPERATIONTRANSFORMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_OperationTransformBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAM_OperationTransformBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class OperationTransformBuilder;
    }
    class Builder;
    namespace CAM
    {
        class CAMObject;
    }
    class CoordinateSystem;
    class Direction;
    class Plane;
    class Point;
    class SelectLine;
    namespace CAM
    {
        class _OperationTransformBuilderBuilder;
        /** OperationTransformBuilder  <br> To create a new instance of this class, use @link CAM::CAMSetup::CreateOperationTransformBuilder CAM::CAMSetup::CreateOperationTransformBuilder@endlink  <br> */
        class NXOPENCPPEXPORT OperationTransformBuilder : public Builder
        {
            /** Transform Type */
            public: enum Transform
            {
                TransformTranslate/** translate */,
                TransformScale/** scale */,
                TransformRotateAboutPoint/** rotate about point */,
                TransformRotateAboutLine/** rotate about line */,
                TransformMirrorThroughALine/** mirror through a line */,
                TransformMirrorThroughAPlane/** mirror through a plane */,
                TransformCircularArray/** circular array */,
                TransformRectangularArray/** rectangular array */,
                TransformReposition/** reposition */
            };

            /** Motion Type */
            public: enum Motion
            {
                MotionDelta/** motion delta */,
                MotionToAPoint/** motion to a point */
            };

            /** Angle Type */
            public: enum Angle
            {
                AngleSpecify/** specify a angle */,
                AngleTwoPoint/** use two point to sepcify a angle */
            };

            /** Line Type */
            public: enum Line
            {
                LineSpecify/** specify a line */,
                LineTwoPoint/** specify a line by two point */,
                LinePointAndVector/** specify a line by a point and a vector */
            };

            /** Transform Option */
            public: enum Result
            {
                ResultMove/** move */,
                ResultCopy/** copy */,
                ResultInstance/** instance */
            };

            private: friend class  _OperationTransformBuilderBuilder;
            protected: OperationTransformBuilder();
            /**Returns  the transform type  <br> License requirements : None */
            public: NXOpen::CAM::OperationTransformBuilder::Transform TransformType
            (
            );
            /**Sets  the transform type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTransformType
            (
                NXOpen::CAM::OperationTransformBuilder::Transform transformType /** transformtype */ 
            );
            /**Returns  the motion type  <br> License requirements : None */
            public: NXOpen::CAM::OperationTransformBuilder::Motion MotionType
            (
            );
            /**Sets  the motion type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMotionType
            (
                NXOpen::CAM::OperationTransformBuilder::Motion motionType /** motiontype */ 
            );
            /**Returns  the delta XC  <br> License requirements : None */
            public: double DeltaXc
            (
            );
            /**Sets  the delta XC  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDeltaXc
            (
                double deltaXC /** deltaxc */ 
            );
            /**Returns  the delta YC  <br> License requirements : None */
            public: double DeltaYc
            (
            );
            /**Sets  the delta YC  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDeltaYc
            (
                double deltaYC /** deltayc */ 
            );
            /**Returns  the delta ZC  <br> License requirements : None */
            public: double DeltaZc
            (
            );
            /**Sets  the delta ZC  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDeltaZc
            (
                double deltaZC /** deltazc */ 
            );
            /**Returns  the reference point  <br> License requirements : None */
            public: NXOpen::Point * ReferencePoint
            (
            );
            /**Sets  the reference point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReferencePoint
            (
                NXOpen::Point * referencePoint /** referencepoint */ 
            );
            /**Returns  the to point  <br> License requirements : None */
            public: NXOpen::Point * ToPoint
            (
            );
            /**Sets  the to point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToPoint
            (
                NXOpen::Point * toPoint /** topoint */ 
            );
            /**Returns  the scale factor  <br> License requirements : None */
            public: double ScaleFactor
            (
            );
            /**Sets  the scale factor  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the angle pivot point  <br> License requirements : None */
            public: NXOpen::Point * AnglePivotPoint
            (
            );
            /**Sets  the angle pivot point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAnglePivotPoint
            (
                NXOpen::Point * anglePivotPoint /** anglepivotpoint */ 
            );
            /**Returns  the angle method  <br> License requirements : None */
            public: NXOpen::CAM::OperationTransformBuilder::Angle AngleMethod
            (
            );
            /**Sets  the angle method  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAngleMethod
            (
                NXOpen::CAM::OperationTransformBuilder::Angle angleMethod /** anglemethod */ 
            );
            /**Returns  the angle value  <br> License requirements : None */
            public: double AngleValue
            (
            );
            /**Sets  the angle value  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAngleValue
            (
                double angleValue /** anglevalue */ 
            );
            /**Returns  the angle start point  <br> License requirements : None */
            public: NXOpen::Point * AngleStartPoint
            (
            );
            /**Sets  the angle start point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAngleStartPoint
            (
                NXOpen::Point * angleStartPoint /** anglestartpoint */ 
            );
            /**Returns  the angle end point  <br> License requirements : None */
            public: NXOpen::Point * AngleEndPoint
            (
            );
            /**Sets  the angle end point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAngleEndPoint
            (
                NXOpen::Point * angleEndPoint /** angleendpoint */ 
            );
            /**Returns  the line method  <br> License requirements : None */
            public: NXOpen::CAM::OperationTransformBuilder::Line LineMethod
            (
            );
            /**Sets  the line method  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLineMethod
            (
                NXOpen::CAM::OperationTransformBuilder::Line lineMethod /** linemethod */ 
            );
            /**Returns  the line selection  <br> License requirements : None */
            public: NXOpen::SelectLine * LineSelection
            (
            );
            /**Returns  the line start point  <br> License requirements : None */
            public: NXOpen::Point * LineStartPoint
            (
            );
            /**Sets  the line start point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLineStartPoint
            (
                NXOpen::Point * lineStartPoint /** linestartpoint */ 
            );
            /**Returns  the line end point  <br> License requirements : None */
            public: NXOpen::Point * LineEndPoint
            (
            );
            /**Sets  the line end point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLineEndPoint
            (
                NXOpen::Point * lineEndPoint /** lineendpoint */ 
            );
            /**Returns  the line point  <br> License requirements : None */
            public: NXOpen::Point * LinePoint
            (
            );
            /**Sets  the line point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLinePoint
            (
                NXOpen::Point * linePoint /** linepoint */ 
            );
            /**Returns  the line vector  <br> License requirements : None */
            public: NXOpen::Direction * LineVector
            (
            );
            /**Sets  the line vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLineVector
            (
                NXOpen::Direction * lineVector /** linevector */ 
            );
            /**Returns  the mirror plane  <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the mirror plane  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the array origin point  <br> License requirements : None */
            public: NXOpen::Point * ArrayOriginPoint
            (
            );
            /**Sets  the array origin point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayOriginPoint
            (
                NXOpen::Point * arrayOriginPoint /** arrayoriginpoint */ 
            );
            /**Returns  the array number along XC  <br> License requirements : None */
            public: int ArrayNumberAlongXc
            (
            );
            /**Sets  the array number along XC  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayNumberAlongXc
            (
                int arrayNumberAlongXC /** arraynumberalongxc */ 
            );
            /**Returns  the array number along YC  <br> License requirements : None */
            public: int ArrayNumberAlongYc
            (
            );
            /**Sets  the array number along YC  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayNumberAlongYc
            (
                int arrayNumberAlongYC /** arraynumberalongyc */ 
            );
            /**Returns  the array offset XC  <br> License requirements : None */
            public: double ArrayOffsetXc
            (
            );
            /**Sets  the array offset XC  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayOffsetXc
            (
                double arrayOffsetXC /** arrayoffsetxc */ 
            );
            /**Returns  the array offset YC  <br> License requirements : None */
            public: double ArrayOffsetYc
            (
            );
            /**Sets  the array offset YC  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayOffsetYc
            (
                double arrayOffsetYc /** arrayoffsetyc */ 
            );
            /**Returns  the array angle  <br> License requirements : None */
            public: double ArrayAngle
            (
            );
            /**Sets  the array angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayAngle
            (
                double arrayAngle /** arrayangle */ 
            );
            /**Returns  the array circular number  <br> License requirements : None */
            public: int ArrayCircularNumber
            (
            );
            /**Sets  the array circular number  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayCircularNumber
            (
                int arrayCircularNumber /** arraycircularnumber */ 
            );
            /**Returns  the array circular radius  <br> License requirements : None */
            public: double ArrayCircularRadius
            (
            );
            /**Sets  the array circular radius  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayCircularRadius
            (
                double arrayCircularRadius /** arraycircularradius */ 
            );
            /**Returns  the array circular start angle  <br> License requirements : None */
            public: double ArrayCircularStartAngle
            (
            );
            /**Sets  the array circular start angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayCircularStartAngle
            (
                double arrayCircularStartAngle /** arraycircularstartangle */ 
            );
            /**Returns  the array circular increment angle  <br> License requirements : None */
            public: double ArrayCircularIncrementAngle
            (
            );
            /**Sets  the array circular increment angle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrayCircularIncrementAngle
            (
                double arrayCircularIncrementAngle /** arraycircularincrementangle */ 
            );
            /**Returns  the reposition from CSYS  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * RepositionFromCsys
            (
            );
            /**Sets  the reposition from CSYS  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRepositionFromCsys
            (
                NXOpen::CoordinateSystem * repositionFromCSYS /** repositionfromcsys */ 
            );
            /**Returns  the reposition to CSYS  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * RepositionToCsys
            (
            );
            /**Sets  the reposition to CSYS  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRepositionToCsys
            (
                NXOpen::CoordinateSystem * repositionToCSYS /** repositiontocsys */ 
            );
            /**Returns  the move copy instance option  <br> License requirements : None */
            public: NXOpen::CAM::OperationTransformBuilder::Result MoveCopyInstance
            (
            );
            /**Sets  the move copy instance option  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMoveCopyInstance
            (
                NXOpen::CAM::OperationTransformBuilder::Result moveCopyInstance /** movecopyinstance */ 
            );
            /**Returns  the distance angle division  <br> License requirements : None */
            public: int DistanceAngleDivision
            (
            );
            /**Sets  the distance angle division  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDistanceAngleDivision
            (
                int distanceAngleDivision /** distanceangledivision */ 
            );
            /**Returns  the num of copy or instance  <br> License requirements : None */
            public: int NumOfCopyInstance
            (
            );
            /**Sets  the num of copy or instance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetNumOfCopyInstance
            (
                int numOfCopyInstance /** numofcopyinstance */ 
            );
            /** Get the new created operation list after transformation  <br> License requirements : None */
            public: void GetNewTransformOperations
            (
                int* count /** count of new created operations */,
                NXOpen::CAM::CAMObject ** objectsToTransform /** array of new created transform operations */
            );
            /** Remove the tranformation  <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveTransformation
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
