#ifndef NXOpen_ANNOTATIONS_BUSINESSMODIFIERCOLLECTION_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BUSINESSMODIFIERCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BusinessModifierCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_CustomerValueBusinessModifierBuilder.hxx>
#include <NXOpen/Annotations_RevisionBusinessModifierBuilder.hxx>
#include <NXOpen/Annotations_SafetyClassBusinessModifierBuilder.hxx>
#include <NXOpen/Annotations_UrlBusinessModifierBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class BusinessModifierCollection;
    }
    namespace Annotations
    {
        class AnnotationManager;
    }
    namespace Annotations
    {
        class BusinessModifier;
    }
    namespace Annotations
    {
        class CustomerValueBusinessModifier;
    }
    namespace Annotations
    {
        class CustomerValueBusinessModifierBuilder;
    }
    namespace Annotations
    {
        class RevisionBusinessModifier;
    }
    namespace Annotations
    {
        class RevisionBusinessModifierBuilder;
    }
    namespace Annotations
    {
        class SafetyClassBusinessModifier;
    }
    namespace Annotations
    {
        class SafetyClassBusinessModifierBuilder;
    }
    namespace Annotations
    {
        class UrlBusinessModifier;
    }
    namespace Annotations
    {
        class UrlBusinessModifierBuilder;
    }
    class TaggedObject;
    namespace Annotations
    {
        /** Represents a collection of @link Annotations::BusinessModifier Annotations::BusinessModifier@endlink  objects  <br> To obtain an instance of this class, refer to @link Annotations::AnnotationManager Annotations::AnnotationManager@endlink  <br> */
        class NXOPENCPPEXPORT BusinessModifierCollection : public TaggedObjectCollection
        {
            private: NXOpen::Annotations::AnnotationManager* m_owner;
            public: explicit BusinessModifierCollection(NXOpen::Annotations::AnnotationManager *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef Annotations::BusinessModifier * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::Annotations::BusinessModifierCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Annotations::BusinessModifierCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a URL business modifier  @return  New url business modifier 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::UrlBusinessModifier * CreateUrlBusinessModifier
            (
                const NXString & modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a customer value business modifier   @return  New customer value business modifier 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::CustomerValueBusinessModifier * CreateCustomerValueBusinessModifier
            (
                const NXString & modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a revision business modifier  @return  New revision business modifier 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::RevisionBusinessModifier * CreateRevisonBusinessModifier
            (
                const NXString & modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a safety class business modifier  @return  New safety class business modifier 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : geometric_tol ("GDT") */
            public: NXOpen::Annotations::SafetyClassBusinessModifier * CreateSafetyClassBusinessModifier
            (
                const NXString & modifierName /** Knowledge fusion name of modifier */
            );
            /** Creates a @link Annotations::RevisionBusinessModifierBuilder Annotations::RevisionBusinessModifierBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::RevisionBusinessModifierBuilder * CreateRevisionBusinessModifierBuilder
            (
                NXOpen::Annotations::RevisionBusinessModifier * revisionbusinessModifier /** revisionbusiness modifier */ 
            );
            /** Creates a @link Annotations::SafetyClassBusinessModifierBuilder Annotations::SafetyClassBusinessModifierBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::SafetyClassBusinessModifierBuilder * CreateSafetyClassBusinessModifierBuilder
            (
                NXOpen::Annotations::SafetyClassBusinessModifier * safetyclassbusinessmodifier /** safetyclassbusinessmodifier */ 
            );
            /** Creates a @link Annotations::CustomerValueBusinessModifierBuilder Annotations::CustomerValueBusinessModifierBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::CustomerValueBusinessModifierBuilder * CreateCustomerValueBusinessModifierBuilder
            (
                NXOpen::Annotations::CustomerValueBusinessModifier * customervaluebusinessmodifier /** customervaluebusinessmodifier */ 
            );
            /** Creates a @link Annotations::UrlBusinessModifierBuilder Annotations::UrlBusinessModifierBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Annotations::UrlBusinessModifierBuilder * CreateUrlBusinessModifierBuilder
            (
                NXOpen::Annotations::UrlBusinessModifier * urlbusinessmodifier /** urlbusinessmodifier */ 
            );
            /** Finds the @link Annotations::BusinessModifier Annotations::BusinessModifier@endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.
                        
                        An exception will be thrown if no object can be found with the given journal identifier.  @return  Business Modifier with this identifier  <br> License requirements : None */
            public: NXOpen::TaggedObject * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the business modifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
