#ifndef NXOpen_CAM_NCGROUPCOLLECTION_HXX_INCLUDED
#define NXOpen_CAM_NCGROUPCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_NCGroupCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class NCGroupCollection;
    }
    namespace CAM
    {
        class CAMSetup;
    }
    namespace CAM
    {
        class NCGroup;
    }
    namespace CAM
    {
        class BarrelToolBuilder;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class DrillBackSpotfacingToolBuilder;
    }
    namespace CAM
    {
        class DrillBoreToolBuilder;
    }
    namespace CAM
    {
        class DrillBurnishingToolBuilder;
    }
    namespace CAM
    {
        class DrillCenterBellToolBuilder;
    }
    namespace CAM
    {
        class DrillCounterboreToolBuilder;
    }
    namespace CAM
    {
        class DrillCtskToolBuilder;
    }
    namespace CAM
    {
        class DrillGeomBuilder;
    }
    namespace CAM
    {
        class DrillMethodBuilder;
    }
    namespace CAM
    {
        class DrillReamerToolBuilder;
    }
    namespace CAM
    {
        class DrillSpotdrillToolBuilder;
    }
    namespace CAM
    {
        class DrillSpotfaceToolBuilder;
    }
    namespace CAM
    {
        class DrillStdToolBuilder;
    }
    namespace CAM
    {
        class DrillStepToolBuilder;
    }
    namespace CAM
    {
        class DrillTapToolBuilder;
    }
    namespace CAM
    {
        class DrillThreadMillToolBuilder;
    }
    namespace CAM
    {
        class FeatureBasedGeomBuilder;
    }
    namespace CAM
    {
        class FormToolBuilder;
    }
    namespace CAM
    {
        class GenericToolBuilder;
    }
    namespace CAM
    {
        class GrooveToolBuilder;
    }
    namespace CAM
    {
        class MachineGroupBuilder;
    }
    namespace CAM
    {
        class MachineHeadGroupBuilder;
    }
    namespace CAM
    {
        class MachinePocketGroupBuilder;
    }
    namespace CAM
    {
        class MachineTurretGroupBuilder;
    }
    namespace CAM
    {
        class MillAreaGeomBuilder;
    }
    namespace CAM
    {
        class MillBoundaryGeomBuilder;
    }
    namespace CAM
    {
        class MillFormToolBuilder;
    }
    namespace CAM
    {
        class MillGeomBuilder;
    }
    namespace CAM
    {
        class MillMethodBuilder;
    }
    namespace CAM
    {
        class MillOrientGeomBuilder;
    }
    namespace CAM
    {
        class MillTextGeomBuilder;
    }
    namespace CAM
    {
        class MillToolBuilder;
    }
    namespace CAM
    {
        class MillVolumeGeomBuilder;
    }
    namespace CAM
    {
        class MultiBladeGeomBuilder;
    }
    namespace CAM
    {
        class NCFeatureUdaGeomBuilder;
    }
    namespace CAM
    {
        class NCFeatureUdfGeomBuilder;
    }
    namespace CAM
    {
        class NcmPlanarBuilder;
    }
    namespace CAM
    {
        class NcmScBuilder;
    }
    namespace CAM
    {
        class OptimizeTraverseGroupBuilder;
    }
    namespace CAM
    {
        class ProbeToolBuilder;
    }
    namespace CAM
    {
        class ProgramOrderGroupBuilder;
    }
    namespace CAM
    {
        class TToolBuilder;
    }
    namespace CAM
    {
        class ThreadToolBuilder;
    }
    namespace CAM
    {
        class TurnAvoidanceGeomBuilder;
    }
    namespace CAM
    {
        class TurnBoundaryGeomBuilder;
    }
    namespace CAM
    {
        class TurnFeatureGeomBuilder;
    }
    namespace CAM
    {
        class TurnGeomBuilder;
    }
    namespace CAM
    {
        class TurnMethodBuilder;
    }
    namespace CAM
    {
        class TurnOrientGeomBuilder;
    }
    namespace CAM
    {
        class TurnToolBuilder;
    }
    namespace CAM
    {
        class WedmBasedGeomBuilder;
    }
    namespace CAM
    {
        class WedmCornerControlBuilder;
    }
    namespace CAM
    {
        class WedmCuttingBuilder;
    }
    namespace CAM
    {
        class WedmExtGeomBuilder;
    }
    namespace CAM
    {
        class WedmFeatureGeomBuilder;
    }
    namespace CAM
    {
        class WedmIntGeomBuilder;
    }
    namespace CAM
    {
        class WedmLeadInOutBuilder;
    }
    namespace CAM
    {
        class WedmMethodBuilder;
    }
    namespace CAM
    {
        class WedmMoveControlBuilder;
    }
    namespace CAM
    {
        class WedmNocoreGeomBuilder;
    }
    namespace CAM
    {
        class WedmOpenGeomBuilder;
    }
    namespace CAM
    {
        class WedmOrientGeomBuilder;
    }
    namespace CAM
    {
        /** Represents the ncgroup collection  <br> To obtain an instance of this class, refer to @link CAM::CAMSetup CAM::CAMSetup@endlink  <br> */
        class NXOPENCPPEXPORT NCGroupCollection : public TaggedObjectCollection
        {
            /** Whether use the default name in creation */
            public: enum UseDefaultName
            {
                UseDefaultNameFalse/** don't user the default name */,
                UseDefaultNameTrue/** use the default name */
            };

            private: NXOpen::CAM::CAMSetup* m_owner;
            public: explicit NCGroupCollection(NXOpen::CAM::CAMSetup *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef CAM::NCGroup * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::CAM::NCGroupCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::CAM::NCGroupCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the CAM.NCGroup object with the given identifier as recorded in a journal. @return  the found object  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NCGroup * FindObject
            (
                const NXString & sid /** the name of the object   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a program group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created program group; otherwise, the
                    specified name will be used. @return  the created program group  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NCGroup * CreateProgram
            (
                NXOpen::CAM::NCGroup * parentGroup /** the parent group */,
                const NXString & typeName /** the name of the template type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & subtypeName /** the name of the template subtype   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const NXString & newProgramName /** the name of the created program group,
                                                                                    only used when use_default_name == true.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a method group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created method group; otherwise, the
                    specified name will be used. @return  the created method group  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NCGroup * CreateMethod
            (
                NXOpen::CAM::NCGroup * parentGroup /** the parent group */,
                const NXString & typeName /** the name of the template type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & subtypeName /** the name of the template subtype   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const NXString & newMethodName /** the name of the created method group,
                                                                                      only used when use_default_name == true    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a tool group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created tool group; otherwise, the
                    specified name will be used. @return  the created tool group  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NCGroup * CreateTool
            (
                NXOpen::CAM::NCGroup * parentGroup /** the parent group */,
                const NXString & typeName /** the name of the template type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & subtypeName /** the name of the template subtype   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const NXString & newToolName /** the name of the created tool group,
                                                                                      only used when use_default_name == true   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a geometry group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created geometry group; otherwise, the
                    specified name will be used. @return  the created geometry group  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NCGroup * CreateGeometry
            (
                NXOpen::CAM::NCGroup * parentGroup /** the parent group */,
                const NXString & typeName /** the name of the template type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & subtypeName /** the name of the template subtype   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const NXString & newGeometryName /** the name of the created geometry group,
                                                                                      only used when use_default_name == true   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a builder for Non-Cutting Moves for Planar Milling  @return  builder being created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NcmPlanarBuilder * CreateNcmPlanarBuilder
            (
            );
            /** Creates a builder for Non-Cutting Moves for Surface Contouring  @return  builder being created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NcmScBuilder * CreateNcmScBuilder
            (
            );
            /** Creates a mill method builder  @return  mill method builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillMethodBuilder * CreateMillMethodBuilder
            (
                NXOpen::CAM::CAMObject * param /** mill method group to be edited */
            );
            /** Creates a turn method builder  @return  turn method builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnMethodBuilder * CreateTurnMethodBuilder
            (
                NXOpen::CAM::CAMObject * param /** turn method group to be edited */
            );
            /** Creates a drill method builder  @return  drill method builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillMethodBuilder * CreateDrillMethodBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill method group to be edited */
            );
            /** Creates a wedm method builder  @return  wedm method builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmMethodBuilder * CreateWedmMethodBuilder
            (
                NXOpen::CAM::CAMObject * param /** wedm method group to be edited */
            );
            /** Creates a wire edm external geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmExtGeomBuilder * CreateWedmExtGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wire edm based geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmBasedGeomBuilder * CreateWedmBasedGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wire edm internal geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmIntGeomBuilder * CreateWedmIntGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wire edm open geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmOpenGeomBuilder * CreateWedmOpenGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wire edm nocore geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmNocoreGeomBuilder * CreateWedmNocoreGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wire edm feature geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmFeatureGeomBuilder * CreateWedmFeatureGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wire edm orient geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmOrientGeomBuilder * CreateWedmOrientGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wedm_corner_control builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmCornerControlBuilder * CreateWedmCornerControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wedm_cutting builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmCuttingBuilder * CreateWedmCuttingBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wedm_lead_in_out builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmLeadInOutBuilder * CreateWedmLeadInOutBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a wedm_corner_control builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmMoveControlBuilder * CreateWedmMoveControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a mill orient geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillOrientGeomBuilder * CreateMillOrientGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a turn orient geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnOrientGeomBuilder * CreateTurnOrientGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a manufacturing feature based geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FeatureBasedGeomBuilder * CreateFeatureBasedGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a drill geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillGeomBuilder * CreateDrillGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a mill geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillGeomBuilder * CreateMillGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a mill area geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillAreaGeomBuilder * CreateMillAreaGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a mill volume geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillVolumeGeomBuilder * CreateMillVolumeGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a mill boundary geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillBoundaryGeomBuilder * CreateMillBoundaryGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a mill text geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillTextGeomBuilder * CreateMillTextGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a turning geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnGeomBuilder * CreateTurnGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a turning boundary geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnBoundaryGeomBuilder * CreateTurnBoundaryGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a turning feature geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnFeatureGeomBuilder * CreateTurnFeatureGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a turning avoidance geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnAvoidanceGeomBuilder * CreateTurnAvoidanceGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a nc feature udf geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NCFeatureUdfGeomBuilder * CreateNcfeatureUdfGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a nc feature uda geometry builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NCFeatureUdaGeomBuilder * CreateNcfeatureUdaGeomBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a optimize traverse group builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::OptimizeTraverseGroupBuilder * CreateOptimizeTraverseGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a machine group builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MachineGroupBuilder * CreateMachineGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a machine turret group builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MachineTurretGroupBuilder * CreateMachineTurretGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a machine pocket group builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MachinePocketGroupBuilder * CreateMachinePocketGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a machine head group builder  @return  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MachineHeadGroupBuilder * CreateMachineHeadGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a mill tool builder  @return  mill tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillToolBuilder * CreateMillToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** mill tool group to be edited */
            );
            /** Creates a drill tool builder  @return  drill std tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillStdToolBuilder * CreateDrillStdToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill std tool group to be edited */
            );
            /** Creates a turn  builder  @return  turn  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnToolBuilder * CreateTurnToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** turn group to be edited */
            );
            /** Creates a mill form  builder  @return  mill form  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillFormToolBuilder * CreateMillFormToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** mill form group to be edited */
            );
            /** Creates a t tool  builder  @return  t  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TToolBuilder * CreateTToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** t group to be edited */
            );
            /** Creates a thread  builder  @return  thread  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ThreadToolBuilder * CreateThreadToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** thread group to be edited */
            );
            /** Creates a groove  builder  @return  groove  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GrooveToolBuilder * CreateGrooveToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** groove group to be edited */
            );
            /** Creates a barrel  builder  @return  barrel  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::BarrelToolBuilder * CreateBarrelToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** barrel group to be edited */
            );
            /** Creates a form  builder  @return  form  builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FormToolBuilder * CreateFormToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** form group to be edited */
            );
            /** Creates a drill center bell tool builder  @return  drill center bell tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillCenterBellToolBuilder * CreateDrillCenterBellToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill center bell tool group to be edited */
            );
            /** Creates a drill counterbore tool builder  @return  drill counterbore tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillCounterboreToolBuilder * CreateDrillCounterboreToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill counterbore tool group to be edited */
            );
            /** Creates a drill ctsk tool builder  @return  drill ctsk tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillCtskToolBuilder * CreateDrillCtskToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill ctsk tool group to be edited */
            );
            /** Creates a drill reamer tool builder  @return  drill reamer tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillReamerToolBuilder * CreateDrillReamerToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill reamer tool group to be edited */
            );
            /** Creates a drill spotdrill tool builder  @return  drill spotdrill tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillSpotdrillToolBuilder * CreateDrillSpotdrillToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill spotdrill tool group to be edited */
            );
            /** Creates a drill spotface tool builder  @return  drill spotface tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillSpotfaceToolBuilder * CreateDrillSpotfaceToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill spotface tool group to be edited */
            );
            /** Creates a drill step tool builder  @return  drill step tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillStepToolBuilder * CreateDrillStepToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill step tool group to be edited */
            );
            /** Creates a drill tap tool builder  @return  drill tap tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillTapToolBuilder * CreateDrillTapToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill tap tool group to be edited */
            );
            /** Creates a drill thread mill tool builder  @return  drill thread mill tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillThreadMillToolBuilder * CreateDrillThreadMillToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill thread mill tool group to be edited */
            );
            /** Creates a drill burnishing tool builder  @return  drill burnishing tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillBurnishingToolBuilder * CreateDrillBurnishingToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill burnishing tool group to be edited */
            );
            /** Creates a drill back spotfacing tool builder  @return  drill back spotfacing tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillBackSpotfacingToolBuilder * CreateDrillBackSpotfacingToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill back spotfacing tool group to be edited */
            );
            /** Creates a drill bore tool builder  @return  drill bore tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DrillBoreToolBuilder * CreateDrillBoreToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** drill bore tool group to be edited */
            );
            /** Creates a program order group builder  @return  program order group builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProgramOrderGroupBuilder * CreateProgramOrderGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a probe tool builder  @return  probe tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeToolBuilder * CreateProbeToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** probe tool group to be edited */
            );
            /** Creates a generic solid tool builder  @return  generic tool builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GenericToolBuilder * CreateGenericToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** generic tool group to be edited */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
