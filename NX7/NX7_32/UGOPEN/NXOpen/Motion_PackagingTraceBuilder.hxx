#ifndef NXOpen_MOTION_PACKAGINGTRACEBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_PACKAGINGTRACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PackagingTraceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_PackagingBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class PackagingTraceBuilder;
    }
    class DisplayableObject;
    namespace Motion
    {
        class PackagingBuilder;
    }
    namespace Motion
    {
        class _PackagingTraceBuilderBuilder;
        /** This is the builder class to create or edit a Trace object. <br> To create a new instance of this class, use @link Motion::PackagingCollection::CreateTraceBuilder Motion::PackagingCollection::CreateTraceBuilder@endlink  <br> */
        class NXOPENCPPEXPORT PackagingTraceBuilder : public Motion::PackagingBuilder
        {
            /** Trace reference frame type */
            public: enum Frame
            {
                FrameAbsolute/** Traced copies positioned in absolute coordinate system. */,
                FrameRelative/** Traced copies positioned relative to selected links. */
            };

            private: friend class  _PackagingTraceBuilderBuilder;
            protected: PackagingTraceBuilder();
            /**Returns  the @link  Motion::PackagingTrace   Motion::PackagingTrace @endlink  reference frame type 
                    defined at @link  NXOpen::Motion::PackagingTraceBuilder::Frame   NXOpen::Motion::PackagingTraceBuilder::Frame @endlink   <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PackagingTraceBuilder::Frame FrameType
            (
            );
            /**Sets  the @link  Motion::PackagingTrace   Motion::PackagingTrace @endlink  reference frame type 
                    defined at @link  NXOpen::Motion::PackagingTraceBuilder::Frame   NXOpen::Motion::PackagingTraceBuilder::Frame @endlink   <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFrameType
            (
                NXOpen::Motion::PackagingTraceBuilder::Frame fType /** Trace reference frame type defined in 
                                                                           @link  NXOpen::Motion::PackagingTraceBuilder::Frame   NXOpen::Motion::PackagingTraceBuilder::Frame @endlink  */
            );
            /** Returns @link  Motion::PackagingTrace   Motion::PackagingTrace @endlink  relative links.  Only available
                    when frame type is @link  NXOpen::Motion::PackagingTraceBuilder::FrameRelative   NXOpen::Motion::PackagingTraceBuilder::FrameRelative @endlink .  @return  The list pointer  <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXOpen::DisplayableObject *> GetRelativeLinks
            (
            );
            /** Sets @link  Motion::PackagingTrace   Motion::PackagingTrace @endlink  relative links.  Only used when
                    frame type is @link  NXOpen::Motion::PackagingTraceBuilder::FrameRelative   NXOpen::Motion::PackagingTraceBuilder::FrameRelative @endlink .  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRelativeLinks
            (
                const std::vector<NXOpen::DisplayableObject *> & links /** The list pointer*/
            );
            /**Returns  the @link  Motion::PackagingTrace   Motion::PackagingTrace @endlink  target layer  <br> License requirements : mechanisms ("MECHANISMS") */
            public: int TargetLayer
            (
            );
            /**Sets  the @link  Motion::PackagingTrace   Motion::PackagingTrace @endlink  target layer  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTargetLayer
            (
                int targetLayer /** Target layer */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
