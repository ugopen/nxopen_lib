#ifndef NXOpen_UISTYLER_SINGLESELECTLIST_HXX_INCLUDED
#define NXOpen_UISTYLER_SINGLESELECTLIST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_SingleSelectList.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class SingleSelectList;
    }
    namespace UIStyler
    {
        class StylerEvent;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        /** Represents a SingleSelectList for UI Styler */
        class NXOPENUICPPEXPORT SingleSelectList : public UIStyler::StylerItem
        {
            public: /** Called when a dialog user selects an entry with a single mouse click 
                    or presses the spacebar on an already selected item.  <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> Activate;
            public: /** Called when a dialog user double-clicks on an option or presses Return when an item is already selected.  <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::UIStyler::DialogState, NXOpen::UIStyler::StylerEvent *> DoubleClick;
            public: explicit SingleSelectList(void *ptr);
            /**Registers activate callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddActivateHandler
            (
                const NXOpen::UIStyler::SingleSelectList::Activate&  activateevent /** activateevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /**Registers double click callback. This method should be called before calling @link  UIStyler::Dialog::Show   UIStyler::Dialog::Show @endlink  or @link  UIStyler::Dialog::RegisterWithUiMenu   UIStyler::Dialog::RegisterWithUiMenu @endlink   <br> License requirements : None */
            public: void AddDoubleClickHandler
            (
                const NXOpen::UIStyler::SingleSelectList::DoubleClick&  doubleclickevent /** doubleclickevent */ ,
                bool isDialogLaunchingEvent /** is dialog launching event */ 
            );
            /** Specifies particular list items to be selected  <br> License requirements : None */
            public: void SetSelected
            (
                int subIndex /** Inndex of particular list items to be selected*/
            );
            /** Specifies an array of character strings that are used as entries in the list  <br> License requirements : None */
            public: void SetListItems
            (
                std::vector<NXString> & itemVal /** An array of string items   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets an array of character strings that are used as entries in the list. @return  An array of string items  <br> License requirements : None */
            public: std::vector<NXString> GetListItems
            (
            );
            /**Sets  the sensitivity of the single select list <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** type */ 
            );
            /**Returns  the sensitivity of the single select list <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets  the visibility of the single select list <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /** type */ 
            );
            /**Returns  the visibility of the single select list <br> License requirements : None */
            public: bool Visibility
            (
            );
            /** Indicates that this dialog item is receiving keyboard focus.  <br> License requirements : None */
            public: void SetFocus
            (
            );
            /** Requests a list entry to be deselected. <br> License requirements : None */
            public: void DeselectSubItem
            (
                int subItemIndex /** subitemindex */ 
            );
            /** Requests one or more entries to be inserted into the list. You can insert entries at the bottom of the list or at any position within the list.  <br> License requirements : None */
            public: void InsertSubItem
            (
                int subitemIndex /** Position index where the insertion should be made. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then the new list entries are added to the bottom of the list.*/,
                std::vector<NXString> & multiEntries /**An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list.  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Appends one or more entries to be inserted into the list  <br> License requirements : None */
            public: void Append
            (
                std::vector<NXString> & multiEntries /**An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list.  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Requests a list entry to be deleted.  <br> License requirements : None */
            public: void DeleteSubItem
            (
                int subItemIndex /**Zero-based index of a list entry to be deleted. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then all list entries are deleted. */
            );
            /**Requests that a list entry be scrolled up to the first line in the list  <br> License requirements : None */
            public: void ShowSubItem
            (
                int subItemIndex /** Zero-based index of a list entry to be scrolled up to the first line of the list.*/
            );
            /** Gets selected index  @return   <br> License requirements : None */
            public: int GetSelectedIndexValue
            (
            );
            /** Gets selected string  @return   <br> License requirements : None */
            public: NXString GetSelectedString
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
