#ifndef NXOpen_FEATURES_WINDSHIELDDATUMBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_WINDSHIELDDATUMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_WindshieldDatumBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_WindshieldDatumBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class WindshieldDatumBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    class Point;
    class ScCollector;
    namespace Features
    {
        class _WindshieldDatumBuilderBuilder;
        /**
            Represents a @link Features::WindshieldDatum Features::WindshieldDatum@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateWindshieldDatumBuilder Features::FeatureCollection::CreateWindshieldDatumBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AssoToggle </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        BottomAngle.Value </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        EyeType </td> <td> 
         
        EyeFeature </td> </tr> 

        <tr><td> 
         
        HorizontalAngle.Value </td> <td> 
         
        17 </td> </tr> 

        <tr><td> 
         
        RayLength.Value </td> <td> 
         
        3000 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        ShowPoints </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ShowRays </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        TopAngle.Value </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        VisionType </td> <td> 
         
        Standard </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT WindshieldDatumBuilder : public Features::FeatureBuilder
        {
            /** eye definition type */
            public: enum EnumEyeType
            {
                EnumEyeTypeEyeFeature/** eye feature */,
                EnumEyeTypeV1Point/** v1 point */,
                EnumEyeTypeV2Point/** v2 point */
            };

            /** vision angle type */
            public: enum CustomVisionAngle
            {
                CustomVisionAngleStandard/** standard */,
                CustomVisionAngleCustom/** customized */
            };

            private: friend class  _WindshieldDatumBuilderBuilder;
            protected: WindshieldDatumBuilder();
            /**Returns  the eye type to determine which type of v points to be used  <br> License requirements : None */
            public: NXOpen::Features::WindshieldDatumBuilder::EnumEyeType EyeType
            (
            );
            /**Sets  the eye type to determine which type of v points to be used  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetEyeType
            (
                NXOpen::Features::WindshieldDatumBuilder::EnumEyeType eyeType /** eyetype */ 
            );
            /**Returns  the eye feature; select eec feature when eye type specified  <br> License requirements : None */
            public: NXOpen::Features::SelectFeature * EyeFeature
            (
            );
            /**Returns  the point v1; select one point when eye type specified  <br> License requirements : None */
            public: NXOpen::Point * PointV1
            (
            );
            /**Sets  the point v1; select one point when eye type specified  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetPointV1
            (
                NXOpen::Point * pointV1 /** pointv1 */ 
            );
            /**Returns  the point v2; select one point when eye type specified  <br> License requirements : None */
            public: NXOpen::Point * PointV2
            (
            );
            /**Sets  the point v2; select one point when eye type specified  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetPointV2
            (
                NXOpen::Point * pointV2 /** pointv2 */ 
            );
            /**Returns  the show points to determine whether to create points or not  <br> License requirements : None */
            public: bool ShowPoints
            (
            );
            /**Sets  the show points to determine whether to create points or not  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetShowPoints
            (
                bool showPoints /** showpoints */ 
            );
            /**Returns  the windshield collector which the v points will be projected onto  <br> License requirements : None */
            public: NXOpen::ScCollector * SelectWindshield
            (
            );
            /**Returns  the show rays to determine whether to create ray lines or not  <br> License requirements : None */
            public: bool ShowRays
            (
            );
            /**Sets  the show rays to determine whether to create ray lines or not  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetShowRays
            (
                bool showRays /** showrays */ 
            );
            /**Returns  the ray length  <br> License requirements : None */
            public: NXOpen::Expression * RayLength
            (
            );
            /**Returns  the vision type; standard or customer defined  <br> License requirements : None */
            public: NXOpen::Features::WindshieldDatumBuilder::CustomVisionAngle VisionType
            (
            );
            /**Sets  the vision type; standard or customer defined  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetVisionType
            (
                NXOpen::Features::WindshieldDatumBuilder::CustomVisionAngle visionType /** visiontype */ 
            );
            /**Returns  the top inclined angle  <br> License requirements : None */
            public: NXOpen::Expression * TopAngle
            (
            );
            /**Returns  the bottom inclined angle  <br> License requirements : None */
            public: NXOpen::Expression * BottomAngle
            (
            );
            /**Returns  the horizontal inclined angle  <br> License requirements : None */
            public: NXOpen::Expression * HorizontalAngle
            (
            );
            /**Returns  the associative toggle; toggle on to create feature  <br> License requirements : None */
            public: bool AssoToggle
            (
            );
            /**Sets  the associative toggle; toggle on to create feature  <br> License requirements : nx_general_packaging ("NX General Packaging") */
            public: void SetAssoToggle
            (
                bool assoToggle /** assotoggle */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
