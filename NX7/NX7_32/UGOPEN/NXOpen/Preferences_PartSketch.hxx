#ifndef NXOpen_PREFERENCES_PARTSKETCH_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTSKETCH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartSketch.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class PartSketch;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of Sketcher preferences applicable to entire part. Other Sketch preference 
        settings are available with @link Preferences::SessionSketch Preferences::SessionSketch@endlink  for settings applicable to session
        and with @link Preferences::SketchPreferences Preferences::SketchPreferences@endlink  for Sketch specific Preferences  <br> To obtain an instance of this class, refer to @link Preferences::PartPreferences Preferences::PartPreferences@endlink  <br> */
        class NXOPENCPPEXPORT PartSketch
        {
            private: NXOpen::Preferences::PartPreferences* m_owner;
            public: explicit PartSketch(NXOpen::Preferences::PartPreferences *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the sketch curve color  <br> License requirements : None */
            public: int CurveColor
            (
            );
            /**Sets  the sketch curve color  <br> License requirements : None */
            public: void SetCurveColor
            (
                int sketchCurveColor /** sketch curve color */ 
            );
            /**Returns  the sketch dimension color  <br> License requirements : None */
            public: int DimensionColor
            (
            );
            /**Sets  the sketch dimension color  <br> License requirements : None */
            public: void SetDimensionColor
            (
                int sketchDimensionColor /** sketch dimension color */ 
            );
            /**Returns  the sketch overconstrained color  <br> License requirements : None */
            public: int OverconstrainedColor
            (
            );
            /**Sets  the sketch overconstrained color  <br> License requirements : None */
            public: void SetOverconstrainedColor
            (
                int sketchOverconstrainedColor /** sketch overconstrained color */ 
            );
            /**Returns  the sketch conflicting color  <br> License requirements : None */
            public: int ConflictingColor
            (
            );
            /**Sets  the sketch conflicting color  <br> License requirements : None */
            public: void SetConflictingColor
            (
                int sketchConflictingColor /** sketch conflicting color */ 
            );
            /**Returns  the sketch partially defined constraint color  <br> License requirements : None */
            public: int PartiallyDefinedColor
            (
            );
            /**Sets  the sketch partially defined constraint color  <br> License requirements : None */
            public: void SetPartiallyDefinedColor
            (
                int sketchPartialColor /** sketch partial color */ 
            );
            /**Returns  the sketch fully defined constraint color  <br> License requirements : None */
            public: int FullyDefinedColor
            (
            );
            /**Sets  the sketch fully defined constraint color  <br> License requirements : None */
            public: void SetFullyDefinedColor
            (
                int sketchFullyColor /** sketch fully color */ 
            );
            /**Returns  the sketch reference curve color  <br> License requirements : None */
            public: int ReferenceCurveColor
            (
            );
            /**Sets  the sketch reference curve color  <br> License requirements : None */
            public: void SetReferenceCurveColor
            (
                int sketchReferenceCurveColor /** sketch reference curve color */ 
            );
            /**Returns  the sketch reference dimension color  <br> License requirements : None */
            public: int ReferenceDimensionColor
            (
            );
            /**Sets  the sketch reference dimension color  <br> License requirements : None */
            public: void SetReferenceDimensionColor
            (
                int sketchReferenceDimensionColor /** sketch reference dimension color */ 
            );
            /**Returns  the sketch out of date curve color  <br> License requirements : None */
            public: int OutOfDateColor
            (
            );
            /**Sets  the sketch out of date curve color  <br> License requirements : None */
            public: void SetOutOfDateColor
            (
                int sketchOutOfDateColor /** sketch out of date color */ 
            );
            /**Returns  the sketch degree of freedom arrow color  <br> License requirements : None */
            public: int DOFColor
            (
            );
            /**Sets  the sketch degree of freedom arrow color  <br> License requirements : None */
            public: void SetDOFColor
            (
                int sketchDOFColor /** sketch d o f color */ 
            );
            /**Returns  the inactive sketch color  <br> License requirements : None */
            public: int InactiveSketchColor
            (
            );
            /**Sets  the inactive sketch color  <br> License requirements : None */
            public: void SetInactiveSketchColor
            (
                int sketchInactiveColor /** sketch inactive color */ 
            );
            /**Returns  the sketch participating datum curve color  <br> License requirements : None */
            public: int ParticipatingDatumColor
            (
            );
            /**Sets  the sketch participating datum curve color  <br> License requirements : None */
            public: void SetParticipatingDatumColor
            (
                int sketchParticipatingDatumColor /** sketch participating datum color */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
