#ifndef NXOpen_VALIDATE_XMLCOMPARATOR_HXX_INCLUDED
#define NXOpen_VALIDATE_XMLCOMPARATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_XmlComparator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Validate
    {
        class XmlComparator;
    }
    class Session;
    namespace Validate
    {
        /** @brief Provides a generic comparator for finding differences between two XML
               format files.
               The comparator takes @link Validate::XmlComparator::Options Validate::XmlComparator::Options@endlink  to further control the
               comparison process. It returns @link Validate::XmlComparator::Result Validate::XmlComparator::Result@endlink , and generates report 
               of detailed differences in HTML file which can be viewed via web browser. 

         
             <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT XmlComparator
        {
            /** Specifies result of the comparison */
            public: enum Result
            {
                ResultIdentical/** Represents two xml files are identical */,
                ResultDifferent/** Represents two xml files are different */
            };

             /**  <br> Represents config options in comparison <br> 
                         <br> For example: <br> 

                         <br> case 1: Defines filter file to control what nodes will be compared;
                            generates comparison report and log; ignores CDATA and processing 
                            instruction nodes. <br> 
                             @code compareOptions.ReportFile           = "auto_report.html";
                                  compareOptions.FilterFile           = "filter.xml";
                                  compareOptions.LogFile              = "log.log";
                                  compareOptions.IgnoreNamespaces     = FALSE;
                                  compareOptions.IgnoreUnmatchedNodes = FALSE;
                                  compareOptions.IgnoreComments       = FALSE;
                                  compareOptions.IgnoreCdata          = TRUE;
                                  compareOptions.IgnorePI             = TRUE;
                                  CompareXmlFiles("fileOne.xml", "fileTwo.xml", compareOptions)
                             @endcode 

                         <br> case 2: Compares all nodes and does not generate report file and log file. <br> 
                             @code compareOptions.ReportFile           = NULL;
                                  compareOptions.FilterFile           = NULL;
                                  compareOptions.LogFile              = NULL;
                                  CompareXmlFiles("fileOne.xml", "fileTwo.xml", compareOptions)
                            @endcode 
                    */
            public:
            struct Options
            {
                public: /** File specification of filter file.
                                                                                          The filter file defines what nodes will be compared and how to compare them.
                                                                                          It can be NULL, which means all nodes will be compared. */NXString FilterFile;
                public: /** File specification of report file.
                                                                                          The report file contains the detail comparison results.
                                                                                          It can be NULL, which means the comparator won't generate a report file. */NXString ReportFile;
                public: /** File specification of comparison log file.
                                                                                           The log file contains detail comparison steps and comparison information.
                                                                                           It can be NULL, which means the comparator won't generate a log file. */NXString LogFile;
                public: /** Ignores namespace definition during comparison.
                                                                                            But if the filter file has namespace definition, the comparator will ignore
                                                                                            this option and always compare the nodes with namespace definitions. Default if false. */bool IgnoreNamespaces;
                public: /** Ignores unmatched nodes in comparison. Default is false. */bool IgnoreUnmatchedNodes;
                public: /** Ignores comment nodes in comparison. Default is false. */bool IgnoreComments;
                public: /** Ignores CDATA nodes in comparison. Default is false. */bool IgnoreCdata;
                public: /** Ignores processing instruction nodes in comparison. Default is false. */bool IgnorePI;
                public: Options() :
                    FilterFile(),
                    ReportFile(),
                    LogFile(),
                    IgnoreNamespaces(),
                    IgnoreUnmatchedNodes(),
                    IgnoreComments(),
                    IgnoreCdata(),
                    IgnorePI()
                {
                }
                /** Constructor for the Options struct. */ 
                public: Options(NXString INIT_filterFile /** File specification of filter file.
                                                                                                  The filter file defines what nodes will be compared and how to compare them.
                                                                                                  It can be NULL, which means all nodes will be compared. */, 
                        NXString INIT_reportFile /** File specification of report file.
                                                                                                  The report file contains the detail comparison results.
                                                                                                  It can be NULL, which means the comparator won't generate a report file. */, 
                        NXString INIT_logFile /** File specification of comparison log file.
                                                                                                   The log file contains detail comparison steps and comparison information.
                                                                                                   It can be NULL, which means the comparator won't generate a log file. */, 
                        bool INIT_ignoreNamespaces /** Ignores namespace definition during comparison.
                                                                                                    But if the filter file has namespace definition, the comparator will ignore
                                                                                                    this option and always compare the nodes with namespace definitions. Default if false. */, 
                        bool INIT_ignoreUnmatchedNodes /** Ignores unmatched nodes in comparison. Default is false. */, 
                        bool INIT_ignoreComments /** Ignores comment nodes in comparison. Default is false. */, 
                        bool INIT_ignoreCdata /** Ignores CDATA nodes in comparison. Default is false. */, 
                        bool INIT_ignorePI /** Ignores processing instruction nodes in comparison. Default is false. */) :
                    FilterFile(INIT_filterFile),
                    ReportFile(INIT_reportFile),
                    LogFile(INIT_logFile),
                    IgnoreNamespaces(INIT_ignoreNamespaces),
                    IgnoreUnmatchedNodes(INIT_ignoreUnmatchedNodes),
                    IgnoreComments(INIT_ignoreComments),
                    IgnoreCdata(INIT_ignoreCdata),
                    IgnorePI(INIT_ignorePI)
                {
                }
            };

            private: NXOpen::Session* m_owner;
            public: explicit XmlComparator(NXOpen::Session *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Compares two xml format files. 
                        You can use @link Validate::XmlComparator::Options Validate::XmlComparator::Options@endlink to customize the comparison process. 
                     @return  comparison result  <br> License requirements : None */
            public: NXOpen::Validate::XmlComparator::Result CompareXmlFiles
            (
                const NXString & workXmlFile /** The first xml file to be compared   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & masterXmlFile /** The second xml file to be compared against   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Validate::XmlComparator::Options & compareOptions /** comparison options */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
