#ifndef NXOpen_CAE_CAEGROUPCOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_CAEGROUPCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CaeGroupCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class CaeGroupCollection;
    }
    namespace CAE
    {
        class CaePart;
    }
    namespace CAE
    {
        class CaeGroup;
    }
    class TaggedObject;
    namespace CAE
    {
        /**  @brief  Provides methods for managing set @link CAE::CaeGroup CAE::CaeGroup@endlink  

           <br> To obtain an instance of this class, refer to @link CAE::CaePart CAE::CaePart@endlink  <br> */
        class NXOPENCPPEXPORT CaeGroupCollection : public TaggedObjectCollection
        {
            /** Entity type */
            public: enum EntityType
            {
                EntityTypeNode/** node */ ,
                EntityTypeElement/** element */ 
            };

            private: NXOpen::CAE::CaePart* m_owner;
            public: explicit CaeGroupCollection(NXOpen::CAE::CaePart *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef CAE::CaeGroup * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::CAE::CaeGroupCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::CAE::CaeGroupCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Create a Group @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateGroup
            (
                const NXString & setName /**  Name of a Set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            /** Create a Union of Groups @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateUnionGroup
            (
                const NXString & setName /**  Name of a Set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a Intersection of Groups @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateIntersectionGroup
            (
                const NXString & setName /**  Name of a Set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a XOR of Groups @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateExclusiveOrGroup
            (
                const NXString & setName /**  Name of a Set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a Subtraction of two Groups @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateSubtractGroup
            (
                const NXString & setName /**  Name of a Set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::CaeGroup * fromGroup /** The Set that will be substracted */,
                NXOpen::CAE::CaeGroup * excludedGroup /** The Set that will be used for substraction */
            );
            /** Copy a Group @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CopyGroup
            (
                const NXString & setName /**  Name of a Set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::CaeGroup * sourceGroup /** source group */ 
            );
            /** Create a Output Group @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateOutputGroup
            (
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            /** Create a Node/Element Group from node/element IDs @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateGroupFromEntityIds
            (
                const NXString & setName /**  Name of a Set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::CaeGroupCollection::EntityType entityType /** entitytype */ ,
                const std::vector<int> & entityID /** entityid */ 
            );
            /** Finds the @link  CAE::CaeGroup   CAE::CaeGroup @endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.

                        An exception will be thrown if no object can be found with the given journal identifier.  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CaeGroup * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the Set you want   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Query Groups list <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void QueryGroupList
            (
                std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
