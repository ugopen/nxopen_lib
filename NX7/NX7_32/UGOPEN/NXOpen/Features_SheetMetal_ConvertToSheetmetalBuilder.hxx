#ifndef NXOpen_FEATURES_SHEETMETAL_CONVERTTOSHEETMETALBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_CONVERTTOSHEETMETALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_ConvertToSheetmetalBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SheetmetalFeatureProperty.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class ConvertToSheetmetalBuilder;
        }
    }
    class Edge;
    class Expression;
    class Face;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SketchFeature;
    }
    class Section;
    namespace Features
    {
        namespace SheetMetal
        {
            class _ConvertToSheetmetalBuilderBuilder;
            /** This is the feature builder for the convert to sheetmetal feature.  <br> To create a new instance of this class, use @link Features::SheetMetal::SheetmetalManager::CreateConvertToSheetmetalFeatureBuilder Features::SheetMetal::SheetmetalManager::CreateConvertToSheetmetalFeatureBuilder@endlink  <br> */
            class NXOPENCPPEXPORT ConvertToSheetmetalBuilder : public Features::FeatureBuilder
            {
                /** This enum represents the bend relief type. */
                public: enum BendReliefTypeOptions
                {
                    BendReliefTypeOptionsNone/** none */ ,
                    BendReliefTypeOptionsSquare/** square */ ,
                    BendReliefTypeOptionsRound/** round */ 
                };

                private: friend class  _ConvertToSheetmetalBuilderBuilder;
                protected: ConvertToSheetmetalBuilder();
                /**Returns  the base face from which the thickness of the part is determined.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Face * BaseFace
                (
                );
                /**Sets  the base face from which the thickness of the part is determined.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetBaseFace
                (
                    NXOpen::Face * baseFace /** base face */ 
                );
                /**Returns  the section containing curves that need to be ripped while converting to sheetmetal.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Section * RipSection
                (
                );
                /**Sets  the section containing curves that need to be ripped while converting to sheetmetal.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetRipSection
                (
                    NXOpen::Section * section /** section */ 
                );
                /** Gets the array of edges selected for ripping while converting to sheetmetal.
                         @return   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: std::vector<NXOpen::Edge *> GetRipEdges
                (
                );
                /**  Sets the array of edges that need to be ripped while converting to sheetmetal.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetRipEdges
                (
                    const std::vector<NXOpen::Edge *> & ripEdges /** rip edges */ 
                );
                /**Returns  the bend relief type.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Features::SheetMetal::ConvertToSheetmetalBuilder::BendReliefTypeOptions BendReliefType
                (
                );
                /**Sets  the bend relief type.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetBendReliefType
                (
                    NXOpen::Features::SheetMetal::ConvertToSheetmetalBuilder::BendReliefTypeOptions bendReliefType /** bend relief type */ 
                );
                /**Returns  the bend relief width.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Expression * BendReliefWidth
                (
                );
                /**  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetBendReliefWidth
                (
                    const NXString & bendReliefWidth /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the bend relief depth.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Expression * BendReliefDepth
                (
                );
                /**  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetBendReliefDepth
                (
                    const NXString & bendReliefDepth /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
                );
                /**Returns  the internal sketch (used to specify rip curves), if it exists.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Features::SketchFeature * Sketch
                (
                );
                /**Sets  the internal sketch (used to specify rip curves), if it exists.
                         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetSketch
                (
                    NXOpen::Features::SketchFeature * sketch /** sketch */ 
                );
                /** Verify that the builder data is valid for feature creation. 
                             <br> 
                                 If the builder data is valid, it returns a value of 0.
                             <br> 
                         @return  data validity flag (0 - valid, 1 - invalid)  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: int ValidateBuilderData
                (
                );
                /** Returns the application context of Convert to Sheet Metal  @return   <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: NXOpen::Features::SheetMetal::ApplicationContext GetApplicationContext
                (
                );
                /** Sets the application context of Convert to Sheet Metal  <br> License requirements : nx_sheet_metal ("NX Sheet Metal") OR nx_flexible_pcb ("NX Flexible PCB") */
                public: void SetApplicationContext
                (
                    NXOpen::Features::SheetMetal::ApplicationContext appContext /** app context */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
