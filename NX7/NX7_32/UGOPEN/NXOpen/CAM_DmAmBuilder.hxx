#ifndef NXOpen_CAM_DMAMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_DMAMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_DmAmBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class DmAmBuilder;
    }
    namespace CAM
    {
        class AmStepoverCiBuilder;
    }
    namespace CAM
    {
        class CutPatternBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class StepoverBuilder;
    }
    class Point;
    namespace CAM
    {
        class _DmAmBuilderBuilder;
        /** Represents a Area Milling Drive Method Builder */
        class NXOPENCPPEXPORT DmAmBuilder : public TaggedObject
        {
            /** Available types for Area Milling cut pattern in FASurfaceContour */
            public: enum AmCutPatternTypes
            {
                AmCutPatternTypesFollowPeriphery/** Follow Periphery */,
                AmCutPatternTypesProfile/** Profile */,
                AmCutPatternTypesSep1/** separate one */,
                AmCutPatternTypesParallelLines/** Parallel Lines */,
                AmCutPatternTypesRadialLines/** Radial Lines */,
                AmCutPatternTypesConcArcs/** Concentric Arcs */
            };

            /** Available types for Area Milling cut traversal in FASurfaceContour */
            public: enum AmCutTraversalTypes
            {
                AmCutTraversalTypesZigZag/** Zig-Zag */,
                AmCutTraversalTypesZigZagWithLifts/** Zig-Zag with Lifts */,
                AmCutTraversalTypesZig/** Zig */,
                AmCutTraversalTypesContour/** Zig with Contour */,
                AmCutTraversalTypesStepover/** Zig with Stepover */
            };

            /** Available types for am Cut Angle */
            public: enum AmCutAngleTypes
            {
                AmCutAngleTypesAutomatic/** Automatic */,
                AmCutAngleTypesUserDefined/** User Defined */,
                AmCutAngleTypesLongestLine/** Longest Line */
            };

            /** Available types for Area Milling Pocketing Direction in FASurfaceContour */
            public: enum AmPocketDirTypes
            {
                AmPocketDirTypesOutward/** Outward */,
                AmPocketDirTypesInward/** Inward */
            };

            /** Available types for  in FASurfaceContour */
            public: enum AmCustomStartTypes
            {
                AmCustomStartTypesCustom/** Area Milling Custom Start Custom */,
                AmCustomStartTypesAutomatic/** Area Milling Custom Start Automatic */
            };

            /** Available types for area milling Steep Option*/
            public: enum SteepOptTypes
            {
                SteepOptTypesSteepContainNone/** steep contain none */ ,
                SteepOptTypesNonSteepNonDirectional/** non steep non directional */ ,
                SteepOptTypesSteepDirectional/** steep directional */ 
            };

            /** Available types for area milling Auto Pattern Center*/
            public: enum AutoPatCenterTypes
            {
                AutoPatCenterTypesAutomatic/** Automatic */,
                AutoPatCenterTypesSpecify/** Specify */
            };

            private: friend class  _DmAmBuilderBuilder;
            protected: DmAmBuilder();
            /**Returns  the Cut Pattern value  <br> License requirements : None */
            public: NXOpen::CAM::DmAmBuilder::AmCutPatternTypes AmCutPattern
            (
            );
            /**Sets  the Cut Pattern value  <br> License requirements : None */
            public: void SetAmCutPattern
            (
                NXOpen::CAM::DmAmBuilder::AmCutPatternTypes amCutPattern /** the Cut Pattern value */
            );
            /**Returns  the Cut Traversal value  <br> License requirements : None */
            public: NXOpen::CAM::DmAmBuilder::AmCutTraversalTypes AmCutTraversal
            (
            );
            /**Sets  the Cut Traversal value  <br> License requirements : None */
            public: void SetAmCutTraversal
            (
                NXOpen::CAM::DmAmBuilder::AmCutTraversalTypes amCutTraversal /** the Cut Traversal value */
            );
            /**Returns  the Cut Angle Type  <br> License requirements : None */
            public: NXOpen::CAM::DmAmBuilder::AmCutAngleTypes AmCutAngleType
            (
            );
            /**Sets  the Cut Angle Type  <br> License requirements : None */
            public: void SetAmCutAngleType
            (
                NXOpen::CAM::DmAmBuilder::AmCutAngleTypes cutTypeValue /** cuttypevalue */ 
            );
            /**Returns  the Cut Angle Value  <br> License requirements : None */
            public: double AmCutAngleValue
            (
            );
            /**Sets  the Cut Angle Value  <br> License requirements : None */
            public: void SetAmCutAngleValue
            (
                double cutAngleValue /** cutanglevalue */ 
            );
            /**Returns  the Pocketing Deriction value  <br> License requirements : None */
            public: NXOpen::CAM::DmAmBuilder::AmPocketDirTypes AmPocketDir
            (
            );
            /**Sets  the Pocketing Deriction value  <br> License requirements : None */
            public: void SetAmPocketDir
            (
                NXOpen::CAM::DmAmBuilder::AmPocketDirTypes pocketDirValue /** the Pocketing Deriction value */
            );
            /**Returns  the Additional Passes  <br> License requirements : None */
            public: int AmAddPasses
            (
            );
            /**Sets  the Additional Passes  <br> License requirements : None */
            public: void SetAmAddPasses
            (
                int addPassesValue /** the Additional Passes value */
            );
            /**Returns  the Cut Region Start Point <br> License requirements : None */
            public: NXOpen::CAM::DmAmBuilder::AmCustomStartTypes AmCutRegionStartEnum
            (
            );
            /**Sets  the Cut Region Start Point <br> License requirements : None */
            public: void SetAmCutRegionStartEnum
            (
                NXOpen::CAM::DmAmBuilder::AmCustomStartTypes amCutRegionStart /** the Cut Region Start Point */
            );
            /**Returns  the Area Milling Steep Option <br> License requirements : None */
            public: NXOpen::CAM::DmAmBuilder::SteepOptTypes AmSteepOption
            (
            );
            /**Sets  the Area Milling Steep Option <br> License requirements : None */
            public: void SetAmSteepOption
            (
                NXOpen::CAM::DmAmBuilder::SteepOptTypes amSteepOption /** the Area Milling Steep Option */
            );
            /**Returns  the steep angle  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * SteepAngle
            (
            );
            /**Returns  the Area Milling Auto Pattern Center <br> License requirements : None */
            public: NXOpen::CAM::DmAmBuilder::AutoPatCenterTypes AmAutoPatCenter
            (
            );
            /**Sets  the Area Milling Auto Pattern Center <br> License requirements : None */
            public: void SetAmAutoPatCenter
            (
                NXOpen::CAM::DmAmBuilder::AutoPatCenterTypes autoPatCenter /** autopatcenter */ 
            );
            /**Returns  the Pattern Center Point  <br> License requirements : None */
            public: NXOpen::Point * PatternCenterPoint
            (
            );
            /**Sets  the Pattern Center Point  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternCenterPoint
            (
                NXOpen::Point * centerPoint /** centerpoint */ 
            );
            /**Returns  the stepover ci builder 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: NXOpen::CAM::AmStepoverCiBuilder * StepoverCiBuilder
            (
            );
            /**Returns  the stepover builder  <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * StepoverBuilder
            (
            );
            /**Returns  the Region Connection  <br> License requirements : None */
            public: bool DmAmRegionCon
            (
            );
            /**Sets  the Region Connection  <br> License requirements : None */
            public: void SetDmAmRegionCon
            (
                bool dmAmRegionCon /** the Region Connection value */
            );
            /**Returns  the Profile Pass  <br> License requirements : None */
            public: bool ProfilePass
            (
            );
            /**Sets  the Profile Pass  <br> License requirements : None */
            public: void SetProfilePass
            (
                bool profilePass /** the Profile Pass value */
            );
            /**Returns  the cut pattern builder  <br> License requirements : None */
            public: NXOpen::CAM::CutPatternBuilder * CutPatternBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
