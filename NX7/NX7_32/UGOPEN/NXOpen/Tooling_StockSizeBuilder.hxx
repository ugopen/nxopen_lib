#ifndef NXOpen_TOOLING_STOCKSIZEBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_STOCKSIZEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_StockSizeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_StockSizeBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class StockSizeBuilder;
    }
    class Builder;
    class SelectBodyList;
    namespace Tooling
    {
        class _StockSizeBuilderBuilder;
        /** Represents a Tooling::StockSizeBuilder builder  <br> To create a new instance of this class, use @link Tooling::StockSizeCollection::CreateStocksizeBuilder Tooling::StockSizeCollection::CreateStocksizeBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CylinderType </td> <td> 
         
        Circumscribed </td> </tr> 

        <tr><td> 
         
        SizePrecision </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StockType </td> <td> 
         
        Block </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT StockSizeBuilder : public Builder
        {
            /** The JA_STOCKSIZE_BUILDER_shape is an index to the shape of stock size. */
            public: enum Shape
            {
                ShapeBlock/** The shape is a block */,
                ShapeCylinder/** The shape is a cylinder */
            };

            /** The JA_STOCKSIZE_BUILDER_cylinder is an index to the base circle type of cylinder. */
            public: enum Cylinder
            {
                CylinderCircumscribed/** circumcircle based cylinder */,
                CylinderInscribedCircle/** inscribed circle based cylinder */
            };

            private: friend class  _StockSizeBuilderBuilder;
            protected: StockSizeBuilder();
            /**Returns  the selected body is used to calculate a bounding box for stock size  <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectBody
            (
            );
            /**Returns  the stock shape will be generated, it can be a box or cylinder  <br> License requirements : None */
            public: NXOpen::Tooling::StockSizeBuilder::Shape StockType
            (
            );
            /**Sets  the stock shape will be generated, it can be a box or cylinder  <br> License requirements : None */
            public: void SetStockType
            (
                NXOpen::Tooling::StockSizeBuilder::Shape enumStockType /** enumstocktype */ 
            );
            /**Returns  the cylinder type may be used to generate a cylinder for the stock size  <br> License requirements : None */
            public: NXOpen::Tooling::StockSizeBuilder::Cylinder CylinderType
            (
            );
            /**Sets  the cylinder type may be used to generate a cylinder for the stock size  <br> License requirements : None */
            public: void SetCylinderType
            (
                NXOpen::Tooling::StockSizeBuilder::Cylinder enumCylinderType /** enumcylindertype */ 
            );
            /**Returns  the stock size string, it is seperated by " X "  <br> License requirements : None */
            public: NXString StringStock
            (
            );
            /**Sets  the stock size string, it is seperated by " X "  <br> License requirements : None */
            public: void SetStringStock
            (
                const NXString & stringStock /** stringstock */ 
            );
            /**Returns  the size precision for the stock  <br> License requirements : None */
            public: int SizePrecision
            (
            );
            /**Sets  the size precision for the stock  <br> License requirements : None */
            public: void SetSizePrecision
            (
                int integerPrecision /** integerprecision */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
