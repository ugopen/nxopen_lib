#ifndef NXOpen_CAM_INSPECTIONTOLERANCEOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONTOLERANCEOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionToleranceOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionToleranceOperationBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionToleranceOperationBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Direction;
    class SelectNXObject;
    namespace CAM
    {
        class _InspectionToleranceOperationBuilderBuilder;
        /** this class creates the tolerance operation  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionToleranceOperationBuilder CAM::InspectionOperationCollection::CreateInspectionToleranceOperationBuilder@endlink  <br> */
        class NXOPENCPPEXPORT InspectionToleranceOperationBuilder : public CAM::OperationBuilder
        {
            /** Tolerance types */
            public: enum TolType
            {
                TolTypeDistanceBetween/** distance between */ ,
                TolTypeAngleBetween/** angle between */ ,
                TolTypeCoordinateTolerance/** coordinate tolerance */ ,
                TolTypeDiameter/** diameter */ ,
                TolTypeRadius/** radius */ ,
                TolTypeWidth/** width */ ,
                TolTypeConeAngle/** cone angle */ ,
                TolTypeDatumDefinition/** datum definition */ ,
                TolTypeFlatness/** flatness */ ,
                TolTypeStraightness/** straightness */ ,
                TolTypeCircularity/** circularity */ ,
                TolTypeCylindricity/** cylindricity */ ,
                TolTypeLineProfile/** line profile */ ,
                TolTypeSurfaceProfile/** surface profile */ ,
                TolTypeAngularity/** angularity */ ,
                TolTypeParallelism/** parallelism */ ,
                TolTypePerpendicularity/** perpendicularity */ ,
                TolTypePosition/** position */ ,
                TolTypeConcentricity/** concentricity */ ,
                TolTypeSymmetry/** symmetry */ ,
                TolTypeCircularRunout/** circular runout */ ,
                TolTypeTotalRunout/** total runout */ 
            };

            /** X/Y/Z axis */
            public: enum ParamXYZAxis
            {
                ParamXYZAxisXAxis/** xaxis */ ,
                ParamXYZAxisYAxis/** yaxis */ ,
                ParamXYZAxisZAxis/** zaxis */ 
            };

            /** Subtypes */
            public: enum ParamSubType
            {
                ParamSubTypeSurface/** surface */ ,
                ParamSubTypeAxis/** axis */ 
            };

            /** Extent */
            public: enum ParamExtent
            {
                ParamExtentTotal/** total */ ,
                ParamExtentUnitAreaLength/** unit area length */ 
            };

            /** Tolerance zone shape */
            public: enum ParamTolZoneShape
            {
                ParamTolZoneShapeNone/** none */ ,
                ParamTolZoneShapeCylindrical/** cylindrical */ ,
                ParamTolZoneShapeCircular/** circular */ ,
                ParamTolZoneShapeSpherical/** spherical */ 
            };

            /** Material modifiers */
            public: enum ParamTolMatModifier
            {
                ParamTolMatModifierNone/** none */ ,
                ParamTolMatModifierMmc/** mmc */ ,
                ParamTolMatModifierLmc/** lmc */ ,
                ParamTolMatModifierRfs/** rfs */ 
            };

            /** Material modifiers */
            public: enum ParamTolMatModifierDup
            {
                ParamTolMatModifierDupNone/** none */ ,
                ParamTolMatModifierDupMmc/** mmc */ ,
                ParamTolMatModifierDupLmc/** lmc */ ,
                ParamTolMatModifierDupRfs/** rfs */ 
            };

            /** Default datum symbols */
            public: enum ParamPriDatum
            {
                ParamPriDatumA/** a */ ,
                ParamPriDatumB/** b */ ,
                ParamPriDatumC/** c */ 
            };

            /** Primary datum material modifiers */
            public: enum ParamPriDatumModifier
            {
                ParamPriDatumModifierNone/** none */ ,
                ParamPriDatumModifierMmc/** mmc */ ,
                ParamPriDatumModifierLmc/** lmc */ ,
                ParamPriDatumModifierRfs/** rfs */ 
            };

            /** Default datum symbols */
            public: enum ParamSecDatum
            {
                ParamSecDatumA/** a */ ,
                ParamSecDatumB/** b */ ,
                ParamSecDatumC/** c */ 
            };

            /** Primary datum material modifiers */
            public: enum ParamSecDatumModifier
            {
                ParamSecDatumModifierNone/** none */ ,
                ParamSecDatumModifierMmc/** mmc */ ,
                ParamSecDatumModifierLmc/** lmc */ ,
                ParamSecDatumModifierRfs/** rfs */ 
            };

            /** Default datum symbols */
            public: enum ParamTerDatum
            {
                ParamTerDatumA/** a */ ,
                ParamTerDatumB/** b */ ,
                ParamTerDatumC/** c */ 
            };

            /** Tertiary datum material modifiers */
            public: enum ParamTerDatumModifier
            {
                ParamTerDatumModifierNone/** none */ ,
                ParamTerDatumModifierMmc/** mmc */ ,
                ParamTerDatumModifierLmc/** lmc */ ,
                ParamTerDatumModifierRfs/** rfs */ 
            };

            /** PCS or absolute coordinate sysytem */
            public: enum SirVecPCSABS
            {
                SirVecPCSABSRelativetoPCS/** relativeto pcs */ ,
                SirVecPCSABSAbsolute/** absolute */ 
            };

            private: friend class  _InspectionToleranceOperationBuilderBuilder;
            protected: InspectionToleranceOperationBuilder();
            /**Returns  the tolerance type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::TolType TolOpType
            (
            );
            /**Sets  the tolerance type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolOpType
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::TolType tolOpType /** toloptype */ 
            );
            /**Returns  the is composite flag  <br> License requirements : None */
            public: bool IsComposite
            (
            );
            /**Sets  the is composite flag  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetComposite
            (
                bool isComposite /** iscomposite */ 
            );
            /**Returns  the PMI selection  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectionPMI
            (
            );
            /**Returns  the string datum letter  <br> License requirements : None */
            public: NXString StringDatumLetter
            (
            );
            /**Sets  the string datum letter  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringDatumLetter
            (
                const NXString & stringDatumLetter /** stringdatumletter */ 
            );
            /**Returns  the enum param xyzaxis  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamXYZAxis EnumParamXYZAxis
            (
            );
            /**Sets  the enum param xyzaxis  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamXYZAxis
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamXYZAxis enumParamXYZAxis /** enumparamxyzaxis */ 
            );
            /**Returns  the nominal tolerance  <br> License requirements : None */
            public: double DoubleNominal
            (
            );
            /**Sets  the nominal tolerance  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleNominal
            (
                double doubleNominal /** doublenominal */ 
            );
            /**Returns  the upper tolerance  <br> License requirements : None */
            public: double DoubleUpper
            (
            );
            /**Sets  the upper tolerance  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleUpper
            (
                double doubleUpper /** doubleupper */ 
            );
            /**Returns  the lower tolerance  <br> License requirements : None */
            public: double DoubleLower
            (
            );
            /**Sets  the lower tolerance  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleLower
            (
                double doubleLower /** doublelower */ 
            );
            /**Returns  the enum param sub type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSubType EnumParamSubType
            (
            );
            /**Sets  the enum param sub type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamSubType
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSubType enumParamSubType /** enumparamsubtype */ 
            );
            /**Returns  the enum parameter extent  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamExtent EnumParameterExtent
            (
            );
            /**Sets  the enum parameter extent  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParameterExtent
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamExtent enumParameterExtent /** enumparameterextent */ 
            );
            /**Returns  the double param ext length  <br> License requirements : None */
            public: double DoubleParamExtLength
            (
            );
            /**Sets  the double param ext length  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamExtLength
            (
                double doubleParamExtLength /** doubleparamextlength */ 
            );
            /**Returns  the double param ext area  <br> License requirements : None */
            public: double DoubleParamExtArea
            (
            );
            /**Sets  the double param ext area  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamExtArea
            (
                double doubleParamExtArea /** doubleparamextarea */ 
            );
            /**Returns  the enum param tol zone shape  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolZoneShape EnumParamTolZoneShape
            (
            );
            /**Sets  the enum param tol zone shape  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolZoneShape
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolZoneShape enumParamTolZoneShape /** enumparamtolzoneshape */ 
            );
            /**Returns  the double param tol value  <br> License requirements : None */
            public: double DoubleParamTolValue
            (
            );
            /**Sets  the double param tol value  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamTolValue
            (
                double doubleParamTolValue /** doubleparamtolvalue */ 
            );
            /**Returns  the enum param tol mat modifier  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifier EnumParamTolMatModifier
            (
            );
            /**Sets  the enum param tol mat modifier  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolMatModifier
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifier enumParamTolMatModifier /** enumparamtolmatmodifier */ 
            );
            /**Returns  the enum param tol mat modifier dup  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifierDup EnumParamTolMatModifierDup
            (
            );
            /**Sets  the enum param tol mat modifier dup  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolMatModifierDup
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifierDup enumParamTolMatModifierDup /** enumparamtolmatmodifierdup */ 
            );
            /**Returns  the double param outer profile  <br> License requirements : None */
            public: double DoubleParamOuterProfile
            (
            );
            /**Sets  the double param outer profile  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamOuterProfile
            (
                double doubleParamOuterProfile /** doubleparamouterprofile */ 
            );
            /**Returns  the string pri datum  <br> License requirements : None */
            public: NXString StringPriDatum
            (
            );
            /**Sets  the string pri datum  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringPriDatum
            (
                const NXString & stringPriDatum /** stringpridatum */ 
            );
            /**Returns  the enum param pri mat modifier  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamPriDatumModifier EnumParamPriMatModifier
            (
            );
            /**Sets  the enum param pri mat modifier  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamPriMatModifier
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamPriDatumModifier enumParamPriMatModifier /** enumparamprimatmodifier */ 
            );
            /**Returns  the string sec datum  <br> License requirements : None */
            public: NXString StringSecDatum
            (
            );
            /**Sets  the string sec datum  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringSecDatum
            (
                const NXString & stringSecDatum /** stringsecdatum */ 
            );
            /**Returns  the enum param sec mat modifier  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSecDatumModifier EnumParamSecMatModifier
            (
            );
            /**Sets  the enum param sec mat modifier  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamSecMatModifier
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSecDatumModifier enumParamSecMatModifier /** enumparamsecmatmodifier */ 
            );
            /**Returns  the string ter datum  <br> License requirements : None */
            public: NXString StringTerDatum
            (
            );
            /**Sets  the string ter datum  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTerDatum
            (
                const NXString & stringTerDatum /** stringterdatum */ 
            );
            /**Returns  the enum param ter mat modifier  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTerDatumModifier EnumParamTerMatModifier
            (
            );
            /**Sets  the enum param ter mat modifier  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTerMatModifier
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTerDatumModifier enumParamTerMatModifier /** enumparamtermatmodifier */ 
            );
            /**Returns  the enum param tol zone shape1  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolZoneShape EnumParamTolZoneShape1
            (
            );
            /**Sets  the enum param tol zone shape1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolZoneShape1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolZoneShape enumParamTolZoneShape1 /** enumparamtolzoneshape1 */ 
            );
            /**Returns  the double param tol value1  <br> License requirements : None */
            public: double DoubleParamTolValue1
            (
            );
            /**Sets  the double param tol value1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamTolValue1
            (
                double doubleParamTolValue1 /** doubleparamtolvalue1 */ 
            );
            /**Returns  the double lower param outer profile  <br> License requirements : None */
            public: double DoubleLowerParamOuterProfile
            (
            );
            /**Sets  the double lower param outer profile  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleLowerParamOuterProfile
            (
                double doubleLowerParamOuterProfile /** doublelowerparamouterprofile */ 
            );
            /**Returns  the enum param tol mat modifier1  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifier EnumParamTolMatModifier1
            (
            );
            /**Sets  the enum param tol mat modifier1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolMatModifier1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifier enumParamTolMatModifier1 /** enumparamtolmatmodifier1 */ 
            );
            /**Returns  the string pri datum1  <br> License requirements : None */
            public: NXString StringPriDatum1
            (
            );
            /**Sets  the string pri datum1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringPriDatum1
            (
                const NXString & stringPriDatum1 /** stringpridatum1 */ 
            );
            /**Returns  the enum param pri mat modifier1  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamPriDatumModifier EnumParamPriMatModifier1
            (
            );
            /**Sets  the enum param pri mat modifier1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamPriMatModifier1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamPriDatumModifier enumParamPriMatModifier1 /** enumparamprimatmodifier1 */ 
            );
            /**Returns  the string sec datum1  <br> License requirements : None */
            public: NXString StringSecDatum1
            (
            );
            /**Sets  the string sec datum1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringSecDatum1
            (
                const NXString & stringSecDatum1 /** stringsecdatum1 */ 
            );
            /**Returns  the enum param sec mat modifier1  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSecDatumModifier EnumParamSecMatModifier1
            (
            );
            /**Sets  the enum param sec mat modifier1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamSecMatModifier1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSecDatumModifier enumParamSecMatModifier1 /** enumparamsecmatmodifier1 */ 
            );
            /**Returns  the string ter datum1  <br> License requirements : None */
            public: NXString StringTerDatum1
            (
            );
            /**Sets  the string ter datum1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTerDatum1
            (
                const NXString & stringTerDatum1 /** stringterdatum1 */ 
            );
            /**Returns  the enum param ter mat modifier1  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTerDatumModifier EnumParamTerMatModifier1
            (
            );
            /**Sets  the enum param ter mat modifier1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTerMatModifier1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTerDatumModifier enumParamTerMatModifier1 /** enumparamtermatmodifier1 */ 
            );
            /**Returns  the vector view vec  <br> License requirements : None */
            public: NXOpen::Direction * VectorViewVec
            (
            );
            /**Sets  the vector view vec  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetVectorViewVec
            (
                NXOpen::Direction * vectorViewVec /** vectorviewvec */ 
            );
            /**Returns  the double view vec i  <br> License requirements : None */
            public: double DoubleViewVecI
            (
            );
            /**Sets  the double view vec i  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleViewVecI
            (
                double doubleViewVecI /** doubleviewveci */ 
            );
            /**Returns  the double view vec j  <br> License requirements : None */
            public: double DoubleViewVecJ
            (
            );
            /**Sets  the double view vec j  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleViewVecJ
            (
                double doubleViewVecJ /** doubleviewvecj */ 
            );
            /**Returns  the double view vec k  <br> License requirements : None */
            public: double DoubleViewVecK
            (
            );
            /**Sets  the double view vec k  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleViewVecK
            (
                double doubleViewVecK /** doubleviewveck */ 
            );
            /**Returns  the selection toleranced feature  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectionTolerancedFeature
            (
            );
            /**Returns  the string toleranced feat  <br> License requirements : None */
            public: NXString StringTolerancedFeat
            (
            );
            /**Sets  the string toleranced feat  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTolerancedFeat
            (
                const NXString & stringTolerancedFeat /** stringtolerancedfeat */ 
            );
            /**Returns  the selection origin feature  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectionOriginFeature
            (
            );
            /**Returns  the string origin feat name  <br> License requirements : None */
            public: NXString StringOriginFeatName
            (
            );
            /**Sets  the string origin feat name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringOriginFeatName
            (
                const NXString & stringOriginFeatName /** stringoriginfeatname */ 
            );
            /**Returns  the vector direction  <br> License requirements : None */
            public: NXOpen::Direction * VectorDirection
            (
            );
            /**Sets  the vector direction  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetVectorDirection
            (
                NXOpen::Direction * vectorDirection /** vectordirection */ 
            );
            /**Returns  the enum pcsabs  <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::SirVecPCSABS EnumPCSABS
            (
            );
            /**Sets  the enum pcsabs  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumPCSABS
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::SirVecPCSABS enumPCSABS /** enumpcsabs */ 
            );
            /**Returns  the double dir vec i  <br> License requirements : None */
            public: double DoubleDirVecI
            (
            );
            /**Sets  the double dir vec i  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleDirVecI
            (
                double doubleDirVecI /** doubledirveci */ 
            );
            /**Returns  the double dir vec j  <br> License requirements : None */
            public: double DoubleDirVecJ
            (
            );
            /**Sets  the double dir vec j  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleDirVecJ
            (
                double doubleDirVecJ /** doubledirvecj */ 
            );
            /**Returns  the double dir vec k  <br> License requirements : None */
            public: double DoubleDirVecK
            (
            );
            /**Sets  the double dir vec k  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleDirVecK
            (
                double doubleDirVecK /** doubledirveck */ 
            );
            /**Returns  the selection feature  <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectionFeature
            (
            );
            /**Returns  the string datum feat name  <br> License requirements : None */
            public: NXString StringDatumFeatName
            (
            );
            /**Sets  the string datum feat name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringDatumFeatName
            (
                const NXString & stringDatumFeatName /** stringdatumfeatname */ 
            );
            /**Returns  the string tol name  <br> License requirements : None */
            public: NXString StringTolName
            (
            );
            /**Sets  the string tol name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTolName
            (
                const NXString & stringTolName /** stringtolname */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
