#ifndef NXOpen_ASSEMBLIES_COMPONENTASSEMBLY_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_COMPONENTASSEMBLY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ComponentAssembly.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_Component.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/PartCloseStatus.hxx>
#include <NXOpen/PartLoadStatus.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class ArrangementCollection;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class ExplosionCollection;
    }
    class BasePart;
    class ErrorList;
    class Expression;
    class NXObject;
    class Part;
    class PartCloseStatus;
    class PartLoadStatus;
    namespace Positioning
    {
        class ComponentPositioner;
    }
    namespace Positioning
    {
        class MatingConverter;
    }
    namespace Assemblies
    {
        class _ComponentAssemblyBuilder;
        /**
          Represents the set of @link Assemblies::Component Assemblies::Component@endlink s that make up an
          assembly. Components are arranged in a tree structure, with a single component at the
          root. (See @link Assemblies::ComponentAssembly::RootComponent Assemblies::ComponentAssembly::RootComponent@endlink .) The
          components directly below the root are added to this assembly by calling
          @link Assemblies::ComponentAssembly::AddComponent Assemblies::ComponentAssembly::AddComponent@endlink . These "Top Level" components are
          said to be owned directly by this assembly. Top Level components may themselves have
          subcomponents.

           <br> 
          Certain methods in this class will only operate on Top Level components. For example,
          @link Assemblies::ComponentAssembly::MoveComponent Assemblies::ComponentAssembly::MoveComponent@endlink  will throw an exception if the
          input component is not owned directly by this assembly.  
           <br> 

           <br> 
          Note, however, that input components will be mapped onto the correct component in the
          assembly. See @link Assemblies::ComponentAssembly::MapComponentFromParent Assemblies::ComponentAssembly::MapComponentFromParent@endlink .
           <br> 

           <br> 
          For any methods that specify a component's position, the orientation matrix is in column order. 
          The first column of the matrix specifies the X axis, the second the Y axis, and the third the Z
          axis.
           <br> 
         <br> To obtain an instance of this class, use @link BasePart::ComponentAssembly BasePart::ComponentAssembly@endlink  <br> */
        class NXOPENCPPEXPORT ComponentAssembly : public NXObject
        {
            /** Defines how a component substitution operation is performed.
                 */
            public: enum SubstitutionMode
            {
                SubstitutionModeNonAssociative/** The old component is deleted, and the new one is added */,
                SubstitutionModeSingleComponent/** An associative substitution is performed. As far as possible,
                                                                                        this will attempt to preserve mating conditions and interpart
                                                                                        links. */,
                SubstitutionModeAll/** An associative substitution is performed on all components that
                                                                                        represent the same prototype part. This effectively substitutes
                                                                                        one child part for a new one. */
            };

            /** Open options for open_components */
            public: enum OpenOption
            {
                OpenOptionComponentOnly/** Open the component but none of its children */,
                OpenOptionImmediateChildren/** Open the immediate children of an already open component */,
                OpenOptionWholeAssembly/** Open the component and all of its children */
            };

            /** Open Component Status */
            public: enum OpenComponentStatus
            {
                OpenComponentStatusSuccessfullyOpened/** The component was opened as expected */,
                OpenComponentStatusDeletedByOpen/** The component was deleted on load as a result of the open */,
                OpenComponentStatusCouldNotOpen/** The component could not be opened */
            };

            /** Indicates how close component should handle component parts when they are modified */
            public: enum CloseModified
            {
                CloseModifiedFalse/** Close only unmodified parts, not modified parts */,
                CloseModifiedTrue/** Close all parts, modified and unmodified */
            };

            /** 
                    Defines the component supression states.
                */
            public: enum SuppressedState
            {
                SuppressedStateInherit/** Inherit */,
                SuppressedStateSuppressed/** Suppressed */,
                SuppressedStateUnsuppressed/** Unsuppressed */,
                SuppressedStateSuppressedByExp/** Suppressed by expression */,
                SuppressedStateUnsuppressedByExp/** Unsuppressed by expression */
            };

            private: friend class  _ComponentAssemblyBuilder;
            protected: ComponentAssembly();
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddComponent
            (
                const NXString & partToAdd /** The part that defines the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & componentName /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */
            );
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddComponent
            (
                const NXString & partToAdd /** The part that defines the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & componentName /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */,
                bool uomAsNgc /** Whether to set to non-geometric if with unit-of-measure */
            );
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly, based on an existing part file.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddComponent
            (
                NXOpen::BasePart * partToAdd /** The part that defines the new component */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & componentName /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer. */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the
                                                                                                    part_to_add */
            );
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly as master part.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddMasterPartComponent
            (
                const NXString & partToAdd /** The part that defines the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & componentName /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer.
                                                         */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the part_to_add */
            );
            /** 
                    Creates a new @link Assemblies::Component Assemblies::Component@endlink  in this assembly as master part.
                 @return  The new Component  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * AddMasterPartComponent
            (
                NXOpen::Part * partToAdd /** The part that defines the new component */,
                const NXString & referenceSetName /** The name of the reference set used to represent the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & componentName /** The name of the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::Point3d & basePoint /** Location of the new component */,
                const NXOpen::Matrix3x3 & orientation /** Orientation matrix for the new component, in column order.  */,
                int layer /**  The layer to place the new component on 
                                                              -1 means use the original layers defined in the component.
                                                              0 means use the work layer.
                                                              1-256 means use the specified layer.
                                                         */,
                NXOpen::PartLoadStatus ** loadStatus /** Result of loading the part_to_add */
            );
            /**Returns   @brief  the top-level component, i.e. the component at the root of the component
                    tree.  

               This component corresponds to the part that owns this
                    @link Assemblies::ComponentAssembly Assemblies::ComponentAssembly@endlink . The components below this will correspond to
                    parts added by calling @link Assemblies::ComponentAssembly::AddComponent Assemblies::ComponentAssembly::AddComponent@endlink .
                     <br> 
                    Note that this will be NULL if there are no components in the tree. (I.e. if the part
                    that owns this ComponentAssembly is a piece part.)
                     <br> 
                 <br> License requirements : None */
            public: NXOpen::Assemblies::Component * RootComponent
            (
            );
            /**
                    Substitutes an old component with a new component. The new component represents a new part, but 
                    will be placed in the same location as the original.
                 @return  The new Component that replaces the old one.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Component * SubstituteComponent
            (
                NXOpen::Assemblies::Component * component /** The old component to be substituted. */,
                NXOpen::BasePart * part /** The new part */,
                const NXString & newName /** The name for the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & referenceSet /** The name of the reference set for the new component   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int layer /** The layer for the new component 
                                                                    -1 means use the original layers defined in the component.
                                                                    0 means use the work layer
                                                                    1-256 means use the specified layer.
                                                              */,
                NXOpen::Assemblies::ComponentAssembly::SubstitutionMode mode /** Defines the substitution mode */
            );
            /** Removes a component from this assemebly.   <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RemoveComponent
            (
                NXOpen::Assemblies::Component * component /** The component to remove. Must be directly owned by this assembly. */
            );
            /** Maps a component in a parent assembly onto a corresponding component in this
                    assembly. For example, given an Axle assembly: 
                     @code 
                                           
                           Axle
                         /      \          
                        /        \         
                     Left        Right     
                     Wheel       Wheel     

                     @endcode  
                    and a Car assembly containing two Axle components:
                     @code 
                     
                                       Car
                                _______ |_______                   
                               /                \                  
                              /                  \                 
                         Front                     Rear            
                         Axle                      Axle            
                       /      \                  /      \          
                      /        \                /        \         
                 Front Left  Front Right    Rear Left   Rear Right 
                   Wheel       Wheel         Wheel       Wheel     

                     @endcode 

                    then calling Axle.MapComponentFromParent with the Front Left Wheel component will
                    return the Left Wheel component. Note that calling Car.MapComponentFromParent on
                    Left Wheel will not work. See @link Assemblies::ComponentAssembly::MapComponentsFromSubassembly Assemblies::ComponentAssembly::MapComponentsFromSubassembly@endlink .
                    

                     <br> 
                    Calling Axle.MapComponent with the Left Wheel component will simply return Left
                    Wheel, i.e. it is a null operation.
                     <br> 

                     <br> 
                    Note that calling this method may load additional assembly data from the Axle part. 
                     <br> 

                 @return  The mapped component. This will be defined in the
                                                                                 component tree of this assembly parameter.
                                                                             <br> License requirements : None */
            public: NXOpen::Assemblies::Component * MapComponentFromParent
            (
                NXOpen::Assemblies::Component * component /** The component to map. This should be defined in the
                                                                                    tree of a parent assembly which contains this assembly.
                                                                                */
            );
            /** Maps a component in a subassembly onto the corresponding components in this
                    parent assembly. For example, given an Axle assembly: 
                     @code 
                                           
                           Axle
                         /      \          
                        /        \         
                     Left        Right     
                     Wheel       Wheel     

                     @endcode  
                    and a Car assembly containing two Axle components:
                     @code 
                     
                                       Car
                                _______ |_______                   
                               /                \                  
                              /                  \                 
                         Front                     Rear            
                         Axle                      Axle            
                       /      \                  /      \          
                      /        \                /        \         
                 Front Left  Front Right    Rear Left   Rear Right 
                   Wheel       Wheel         Wheel       Wheel     

                     @endcode 

                    then calling Car.MapComponentsFromSubassembly on Left Wheel will return
                    Front Left Wheel and Rear Left Wheel.
                    See also @link Assemblies::ComponentAssembly::MapComponentFromParent Assemblies::ComponentAssembly::MapComponentFromParent@endlink .
                    
                 @return  The mapped components. 
                                                                                      <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> MapComponentsFromSubassembly
            (
                NXOpen::Assemblies::Component * component /** The component to map. This must be defined in a subassembly
                                                                                            of this assembly.
                                                                                         */
            );
            /**Returns 
                    the currently active @link Assemblies::Arrangement Assemblies::Arrangement@endlink  for this ComponentAssembly
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::Arrangement * ActiveArrangement
            (
            );
            /**Sets 
                    the currently active @link Assemblies::Arrangement Assemblies::Arrangement@endlink  for this ComponentAssembly
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetActiveArrangement
            (
                NXOpen::Assemblies::Arrangement * newArrangement /** The new active @link Assemblies::Arrangement Assemblies::Arrangement@endlink . This Arrangement
                                                                                must be defined in this ComponentAssembly.
                                                                            */
            );
            /**
                    Suppresses an array of components
                 @return  list of errors encountered during the suppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be suppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be suppressed.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Suppresses an array of components in all @link Assemblies::Arrangement Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the suppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be suppressed */
            );
            /**
                    Suppresses an array of components in all @link Assemblies::Arrangement Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the suppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * SuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be suppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be unsuppressed */,
                const NXString & expression /** Suppress components if expression evalutes zero else unsuppress components   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**
                    Unsuppresses an array of components in this ComponentAssembly
                 @return  list of errors encountered during the unsuppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * UnsuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be unsuppressed */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be unsuppressed.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Unsuppresses an array of components in all @link Assemblies::Arrangement Assemblies::Arrangement@endlink  s in this ComponentAssembly
                 @return  list of errors encountered during the unsuppress  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * UnsuppressComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be unsuppressed */
            );
            /**
                    Release control of the suppression state of an array of components. The components
                    will no longer have their suppression state controlled by the given arrangements. (Note
                    that it is not an error if the given arrangements do not control the components.)
                 @return  list of errors encountered during the release  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * ReleaseSuppression
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be released */,
                const std::vector<NXOpen::Assemblies::Arrangement *> & arrangements /** Arrangements in which components should be released.
                                                                                                          These arrangements must be defined in this ComponentAssembly
                                                                                                       */
            );
            /**
                    Release control of the suppression state of an array of components. The components
                    will no longer have their suppression state controlled by any of the arrangements
                    in the ComponentAssembly.
                 @return  list of errors encountered during the release  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::ErrorList * ReleaseSuppression
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** @link Assemblies::Component Assemblies::Component@endlink s to be released */
            );
            /** 
                    Convenience method for setting the reference set used to represent a component
                    to be the entire part.
                 <br> License requirements : None */
            public: void SetEntirePartRefset
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly. */
            );
            /** 
                    Convenience method for setting the reference set used to represent a component
                    to be empty
                 <br> License requirements : None */
            public: void SetEmptyRefset
            (
                NXOpen::Assemblies::Component * component /** The component to edit.  Must be directly owned by this assembly. */
            );
            /** 
                    Sets the reference set used to represent each component in an array. This is the equivalent of calling:
                     @code 
                    Assemblies.Component.DirectOwner
                     @endcode 
                     @code 
                    Assemblies.ComponentAssembly.ReplaceReferenceSet
                     @endcode 
                     <br> 
                    on each component in the array. However, this method will ensure that the reference set operations
                    are carried out in the correct order, so that any effects caused by a parent's reference set change will
                    be correctly reflected in the children. If changing reference set on components at various levels in the
                    assembly, use this method.
                     <br> 
                    
                 @return  list of errors encountered during the edit <br> License requirements : None */
            public: NXOpen::ErrorList * ReplaceReferenceSetInOwners
            (
                const NXString & newReferenceSet /** The name of the new reference set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be edited. Each component 
                                                                                                    will have its reference set updated in its
                                                                                                    owning assembly. */
            );
            /** Replaces the reference set used by a component.  <br> License requirements : None */
            public: void ReplaceReferenceSet
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly. */,
                const NXString & newReferenceSet /** The name of the new reference set   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Moves a component by specifying a translation and rotation. Note that these are
                    specified in the coordinates of this assembly, which are not necesasrily the
                    coordinates of the displayed part.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void MoveComponent
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly  */,
                const NXOpen::Vector3d & translation /** The translation delta */,
                const NXOpen::Matrix3x3 & rotation /** The rotation delta */
            );
            /**Returns  the component positioner for this assembly.  The positioner manages the component constraints.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ComponentPositioner * Positioner
            (
            );
            /** Creates a @link Positioning::MatingConverter Positioning::MatingConverter@endlink  object for this assembly.
                    This can be used to convert Mating Conditions in this part and in its child components
                    to Assembly Constraints. Note that this part need not be the work part for this. 
                 @return  The new Mating Converter  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::MatingConverter * CreateMatingConverter
            (
            );
            /**
                    Sets the component state to Geometric or Non-Geometric.
                    Component which are made non-geometric are undrawn from graphics area.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetNonGeometricState
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/,
                bool nonGeometricState /** True to make component non-geometric, false otherwise */
            );
            /**
                    Gets the component state as Geometric or Non-Geometric. 
                 @return  True if the component is non-geometric, false otherwise  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetNonGeometricState
            (
                NXOpen::Assemblies::Component * component /** The component to query. Must be directly owned by this assembly.*/
            );
            /**
                    Gets the quantity type of the components. Returns @link Assemblies::ComponentQuantity Assemblies::ComponentQuantity@endlink .
                 @return  Quantity type an enumeration value  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ComponentQuantity GetComponentQuantityType
            (
                NXOpen::Assemblies::Component * component /** The component to query. Must be directly owned by this assembly.*/
            );
            /**
                    Sets the integer quantity on this component.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIntegerQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/,
                int integerQuantity /** Integer quantity value */
            );
            /**
                    Gets the value of the integer quantity of component.
                 @return  Integer quantity value  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int GetIntegerQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to query. Must be directly owned by this assembly.*/
            );
            /**
                    Sets the real quantity and corresponding units on this component.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetRealQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/,
                double realQuantity /** Real quantity value */,
                const NXString & quantityUnits /** Units   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**
                    Gets the value of real quantity and corresponding units on this component.
                 @return  Real quantity value  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: double GetRealQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to query. Must be directly owned by this assembly.*/,
                NXString* units /** Units */
            );
            /**
                    Sets the as-required quantity on this component.
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAsRequiredQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/
            );
            /**
                    Gets the as-required quantity on this component.
                 @return  As-Required string "A/R" <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString GetAsRequiredQuantity
            (
                NXOpen::Assemblies::Component * component /** The component to edit. Must be directly owned by this assembly.*/
            );
            /**
                    Given an array of components, creates copies of the components such that each copy is created
                    under the parent assembly of the original component. The original components do not need to be
                    under the same parent assembly as each other.
                     <br> 
                    The number of new components may be different from the original number of components if problems
                    occurred during the copy.
                     <br> 
                 @return  The newly created copies.  <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Assemblies::Component *> CopyComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** Components to be copied. */
            );
            /**
                    Given an array of components and a specified parent this function will transfer the given components to the parent. 
                    The original components do not need to be under the same parent assembly as each other.
                     <br> 
                    The number of new components may be different from the original number of components if problems occurred during the transfer
                     <br> 
                 <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RestructureComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & origComponents /** Array of components to be restructured  */,
                NXOpen::Assemblies::Component * newParentComponent /** Destination for restructure  */,
                bool deleteFlag /** Flag to delete original components */,
                std::vector<NXOpen::Assemblies::Component *> & newComponents /** Restructured components */,
                NXOpen::ErrorList ** errorList /** Any errors that occurred during the restructure  */
            );
            /** Given an array of components, open the components using the open_option.  @return  If any components could not be loaded, this object contains the error information.  <br> License requirements : None */
            public: NXOpen::PartLoadStatus * OpenComponents
            (
                NXOpen::Assemblies::ComponentAssembly::OpenOption openOption /** The option that controls the open operation */,
                const std::vector<NXOpen::Assemblies::Component *> & componentsToOpen /** Array of components to open  */,
                std::vector<NXOpen::Assemblies::ComponentAssembly::OpenComponentStatus> & openStatus /** Shows the status of the objects in an indexed array according to if they could be opened */
            );
            /** 
                    Given an array of components, close the components. 
                    This close of the components will check for different reasons that the part cannot be closed. 
                    The reasons will be returned in the PartCloseStatus object.    
                 @return  Close status for the parts   <br> License requirements : None */
            public: NXOpen::PartCloseStatus * CloseComponents
            (
                const std::vector<NXOpen::Assemblies::Component *> & componentsToClose /** Array of components to close  */,
                NXOpen::BasePart::CloseWholeTree wholeTree /** If true, unloads all components of the part. If false, unloads only the top-level part */,
                NXOpen::Assemblies::ComponentAssembly::CloseModified closeModified /** Behavior of close if component parts are modified. */
            );
            /**
                    Gets the expression controlling the suppression of the component in its
                    controlling arrangement
                 @return  The suppression expression.  <br> License requirements : None */
            public: NXOpen::Expression * GetSuppressionExpression
            (
                NXOpen::Assemblies::Component * component /** The component to query.*/
            );
            /**
                    Gets the expression controlling the suppression of the component in the given
                    arrangment
                 @return  The suppression expression.  <br> License requirements : None */
            public: NXOpen::Expression * GetSuppressionExpression
            (
                NXOpen::Assemblies::Component * component /** The component to query.*/,
                NXOpen::Assemblies::Arrangement * arrangement /** The arrangement in which to query the suppressed state */
            );
            /**
                    Gets the suppression state of the component in its controlling arrangement
                 @return  The suppressed state  <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentAssembly::SuppressedState GetSuppressedState
            (
                NXOpen::Assemblies::Component * component /** The component to query.*/,
                bool* controlled /** Is the suppression state controlled at the level of arrangement? */
            );
            /**
                    Gets the suppression state of the component in the given arrangement.
                 @return  The suppressed state  <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentAssembly::SuppressedState GetSuppressedState
            (
                NXOpen::Assemblies::Component * component /** The component to query.*/,
                NXOpen::Assemblies::Arrangement * arrangement /** Arrangements in which components should 
                                                                                             be suppressed.
                                                                                         */,
                bool* controlled /** Is the suppression state controlled at 
                                                        the level of arrangement?
                                                    */
            );


            private: NXOpen::Assemblies::ArrangementCollection *arrangements;
            /** The collection of @link Assemblies::Arrangement Assemblies::Arrangement@endlink s defined in the ComponentAssembly */
            public: NXOpen::Assemblies::ArrangementCollection *Arrangements()
            {
                return arrangements;
            }
            private: NXOpen::Assemblies::ExplosionCollection *explosions;
            /** The collection of @link Assemblies::Explosion Assemblies::Explosion@endlink s defined in the ComponentAssembly */
            public: NXOpen::Assemblies::ExplosionCollection *Explosions()
            {
                return explosions;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
