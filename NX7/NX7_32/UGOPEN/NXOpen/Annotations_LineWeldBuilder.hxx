#ifndef NXOpen_ANNOTATIONS_LINEWELDBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LINEWELDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LineWeldBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_LeaderBuilder.hxx>
#include <NXOpen/Annotations_LineWeldBuilder.hxx>
#include <NXOpen/Annotations_LineWeldDataBuilder.hxx>
#include <NXOpen/Annotations_OriginBuilder.hxx>
#include <NXOpen/Annotations_StyleBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class LineWeldBuilder;
    }
    namespace Annotations
    {
        class LeaderBuilder;
    }
    namespace Annotations
    {
        class LineWeldDataBuilder;
    }
    namespace Annotations
    {
        class OriginBuilder;
    }
    namespace Annotations
    {
        class SelectLineWeld;
    }
    namespace Annotations
    {
        class StyleBuilder;
    }
    class Builder;
    class SelectDisplayableObject;
    class SelectDisplayableObjectList;
    namespace Annotations
    {
        class _LineWeldBuilderBuilder;
        /** Represents a @link Annotations::LineWeldBuilder Annotations::LineWeldBuilder@endlink    <br> To create a new instance of this class, use @link Annotations::WeldCollection::CreateLineWeldBuilder Annotations::WeldCollection::CreateLineWeldBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ArrowSideWeldData.ContourSymbol </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ArrowSideWeldData.FinishSymbol </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ArrowSideWeldData.WeldSizeCode </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ArrowSideWeldData.WeldSymbol </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        FieldWeld </td> <td> 
         
        Plain </td> </tr> 

        <tr><td> 
         
        FlipDirection </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FlipHorizontal </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FlipVertical </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IdLine </td> <td> 
         
        Plain </td> </tr> 

        <tr><td> 
         
        Scale </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        StaggeredWeld </td> <td> 
         
        NoStaggeredSymbol </td> </tr> 

        <tr><td> 
         
        Tail </td> <td> 
         
        NoTail </td> </tr> 

        <tr><td> 
         
        WeldAlongContour </td> <td> 
         
        None </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT LineWeldBuilder : public Builder
        {
            /** */
            public: enum FieldWeldType
            {
                FieldWeldTypePlain/** plain */ ,
                FieldWeldTypeTopField/** top field */ ,
                FieldWeldTypeTopFieldSimpleFlag/** top field simple flag */ 
            };

            /** */
            public: enum IdLineType
            {
                IdLineTypePlain/** plain */ ,
                IdLineTypeIdLineAbove/** id line above */ ,
                IdLineTypeIdLineBelow/** id line below */ ,
                IdLineTypeCenteredSpotWeld/** centered spot weld */ ,
                IdLineTypeCenteredSeamWeld/** centered seam weld */ 
            };

            /** */
            public: enum StaggeredWeldType
            {
                StaggeredWeldTypeNoStaggeredSymbol/** no staggered symbol */ ,
                StaggeredWeldTypeStaggeredSymbol/** staggered symbol */ ,
                StaggeredWeldTypeStaggeredSymbolWeldSide/** staggered symbol weld side */ 
            };

            /** */
            public: enum TailType
            {
                TailTypeNoTail/** no tail */ ,
                TailTypeTail/** tail */ ,
                TailTypeBox/** box */ 
            };

            /** the weld along contour option */
            public: enum WeldSymbolWeldAlongContourType
            {
                WeldSymbolWeldAlongContourTypeNone/** none */ ,
                WeldSymbolWeldAlongContourTypeClosed/** closed */ ,
                WeldSymbolWeldAlongContourTypeUnclosed/** unclosed */ ,
                WeldSymbolWeldAlongContourTypeTrilateralWeld/** trilateral weld */ ,
                WeldSymbolWeldAlongContourTypeAllAround/** all around */ 
            };

            private: friend class  _LineWeldBuilderBuilder;
            protected: LineWeldBuilder();
            /**Returns  the @link Annotations::LeaderBuilder Annotations::LeaderBuilder@endlink  for weld symbol  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderBuilder * Leader
            (
            );
            /**Returns  the @link Annotations::OriginBuilder Annotations::OriginBuilder@endlink  for the weld symbol  <br> License requirements : None */
            public: NXOpen::Annotations::OriginBuilder * Origin
            (
            );
            /**Returns  the @link Annotations::LineWeldDataBuilder Annotations::LineWeldDataBuilder@endlink  for the other side of the weld symbol  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder * OtherSideWeldData
            (
            );
            /**Returns  the field indicating the weld is done at the field site  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldBuilder::FieldWeldType FieldWeld
            (
            );
            /**Sets  the field indicating the weld is done at the field site  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFieldWeld
            (
                NXOpen::Annotations::LineWeldBuilder::FieldWeldType fieldWeld /** fieldweld */ 
            );
            /**Returns  the identification or reference line  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldBuilder::IdLineType IdLine
            (
            );
            /**Sets  the identification or reference line  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetIdLine
            (
                NXOpen::Annotations::LineWeldBuilder::IdLineType idLine /** id line */ 
            );
            /**Returns  the staggered weld  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldBuilder::StaggeredWeldType StaggeredWeld
            (
            );
            /**Sets  the staggered weld  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetStaggeredWeld
            (
                NXOpen::Annotations::LineWeldBuilder::StaggeredWeldType staggeredWeld /** staggeredweld */ 
            );
            /**Returns  the weld tail  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldBuilder::TailType Tail
            (
            );
            /**Sets  the weld tail  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetTail
            (
                NXOpen::Annotations::LineWeldBuilder::TailType tail /** tail */ 
            );
            /**  Returns the reference or specification text  @return   <br> License requirements : None */
            public: std::vector<NXString> GetReference
            (
            );
            /** Sets the reference or specification text <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetReference
            (
                const std::vector<NXString> & reference /** reference */ 
            );
            /**Returns  the @link Annotations::LineWeldDataBuilder Annotations::LineWeldDataBuilder@endlink  for the arrow side of the weld symbol  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldDataBuilder * ArrowSideWeldData
            (
            );
            /**Returns  the top seam object  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * TopSeamObject
            (
            );
            /**Returns  the flip direction for top seam <br> License requirements : None */
            public: bool FlipDirection
            (
            );
            /**Sets  the flip direction for top seam <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFlipDirection
            (
                bool flipDirection /** flipdirection */ 
            );
            /**Returns  the side seam object  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * SideSeamObjects
            (
            );
            /**Returns  the flip vertical direction for side seam  <br> License requirements : None */
            public: bool FlipVertical
            (
            );
            /**Sets  the flip vertical direction for side seam  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFlipVertical
            (
                bool flipVertical /** flipvertical */ 
            );
            /**Returns  the flip horizontal direction for side seam  <br> License requirements : None */
            public: bool FlipHorizontal
            (
            );
            /**Sets  the flip horizontal direction for side seam  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFlipHorizontal
            (
                bool flipHorizontal /** fliphorizontal */ 
            );
            /**Returns  the @link Annotations::StyleBuilder Annotations::StyleBuilder@endlink  for the weld symbol  <br> License requirements : None */
            public: NXOpen::Annotations::StyleBuilder * Style
            (
            );
            /**Returns  the weld symbol from which the style properties are inherited  <br> License requirements : None */
            public: NXOpen::Annotations::SelectLineWeld * Inherit
            (
            );
            /**Returns  the scaling factor for the welding symbol   <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the scaling factor for the welding symbol   <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the weld along contour option  <br> License requirements : None */
            public: NXOpen::Annotations::LineWeldBuilder::WeldSymbolWeldAlongContourType WeldAlongContour
            (
            );
            /**Sets  the weld along contour option  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetWeldAlongContour
            (
                NXOpen::Annotations::LineWeldBuilder::WeldSymbolWeldAlongContourType alongContour /** alongcontour */ 
            );
            /**Returns  the space factor for the welding symbol   <br> License requirements : None */
            public: double SpaceFactor
            (
            );
            /**Sets  the space factor for the welding symbol   <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetSpaceFactor
            (
                double spaceFactor /** spacefactor */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
