#ifndef NXOpen_GEOMETRICUTILITIES_FACEPLANESELECTIONBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_FACEPLANESELECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_FacePlaneSelectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_FacePlaneSelectionBuilder.hxx>
#include <NXOpen/GeometricUtilities_FaceSetData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class FacePlaneSelectionBuilder;
    }
    namespace GeometricUtilities
    {
        class FaceSetData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class Point;
    namespace GeometricUtilities
    {
        class _FacePlaneSelectionBuilderBuilder;
        /**
            Represents a @link GeometricUtilities::FacePlaneSelectionBuilder GeometricUtilities::FacePlaneSelectionBuilder@endlink 
            */
        class NXOPENCPPEXPORT FacePlaneSelectionBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Specifies the object type for blend endcap objects. */
            public: enum TrimObjectType
            {
                TrimObjectTypePlane/** plane end cap*/,
                TrimObjectTypeFace/** face end cap*/
            };

            private: friend class  _FacePlaneSelectionBuilderBuilder;
            protected: FacePlaneSelectionBuilder();
            /**Returns  the trim object  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FacePlaneSelectionBuilder::TrimObjectType TrimObject
            (
            );
            /**Sets  the trim object  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimObject
            (
                NXOpen::GeometricUtilities::FacePlaneSelectionBuilder::TrimObjectType trimObject /** trimobject */ 
            );
            /**Returns  the select face  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FaceSetData * SelectFace
            (
            );
            /**Returns  the select plane  <br> License requirements : None */
            public: NXOpen::Plane * SelectPlane
            (
            );
            /**Sets  the select plane  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSelectPlane
            (
                NXOpen::Plane * selectPlane /** selectplane */ 
            );
            /**Returns  the use plane cap blend  <br> License requirements : None */
            public: bool UsePlaneCapBlend
            (
            );
            /**Sets  the use plane cap blend  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetUsePlaneCapBlend
            (
                bool usePlaneCapBlend /** useplanecapblend */ 
            );
            /**Returns the user plane cap help point  <br> License requirements : None */
            public: NXOpen::Point * PlaneHelpPoint
            (
            );
            /**Sets the user plane cap help point  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPlaneHelpPoint
            (
                NXOpen::Point * helpPoint /** helppoint */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
