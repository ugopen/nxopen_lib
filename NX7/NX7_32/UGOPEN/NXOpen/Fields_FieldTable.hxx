#ifndef NXOpen_FIELDS_FIELDTABLE_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDTABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldTable.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_Field.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Fields
    {
        class FieldTable;
    }
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class _FieldTableBuilder;
        /**  @brief  Represents the Field Table class. 

          
             <br> A field (see @link Fields::Field Fields::Field@endlink ) defined in terms of tabular data involving 
            one or more look-up independent columns and one or more dependent variables (see 
            @link Fields::FieldVariable Fields::FieldVariable@endlink ) which depend on the look-up columns. <br>   <br> To obtain a instance of this class use @link Fields::FieldManager Fields::FieldManager@endlink  . <br> */
        class NXOPENCPPEXPORT FieldTable : public Fields::Field
        {
            /**  Interpolation type */
            public: enum InterpolationEnum
            {
                InterpolationEnumNone/** none */ ,
                InterpolationEnumLinear1d/** linear1d */ ,
                InterpolationEnumNearestNeighbor1d/** nearest neighbor1d */ ,
                InterpolationEnumInverseDistanceWeighting1d/** inverse distance weighting1d */ ,
                InterpolationEnumDelaunay2dFast/** delaunay2d fast */ ,
                InterpolationEnumDelaunay2dMedium/** delaunay2d medium */ ,
                InterpolationEnumDelaunay2dAccurate/** delaunay2d accurate */ ,
                InterpolationEnumNearestNeighbor2d/** nearest neighbor2d */ ,
                InterpolationEnumRenkaShepard2d/** renka shepard2d */ ,
                InterpolationEnumInverseDistanceWeighting2d/** inverse distance weighting2d */ ,
                InterpolationEnumDelaunay3dFast/** delaunay3d fast */ ,
                InterpolationEnumDelaunay3dMedium/** delaunay3d medium */ ,
                InterpolationEnumDelaunay3dAccurate/** delaunay3d accurate */ ,
                InterpolationEnumNearestNeighbor3d/** nearest neighbor3d */ ,
                InterpolationEnumRenkaShepard3d/** renka shepard3d */ ,
                InterpolationEnumInverseDistanceWeighting3d/** inverse distance weighting3d */ ,
                InterpolationEnumNearestNeighborNd/** nearest neighbor nd */ ,
                InterpolationEnumRenkaShepardNd/** renka shepard nd */ ,
                InterpolationEnumInverseDistanceWeightingNd/** inverse distance weighting nd */ 
            };

            /** Load file options*/
            public: enum LoadFileOption
            {
                LoadFileOptionAppend/** append */ ,
                LoadFileOptionReplace/** replace */ 
            };

            private: friend class  _FieldTableBuilder;
            protected: FieldTable();
            /** Edit the table field.  Specifies the new array of @link Fields::FieldVariable Fields::FieldVariable@endlink s for 
                    independent and dependent variables, as well as the new double values.
                     <br> License requirements : None */
            public: void EditFieldTable
            (
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent expression fields to be associated with the formula field */,
                const std::vector<double> & datapoints /** row based array of double values representing the table; then number of points should equal the number of independent variables * the number of dependent variables * the number of rows. */
            );
            /** Edit the table field.  Specifies the new array of @link Fields::FieldVariable Fields::FieldVariable@endlink s for 
                    independent and dependent variables, as well as the new double values.
                     <br> License requirements : None */
            public: void SetInterpolation
            (
                int interpolationMethod /** specified interpolation method; @link Fields::FieldTable Fields::FieldTable@endlink  interpolation enum values for builtin methods.  */
            );
            /** Populate the table from a file replacing or appending data  <br> License requirements : None */
            public: void LoadFromFile
            (
                const NXString & filename /** file to read rows from   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::FieldTable::LoadFileOption loadFileOption /** append or replace */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
