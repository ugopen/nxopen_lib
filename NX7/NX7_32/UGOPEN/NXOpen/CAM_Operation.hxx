#ifndef NXOpen_CAM_OPERATION_HXX_INCLUDED
#define NXOpen_CAM_OPERATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_Operation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CAMObject.hxx>
#include <NXOpen/CAM_Move.hxx>
#include <NXOpen/CAM_Operation.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class Operation;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class Move;
    }
    namespace CAM
    {
        class MoveCollection;
    }
    namespace CAM
    {
        class ToolPathEditorBuilder;
    }
    namespace CAM
    {
        class _OperationBuilder;
        /** Represents an operation  <br> To obtain an instance of this class use @link CAM::OperationCollection CAM::OperationCollection@endlink  <br> */
        class NXOPENCPPEXPORT Operation : public CAM::CAMObject
        {
            private: friend class  _OperationBuilder;
            protected: Operation();
            /** Returns the append move  <br> License requirements : cam_base ("CAM BASE") */
            public: void AppendMove
            (
                NXOpen::CAM::Move * move /** move */ 
            );
            /** Returns the insert move  <br> License requirements : cam_base ("CAM BASE") */
            public: void InsertMove
            (
                NXOpen::CAM::Move * insertAfter /** insert after */ ,
                NXOpen::CAM::Move * move /** move */ 
            );
            /** Create Tool Path Editor Move builder  @return  array of new objects  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ToolPathEditorBuilder * CreateToolPathEditorBuilder
            (
            );
            /** get toolpath time in seconds   @return  the toolpath time in seconds  <br> License requirements : cam_base ("CAM BASE") */
            public: double GetToolpathTime
            (
            );
            /** set toolpath time in seconds   <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathTime
            (
                double time /** the toolpath time in seconds */
            );
            /** get toolpath length in Part units (mm or inch)  @return  the toolpath length in Part units (mm or inch)  <br> License requirements : cam_base ("CAM BASE") */
            public: double GetToolpathLength
            (
            );
            /** set toolpath length in Part units (mm or inch)  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathLength
            (
                double length /** the toolpath length in Part units (mm or inch) */
            );
            /** get toolpath cutting time in seconds  @return  the toolpath cutting time in seconds  <br> License requirements : cam_base ("CAM BASE") */
            public: double GetToolpathCuttingTime
            (
            );
            /** set toolpath cutting time in seconds  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathCuttingTime
            (
                double time /** the toolpath cutting time in seconds */
            );
            /** get toolpath cutting length in Part units (mm or inch)  @return  the toolpath cutting length in Part units (mm or inch)  <br> License requirements : cam_base ("CAM BASE") */
            public: double GetToolpathCuttingLength
            (
            );
            /** set toolpath cutting length in Part units (mm or inch)  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolpathCuttingLength
            (
                double length /** the toolpath cutting length in Part units (mm or inch) */
            );


            private: NXOpen::CAM::MoveCollection *cAMMoveCollection;
            /** Represents Move Collection */
            public: NXOpen::CAM::MoveCollection *CAMMoveCollection()
            {
                return cAMMoveCollection;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
