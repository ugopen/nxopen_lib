#ifndef NXOpen_DRAWINGS_VIEWSTYLETHREADSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLETHREADSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleThreadsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewStyleThreadsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleThreadsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Drawings
    {
        class _ViewStyleThreadsBuilderBuilder;
        /** Represents the THREADS tab on the View Style Dialog (Drawings.ViewStyleThreadsBuilder)
            */
        class NXOPENCPPEXPORT ViewStyleThreadsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _ViewStyleThreadsBuilderBuilder;
            protected: ViewStyleThreadsBuilder();
            /**Returns  the standard option data on the THREADS tab of the View Style Dialog  <br> License requirements : None */
            public: int StandardData
            (
            );
            /**Sets  the standard option data on the THREADS tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetStandardData
            (
                int standardOptionData /** Sets a new standard option on the threads sub-builder */
            );
            /**Returns  the minimum pitch field on the THREADS tab of the View Style Dialog  <br> License requirements : None */
            public: double MinimumPitchFieldData
            (
            );
            /**Sets  the minimum pitch field on the THREADS tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetMinimumPitchFieldData
            (
                double minimumPitchFieldData /** Sets a new minimum pitch field data on the threads sub-builder */
            );
            /**Returns  the true hidden line toggle on the THREADS tab of the View Style Dialog  <br> License requirements : None */
            public: bool TrueHiddenLine
            (
            );
            /**Sets  the true hidden line toggle on the THREADS tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetTrueHiddenLine
            (
                bool trueHiddenLineToggle /** Sets a new true hidden line toggle value on the threads sub-builder */
            );
            /**Returns  the override thread color on the THREADS tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::NXColor * OverrideVisibleThreadColor
            (
            );
            /**Sets  the override thread color on the THREADS tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetOverrideVisibleThreadColor
            (
                NXOpen::NXColor * overrideVisibleThreadColor /** Sets a new override visible color  on the threads sub-builder */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
