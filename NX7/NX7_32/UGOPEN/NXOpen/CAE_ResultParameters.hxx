#ifndef NXOpen_CAE_RESULTPARAMETERS_HXX_INCLUDED
#define NXOpen_CAE_RESULTPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResultParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class ResultParameters;
    }
    class Unit;
    namespace CAE
    {
        class _ResultParametersBuilder;
        /** This class is worked as a packet of information that can be either be used to change result state or pass around for information exchange between two  @link CAE::ResultAccess CAE::ResultAccess@endlink  objects.
                <br/>Use @link CAE::ResultManager CAE::ResultManager@endlink  to create an @link CAE::ResultParameters CAE::ResultParameters@endlink 
                
                <br/>You can modifiy these values but validation of correctness will only be perfomed 
                when this object is set to a @link CAE::ResultAccess CAE::ResultAccess@endlink  object
             <br> An instance of this class can not be obtained <br> */
        class NXOPENCPPEXPORT ResultParameters : public TaggedObject
        {
            private: friend class  _ResultParametersBuilder;
            protected: ResultParameters();
            /** Ask Current loadcase number  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetLoadcase
            (
            );
            /** Ask Current iteration number  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int GetIteration
            (
            );
            /** Set Current loadcase and iteration   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLoadcaseIteration
            (
                int loadcase /** loadcase number varies from 0 to N-1 */,
                int iteration /** iteration number varies from 0 to N-1 */
            );
            /** Ask FE entity where the result is defined   @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Location GetResultDataLocation
            (
            );
            /** Set FE entity where the result is defined   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultDataLocation
            (
                NXOpen::CAE::Result::Location location /** location */ 
            );
            /** Ask section of a FE entity where the result is defined   @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Section GetResultDataSection
            (
            );
            /** Set section of a FE entity where the result is defined   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultDataSection
            (
                NXOpen::CAE::Result::Section section /** section */ 
            );
            /** Ask result type   @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Quantity GetResultDataQuantity
            (
            );
            /** Set result type   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultDataQuantity
            (
                NXOpen::CAE::Result::Quantity quantity /** quantity */ 
            );
            /** Ask Result type   @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Type GetResultType
            (
            );
            /** Set Result type   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultType
            (
                const NXOpen::CAE::Result::Type & type /** type */ 
            );
            /** Ask result component   @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Component GetResultComponent
            (
            );
            /** Set result component   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetResultComponent
            (
                NXOpen::CAE::Result::Component component /** component */ 
            );
            /** Ask result coordinate system   @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::CoordinateSystem GetCoordinateSystem
            (
            );
            /** Set result coordinate system   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCoordinateSystem
            (
                NXOpen::CAE::Result::CoordinateSystem coordinate /** coordinate */ 
            );
            /** Make Nodal and Element-Nodal result to Element Result. Does not do anything if the result is element result already.
                         To define what value should be used to represent an element, use @link CAE::ResultParameters::SetElementValueCriterion CAE::ResultParameters::SetElementValueCriterion@endlink 
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void MakeElementResult
            (
                bool elementResult /** elementresult */ 
            );
            /** Ask how element the result is defined. 
                        This option is only valid for nodal and elemen-nodal result.  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::ElementValueCriterion GetElementValueCriterion
            (
            );
            /** Set how element the result is defined 
                       This option is only valid for nodal and elemen-nodal result; dose not do anything for element result.
                     <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetElementValueCriterion
            (
                NXOpen::CAE::Result::ElementValueCriterion criteria /** criteria */ 
            );
            /** Ask default averaging criteria  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Averaging InitAveragingCriteria
            (
            );
            /** Ask averaging criteria.  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Averaging GetAveragingCriteria
            (
            );
            /** Set averaging criteria  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetAveragingCriteria
            (
                const NXOpen::CAE::Result::Averaging & average /** average */ 
            );
            /** If result is complex it returns which component is set(like real or imaginary)  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::Result::Complex GetComplexCriterion
            (
            );
            /** Set complex criteria  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetComplexCriterion
            (
                NXOpen::CAE::Result::Complex complex /** complex */ 
            );
            /** Returns the phase angle at which result will be evaluated. This is only value if complex result is set to the PhaseAngle type  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double GetPhaseAngle
            (
            );
            /** Sets the phase angle at which result will be evaluated. This is only value if complex result is set to the PhaseAngle type  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPhaseAngle
            (
                double angle /** angle */ 
            );
            /** Ask section, ply and layer  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int AskSectionPlyLayer
            (
                int* section /** section */ ,
                int* ply /** ply */ 
            );
            /** Set section, ply and layer  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSectionPlyLayer
            (
                int section /** section */ ,
                int ply /** ply */ ,
                int layer /** layer */ 
            );
            /** Ask scale @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double GetScale
            (
            );
            /** Set scale. This will affect all subsequent result query.  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /** Ask result unit  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Unit * GetUnit
            (
            );
            /** Set result unit  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUnit
            (
                NXOpen::Unit * unit /** unit */ 
            );
            /** Set all values to absolute values. 
                        Warning: Once converted to absolute value it is not possible to revert to original values.
                      <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetAbsoluteValue
            (
                bool absolute /** absolute */ 
            );
            /** Ask whether all values are absolute values      @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool GetAbsoluteValue
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
