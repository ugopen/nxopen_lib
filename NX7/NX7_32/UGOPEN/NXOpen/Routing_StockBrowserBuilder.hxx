#ifndef NXOpen_ROUTING_STOCKBROWSERBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_STOCKBROWSERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_StockBrowserBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_StockBrowserBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class StockBrowserBuilder;
    }
    class Builder;
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _StockBrowserBuilderBuilder;
        /** Builder class for stock browser .  <br> To create a new instance of this class, use @link Routing::RouteManager::CreateStockBrowserBuilder Routing::RouteManager::CreateStockBrowserBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        FilterType </td> <td> 
         
        All </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT StockBrowserBuilder : public Builder
        {
            /** Filter type */
            public: enum TypeFilter
            {
                TypeFilterAll/** all */ ,
                TypeFilterStock/** stock */ ,
                TypeFilterOverStock/** over stock */ ,
                TypeFilterFillerStock/** filler stock */ ,
                TypeFilterSpaceReservation/** space reservation */ 
            };

            private: friend class  _StockBrowserBuilderBuilder;
            protected: StockBrowserBuilder();
            /**Returns  the stock type filter which defines the type of stock <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::StockBrowserBuilder::TypeFilter FilterType
            (
            );
            /**Sets  the stock type filter which defines the type of stock <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetFilterType
            (
                NXOpen::Routing::StockBrowserBuilder::TypeFilter stockTypeFilter /** stocktypefilter */ 
            );
            /**Returns  the stock name filter which defines filter to name stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString NameFilter
            (
            );
            /**Sets  the stock name filter which defines filter to name stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetNameFilter
            (
                const NXString & stockNameFilter /** stocknamefilter */ 
            );
            /** Get the filtered stock @link Routing::Stock Routing::Stock@endlink  object list  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetSortedList
            (
                std::vector<NXOpen::Routing::Stock *> & objects /** Filtered Routing Stocks */
            );
            /** Set the filtered @link Routing::Stock Routing::Stock@endlink  object list when filter
                        type is changed. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSortedList
            (
                const std::vector<NXOpen::Routing::Stock *> & objects /** Filtered Routing Stocks */
            );
            /** Deletes the given @link Routing::Stock Routing::Stock@endlink   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void DeleteStocks
            (
                const std::vector<NXOpen::Routing::Stock *> & objects /** Filtered Routing Stocks */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
