#ifndef NXOpen_FEATURES_CURVEONSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_CURVEONSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_CurveOnSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_CurveOnSurfaceBuilder.hxx>
#include <NXOpen/Features_GeometricConstraintDataManager.hxx>
#include <NXOpen/GeometricUtilities_CurveFitOptions.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class CurveOnSurfaceBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class GeometricConstraintDataManager;
    }
    namespace GeometricUtilities
    {
        class CurveFitOptions;
    }
    class ScCollector;
    namespace Features
    {
        class _CurveOnSurfaceBuilderBuilder;
        /** Curve On Surface builder class.  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateCurveOnSurfaceBuilder Features::FeatureCollection::CreateCurveOnSurfaceBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CurveFitProperties.FitOption </td> <td> 
         
        Cubic </td> </tr> 

        <tr><td> 
         
        CurveFitProperties.MaximumDegree </td> <td> 
         
        7 </td> </tr> 

        <tr><td> 
         
        CurveFitProperties.MaximumSegments </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT CurveOnSurfaceBuilder : public Features::FeatureBuilder
        {
            private: friend class  _CurveOnSurfaceBuilderBuilder;
            protected: CurveOnSurfaceBuilder();
            /**Returns  the face collector  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  the constraint manager  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::GeometricConstraintDataManager * ConstraintManager
            (
            );
            /**Returns  the periodicity state of curve on surface  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool IsPeriodic
            (
            );
            /**Sets  the periodicity state of curve on surface  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPeriodic
            (
                bool periodicity /** periodicity */ 
            );
            /**Returns  the curve fit properties  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::CurveFitOptions * CurveFitProperties
            (
            );
            /**Returns  the distance tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distance tolerance */ 
            );
            /**Returns  the angle tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angle tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
