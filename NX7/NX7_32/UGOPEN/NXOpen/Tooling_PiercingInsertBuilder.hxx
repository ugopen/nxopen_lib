#ifndef NXOpen_TOOLING_PIERCINGINSERTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_PIERCINGINSERTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_PiercingInsertBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_PiercingInsertBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class PiercingInsertBuilder;
    }
    class Builder;
    class Direction;
    class Point;
    class SelectBodyList;
    class SelectEdgeList;
    class SelectFaceList;
    class SelectPartList;
    namespace Tooling
    {
        class _PiercingInsertBuilderBuilder;
        /** Represents piercing insert builder. 
             <br> To create a new instance of this class, use @link Tooling::PiercingInsertCollection::CreatePiercingInsertBuilder Tooling::PiercingInsertCollection::CreatePiercingInsertBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AssociationTool </td> <td> 
         
        AddIntoList </td> </tr> 

        <tr><td> 
         
        CircularDeleteAllComponents </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CircularOperationSwitch </td> <td> 
         
        Create </td> </tr> 

        <tr><td> 
         
        DieOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DieSameOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformBbpoption </td> <td> 
         
        OneBbp </td> </tr> 

        <tr><td> 
         
        FreeformBbpslug </td> <td> 
         
        Fillet </td> </tr> 

        <tr><td> 
         
        FreeformCavity </td> <td> 
         
        TaperAngle </td> </tr> 

        <tr><td> 
         
        FreeformCavitySlugParentPart </td> <td> 
         
        PrjDie099 </td> </tr> 

        <tr><td> 
         
        FreeformClearance </td> <td> 
         
        0.05 </td> </tr> 

        <tr><td> 
         
        FreeformDsslug </td> <td> 
         
        Fillet </td> </tr> 

        <tr><td> 
         
        FreeformForEachScrap1 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformForEachScrap2 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformOffsetSide </td> <td> 
         
        DieSide </td> </tr> 

        <tr><td> 
         
        FreeformOnePunchToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPadHead </td> <td> 
         
        Type1 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHead </td> <td> 
         
        NoHead </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara1 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara10 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara11 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara12 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara13 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara14 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara15 </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara16 </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara2 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara3 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara4 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara5 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara6 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara7 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara8 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformPunchHeadPara9 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformRenameDialog </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FreeformSlugPara1 </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        FreeformSlugPara2 </td> <td> 
         
        -3 </td> </tr> 

        <tr><td> 
         
        FreeformSlugPara3 </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        FreeformSlugPara4 </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        FreeformUdpparentPart </td> <td> 
         
        PrjDie099 </td> </tr> 

        <tr><td> 
         
        LinkTool </td> <td> 
         
        LinkAutomatically </td> </tr> 

        <tr><td> 
         
        NormalBbpoption </td> <td> 
         
        OneBbp </td> </tr> 

        <tr><td> 
         
        NormalBbpslug </td> <td> 
         
        Fillet </td> </tr> 

        <tr><td> 
         
        NormalCavity </td> <td> 
         
        TaperAngle </td> </tr> 

        <tr><td> 
         
        NormalCavitySlugParentPart </td> <td> 
         
        PrjDie099 </td> </tr> 

        <tr><td> 
         
        NormalClearance </td> <td> 
         
        0.05 </td> </tr> 

        <tr><td> 
         
        NormalClearanceOption </td> <td> 
         
        Constant </td> </tr> 

        <tr><td> 
         
        NormalDsslug </td> <td> 
         
        Fillet </td> </tr> 

        <tr><td> 
         
        NormalForEachScrap1 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalForEachScrap2 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalOffsetSide </td> <td> 
         
        DieSide </td> </tr> 

        <tr><td> 
         
        NormalOnePunchToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPadHead </td> <td> 
         
        Type1 </td> </tr> 

        <tr><td> 
         
        NormalPunchHead </td> <td> 
         
        NoHead </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara1 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara10 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara11 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara12 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara13 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara14 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara15 </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara16 </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara2 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara3 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara4 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara5 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara6 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara7 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara8 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalPunchHeadPara9 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalRenameDialog </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NormalSlugPara1 </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        NormalSlugPara2 </td> <td> 
         
        -3 </td> </tr> 

        <tr><td> 
         
        NormalSlugPara3 </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        NormalSlugPara4 </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        NormalUdpparentPart </td> <td> 
         
        PrjDie099 </td> </tr> 

        <tr><td> 
         
        OffsetAngle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OffsetX </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OffsetY </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PunchSameOffsetValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RectangularDeleteAllComponents </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RectangularOperationSwitch </td> <td> 
         
        Create </td> </tr> 

        <tr><td> 
         
        SameLengthToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SortOption </td> <td> 
         
        Name </td> </tr> 

        <tr><td> 
         
        TotalNumber </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        TotalNumberX </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        TotalNumberY </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT PiercingInsertBuilder : public Builder
        {
            /** Specifies the parent part of cavity slug */
            public: enum NormalCavitySlugParentPartType
            {
                NormalCavitySlugParentPartTypePrjDie099/** Parent part is die */,
                NormalCavitySlugParentPartTypePrjDb000/** Parent part is db */,
                NormalCavitySlugParentPartTypePrjSub002/** Parent part is sub */
            };

            /** Specifies the type of cavity */
            public: enum NormalCavityType
            {
                NormalCavityTypeTaperAngle/** Cavity type is taper angle */,
                NormalCavityTypeStep/** Cavity type is step */
            };

            /** Specifies the type of bottom plate slug */
            public: enum NormalBbpslugType
            {
                NormalBbpslugTypeFillet/** Bottom plate slug type is fillet */,
                NormalBbpslugTypeRectangle/** Bottom plate slug type is rectangle */,
                NormalBbpslugTypeCircle/** Bottom plate slug type is circle */,
                NormalBbpslugTypeMickey/** Bottom plate slug type is mickey */,
                NormalBbpslugTypeClearance/** Bottom plate slug type is clearance */,
                NormalBbpslugTypeSlotVer/** Bottom plate slug type is slot vertical */,
                NormalBbpslugTypeSlotHor/** Bottom plate slug type is slot horizontal */,
                NormalBbpslugTypeNone/** Bottom plate slug type is none */
            };

            /** Specifies the type of die shoe slug */
            public: enum NormalDsslugType
            {
                NormalDsslugTypeFillet/** Die shoe slug type is fillet */,
                NormalDsslugTypeRectangle/** Die shoe slug type is rectangle */,
                NormalDsslugTypeCircle/** Die shoe slug type is circle */,
                NormalDsslugTypeMickey/** Die shoe slug type is mickey */,
                NormalDsslugTypeClearance/** Die shoe slug type is clearance */,
                NormalDsslugTypeSlotVer/** Die shoe slug type is slot vertical */,
                NormalDsslugTypeSlotHor/** Die shoe slug type is slot horizontal */,
                NormalDsslugTypeNone/** Die shoe slug type is none */
            };

            /** Specifies the parent part of user defined punch */
            public: enum NormalUdpparentPartType
            {
                NormalUdpparentPartTypePrjDie099/** Parent part is die */,
                NormalUdpparentPartTypePrjDb000/** Parent part is db */,
                NormalUdpparentPartTypePrjSub002/** Parent part is sub */
            };

            /** Specifies the type of punch head */
            public: enum NormalPunchHeadType
            {
                NormalPunchHeadTypeNoHead/** Punch head type is no head */,
                NormalPunchHeadTypeScrewedHead/** Punch head type is screwed head */,
                NormalPunchHeadTypeWeldedHead/** Punch head type is welded head */,
                NormalPunchHeadTypePadHead/** Punch head type is pad head */
            };

            /** Specifies the type of pad head */
            public: enum NormalPadHeadType
            {
                NormalPadHeadTypeType1/** Pad head type is 1 */,
                NormalPadHeadTypeType2/** Pad head type is 2 */,
                NormalPadHeadTypeType3/** Pad head type is 3 */,
                NormalPadHeadTypeType4/** Pad head type is 4 */
            };

            /** Specifies the design option of piercing insert */
            public: enum NormalClearanceOptionType
            {
                NormalClearanceOptionTypeConstant/** The design option is normal */,
                NormalClearanceOptionTypeVariable/** The design option is fineblanking */
            };

            /** Specifies the offset side of normal pierce insert design*/
            public: enum NormalOffsetSideType
            {
                NormalOffsetSideTypeDieSide/** The offset side is die */,
                NormalOffsetSideTypePunchSide/** The offset side is punch */
            };

            /** Specifies the bottom plate option of slug hole*/
            public: enum NormalBbpoptionType
            {
                NormalBbpoptionTypeOneBbp/** The bottom plate option is one plate */,
                NormalBbpoptionTypeTwoBbp/** The bottom plate option is two plates */
            };

            /** Specifies the parent part of cavity slug */
            public: enum FreeformCavitySlugParentPartType
            {
                FreeformCavitySlugParentPartTypePrjDie099/** Parent part is die */,
                FreeformCavitySlugParentPartTypePrjDb000/** Parent part is db */,
                FreeformCavitySlugParentPartTypePrjSub002/** Parent part is sub */
            };

            /** Specifies the type of cavity */
            public: enum FreeformCavityType
            {
                FreeformCavityTypeTaperAngle/** Cavity type is taper angle */,
                FreeformCavityTypeStep/** Cavity type is step */
            };

            /** Specifies the type of bottom plate slug */
            public: enum FreeformBbpslugType
            {
                FreeformBbpslugTypeFillet/** Bottom plate slug type is fillet */,
                FreeformBbpslugTypeRectangle/** Bottom plate slug type is rectangle */,
                FreeformBbpslugTypeCircle/** Bottom plate slug type is circle */,
                FreeformBbpslugTypeMickey/** Bottom plate slug type is mickey */,
                FreeformBbpslugTypeClearance/** Bottom plate slug type is clearance */,
                FreeformBbpslugTypeSlotVer/** Bottom plate slug type is slot vertical */,
                FreeformBbpslugTypeSlotHor/** Bottom plate slug type is slot horizontal */,
                FreeformBbpslugTypeNone/** Bottom plate slug type is none */
            };

            /** Specifies the type of die shoe slug */
            public: enum FreeformDsslugType
            {
                FreeformDsslugTypeFillet/** Die shoe slug type is fillet */,
                FreeformDsslugTypeRectangle/** Die shoe slug type is rectangle */,
                FreeformDsslugTypeCircle/** Die shoe slug type is circle */,
                FreeformDsslugTypeMickey/** Die shoe slug type is mickey */,
                FreeformDsslugTypeClearance/** Die shoe slug type is clearance */,
                FreeformDsslugTypeSlotVer/** Die shoe slug type is slot vertical */,
                FreeformDsslugTypeSlotHor/** Die shoe slug type is horizontal */,
                FreeformDsslugTypeNone/** Die shoe slug type is none */
            };

            /** Specifies the parent part of user defined punch */
            public: enum FreeformUdpparentPartType
            {
                FreeformUdpparentPartTypePrjDie099/** Parent part is die */,
                FreeformUdpparentPartTypePrjDb000/** Parent part is db */,
                FreeformUdpparentPartTypePrjSub002/** Parent part is sub */
            };

            /** Specifies the type of punch head */
            public: enum FreeformPunchHeadType
            {
                FreeformPunchHeadTypeNoHead/** Punch head type is no head */,
                FreeformPunchHeadTypeScrewedHead/** Punch head type is screwed head */,
                FreeformPunchHeadTypeWeldedHead/** Punch head type is welded head */,
                FreeformPunchHeadTypePadHead/** Punch head type is pad head */
            };

            /** Specifies the type of pad head */
            public: enum FreeformPadHeadType
            {
                FreeformPadHeadTypeType1/** Pad head type is type 1 */,
                FreeformPadHeadTypeType2/** Pad head type is type 2 */,
                FreeformPadHeadTypeType3/** Pad head type is type 3 */,
                FreeformPadHeadTypeType4/** Pad head type is type 4 */
            };

            /** Specifies the offset side of freeform pierce insert design */
            public: enum FreeformOffsetSideType
            {
                FreeformOffsetSideTypeDieSide/** The offset side is die side */,
                FreeformOffsetSideTypePunchSide/** The offset side is punch side */
            };

            /** Specifies the bottom plate option of slug hole */
            public: enum FreeformBbpoptionType
            {
                FreeformBbpoptionTypeOneBbp/** The bottom plate option is one plate */,
                FreeformBbpoptionTypeTwoBbp/** The bottom plate option is two plates */
            };

            /** Specifies the operation of rectangular array */
            public: enum RectangularOperationSwitchType
            {
                RectangularOperationSwitchTypeCreate/** The operation of rectangular array is create */,
                RectangularOperationSwitchTypeEdit/** The operation of rectangular array is edit */,
                RectangularOperationSwitchTypeDelete/** The operation of rectangular array is delete */
            };

            /** Specifies the operation of circular array */
            public: enum CircularOperationSwitchType
            {
                CircularOperationSwitchTypeCreate/** The operation of circular array is create */,
                CircularOperationSwitchTypeEdit/** The operation of circular array is edit */,
                CircularOperationSwitchTypeDelete/** The operation of circular array is delete */
            };

            /** Specifies the association tool operation option */
            public: enum AssociationToolType
            {
                AssociationToolTypeAddIntoList/** The operation option is add into list */,
                AssociationToolTypeRemoveFromList/** The operation option is remove from list */,
                AssociationToolTypeDeleteSelectedInserts/** The operation option is delete selected inserts */
            };

            /** Specifies the link tool operation type */
            public: enum LinkToolType
            {
                LinkToolTypeLinkAutomatically/** The link tool operation type is link automatically */,
                LinkToolTypeLinkManually/** The link tool operation type is link manually */,
                LinkToolTypeUnlinkSelected/** The link tool operation type is unlinked selected */,
                LinkToolTypeUpdateSelected/** The link tool operation type is update selected */
            };

            /** Specifies the sort option type */
            public: enum SortOptionType
            {
                SortOptionTypeName/** The sort option is name */,
                SortOptionTypeStation/** The sort option is station */
            };

            private: friend class  _PiercingInsertBuilderBuilder;
            protected: PiercingInsertBuilder();
            /**Returns  the select scraps for pierce insert design  <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelectScrap
            (
            );
            /**  Load die insert for normal pierce design  <br> License requirements : None */
            public: void NormalLoadDie
            (
            );
            /**Returns  the parent part of cavity slug for normal pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalCavitySlugParentPartType NormalCavitySlugParentPart
            (
            );
            /**Sets  the parent part of cavity slug for normal pierce design  <br> License requirements : None */
            public: void SetNormalCavitySlugParentPart
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalCavitySlugParentPartType normalCavitySlugParentPart /** Indicates the parent part of cavity slug for normal pierce design */
            );
            /**Returns  the cavity type for normal pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalCavityType NormalCavity
            (
            );
            /**Sets  the cavity type for normal pierce design  <br> License requirements : None */
            public: void SetNormalCavity
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalCavityType normalCavity /** Indicates the cavity type for normal pierce design */
            );
            /**Returns  the H value of slug hole for normal pierce design  <br> License requirements : None */
            public: double NormalSlugPara1
            (
            );
            /**Sets  the H value of slug hole for normal pierce design  <br> License requirements : None */
            public: void SetNormalSlugPara1
            (
                double normalSlugPara1 /** Indicates the H value of slug hole for normal pierce design */
            );
            /**Returns  the A value of slug hole for normal pierce design  <br> License requirements : None */
            public: double NormalSlugPara2
            (
            );
            /**Sets  the A value of slug hole for normal pierce design  <br> License requirements : None */
            public: void SetNormalSlugPara2
            (
                double normalSlugPara2 /** Indicates A value of slug hole for normal pierce design */
            );
            /**Returns  the C1 value of slug hole for normal pierce design  <br> License requirements : None */
            public: double NormalSlugPara3
            (
            );
            /**Sets  the C1 value of slug hole for normal pierce design  <br> License requirements : None */
            public: void SetNormalSlugPara3
            (
                double normalSlugPara3 /** Indicates C1 value of slug hole for normal pierce design */
            );
            /**Returns  the C2 value of slug hole for normal pierce design  <br> License requirements : None */
            public: double NormalSlugPara4
            (
            );
            /**Sets  the C2 value of slug hole for normal pierce design  <br> License requirements : None */
            public: void SetNormalSlugPara4
            (
                double normalSlugPara4 /** Indicates the C2 value of slug hole for normal pierce design */
            );
            /**Returns  the each scrap option of bottom plate slug for normal pierce design  <br> License requirements : None */
            public: bool NormalForEachScrap1
            (
            );
            /**Sets  the each scrap option of bottom plate slug for normal pierce design  <br> License requirements : None */
            public: void SetNormalForEachScrap1
            (
                bool normalForEachScrap1 /** Indicates each scrap option of bottom plate slug for normal pierce design */
            );
            /**Returns  the bottom plate slug type for normal pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalBbpslugType NormalBbpslug
            (
            );
            /**Sets  the bottom plate slug type for normal pierce design  <br> License requirements : None */
            public: void SetNormalBbpslug
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalBbpslugType normalBbpslug /** Indicates bottom plate slug type for normal pierce design */
            );
            /** Edit bottom plate slug for normal pierce design  <br> License requirements : None */
            public: void NormalEditBbpslug
            (
            );
            /**Returns  the each scrap option of die shoe slug for normal pierce design  <br> License requirements : None */
            public: bool NormalForEachScrap2
            (
            );
            /**Sets  the each scrap option of die shoe slug for normal pierce design  <br> License requirements : None */
            public: void SetNormalForEachScrap2
            (
                bool normalForEachScrap2 /** Indicates each scrap option of die shoe slug for normal pierce design */
            );
            /**Returns  the die shoe slug type for normal pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalDsslugType NormalDsslug
            (
            );
            /**Sets  the die shoe slug type for normal pierce design  <br> License requirements : None */
            public: void SetNormalDsslug
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalDsslugType normalDsslug /** Indicates die shoe slug type for normal pierce design */
            );
            /** Edit die shoe slug for normal pierce design  <br> License requirements : None */
            public: void NormalEditDsslug
            (
            );
            /** Edit offset value table  <br> License requirements : None */
            public: void DieEditOffsetValueTable
            (
            );
            /**Returns  the same offset value option of die design  <br> License requirements : None */
            public: bool DieSameOffsetValue
            (
            );
            /**Sets  the same offset value option of die design  <br> License requirements : None */
            public: void SetDieSameOffsetValue
            (
                bool dieSameOffsetValue /** Indicates the same offset value option of die design */
            );
            /**Returns  the die offset value  <br> License requirements : None */
            public: double DieOffsetValue
            (
            );
            /**Sets  the die offset value  <br> License requirements : None */
            public: void SetDieOffsetValue
            (
                double dieOffsetValue /** Indicates the die offset value */
            );
            /**Returns  the select pierce die insert to be edited  <br> License requirements : None */
            public: NXOpen::SelectBodyList * NormalSelectPierceDieInsert
            (
            );
            /** Create cavity and slug for normal pierce design  <br> License requirements : None */
            public: void NormalCreateCavityAndSlug
            (
            );
            /** Load standard punch for normal pierce design  <br> License requirements : None */
            public: void NormalLoadStandardPunch
            (
            );
            /**Returns  the parent part of user defined punch for normal pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalUdpparentPartType NormalUdpparentPart
            (
            );
            /**Sets  the parent part of user defined punch for normal pierce design  <br> License requirements : None */
            public: void SetNormalUdpparentPart
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalUdpparentPartType normalUdpparentPart /** Indicates the parent part of user defined punch for normal pierce design */
            );
            /**Returns  the punch length for normal pierce design  <br> License requirements : None */
            public: NXString NormalPunchLength
            (
            );
            /**Sets  the punch length for normal pierce design  <br> License requirements : None */
            public: void SetNormalPunchLength
            (
                const NXString & normalPunchLength /** Indicates the punch length for normal pierce design */
            );
            /**Returns  the same length option of pierce punch  <br> License requirements : None */
            public: bool SameLengthToggle
            (
            );
            /**Sets  the same length option of pierce punch  <br> License requirements : None */
            public: void SetSameLengthToggle
            (
                bool sameLengthToggle /** Indicates the same length option of pierce punch */
            );
            /** Edit offset value table  <br> License requirements : None */
            public: void PunchEditOffsetValueTable
            (
            );
            /**Returns  the same offset value option of punch design  <br> License requirements : None */
            public: bool PunchSameOffsetValue
            (
            );
            /**Sets  the same offset value option of punch design  <br> License requirements : None */
            public: void SetPunchSameOffsetValue
            (
                bool punchSameOffsetValue /** Indicates the same offset value option of punch design */
            );
            /**Returns  the punch offset value  <br> License requirements : None */
            public: double PunchOffsetValue
            (
            );
            /**Sets  the punch offset value  <br> License requirements : None */
            public: void SetPunchOffsetValue
            (
                double punchOffsetValue /** Indicates the punch offset value */
            );
            /**Returns  the select pierce punch insert to be edited  <br> License requirements : None */
            public: NXOpen::SelectBodyList * NormalSelectPiercePunch
            (
            );
            /** Create user defined punch for normal pierce design  <br> License requirements : None */
            public: void NormalCreateUdp
            (
            );
            /**Returns  the punch head type  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalPunchHeadType NormalPunchHead
            (
            );
            /**Sets  the punch head type  <br> License requirements : None */
            public: void SetNormalPunchHead
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalPunchHeadType normalPunchHead /** Indicates the punch head type */
            );
            /**Returns  the pad head type  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalPadHeadType NormalPadHead
            (
            );
            /**Sets  the pad head type  <br> License requirements : None */
            public: void SetNormalPadHead
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalPadHeadType normalPadHead /** Indicates the pad head type */
            );
            /**Returns  the BLOCK_L value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara1
            (
            );
            /**Sets  the BLOCK_L value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara1
            (
                double normalPunchHeadPara1 /** Indicates the BLOCK_L value of punch head */
            );
            /**Returns  the BLOCK_W value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara2
            (
            );
            /**Sets  the BLOCK_W value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara2
            (
                double normalPunchHeadPara2 /** Indicates the BLOCK_W value of punch head */
            );
            /**Returns  the BLOCK_H value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara3
            (
            );
            /**Sets  the BLOCK_H value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara3
            (
                double normalPunchHeadPara3 /** Indicates the BLOCK_H value of punch head */
            );
            /**Returns  the DOWEL_POSITION1 value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara4
            (
            );
            /**Sets  the DOWEL_POSITION1 value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara4
            (
                double normalPunchHeadPara4 /** Indicates the DOWEL_POSITION1 value of punch head */
            );
            /**Returns  the DOWEL_POSITION2 value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara5
            (
            );
            /**Sets  the DOWEL_POSITION2 value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara5
            (
                double normalPunchHeadPara5 /** Indicates the DOWEL_POSITION2 value of punch head */
            );
            /**Returns  the SLOT_POSITION value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara6
            (
            );
            /**Sets  the SLOT_POSITION value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara6
            (
                double normalPunchHeadPara6 /** Indicates the SLOT_POSITION value of punch head */
            );
            /**Returns  the SLOT_WIDTH value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara7
            (
            );
            /**Sets  the SLOT_WIDTH value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara7
            (
                double normalPunchHeadPara7 /** Indicates the SLOT_WIDTH value of punch head */
            );
            /**Returns  the SLOT_DEPTH1 value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara8
            (
            );
            /**Sets  the SLOT_DEPTH1 value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara8
            (
                double normalPunchHeadPara8 /** Indicates the SLOT_DEPTH1 value of punch head */
            );
            /**Returns  the SLOT_DEPTH2 value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara9
            (
            );
            /**Sets  the SLOT_DEPTH2 value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara9
            (
                double normalPunchHeadPara9 /** Indicates the SLOT_DEPTH2 value of punch head */
            );
            /**Returns  the HOLDER_L value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara10
            (
            );
            /**Sets  the HOLDER_L value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara10
            (
                double normalPunchHeadPara10 /** Indicates the HOLDER_L value of punch head */
            );
            /**Returns  the HOLDER_W value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara11
            (
            );
            /**Sets  the HOLDER_W value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara11
            (
                double normalPunchHeadPara11 /** Indicates the HOLDER_W value of punch head */
            );
            /**Returns  the HOLDER_H value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara12
            (
            );
            /**Sets  the HOLDER_H value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara12
            (
                double normalPunchHeadPara12 /** Indicates the HOLDER_H value of punch head */
            );
            /**Returns  the TAP_DRILL_DIA value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara13
            (
            );
            /**Sets  the TAP_DRILL_DIA value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara13
            (
                double normalPunchHeadPara13 /** Indicates the TAP_DRILL_DIA value of punch head */
            );
            /**Returns  the D value of punch head  <br> License requirements : None */
            public: double NormalPunchHeadPara14
            (
            );
            /**Sets  the D value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara14
            (
                double normalPunchHeadPara14 /** Indicates the D value of punch head */
            );
            /**Returns  the num_col value of punch head  <br> License requirements : None */
            public: int NormalPunchHeadPara15
            (
            );
            /**Sets  the num_col value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara15
            (
                int normalPunchHeadPara15 /** Indicates the num_col value of punch head */
            );
            /**Returns  the num_row value of punch head  <br> License requirements : None */
            public: int NormalPunchHeadPara16
            (
            );
            /**Sets  the num_row value of punch head  <br> License requirements : None */
            public: void SetNormalPunchHeadPara16
            (
                int normalPunchHeadPara16 /** Indicates the num_col value of punch head */
            );
            /** Create normal punch head  <br> License requirements : None */
            public: void NormalCreateUdphead
            (
            );
            /**Returns  the clearance option for normal pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalClearanceOptionType NormalClearanceOption
            (
            );
            /**Sets  the clearance option for normal pierce design  <br> License requirements : None */
            public: void SetNormalClearanceOption
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalClearanceOptionType normalClearanceOption /** Indicates the clearance option for normal pierce design */
            );
            /**Returns  the clearance value for normal pierce design  <br> License requirements : None */
            public: double NormalClearance
            (
            );
            /**Sets  the clearance value for normal pierce design  <br> License requirements : None */
            public: void SetNormalClearance
            (
                double normalClearance /** Indicates the clearance value for normal pierce design */
            );
            /**Returns  the offset side option for normal pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalOffsetSideType NormalOffsetSide
            (
            );
            /**Sets  the offset side option for normal pierce design  <br> License requirements : None */
            public: void SetNormalOffsetSide
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalOffsetSideType normalOffsetSide /** Indicates the offset side option for normal pierce design */
            );
            /**Returns  the bottom plate option for normal pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::NormalBbpoptionType NormalBbpoption
            (
            );
            /**Sets  the bottom plate option for normal pierce design  <br> License requirements : None */
            public: void SetNormalBbpoption
            (
                NXOpen::Tooling::PiercingInsertBuilder::NormalBbpoptionType normalBbpoption /** Indicates the bottom plate option for normal pierce design */
            );
            /**Returns  the rename dialog option for normal pierce design  <br> License requirements : None */
            public: bool NormalRenameDialog
            (
            );
            /**Sets  the rename dialog option for normal pierce design  <br> License requirements : None */
            public: void SetNormalRenameDialog
            (
                bool normalRenameDialog /** Indicates the rename dialog option for normal pierce design */
            );
            /**Returns  the one punch option for normal pierce design  <br> License requirements : None */
            public: bool NormalOnePunchToggle
            (
            );
            /**Sets  the one punch option for normal pierce design  <br> License requirements : None */
            public: void SetNormalOnePunchToggle
            (
                bool normalOnePunchToggle /** Indicates the one punch option for normal pierce design */
            );
            /**Returns  the select edges for freeform pierce design  <br> License requirements : None */
            public: NXOpen::SelectEdgeList * SelectEdges
            (
            );
            /**Returns  the select faces for freeform pierce design  <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelectFaces
            (
            );
            /** Load die for freeform pierce design  <br> License requirements : None */
            public: void FreeformLoadDie
            (
            );
            /**Returns  the parent part of cavity slug for freeform pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformCavitySlugParentPartType FreeformCavitySlugParentPart
            (
            );
            /**Sets  the parent part of cavity slug for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformCavitySlugParentPart
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformCavitySlugParentPartType freeformCavitySlugParentPart /** Indicates the parent part of cavity slug for freeform pierce design */
            );
            /**Returns  the cavity type for freeform pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformCavityType FreeformCavity
            (
            );
            /**Sets  the cavity type for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformCavity
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformCavityType freeformCavity /** Indicates the cavity type for freeform pierce design */
            );
            /**Returns  the H value of slug for freeform pierce design  <br> License requirements : None */
            public: double FreeformSlugPara1
            (
            );
            /**Sets  the H value of slug for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformSlugPara1
            (
                double freeformSlugPara1 /** Indicates the H value of slug for freeform pierce design */
            );
            /**Returns  the A value of slug for freeform pierce design  <br> License requirements : None */
            public: double FreeformSlugPara2
            (
            );
            /**Sets  the A value of slug for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformSlugPara2
            (
                double freeformSlugPara2 /** Indicates the A value of slug for freeform pierce design */
            );
            /**Returns  the C1 value of slug for freeform pierce design  <br> License requirements : None */
            public: double FreeformSlugPara3
            (
            );
            /**Sets  the C1 value of slug for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformSlugPara3
            (
                double freeformSlugPara3 /** Indicates the C1 value of slug for freeform pierce design */
            );
            /**Returns  the C2 value of slug for freeform pierce design  <br> License requirements : None */
            public: double FreeformSlugPara4
            (
            );
            /**Sets  the C2 value of slug for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformSlugPara4
            (
                double freeformSlugPara4 /** Indicates the C2 value of slug for freeform pierce design */
            );
            /**Returns  the each scrap option of bottom plate slug for freeform pierce design  <br> License requirements : None */
            public: bool FreeformForEachScrap1
            (
            );
            /**Sets  the each scrap option of bottom plate slug for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformForEachScrap1
            (
                bool freeformForEachScrap1 /** Indicates the each scrap option of bottom plate slug for freeform pierce design */
            );
            /**Returns  the bottom plate slug type for freeform pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformBbpslugType FreeformBbpslug
            (
            );
            /**Sets  the bottom plate slug type for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformBbpslug
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformBbpslugType freeformBbpslug /** Indicates the bottom plate slug type for freeform pierce design */
            );
            /** Edit bottom plate slug for normal freeform design  <br> License requirements : None */
            public: void FreeformEditBbpslug
            (
            );
            /**Returns  the each scrap option of die shoe slug for freeform pierce design  <br> License requirements : None */
            public: bool FreeformForEachScrap2
            (
            );
            /**Sets  the each scrap option of die shoe slug for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformForEachScrap2
            (
                bool freeformForEachScrap2 /** Indicates the each scrap option of die shoe slug for freeform pierce design */
            );
            /**Returns  the die shoe slug type for freeform pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformDsslugType FreeformDsslug
            (
            );
            /**Sets  the die shoe slug type for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformDsslug
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformDsslugType freeformDsslug /** Indicates the die shoe slug type for freeform pierce design */
            );
            /** Edit die shoe slug for normal freeform design  <br> License requirements : None */
            public: void FreeformEditDsslug
            (
            );
            /**Returns  the select pierce die insert to be edited  <br> License requirements : None */
            public: NXOpen::SelectBodyList * FreeformSelectPierceDieInsert
            (
            );
            /** Create cavity and slug for freeform pierce design  <br> License requirements : None */
            public: void FreeformCreateCavityAndSlug
            (
            );
            /** Load standard punch for freeform pierce design  <br> License requirements : None */
            public: void FreeformLoadStandardPunch
            (
            );
            /**Returns  the parent part of user defined punch for freeform pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformUdpparentPartType FreeformUdpparentPart
            (
            );
            /**Sets  the parent part of user defined punch for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformUdpparentPart
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformUdpparentPartType freeformUdpparentPart /** Indicates the parent part of user defined punch for freeform pierce design */
            );
            /**Returns  the punch length for freeform pierce design  <br> License requirements : None */
            public: NXString FreeformPunchLength
            (
            );
            /**Sets  the punch length for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformPunchLength
            (
                const NXString & freeformPunchLength /** freeformpunchlength */ 
            );
            /**Returns  the select pierce punch insert to be edited  <br> License requirements : None */
            public: NXOpen::SelectBodyList * FreeformSelectPiercePunch
            (
            );
            /** Create user defined punch for freeform pierce design  <br> License requirements : None */
            public: void FreeformCreateUdp
            (
            );
            /**Returns  the punch head type  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformPunchHeadType FreeformPunchHead
            (
            );
            /**Sets  the punch head type  <br> License requirements : None */
            public: void SetFreeformPunchHead
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformPunchHeadType freeformPunchHead /** Indicates the punch head type */
            );
            /**Returns  the pad head type  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformPadHeadType FreeformPadHead
            (
            );
            /**Sets  the pad head type  <br> License requirements : None */
            public: void SetFreeformPadHead
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformPadHeadType freeformPadHead /** the pad head type */
            );
            /**Returns  the BLOCK_L value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara1
            (
            );
            /**Sets  the BLOCK_L value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara1
            (
                double freeformPunchHeadPara1 /** Indicates the BLOCK_L value of punch head */
            );
            /**Returns  the BLOCK_W value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara2
            (
            );
            /**Sets  the BLOCK_W value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara2
            (
                double freeformPunchHeadPara2 /** Indicates the BLOCK_W value of punch head */
            );
            /**Returns  the BLOCK_H value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara3
            (
            );
            /**Sets  the BLOCK_H value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara3
            (
                double freeformPunchHeadPara3 /** Indicates the BLOCK_H value of punch head */
            );
            /**Returns  the DOWEL_POSITION1 value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara4
            (
            );
            /**Sets  the DOWEL_POSITION1 value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara4
            (
                double freeformPunchHeadPara4 /** Indicates the DOWEL_POSITION1 value of punch head */
            );
            /**Returns  the DOWEL_POSITION2 value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara5
            (
            );
            /**Sets  the DOWEL_POSITION2 value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara5
            (
                double freeformPunchHeadPara5 /** Indicates the DOWEL_POSITION2 value of punch head */
            );
            /**Returns  the SLOT_POSITION value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara6
            (
            );
            /**Sets  the SLOT_POSITION value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara6
            (
                double freeformPunchHeadPara6 /** Indicates the SLOT_POSITION value of punch head */
            );
            /**Returns  the SLOT_WIDTH value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara7
            (
            );
            /**Sets  the SLOT_WIDTH value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara7
            (
                double freeformPunchHeadPara7 /** Indicates the SLOT_WIDTH value of punch head */
            );
            /**Returns  the SLOT_DEPTH1 value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara8
            (
            );
            /**Sets  the SLOT_DEPTH1 value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara8
            (
                double freeformPunchHeadPara8 /** Indicates the SLOT_DEPTH1 value of punch head */
            );
            /**Returns  the SLOT_DEPTH2 value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara9
            (
            );
            /**Sets  the SLOT_DEPTH2 value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara9
            (
                double freeformPunchHeadPara9 /** Indicates the SLOT_DEPTH2 value of punch head */
            );
            /**Returns  the HOLDER_L value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara10
            (
            );
            /**Sets  the HOLDER_L value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara10
            (
                double freeformPunchHeadPara10 /** Indicates the HOLDER_L value of punch head */
            );
            /**Returns  the HOLDER_W value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara11
            (
            );
            /**Sets  the HOLDER_W value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara11
            (
                double freeformPunchHeadPara11 /** Indicates the HOLDER_W value of punch head */
            );
            /**Returns  the HOLDER_H value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara12
            (
            );
            /**Sets  the HOLDER_H value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara12
            (
                double freeformPunchHeadPara12 /** Indicates the HOLDER_H value of punch head */
            );
            /**Returns  the TAP_DRILL_DIA value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara13
            (
            );
            /**Sets  the TAP_DRILL_DIA value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara13
            (
                double freeformPunchHeadPara13 /** Indicates the TAP_DRILL_DIA value of punch head */
            );
            /**Returns  the D value of punch head  <br> License requirements : None */
            public: double FreeformPunchHeadPara14
            (
            );
            /**Sets  the D value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara14
            (
                double freeformPunchHeadPara14 /** Indicates the D value of punch head */
            );
            /**Returns  the num_col value of punch head  <br> License requirements : None */
            public: int FreeformPunchHeadPara15
            (
            );
            /**Sets  the num_col value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara15
            (
                int freeformPunchHeadPara15 /** Indicates the num_col value of punch head */
            );
            /**Returns  the num_row value of punch head  <br> License requirements : None */
            public: int FreeformPunchHeadPara16
            (
            );
            /**Sets  the num_row value of punch head  <br> License requirements : None */
            public: void SetFreeformPunchHeadPara16
            (
                int freeformPunchHeadPara16 /** Indicates the num_row value of punch head */
            );
            /** Create freeform punch head  <br> License requirements : None */
            public: void FreeformCreateUdphead
            (
            );
            /**Returns  the clearance value for freeform pierce design  <br> License requirements : None */
            public: double FreeformClearance
            (
            );
            /**Sets  the clearance value for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformClearance
            (
                double freeformClearance /** Indicates the clearance option for freeform pierce design */
            );
            /**Returns  the offset side option for freeform pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformOffsetSideType FreeformOffsetSide
            (
            );
            /**Sets  the offset side option for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformOffsetSide
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformOffsetSideType freeformOffsetSide /** Indicates the offset side option for freeform pierce design */
            );
            /**Returns  the bottom plate option for freeform pierce design  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::FreeformBbpoptionType FreeformBbpoption
            (
            );
            /**Sets  the bottom plate option for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformBbpoption
            (
                NXOpen::Tooling::PiercingInsertBuilder::FreeformBbpoptionType freeformBbpoption /** Indicates the bottom plate option for freeform pierce design */
            );
            /**Returns  the rename dialog option for freeform pierce design  <br> License requirements : None */
            public: bool FreeformRenameDialog
            (
            );
            /**Sets  the rename dialog option for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformRenameDialog
            (
                bool freeformRenameDialog /** Indicates the rename dialog option for freeform pierce design */
            );
            /**Returns  the one punch option for freeform pierce design  <br> License requirements : None */
            public: bool FreeformOnePunchToggle
            (
            );
            /**Sets  the one punch option for freeform pierce design  <br> License requirements : None */
            public: void SetFreeformOnePunchToggle
            (
                bool freeformOnePunchToggle /** Indicates the one punch option for freeform pierce design */
            );
            /**Returns  the select insert for rectangular array  <br> License requirements : None */
            public: NXOpen::SelectFaceList * RectangularSelectInsert
            (
            );
            /**Returns  the operation option of rectangular array  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::RectangularOperationSwitchType RectangularOperationSwitch
            (
            );
            /**Sets  the operation option of rectangular array  <br> License requirements : None */
            public: void SetRectangularOperationSwitch
            (
                NXOpen::Tooling::PiercingInsertBuilder::RectangularOperationSwitchType rectangularOperationSwitch /** Indicates the operation option of rectangular array */
            );
            /**Returns  the delete all components option of rectangular array  <br> License requirements : None */
            public: bool RectangularDeleteAllComponents
            (
            );
            /**Sets  the delete all components option of rectangular array  <br> License requirements : None */
            public: void SetRectangularDeleteAllComponents
            (
                bool rectangularDeleteAllComponents /** Indicates the delete all components option of rectangular array */
            );
            /**Returns  the specify x vector of rectangular array  <br> License requirements : None */
            public: NXOpen::Direction * RectangularSpecifyVectorX
            (
            );
            /**Sets  the specify x vector of rectangular array  <br> License requirements : None */
            public: void SetRectangularSpecifyVectorX
            (
                NXOpen::Direction * rectangularSpecifyVectorX /** Indicates the specified x vector of rectangular array */
            );
            /**Returns  the total number of x direction components  <br> License requirements : None */
            public: int TotalNumberX
            (
            );
            /**Sets  the total number of x direction components  <br> License requirements : None */
            public: void SetTotalNumberX
            (
                int totalNumberX /** Indicates the total number of x direction components */
            );
            /**Returns  the offset x value of rectangular array  <br> License requirements : None */
            public: double OffsetX
            (
            );
            /**Sets  the offset x value of rectangular array  <br> License requirements : None */
            public: void SetOffsetX
            (
                double offsetX /** Indicates the offset x value of rectangular array */
            );
            /**Returns  the specify y vector of rectangular array  <br> License requirements : None */
            public: NXOpen::Direction * RectangularSpecifyVectorY
            (
            );
            /**Sets  the specify y vector of rectangular array  <br> License requirements : None */
            public: void SetRectangularSpecifyVectorY
            (
                NXOpen::Direction * rectangularSpecifyVectorY /** Indicates the specify y vector of rectangular array */
            );
            /**Returns  the total number of y direction components  <br> License requirements : None */
            public: int TotalNumberY
            (
            );
            /**Sets  the total number of y direction components  <br> License requirements : None */
            public: void SetTotalNumberY
            (
                int totalNumberY /** totalnumbery */ 
            );
            /**Returns  the offset y value of rectangular array  <br> License requirements : None */
            public: double OffsetY
            (
            );
            /**Sets  the offset y value of rectangular array  <br> License requirements : None */
            public: void SetOffsetY
            (
                double offsetY /** Indicates the offset y value of rectangular array */
            );
            /** Create rectangular array  <br> License requirements : None */
            public: void RectangularButton
            (
            );
            /**Returns  the select insert for circular array  <br> License requirements : None */
            public: NXOpen::SelectFaceList * CircularSelectInsert
            (
            );
            /**Returns  the operation option of circular array  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::CircularOperationSwitchType CircularOperationSwitch
            (
            );
            /**Sets  the operation option of circular array  <br> License requirements : None */
            public: void SetCircularOperationSwitch
            (
                NXOpen::Tooling::PiercingInsertBuilder::CircularOperationSwitchType circularOperationSwitch /** Indicates the operation option of circular array */
            );
            /**Returns  the delete all components option of circular array  <br> License requirements : None */
            public: bool CircularDeleteAllComponents
            (
            );
            /**Sets  the delete all components option of circular array  <br> License requirements : None */
            public: void SetCircularDeleteAllComponents
            (
                bool circularDeleteAllComponents /** Indicates the delete all components option of circular array */
            );
            /**Returns  the specify vector of circular array  <br> License requirements : None */
            public: NXOpen::Direction * CircularSpecifyVector
            (
            );
            /**Sets  the specify vector of circular array  <br> License requirements : None */
            public: void SetCircularSpecifyVector
            (
                NXOpen::Direction * circularSpecifyVector /** Indicates the specify vector of circular array */
            );
            /**Returns  the total number of components  <br> License requirements : None */
            public: int TotalNumber
            (
            );
            /**Sets  the total number of components  <br> License requirements : None */
            public: void SetTotalNumber
            (
                int totalNumber /** Indicates the total number of components */
            );
            /**Returns  the offset angle value of circular array  <br> License requirements : None */
            public: double OffsetAngle
            (
            );
            /**Sets  the offset angle value of circular array  <br> License requirements : None */
            public: void SetOffsetAngle
            (
                double offsetAngle /** Indicates the offset angle value of circular array */
            );
            /** Create circular array  <br> License requirements : None */
            public: void CircularButton
            (
            );
            /**Returns  the select insert for copy  <br> License requirements : None */
            public: NXOpen::SelectPartList * SelectInsert
            (
            );
            /**Returns  the specify control point for copy  <br> License requirements : None */
            public: NXOpen::Point * SpecifyControlPoint
            (
            );
            /**Sets  the specify control point for copy  <br> License requirements : None */
            public: void SetSpecifyControlPoint
            (
                NXOpen::Point * specifyControlPoint /** Indicates the specified control point for copy */
            );
            /**Returns  the specify destination point for copy  <br> License requirements : None */
            public: NXOpen::Point * SpecifyDestinationPoint
            (
            );
            /**Sets  the specify destination point for copy  <br> License requirements : None */
            public: void SetSpecifyDestinationPoint
            (
                NXOpen::Point * specifyDestinationPoint /** Indicates the specify destination point for copy */
            );
            /** Copy component <br> License requirements : None */
            public: void CopyButton
            (
            );
            /** Update position  <br> License requirements : None */
            public: void UpdatePosition
            (
            );
            /**Returns  the select scrap or insert for update  <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelectScrapOrInsert
            (
            );
            /**Returns  the association tool type  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::AssociationToolType AssociationTool
            (
            );
            /**Sets  the association tool type  <br> License requirements : None */
            public: void SetAssociationTool
            (
                NXOpen::Tooling::PiercingInsertBuilder::AssociationToolType associationTool /** Indicates the association tool type */
            );
            /**Returns  the link tool type  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::LinkToolType LinkTool
            (
            );
            /**Sets  the link tool type  <br> License requirements : None */
            public: void SetLinkTool
            (
                NXOpen::Tooling::PiercingInsertBuilder::LinkToolType linkTool /** Indicates the link tool type */
            );
            /**Returns  the sort option  <br> License requirements : None */
            public: NXOpen::Tooling::PiercingInsertBuilder::SortOptionType SortOption
            (
            );
            /**Sets  the sort option  <br> License requirements : None */
            public: void SetSortOption
            (
                NXOpen::Tooling::PiercingInsertBuilder::SortOptionType sortOption /** Indicates the sort option */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
