#ifndef NXOpen_DRAWINGS_VIEWCOPYTO3DBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWCOPYTO3DBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewCopyTo3dBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Drawings_ViewCopyTo3dBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewCopyTo3dBuilder;
    }
    class Builder;
    namespace Drawings
    {
        class DrawingView;
    }
    namespace Drawings
    {
        class SelectDrawingView;
    }
    namespace Drawings
    {
        class SelectDrawingViewList;
    }
    namespace Drawings
    {
        class _ViewCopyTo3dBuilderBuilder;
        /**
            Represents a @link Drawings::ViewCopyTo3dBuilder Drawings::ViewCopyTo3dBuilder@endlink .  This class
            is used to copy the contents of a drawing view to modeling space
             <br> To create a new instance of this class, use @link Drawings::DraftingViewCollection::CreateCopyTo3dBuilder Drawings::DraftingViewCollection::CreateCopyTo3dBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ViewCopyTo3dBuilder : public Builder
        {
            /** The option to get the distance */
            public: enum Option
            {
                OptionAutomatic/** automatic distance calculation */,
                OptionSpecify/** specify distance */
            };

            private: friend class  _ViewCopyTo3dBuilderBuilder;
            protected: ViewCopyTo3dBuilder();
            /**Returns  the selected view for previous single view selection, backward compatibility  <br> License requirements : nx_drafting_plus ("Drafting Plus") */
            public: NXOpen::Drawings::SelectDrawingView * View
            (
            );
            /**Returns  the selected views for multiple views selection  <br> License requirements : nx_drafting_plus ("Drafting Plus") */
            public: NXOpen::Drawings::SelectDrawingViewList * Views
            (
            );
            /** The selection of drawing view to process, obsolete  <br> License requirements : nx_drafting_plus ("Drafting Plus") */
            public: void SelectView
            (
                NXOpen::Drawings::DrawingView * view /** The view to copy from */
            );
            /** Commits any edits that have been applied to the builder. Returns the object being
                   edited, or a new object if the builder is being used in creation mode.
                 @return  The object being edited, or the new object.  <br> License requirements : None */
            public: NXOpen::NXObject * Commit
            (
            );
            /** The copy of the selected view to modeling, obsolete  <br> License requirements : nx_drafting_plus ("Drafting Plus") */
            public: void Commit
            (
                double offset /** offset from origin */,
                bool curves /** process curves */,
                bool sketches /** process sketch curves */,
                bool dimensions /** process dimensions */
            );
            /** The copy of the selected view to modeling  <br> License requirements : nx_drafting_plus ("Drafting Plus") */
            public: void Commit
            (
                double offset /** offset from origin */,
                bool curves /** process curves */,
                bool sketches /** process sketch curves */,
                int option /** option of automatic or specify */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
