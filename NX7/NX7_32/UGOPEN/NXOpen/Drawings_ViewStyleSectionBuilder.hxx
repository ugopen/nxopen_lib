#ifndef NXOpen_DRAWINGS_VIEWSTYLESECTIONBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLESECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleSectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewStyleSectionBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleSectionBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _ViewStyleSectionBuilderBuilder;
        /** Represents the SECTION tab on the View Style Dialog (Drawings.ViewStyleSectionBuilder)
            */
        class NXOPENCPPEXPORT ViewStyleSectionBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _ViewStyleSectionBuilderBuilder;
            protected: ViewStyleSectionBuilder();
            /**Returns  the background toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool Background
            (
            );
            /**Sets  the background toggle on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetBackground
            (
                bool backgroundToggle /** Sets a new background toggle value on the section sub-builder */
            );
            /**Returns  the foreground toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool Foreground
            (
            );
            /**Sets  the foreground toggle on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetForeground
            (
                bool foregroundToggle /** Sets a new foreground toggle value on the section sub-builder */
            );
            /**Returns  the bendlines toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool Bendlines
            (
            );
            /**Sets  the bendlines toggle on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetBendlines
            (
                bool bendlinesToggle /** Sets a new bendlines toggle value on the section sub-builder */
            );
            /**Returns  the sheet bodies toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool SheetBodies
            (
            );
            /**Sets  the sheet bodies toggle on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetSheetBodies
            (
                bool sheetBodiesToggle /** Sets a new sheet bodies toggle value on the section sub-builder */
            );
            /**Returns  the crosshatch toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool Crosshatch
            (
            );
            /**Sets  the crosshatch toggle on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetCrosshatch
            (
                bool crosshatchToggle /** Sets a new crosshatch toggle value on the section sub-builder */
            );
            /**Returns  the hidden line hatching toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool HiddenLineHatching
            (
            );
            /**Sets  the hidden line hatching toggle on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenLineHatching
            (
                bool hiddenLineHatchingToggle /** Sets a new hidden line hatching toggle value on the section sub-builder */
            );
            /**Returns  the assembly tolerance toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool AssemblyTolerance
            (
            );
            /**Sets  the assembly tolerance toggle on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAssemblyTolerance
            (
                bool assemblyToleranceToggle /** Sets a new assembly tolerance toggle value on the section sub-builder */
            );
            /**Returns  the restrict crosshatch angle toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool RestrictCrosshatchAngle
            (
            );
            /**Sets  the restrict crosshatch angle toggle on the SECTION tab of the View Style Dialog  <br> License requirements : nx_drafting_plus ("Drafting Plus") */
            public: void SetRestrictCrosshatchAngle
            (
                bool restrictCrosshatchAngleToggle /** Sets a new restrict crosshatch angle toggle value on the section sub-builder */
            );
            /**Returns  the adjacency tolerance on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: double AdjacencyToleranceData
            (
            );
            /**Sets  the adjacency tolerance on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAdjacencyToleranceData
            (
                double adjacencyToleranceData /** Sets a new assembly tolerance on the section sub-builder */
            );
            /**Returns  the display section line toggle on the SECTION tab of the View Style Dialog  <br> License requirements : None */
            public: bool DisplaySectionLine
            (
            );
            /**Sets  the display section line toggle on the SECTION tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplaySectionLine
            (
                bool displaySectionLine /** Sets a new display section line toggle value on the section sub-builder */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
