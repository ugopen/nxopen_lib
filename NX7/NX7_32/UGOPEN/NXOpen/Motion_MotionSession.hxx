#ifndef NXOpen_MOTION_MOTIONSESSION_HXX_INCLUDED
#define NXOpen_MOTION_MOTIONSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_MotionSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class MotionSession;
    }
    class Session;
    class NXObject;
    namespace Motion
    {
        /** Represents motion session  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT MotionSession
        {
            private: NXOpen::Session* m_owner;
            public: explicit MotionSession(NXOpen::Session *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Clone the Simulation.  @return  new motion simulation part name  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString CloneSimulation
            (
                NXOpen::NXObject * masterPart /** the master part */,
                const NXString & motionSimName /** motion simulation part which ready to be cloned   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete the Simulation.  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void DeleteSimulation
            (
                NXOpen::NXObject * masterPart /** the master_part */,
                const NXString & motionSimName /** motion simulation part which ready to be deleted   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create the Simulation.  @return  created motion simulation part name  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString CreateSimulation
            (
                NXOpen::NXObject * masterPart /** the master_part */
            );
            /** Direct open the Simulation.  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void DirectOpenSimulation
            (
                const NXString & motionSimName /** motion simulation part name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Reparent the Simulation.  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ReparentSimulation
            (
                const NXString & motionSimFullName /** motion simulation full name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & destinationDirectory /** destination directory   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Initialize the mech  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void InitializeMechanisms
            (
            );
            /** Convert mating conditions and constraints to links and joints  @return  the link which will be fixed to ground  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::NXObject * ConstraintsToMotionObject
            (
                NXOpen::NXObject * scenarioPart /** the scenario part object */,
                NXOpen::NXObject * masterPart /** the master part object */
            );
            /** Fix the link to ground  @return  the joint object created  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::NXObject * FixLinkToGround
            (
                NXOpen::NXObject * link /** the link object */
            );
            /** Get all scenario names @return  scenario names  <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXString> GetScenarioNames
            (
                NXOpen::NXObject * masterPart /** the master part object */
            );
            /** Get the full name for a scenario name @return  full path to the file  <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString GetFullName
            (
                NXOpen::NXObject * masterPart /** the master part object */,
                const NXString & scenarioName /** scenario name to check (with or without extension)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
