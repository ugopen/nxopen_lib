#ifndef NXOpen_CAM_INSPECTIONOUTPUTOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONOUTPUTOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionOutputOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionOutputOperationBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionOutputOperationBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    namespace CAM
    {
        class _InspectionOutputOperationBuilderBuilder;
        /** this class creates the output operation  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionOutputOperationBuilder CAM::InspectionOperationCollection::CreateInspectionOutputOperationBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        EnumTypeOutput </td> <td> 
         
        Output1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT InspectionOutputOperationBuilder : public CAM::OperationBuilder
        {
            /** JA_INSP_OUTPUT_OP_BUILDER_TypeOutput specifies output operation types */
            public: enum TypeOutput
            {
                TypeOutputOutput1/** output1 */ ,
                TypeOutputOutput2/** output2 */ 
            };

            private: friend class  _InspectionOutputOperationBuilderBuilder;
            protected: InspectionOutputOperationBuilder();
            /**Returns  the enum type output  <br> License requirements : None */
            public: NXOpen::CAM::InspectionOutputOperationBuilder::TypeOutput EnumTypeOutput
            (
            );
            /**Sets  the enum type output  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumTypeOutput
            (
                NXOpen::CAM::InspectionOutputOperationBuilder::TypeOutput enumTypeOutput /** enumtypeoutput */ 
            );
            /**Returns  the string feature name1  <br> License requirements : None */
            public: NXString StringFeatureName1
            (
            );
            /**Sets  the string feature name1  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringFeatureName1
            (
                const NXString & stringFeatureName1 /** stringfeaturename1 */ 
            );
            /**Returns  the string feature name2  <br> License requirements : None */
            public: NXString StringFeatureName2
            (
            );
            /**Sets  the string feature name2  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringFeatureName2
            (
                const NXString & stringFeatureName2 /** stringfeaturename2 */ 
            );
            /**Returns  the string tol name  <br> License requirements : None */
            public: NXString StringTolName
            (
            );
            /**Sets  the string tol name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTolName
            (
                const NXString & stringTolName /** stringtolname */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
