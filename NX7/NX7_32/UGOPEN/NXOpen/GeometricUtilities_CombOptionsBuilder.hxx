#ifndef NXOpen_GEOMETRICUTILITIES_COMBOPTIONSBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_COMBOPTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CombOptionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _CombOptionsBuilderBuilder;
        /**
            Represents a @link GeometricUtilities::CombOptionsBuilder GeometricUtilities::CombOptionsBuilder@endlink 
            */
        class NXOPENCPPEXPORT CombOptionsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents the Analysis types */
            public: enum AnalysisTypes
            {
                AnalysisTypesNone/** None */,
                AnalysisTypesCurvature/** Curvature */,
                AnalysisTypesRadius/** Radius */
            };

            /** Represents the Label types 
             @deprecated Deprecated in NX7.0 <br> 
            */
            public: enum LabelTypes
            {
                LabelTypesNone/** None */,
                LabelTypesMinimum/** Minimum */,
                LabelTypesMaximum/** Maximum */,
                LabelTypesMinimumMaximum/** Minimum and Maximum */
            };

            private: friend class  _CombOptionsBuilderBuilder;
            protected: CombOptionsBuilder();
            /**Returns  the show needles flag  <br> License requirements : None */
            public: bool ShowNeedles
            (
            );
            /**Sets  the show needles flag  <br> License requirements : None */
            public: void SetShowNeedles
            (
                bool showNeedles /** showneedles */ 
            );
            /**Returns  the auto scale flag  <br> License requirements : None */
            public: bool AutoScale
            (
            );
            /**Sets  the auto scale flag  <br> License requirements : None */
            public: void SetAutoScale
            (
                bool hasAutoScale /** hasautoscale */ 
            );
            /**Returns  the scale factor  <br> License requirements : None */
            public: double ScaleFactor
            (
            );
            /**Sets  the scale factor  <br> License requirements : None */
            public: void SetScaleFactor
            (
                double scaleFactor /** scalefactor */ 
            );
            /**Returns  the density  <br> License requirements : None */
            public: int Density
            (
            );
            /**Sets  the density  <br> License requirements : None */
            public: void SetDensity
            (
                int density /** density */ 
            );
            /**Returns  the intermediate density  <br> License requirements : None */
            public: int IntermediateDensity
            (
            );
            /**Sets  the intermediate density  <br> License requirements : None */
            public: void SetIntermediateDensity
            (
                int intermediateDensity /** intermediatedensity */ 
            );
            /**Returns  the maximum needle flag  <br> License requirements : None */
            public: bool HasMaxNeedleLength
            (
            );
            /**Sets  the maximum needle flag  <br> License requirements : None */
            public: void SetHasMaxNeedleLength
            (
                bool hasMaxNeedleLength /** hasmaxneedlelength */ 
            );
            /**Returns  the maximum needle length  <br> License requirements : None */
            public: double MaxNeedleLength
            (
            );
            /**Sets  the maximum needle length  <br> License requirements : None */
            public: void SetMaxNeedleLength
            (
                double maxNeedleLength /** maxneedlelength */ 
            );
            /**Returns  the analysis type  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CombOptionsBuilder::AnalysisTypes AnalysisType
            (
            );
            /**Sets  the analysis type  <br> License requirements : None */
            public: void SetAnalysisType
            (
                NXOpen::GeometricUtilities::CombOptionsBuilder::AnalysisTypes analysis /** analysis */ 
            );
            /**Returns  the label type 
             @deprecated Deprecated in NX7.0 <br> 
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CombOptionsBuilder::LabelTypes LabelType
            (
            );
            /**Sets  the label type 
             @deprecated Deprecated in NX7.0 <br> 
             <br> License requirements : None */
            public: void SetLabelType
            (
                NXOpen::GeometricUtilities::CombOptionsBuilder::LabelTypes label /** label */ 
            );
            /**Returns  the value indicating if the minimum label is enabled  <br> License requirements : None */
            public: bool IsMinimumLabelEnabled
            (
            );
            /**Sets  the value indicating if the minimum label is enabled  <br> License requirements : None */
            public: void SetMinimumLabelEnabled
            (
                bool isMinimumLabelEnabled /** isminimumlabelenabled */ 
            );
            /**Returns  the value indicating if the maximum label is enabled  <br> License requirements : None */
            public: bool IsMaximumLabelEnabled
            (
            );
            /**Sets  the value indicating if the maximum label is enabled  <br> License requirements : None */
            public: void SetMaximumLabelEnabled
            (
                bool isMaximumLabelEnabled /** ismaximumlabelenabled */ 
            );
            /**Returns  the normal to grid plane flag  <br> License requirements : None */
            public: bool IsNormalToGridPlane
            (
            );
            /**Sets  the normal to grid plane flag  <br> License requirements : None */
            public: void SetNormalToGridPlane
            (
                bool isNormalToGridPlane /** isnormaltogridplane */ 
            );
            /**Returns  the reverse needles flag  <br> License requirements : None */
            public: bool ReverseNeedles
            (
            );
            /**Sets  the reverse needles flag  <br> License requirements : None */
            public: void SetReverseNeedles
            (
                bool reverseNeedles /** reverseneedles */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
