#ifndef NXOpen_CAM_OPERATIONDISPLAYOPTIONSBUILDER_HXX_INCLUDED
#define NXOpen_CAM_OPERATIONDISPLAYOPTIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_OperationDisplayOptionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class OperationDisplayOptionsBuilder;
    }
    namespace CAM
    {
        class OperationPathDisplayColorsBuilder;
    }
    class Direction;
    namespace CAM
    {
        class _OperationDisplayOptionsBuilderBuilder;
        /** Represents a display options Builder  <br> This is an abstract class and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT OperationDisplayOptionsBuilder : public TaggedObject
        {
            /** the tool display types */
            public: enum ToolDisplayTypes
            {
                ToolDisplayTypesNone/** Tool Display: None */,
                ToolDisplayTypesTool2d/** Tool Display: 2D */,
                ToolDisplayTypesTool3d/** Tool Display: 3D */,
                ToolDisplayTypesAxis/** Tool Display: Axis */
            };

            /** the pattern display types */
            public: enum PatternDisplayTypes
            {
                PatternDisplayTypesNone/** Pattern Display: None */,
                PatternDisplayTypesSpecify/** Pattern Display: Specify */
            };

            /** the path display types */
            public: enum PathDisplayTypes
            {
                PathDisplayTypesSolidCenter/** Path Display: Solid Center */,
                PathDisplayTypesDashedCenter/** Path Display: Dashed Center */,
                PathDisplayTypesSilhouette/** Path Display: Silhouette */,
                PathDisplayTypesFill/** Path Display: Fill */,
                PathDisplayTypesSilhouetteFill/** Path Display: Silhouette Fill */
            };

            /** the path normal types */
            public: enum PathNormalTypes
            {
                PathNormalTypesTypesToolAxis/** Path Normal: Tool axis */,
                PathNormalTypesTypesSpecify/** Path Normal: Specify */
            };

            private: friend class  _OperationDisplayOptionsBuilderBuilder;
            protected: OperationDisplayOptionsBuilder();
            /**Returns  the tool display types  <br> License requirements : None */
            public: NXOpen::CAM::OperationDisplayOptionsBuilder::ToolDisplayTypes ToolDisplayType
            (
            );
            /**Sets  the tool display types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolDisplayType
            (
                NXOpen::CAM::OperationDisplayOptionsBuilder::ToolDisplayTypes toolDisplay /** the tool display type */
            );
            /**Returns  the tool display frequency  <br> License requirements : None */
            public: int ToolDisplayFrequency
            (
            );
            /**Sets  the tool display frequency  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolDisplayFrequency
            (
                int toolDisplayFrequency /** the tool display frequency */
            );
            /**Returns  the pattern display types  <br> License requirements : None */
            public: NXOpen::CAM::OperationDisplayOptionsBuilder::PatternDisplayTypes PatternDisplayType
            (
            );
            /**Sets  the pattern display types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternDisplayType
            (
                NXOpen::CAM::OperationDisplayOptionsBuilder::PatternDisplayTypes patternDisplay /** the pattern display type */
            );
            /**Returns  the pattern file name  <br> License requirements : None */
            public: NXString PatternFile
            (
            );
            /**Sets  the pattern file name  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternFile
            (
                const NXString & filename /** filename */ 
            );
            /**Returns  the pattern display frequency  <br> License requirements : None */
            public: int PatternDisplayFrequency
            (
            );
            /**Sets  the pattern display frequency  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternDisplayFrequency
            (
                int patternDisplayFrequency /** the pattern display frequency */
            );
            /**Returns  the pattern X offset  <br> License requirements : None */
            public: double PatternXOffset
            (
            );
            /**Sets  the pattern X offset  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternXOffset
            (
                double xOffset /** the pattern X offset */
            );
            /**Returns  the pattern Y offset  <br> License requirements : None */
            public: double PatternYOffset
            (
            );
            /**Sets  the pattern Y offset  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternYOffset
            (
                double yOffset /** the pattern Y offset */
            );
            /**Returns  the pattern Z offset  <br> License requirements : None */
            public: double PatternZOffset
            (
            );
            /**Sets  the pattern Z offset  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternZOffset
            (
                double zOffset /** the pattern Z offset */
            );
            /**Returns  the replay speed. The range is 1-10.  <br> License requirements : None */
            public: int ReplaySpeed
            (
            );
            /**Sets  the replay speed. The range is 1-10.  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReplaySpeed
            (
                int displaySpeed /** the replay speed. The range is 1-10. */
            );
            /**Returns  the path display types  <br> License requirements : None */
            public: NXOpen::CAM::OperationDisplayOptionsBuilder::PathDisplayTypes PathDisplayType
            (
            );
            /**Sets  the path display types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPathDisplayType
            (
                NXOpen::CAM::OperationDisplayOptionsBuilder::PathDisplayTypes pathDisplay /** the path display type */
            );
            /**Returns  the percent of tool.The range is 1-100.  <br> License requirements : None */
            public: double PercentOfTool
            (
            );
            /**Sets  the percent of tool.The range is 1-100.  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPercentOfTool
            (
                double percentTool /** the percent of tool.The range is 1-100. */
            );
            /**Returns  the path normal types  <br> License requirements : None */
            public: NXOpen::CAM::OperationDisplayOptionsBuilder::PathNormalTypes PathNormalType
            (
            );
            /**Sets  the path normal types  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPathNormalType
            (
                NXOpen::CAM::OperationDisplayOptionsBuilder::PathNormalTypes pathNormal /** the path normal type */
            );
            /**Returns  the path vector  <br> License requirements : None */
            public: NXOpen::Direction * PathVector
            (
            );
            /**Sets  the path vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPathVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the feed display flag  <br> License requirements : None */
            public: bool FeedDisplayFlag
            (
            );
            /**Sets  the feed display flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeedDisplayFlag
            (
                bool feedDisplay /** the feed display flag */
            );
            /**Returns  the arrow display flag  <br> License requirements : None */
            public: bool ArrowDisplayFlag
            (
            );
            /**Sets  the arrow display flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetArrowDisplayFlag
            (
                bool arrowDisplay /** the arrow display flag */
            );
            /**Returns  the line number display flag  <br> License requirements : None */
            public: bool LineNumberDisplayFlag
            (
            );
            /**Sets  the line number display flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLineNumberDisplayFlag
            (
                bool lineNumberDisplay /** the line number display flag */
            );
            /**Returns  the display cut regions flag  <br> License requirements : None */
            public: bool DisplayCutRegionsFlag
            (
            );
            /**Sets  the display cut regions flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplayCutRegionsFlag
            (
                bool displayCutRegions /** the display cut regions flag */
            );
            /**Returns  the pause after display flag  <br> License requirements : None */
            public: bool PauseAfterDisplayFlag
            (
            );
            /**Sets  the pause after display flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPauseAfterDisplayFlag
            (
                bool pauseAfterDisplay /** the pause after display flag */
            );
            /**Returns  the refresh before display flag  <br> License requirements : None */
            public: bool RefreshBeforeDisplayFlag
            (
            );
            /**Sets  the refresh before display flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRefreshBeforeDisplayFlag
            (
                bool refreshBeforeDisplay /** the refresh before display flag */
            );
            /**Returns  the suppress path display flag  <br> License requirements : None */
            public: bool SuppressPathDisplayFlag
            (
            );
            /**Sets  the suppress path display flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSuppressPathDisplayFlag
            (
                bool suppressPathDisplay /** the suppress path display flag */
            );
            /**Returns  the path display colors builder   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::OperationPathDisplayColorsBuilder * PathDisplayColorsBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
