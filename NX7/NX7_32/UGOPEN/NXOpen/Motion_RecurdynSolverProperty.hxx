#ifndef NXOpen_MOTION_RECURDYNSOLVERPROPERTY_HXX_INCLUDED
#define NXOpen_MOTION_RECURDYNSOLVERPROPERTY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_RecurdynSolverProperty.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_RecurdynSolverProperty.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class RecurdynSolverProperty;
    }
    namespace Motion
    {
        class _RecurdynSolverPropertyBuilder;
        /** Represents a @link Motion::RecurdynSolverProperty Motion::RecurdynSolverProperty@endlink  */
        class NXOPENCPPEXPORT RecurdynSolverProperty : public TaggedObject
        {
            /** Integrator type */
            public: enum StaticIntegratorTypes
            {
                StaticIntegratorTypesNewtonRapson/** Newton rapson */,
                StaticIntegratorTypesRobustNewtonRapson/** Robust newton rapson */
            };

            private: friend class  _RecurdynSolverPropertyBuilder;
            protected: RecurdynSolverProperty();
            /**Returns  the dynamic initial step size  <br> License requirements : None */
            public: double DynamicInitialStepSize
            (
            );
            /**Sets  the dynamic initial step size  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicInitialStepSize
            (
                double dynamicInitialStepSize /** dynamicinitialstepsize */ 
            );
            /**Returns  the dynamic error tolerance  <br> License requirements : None */
            public: double DynamicErrorTolerance
            (
            );
            /**Sets  the dynamic error tolerance  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicErrorTolerance
            (
                double dynamicErrorTolerance /** dynamicerrortolerance */ 
            );
            /**Returns  the dynamic max step size  <br> License requirements : None */
            public: double DynamicMaxStepSize
            (
            );
            /**Sets  the dynamic max step size  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicMaxStepSize
            (
                double dynamicMaxStepSize /** dynamicmaxstepsize */ 
            );
            /**Returns  the dynamic numerical damping  <br> License requirements : None */
            public: double DynamicNumericalDamping
            (
            );
            /**Sets  the dynamic numerical damping  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicNumericalDamping
            (
                double dynamicNumericalDamping /** dynamicnumericaldamping */ 
            );
            /**Returns  the Maximum kinematic iteration  <br> License requirements : None */
            public: int DynamicMaxKinIteration
            (
            );
            /**Sets  the Maximum kinematic iteration  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDynamicMaxKinIteration
            (
                int dynamicMaxKinIteration /** dynamicmaxkiniteration */ 
            );
            /**Returns  the integrator type  <br> License requirements : None */
            public: NXOpen::Motion::RecurdynSolverProperty::StaticIntegratorTypes StaticIntegratorType
            (
            );
            /**Sets  the integrator type  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticIntegratorType
            (
                NXOpen::Motion::RecurdynSolverProperty::StaticIntegratorTypes integratorType /** integratortype */ 
            );
            /**Returns  the static error tolerance  <br> License requirements : None */
            public: double StaticErrorTolerance
            (
            );
            /**Sets  the static error tolerance  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticErrorTolerance
            (
                double staticErrorTolerance /** staticerrortolerance */ 
            );
            /**Returns  the static max iteration  <br> License requirements : None */
            public: int StaticMaxIteration
            (
            );
            /**Sets  the static max iteration  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticMaxIteration
            (
                int staticMaxIteration /** staticmaxiteration */ 
            );
            /**Returns  the static stability  <br> License requirements : None */
            public: double StaticStability
            (
            );
            /**Sets  the static stability  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticStability
            (
                double staticStability /** staticstability */ 
            );
            /**Returns  the static initial step size  <br> License requirements : None */
            public: double StaticInitialStepSize
            (
            );
            /**Sets  the static initial step size  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticInitialStepSize
            (
                double staticInitialStepSize /** staticinitialstepsize */ 
            );
            /**Returns  the static max step size  <br> License requirements : None */
            public: double StaticMaxStepSize
            (
            );
            /**Sets  the static max step size  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticMaxStepSize
            (
                double staticMaxStepSize /** staticmaxstepsize */ 
            );
            /**Returns   the sampling time for co-simulation <br> License requirements : None */
            public: double CosimSampleTime
            (
            );
            /**Sets   the sampling time for co-simulation <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCosimSampleTime
            (
                double cosimSampleTime /** cosimsampletime */ 
            );
            /**Returns   the simulink model for co-simulation <br> License requirements : None */
            public: NXString CosimSimModel
            (
            );
            /**Sets   the simulink model for co-simulation <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCosimSimModel
            (
                const NXString & cosimSimModel /** cosimsimmodel */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
