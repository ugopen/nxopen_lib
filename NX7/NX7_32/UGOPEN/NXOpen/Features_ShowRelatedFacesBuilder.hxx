#ifndef NXOpen_FEATURES_SHOWRELATEDFACESBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHOWRELATEDFACESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShowRelatedFacesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Features_ShowRelatedFacesBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class ShowRelatedFacesBuilder;
    }
    class Builder;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class SelectFace;
    namespace Features
    {
        class _ShowRelatedFacesBuilderBuilder;
        /**
            Represents a builder for a Show Related Faces.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateShowRelatedFacesBuilder Features::FeatureCollection::CreateShowRelatedFacesBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ShowRelatedFacesBuilder : public Builder
        {
            private: friend class  _ShowRelatedFacesBuilderBuilder;
            protected: ShowRelatedFacesBuilder();
            /**Returns  the related face  <br> License requirements : None */
            public: NXOpen::SelectFace * RelatedFace
            (
            );
            /**Returns   the value indicating whether to keep offset relations or not  <br> License requirements : None */
            public: bool OffsetRelations
            (
            );
            /**Sets   the value indicating whether to keep offset relations or not  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOffsetRelations
            (
                bool keepOffsetRelations /** Flag indicating whether to include the offset relation */
            );
            /**  Locks the persistent constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void LockConstraint
            (
                NXOpen::Features::Feature * feature /** the persistent constraint feature */
            );
            /**  Unlocks the persistent constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UnlockConstraint
            (
                NXOpen::Features::Feature * feature /** the persistent constraint feature */
            );
            /**  Deletes the persistent constraint  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeleteConstraint
            (
                NXOpen::Features::Feature * feature /** the persistent constraint feature  */
            );
            /**  Deletes the offset relation  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeleteOffsetRelation
            (
                const std::vector<NXOpen::NXObject *> & offsetFaces /** offsetfaces */ 
            );
            /**  Unlocks all the persistent constraints on the related face   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UnlockAllConstraints
            (
            );
            /**  Deletes all the persistent constraints on the related face   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeleteAllConstraints
            (
            );
            /**  Deletes all the offset relations on the body which the face belongs to  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void DeleteAllOffsetRelationOnBody
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
