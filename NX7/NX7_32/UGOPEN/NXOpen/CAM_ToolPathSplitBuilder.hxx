#ifndef NXOpen_CAM_TOOLPATHSPLITBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TOOLPATHSPLITBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ToolPathSplitBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class ToolPathSplitBuilder;
    }
    class Builder;
    namespace CAM
    {
        class _ToolPathSplitBuilderBuilder;
        /** Represents a Tool Path Split Builder  <br> To create a new instance of this class, use @link CAM::CAMSetup::CreateToolPathSplitBuilder CAM::CAMSetup::CreateToolPathSplitBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ToolPathSplitBuilder : public Builder
        {
            /**  Divide type options */
            public: enum SplitTypes
            {
                SplitTypesByCollision/** split at collisions */,
                SplitTypesByTransfer/** split between transfers */
            };

            /**  Transfer using options */
            public: enum TransferUsingMethods
            {
                TransferUsingMethodsNone/** no transfer type */,
                TransferUsingMethodsRampOnShape/** ramp on shape */,
                TransferUsingMethodsLiftAndPlunge/** lift and plunge */
            };

            /**  Transfer type options */
            public: enum TransferTypes
            {
                TransferTypesDirect/** direct transfer type */,
                TransferTypesClearance/** clearance transfer type */,
                TransferTypesLowestSafeZ/** lowest safe z transfer type */
            };

            private: friend class  _ToolPathSplitBuilderBuilder;
            protected: ToolPathSplitBuilder();
            /**Returns  the type of split (by tranfer or collision)  <br> License requirements : None */
            public: NXOpen::CAM::ToolPathSplitBuilder::SplitTypes SplitType
            (
            );
            /**Sets  the type of split (by tranfer or collision)  <br> License requirements : None */
            public: void SetSplitType
            (
                NXOpen::CAM::ToolPathSplitBuilder::SplitTypes splitTypeValue /** split type value */ 
            );
            /**Returns  the transfer using method (none, ramp on shape, lift and plunge)  <br> License requirements : None */
            public: NXOpen::CAM::ToolPathSplitBuilder::TransferUsingMethods TransferUsingMethod
            (
            );
            /**Sets  the transfer using method (none, ramp on shape, lift and plunge)  <br> License requirements : None */
            public: void SetTransferUsingMethod
            (
                NXOpen::CAM::ToolPathSplitBuilder::TransferUsingMethods transferUsingMethod /** transfer using method */ 
            );
            /**Returns  the transfer type (direct, clearance, lowest safe z)  <br> License requirements : None */
            public: NXOpen::CAM::ToolPathSplitBuilder::TransferTypes TransferType
            (
            );
            /**Sets  the transfer type (direct, clearance, lowest safe z)  <br> License requirements : None */
            public: void SetTransferType
            (
                NXOpen::CAM::ToolPathSplitBuilder::TransferTypes transferType /** transfer type */ 
            );
            /**Returns  the transfer height  <br> License requirements : None */
            public: double TransferHeight
            (
            );
            /**Sets  the transfer height  <br> License requirements : None */
            public: void SetTransferHeight
            (
                double transferHeight /** transfer height */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
