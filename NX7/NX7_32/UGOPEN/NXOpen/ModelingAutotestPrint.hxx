#ifndef NXOpen_MODELINGAUTOTESTPRINT_HXX_INCLUDED
#define NXOpen_MODELINGAUTOTESTPRINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModelingAutotestPrint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>
namespace NXOpen
{
    class ModelingAutotestPrint;
    class DebugSession;
    class Body;
    class Curve;
    class Face;
    class Part;
    /** Represents a class that is used for NX testing.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link DebugSession DebugSession@endlink  <br> */
    class NXOPENDEBUGSESSIONCPPEXPORT ModelingAutotestPrint
    {
        /** The sampling method to compute deviation between two curves */
        public: enum SmartCurveDeviationMethod
        {
            SmartCurveDeviationMethodProjection/** By projection */,
            SmartCurveDeviationMethodLength/** By uniform length sampling */
        };

         /** Contains information used to compute deviation between two curves */
        public:
        struct SmartCurveDeviationData
        {
            public: /** Master curve               */NXOpen::Curve * MasterCurve;
            public: /** Reference curve            */NXOpen::Curve * ReferenceCurve;
            public: /** Method to compute deviation   */NXOpen::ModelingAutotestPrint::SmartCurveDeviationMethod Method;
            public: /** Number of points to compare  */int NumberOfSamples;
            public: /** Position tolerance           */double G0Tolerance;
            public: /** Whether to check curve direction */bool CheckDirection;
            public: /** Tangent tolerance                */double G1Tolerance;
            public: /** Curvature tolerance              */double G2Tolerance;
            public: /** Torsion tolerance                */double TorsionTolerance;
            public: /** Relative curvature tolerance     */double RelativeG2Tolerance;
            public: /** Relative torsion tolerance       */double RelativeTorsionTolerance;
            public: /** Relative curvature         */bool IsRelativeG2;
            public: /** Relative Torsion           */bool IsRelativeTorsion;
            public: /** Whether to show report     */bool ShowReport;
            public: SmartCurveDeviationData() :
                MasterCurve(),
                ReferenceCurve(),
                Method((NXOpen::ModelingAutotestPrint::SmartCurveDeviationMethod)0),
                NumberOfSamples(),
                G0Tolerance(),
                CheckDirection(),
                G1Tolerance(),
                G2Tolerance(),
                TorsionTolerance(),
                RelativeG2Tolerance(),
                RelativeTorsionTolerance(),
                IsRelativeG2(),
                IsRelativeTorsion(),
                ShowReport()
            {
            }
            /** Constructor for the SmartCurveDeviationData struct. */ 
            public: SmartCurveDeviationData(NXOpen::Curve * INIT_master_curve /** Master curve               */, 
                    NXOpen::Curve * INIT_reference_curve /** Reference curve            */, 
                    NXOpen::ModelingAutotestPrint::SmartCurveDeviationMethod INIT_method /** Method to compute deviation   */, 
                    int INIT_number_of_samples /** Number of points to compare  */, 
                    double INIT_g0_tolerance /** Position tolerance           */, 
                    bool INIT_check_direction /** Whether to check curve direction */, 
                    double INIT_g1_tolerance /** Tangent tolerance                */, 
                    double INIT_g2_tolerance /** Curvature tolerance              */, 
                    double INIT_torsion_tolerance /** Torsion tolerance                */, 
                    double INIT_relative_g2_tolerance /** Relative curvature tolerance     */, 
                    double INIT_relative_torsion_tolerance /** Relative torsion tolerance       */, 
                    bool INIT_is_relative_g2 /** Relative curvature         */, 
                    bool INIT_is_relative_torsion /** Relative Torsion           */, 
                    bool INIT_show_report /** Whether to show report     */) :
                MasterCurve(INIT_master_curve),
                ReferenceCurve(INIT_reference_curve),
                Method(INIT_method),
                NumberOfSamples(INIT_number_of_samples),
                G0Tolerance(INIT_g0_tolerance),
                CheckDirection(INIT_check_direction),
                G1Tolerance(INIT_g1_tolerance),
                G2Tolerance(INIT_g2_tolerance),
                TorsionTolerance(INIT_torsion_tolerance),
                RelativeG2Tolerance(INIT_relative_g2_tolerance),
                RelativeTorsionTolerance(INIT_relative_torsion_tolerance),
                IsRelativeG2(INIT_is_relative_g2),
                IsRelativeTorsion(INIT_is_relative_torsion),
                ShowReport(INIT_show_report)
            {
            }
        };

        private: NXOpen::DebugSession* m_owner;
        public: explicit ModelingAutotestPrint(NXOpen::DebugSession *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Print mass properties of all bodies in part  <br> License requirements : None */
        public: void PrintAllBodiesInPart
        (
            NXOpen::Part * part /** part */ 
        );
        /** Print mass properties of a face  <br> License requirements : None */
        public: void PrintFace
        (
            NXOpen::Face * face /** face */ ,
            int faceIndex /** faceindex */ 
        );
        /** Print mass properties of all faces in body  <br> License requirements : None */
        public: void PrintAllFacesInBody
        (
            NXOpen::Body * body /** body */ 
        );
        /** Update all features in work part  <br> License requirements : None */
        public: void UpdateAllFeatures
        (
        );
        /** Print geometric properties of a b-spline curve  <br> License requirements : None */
        public: void PrintBCurve
        (
            NXOpen::Curve * curve /** curve */ ,
            bool printPole /** printpole */ 
        );
        /** Print geometric properties of a b-spline curve  <br> License requirements : None */
        public: void PrintBCurve
        (
            NXOpen::Curve * curve /** curve */ ,
            bool printPole /** printpole */ ,
            bool printKnot /** printknot */ 
        );
        /** Print geometric properties of a b-spline surface  <br> License requirements : None */
        public: void PrintBSurface
        (
            NXOpen::Face * surf /** surf */ ,
            bool printPole /** printpole */ 
        );
        /** Print mass properties of a face  <br> License requirements : None */
        public: void PrintFace
        (
            NXOpen::Face * face /** face */ 
        );
        /** Print mass properties of a body  <br> License requirements : None */
        public: void PrintBody
        (
            NXOpen::Body * body /** body */ 
        );
        /** JA Print Smart Curve Deviation  <br> License requirements : None */
        public: void PrintSmartCurveDeviation
        (
            const NXOpen::ModelingAutotestPrint::SmartCurveDeviationData & data /** data */ 
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
