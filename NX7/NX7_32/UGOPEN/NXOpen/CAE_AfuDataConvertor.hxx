#ifndef NXOpen_CAE_AFUDATACONVERTOR_HXX_INCLUDED
#define NXOpen_CAE_AFUDATACONVERTOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AfuDataConvertor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AfuData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class AfuDataConvertor;
    }
    namespace CAE
    {
        class AfuManager;
    }
    namespace CAE
    {
        /** Convert data values for the AFU Data Record  <br> To obtain an instance of this class, refer to @link CAE::AfuManager CAE::AfuManager@endlink  <br> */
        class NXOPENCPPEXPORT AfuDataConvertor
        {
            /** Defines the way of FFT on AFU Data Record */
            public: enum Fft
            {
                FftForward = 1/** Forward FFT */,
                FftInverse/** Inverse FFT */
            };

            private: NXOpen::CAE::AfuManager* m_owner;
            public: explicit AfuDataConvertor(NXOpen::CAE::AfuManager *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Get the complex type of ordinate data by FFT  @return  Complex type of ordinate data after FFT  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: NXOpen::CAE::AfuData::OrdinateType GetFftComplexType
            (
                NXOpen::CAE::AfuDataConvertor::Fft fftType /** The way of FFT */,
                NXOpen::CAE::AfuData::OrdinateType inComplexType /** Complex type of ordinate data before FFT */
            );
            /** Get the values by Forward FFT.
                        The input data should be Real data on Time domain and
                        the output data will be Complex data on Frequency domain.  @return  Imaginary part of Y values of the output data  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: std::vector<double> GetFftFrequencyData
            (
                const std::vector<double> & inXValues /** X values of the input data */,
                const std::vector<double> & inYValues /** Y values of the input data */,
                std::vector<double> & xValues /** X values of the output data */,
                std::vector<double> & yValues /** Real part of Y values of the output data */
            );
            /** Get the values by Inverse FFT.
                        The input data should be Complex data on Frequency domain
                        and the output data will be Real data on Time domain.  @return  Y values of the output data  <br> License requirements : nx_ftk ("NX Advanced Graphing") */
            public: std::vector<double> GetFftTimeData
            (
                const std::vector<double> & inXValues /** X values of the input data */,
                const std::vector<double> & inYValues /** Real part of Y values of the input data */,
                const std::vector<double> & inZValues /** Imaginary part of Y values of the input data */,
                std::vector<double> & xValues /** X values of the output data */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
