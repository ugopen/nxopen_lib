#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_PARALLELSPACINGBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_PARALLELSPACINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_ParallelSpacingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_ParallelSpacingBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class ParallelSpacingBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _ParallelSpacingBuilderBuilder;
            /** Represents the parallel spacing for the @link GeometricAnalysis::SectionAnalysis::ParallelPlanesBuilder GeometricAnalysis::SectionAnalysis::ParallelPlanesBuilder@endlink . */
            class NXOPENCPPEXPORT ParallelSpacingBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
            {
                private: friend class  _ParallelSpacingBuilderBuilder;
                protected: ParallelSpacingBuilder();
                /**Returns  the flag to enable number of sections in direction 1  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool IsSectionNumberSpecified1
                (
                );
                /**Sets  the flag to enable number of sections in direction 1  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSectionNumberSpecified1
                (
                    bool isSectionNumberSpecified /** issectionnumberspecified */ 
                );
                /**Returns  the flag to enable number of sections in direction 2  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool IsSectionNumberSpecified2
                (
                );
                /**Sets  the flag to enable number of sections in direction 2  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSectionNumberSpecified2
                (
                    bool isSectionNumberSpecified /** issectionnumberspecified */ 
                );
                /**Returns  the flag to enable number of sections in direction 3  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool IsSectionNumberSpecified3
                (
                );
                /**Sets  the flag to enable number of sections in direction 3  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSectionNumberSpecified3
                (
                    bool isSectionNumberSpecified /** issectionnumberspecified */ 
                );
                /**Returns  the number of sections in direction 1  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: int SectionNumber1
                (
                );
                /**Sets  the number of sections in direction 1  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSectionNumber1
                (
                    int sectionNumber1 /** sectionnumber1 */ 
                );
                /**Returns  the number of sections in direction 2  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: int SectionNumber2
                (
                );
                /**Sets  the number of sections in direction 2  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSectionNumber2
                (
                    int sectionNumber2 /** sectionnumber2 */ 
                );
                /**Returns  the number of sections in direction 3  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: int SectionNumber3
                (
                );
                /**Sets  the number of sections in direction 3  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSectionNumber3
                (
                    int sectionNumber3 /** sectionnumber3 */ 
                );
                /**Returns  the interval of sections in direction 1  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: double Interval1
                (
                );
                /**Sets  the interval of sections in direction 1  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetInterval1
                (
                    double interval1 /** interval1 */ 
                );
                /**Returns  the interval of sections in direction 2  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: double Interval2
                (
                );
                /**Sets  the interval of sections in direction 2  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetInterval2
                (
                    double interval2 /** interval2 */ 
                );
                /**Returns  the interval of sections in direction 3  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: double Interval3
                (
                );
                /**Sets  the interval of sections in direction 3  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetInterval3
                (
                    double interval3 /** interval3 */ 
                );
                /** Returns true if the inputs to the component are sufficient for 
                            commit to be called.  For example, if the component requires
                            you to set some property, this method will return false if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
