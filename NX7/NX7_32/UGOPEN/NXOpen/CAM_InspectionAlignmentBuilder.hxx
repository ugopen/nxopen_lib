#ifndef NXOpen_CAM_INSPECTIONALIGNMENTBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONALIGNMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionAlignmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionAlignmentBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionAlignmentBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class CoordinateSystem;
    class SelectNXObject;
    namespace CAM
    {
        class _InspectionAlignmentBuilderBuilder;
        /** Represents a CMM Inspection Alignment builder  <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionAlignmentBuilder CAM::InspectionOperationCollection::CreateInspectionAlignmentBuilder@endlink  <br> */
        class NXOPENCPPEXPORT InspectionAlignmentBuilder : public CAM::OperationBuilder
        {
            /** Alignment Operation Type */
            public: enum AlignTypeEnum
            {
                AlignTypeEnumSetPCStoMCS/** Set the PCS to Machine CS */,
                AlignTypeEnumSetPCStoCSYS/** Set the PCS to a NX Csys */,
                AlignTypeEnumTranslatePCSOrigin/** Translate the PCS */,
                AlignTypeEnumRotatePCS/** Rotate the PCS */,
                AlignTypeEnumDefinePCSfromDatums/** Define the PCS from datums */,
                AlignTypeEnumIterate/** Iterate a set of features for convergence */,
                AlignTypeEnumDefinePCSfromActualDeviations/** Locate PCS from Features */,
                AlignTypeEnumSavePCS/** Save current PCS */,
                AlignTypeEnumRecallPCS/** Recall previously saved PCS */
            };

            /** PCS state to save, either Actual or nominal */
            public: enum SaveStateEnum
            {
                SaveStateEnumActual/** Save Actual PCS */,
                SaveStateEnumNominal/** Save Nominal PCS */
            };

            /** PCS state to recall, either internal or external */
            public: enum RecallStateEnum
            {
                RecallStateEnumInternal/** Recall internal PCS */,
                RecallStateEnumExternal/** Recall external PCS */
            };

            /** Iterate deviation type */
            public: enum IterDevTypeEnum
            {
                IterDevTypeEnumAbsolute/** Absolute deviation */,
                IterDevTypeEnumIncremental/** Incremental deviation */
            };

            /** PCS Translation method in X direction */
            public: enum XtMethodEnum
            {
                XtMethodEnumDistance/** Translate a distance */,
                XtMethodEnumDatum/** Translate by Datum */,
                XtMethodEnumNominalFeature/** Translate by Nominal Feature */,
                XtMethodEnumMeasuredFeature/** Translate by Measured Feature */
            };

            /** PCS Translation method in Y direction */
            public: enum YtMethodEnum
            {
                YtMethodEnumDistance/** Translate a distance */,
                YtMethodEnumDatum/** Translate by Datum */,
                YtMethodEnumNominalFeature/** Translate by Nominal Feature */,
                YtMethodEnumMeasuredFeature/** Translate by Measured Feature */
            };

            /** PCS Translation method in Z direction */
            public: enum ZtMethodEnum
            {
                ZtMethodEnumDistance/** Translate a distance */,
                ZtMethodEnumDatum/** Translate by Datum */,
                ZtMethodEnumNominalFeature/** Translate by Nominal Feature */,
                ZtMethodEnumMeasuredFeature/** Translate by Measured Feature */
            };

            /** PCS Rotation method */
            public: enum RotMethodEnum
            {
                RotMethodEnumAngle/** Rotate by absolute angle */,
                RotMethodEnumDatum/** Rotate by Datum */,
                RotMethodEnumNominalFeature/** Rotate by Nominal Feature */,
                RotMethodEnumMeasuredFeature/** Rotate by Actual Feature */
            };

            /** PCS Axis to Rotate about */
            public: enum RotAxisEnum
            {
                RotAxisEnumXaxis/** Rotate about X axis */,
                RotAxisEnumYaxis/** Rotate about Y axis */,
                RotAxisEnumZaxis/** Rotate about Z axis */
            };

            /** Direction to rotate about */
            public: enum RotDirEnum
            {
                RotDirEnumPxdir/** Rotate in the positive X direction */,
                RotDirEnumPydir/** Rotate in the positive Y direction */,
                RotDirEnumPzdir/** Rotate in the positive Z direction */,
                RotDirEnumMxdir/** Rotate in the negitive X direction */,
                RotDirEnumMydir/** Rotate in the negitive Y direction */,
                RotDirEnumMzdir/** Rotate in the negitive Z direction */
            };

            private: friend class  _InspectionAlignmentBuilderBuilder;
            protected: InspectionAlignmentBuilder();
            /**Returns  the alignment type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::AlignTypeEnum AlignType
            (
            );
            /**Sets  the alignment type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignType
            (
                NXOpen::CAM::InspectionAlignmentBuilder::AlignTypeEnum alignType /** aligntype */ 
            );
            /**Returns  the csys pick  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CsysPick
            (
            );
            /**Sets  the csys pick  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysPick
            (
                NXOpen::CoordinateSystem * csysPick /** csyspick */ 
            );
            /**Returns  the save pcs label  <br> License requirements : None */
            public: NXString SavePcsLabel
            (
            );
            /**Sets  the save pcs label  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSavePcsLabel
            (
                const NXString & savePcsLabel /** savepcslabel */ 
            );
            /**Returns  the save state  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::SaveStateEnum SaveState
            (
            );
            /**Sets  the save state  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSaveState
            (
                NXOpen::CAM::InspectionAlignmentBuilder::SaveStateEnum saveState /** savestate */ 
            );
            /**Returns  the save device id  <br> License requirements : None */
            public: NXString SaveDid
            (
            );
            /**Sets  the save device id  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSaveDid
            (
                const NXString & saveDid /** savedid */ 
            );
            /**Returns  the recall state  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RecallStateEnum RecallState
            (
            );
            /**Sets  the recall state  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallState
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RecallStateEnum recallState /** recallstate */ 
            );
            /**Returns  the recall internal name  <br> License requirements : None */
            public: NXString RecallIntName
            (
            );
            /**Sets  the recall internal name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallIntName
            (
                const NXString & recallIntName /** recallintname */ 
            );
            /**Returns  the recall external name  <br> License requirements : None */
            public: NXString RecallExtName
            (
            );
            /**Sets  the recall external name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallExtName
            (
                const NXString & recallExtName /** recallextname */ 
            );
            /**Returns  the recall csys  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * RecallCsys
            (
            );
            /**Sets  the recall csys  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallCsys
            (
                NXOpen::CoordinateSystem * recallCsys /** recallcsys */ 
            );
            /**Returns  the recall device id  <br> License requirements : None */
            public: NXString RecallDid
            (
            );
            /**Sets  the recall device id  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRecallDid
            (
                const NXString & recallDid /** recalldid */ 
            );
            /**Returns  the locate xtrans  <br> License requirements : None */
            public: bool LocateXtrans
            (
            );
            /**Sets  the locate xtrans  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateXtrans
            (
                bool locateXtrans /** locatextrans */ 
            );
            /**Returns  the locate ytrans  <br> License requirements : None */
            public: bool LocateYtrans
            (
            );
            /**Sets  the locate ytrans  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateYtrans
            (
                bool locateYtrans /** locateytrans */ 
            );
            /**Returns  the locate ztrans  <br> License requirements : None */
            public: bool LocateZtrans
            (
            );
            /**Sets  the locate ztrans  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateZtrans
            (
                bool locateZtrans /** locateztrans */ 
            );
            /**Returns  the locate xrot  <br> License requirements : None */
            public: bool LocateXrot
            (
            );
            /**Sets  the locate xrot  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateXrot
            (
                bool locateXrot /** locatexrot */ 
            );
            /**Returns  the locate yrot  <br> License requirements : None */
            public: bool LocateYrot
            (
            );
            /**Sets  the locate yrot  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateYrot
            (
                bool locateYrot /** locateyrot */ 
            );
            /**Returns  the locate zrot  <br> License requirements : None */
            public: bool LocateZrot
            (
            );
            /**Sets  the locate zrot  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetLocateZrot
            (
                bool locateZrot /** locatezrot */ 
            );
            /**Returns  the locate avail select  <br> License requirements : None */
            public: NXOpen::SelectNXObject * LocateAvailSelect
            (
            );
            /**Returns  the iter group name  <br> License requirements : None */
            public: NXString IterGroupName
            (
            );
            /**Sets  the iter group name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterGroupName
            (
                const NXString & iterGroupName /** itergroupname */ 
            );
            /**Returns  the fail group name  <br> License requirements : None */
            public: NXString FailGroupName
            (
            );
            /**Sets  the fail group name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetFailGroupName
            (
                const NXString & failGroupName /** failgroupname */ 
            );
            /**Returns  the iter converge variable  <br> License requirements : None */
            public: NXString IterConvergeVar
            (
            );
            /**Sets  the iter converge variable  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterConvergeVar
            (
                const NXString & iterConvergeVar /** iterconvergevar */ 
            );
            /**Returns  the iter max iterations <br> License requirements : None */
            public: int IterMax
            (
            );
            /**Sets  the iter max iterations <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterMax
            (
                int iterMax /** itermax */ 
            );
            /**Returns  the iter deviation  <br> License requirements : None */
            public: double IterDev
            (
            );
            /**Sets  the iter deviation  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterDev
            (
                double iterDev /** iterdev */ 
            );
            /**Returns  the iter deviation type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::IterDevTypeEnum IterDevType
            (
            );
            /**Sets  the iter deviation type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterDevType
            (
                NXOpen::CAM::InspectionAlignmentBuilder::IterDevTypeEnum iterDevType /** iterdevtype */ 
            );
            /**Returns  the iter avail select  <br> License requirements : None */
            public: NXOpen::SelectNXObject * IterAvailSelect
            (
            );
            /**Returns  the pri dat letter  <br> License requirements : None */
            public: NXString PriDatLetter
            (
            );
            /**Sets  the pri dat letter  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriDatLetter
            (
                const NXString & priDatLetter /** pridatletter */ 
            );
            /**Returns  the pri xorigin  <br> License requirements : None */
            public: bool PriXorigin
            (
            );
            /**Sets  the pri xorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriXorigin
            (
                bool priXorigin /** prixorigin */ 
            );
            /**Returns  the pri yorigin  <br> License requirements : None */
            public: bool PriYorigin
            (
            );
            /**Sets  the pri yorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriYorigin
            (
                bool priYorigin /** priyorigin */ 
            );
            /**Returns  the pri zorigin  <br> License requirements : None */
            public: bool PriZorigin
            (
            );
            /**Sets  the pri zorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriZorigin
            (
                bool priZorigin /** prizorigin */ 
            );
            /**Returns  the pri xdirection  <br> License requirements : None */
            public: bool PriXdirection
            (
            );
            /**Sets  the pri xdirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriXdirection
            (
                bool priXdirection /** prixdirection */ 
            );
            /**Returns  the pri ydirection  <br> License requirements : None */
            public: bool PriYdirection
            (
            );
            /**Sets  the pri ydirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriYdirection
            (
                bool priYdirection /** priydirection */ 
            );
            /**Returns  the pri zdirection  <br> License requirements : None */
            public: bool PriZdirection
            (
            );
            /**Sets  the pri zdirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPriZdirection
            (
                bool priZdirection /** prizdirection */ 
            );
            /**Returns  the sec dat letter  <br> License requirements : None */
            public: NXString SecDatLetter
            (
            );
            /**Sets  the sec dat letter  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecDatLetter
            (
                const NXString & secDatLetter /** secdatletter */ 
            );
            /**Returns  the sec xorigin  <br> License requirements : None */
            public: bool SecXorigin
            (
            );
            /**Sets  the sec xorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecXorigin
            (
                bool secXorigin /** secxorigin */ 
            );
            /**Returns  the sec yorigin  <br> License requirements : None */
            public: bool SecYorigin
            (
            );
            /**Sets  the sec yorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecYorigin
            (
                bool secYorigin /** secyorigin */ 
            );
            /**Returns  the sec zorigin  <br> License requirements : None */
            public: bool SecZorigin
            (
            );
            /**Sets  the sec zorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecZorigin
            (
                bool secZorigin /** seczorigin */ 
            );
            /**Returns  the sec xdirection  <br> License requirements : None */
            public: bool SecXdirection
            (
            );
            /**Sets  the sec xdirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecXdirection
            (
                bool secXdirection /** secxdirection */ 
            );
            /**Returns  the sec ydirection  <br> License requirements : None */
            public: bool SecYdirection
            (
            );
            /**Sets  the sec ydirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecYdirection
            (
                bool secYdirection /** secydirection */ 
            );
            /**Returns  the sec zdirection  <br> License requirements : None */
            public: bool SecZdirection
            (
            );
            /**Sets  the sec zdirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecZdirection
            (
                bool secZdirection /** seczdirection */ 
            );
            /**Returns  the ter dat letter  <br> License requirements : None */
            public: NXString TerDatLetter
            (
            );
            /**Sets  the ter dat letter  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerDatLetter
            (
                const NXString & terDatLetter /** terdatletter */ 
            );
            /**Returns  the ter xorigin  <br> License requirements : None */
            public: bool TerXorigin
            (
            );
            /**Sets  the ter xorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerXorigin
            (
                bool terXorigin /** terxorigin */ 
            );
            /**Returns  the ter yorigin  <br> License requirements : None */
            public: bool TerYorigin
            (
            );
            /**Sets  the ter yorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerYorigin
            (
                bool terYorigin /** teryorigin */ 
            );
            /**Returns  the ter zorigin  <br> License requirements : None */
            public: bool TerZorigin
            (
            );
            /**Sets  the ter zorigin  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerZorigin
            (
                bool terZorigin /** terzorigin */ 
            );
            /**Returns  the ter xdirection  <br> License requirements : None */
            public: bool TerXdirection
            (
            );
            /**Sets  the ter xdirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerXdirection
            (
                bool terXdirection /** terxdirection */ 
            );
            /**Returns  the ter ydirection  <br> License requirements : None */
            public: bool TerYdirection
            (
            );
            /**Sets  the ter ydirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerYdirection
            (
                bool terYdirection /** terydirection */ 
            );
            /**Returns  the ter zdirection  <br> License requirements : None */
            public: bool TerZdirection
            (
            );
            /**Sets  the ter zdirection  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTerZdirection
            (
                bool terZdirection /** terzdirection */ 
            );
            /**Returns  the xt method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::XtMethodEnum XtMethod
            (
            );
            /**Sets  the xt method  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetXtMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::XtMethodEnum xtMethod /** xtmethod */ 
            );
            /**Returns  the xt datum letter  <br> License requirements : None */
            public: NXString XtDatumLetter
            (
            );
            /**Sets  the xt datum letter  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetXtDatumLetter
            (
                const NXString & xtDatumLetter /** xtdatumletter */ 
            );
            /**Returns  the xt distance  <br> License requirements : None */
            public: double XtDistance
            (
            );
            /**Sets  the xt distance  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetXtDistance
            (
                double xtDistance /** xtdistance */ 
            );
            /**Returns  the xt feature select  <br> License requirements : None */
            public: NXOpen::SelectNXObject * XtFeatureSelect
            (
            );
            /**Returns  the xt feature  <br> License requirements : None */
            public: NXString XtFeature
            (
            );
            /**Sets  the xt feature  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetXtFeature
            (
                const NXString & xtFeature /** xtfeature */ 
            );
            /**Returns  the yt method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::YtMethodEnum YtMethod
            (
            );
            /**Sets  the yt method  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetYtMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::YtMethodEnum ytMethod /** ytmethod */ 
            );
            /**Returns  the yt datum letter  <br> License requirements : None */
            public: NXString YtDatumLetter
            (
            );
            /**Sets  the yt datum letter  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetYtDatumLetter
            (
                const NXString & ytDatumLetter /** ytdatumletter */ 
            );
            /**Returns  the yt distance  <br> License requirements : None */
            public: double YtDistance
            (
            );
            /**Sets  the yt distance  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetYtDistance
            (
                double ytDistance /** ytdistance */ 
            );
            /**Returns  the yt feature select  <br> License requirements : None */
            public: NXOpen::SelectNXObject * YtFeatureSelect
            (
            );
            /**Returns  the yt feature  <br> License requirements : None */
            public: NXString YtFeature
            (
            );
            /**Sets  the yt feature  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetYtFeature
            (
                const NXString & ytFeature /** ytfeature */ 
            );
            /**Returns  the zt method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::ZtMethodEnum ZtMethod
            (
            );
            /**Sets  the zt method  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetZtMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::ZtMethodEnum ztMethod /** ztmethod */ 
            );
            /**Returns  the zt datum letter  <br> License requirements : None */
            public: NXString ZtDatumLetter
            (
            );
            /**Sets  the zt datum letter  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetZtDatumLetter
            (
                const NXString & ztDatumLetter /** ztdatumletter */ 
            );
            /**Returns  the zt distance  <br> License requirements : None */
            public: double ZtDistance
            (
            );
            /**Sets  the zt distance  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetZtDistance
            (
                double ztDistance /** ztdistance */ 
            );
            /**Returns  the zt feature select  <br> License requirements : None */
            public: NXOpen::SelectNXObject * ZtFeatureSelect
            (
            );
            /**Returns  the zt feature  <br> License requirements : None */
            public: NXString ZtFeature
            (
            );
            /**Sets  the zt feature  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetZtFeature
            (
                const NXString & ztFeature /** ztfeature */ 
            );
            /**Returns  the rot method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotMethodEnum RotMethod
            (
            );
            /**Sets  the rot method  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotMethod
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotMethodEnum rotMethod /** rotmethod */ 
            );
            /**Returns  the rot axis  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotAxisEnum RotAxis
            (
            );
            /**Sets  the rot axis  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotAxis
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotAxisEnum rotAxis /** rotaxis */ 
            );
            /**Returns  the rot dir  <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentBuilder::RotDirEnum RotDir
            (
            );
            /**Sets  the rot dir  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotDir
            (
                NXOpen::CAM::InspectionAlignmentBuilder::RotDirEnum rotDir /** rotdir */ 
            );
            /**Returns  the rot datum letter  <br> License requirements : None */
            public: NXString RotDatumLetter
            (
            );
            /**Sets  the rot datum letter  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotDatumLetter
            (
                const NXString & rotDatumLetter /** rotdatumletter */ 
            );
            /**Returns  the rot angle  <br> License requirements : None */
            public: double RotAngle
            (
            );
            /**Sets  the rot angle  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotAngle
            (
                double rotAngle /** rotangle */ 
            );
            /**Returns  the rot feature select  <br> License requirements : None */
            public: NXOpen::SelectNXObject * RotFeatureSelect
            (
            );
            /**Returns  the rot feature  <br> License requirements : None */
            public: NXString RotFeature
            (
            );
            /**Sets  the rot feature  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRotFeature
            (
                const NXString & rotFeature /** rotfeature */ 
            );
            /**Returns  the pcs name  <br> License requirements : None */
            public: NXString PcsName
            (
            );
            /**Sets  the pcs name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPcsName
            (
                const NXString & pcsName /** pcsname */ 
            );
            /**Returns  the align op name  <br> License requirements : None */
            public: NXString AlignOpName
            (
            );
            /**Sets  the align op name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignOpName
            (
                const NXString & alignOpName /** alignopname */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
