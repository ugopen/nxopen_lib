#ifndef NXOpen_CAE_RESPONSESIMULATION_INITIALCONDITIONS_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_INITIALCONDITIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_InitialConditions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class InitialConditions;
        }
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class ModeInitialData;
        }
    }
    class NXObject;
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class _InitialConditionsBuilder;
            /** Represents the initial condition setting of transient event */
            class NXOPENCPPEXPORT InitialConditions : public NXObject
            {
                /** Specifies the method to define initial condition */
                public: enum Type
                {
                    TypeQuasiStatic/** quasi static */ ,
                    TypeZero/** zero */ ,
                    TypeUserDefined/** user defined */ 
                };

                /** Specifies how to define initial condition for the user customization */
                public: enum EntryMethod
                {
                    EntryMethodManualData/** manual data */ ,
                    EntryMethodFromEef/** from eef */ 
                };

                private: friend class  _InitialConditionsBuilder;
                protected: InitialConditions();
                /**Returns  the definition method  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::InitialConditions::Type InitialConditionType
                (
                );
                /**Sets  the definition method  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetInitialConditionType
                (
                    NXOpen::CAE::ResponseSimulation::InitialConditions::Type initialConditionType /** initial condition type */ 
                );
                /**Returns  the entry method of user customization  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::InitialConditions::EntryMethod EntryMethodOption
                (
                );
                /**Sets  the entry method of user customization  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetEntryMethodOption
                (
                    NXOpen::CAE::ResponseSimulation::InitialConditions::EntryMethod entryMethod /** entry method */ 
                );
                /**Returns  an existing EEF file containing initial condition. Only available when the 
                        initial condition type is @link CAE::ResponseSimulation::InitialConditions::TypeUserDefined CAE::ResponseSimulation::InitialConditions::TypeUserDefined@endlink 
                        and the entry method is @link CAE::ResponseSimulation::InitialConditions::EntryMethodFromEef CAE::ResponseSimulation::InitialConditions::EntryMethodFromEef@endlink   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXString ExistingEefFile
                (
                );
                /**Sets  an existing EEF file containing initial condition. Only available when the 
                        initial condition type is @link CAE::ResponseSimulation::InitialConditions::TypeUserDefined CAE::ResponseSimulation::InitialConditions::TypeUserDefined@endlink 
                        and the entry method is @link CAE::ResponseSimulation::InitialConditions::EntryMethodFromEef CAE::ResponseSimulation::InitialConditions::EntryMethodFromEef@endlink   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetExistingEefFile
                (
                    const NXString & eefFile /** eef file */ 
                );
                /** Returns customized initial data of normal mode by mode id. Only available when initial condition
                        type is @link CAE::ResponseSimulation::InitialConditions::TypeUserDefined CAE::ResponseSimulation::InitialConditions::TypeUserDefined@endlink   @return   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::ModeInitialData * GetCustomizedInitialDataById
                (
                    int modeId /** mode id */ 
                );
                /** Returns customized initial data of all normal modes. Only available when initial condition type is 
                        @link CAE::ResponseSimulation::InitialConditions::TypeUserDefined CAE::ResponseSimulation::InitialConditions::TypeUserDefined@endlink   @return   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: std::vector<NXOpen::CAE::ResponseSimulation::ModeInitialData *> GetAllCustomizedInitialData
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
