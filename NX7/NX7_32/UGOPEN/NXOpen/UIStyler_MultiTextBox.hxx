#ifndef NXOpen_UISTYLER_MULTITEXTBOX_HXX_INCLUDED
#define NXOpen_UISTYLER_MULTITEXTBOX_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     UIStyler_MultiTextBox.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/UIStyler_StylerItem.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace UIStyler
    {
        class MultiTextBox;
    }
    namespace UIStyler
    {
        class StylerItem;
    }
    namespace UIStyler
    {
        /** Represents a MultiTextBox for UI Styler. */
        class NXOPENUICPPEXPORT MultiTextBox : public UIStyler::StylerItem
        {
            public: explicit MultiTextBox(void *ptr);
            /**Specifies descriptive text to display for the dialog item. It should describe the dialog item's 
                intended use. <br> License requirements : None */
            public: void SetLabel
            (
                const NXString & strLabel /**new label string   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies the text for this dialog item. It can be programmatically set by APIs supported in 
                different laguages,or interactively entered by the user.  <br> License requirements : None */
            public: void SetItemValues
            (
                std::vector<NXString> & values /**array of strings to set the values in multi 
                                                select List  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Specifies the text for this dialog item. It can be programmatically get by APIs.  @return  to get array of strings <br> License requirements : None */
            public: std::vector<NXString> GetItemValues
            (
            );
            /**Sets the sensitivity of the dialog item.  <br> License requirements : None */
            public: void SetSensitivity
            (
                bool type /** to set senstivity of dialog */
            );
            /**Returns the sensitivity of the dialog item.  <br> License requirements : None */
            public: bool Sensitivity
            (
            );
            /**Sets  the visibility of the dialog item  <br> License requirements : None */
            public: void SetVisibility
            (
                bool type /**to set visibility of dialog */
            );
            /**Returns  the visibility of the dialog item  <br> License requirements : None */
            public: bool Visibility
            (
            );
            /**Indicates that this dialog item is receiving keyboard focus. <br> License requirements : None */
            public: void SetFocus
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
