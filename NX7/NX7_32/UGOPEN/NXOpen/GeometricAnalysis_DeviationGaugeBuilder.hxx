#ifndef NXOpen_GEOMETRICANALYSIS_DEVIATIONGAUGEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_DEVIATIONGAUGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_DeviationGaugeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Features_GeometricConstraintDataManager.hxx>
#include <NXOpen/GeometricAnalysis_DeviationGaugeBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveRangeBuilder.hxx>
#include <NXOpen/GeometricUtilities_SurfaceRangeBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class DeviationGaugeBuilder;
    }
    class Builder;
    class Direction;
    namespace Features
    {
        class GeometricConstraintDataManager;
    }
    namespace GeometricUtilities
    {
        class CurveRangeBuilder;
    }
    namespace GeometricUtilities
    {
        class SurfaceRangeBuilder;
    }
    class Plane;
    class SelectNXObjectList;
    namespace GeometricAnalysis
    {
        class _DeviationGaugeBuilderBuilder;
        /** DeviationGaugeBuilder class   <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisObjectCollection::CreateDeviationGaugeBuilder GeometricAnalysis::AnalysisObjectCollection::CreateDeviationGaugeBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ColorPlotType </td> <td> 
         
        Blend </td> </tr> 

        <tr><td> 
         
        CurveRangeControl.AnchorPosition </td> <td> 
         
        Start </td> </tr> 

        <tr><td> 
         
        DeviationIntervals </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        HasAbsoluteColorPlot </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        HasAdditionalValuesLabel </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        HasMaximumValueLabel </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        HasMinimumValueLabel </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        InnerTolerance </td> <td> 
         
        0.1 </td> </tr> 

        <tr><td> 
         
        IsLabelDisplayed </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsMarkerDisplayed </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsNeedlePlotDisplayed </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MaxCheckingAngle </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        MaxCheckingDistance </td> <td> 
         
        1 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        MeasurementMethod </td> <td> 
         
        ThreeDim </td> </tr> 

        <tr><td> 
         
        MeasurementSamples </td> <td> 
         
        20 </td> </tr> 

        <tr><td> 
         
        MinMaxOption </td> <td> 
         
        Minmax </td> </tr> 

        <tr><td> 
         
        NeedleScale </td> <td> 
         
        1.0 </td> </tr> 

        <tr><td> 
         
        NegativeInnerTolerance </td> <td> 
         
        -0.001 </td> </tr> 

        <tr><td> 
         
        NegativeOuterTolerance </td> <td> 
         
        -0.001 </td> </tr> 

        <tr><td> 
         
        OuterTolerance </td> <td> 
         
        0.1 </td> </tr> 

        <tr><td> 
         
        PositiveInnerTolerance </td> <td> 
         
        0.001 </td> </tr> 

        <tr><td> 
         
        PositiveOuterTolerance </td> <td> 
         
        0.001 </td> </tr> 

        <tr><td> 
         
        SpatialResolution </td> <td> 
         
        0.1 </td> </tr> 

        <tr><td> 
         
        SurfaceRangeControl.AnchorPosition </td> <td> 
         
        Vertex1 </td> </tr> 

        <tr><td> 
         
        XyzDirection </td> <td> 
         
        X </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT DeviationGaugeBuilder : public Builder
        {
            /** This enum represents the Deviation Gauge  Analysis Object evaluation types */
            public: enum MeasurementMethodType
            {
                MeasurementMethodTypeThreeDim/** 3D  */,
                MeasurementMethodTypeXyzDirection/** XYZ direction  */,
                MeasurementMethodTypeWorkView/** Work view     */,
                MeasurementMethodTypeVectorComponent/** Vector component    */,
                MeasurementMethodTypePlane/** Plane   */,
                MeasurementMethodTypeAlongVector/** Along vector   */
            };

            /** This enum represents the Deviation Gauge Analysis Object X, Y, Z direction options */
            public: enum XyzDirectionType
            {
                XyzDirectionTypeX/** X direction */,
                XyzDirectionTypeY/** Y direction */,
                XyzDirectionTypeZ/** Z direction */
            };

            /** This enum represents the Deviation Gauge  Analysis Object additional values label type */
            public: enum AdditionalValuesLabelType
            {
                AdditionalValuesLabelTypeUserDefined/**  User Defined  */,
                AdditionalValuesLabelTypeIntermediate/** Intermediate  */,
                AdditionalValuesLabelTypeAll/** All  */,
                AdditionalValuesLabelTypeNone/** None  */
            };

            /** This enum represents the Deviation Gauge  Analysis Object min max type */
            public: enum MinMaxType
            {
                MinMaxTypeMinmax/** Minimum/Maximum      */,
                MinMaxTypeMinimum/** Minimum  */,
                MinMaxTypeMaximum/** Maximum  */,
                MinMaxTypeNone/** None  */
            };

            /** This enum represents the Deviation Gauge  Analysis Object color plot types */
            public: enum ColorPlotTypes
            {
                ColorPlotTypesBlend/**  Blend */,
                ColorPlotTypesStepped/**  Stepped */,
                ColorPlotTypesNone/**  None  */
            };

            private: friend class  _DeviationGaugeBuilderBuilder;
            protected: DeviationGaugeBuilder();
            /** Adds dynamic points to the Deviation Gauge.  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void AddDynamicPoints
            (
            );
            /**Returns  the target object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectNXObjectList * TargetObjects
            (
            );
            /**Returns  the reference object  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectNXObjectList * ReferenceObjects
            (
            );
            /**Returns  the measurement method  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricAnalysis::DeviationGaugeBuilder::MeasurementMethodType MeasurementMethod
            (
            );
            /**Sets  the measurement method  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMeasurementMethod
            (
                NXOpen::GeometricAnalysis::DeviationGaugeBuilder::MeasurementMethodType measurementMethod /** measurementmethod */ 
            );
            /**Returns  the xyz direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricAnalysis::DeviationGaugeBuilder::XyzDirectionType XyzDirection
            (
            );
            /**Sets  the xyz direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetXyzDirection
            (
                NXOpen::GeometricAnalysis::DeviationGaugeBuilder::XyzDirectionType xyzDirection /** xyzdirection */ 
            );
            /**Returns  the direction vector. Not used if the measurement method is ThreeDim or Plane  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Direction * VectorComponentDirection
            (
            );
            /**Sets  the direction vector. Not used if the measurement method is ThreeDim or Plane  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetVectorComponentDirection
            (
                NXOpen::Direction * vectorComponentDirection /** vectorcomponentdirection */ 
            );
            /**Returns  the plane for measurement direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the plane for measurement direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the maximum checking distance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double MaxCheckingDistance
            (
            );
            /**Sets  the maximum checking distance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMaxCheckingDistance
            (
                double maxCheckingDistance /** maxcheckingdistance */ 
            );
            /**Returns  the maximum checking angle  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double MaxCheckingAngle
            (
            );
            /**Sets  the maximum checking angle  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMaxCheckingAngle
            (
                double maxCheckingAngle /** maxcheckingangle */ 
            );
            /**Returns  the number of measurement samples  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int MeasurementSamples
            (
            );
            /**Sets  the number of measurement samples  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMeasurementSamples
            (
                int measurementSamples /** measurementsamples */ 
            );
            /**Returns  the spatial resolution  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double SpatialResolution
            (
            );
            /**Sets  the spatial resolution  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSpatialResolution
            (
                double spatialResolution /** spatialresolution */ 
            );
            /**Returns   a value indicating whether to display label    <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool IsLabelDisplayed
            (
            );
            /**Sets   a value indicating whether to display label    <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetLabelDisplayed
            (
                bool labelDisplayed /** labeldisplayed */ 
            );
            /**Returns  a value indicating whether to display needle plot   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool IsNeedlePlotDisplayed
            (
            );
            /**Sets  a value indicating whether to display needle plot   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetNeedlePlotDisplayed
            (
                bool isNeedlePlotDisplayed /** isneedleplotdisplayed */ 
            );
            /**Returns  a value indicating whether to display marker   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool IsMarkerDisplayed
            (
            );
            /**Sets  a value indicating whether to display marker   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMarkerDisplayed
            (
                bool isMarkerDisplayed /** ismarkerdisplayed */ 
            );
            /**Returns  a value indicating whether to display color map   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool IsColorMapDisplayed
            (
            );
            /**Sets  a value indicating whether to display color map   <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetColorMapDisplayed
            (
                bool isColorMapDisplayed /** iscolormapdisplayed */ 
            );
            /**Returns  a value indicating whether to display minimum value label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool HasMinimumValueLabel
            (
            );
            /**Sets  a value indicating whether to display minimum value label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetHasMinimumValueLabel
            (
                bool minimumValueLabel /** minimumvaluelabel */ 
            );
            /**Returns  a value indicating whether to display maximum value label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool HasMaximumValueLabel
            (
            );
            /**Sets  a value indicating whether to display maximum value label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetHasMaximumValueLabel
            (
                bool maximumValueLabel /** maximumvaluelabel */ 
            );
            /**Returns  a value indicating whether to display inner tolerance label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool HasInnerToleranceLabel
            (
            );
            /**Sets  a value indicating whether to display inner tolerance label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetHasInnerToleranceLabel
            (
                bool innerToleranceLabel /** innertolerancelabel */ 
            );
            /**Returns  a value indicating whether to display cross_curve deviation label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool HasCrossCurveDeviationLabel
            (
            );
            /**Sets  a value indicating whether to display cross_curve deviation label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetHasCrossCurveDeviationLabel
            (
                bool crossCurveDeviationLabel /** crosscurvedeviationlabel */ 
            );
            /**Returns  a value indicating whether to add additional values label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricAnalysis::DeviationGaugeBuilder::AdditionalValuesLabelType HasAdditionalValuesLabel
            (
            );
            /**Sets  a value indicating whether to add additional values label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetHasAdditionalValuesLabel
            (
                NXOpen::GeometricAnalysis::DeviationGaugeBuilder::AdditionalValuesLabelType additionalValuesLabel /** additionalvalueslabel */ 
            );
            /**Returns  the number of deviation intervals  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: int DeviationIntervals
            (
            );
            /**Sets  the number of deviation intervals  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetDeviationIntervals
            (
                int deviationIntervals /** deviationintervals */ 
            );
            /**Returns  a value indicating whether to use automatic scale factor  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool SuggestScaleFactor
            (
            );
            /**Sets  a value indicating whether to use automatic scale factor  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSuggestScaleFactor
            (
                bool suggestScaleFactor /** suggestscalefactor */ 
            );
            /**Returns  the needle scale  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double NeedleScale
            (
            );
            /**Sets  the needle scale  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetNeedleScale
            (
                double needleScale /** needlescale */ 
            );
            /**Returns  the min_max type  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricAnalysis::DeviationGaugeBuilder::MinMaxType MinMaxOption
            (
            );
            /**Sets  the min_max type  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMinMaxOption
            (
                NXOpen::GeometricAnalysis::DeviationGaugeBuilder::MinMaxType minMax /** minmax */ 
            );
            /**Returns  a value indicating whether to reverse the direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool IsDirectionReversed
            (
            );
            /**Sets  a value indicating whether to reverse the direction  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetDirectionReversed
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  a value indicating whether to plot using absolute value    <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool HasAbsoluteColorPlot
            (
            );
            /**Sets  a value indicating whether to plot using absolute value    <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetHasAbsoluteColorPlot
            (
                bool absoluteColorPlot /** absolutecolorplot */ 
            );
            /**Returns  the color plot type  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricAnalysis::DeviationGaugeBuilder::ColorPlotTypes ColorPlotType
            (
            );
            /**Sets  the color plot type  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetColorPlotType
            (
                NXOpen::GeometricAnalysis::DeviationGaugeBuilder::ColorPlotTypes colorPlotType /** colorplottype */ 
            );
            /**Returns  the outer tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double OuterTolerance
            (
            );
            /**Sets  the outer tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetOuterTolerance
            (
                double outerTolerance /** outertolerance */ 
            );
            /**Returns  the inner tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double InnerTolerance
            (
            );
            /**Sets  the inner tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetInnerTolerance
            (
                double innerTolerance /** innertolerance */ 
            );
            /**Returns  the positive outer tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double PositiveOuterTolerance
            (
            );
            /**Sets  the positive outer tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPositiveOuterTolerance
            (
                double positiveOuterTolerance /** positiveoutertolerance */ 
            );
            /**Returns  the positive inner tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double PositiveInnerTolerance
            (
            );
            /**Sets  the positive inner tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPositiveInnerTolerance
            (
                double positiveInnerTolerance /** positiveinnertolerance */ 
            );
            /**Returns  the negative inner tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double NegativeInnerTolerance
            (
            );
            /**Sets  the negative inner tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetNegativeInnerTolerance
            (
                double negativennerTolerance /** negativennertolerance */ 
            );
            /**Returns  the negative outer tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: double NegativeOuterTolerance
            (
            );
            /**Sets  the negative outer tolerance  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetNegativeOuterTolerance
            (
                double negativeOuterTolerance /** negativeoutertolerance */ 
            );
            /**Returns  the surface range    <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::SurfaceRangeBuilder * SurfaceRangeControl
            (
            );
            /**Returns  the curve range    <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * CurveRangeControl
            (
            );
            /**Returns  a value indicating whether to enable floating info label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool HasInfoLabel
            (
            );
            /**Sets  a value indicating whether to enable floating info label  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetHasInfoLabel
            (
                bool infoLabel /** infolabel */ 
            );
            /**Returns   a value indicating whether to use defining points. Available only if target is curve with defining points    <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool UseDefiningPoints
            (
            );
            /**Sets   a value indicating whether to use defining points. Available only if target is curve with defining points    <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetUseDefiningPoints
            (
                bool useDefiningPoints /** usedefiningpoints */ 
            );
            /**Returns  the constraint manager  <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::GeometricConstraintDataManager * ConstraintManager
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
