#ifndef NXOpen_CAM_TOOLPATHDIVIDEBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TOOLPATHDIVIDEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ToolPathDivideBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class ToolPathDivideBuilder;
    }
    class Builder;
    class NXObject;
    namespace CAM
    {
        class _ToolPathDivideBuilderBuilder;
        /** Represents a Tool Path Divide Builder  <br> To create a new instance of this class, use @link CAM::CAMSetup::CreateToolPathDivideBuilder CAM::CAMSetup::CreateToolPathDivideBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ToolPathDivideBuilder : public Builder
        {
            /**  Divide type options */
            public: enum PathDivideType
            {
                PathDivideTypeByTime/** by time */ ,
                PathDivideTypeByDistance/** by distance */ ,
                PathDivideTypeByEvents/** by events */ 
            };

            private: friend class  _ToolPathDivideBuilderBuilder;
            protected: ToolPathDivideBuilder();
            /**Returns  the divide limit type <br> License requirements : None */
            public: NXOpen::CAM::ToolPathDivideBuilder::PathDivideType DivideType
            (
            );
            /**Sets  the divide limit type <br> License requirements : None */
            public: void SetDivideType
            (
                NXOpen::CAM::ToolPathDivideBuilder::PathDivideType divideTypeValue /** the divide_type value */
            );
            /**Returns  the time limit value <br> License requirements : None */
            public: double TimeLimit
            (
            );
            /**Sets  the time limit value <br> License requirements : None */
            public: void SetTimeLimit
            (
                double timeLimitValue /** the time limit value */
            );
            /**Returns  the time limit value <br> License requirements : None */
            public: double DistanceLimit
            (
            );
            /**Sets  the time limit value <br> License requirements : None */
            public: void SetDistanceLimit
            (
                double distanceLimitValue /** the distance limit value */
            );
            /**Returns  the time limit value <br> License requirements : None */
            public: double TolerancePercent
            (
            );
            /**Sets  the time limit value <br> License requirements : None */
            public: void SetTolerancePercent
            (
                double tolerancePercentValue /** the tolerance_percent value */
            );
            /**Returns  the Start of Path command  <br> License requirements : None */
            public: NXOpen::NXObject * UdeStartOfPath
            (
            );
            /**Sets  the Start of Path command  <br> License requirements : None */
            public: void SetUdeStartOfPath
            (
                NXOpen::NXObject * udeStartOfPath /** the ude start of path  */
            );
            /**Returns  the End of Path command   <br> License requirements : None */
            public: NXOpen::NXObject * UdeEndOfPath
            (
            );
            /**Sets  the End of Path command   <br> License requirements : None */
            public: void SetUdeEndOfPath
            (
                NXOpen::NXObject * udeEndOfPath /** the ude end of path  */
            );
            /**Returns  the Clearance Plane  <br> License requirements : None */
            public: NXOpen::NXObject * ClearancePlane
            (
            );
            /**Sets  the Clearance Plane  <br> License requirements : None */
            public: void SetClearancePlane
            (
                NXOpen::NXObject * clearancePlane /** the clearance plane  */
            );
            /**  Returns all events where to of divide the tool path  @return  array with the divide event indices  <br> License requirements : None */
            public: std::vector<int> GetAllDivideEvents
            (
            );
            /** Delete all events where to of divide the tool path  <br> License requirements : None */
            public: void RemoveAllDivideEvents
            (
            );
            /**Returns  the number of defined divide event indices  <br> License requirements : None */
            public: int NumberOfDivideEvents
            (
            );
            /** Add a new divide event to the list  <br> License requirements : None */
            public: void AddDivideEvent
            (
                int divideEvent /** index of the new divide event */
            );
            /** Gets the divide event at the given index  @return  the divide point  <br> License requirements : None */
            public: int GetDivideEvent
            (
                int index /** position of the event to get */
            );
            /** Deletes the divide event at the given index  <br> License requirements : None */
            public: void RemoveDivideEvent
            (
                int divideEvent /** the index to delete */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
