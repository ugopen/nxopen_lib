#ifndef NXOpen_CAE_LAMINATEPLYGROUPCOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_LAMINATEPLYGROUPCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_LaminatePlyGroupCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_LaminatePlyGroup.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class LaminatePlyGroupCollection;
    }
    namespace CAE
    {
        class Laminate;
    }
    namespace CAE
    {
        class LaminatePlyGroup;
    }
    namespace CAE
    {
        /**  @brief  Represents a laminate layup, which is defined by a sequence of @link CAE::LaminatePlyGroup CAE::LaminatePlyGroup@endlink , each with a name and a list of plies  

          <br> To obtain an instance of this class, refer to @link CAE::Laminate CAE::Laminate@endlink  <br> */
        class NXOPENCPPEXPORT LaminatePlyGroupCollection : public TaggedObjectCollection
        {
            private: NXOpen::CAE::Laminate* m_owner;
            public: explicit LaminatePlyGroupCollection(NXOpen::CAE::Laminate *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef CAE::LaminatePlyGroup * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::CAE::LaminatePlyGroupCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::CAE::LaminatePlyGroupCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a new, simple @link CAE::LaminatePlyGroup CAE::LaminatePlyGroup@endlink 
                        holding a default ply, and inserted in the laminate layup at the
                        specified index  @return  PlyGroup created to hold the single ply  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NXOpen::CAE::LaminatePlyGroup * InsertSinglePly
            (
                int insertionIndex /** index in the sequence to insert at */
            );
            /** Creates an empty @link CAE::LaminatePlyGroup CAE::LaminatePlyGroup@endlink 
                        inserted in the laminate layup at the specified index  @return  PlyGroup created  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NXOpen::CAE::LaminatePlyGroup * InsertPlyGroup
            (
                const NXString & name /** Name of ply group   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int insertionIndex /** index in the sequence to insert at */
            );
            /** Creates a linked @link CAE::LaminatePlyGroup CAE::LaminatePlyGroup@endlink 
                        inserted in the laminate layup at the specified index  @return  PlyGroup created  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NXOpen::CAE::LaminatePlyGroup * InsertLinkedPlyGroup
            (
                const NXString & name /** Name of ply group   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::LaminatePlyGroup::Link linkType /** Type of link */,
                const NXString & parentName /** name of parent PlyGroup   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int insertionIndex /** index in the sequence to insert at */
            );
            /** Deletes a @link CAE::LaminatePlyGroup CAE::LaminatePlyGroup@endlink  from the laminate layup  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void DeletePlyGroupObject
            (
                NXOpen::CAE::LaminatePlyGroup * plyGroup /** group to remove */
            );
            /** Deletes a @link CAE::LaminatePlyGroup CAE::LaminatePlyGroup@endlink  by index  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void DeletePlyGroup
            (
                int groupIndex /** index of group to remove */
            );
            /** Finds a @link CAE::LaminatePlyGroup CAE::LaminatePlyGroup@endlink  from layup  @return  group found  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: NXOpen::CAE::LaminatePlyGroup * GetPlyGroup
            (
                int groupIndex /** index in the sequence */
            );
            /** Swap the position of two @link CAE::LaminatePlyGroup CAE::LaminatePlyGroup@endlink  within a layup  <br> License requirements : nx_lam_composites ("Laminate Composites") */
            public: void SwapPlyGroup
            (
                int groupIndex1 /** group index 1 */ ,
                int groupIndex2 /** group index 2 */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
