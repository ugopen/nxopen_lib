#ifndef NXOpen_CAM_INSPECTIONCMMCOMMANDBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONCMMCOMMANDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionCmmCommandBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionCmmCommandBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionCmmCommandBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Point;
    namespace CAM
    {
        class _InspectionCmmCommandBuilderBuilder;
        /** Represents a CMM Inspection miscellaneous command builder.   <br> To create a new instance of this class, use @link CAM::InspectionOperationCollection::CreateInspectionCmmCommandBuilder CAM::InspectionOperationCollection::CreateInspectionCmmCommandBuilder@endlink  <br> */
        class NXOPENCPPEXPORT InspectionCmmCommandBuilder : public CAM::OperationBuilder
        {
            /** The type of CMM command to be entered */
            public: enum CommandTypeEnum
            {
                CommandTypeEnumEnterStatement/** Enter any CMM statement */,
                CommandTypeEnumMeasurementMode/** Enter a statement to set the measurement mode */,
                CommandTypeEnumDefineHomePoint/** Enter a statement defining the home point */,
                CommandTypeEnumMoveMachine/** Enter a statement to move the machine */,
                CommandTypeEnumOutputDecimalPlaces/** Enter a statement defining the number of decimal places for output */,
                CommandTypeEnumDeclareVariable/** Enter a statement declaring a variable */,
                CommandTypeEnumQISVariable/** Enter a statement declaring a QIS variable */,
                CommandTypeEnumPromptforInput/** Enter a statement prompting the user for input */,
                CommandTypeEnumProgramLabel/** Enter a program label statement */,
                CommandTypeEnumJumptoLabel/** Enter a jump to label statement */,
                CommandTypeEnumProgramHeader/** Enter a program header statement */
            };

            /** The method used to specify the home point */
            public: enum HomePtMethodEnum
            {
                HomePtMethodEnumMachineZero/** Use the Machine zero point as the home point */,
                HomePtMethodEnumUserSpecifiedPoint/** Use a user specified point as the home point */
            };

            /** The type of move */
            public: enum MoveTypeEnum
            {
                MoveTypeEnumLinearMove/** Specifies a linear move */,
                MoveTypeEnumArcMove/** Specifies an arc move */,
                MoveTypeEnumHomeLocation/** Specifies a move to the home location */
            };

            /** Sets variable scope */
            public: enum VarScopeEnum
            {
                VarScopeEnumGlobal/** Variable has global scope */,
                VarScopeEnumCommon/** Variable has common scope */,
                VarScopeEnumLocal/** Variable has local scope */
            };

            /** Variable type */
            public: enum VarTypeEnum
            {
                VarTypeEnumBoolean/** Specifies a boolean variable */,
                VarTypeEnumInteger/** Specifies an integer variable */,
                VarTypeEnumLong/** Specifies a long integer variable */,
                VarTypeEnumReal/** Specifies a real variable */,
                VarTypeEnumDouble/** Specifies a double variable */,
                VarTypeEnumCharacter/** Specifies a character variable */,
                VarTypeEnumVector/** Specifies a vector variable */
            };

            /** QIS variable type */
            public: enum QisvarTypeEnum
            {
                QisvarTypeEnumNull/** Specifies a NULL QIS variable */
            };

            /** User prompt variable */
            public: enum PromptVarEnum
            {
                PromptVarEnumNull/** Specifies a NULL prompt */
            };

            /** Naming method */
            public: enum IdnameMethodEnum
            {
                IdnameMethodEnumCurrentPartName/** Use current part name for ID */,
                IdnameMethodEnumUserSpecified/** Use user specified name for ID */
            };

            /** Revision method */
            public: enum RevMethodEnum
            {
                RevMethodEnumCurrentPartRevision/** Use current part revision */,
                RevMethodEnumUserSpecified/** Use user specified revision */
            };

            /** Program name */
            public: enum ProgramNameMethodEnum
            {
                ProgramNameMethodEnumCurrentPartName/** Use current part name for program name */,
                ProgramNameMethodEnumUserSpecified/** Use user specified name for program name */
            };

            /** Linear units specifications */
            public: enum LinearUnitsEnum
            {
                LinearUnitsEnumPartUnits/** Use part units */,
                LinearUnitsEnumMillimeters/** Use millimeters */,
                LinearUnitsEnumCentimeters/** Use centimeters */,
                LinearUnitsEnumMeters/** Use meters */,
                LinearUnitsEnumInches/** Use inches */,
                LinearUnitsEnumFeet/** Use feat */
            };

            /** Angular units specifications */
            public: enum AngularUnitsEnum
            {
                AngularUnitsEnumDecimalDegrees/** Use decimal degrees */,
                AngularUnitsEnumRadians/** Use radians */,
                AngularUnitsEnumDegreesMinutesSeconds/** Use Degrees:Minutes:Seconds */
            };

            /** Temperature units specifications */
            public: enum TemperatureUnitsEnum
            {
                TemperatureUnitsEnumFahrenheit/** Use fahrenheit */,
                TemperatureUnitsEnumCentigrade/** Use Centigrade */
            };

            private: friend class  _InspectionCmmCommandBuilderBuilder;
            protected: InspectionCmmCommandBuilder();
            /**Returns  the command type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::CommandTypeEnum CommandType
            (
            );
            /**Sets  the command type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetCommandType
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::CommandTypeEnum commandType /** commandtype */ 
            );
            /**Returns  the auto mode toggle  <br> License requirements : None */
            public: bool AutoToggle
            (
            );
            /**Sets  the auto mode toggle  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetAutoToggle
            (
                bool autoToggle /** autotoggle */ 
            );
            /**Returns  the program mode toggle  <br> License requirements : None */
            public: bool ProgramToggle
            (
            );
            /**Sets  the program mode toggle  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetProgramToggle
            (
                bool programToggle /** programtoggle */ 
            );
            /**Returns  the manual mode toggle  <br> License requirements : None */
            public: bool ManualToggle
            (
            );
            /**Sets  the manual mode toggle  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetManualToggle
            (
                bool manualToggle /** manualtoggle */ 
            );
            /**Returns  the home point method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::HomePtMethodEnum HomePtMethod
            (
            );
            /**Sets  the home point method  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetHomePtMethod
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::HomePtMethodEnum homePtMethod /** homeptmethod */ 
            );
            /**Returns  the home point location  <br> License requirements : None */
            public: NXOpen::Point * HomePtPoint
            (
            );
            /**Sets  the home point location  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetHomePtPoint
            (
                NXOpen::Point * homePtPoint /** homeptpoint */ 
            );
            /**Returns  the move type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::MoveTypeEnum MoveType
            (
            );
            /**Sets  the move type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetMoveType
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::MoveTypeEnum moveType /** movetype */ 
            );
            /**Returns  the target point  <br> License requirements : None */
            public: NXOpen::Point * TargetPoint
            (
            );
            /**Sets  the target point  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTargetPoint
            (
                NXOpen::Point * targetPoint /** targetpoint */ 
            );
            /**Returns  the intermediate point  <br> License requirements : None */
            public: NXOpen::Point * IntermediatePoint
            (
            );
            /**Sets  the intermediate point  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIntermediatePoint
            (
                NXOpen::Point * intermediatePoint /** intermediatepoint */ 
            );
            /**Returns  the linear decimal places  <br> License requirements : None */
            public: int LinearPlaces
            (
            );
            /**Sets  the linear decimal places  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetLinearPlaces
            (
                int linearPlaces /** linearplaces */ 
            );
            /**Returns  the angular decimal places  <br> License requirements : None */
            public: int AngularPlaces
            (
            );
            /**Sets  the angular decimal places  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngularPlaces
            (
                int angularPlaces /** angularplaces */ 
            );
            /**Returns  the deviation and tolerance decimal places  <br> License requirements : None */
            public: int DevTolPlaces
            (
            );
            /**Sets  the deviation and tolerance decimal places  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetDevTolPlaces
            (
                int devTolPlaces /** devtolplaces */ 
            );
            /**Returns  the vector decimal places  <br> License requirements : None */
            public: int VectorPlaces
            (
            );
            /**Sets  the vector decimal places  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetVectorPlaces
            (
                int vectorPlaces /** vectorplaces */ 
            );
            /**Returns  the temperature decimal places  <br> License requirements : None */
            public: int TemperaturePlaces
            (
            );
            /**Sets  the temperature decimal places  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTemperaturePlaces
            (
                int temperaturePlaces /** temperatureplaces */ 
            );
            /**Returns  the humidity decimal places  <br> License requirements : None */
            public: int HumidityPlaces
            (
            );
            /**Sets  the humidity decimal places  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetHumidityPlaces
            (
                int humidityPlaces /** humidityplaces */ 
            );
            /**Returns  the variable name  <br> License requirements : None */
            public: NXString VarName
            (
            );
            /**Sets  the variable name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetVarName
            (
                const NXString & varName /** varname */ 
            );
            /**Returns  the variable scope  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::VarScopeEnum VarScope
            (
            );
            /**Sets  the variable scope  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetVarScope
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::VarScopeEnum varScope /** varscope */ 
            );
            /**Returns  the variable type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::VarTypeEnum VarType
            (
            );
            /**Sets  the variable type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetVarType
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::VarTypeEnum varType /** vartype */ 
            );
            /**Returns  the number of characters  <br> License requirements : None */
            public: int NumChar
            (
            );
            /**Sets  the number of characters  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetNumChar
            (
                int numChar /** numchar */ 
            );
            /**Returns  the index size  <br> License requirements : None */
            public: int IndexSize
            (
            );
            /**Sets  the index size  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIndexSize
            (
                int indexSize /** indexsize */ 
            );
            /**Returns  the qis variable type  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::QisvarTypeEnum QisvarType
            (
            );
            /**Sets  the qis variable type  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetQisvarType
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::QisvarTypeEnum qisvarType /** qisvartype */ 
            );
            /**Returns  the qis variable value  <br> License requirements : None */
            public: NXString QisvarValue
            (
            );
            /**Sets  the qis variable value  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetQisvarValue
            (
                const NXString & qisvarValue /** qisvarvalue */ 
            );
            /**Returns  the prompt variable  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::PromptVarEnum PromptVar
            (
            );
            /**Sets  the prompt variable  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetPromptVar
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::PromptVarEnum promptVar /** promptvar */ 
            );
            /**Returns  the user prompt  <br> License requirements : None */
            public: NXString UserPrompt
            (
            );
            /**Sets  the user prompt  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetUserPrompt
            (
                const NXString & userPrompt /** userprompt */ 
            );
            /**Returns  the max toggle  <br> License requirements : None */
            public: bool MaxToggle
            (
            );
            /**Sets  the max toggle  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetMaxToggle
            (
                bool maxToggle /** maxtoggle */ 
            );
            /**Returns  the max value  <br> License requirements : None */
            public: double MaxValue
            (
            );
            /**Sets  the max value  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetMaxValue
            (
                double maxValue /** maxvalue */ 
            );
            /**Returns  the min toggle  <br> License requirements : None */
            public: bool MinToggle
            (
            );
            /**Sets  the min toggle  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetMinToggle
            (
                bool minToggle /** mintoggle */ 
            );
            /**Returns  the min value  <br> License requirements : None */
            public: double MinValue
            (
            );
            /**Sets  the min value  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetMinValue
            (
                double minValue /** minvalue */ 
            );
            /**Returns  the program jump label  <br> License requirements : None */
            public: NXString JumpLabel
            (
            );
            /**Sets  the program jump label  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetJumpLabel
            (
                const NXString & jumpLabel /** jumplabel */ 
            );
            /** Returns the program statements  @return   <br> License requirements : None */
            public: std::vector<NXString> GetProgStatements
            (
            );
            /** Sets the program statements  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetProgStatements
            (
                std::vector<NXString> & progStatements /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the ID name method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::IdnameMethodEnum IdnameMethod
            (
            );
            /**Sets  the ID name method  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIdnameMethod
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::IdnameMethodEnum idnameMethod /** idnamemethod */ 
            );
            /**Returns  the ID name  <br> License requirements : None */
            public: NXString IdName
            (
            );
            /**Sets  the ID name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetIdName
            (
                const NXString & idName /** idname */ 
            );
            /**Returns  the revision method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::RevMethodEnum RevMethod
            (
            );
            /**Sets  the revision method  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRevMethod
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::RevMethodEnum revMethod /** revmethod */ 
            );
            /**Returns  the revision name  <br> License requirements : None */
            public: NXString RevName
            (
            );
            /**Sets  the revision name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetRevName
            (
                const NXString & revName /** revname */ 
            );
            /**Returns  the program name method  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::ProgramNameMethodEnum ProgramNameMethod
            (
            );
            /**Sets  the program name method  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetProgramNameMethod
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::ProgramNameMethodEnum programNameMethod /** programnamemethod */ 
            );
            /**Returns  the program name  <br> License requirements : None */
            public: NXString ProgramName
            (
            );
            /**Sets  the program name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetProgramName
            (
                const NXString & programName /** programname */ 
            );
            /**Returns  the linear units  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::LinearUnitsEnum LinearUnits
            (
            );
            /**Sets  the linear units  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetLinearUnits
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::LinearUnitsEnum linearUnits /** linearunits */ 
            );
            /**Returns  the angular units  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::AngularUnitsEnum AngularUnits
            (
            );
            /**Sets  the angular units  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetAngularUnits
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::AngularUnitsEnum angularUnits /** angularunits */ 
            );
            /**Returns  the temperature units  <br> License requirements : None */
            public: NXOpen::CAM::InspectionCmmCommandBuilder::TemperatureUnitsEnum TemperatureUnits
            (
            );
            /**Sets  the temperature units  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetTemperatureUnits
            (
                NXOpen::CAM::InspectionCmmCommandBuilder::TemperatureUnitsEnum temperatureUnits /** temperatureunits */ 
            );
            /**Returns  the command operation name  <br> License requirements : None */
            public: NXString OpName
            (
            );
            /**Sets  the command operation name  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetOpName
            (
                const NXString & opName /** opname */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
