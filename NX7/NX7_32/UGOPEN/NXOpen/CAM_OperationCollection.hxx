#ifndef NXOpen_CAM_OPERATIONCOLLECTION_HXX_INCLUDED
#define NXOpen_CAM_OPERATIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_OperationCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class OperationCollection;
    }
    namespace CAM
    {
        class CAMSetup;
    }
    namespace CAM
    {
        class Operation;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class CavityMillingBuilder;
    }
    namespace CAM
    {
        class CenterlineDrillTurningBuilder;
    }
    namespace CAM
    {
        class DPMItpBuilder;
    }
    namespace CAM
    {
        class EngravingBuilder;
    }
    namespace CAM
    {
        class FaceMillingBuilder;
    }
    namespace CAM
    {
        class FeatureMillingBuilder;
    }
    namespace CAM
    {
        class FinishTurningBuilder;
    }
    namespace CAM
    {
        class GmcOpBuilder;
    }
    namespace CAM
    {
        class HoleMakingBuilder;
    }
    namespace CAM
    {
        class LatheMachineControlBuilder;
    }
    namespace CAM
    {
        class LatheUserDefinedBuilder;
    }
    namespace CAM
    {
        class MillMachineControlBuilder;
    }
    namespace CAM
    {
        class MillUserDefinedBuilder;
    }
    namespace CAM
    {
        class NCGroup;
    }
    namespace CAM
    {
        class PlanarMillingBuilder;
    }
    namespace CAM
    {
        class PlungeMillingBuilder;
    }
    namespace CAM
    {
        class PointToPointBuilder;
    }
    namespace CAM
    {
        class RoughTurningBuilder;
    }
    namespace CAM
    {
        class SurfaceContourBuilder;
    }
    namespace CAM
    {
        class ThreadTurningBuilder;
    }
    namespace CAM
    {
        class VazlMillingBuilder;
    }
    namespace CAM
    {
        class WedmMachineControlBuilder;
    }
    namespace CAM
    {
        class WedmUserDefinedBuilder;
    }
    namespace CAM
    {
        class ZLevelMillingBuilder;
    }
    namespace CAM
    {
        /** Represents the operation collection  <br> To obtain an instance of this class, refer to @link CAM::CAMSetup CAM::CAMSetup@endlink  <br> */
        class NXOPENCPPEXPORT OperationCollection : public TaggedObjectCollection
        {
            /** Whether use the default name in creation */
            public: enum UseDefaultName
            {
                UseDefaultNameFalse/** don't user the default name */,
                UseDefaultNameTrue/** use the default name */
            };

            private: NXOpen::CAM::CAMSetup* m_owner;
            public: explicit OperationCollection(NXOpen::CAM::CAMSetup *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef CAM::Operation * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::CAM::OperationCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::CAM::OperationCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the CAM.Operation object with the given identifier as recorded in a journal. @return  the found object  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Operation * FindObject
            (
                const NXString & sid /** the name of the object   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create an operation of the specified type and subtype under the parent groups. If the value of 
                    use_default_name is true, default name will be used for the created operation; otherwise, the 
                    specified name will be used. @return  the created operation  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Operation * Create
            (
                NXOpen::CAM::NCGroup * parentProgramGroup /** the parent program group */,
                NXOpen::CAM::NCGroup * parentMethodGroup /** the parent method group */,
                NXOpen::CAM::NCGroup * parentToolGroup /** the parent tool group */,
                NXOpen::CAM::NCGroup * parentGeometryGroup /** the parent geometry group */,
                const NXString & typeName /** the name of the template type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & subtypeName /** the name of the template subtype   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAM::OperationCollection::UseDefaultName useDefaultName /** use default name or not */,
                const NXString & newOperationName /** the name of the created operation,
                                                                                               only used when use_default_name == true   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a surface contour operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::SurfaceContourBuilder * CreateSurfaceContourBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling facing operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FaceMillingBuilder * CreateFaceMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling cavity operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CavityMillingBuilder * CreateCavityMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling planar operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PlanarMillingBuilder * CreatePlanarMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling text operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::EngravingBuilder * CreateEngravingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling z level operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ZLevelMillingBuilder * CreateZlevelMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling hole (feature based) operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FeatureMillingBuilder * CreateFeatureMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling plunge operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PlungeMillingBuilder * CreatePlungeMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a hole making operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::HoleMakingBuilder * CreateHoleMakingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a lathe user defined operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LatheUserDefinedBuilder * CreateLatheUserDefinedBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a mill user defined operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillUserDefinedBuilder * CreateMillUserDefinedBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a wire edm user defined operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmUserDefinedBuilder * CreateWedmUserDefinedBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a wire edm machine control operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmMachineControlBuilder * CreateWedmMachineControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a lathe machine control operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LatheMachineControlBuilder * CreateLatheMachineControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a mill machine control operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillMachineControlBuilder * CreateMillMachineControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates GmcOp builder  @return  GmcOp builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GmcOpBuilder * CreateGmcopBuilder
            (
                NXOpen::CAM::CAMObject * param /** GmcOp to be edited */
            );
            /** Creates a point to point operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PointToPointBuilder * CreatePointToPointBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates an itp builder  @return  dpmitp builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DPMItpBuilder * CreateDpmitpBuilder
            (
                NXOpen::CAM::CAMObject * param /** dpmitp to be edited */
            );
            /** Creates a planar milling vazl operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::VazlMillingBuilder * CreateVazlMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a rough turning operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RoughTurningBuilder * CreateRoughTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a finish turning operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FinishTurningBuilder * CreateFinishTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a thread turning operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ThreadTurningBuilder * CreateThreadTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a centerline drill turning operation builder  @return  operation builder created  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CenterlineDrillTurningBuilder * CreateCenterlineDrillTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
