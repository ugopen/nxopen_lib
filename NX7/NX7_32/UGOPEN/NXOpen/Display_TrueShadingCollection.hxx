#ifndef NXOpen_DISPLAY_TRUESHADINGCOLLECTION_HXX_INCLUDED
#define NXOpen_DISPLAY_TRUESHADINGCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Display_TrueShadingCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Display_TrueShading.hxx>
#include <NXOpen/Display_TrueShadingBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Display
    {
        class TrueShadingCollection;
    }
    class BasePart;
    namespace Display
    {
        class TrueShading;
    }
    namespace Display
    {
        class TrueShadingBuilder;
    }
    namespace Display
    {
        /** Represents a collection SHED objects
           <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
        class NXOPENCPPEXPORT TrueShadingCollection : public TaggedObjectCollection
        {
            private: NXOpen::BasePart* m_owner;
            public: explicit TrueShadingCollection(NXOpen::BasePart *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef Display::TrueShading * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::Display::TrueShadingCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Display::TrueShadingCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a @link Display::TrueShadingBuilder Display::TrueShadingBuilder@endlink  object 
                    if SHED is NULL.  Otherwise, a TrueShading object will be edited 
                 @return  return SHED object builder  <br> License requirements : None */
            public: NXOpen::Display::TrueShadingBuilder * CreateTrueShadingBuilder
            (
                NXOpen::Display::TrueShading * sObj /** If SHED object is not NULL, then this object will be edited */
            );
            /** Finds the @link  TrueShading   TrueShading @endlink  with the given identifier
                    as recorded in a journal. An object may not return the same value as its 
                    JournalIdentifier in different versions of the software. However newer versions 
                    of the software should find the same object when FindObject is passed older versions 
                    of its journal identifier. In general, this method should not be used in handwritten
                    code and exists to support record and playback of journals.

                    An exception will be thrown if no object found with the given journal identifier. 
                 @return  SHED object found  <br> License requirements : None */
            public: NXOpen::Display::TrueShading * FindObject
            (
                const NXString & journalIdentifier /** Identifier to be found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
