#ifndef NXOpen_VISUALREPORTING_CONDITION_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_CONDITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_Condition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/VisualReporting_Condition.hxx>
#include <NXOpen/VisualReporting_Property.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace VisualReporting
    {
        class Condition;
    }
    class NXObject;
    namespace VisualReporting
    {
        class Property;
    }
    namespace VisualReporting
    {
        class _ConditionBuilder;
        /** A @link Condition Condition@endlink  within a @link Rule Rule@endlink .
            */
        class NXOPENCPPEXPORT Condition : public NXObject
        {
            /** Represents the possible @link Type Type @endlink and @link SetType SetType @endlink  options
                       for a condition. If the type is a
                       @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                       the type of value can be found from @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink .
                    */
            public: enum TypeOption
            {
                TypeOptionAndCondition/** and condition */ ,
                TypeOptionOrCondition/** or condition */ ,
                TypeOptionNotCondition/** not condition */ ,
                TypeOptionValueCondition/** value condition */ 
            };

            /** Represents the possible @link OperatorType OperatorType @endlink and @link SetOperatorType SetOperatorType @endlink  options.
                       for a condition.
                    */
            public: enum OperatorOption
            {
                OperatorOptionEqualOperator/** equal operator */ ,
                OperatorOptionLessThanOperator/** less than operator */ ,
                OperatorOptionNotLessThanOperator/** not less than operator */ ,
                OperatorOptionGreaterThanOperator/** greater than operator */ ,
                OperatorOptionNotGreaterThanOperator/** not greater than operator */ ,
                OperatorOptionNotEqualOperator/** not equal operator */ ,
                OperatorOptionRegularExpressionOperator/** regular expression operator */ ,
                OperatorOptionContainsOperator/** contains operator */ ,
                OperatorOptionDoesNotContainOperator/** does not contain operator */ 
            };

            private: friend class  _ConditionBuilder;
            protected: Condition();
            /**Returns  the @link TypeOption TypeOption@endlink  of this condition
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition::TypeOption Type
            (
            );
            /**Returns  the @link Property Property@endlink  of this condition. If the
                        @link Property Property @endlink and @link SetProperty SetProperty @endlink  is set to NULL, then it is
                        deleted.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Property * Property
            (
            );
            /**Returns  the @link VisualReporting::Property::DatatypeOption VisualReporting::Property::DatatypeOption@endlink  of this condition.

                        The returned datatype will never be
                        @link VisualReporting::Property::DatatypeOptionUnknown VisualReporting::Property::DatatypeOptionUnknown@endlink .
                    
                        Note that this property cannot be modified. Instead it is specified when creating this
                        @link Condition Condition@endlink  by using the appropriate function:
                         - <ja_function>VisualReporting.VisualReportBuilder.CreateStringCondition</ja_function>
                         - <ja_function>VisualReporting.VisualReportBuilder.CreateIntegerCondition</ja_function>
                         - <ja_function>VisualReporting.VisualReportBuilder.CreateRealCondition</ja_function>
                         - <ja_function>VisualReporting.VisualReportBuilder.CreateBooleanCondition</ja_function>

                        Note that @link Condition Condition@endlink s created using the following functions do not
                        have datatypes and calling this function will cause an error for these:
                         - <ja_function>VisualReporting.VisualReportBuilder.CreateAndCondition</ja_function>
                         - <ja_function>VisualReporting.VisualReportBuilder.CreateOrCondition</ja_function>
                         - <ja_function>VisualReporting.VisualReportBuilder.CreateNotCondition</ja_function>
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Property::DatatypeOption Datatype
            (
            );
            /**Returns  whether this condition requires user input.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: bool HasUserSpecifiedValue
            (
            );
            /**Returns  the user-prompt for this condition. Only useful for a condition where
                        @link HasUserSpecifiedValue HasUserSpecifiedValue @endlink and @link SetHasUserSpecifiedValue SetHasUserSpecifiedValue @endlink  is true.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString UserPrompt
            (
            );
            /**Returns  the description for this condition.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString Description
            (
            );
            /**Returns  the string-value of this condition. Only valid for a condition whose
                        @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink  is @link VisualReporting::Property::DatatypeOptionString VisualReporting::Property::DatatypeOptionString@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXString StringValue
            (
            );
            /**Sets  the string-value of this condition. Only valid for a condition whose
                        @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink  is @link VisualReporting::Property::DatatypeOptionString VisualReporting::Property::DatatypeOptionString@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetStringValue
            (
                const NXString & stringValue /** stringvalue */ 
            );
            /**Returns  the integer-value of this condition. Only valid for a condition whose
                        @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink  is @link VisualReporting::Property::DatatypeOptionInteger VisualReporting::Property::DatatypeOptionInteger@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: int IntegerValue
            (
            );
            /**Sets  the integer-value of this condition. Only valid for a condition whose
                        @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink  is @link VisualReporting::Property::DatatypeOptionInteger VisualReporting::Property::DatatypeOptionInteger@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetIntegerValue
            (
                int integerValue /** integervalue */ 
            );
            /**Returns  the real-value of this condition. Only valid for a condition whose
                        @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink  is @link VisualReporting::Property::DatatypeOptionReal VisualReporting::Property::DatatypeOptionReal@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: double RealValue
            (
            );
            /**Sets  the real-value of this condition. Only valid for a condition whose
                        @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink  is @link VisualReporting::Property::DatatypeOptionReal VisualReporting::Property::DatatypeOptionReal@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetRealValue
            (
                double realValue /** realvalue */ 
            );
            /**Returns  the boolean-value of this condition. Only valid for a condition whose
                        @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink  is @link VisualReporting::Property::DatatypeOptionBoolean VisualReporting::Property::DatatypeOptionBoolean@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: bool BooleanValue
            (
            );
            /**Sets  the boolean-value of this condition. Only valid for a condition whose
                        @link Datatype Datatype @endlink and @link SetDatatype SetDatatype @endlink  is @link VisualReporting::Property::DatatypeOptionBoolean VisualReporting::Property::DatatypeOptionBoolean@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetBooleanValue
            (
                bool booleanValue /** booleanvalue */ 
            );
            /**Returns  the @link OperatorOption OperatorOption@endlink  of this condition. Only valid if
                        @link OperatorType OperatorType @endlink and @link SetOperatorType SetOperatorType @endlink  is
                        @link VisualReporting::Condition::TypeOptionValueCondition VisualReporting::Condition::TypeOptionValueCondition@endlink 
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition::OperatorOption OperatorType
            (
            );
            /**Returns  the parent @link Condition Condition@endlink  of this condition. If this
                        condition has no parent or if the parent isn't a @link Condition Condition@endlink 
                        then this returns NULL.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * ParentCondition
            (
            );
            /** Returns whether the given @link Condition Condition@endlink  is an immediate child of this condition
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: bool IsChildCondition
            (
                NXOpen::VisualReporting::Condition * childCondition /** The possible child @link Condition Condition@endlink  */
            );
            /** Return the specified child @link Condition Condition@endlink  from this condition
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * GetChildCondition
            (
                int index /** The index of the returned @link Condition Condition@endlink . */
            );
            /** Returns all the child @link Condition Condition@endlink s in this condition
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::VisualReporting::Condition *> GetChildConditions
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
