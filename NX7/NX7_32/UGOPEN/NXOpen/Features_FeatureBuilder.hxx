#ifndef NXOpen_FEATURES_FEATUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_FEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class FeatureBuilder;
    }
    class Builder;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class _FeatureBuilderBuilder;
        /**
        Represents a Feature Builder to be used in the creation and modification of features. Feature Builders
        manage the steps needed to correctly create features on a part. 
         <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT FeatureBuilder : public Builder
        {
            private: friend class  _FeatureBuilderBuilder;
            protected: FeatureBuilder();
            /** Commits the feature parameters and creates the feature  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature * CommitFeature
            (
            );
            /** Returns the feature currently being edited by this builder. If
                    a new feature is being created, and the builder has not yet
                    been commited, returns NULL.
                  @return   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::Feature * GetFeature
            (
            );
            /** Set the parent features which would be internal or slaves to the feature
                    being created or commited  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetParentFeatureInternal
            (
                NXOpen::Features::Feature * parentFeature /** Slave feature */
            );
            /**Sets  whether or not the latest timestamped parent feature of this feature
                should be made internal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetParentFeatureInternal
            (
                bool isInternal /** True = internal, False = external */
            );
            /**Returns  whether or not the latest timestamped parent feature of this feature
                should be made internal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool ParentFeatureInternal
            (
            );
            /** Set the internal parent feature of the feature being edited to external  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UnsetParentFeatureInternal
            (
                NXOpen::Features::Feature * parentFeature /** Slave feature */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
