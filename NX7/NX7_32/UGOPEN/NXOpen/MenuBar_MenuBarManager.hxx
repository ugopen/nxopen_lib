#ifndef NXOpen_MENUBAR_MENUBARMANAGER_HXX_INCLUDED
#define NXOpen_MENUBAR_MENUBARMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MenuBar_MenuBarManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MenuBar_MenuButton.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    namespace MenuBar
    {
        class MenuBarManager;
    }
    class UI;
    namespace MenuBar
    {
        class MenuButton;
    }
    namespace MenuBar
    {
        class MenuButtonEvent;
    }
    namespace MenuBar
    {
        /** JA interface for the MenuBarManager object  <br> To obtain an instance of this class, refer to @link UI UI@endlink  <br> */
        class NXOPENUICPPEXPORT MenuBarManager
        {
            /** Return values for action callbacks */
            public: enum CallbackStatus
            {
                CallbackStatusContinue/** Continue performing the menu item's actions. */,
                CallbackStatusCancel/** User interaction requested inhibiting the 
                                                                               menu item's actions. */,
                CallbackStatusOverrideStandard/** Inhibit further actions because a pre 
                                                                                          action took the place of the standard 
                                                                                          action for a standard NX menu item. */,
                CallbackStatusWarning/** Inhibit further actions because a 
                                                                                warning condition was raised. */,
                CallbackStatusError/** Inhibit further actions because a 
                                                                              error condition was raised. */
            };

            public: /** Prototype for the action callbacks  <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::MenuBar::MenuBarManager::CallbackStatus, NXOpen::MenuBar::MenuButtonEvent *> ActionCallback;
            public: /** Prototype for application initialization callback  <br> License requirements : None */
            typedef NXOpen::Callback0<int> InitializeMenuApplication;
            public: /** Prototype for callback called whenever the application is entered  <br> License requirements : None */
            typedef NXOpen::Callback0<int> EnterMenuApplication;
            public: /** Prototype for callback called whenever the application is exited  <br> License requirements : None */
            typedef NXOpen::Callback0<int> ExitMenuApplication;
            private: NXOpen::UI* m_owner;
            public: explicit MenuBarManager(NXOpen::UI *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** 
                      Adds the action callback.
                      <br> License requirements : None */
            public: void AddMenuAction
            (
                const NXString & name /** The name of the action.  This name must match the string used in the .men file.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::MenuBar::MenuBarManager::ActionCallback&  actionCallback /** The method to execute for this action */
            );
            /** Finds the MenuButton associated with the given name  @return  The button associated with the given name  <br> License requirements : None */
            public: NXOpen::MenuBar::MenuButton * GetButtonFromName
            (
                const NXString & name /** The name of the button.  This name must match the button name used in the .men file.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
                      Registers the application
                      @return  Unique identifier for the registered application  <br> License requirements : None */
            public: int RegisterApplication
            (
                const NXString & name /** The name of the application.  This name must match the string used in the .men file.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::MenuBar::MenuBarManager::InitializeMenuApplication&  initializeCallback /** The method used to initialize the application */,
                const NXOpen::MenuBar::MenuBarManager::EnterMenuApplication&  enterCallback /** The method called when entering the application */,
                const NXOpen::MenuBar::MenuBarManager::ExitMenuApplication&  exitCallback /** The method called when exiting the application */,
                bool supportsDrawings /** Does this application support drawings? */,
                bool supportsDesignInContext /** Does this application support design in context? */,
                bool supportsUndo /** Does this application support undo? */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
