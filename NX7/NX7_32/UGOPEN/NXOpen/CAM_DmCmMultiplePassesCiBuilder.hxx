#ifndef NXOpen_CAM_DMCMMULTIPLEPASSESCIBUILDER_HXX_INCLUDED
#define NXOpen_CAM_DMCMMULTIPLEPASSESCIBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_DmCmMultiplePassesCiBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class DmCmMultiplePassesCiBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    class NXObject;
    namespace CAM
    {
        class _DmCmMultiplePassesCiBuilderBuilder;
        /** Represents a DmCmMultiplePassesCiBuilder  <br> To obtain an instance of this class use @link CAM::DmCmBuilder::DmCmMultiplePassesBuilder CAM::DmCmBuilder::DmCmMultiplePassesBuilder@endlink  <br> */
        class NXOPENCPPEXPORT DmCmMultiplePassesCiBuilder : public TaggedObject
        {
            /** Available types for Wall Step Method */
            public: enum WallStepMethodType
            {
                WallStepMethodTypeIncrement/**Increment*/,
                WallStepMethodTypePasses/**Passes*/
            };

            /** Available types for Order */
            public: enum OrderType
            {
                OrderTypeWallFirst/**Wall First*/,
                OrderTypeFloorFirst/**Floor First*/
            };

            private: friend class  _DmCmMultiplePassesCiBuilderBuilder;
            protected: DmCmMultiplePassesCiBuilder();
            /**Returns  the Wall  <br> License requirements : cam_base ("CAM BASE") */
            public: bool Wall
            (
            );
            /**Sets  the Wall  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetWall
            (
                bool wall /** the toggle value of Wall*/
            );
            /**Returns  the  builder of Wall Stock Offset  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * WallStockOffsetBuilder
            (
            );
            /**Returns  the Wall Step Method  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DmCmMultiplePassesCiBuilder::WallStepMethodType WallStepMethod
            (
            );
            /**Sets  the Wall Step Method  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetWallStepMethod
            (
                NXOpen::CAM::DmCmMultiplePassesCiBuilder::WallStepMethodType wallStepMethod /** the value of Wall Step Method */
            );
            /**Returns  the  builder of Wall Increment  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * WallIncrementBuilder
            (
            );
            /**Returns  the  builder of Wall Number of Passes  <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * WallNumberPassesBuilder
            (
            );
            /**Returns  the Floor  <br> License requirements : cam_base ("CAM BASE") */
            public: bool Floor
            (
            );
            /**Sets  the Floor  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFloor
            (
                bool floor /** the toggle value of floor*/
            );
            /**Returns  the Use Auxiliary Floor  <br> License requirements : cam_base ("CAM BASE") */
            public: bool AuxFloor
            (
            );
            /**Sets  the Use Auxiliary Floor  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAuxFloor
            (
                bool auxFloor /** the toggle value of Use Auxiliary Floor*/
            );
            /**Returns  the  builder of Floor Stock Offset  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * FloorStockOffsetBuilder
            (
            );
            /**Returns  the Floor Step Method Builder <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * FloorStepMethodBuilder
            (
            );
            /**Returns  the  builder of Floor Increment  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * FloorIncrementBuilder
            (
            );
            /**Returns  the  builder of Floor Number of Passes  <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * FloorNumberPassesBuilder
            (
            );
            /**Returns  the Order  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DmCmMultiplePassesCiBuilder::OrderType Order
            (
            );
            /**Sets  the Order  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOrder
            (
                NXOpen::CAM::DmCmMultiplePassesCiBuilder::OrderType order /** the value of Order */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
