#ifndef NXOpen_TOOLING_CLONEPART_HXX_INCLUDED
#define NXOpen_TOOLING_CLONEPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ClonePart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Tooling_ClonePart.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class ClonePart;
    }
    namespace Tooling
    {
        /**
                Represents the part inforamtion to be cloned in Add Reusable Component Builder.
              <br> To create an instace of this object use @link Tooling::CloneObject::CreateClonePartItem Tooling::CloneObject::CreateClonePartItem@endlink  <br> */
        class NXOPENCPPEXPORT ClonePart : public TransientObject
        {
            public: explicit ClonePart(void *ptr);
            /** Dispose the part infomation to be cloned  <br> License requirements : None */
            public: virtual ~ClonePart();
            /**Returns   the part name (item id in Teamcenter) before renaming.
                      <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets   the part name (item id in Teamcenter) before renaming.
                      <br> License requirements : None */
            public: void SetPartName
            (
                const NXString & partName /** partname */ 
            );
            /**Returns   the part name (item name in Teamcenter) after renaming.
                      <br> License requirements : None */
            public: NXString NewPartName
            (
            );
            /**Sets   the part name (item name in Teamcenter) after renaming.
                      <br> License requirements : None */
            public: void SetNewPartName
            (
                const NXString & clonedName /** clonedname */ 
            );
            /**Returns   the item id in Teamcenter after renaming.
                      <br> License requirements : None */
            public: NXString NewItemId
            (
            );
            /**Sets   the item id in Teamcenter after renaming.
                      <br> License requirements : None */
            public: void SetNewItemId
            (
                const NXString & itemId /** itemid */ 
            );
            /**Returns   the revision id in Teamcenter after renaming.
                      <br> License requirements : None */
            public: NXString NewRevisionId
            (
            );
            /**Sets   the revision id in Teamcenter after renaming.
                      <br> License requirements : None */
            public: void SetNewRevisionId
            (
                const NXString & revId /** revid */ 
            );
            /**Returns   the item type in Teamcenter after renaming.
                      <br> License requirements : None */
            public: NXString NewItemType
            (
            );
            /**Sets   the item type in Teamcenter after renaming.
                      <br> License requirements : None */
            public: void SetNewItemType
            (
                const NXString & itemType /** itemtype */ 
            );
            /**Returns   a value that indicates whether this object is to be cloned.
                      <br> License requirements : None */
            public: bool IsClone
            (
            );
            /**Sets   a value that indicates whether this object is to be cloned.
                      <br> License requirements : None */
            public: void SetClone
            (
                bool isClone /** isclone */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
