#ifndef NXOpen_PARTFAMILYMANAGER_HXX_INCLUDED
#define NXOpen_PARTFAMILYMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartFamilyManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PartFamilyMemberValues.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class PartFamilyManager;
    class Part;
    class PartFamilyMemberValues;
    /** This class represents part family */
    class NXOPENCPPEXPORT PartFamilyManager : public TransientObject
    {
        public: explicit PartFamilyManager(void *ptr);
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector.  <br> License requirements : None */
        public: virtual ~PartFamilyManager();
        /** Get the number of family members in the family  @return  the number of members in the family  <br> License requirements : None */
        public: int GetMemberCount
        (
        );
        /** Create member part in the family  @return  the new member part  <br> License requirements : None */
        public: NXOpen::Part * CreateMember
        (
            int memberIndex /** the index of member for which part needs to be created*/
        );
        /** Add member in the family  @return  the index of created member  <br> License requirements : None */
        public: int AddMember
        (
            NXOpen::PartFamilyMemberValues * memberData /** the member values*/
        );
        /** Edit member in the family  <br> License requirements : None */
        public: void EditMember
        (
            int memberIndex /** the index of member that needs to be edited */,
            NXOpen::PartFamilyMemberValues * newMemberData /** the new member data*/
        );
        /** Delete member in the family  <br> License requirements : None */
        public: void DeleteMember
        (
            int memberIndex /** the index of member that needs to be deleted */
        );
        /** Ask index of member name in the family  @return  index of the member name  <br> License requirements : None */
        public: int AskIndexOfMemberName
        (
            const NXString & memberName /** the member name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Print the part family table  <br> License requirements : None */
        public: void PrintFamilyTable
        (
        );
        /** Get the existing member or create a new one if it does not exist  @return  established member name  <br> License requirements : None */
        public: NXString EstablishMember
        (
            int memberIndex /** index of member */
        );
    };
}
#undef EXPORTLIBRARY
#endif
