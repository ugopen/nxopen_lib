#ifndef NXOpen_ASSEMBLIES_RELINKERBUILDER_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_RELINKERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_RelinkerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Assemblies
    {
        class RelinkerBuilder;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    class Builder;
    namespace Assemblies
    {
        class _RelinkerBuilderBuilder;
        /**
            Represents a @link Assemblies::RelinkerBuilder Assemblies::RelinkerBuilder@endlink 
             <br> To create a new instance of this class, use @link Assemblies::RelinkerCollection::CreateBuilder Assemblies::RelinkerCollection::CreateBuilder@endlink  <br> */
        class NXOPENCPPEXPORT RelinkerBuilder : public Builder
        {
            /** Represents the relink scope type of Relinker. 
                     Relink Scope defines the link destination part files and source files. 
                     Relinker only searches part files defined in relink scope to get link/destination information and source parent for later reparenting*/
            public: enum LinkScope
            {
                LinkScopePartsInSession/** Indicate relink scope is parts in session */,
                LinkScopePartsInAssembly/** Indicate relink scope is parts in assembly */,
                LinkScopeWorkPart/** Indicate relink scope is work part */,
                LinkScopeSelectedParts/** Indicate relink scope is selected parts */
            };

            /** Represents the link category of Relinker, either geometry WAVE link or interpart expression. */
            public: enum LinkCategory
            {
                LinkCategoryWaveGeometry/** Indicate link category is wave geometry */,
                LinkCategoryInterpartExpression/** Indicate link category is interpart expression */
            };

            /** Represents the link type option when browsing current available links.
                    As a filter, it tells Link Browser what links should be listed. */
            public: enum LinkType
            {
                LinkTypeAll/** Indicate relink browser type is all */,
                LinkTypeNotBroken/** Indicate relink browser type is not broken only */,
                LinkTypeBroken/** Indicate relink browser type is broken only*/,
                LinkTypeAutoLinked/** Indicate relink browser type is auto-linked only*/,
                LinkTypeWithMultipleSource/** Indicate relink browser type is with multuple source */
            };

            /** Represents the relink option.
                    Per this option, relinker will search the corresponding source and do relinking. */
            public: enum LinkOption
            {
                LinkOptionInterpartExpression/** Indicate relink option is interpart expression only */,
                LinkOptionWaveGeometry/** Indicate relink option is wave geometry only */,
                LinkOptionBoth/** Indicate relink option is both interpart expression and wave link */
            };

            private: friend class  _RelinkerBuilderBuilder;
            protected: RelinkerBuilder();
            /**Returns  the current relink scope. This one is deprecated, use TargetScope instead. 
             @deprecated Deprecated in NX5.0.2 <br> 
             <br> License requirements : None */
            public: NXOpen::Assemblies::RelinkerBuilder::LinkScope RelinkScope
            (
            );
            /**Sets  the current relink scope. This one is deprecated, use TargetScope instead. 
             @deprecated Deprecated in NX5.0.2 <br> 
             <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetRelinkScope
            (
                NXOpen::Assemblies::RelinkerBuilder::LinkScope relinkScope /** relinkscope */ 
            );
            /**Returns  the current target scope.  <br> License requirements : None */
            public: NXOpen::Assemblies::RelinkerBuilder::LinkScope TargetScope
            (
            );
            /**Sets  the current target scope.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetTargetScope
            (
                NXOpen::Assemblies::RelinkerBuilder::LinkScope targetScope /** targetscope */ 
            );
            /**Returns  the current source scope.  <br> License requirements : None */
            public: NXOpen::Assemblies::RelinkerBuilder::LinkScope SourceScope
            (
            );
            /**Sets  the current source scope.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetSourceScope
            (
                NXOpen::Assemblies::RelinkerBuilder::LinkScope sourceScope /** sourcescope */ 
            );
            /**Returns  a list of the selected component as relink source scope. <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * SelectComponentSource
            (
            );
            /**Returns  a list of the selected component as relink target scope. <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * SelectComponent
            (
            );
            /** Relink with new source, for WAVE links, interpart explression or both.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void ExecuteRelink
            (
            );
            /**Returns  the relink category either wave geometry or interpart expression.  <br> License requirements : None */
            public: NXOpen::Assemblies::RelinkerBuilder::LinkCategory RelinkCategory
            (
            );
            /**Sets  the relink category either wave geometry or interpart expression.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetRelinkCategory
            (
                NXOpen::Assemblies::RelinkerBuilder::LinkCategory linkCategory /** linkcategory */ 
            );
            /**Returns  the current link type.  <br> License requirements : None */
            public: NXOpen::Assemblies::RelinkerBuilder::LinkType RelinkType
            (
            );
            /**Sets  the current link type.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetRelinkType
            (
                NXOpen::Assemblies::RelinkerBuilder::LinkType linkType /** linktype */ 
            );
            /** List all link information to the list window.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void ExportToInformationWindow
            (
            );
            /**Returns  the option to break WAVE links.
                    If it's true, relinker will break WAVE links after relinking. If it's false, relinker will not break WAVE links. <br> License requirements : None */
            public: bool BreakWaveLink
            (
            );
            /**Sets  the option to break WAVE links.
                    If it's true, relinker will break WAVE links after relinking. If it's false, relinker will not break WAVE links. <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetBreakWaveLink
            (
                bool breakWave /** breakwave */ 
            );
            /**Returns  the option to break interpart expression. 
                    If it's true, relinker will break interpart expression after relinking. If it's false, relinker will not break interpart expression. <br> License requirements : None */
            public: bool BreakInterpartExpression
            (
            );
            /**Sets  the option to break interpart expression. 
                    If it's true, relinker will break interpart expression after relinking. If it's false, relinker will not break interpart expression. <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetBreakInterpartExpression
            (
                bool breakInterPartExpression /** breakinterpartexpression */ 
            );
            /** Update session.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void UpdateSession
            (
            );
            /** View the feature failure information.
                    All failed features in assembly will be shown with detailed information.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void ViewFeatureFailure
            (
            );
            /**Returns  the option to adjust face or curve direction.
                    If it's true, relinker will check the linked curve direction or face normal and 
                    either keep or automatically flip the direction of new source while relinking. <br> License requirements : None */
            public: bool FaceCurveDirectionAdjustment
            (
            );
            /**Sets  the option to adjust face or curve direction.
                    If it's true, relinker will check the linked curve direction or face normal and 
                    either keep or automatically flip the direction of new source while relinking. <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetFaceCurveDirectionAdjustment
            (
                bool adjustDir /** adjustdir */ 
            );
            /**Returns  the searching source object string.
                    Used to specify the wildcard string to search the source objects when cycling object by name.
                    When cycling source objects, source parts will define the searching scope. <br> License requirements : None */
            public: NXString SearchingSourceObject
            (
            );
            /**Sets  the searching source object string.
                    Used to specify the wildcard string to search the source objects when cycling object by name.
                    When cycling source objects, source parts will define the searching scope. <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetSearchingSourceObject
            (
                const NXString & sourceObjectStr /** sourceobjectstr */ 
            );
            /**Returns  the searching destination object string.
                    Used to specify the wildcard string to search the destination objects when cycling object by name.
                    When cycling destination objects, relink scope will be used as the searching scope. <br> License requirements : None */
            public: NXString SearchingDestinationObject
            (
            );
            /**Sets  the searching destination object string.
                    Used to specify the wildcard string to search the destination objects when cycling object by name.
                    When cycling destination objects, relink scope will be used as the searching scope. <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetSearchingDestinationObject
            (
                const NXString & destinationObjectStr /** destinationobjectstr */ 
            );
            /**Returns  the searching source part string.
                    Used to specify the wildcard string to search source parts by file names.
                    Source parts define the scope of searching source objects. <br> License requirements : None */
            public: NXString SearchingSourcePart
            (
            );
            /**Sets  the searching source part string.
                    Used to specify the wildcard string to search source parts by file names.
                    Source parts define the scope of searching source objects. <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetSearchingSourcePart
            (
                const NXString & sourcePartStr /** sourcepartstr */ 
            );
            /**Returns  the searching source part attribute string.
                    Used to specify the wildcard string to search source parts by part attribute predefined in source part.
                    This criterial will furtherly narrow down the source part scope to avoid multiple source found. <br> License requirements : None */
            public: NXString SearchingSourcePartAttribute
            (
            );
            /**Sets  the searching source part attribute string.
                    Used to specify the wildcard string to search source parts by part attribute predefined in source part.
                    This criterial will furtherly narrow down the source part scope to avoid multiple source found. <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetSearchingSourcePartAttribute
            (
                const NXString & sourcePartAttribute /** sourcepartattribute */ 
            );
            /**Returns  the option to include suppressed components as source candidates or not.
                    If it's true, relinker will include suppressed components as source candidates. If it's false, suppressed components will not be included as source candidates while relinking.
                    The default behavior in the relinker is not to include suppressed components.  <br> License requirements : None */
            public: bool IncludeSuppressedComponents
            (
            );
            /**Sets  the option to include suppressed components as source candidates or not.
                    If it's true, relinker will include suppressed components as source candidates. If it's false, suppressed components will not be included as source candidates while relinking.
                    The default behavior in the relinker is not to include suppressed components.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetIncludeSuppressedComponents
            (
                bool includeSuppressedComponents /** includesuppressedcomponents */ 
            );
            /**Returns  the option to include non-broken WAVE links or not.
                    If it's true, relinker will include non-broken WAVE links. If it's false, non-broken WAVE links will not be included while relinking.
                    The default behavior in the relinker is not to include non-broken WAVE links.  <br> License requirements : None */
            public: bool IncludeNonBrokenWaveLinks
            (
            );
            /**Sets  the option to include non-broken WAVE links or not.
                    If it's true, relinker will include non-broken WAVE links. If it's false, non-broken WAVE links will not be included while relinking.
                    The default behavior in the relinker is not to include non-broken WAVE links.  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetIncludeNonBrokenWaveLinks
            (
                bool includeNonBrokenWaveLinks /** includenonbrokenwavelinks */ 
            );
            /**Returns  the link option.
                    Relinker will check this option to relink WAVE, interpart expression or both  <br> License requirements : None */
            public: NXOpen::Assemblies::RelinkerBuilder::LinkOption RelinkOption
            (
            );
            /**Sets  the link option.
                    Relinker will check this option to relink WAVE, interpart expression or both  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void SetRelinkOption
            (
                NXOpen::Assemblies::RelinkerBuilder::LinkOption linkOption /** linkoption */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
