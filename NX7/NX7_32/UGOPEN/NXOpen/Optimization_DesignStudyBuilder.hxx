#ifndef NXOpen_OPTIMIZATION_DESIGNSTUDYBUILDER_HXX_INCLUDED
#define NXOpen_OPTIMIZATION_DESIGNSTUDYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Optimization_DesignStudyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Optimization_DesignStudyBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Optimization
    {
        class DesignStudyBuilder;
    }
    class Builder;
    class NXObject;
    namespace Optimization
    {
        class _DesignStudyBuilderBuilder;
        /** Represents a @link Optimization::DesignStudyBuilder Optimization::DesignStudyBuilder@endlink   <br> To create a new instance of this class, use @link Optimization::DesignStudyCollection::CreateDesignStudyBuilder Optimization::DesignStudyCollection::CreateDesignStudyBuilder@endlink  <br> */
        class NXOPENCPPEXPORT DesignStudyBuilder : public Builder
        {
            /** Attribute type */
            public: enum DesignStudyAttributeType
            {
                DesignStudyAttributeTypeExpression/** Expression type */,
                DesignStudyAttributeTypeKFAttribute/** KF attribute type */,
                DesignStudyAttributeTypeGeometryParameter/** Geometry parameter type */
            };

            /** Constraint limit type */
            public: enum DesignStudyConstraintLimitType
            {
                DesignStudyConstraintLimitTypeUpper/** Upper limit type */,
                DesignStudyConstraintLimitTypeLower/** Lower limit type */
            };

            /** Distribution type */
            public: enum DesignStudyDistributeType
            {
                DesignStudyDistributeTypeUniform/** Uniform distribution type */,
                DesignStudyDistributeTypeNormal/** Normal distribution type */,
                DesignStudyDistributeTypeGamma/** Gamma distribution type */
            };

             /** Defined Objective Structure */
            public:
            struct DesignStudyObjective
            {
                public: /** Attribute name */NXString AttributeName;
                public: /** Object which the attribute belongs to, it makes sense with geometry design variable type*/NXOpen::NXObject * AttributeObject;
                public: /** Objectibe type */NXOpen::Optimization::DesignStudyBuilder::DesignStudyAttributeType ObjectiveType;
                public: /** Warning lower limit */double WarningLowerLimit;
                public: /** Warning Upper limit */double WarningUpperLimit;
                public: /** Failure Lower limit */double FailureLowerLimit;
                public: /** Failure Upper limit */double FailureUpperLimit;
                public: DesignStudyObjective() :
                    AttributeName(),
                    AttributeObject(),
                    ObjectiveType((NXOpen::Optimization::DesignStudyBuilder::DesignStudyAttributeType)0),
                    WarningLowerLimit(),
                    WarningUpperLimit(),
                    FailureLowerLimit(),
                    FailureUpperLimit()
                {
                }
                /** Constructor for the DesignStudyObjective struct. */ 
                public: DesignStudyObjective(NXString INIT_attributeName /** Attribute name */, 
                        NXOpen::NXObject * INIT_attributeObject /** Object which the attribute belongs to, it makes sense with geometry design variable type*/, 
                        NXOpen::Optimization::DesignStudyBuilder::DesignStudyAttributeType INIT_objectiveType /** Objectibe type */, 
                        double INIT_warningLowerLimit /** Warning lower limit */, 
                        double INIT_warningUpperLimit /** Warning Upper limit */, 
                        double INIT_failureLowerLimit /** Failure Lower limit */, 
                        double INIT_failureUpperLimit /** Failure Upper limit */) :
                    AttributeName(INIT_attributeName),
                    AttributeObject(INIT_attributeObject),
                    ObjectiveType(INIT_objectiveType),
                    WarningLowerLimit(INIT_warningLowerLimit),
                    WarningUpperLimit(INIT_warningUpperLimit),
                    FailureLowerLimit(INIT_failureLowerLimit),
                    FailureUpperLimit(INIT_failureUpperLimit)
                {
                }
            };

             /** Defined variable structure */
            public:
            struct DesignStudyVariable
            {
                public: /** Attribute name */NXString AttributeName;
                public: /** Object which the attribute belongs to, it makes sense with geometry design variable type*/NXOpen::NXObject * AttributeObject;
                public: /** Variable type */NXOpen::Optimization::DesignStudyBuilder::DesignStudyAttributeType VariableType;
                public: /** Lower limit value */double VariableLowerLimitValue;
                public: /** Upper limit value */double VariableUpperLimitValue;
                public: /** Distribute type */NXOpen::Optimization::DesignStudyBuilder::DesignStudyDistributeType DistributeType;
                public: /** Location parameter */double LocationParameter;
                public: /** Scale parameter */double ScaleParameter;
                public: /** Shape parameter */double ShapeParameter;
                public: /** Values count */int ValuesCount;
                public: DesignStudyVariable() :
                    AttributeName(),
                    AttributeObject(),
                    VariableType((NXOpen::Optimization::DesignStudyBuilder::DesignStudyAttributeType)0),
                    VariableLowerLimitValue(),
                    VariableUpperLimitValue(),
                    DistributeType((NXOpen::Optimization::DesignStudyBuilder::DesignStudyDistributeType)0),
                    LocationParameter(),
                    ScaleParameter(),
                    ShapeParameter(),
                    ValuesCount()
                {
                }
                /** Constructor for the DesignStudyVariable struct. */ 
                public: DesignStudyVariable(NXString INIT_attributeName /** Attribute name */, 
                        NXOpen::NXObject * INIT_attributeObject /** Object which the attribute belongs to, it makes sense with geometry design variable type*/, 
                        NXOpen::Optimization::DesignStudyBuilder::DesignStudyAttributeType INIT_variableType /** Variable type */, 
                        double INIT_variableLowerLimitValue /** Lower limit value */, 
                        double INIT_variableUpperLimitValue /** Upper limit value */, 
                        NXOpen::Optimization::DesignStudyBuilder::DesignStudyDistributeType INIT_distributeType /** Distribute type */, 
                        double INIT_locationParameter /** Location parameter */, 
                        double INIT_scaleParameter /** Scale parameter */, 
                        double INIT_shapeParameter /** Shape parameter */, 
                        int INIT_valuesCount /** Values count */) :
                    AttributeName(INIT_attributeName),
                    AttributeObject(INIT_attributeObject),
                    VariableType(INIT_variableType),
                    VariableLowerLimitValue(INIT_variableLowerLimitValue),
                    VariableUpperLimitValue(INIT_variableUpperLimitValue),
                    DistributeType(INIT_distributeType),
                    LocationParameter(INIT_locationParameter),
                    ScaleParameter(INIT_scaleParameter),
                    ShapeParameter(INIT_shapeParameter),
                    ValuesCount(INIT_valuesCount)
                {
                }
            };

            private: friend class  _DesignStudyBuilderBuilder;
            protected: DesignStudyBuilder();
            /**Returns  the study name which is unique in one part  <br> License requirements : None */
            public: NXString StudyName
            (
            );
            /**Sets  the study name which is unique in one part  <br> License requirements : None */
            public: void SetStudyName
            (
                const NXString & studyName /** studyname */ 
            );
            /** Run design study process  <br> License requirements : None */
            public: void RunDesignStudy
            (
            );
            /**Returns  the property - is update display  <br> License requirements : None */
            public: bool IsUpdateDisp
            (
            );
            /**Sets  the property - is update display  <br> License requirements : None */
            public: void SetUpdateDisp
            (
                bool isUpdateDisp /** isupdatedisp */ 
            );
            /**Returns  the property - is show graph  <br> License requirements : None */
            public: bool IsShowGraph
            (
            );
            /**Sets  the property - is show graph  <br> License requirements : None */
            public: void SetShowGraph
            (
                bool isShowGraph /** isshowgraph */ 
            );
            /** Returns the objectives  @return  Objectives  <br> License requirements : None */
            public: std::vector<NXOpen::Optimization::DesignStudyBuilder::DesignStudyObjective> GetDesignStudyObjectives
            (
            );
            /** Sets the objectives  <br> License requirements : None */
            public: void SetDesignStudyObjectives
            (
                std::vector<NXString> & attributeNames /** Objective attribute name array   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & attributeObjects /** Objective attribute object array */,
                const std::vector<NXOpen::Optimization::DesignStudyBuilder::DesignStudyAttributeType> & objectiveTypes /** Objective attribute type array */,
                const std::vector<double> & warningLowerLimit /** Warning lower limit */,
                const std::vector<double> & warningUpperLimit /** Warning upper limit */,
                const std::vector<double> & failureLowerLimit /** Failure lower limit */,
                const std::vector<double> & failureUpperLimit /** Failure upper limit */
            );
            /** Returns the variables  @return  Variables  <br> License requirements : None */
            public: std::vector<NXOpen::Optimization::DesignStudyBuilder::DesignStudyVariable> GetDesignStudyVariables
            (
            );
            /** Sets the variables  <br> License requirements : None */
            public: void SetDesignStudyVariables
            (
                std::vector<NXString> & attributeNames /** Variable attribute name array   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::NXObject *> & attributeObjects /** Variable attribute object array */,
                const std::vector<NXOpen::Optimization::DesignStudyBuilder::DesignStudyAttributeType> & variableTypes /** Variable attribute type array */,
                const std::vector<double> & variableLowerLimitValue /** Variable lower limit value array */,
                const std::vector<double> & variableUpperLimitValue /** Variable upper limit value array */,
                const std::vector<NXOpen::Optimization::DesignStudyBuilder::DesignStudyDistributeType> & distributeType /** Distribute type */,
                const std::vector<double> & locationParameter /** Location parameter */,
                const std::vector<double> & scaleParameter /** Scale parameter */,
                const std::vector<double> & shapeParameter /** Shape parameter */,
                const std::vector<int> & valuesCount /** Values count */
            );
            /** Build all the objectives  <br> License requirements : None */
            public: void BuildAllObjectives
            (
            );
            /** Remove all the objectives  <br> License requirements : None */
            public: void RemoveAllObjectives
            (
            );
            /** Build all the variables  <br> License requirements : None */
            public: void BuildAllVariables
            (
            );
            /** Remove all the variables  <br> License requirements : None */
            public: void RemoveAllVariables
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
