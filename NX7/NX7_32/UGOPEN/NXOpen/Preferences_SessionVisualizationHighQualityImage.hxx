#ifndef NXOpen_PREFERENCES_SESSIONVISUALIZATIONHIGHQUALITYIMAGE_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONVISUALIZATIONHIGHQUALITYIMAGE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionVisualizationHighQualityImage.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionVisualizationHighQualityImage;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        /** Represents the High Quality Image preferences for the entire session  <br> To obtain an instance of this class, refer to @link Preferences::SessionPreferences Preferences::SessionPreferences@endlink  <br> */
        class NXOPENCPPEXPORT SessionVisualizationHighQualityImage
        {
            /** The size at which to generate a High Quality Image. */
            public: enum ImageSizeType
            {
                ImageSizeTypeFillView/** fill view */ ,
                ImageSizeTypeAnsiA/** ansi a */ ,
                ImageSizeTypeAnsiB/** ansi b */ ,
                ImageSizeTypeAnsiC/** ansi c */ ,
                ImageSizeTypeAnsiD/** ansi d */ ,
                ImageSizeTypeAnsiE/** ansi e */ ,
                ImageSizeTypeIsoA4/** iso a4 */ ,
                ImageSizeTypeIsoA3/** iso a3 */ ,
                ImageSizeTypeIsoA2/** iso a2 */ ,
                ImageSizeTypeIsoA1/** iso a1 */ ,
                ImageSizeTypeIsoA0/** iso a0 */ ,
                ImageSizeTypeUserDefined/** user defined */ ,
                ImageSizeTypeTrueSize/** true size */ 
            };

            /** The resolution to use when generating a High Quality Image. */
            public: enum ResolutionType
            {
                ResolutionTypeDraft/** draft */ ,
                ResolutionTypeLow/** low */ ,
                ResolutionTypeMedium/** medium */ ,
                ResolutionTypeHigh/** high */ ,
                ResolutionTypeUserDefined/** user defined */ 
            };

            /** Describes the quality desired when plotting the High Quality Image */
            public: enum PlotQualityType
            {
                PlotQualityTypeFine/** fine */ ,
                PlotQualityTypeMedium/** medium */ ,
                PlotQualityTypeRough/** rough */ ,
                PlotQualityTypeCoarse/** coarse */ 
            };

            /** Whether the High Quality Image is to be generated with
                    portrait or landscape orientation */
            public: enum OrientationType
            {
                OrientationTypeLandscape/** landscape */ ,
                OrientationTypePortrait/** portrait */ 
            };

            private: NXOpen::Preferences::SessionPreferences* m_owner;
            public: explicit SessionVisualizationHighQualityImage(NXOpen::Preferences::SessionPreferences *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Returns the image size to use for the generation of the High Quality Image.
                    x_size and y_size vary only for User Defined image size type.
                    For other image size types, the values returned in them are the x and y
                    sizes fixed for the image size type.  <br> License requirements : None */
            public: void GetImageSize
            (
                NXOpen::Preferences::SessionVisualizationHighQualityImage::ImageSizeType* imageSize /** image size */ ,
                int* xSize /** X Pixel size. See note above. */,
                int* ySize /** Y Pixel size. See note above */
            );
            /** Specifies the image size to use for the generation of the High Quality Image.
                    x_size and y_size only apply for User Defined image size type.
                    For other image size types, they are ignored.  <br> License requirements : None */
            public: void SetImageSize
            (
                NXOpen::Preferences::SessionVisualizationHighQualityImage::ImageSizeType imageSize /** image size */ ,
                int xSize /** X Pixel size.  Used only if image_size is user_defined */,
                int ySize /** Y Pixel size.  Used only if image_size is user_defined */
            );
            /**Returns  the orientation for the High Quality Image (portrait or landscape).
                    orientation is not used if image_size is fill_view or user_defined.  <br> License requirements : None */
            public: NXOpen::Preferences::SessionVisualizationHighQualityImage::OrientationType Orientation
            (
            );
            /**Sets  the orientation for the High Quality Image (portrait or landscape).
                    orientation is not used if image_size is fill_view or user_defined.  <br> License requirements : None */
            public: void SetOrientation
            (
                NXOpen::Preferences::SessionVisualizationHighQualityImage::OrientationType orientation /** orientation */ 
            );
            /**Returns  the quality of the plot of the High Quality Image. 
                    plot_quality is not used if image_size is fill_view  <br> License requirements : None */
            public: NXOpen::Preferences::SessionVisualizationHighQualityImage::PlotQualityType PlotQuality
            (
            );
            /**Sets  the quality of the plot of the High Quality Image. 
                    plot_quality is not used if image_size is fill_view  <br> License requirements : None */
            public: void SetPlotQuality
            (
                NXOpen::Preferences::SessionVisualizationHighQualityImage::PlotQualityType plotQuality /** plot quality */ 
            );
            /** Returns the resolution to use when generating a High Quality Image.
                    The resolution is not used if the image_size is fill_view.
                    dots_per_inch is variable only for User Defined resolution type. For other
                    resolution types, the returned dots_per_inch is the number of dots
                    per inch which is fixed for the given resolution type.  @return   <br> License requirements : None */
            public: NXOpen::Preferences::SessionVisualizationHighQualityImage::ResolutionType GetResolution
            (
                int* dotsPerInch /** Dots per inch.  See note above. */
            );
            /** Specifies the resolution to use when generating a High Quality Image.
                    The given resolution is not used if the image_size is fill_view.
                    dots_per_inch is used only for User Defined resolution.  For other
                    resolutions types, the input dots_per_inch is ignored.  <br> License requirements : None */
            public: void SetResolution
            (
                NXOpen::Preferences::SessionVisualizationHighQualityImage::ResolutionType resolution /** resolution */ ,
                int dotsPerInch /** Dots per inch.
                                                        Used only if resolution is user_defined */
            );
            /**Returns  the setting for whether the High Quality Image is generated from a sub-region.
                    sub_region is only used when image_size is fill_view  <br> License requirements : None */
            public: bool SubRegion
            (
            );
            /**Sets  the setting for whether the High Quality Image is generated from a sub-region.
                    sub_region is only used when image_size is fill_view  <br> License requirements : None */
            public: void SetSubRegion
            (
                bool useSubRegion /** use sub region */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
