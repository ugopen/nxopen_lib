#ifndef NXOpen_CAM_MILLCUTPARAMETERS_HXX_INCLUDED
#define NXOpen_CAM_MILLCUTPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_MillCutParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CutParametersEnum.hxx>
#include <NXOpen/CAM_MillCutParameters.hxx>
#include <NXOpen/CAM_CutParameters.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class MillCutParameters;
    }
    namespace CAM
    {
        class AcrossVoids;
    }
    namespace CAM
    {
        class CleanupOutput;
    }
    namespace CAM
    {
        class CleanupSettings;
    }
    namespace CAM
    {
        class CornerControlBuilder;
    }
    namespace CAM
    {
        class CutAngle;
    }
    namespace CAM
    {
        class CutDirection;
    }
    namespace CAM
    {
        class CutParameters;
    }
    namespace CAM
    {
        class ExtendAtEdges;
    }
    namespace CAM
    {
        class FinishPassesBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class LevelToLevel;
    }
    namespace CAM
    {
        class LowerLimit;
    }
    namespace CAM
    {
        class MaxCutTraverse;
    }
    namespace CAM
    {
        class MinCutVolume;
    }
    namespace CAM
    {
        class MultiDepthCut;
    }
    namespace CAM
    {
        class OutputUncutRegions;
    }
    namespace CAM
    {
        class SmallAreaAvoidance;
    }
    namespace CAM
    {
        class SteepContainment;
    }
    namespace CAM
    {
        class StepoverBuilder;
    }
    namespace CAM
    {
        class ToolAxisChange;
    }
    namespace CAM
    {
        class ToolAxisTilt;
    }
    namespace CAM
    {
        class TrochoidalSettings;
    }
    namespace CAM
    {
        class UpDownCutting;
    }
    namespace CAM
    {
        class _MillCutParametersBuilder;
        /**
            Represents a @link CAM::MillCutParameters CAM::MillCutParameters@endlink 
            */
        class NXOPENCPPEXPORT MillCutParameters : public CAM::CutParameters
        {
            private: friend class  _MillCutParametersBuilder;
            protected: MillCutParameters();
            /**Returns  the cut direction   <br> License requirements : None */
            public: NXOpen::CAM::CutDirection * CutDirection
            (
            );
            /**Returns  the cut angle   <br> License requirements : None */
            public: NXOpen::CAM::CutAngle * CutAngle
            (
            );
            /**Returns  the cut order  <br> License requirements : None */
            public: NXOpen::CAM::CutParametersCutOrderTypes CutOrder
            (
            );
            /**Sets  the cut order  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutOrder
            (
                NXOpen::CAM::CutParametersCutOrderTypes propValue /** propvalue */ 
            );
            /**Returns  the blank distance  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * BlankDistance
            (
            );
            /**Returns  the finish passes  <br> License requirements : None */
            public: NXOpen::CAM::FinishPassesBuilder * FinishPasses
            (
            );
            /**Returns  the Text Depth  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TextDepth
            (
            );
            /**Returns  the floor same as part stock  <br> License requirements : None */
            public: bool FloorSameAsPartStock
            (
            );
            /**Sets  the floor same as part stock  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFloorSameAsPartStock
            (
                bool stockPartStatus /** the stock part use status */
            );
            /**Returns  the floor stock  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * FloorStock
            (
            );
            /**Returns  the wall stock  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * WallStock
            (
            );
            /**Returns  the blank stock  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * BlankStock
            (
            );
            /**Returns  the check stock  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * CheckStock
            (
            );
            /**Returns  the trim stock  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * TrimStock
            (
            );
            /**Returns  the region resequencing  <br> License requirements : None */
            public: NXOpen::CAM::CutParametersRegionSequencingTypes RegionSequencing
            (
            );
            /**Sets  the region resequencing  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionSequencing
            (
                NXOpen::CAM::CutParametersRegionSequencingTypes propValue /** propvalue */ 
            );
            /**Returns  the region connection  <br> License requirements : None */
            public: bool RegionConnection
            (
            );
            /**Sets  the region connection  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRegionConnection
            (
                bool propValue /** the Region Connection */
            );
            /**Returns  the follow check geometry status  <br> License requirements : None */
            public: bool FollowCheck
            (
            );
            /**Sets  the follow check geometry status  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFollowCheck
            (
                bool propValue /** the Follow Check Geometry Status */
            );
            /**Returns  the open passes  <br> License requirements : None */
            public: NXOpen::CAM::CutParametersTraverseOpenPassesTypes TraverseOpenPasses
            (
            );
            /**Sets  the open passes  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTraverseOpenPasses
            (
                NXOpen::CAM::CutParametersTraverseOpenPassesTypes propValue /** propvalue */ 
            );
            /**Returns  the trim control method type  <br> License requirements : None */
            public: NXOpen::CAM::CutParametersTrimControlTypes TrimControl
            (
            );
            /**Sets  the trim control method type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTrimControl
            (
                NXOpen::CAM::CutParametersTrimControlTypes propValue /** propvalue */ 
            );
            /**Returns  the minimum material thickness  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * MinMaterialThickness
            (
            );
            /**Returns  the small area avoidance  <br> License requirements : None */
            public: NXOpen::CAM::SmallAreaAvoidance * SmallAreaAvoidance
            (
            );
            /**Returns  the boundary approximation toggle  <br> License requirements : None */
            public: bool BoundaryApproximation
            (
            );
            /**Sets  the boundary approximation toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBoundaryApproximation
            (
                bool propValue /** the Boundary Profile Pass Flag */
            );
            /**Returns  the prevent undercutting toggle  <br> License requirements : None */
            public: bool PreventUndercutting
            (
            );
            /**Sets  the prevent undercutting toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPreventUndercutting
            (
                bool propValue /** the Undercut Handle Flag */
            );
            /**Returns  the Simplify Shapes Method   <br> License requirements : None */
            public: NXOpen::CAM::CutParametersSimplifyShapesTypes SimplifyShapes
            (
            );
            /**Sets  the Simplify Shapes Method   <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSimplifyShapes
            (
                NXOpen::CAM::CutParametersSimplifyShapesTypes propValue /** propvalue */ 
            );
            /**Returns  the stepover  <br> License requirements : None */
            public: NXOpen::CAM::StepoverBuilder * Stepover
            (
            );
            /**Returns  the use previous IPW toggle  <br> License requirements : None */
            public: bool UsePrevious2dIpw
            (
            );
            /**Sets  the use previous IPW toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUsePrevious2dIpw
            (
                bool propValue /** the Use Previous IPW Flag */
            );
            /**Returns  the Cut Walls Only toggle  <br> License requirements : None */
            public: bool CutWallsOnly
            (
            );
            /**Sets  the Cut Walls Only toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutWallsOnly
            (
                bool propValue /** the Cut Walls Only */
            );
            /**Returns  the roll tool over edges toggle  <br> License requirements : None */
            public: bool RollToolOverEdges
            (
            );
            /**Sets  the roll tool over edges toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRollToolOverEdges
            (
                bool propValue /** the Remove Edge Traces value */
            );
            /**Returns  the minimize number of engages toggle  <br> License requirements : None */
            public: bool MinimizeNumberOfEngages
            (
            );
            /**Sets  the minimize number of engages toggle  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMinimizeNumberOfEngages
            (
                bool propValue /** the Minimize Number of Engages Flag */
            );
            /**Returns  the part stock offset  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PartStockOffset
            (
            );
            /**Returns  the action when gouging  <br> License requirements : None */
            public: NXOpen::CAM::CutParametersActionWhenGougingTypes ActionWhenGouging
            (
            );
            /**Sets  the action when gouging  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetActionWhenGouging
            (
                NXOpen::CAM::CutParametersActionWhenGougingTypes propValue /** the When Gouging Check value */
            );
            /**Returns  the maximum cut step  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MaxCutStep
            (
            );
            /**Returns  the tool axis tilt  <br> License requirements : None */
            public: NXOpen::CAM::ToolAxisTilt * ToolAxisTilt
            (
            );
            /**Returns  the across voids  <br> License requirements : None */
            public: NXOpen::CAM::AcrossVoids * AcrossVoids
            (
            );
            /**Returns  the output uncut regions  <br> License requirements : None */
            public: NXOpen::CAM::OutputUncutRegions * OutputUncutRegions
            (
            );
            /**Returns  the lower limit  <br> License requirements : None */
            public: NXOpen::CAM::LowerLimit * LowerLimit
            (
            );
            /**Returns  the max cut traverse  <br> License requirements : None */
            public: NXOpen::CAM::MaxCutTraverse * MaxCutTraverse
            (
            );
            /**Returns  the minimum cut volume  <br> License requirements : None */
            public: NXOpen::CAM::MinCutVolume * MinCutVolume
            (
            );
            /**Returns  the steep containment  <br> License requirements : None */
            public: NXOpen::CAM::SteepContainment * SteepContainment
            (
            );
            /**Returns  the up down cutting  <br> License requirements : None */
            public: NXOpen::CAM::UpDownCutting * UpDownCutting
            (
            );
            /**Returns  the tool axis change  <br> License requirements : None */
            public: NXOpen::CAM::ToolAxisChange * ToolAxisChange
            (
            );
            /**Returns  the plunge direction  <br> License requirements : None */
            public: NXOpen::CAM::CutParametersPlungeDirectionTypes PlungeDirection
            (
            );
            /**Sets  the plunge direction  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPlungeDirection
            (
                NXOpen::CAM::CutParametersPlungeDirectionTypes propValue /** The  plunge direction */
            );
            /**Returns  the pattern direction  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CutParametersPatternDirectionTypes PatternDirection
            (
            );
            /**Sets  the pattern direction  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPatternDirection
            (
                NXOpen::CAM::CutParametersPatternDirectionTypes propValue /** propvalue */ 
            );
            /**Returns  the cut between levels  <br> License requirements : None */
            public: bool CutBetweenLevels
            (
            );
            /**Sets  the cut between levels  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutBetweenLevels
            (
                bool cutBetween /** the cut between method  */
            );
            /**Returns  the corner control  <br> License requirements : None */
            public: NXOpen::CAM::CornerControlBuilder * CornerControl
            (
            );
            /**Returns  the valley overlap distance  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ValleyOverlapDistance
            (
            );
            /**Returns  the blank overhang (inheritable tool dependent)  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * BlankOverhang
            (
            );
            /**Returns  the cut area extension distance builder  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * CutAreaExtensionDistance
            (
            );
            /**Returns  the tolerant machining status  <br> License requirements : None */
            public: bool TolerantMachining
            (
            );
            /**Sets  the tolerant machining status  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTolerantMachining
            (
                bool tolerantMachine /** the tolerant machining status */
            );
            /**Returns  the Standard Drive Self-Intersect Status  <br> License requirements : None */
            public: bool SelfIntersection
            (
            );
            /**Sets  the Standard Drive Self-Intersect Status  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSelfIntersection
            (
                bool selfIntersect /** The Standard Drive Self-Intersect Status value */
            );
            /**Returns  the Extend At Edges  <br> License requirements : None */
            public: NXOpen::CAM::ExtendAtEdges * ExtendAtEdges
            (
            );
            /**Returns  the cut below tool contact setting  <br> License requirements : None */
            public: bool CutBelowToolContact
            (
            );
            /**Sets  the cut below tool contact setting  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutBelowToolContact
            (
                bool cutBelowToolContact /** cutbelowtoolcontact */ 
            );
            /**Returns  the Trochoidal Settings  <br> License requirements : None */
            public: NXOpen::CAM::TrochoidalSettings * TrochoidalSettings
            (
            );
            /**Returns  the extend to part flag  <br> License requirements : None */
            public: bool ExtendToPart
            (
            );
            /**Sets  the extend to part flag  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetExtendToPart
            (
                bool flag /** the extend to part flag */
            );
            /**Returns  the merge distance builder (tool dependent double)  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * MergeDistance
            (
            );
            /**Returns  the Level to Level  <br> License requirements : None */
            public: NXOpen::CAM::LevelToLevel * LevelToLevel
            (
            );
            /**Returns  the Cleanup Settings  <br> License requirements : None */
            public: NXOpen::CAM::CleanupSettings * CleanupSettings
            (
            );
            /**Returns  the Cleanup Output  <br> License requirements : None */
            public: NXOpen::CAM::CleanupOutput * CleanupOutput
            (
            );
            /**Returns  the Multi Depth Cut  <br> License requirements : None */
            public: NXOpen::CAM::MultiDepthCut * MultiDepthCut
            (
            );
            /**Returns  the Stepover Limit  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StepoverLimit
            (
            );
            /**Returns  the boundary stock  <br> License requirements : None */
            public: double BoundaryStock
            (
            );
            /**Sets  the boundary stock  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBoundaryStock
            (
                double propValue /** the trim stock value */
            );
            /**Returns  the boundary intol  <br> License requirements : None */
            public: double BoundaryInTol
            (
            );
            /**Sets  the boundary intol  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBoundaryInTol
            (
                double propValue /** the boundary intol value */
            );
            /**Returns  the boundary out tol  <br> License requirements : None */
            public: double BoundaryOutTol
            (
            );
            /**Sets  the boundary out tol  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBoundaryOutTol
            (
                double propValue /** the boundary out tol value */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
