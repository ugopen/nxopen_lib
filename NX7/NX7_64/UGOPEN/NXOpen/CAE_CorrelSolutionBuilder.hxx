#ifndef NXOpen_CAE_CORRELSOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_CAE_CORRELSOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CorrelSolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CorrelSolutionBuilder.hxx>
#include <NXOpen/CAE_CorrelBaseBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class CorrelSolutionBuilder;
    }
    namespace CAE
    {
        class CorrelBaseBuilder;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class _CorrelSolutionBuilderBuilder;
        /** This is a manager to the @link CAE::CorrelSolution CAE::CorrelSolution@endlink  class.
            Object of type @link CAE::CorrelSolution CAE::CorrelSolution@endlink  can be
            created and edited only through this class
             <br> To create a new instance of this class, use @link CAE::CorrelSolutionCollection::CreateSolutionBuilder CAE::CorrelSolutionCollection::CreateSolutionBuilder@endlink  <br> */
        class NXOPENCPPEXPORT CorrelSolutionBuilder : public CAE::CorrelBaseBuilder
        {
            /** The damping type enum */
            public: enum EnumDampingFrftype
            {
                EnumDampingFrftypeFromWorkModel/** from work model */,
                EnumDampingFrftypeSpecifyDamping/** from user input */
            };

            /** The pair matching option enum */
            public: enum EnumMatchingOptionType
            {
                EnumMatchingOptionTypeStrictNodeToNode/** node to node matching */,
                EnumMatchingOptionTypeFloatingInterpolation/** interpolation matching */
            };

            private: friend class  _CorrelSolutionBuilderBuilder;
            protected: CorrelSolutionBuilder();
            /**Returns  the correlation metasolution name  <br> License requirements : None */
            public: NXString Title
            (
            );
            /**Sets  the correlation metasolution name  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetTitle
            (
                const NXString & title /** title */ 
            );
            /**Returns  the work (analysis) solution of correlation  <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * WorkSolution
            (
            );
            /**Sets  the work (analysis) solution of correlation  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetWorkSolution
            (
                NXOpen::CAE::SimSolution * workSolution /** worksolution */ 
            );
            /**Returns  the reference (test) solution of correlation  <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * ReferenceSolution
            (
            );
            /**Sets  the reference (test) solution of correlation  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetReferenceSolution
            (
                NXOpen::CAE::SimSolution * referenceSolution /** referencesolution */ 
            );
            /**Returns  the option controlling which damping to consider when synthesizing FRF data from analysis results  <br> License requirements : None */
            public: NXOpen::CAE::CorrelSolutionBuilder::EnumDampingFrftype FrfDampingSource
            (
            );
            /**Sets  the option controlling which damping to consider when synthesizing FRF data from analysis results  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetFrfDampingSource
            (
                NXOpen::CAE::CorrelSolutionBuilder::EnumDampingFrftype frfDampingSource /** frfdampingsource */ 
            );
            /**Returns  the option determining how node-matching occurs  <br> License requirements : None */
            public: NXOpen::CAE::CorrelSolutionBuilder::EnumMatchingOptionType NodeMatchingOption
            (
            );
            /**Sets  the option determining how node-matching occurs  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetNodeMatchingOption
            (
                NXOpen::CAE::CorrelSolutionBuilder::EnumMatchingOptionType nodeMatchingOption /** nodematchingoption */ 
            );
            /**Returns  the node-matching distance  <br> License requirements : None */
            public: double NodeMatchingDistance
            (
            );
            /**Sets  the node-matching distance  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetNodeMatchingDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the rigid-body filtering option for work modes - deprecated, use low-frequency filtering option instead 
             @deprecated Deprecated in NX6.0.2 <br> 
             <br> License requirements : None */
            public: bool RigidBodyFilteringMode
            (
            );
            /**Sets  the rigid-body filtering option for work modes - deprecated, use low-frequency filtering option instead 
             @deprecated Deprecated in NX6.0.2 <br> 
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetRigidBodyFilteringMode
            (
                bool rigidFilteringMode /** rigidfilteringmode */ 
            );
            /**Returns  the rigid-body cutoff frequency for work modes - deprecated, use low-frequency cutoff instead 
             @deprecated Deprecated in NX6.0.2 <br> 
             <br> License requirements : None */
            public: double RigidBodyCutoffFrequency
            (
            );
            /**Sets  the rigid-body cutoff frequency for work modes - deprecated, use low-frequency cutoff instead 
             @deprecated Deprecated in NX6.0.2 <br> 
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetRigidBodyCutoffFrequency
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
            /**Returns  the low-frequency filtering option for work modes  <br> License requirements : None */
            public: bool LowFrequencyFilteringMode
            (
            );
            /**Sets  the low-frequency filtering option for work modes  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetLowFrequencyFilteringMode
            (
                bool lowFrequencyFilteringMode /** lowfrequencyfilteringmode */ 
            );
            /**Returns  the low-frequency cutoff for work modes  <br> License requirements : None */
            public: double LowFrequencyCutoff
            (
            );
            /**Sets  the low-frequency cutoff for work modes  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetLowFrequencyCutoff
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
            /**Returns  the high-frequency filtering option for work modes  <br> License requirements : None */
            public: bool HighFrequencyFilteringMode
            (
            );
            /**Sets  the high-frequency filtering option for work modes  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetHighFrequencyFilteringMode
            (
                bool highFrequencyFilteringMode /** highfrequencyfilteringmode */ 
            );
            /**Returns  the high-frequency cutoff for work modes  <br> License requirements : None */
            public: double HighFrequencyCutoff
            (
            );
            /**Sets  the high-frequency cutoff for work modes  <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetHighFrequencyCutoff
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
