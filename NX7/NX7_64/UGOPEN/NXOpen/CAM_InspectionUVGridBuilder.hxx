#ifndef NXOpen_CAM_INSPECTIONUVGRIDBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONUVGRIDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionUVGridBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionPathBuilder.hxx>
#include <NXOpen/CAM_InspectionUVGridBuilder.hxx>
#include <NXOpen/CAM_InspectionMoveBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class InspectionUVGridBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class InspectionMoveBuilder;
    }
    class Direction;
    namespace CAM
    {
        class _InspectionUVGridBuilderBuilder;
        /** Represents the builder for the CMM Inspection UV Grid sub-operation.  <br> To create a new instance of this class, use @link CAM::InspectionMoveCollection::CreateInspectionUvgridBuilder CAM::InspectionMoveCollection::CreateInspectionUvgridBuilder@endlink  <br> */
        class NXOPENCPPEXPORT InspectionUVGridBuilder : public CAM::InspectionMoveBuilder
        {
            /** the start point mode */
            public: enum StartPointType
            {
                StartPointTypeNearest/** Nearest neighbor */,
                StartPointTypeUminVmin/** Umin - Vmin */,
                StartPointTypeUmaxVmin/** Umax - Vmin */,
                StartPointTypeUminVmax/** Umin - Vmax */,
                StartPointTypeUmaxVmax/** Umax - Vmax */
            };

            /** the method for determining the axis for a sphere */
            public: enum SphereAxisType
            {
                SphereAxisTypeAlignWithProbe/** Align with probe axis */,
                SphereAxisTypeSelectDirection/** User specified direction */,
                SphereAxisTypeSetupZAxis/** Z-axis stored in Setup */
            };

            private: friend class  _InspectionUVGridBuilderBuilder;
            protected: InspectionUVGridBuilder();
            /**Returns  the number of points in U  <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * NumUPoints
            (
            );
            /**Returns  the number of points in V  <br> License requirements : None */
            public: NXOpen::CAM::InheritableIntBuilder * NumVPoints
            (
            );
            /**Returns  the start value in U  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartU
            (
            );
            /**Returns  the end value in U  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndU
            (
            );
            /**Returns  the start value in V  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * StartV
            (
            );
            /**Returns  the end value in V  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * EndV
            (
            );
            /**Returns  the approach distance  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * ApproachDist
            (
            );
            /**Returns  the retract distance  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * RetractDist
            (
            );
            /**Returns  the search distance  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * SearchDist
            (
            );
            /**Returns  the start point mode  <br> License requirements : None */
            public: NXOpen::CAM::InspectionUVGridBuilder::StartPointType StartPointMode
            (
            );
            /**Sets  the start point mode  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetStartPointMode
            (
                NXOpen::CAM::InspectionUVGridBuilder::StartPointType startMode /** startmode */ 
            );
            /**Returns  the path point sequence optimization setting  <br> License requirements : None */
            public: NXOpen::CAM::InspectionPathBuilder::SequenceType SequenceOptimization
            (
            );
            /**Sets  the path point sequence optimization setting  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSequenceOptimization
            (
                NXOpen::CAM::InspectionPathBuilder::SequenceType sequenceOpt /** sequenceopt */ 
            );
            /**Returns  the method for determining the axis for a sphere  <br> License requirements : None */
            public: NXOpen::CAM::InspectionUVGridBuilder::SphereAxisType SphereAxisMethod
            (
            );
            /**Sets  the method for determining the axis for a sphere  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSphereAxisMethod
            (
                NXOpen::CAM::InspectionUVGridBuilder::SphereAxisType method /** method */ 
            );
            /**Returns  the sphere axis vector  <br> License requirements : None */
            public: NXOpen::Direction * SphereAxisVector
            (
            );
            /**Sets  the sphere axis vector  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetSphereAxisVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the flag to use feature collision avoidance  <br> License requirements : None */
            public: bool UseFeatureCollisionAvoidance
            (
            );
            /**Sets  the flag to use feature collision avoidance  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetUseFeatureCollisionAvoidance
            (
                bool flag /** flag */ 
            );
            /**Returns  the flag to use part collision avoidance  <br> License requirements : None */
            public: bool UsePartCollisionAvoidance
            (
            );
            /**Sets  the flag to use part collision avoidance  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetUsePartCollisionAvoidance
            (
                bool flag /** flag */ 
            );
            /**Returns  the flag to align with machine axes  <br> License requirements : None */
            public: bool AlignMachineAxes
            (
            );
            /**Sets  the flag to align with machine axes  <br> License requirements : inspection_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignMachineAxes
            (
                bool flag /** flag */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
