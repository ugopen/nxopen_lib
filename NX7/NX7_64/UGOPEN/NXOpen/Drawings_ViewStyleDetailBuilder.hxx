#ifndef NXOpen_DRAWINGS_VIEWSTYLEDETAILBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSTYLEDETAILBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewStyleDetailBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewStyleDetailBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Drawings
    {
        class ViewStyleDetailBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Drawings
    {
        class _ViewStyleDetailBuilderBuilder;
        /** Represents the DETAIL tab on the View Style Dialog (Drawings.ViewStyleDetailBuilder)
            */
        class NXOPENCPPEXPORT ViewStyleDetailBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _ViewStyleDetailBuilderBuilder;
            protected: ViewStyleDetailBuilder();
            /**Returns  the circular toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Circular
            (
            );
            /**Sets  the circular toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetCircular
            (
                bool circularToggle /** Sets a new circular toggle value on the detail sub-builder */
            );
            /**Returns  the scale toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Scale
            (
            );
            /**Sets  the scale toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetScale
            (
                bool scaleToggle /** Sets a new scale toggle value on the detail sub-builder */
            );
            /**Returns  the orient toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Orient
            (
            );
            /**Sets  the orient toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetOrient
            (
                bool orientToggle /** Sets a new orient toggle value on the detail sub-builder */
            );
            /**Returns  the align toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Align
            (
            );
            /**Sets  the align toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetAlign
            (
                bool alignToggle /** Sets a new align toggle value on the detail sub-builder */
            );
            /**Returns  the offset toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Offset
            (
            );
            /**Sets  the offset toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetOffset
            (
                bool offsetToggle /** Sets a new offset toggle value on the detail sub-builder */
            );
            /**Returns  the sheet toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: bool Sheet
            (
            );
            /**Sets  the sheet toggle on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetSheet
            (
                bool sheetToggle /** Sets a new sheet toggle value on the detail sub-builder */
            );
            /**Returns  the view boundary color on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::NXColor * ViewBoundaryColor
            (
            );
            /**Sets  the view boundary color on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewBoundaryColor
            (
                NXOpen::NXColor * color /** Sets the boundary color on the detail sub-builder */
            );
            /**Returns  the view boundary font on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::Preferences::Font ViewBoundaryFont
            (
            );
            /**Sets  the view boundary font on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewBoundaryFont
            (
                NXOpen::Preferences::Font font /** Sets the boundary font on the detail sub-builder */
            );
            /**Returns  the view boundary width on the DETAIL tab of the View Style Dialog  <br> License requirements : None */
            public: NXOpen::Preferences::Width ViewBoundaryWidth
            (
            );
            /**Sets  the view boundary width on the DETAIL tab of the View Style Dialog  <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewBoundaryWidth
            (
                NXOpen::Preferences::Width width /** Sets the boundary width on the detail sub-builder */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
