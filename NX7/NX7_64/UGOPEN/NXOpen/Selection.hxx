#ifndef NXOpen_SELECTION_HXX_INCLUDED
#define NXOpen_SELECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Selection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/SelectionHandle.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/UserDefinedObjects_UserDefinedClass.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>
namespace NXOpen
{
    class Selection;
    class UI;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class SelectionHandle;
    namespace UserDefinedObjects
    {
        class UserDefinedClass;
    }
    class View;
    /** Defines an interface object for executing selection operations  <br> To obtain an instance of this class, refer to @link UI UI@endlink  <br> */
    class NXOPENUICPPEXPORT Selection
    {
        /**
                Indicates the scope for selecting objects.
            */
        public: enum SelectionScope
        {
            SelectionScopeUseDefault/** Use the default selection scope */,
            SelectionScopeWorkPart/** Use the work part */,
            SelectionScopeAnyInAssembly = 3/** Use any occurrence in the assembly */,
            SelectionScopeWorkPartAndOccurrence/** Use the work part or any occurrence */
        };

        /**
                Indicates the type of action to perform when an object is selected.
            */
        public: enum SelectionAction
        {
            SelectionActionEnableAll/** Include objects in selection */,
            SelectionActionEnableSpecific/** Include selected objects in selection */,
            SelectionActionDisableSpecific/** Remove selected objects from selection */,
            SelectionActionClearAndEnableSpecific/** Clear selection and include selected objects */,
            SelectionActionAllAndDisableSpecific/** Select all objects except for selected objects */,
            SelectionActionCount/** Include count of selected objects */
        };

        /**
                Indicates the general class of object to filter selection.
            */
        public: enum SelectionType
        {
            SelectionTypeAll/** Filter to select all object types */,
            SelectionTypeFeatures/** Filter to select all feature types */,
            SelectionTypeCurves/** Filter to select all curve types */,
            SelectionTypeFaces/** Filter to select all face types */,
            SelectionTypeEdges/** Filter to select all edge types */,
            SelectionTypeCurvesAndEdges/** Filter to select all curve and edge types */
        };

        /**
                Specify the user response for the selection operation.
            */
        public: enum Response
        {
            ResponseBack = 1/** User selected Back */,
            ResponseCancel/** User selected Cancel */,
            ResponseOk/** User selected Ok */,
            ResponseObjectSelectedByName/** User selected object by name */,
            ResponseObjectSelected/** User selected an object */
        };

        /**
                Specify the user response for general dialogs.
            */
        public: enum DialogResponse
        {
            DialogResponseNone/** No Response */,
            DialogResponsePick/** User picked object on screen */,
            DialogResponseOk/** User selected Ok */,
            DialogResponseCancel/** User selected Cancel */,
            DialogResponseBack/** User selected Back (if applicable) */,
            DialogResponseApply/** User selected Apply */,
            DialogResponseHelp/** User selected Help */
        };

        /** 
                Specify the type of features to select.
            */
        public: enum SelectionFeatureType
        {
            SelectionFeatureTypeBrowsable/** Select all browsable features */,
            SelectionFeatureTypeNoBooleanUdf/** Select all features except boolean and udf features */
        };

        /**
                Indicates the general class of object to filter selection.
            */
        public: enum UistylerSelectionType
        {
            UistylerSelectionTypeInactiveSelection/** sets selection inactive until
            this function is called again */,
            UistylerSelectionTypeSingleSelection/** allows
            single select */,
            UistylerSelectionTypeSingleDeselection/** single deselect */,
            UistylerSelectionTypeRobustSelection/** reselect last */,
            UistylerSelectionTypeSinglePosition/** the position is returned if no object is selected with the
            single select gesture  */,
            UistylerSelectionTypeRectanglePosition/** the position is returned if no object is selected with the
            single select gesture */
        };

         /**  Used in selection methods to set the types of objects that are selectable.

            Commonly used:
             @code 
        For C++:
        in order to select...       set...
        any edge                    type=UF_solid_type, subtype=UF_all_subtype, solid_body_subtype=UF_UI_SEL_FEATURE_ANY_EDGE
        any face                    type=UF_solid_type, subtype=UF_all_subtype, solid_body_subtype=UF_UI_SEL_FEATURE_ANY_FACE

        For .NET:
        in order to select...       set...
        any edge                    type=NXOpen.UF.UFConstants.UF_solid_type, subtype=0, solid_body_subtype=NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE
        any face                    type=NXOpen.UF.UFConstants.UF_solid_type, subtype=0, solid_body_subtype=NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE
             @endcode 

            */
        public:
        struct MaskTriple
        {
            public: /** Object type. This can be one of the object types that are listed in 
                                  uf_object_types.h. For example, for point, 
                                  use UF_point_type in C++ and
                                  NXOpen.UF.UFConstants.UF_point_type in .NET. */int Type;
            public: /** Object subtype. This can either be 0 (UF_all_subtype) for any subtype, or a
                                    subtype of the selected type.
                                    The subtypes are listed in uf_object_types.h.
                                    */int Subtype;
            public: /** Solid body subtype. This is only meaningful when the type is 
                                   UF_solid_type.  In that case, this should be set to
                                   one of the solid type constants listed in uf_ui_types.h 
                                   under "Constants for selection solid_type". For example,
                                   to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and 
                                   NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET */int SolidBodySubtype;
            public: MaskTriple() :
                Type(),
                Subtype(),
                SolidBodySubtype()
            {
            }
            /** Constructor for the MaskTriple struct. */ 
            public: MaskTriple(int INIT_type /** Object type. This can be one of the object types that are listed in 
                                          uf_object_types.h. For example, for point, 
                                          use UF_point_type in C++ and
                                          NXOpen.UF.UFConstants.UF_point_type in .NET. */, 
                    int INIT_subtype /** Object subtype. This can either be 0 (UF_all_subtype) for any subtype, or a
                                            subtype of the selected type.
                                            The subtypes are listed in uf_object_types.h.
                                            */, 
                    int INIT_solid_body_subtype /** Solid body subtype. This is only meaningful when the type is 
                                           UF_solid_type.  In that case, this should be set to
                                           one of the solid type constants listed in uf_ui_types.h 
                                           under "Constants for selection solid_type". For example,
                                           to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and 
                                           NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET */) :
                Type(INIT_type),
                Subtype(INIT_subtype),
                SolidBodySubtype(INIT_solid_body_subtype)
            {
            }
        };

         /** For a rectangle deselection, the fields <b> Deselection </b>, 
            <b> MultipleSelection </b>, <b> Rectangle </b> 
            bits would be set. 
            For a name selection which selected one object, the fields <b> SelectionDescriptor.Selection </b>, 
            <b> SingleSelection </b>, and <b> NameSelection </b>
            bits would be set.
            If a reselect was done (an object is selected and the previous object selected is deselected), 
            only the field <b> SelectionDescriptor.Reselection </b> bit is set.
            The fields <b> SingleSelection </b> and <b> MultipleSelection </b> 
            bits are not set for position.
            The field <b> Rectangle </b> bit is set for rectangle selection, 
            rectangle deselection, and rectangle position.
            You use this function with UIStyler dialogs and @link  SelectObjects   SelectObjects @endlink  and can be called from either the selection
            filter procedure or the selection callback.
            */
        public:
        struct SelectionDescriptor
        {
            public: /** selection */ bool Selection;
            public: /** deselection */ bool Deselection;
            public: /** reselection */ bool Reselection;
            public: /** single selection */ bool SingleSelection;
            public: /** multiple selection */ bool MultipleSelection;
            public: /** single position */ bool SinglePosition;
            public: /** rectangle position */ bool RectanglePosition;
            public: /** name selection */ bool NameSelection;
            public: /** rectangle */ bool Rectangle;
            public: SelectionDescriptor() :
                Selection(),
                Deselection(),
                Reselection(),
                SingleSelection(),
                MultipleSelection(),
                SinglePosition(),
                RectanglePosition(),
                NameSelection(),
                Rectangle()
            {
            }
            /** Constructor for the SelectionDescriptor struct. */ 
            public: SelectionDescriptor(bool INIT_selection /** selection */ , 
                    bool INIT_deselection /** deselection */ , 
                    bool INIT_reselection /** reselection */ , 
                    bool INIT_single_selection /** single selection */ , 
                    bool INIT_multiple_selection /** multiple selection */ , 
                    bool INIT_single_position /** single position */ , 
                    bool INIT_rectangle_position /** rectangle position */ , 
                    bool INIT_name_selection /** name selection */ , 
                    bool INIT_rectangle /** rectangle */ ) :
                Selection(INIT_selection),
                Deselection(INIT_deselection),
                Reselection(INIT_reselection),
                SingleSelection(INIT_single_selection),
                MultipleSelection(INIT_multiple_selection),
                SinglePosition(INIT_single_position),
                RectanglePosition(INIT_rectangle_position),
                NameSelection(INIT_name_selection),
                Rectangle(INIT_rectangle)
            {
            }
        };

        public: /** It is an optional callback which the user can provide to perform
            application specific filtering when selecting objects.  <br> License requirements : None */
        typedef NXOpen::Callback3<int, NXOpen::NXObject *, NXOpen::Selection::MaskTriple *, NXOpen::SelectionHandle *> FilterCallback;
        public: /** It is an optional callback which the user can provide to customize his selection  <br> License requirements : None */
        typedef NXOpen::Callback3<int, std::vector<NXOpen::NXObject *>, std::vector<NXOpen::NXObject *>, NXOpen::SelectionHandle *> SelectionCallback;
        private: NXOpen::UI* m_owner;
        public: explicit Selection(NXOpen::UI *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Select objects  @return  Ok, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObjects
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            bool includeFeatures /** Whether to allow the selection of features */,
            bool keepHighlighted /** Whether to keep the selection highlighted after it has been selected */,
            std::vector<NXOpen::NXObject *> & objectArray /** The selected objects */
        );
        /** Select objects using filter defined by mask triples  @return  Ok, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObjects
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            NXOpen::Selection::SelectionAction action /** Indicates how the mask array will modify the selection filter */,
            bool includeFeatures /** Whether to allow the selection of features */,
            bool keepHighlighted /** Whether to keep the selection highlighted after it has been selected */,
            const std::vector<NXOpen::Selection::MaskTriple> & maskArray /** Modifies the list of object types that can be selected.
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. */,
            std::vector<NXOpen::NXObject *> & objectArray /** The selected objects */
        );
        /** Select objects using filter defined by selection type  @return  Ok, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObjects
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            bool keepHighlighted /** Whether to allow the selection of features */,
            const std::vector<NXOpen::Selection::SelectionType> & typeArray /** The types that can be selected */,
            std::vector<NXOpen::NXObject *> & objectArray /** The selected objects */
        );
        /** Select object  @return  Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObject
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            bool includeFeatures /** Whether to allow the selection of features */,
            bool keepHighlighted /** Whether to keep the selection highlighted after it has been selected */,
            NXOpen::NXObject ** object /** The selected object */,
            NXOpen::Point3d* cursor /** Absolute coordinates of cursor position. This is
                                                undefined if object is selected by name */
        );
        /** Select object using filter defined by mask triples  @return  Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObject
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            NXOpen::Selection::SelectionAction action /** Indicates how the mask array will modify the selection filter */,
            bool includeFeatures /** Whether to allow the selection of features */,
            bool keepHighlighted /** Whether to keep the selection highlighted after it has been selected */,
            const std::vector<NXOpen::Selection::MaskTriple> & maskArray /** Modifies the list of object types that can be selected.
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. */,
            NXOpen::NXObject ** object /** The selected object */,
            NXOpen::Point3d* cursor /** Absolute coordinates of cursor position. This is
                                                undefined if object is selected by name */
        );
        /** Select object using filter defined by selection type  @return  Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectObject
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & title /** Dialog title   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionScope scope /** Selection scope */,
            bool keepHighlighted /** Whether to allow the selection of features */,
            const std::vector<NXOpen::Selection::SelectionType> & typeArray /** The types of objects that can be selected */,
            NXOpen::NXObject ** object /** The selected object */,
            NXOpen::Point3d* cursor /** Absolute coordinates of cursor position. This is
                                                undefined if object is selected by name */
        );
        /** Select features  @return  Ok, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::Response SelectFeatures
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::Selection::SelectionFeatureType featType /** The types of features that are selectable */,
            std::vector<NXOpen::Features::Feature *> & featureArray /** The selected features */
        );
        /** Select screen position on graphics display  @return  Pick, Back, or Cancel  <br> License requirements : None */
        public: NXOpen::Selection::DialogResponse SelectScreenPosition
        (
            const NXString & message /** Cue line message to display   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            NXOpen::View ** object /** View of selected screen location */,
            NXOpen::Point3d* screenPosition /** Selected screen position */
        );
        /** Returns the number of objects currently selected  @return  The number of objects currently selected  <br> License requirements : None */
        public: int GetNumSelectedObjects
        (
        );
        /** Returns the n'th object on the selection list     @return  The object at the given position on the selection list. Returns NULL if the index parameter
                                                is greater than the length of the list  <br> License requirements : None */
        public: NXOpen::NXObject * GetSelectedObject
        (
            int index /** The index. Should be between 0 and @link GetNumSelectedObjects GetNumSelectedObjects@endlink  */
        );
        /** Sets the types of objects that are selectable. If this function is not
                called to set the mask, then the default mask is all standard types.
             <br> License requirements : None */
        public: void SetSelectionMask
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            NXOpen::Selection::SelectionAction action /** Mask action */,
            const std::vector<NXOpen::Selection::MaskTriple> & maskArray /** Mask triples */
        );
        /** Sets the selection type. It can be called from a callback to change 
            the type of selection associated with the dialog.  <br> License requirements : None */
        public: void SetSelectType
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            NXOpen::Selection::UistylerSelectionType type /** Selection type */
        );
        /** Specify selection filter callback for additional filtering based on
                application specific criteria, and/or selection callback to perform
                application specific processing for each selection gesture processed. 
                Both the filter callback and the selection callback are passed object 
                to @link  SelectionHandle   SelectionHandle @endlink  which can be used to inquire 
                other selection data or modify selection. This selection handle object 
                is no longer valid after the filter callback or selection callback is exited.
             <br> License requirements : None */
        public: void SetSelectionCallbacks
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            const NXOpen::Selection::FilterCallback&  filterproc /** Filter callback for additional user specific
            filtering. */,
            const NXOpen::Selection::SelectionCallback&  selcb /** Selection callback for application specific
            processing. */
        );
        /** Gets whether or not the user defined class is available for selection.  @return  Allow the selection of this UserDefinedClass  <br> License requirements : None */
        public: bool GetSelectionStatusOfUserDefinedClass
        (
            NXOpen::UserDefinedObjects::UserDefinedClass * udoClass /** The UserDefinedClass in question */
        );
        /** Sets whether or not the user defined class is available for selection.  <br> License requirements : None */
        public: void SetSelectionStatusOfUserDefinedClass
        (
            NXOpen::UserDefinedObjects::UserDefinedClass * udoClass /** The UserDefinedClass in question */,
            bool selectionStatus /** Allow the selection of this UserDefinedClass */
        );
        /** Removes objects from the selection list.
            This function is to be used with dialogs created with the UIStyler and
            with the @link  SelectObjects   SelectObjects @endlink  function. It can be called
            from the selection callback. It cannot be called from the selection filter procedure.
            
            If any of the objects are not in the list, an error is returned and NO
            objects are removed from the list.
            
            It could be called by the selection callback to remove
            objects from the selection list. For example, based on objects just
            deselected, the application may need to remove other associated
            objects from the selection list.
             <br> License requirements : None */
        public: void RemoveFromSelectionList
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            const std::vector<NXOpen::NXObject *> & objs /** Array of object */,
            bool unhighlight /** If true, unhighlight objects */
        );
        /** Removes all the objects from the selection list and optionally unhighlights them.
            You use this function with dialogs created with the UIStyler and with the 
            @link  SelectObjects   SelectObjects @endlink  function.
             <br> License requirements : None */
        public: void RemoveAllFromSelectionList
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            bool unhighlight /** If true, unhighlight objects */
        );
        /** Inquires if object is selected.
            You use this function with dialogs created with the UIStyler and with
            the @link  SelectObjects   SelectObjects @endlink  function.
             @return  If true, object is in the selection list, else false.  <br> License requirements : None */
        public: bool IsObjectInSelectionList
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            NXOpen::NXObject * object /** Object */
        );
        /** Returns the number of objects currently selected.
            You can use this function with UIStyler dialogs and with
            @link  SelectObjects   SelectObjects @endlink .
             @return  Count of objects selected  <br> License requirements : None */
        public: int AskSelectionListCount
        (
            NXOpen::SelectionHandle * select /** Selection handle */
        );
        /** Returns the number of objects selected and a pointer to an array of
            tags of the objects selected. You can use this function with the UIStyler dialogs and with
            @link  SelectObjects   SelectObjects @endlink .  <br> License requirements : None */
        public: void AskSelectionObjectList
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            std::vector<NXOpen::NXObject *> & objects /** Selected objects. */
        );
        /** Add objects to the selection list.
            Any objects already in the selection list are ignored. You can use this function 
            with UIStyler dialogs and with the @link  SelectObjects 
              SelectObjects 
            @endlink  function. You can call this from the constructor callback/selection
             initialization procedure to begin the dialog with objects already selected. 
             The user can then review these objects, and if desired, deselect them.
            
            The application selection callback can also call this function to add other objects 
            to the selection list based on the objects(s) just selected. The selection filter 
            procedure cannot call this function. You cannot use this function with 
            @link  SelectObjects   SelectObjects @endlink . Based on the object(s) just selected, other 
            objects may need to be selected. For example, all edges of the selected face 
            or all faces tangent to the selected face.
             <br> License requirements : None */
        public: void AddToSelectionList
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            const std::vector<NXOpen::NXObject *> & objs /** Objects to be added in the selection list */,
            bool highlightFlag /** If true, highlight objects */
        );
        /** Returns the information in @link  Selection::SelectionDescriptor   Selection::SelectionDescriptor @endlink  
            describing the selection that was just performed.
             @return   <br> License requirements : None */
        public: NXOpen::Selection::SelectionDescriptor AskSelectionDescriptor
        (
            NXOpen::SelectionHandle * select /** select */ 
        );
        /** Returns the view and absolute coordinates of the cursor position for the associated selection. 
                If an object was selected, the view returned is the view in which the object was selected. 
                For single position, the view is the view of the cursor. If the object was selected by name, 
                view = NULL and the cursor position is undefined.
             @return   <br> License requirements : None */
        public: NXOpen::Point3d AskSelectionCursorPosition
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            NXOpen::View ** view /** view */ 
        );
        /** Returns the absolute coordinates of the rectangle cursor positions.
            The view that returns is the view of the button down position.
            
            button down position - is the position where you press and hold mouse button 1.
            button up position -   is the position where you release mouse button 1.
            
            Pos1 and Pos2 are the absolute coordinates of the button down and
            button up positions respectively. Pos3 is the absolute coordinates of
            the rectangle corner which, as viewed on the screen, is horizontal with
            pos1. Pos4 is the absolute coordinates of the rectangle corner which,
            as viewed on the screen, is horizontal with pos2.
            Returns an error if the last gesture was not rectangle.
             @return  View of button down position  <br> License requirements : None */
        public: NXOpen::View * AskSelectionRectanglePosition
        (
            NXOpen::SelectionHandle * select /** Selection handle */,
            NXOpen::Point3d* position1 /** Absolute coordinates of the button down position */,
            NXOpen::Point3d* position2 /** Absolute coordinates of the button up position */,
            NXOpen::Point3d* position3 /** Absolute coordinates of corner of screen rectangle
                                           which is horizontal with button down position*/,
            NXOpen::Point3d* position4 /** Absolute coordinates of corner of screen rectangle
                                           which is horizontal with button up position */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
