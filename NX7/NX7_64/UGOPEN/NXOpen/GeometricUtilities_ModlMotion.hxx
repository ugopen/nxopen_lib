#ifndef NXOpen_GEOMETRICUTILITIES_MODLMOTION_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_MODLMOTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ModlMotion.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_ModlDistanceAngle.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/GeometricUtilities_OrientXpressBuilder.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    class Axis;
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class ModlDistanceAngle;
    }
    namespace GeometricUtilities
    {
        class OrientXpressBuilder;
    }
    class Plane;
    class Point;
    namespace GeometricUtilities
    {
        class _ModlMotionBuilder;
        /**
            Represents a @link GeometricUtilities::ModlMotion GeometricUtilities::ModlMotion@endlink 
            */
        class NXOPENCPPEXPORT ModlMotion : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** 
                    Represents the options of Motion. 
                    */
            public: enum Options
            {
                OptionsDistanceAngle/** Move by Distance-Angle */,
                OptionsDistance/** Move by Distance */,
                OptionsAngle/** Move by Angle */,
                OptionsDistanceBetweenPoints/** Move by Distance between Points */,
                OptionsRadialDistance/** Move by Radial Distance */,
                OptionsPointToPoint/** Move by Point to Point */,
                OptionsRotateByThreePoints/** Move by Rotate by Three Points */,
                OptionsAlignAxisVector/** Move by Align Axis to Vector */,
                OptionsCsysToCsys/** Move by CSYS to CSYS */,
                OptionsDynamic/** Move by Dynamic */,
                OptionsDeltaXyz/** Move by delta XYZ */,
                OptionsNone/** No move */
            };

            /** 
                    Represents the options of Delta XYZ. 
                    */
            public: enum Delta
            {
                DeltaReferenceAcsWorkPart/** Reference CSYS is absolute coordinate system in the work part */,
                DeltaReferenceAcsDisplayPart/** Reference CSYS is absolute coordinate system in the display part */,
                DeltaReferenceWcsWorkPart/** Reference CSYS is work coordinate system in the work part */,
                DeltaReferenceWcsDisplayPart/** Reference CSYS is work coordinate system in the display part */
            };

            private: friend class  _ModlMotionBuilder;
            protected: ModlMotion();
            /**Returns  the options.
                    Control the Motion methods.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion::Options Option
            (
            );
            /**Sets  the options.
                    Control the Motion methods.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOption
            (
                NXOpen::GeometricUtilities::ModlMotion::Options type /** type */ 
            );
            /**Returns the direction of @link  GeometricUtilities::ModlMotion::OptionsDistance   GeometricUtilities::ModlMotion::OptionsDistance @endlink  
                    motion option.  <br> License requirements : None */
            public: NXOpen::Direction * DistanceVector
            (
            );
            /**Returns  the orientXpress.
                    OrientXpress used as overlay in Motion.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OrientXpressBuilder * OrientXpress
            (
            );
            /**Sets the direction of @link  GeometricUtilities::ModlMotion::OptionsDistance   GeometricUtilities::ModlMotion::OptionsDistance @endlink  
                    motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceVector
            (
                NXOpen::Direction * distanceVector /** distancevector */ 
            );
            /**Returns the distance value of @link  GeometricUtilities::ModlMotion::OptionsDistance   GeometricUtilities::ModlMotion::OptionsDistance @endlink  
                    motion option.  <br> License requirements : None */
            public: NXOpen::Expression * DistanceValue
            (
            );
            /**Returns the origin point of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                    motion option.  <br> License requirements : None */
            public: NXOpen::Point * DistanceBetweenPointsOriginPoint
            (
            );
            /**Sets the origin point of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                    motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceBetweenPointsOriginPoint
            (
                NXOpen::Point * originPoint /** originpoint */ 
            );
            /**Returns  the measure point of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Point * DistanceBetweenPointsMeasurePoint
            (
            );
            /**Sets  the measure point of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceBetweenPointsMeasurePoint
            (
                NXOpen::Point * measurePoint /** measurepoint */ 
            );
            /**Returns  the direction of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Direction * DistanceBetweenPointsVector
            (
            );
            /**Sets  the direction of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceBetweenPointsVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the distance of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Expression * DistanceBetweenPointsDistance
            (
            );
            /**Returns  the distance between origin point and face of @link  GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints   GeometricUtilities::ModlMotion::OptionsDistanceBetweenPoints @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Expression * DistanceBetweenPointsOriginDistance
            (
            );
            /**Returns  the axis of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Axis * RadialAxis
            (
            );
            /**Sets  the axis of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadialAxis
            (
                NXOpen::Axis * radialAxis /** radialaxis */ 
            );
            /**Returns  the measure point of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Point * RadialMeasurePoint
            (
            );
            /**Sets  the measure point of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadialMeasurePoint
            (
                NXOpen::Point * radialMeasuPoint /** radialmeasupoint */ 
            );
            /**Returns  the distance value of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Expression * RadialDistance
            (
            );
            /**Returns  the distance between axis point and face of @link  GeometricUtilities::ModlMotion::OptionsRadialDistance   GeometricUtilities::ModlMotion::OptionsRadialDistance @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Expression * RadialOriginDistance
            (
            );
            /**Returns  the "from point" of @link  GeometricUtilities::ModlMotion::OptionsPointToPoint   GeometricUtilities::ModlMotion::OptionsPointToPoint @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Point * FromPoint
            (
            );
            /**Sets  the "from point" of @link  GeometricUtilities::ModlMotion::OptionsPointToPoint   GeometricUtilities::ModlMotion::OptionsPointToPoint @endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFromPoint
            (
                NXOpen::Point * fromPoint /** frompoint */ 
            );
            /**Returns  the point where object is moved for motion option 
                    @link  GeometricUtilities::ModlMotion::OptionsPointToPoint   GeometricUtilities::ModlMotion::OptionsPointToPoint @endlink   <br> License requirements : None */
            public: NXOpen::Point * ToPoint
            (
            );
            /**Sets  the point where object is moved for motion option 
                    @link  GeometricUtilities::ModlMotion::OptionsPointToPoint   GeometricUtilities::ModlMotion::OptionsPointToPoint @endlink   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToPoint
            (
                NXOpen::Point * toPoint /** topoint */ 
            );
            /**Returns  the angular axis of @link  GeometricUtilities::ModlMotion::OptionsAngle   GeometricUtilities::ModlMotion::OptionsAngle @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Axis * AngularAxis
            (
            );
            /**Sets  the angular axis of @link  GeometricUtilities::ModlMotion::OptionsAngle   GeometricUtilities::ModlMotion::OptionsAngle @endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngularAxis
            (
                NXOpen::Axis * angularAxis /** angularaxis */ 
            );
            /**Returns  the angle of @link  GeometricUtilities::ModlMotion::OptionsAngle   GeometricUtilities::ModlMotion::OptionsAngle @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the direction of @link  GeometricUtilities::ModlMotion::OptionsRotateByThreePoints   GeometricUtilities::ModlMotion::OptionsRotateByThreePoints @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Axis * RotateVector
            (
            );
            /**Sets  the direction of @link  GeometricUtilities::ModlMotion::OptionsRotateByThreePoints   GeometricUtilities::ModlMotion::OptionsRotateByThreePoints @endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotateVector
            (
                NXOpen::Axis * rotateVector /** rotatevector */ 
            );
            /**Returns  the start point of @link  GeometricUtilities::ModlMotion::OptionsRotateByThreePoints   GeometricUtilities::ModlMotion::OptionsRotateByThreePoints @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point of @link  GeometricUtilities::ModlMotion::OptionsRotateByThreePoints   GeometricUtilities::ModlMotion::OptionsRotateByThreePoints @endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** startpoint */ 
            );
            /**Returns  the end point of @link GeometricUtilities::ModlMotion::OptionsRotateByThreePoints GeometricUtilities::ModlMotion::OptionsRotateByThreePoints@endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Point * EndPoint
            (
            );
            /**Sets  the end point of @link GeometricUtilities::ModlMotion::OptionsRotateByThreePoints GeometricUtilities::ModlMotion::OptionsRotateByThreePoints@endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndPoint
            (
                NXOpen::Point * endPoint /** endpoint */ 
            );
            /**Returns  the axis of @link GeometricUtilities::ModlMotion::OptionsAlignAxisVector GeometricUtilities::ModlMotion::OptionsAlignAxisVector@endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Axis * AlignVector
            (
            );
            /**Sets  the axis of @link GeometricUtilities::ModlMotion::OptionsAlignAxisVector GeometricUtilities::ModlMotion::OptionsAlignAxisVector@endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAlignVector
            (
                NXOpen::Axis * alignVector /** alignvector */ 
            );
            /**Returns  the vector of @link GeometricUtilities::ModlMotion::OptionsAlignAxisVector GeometricUtilities::ModlMotion::OptionsAlignAxisVector@endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Direction * ToVector
            (
            );
            /**Sets  the vector of @link GeometricUtilities::ModlMotion::OptionsAlignAxisVector GeometricUtilities::ModlMotion::OptionsAlignAxisVector@endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToVector
            (
                NXOpen::Direction * toVector /** tovector */ 
            );
            /**Returns  the move handle toggle of @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option.If true,moves only manipulator handle. If false, moves both manipulator handle and object. <br> License requirements : None */
            public: bool MoveHandle
            (
            );
            /**Sets  the move handle toggle of @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option.If true,moves only manipulator handle. If false, moves both manipulator handle and object. <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMoveHandle
            (
                bool moveHandle /** movehandle */ 
            );
            /**Returns  the origin point of manipulator for @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Point3d ManipulatorOrigin
            (
            );
            /**Sets  the origin point of manipulator for @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetManipulatorOrigin
            (
                const NXOpen::Point3d & manipulatorOrigin /** manipulatororigin */ 
            );
            /**Returns  the matrix of manipulator for @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::Matrix3x3 ManipulatorMatrix
            (
            );
            /**Sets  the matrix of manipulator for @link GeometricUtilities::ModlMotion::OptionsDynamic GeometricUtilities::ModlMotion::OptionsDynamic@endlink 
                     motion option.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetManipulatorMatrix
            (
                const NXOpen::Matrix3x3 & manipulatorMatrix /** manipulatormatrix */ 
            );
            /**Returns  the distance-angle of @link  GeometricUtilities::ModlMotion::OptionsDistanceAngle   GeometricUtilities::ModlMotion::OptionsDistanceAngle @endlink 
                     motion option.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlDistanceAngle * DistanceAngle
            (
            );
            /**Returns  the "from csys" of @link  GeometricUtilities::ModlMotion::OptionsCsysToCsys   GeometricUtilities::ModlMotion::OptionsCsysToCsys @endlink 
                     motion option .  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * FromCsys
            (
            );
            /**Sets  the "from csys" of @link  GeometricUtilities::ModlMotion::OptionsCsysToCsys   GeometricUtilities::ModlMotion::OptionsCsysToCsys @endlink 
                     motion option .  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFromCsys
            (
                NXOpen::CoordinateSystem * fromcsys /** fromcsys */ 
            );
            /**Returns  the "to csys" where object is moved for motion option 
                    @link  GeometricUtilities::ModlMotion::OptionsCsysToCsys   GeometricUtilities::ModlMotion::OptionsCsysToCsys @endlink .  <br> License requirements : None */
            public: NXOpen::CoordinateSystem * ToCsys
            (
            );
            /**Sets  the "to csys" where object is moved for motion option 
                    @link  GeometricUtilities::ModlMotion::OptionsCsysToCsys   GeometricUtilities::ModlMotion::OptionsCsysToCsys @endlink .  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToCsys
            (
                NXOpen::CoordinateSystem * tocsys /** tocsys */ 
            );
            /**Returns  the delta enum  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ModlMotion::Delta DeltaEnum
            (
            );
            /**Sets  the delta enum  <br> License requirements : None */
            public: void SetDeltaEnum
            (
                NXOpen::GeometricUtilities::ModlMotion::Delta deltaEnum /** deltaenum */ 
            );
            /**Returns  the delta x  <br> License requirements : None */
            public: double DeltaX
            (
            );
            /**Sets  the delta x  <br> License requirements : None */
            public: void SetDeltaX
            (
                double deltaX /** deltax */ 
            );
            /**Returns  the delta y  <br> License requirements : None */
            public: double DeltaY
            (
            );
            /**Sets  the delta y  <br> License requirements : None */
            public: void SetDeltaY
            (
                double deltaY /** deltay */ 
            );
            /**Returns  the delta z  <br> License requirements : None */
            public: double DeltaZ
            (
            );
            /**Sets  the delta z  <br> License requirements : None */
            public: void SetDeltaZ
            (
                double deltaZ /** deltaz */ 
            );
            /**Returns  the delta xc  <br> License requirements : None */
            public: NXOpen::Expression * DeltaXc
            (
            );
            /**Returns  the delta yc  <br> License requirements : None */
            public: NXOpen::Expression * DeltaYc
            (
            );
            /**Returns  the delta zc  <br> License requirements : None */
            public: NXOpen::Expression * DeltaZc
            (
            );
            /** Set motion to two dimensions along the given plane  <br> License requirements : None */
            public: void SetMotionToTwoDimensions
            (
                NXOpen::Plane * plane /** Plane to which motion needs to be restricted*/
            );
            /** Reset motion to three dimensions  <br> License requirements : None */
            public: void ResetMotionToThreeDimensions
            (
            );
            /** Set the update option  <br> License requirements : None */
            public: void SetUpdateOption
            (
                NXOpen::SmartObject::UpdateOption option /** Update option*/
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
