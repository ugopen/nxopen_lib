#ifndef NXOpen_CAM_FEATUREMILLINGBUILDER_HXX_INCLUDED
#define NXOpen_CAM_FEATUREMILLINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_FeatureMillingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_PlanarOperationBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class FeatureMillingBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class PlanarOperationBuilder;
    }
    namespace CAM
    {
        class _FeatureMillingBuilderBuilder;
        /** Represents a FeatureMilling Builder  <br> To create a new instance of this class, use @link CAM::OperationCollection::CreateFeatureMillingBuilder CAM::OperationCollection::CreateFeatureMillingBuilder@endlink  <br> */
        class NXOPENCPPEXPORT FeatureMillingBuilder : public CAM::PlanarOperationBuilder
        {
            /** Available types for Engage Retract Auto Type in feature based milling operation */
            public: enum EngretAutoTypeTypes
            {
                EngretAutoTypeTypesLinear/** Linear */,
                EngretAutoTypeTypesCircular/** Circular */
            };

            /** Available types for transfer method type in planar mill operation */
            public: enum TransferMethodTypes
            {
                TransferMethodTypesClearancePlane/** Clearance Plane */,
                TransferMethodTypesPreviousPlane/** Previous Plane */,
                TransferMethodTypesBlankPlane/** Blank Plane */,
                TransferMethodTypesDirect/** Direct */
            };

            /** Available types for Engage Auto Ramp Method in planar mill operation */
            public: enum EngAutoRampMethodTypes
            {
                EngAutoRampMethodTypesOnLines/** On Lines */,
                EngAutoRampMethodTypesOnLinesAndArcs/** On Shape */,
                EngAutoRampMethodTypesHelicalRamping/** Helical */
            };

            /** The available types for cutter compensation method in planar mill operation */
            public: enum CutterCompensationTypes
            {
                CutterCompensationTypesNone/** none */,
                CutterCompensationTypesEngageRetract/** engage retract */,
                CutterCompensationTypesAgainstWall/** against wall */
            };

            private: friend class  _FeatureMillingBuilderBuilder;
            protected: FeatureMillingBuilder();
        };
    }
}
#undef EXPORTLIBRARY
#endif
