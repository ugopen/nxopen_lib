#ifndef NXOpen_GEOMETRICUTILITIES_STARTHOLEDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_STARTHOLEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_StartHoleData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_StartHoleData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class StartHoleData;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _StartHoleDataBuilder;
        /** Represents a @link GeometricUtilities::StartHoleData GeometricUtilities::StartHoleData@endlink  */
        class NXOPENCPPEXPORT StartHoleData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** This enum represents hole form options in start plate of hole series. */
            public: enum HoleForms
            {
                HoleFormsSimple/** Simple hole form */,
                HoleFormsCounterbored/** Counterbored hole form */,
                HoleFormsCountersink/** Countersink hole form */
            };

            private: friend class  _StartHoleDataBuilder;
            protected: StartHoleData();
            /**Returns  the hole form  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::StartHoleData::HoleForms HoleForm
            (
            );
            /**Sets  the hole form  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleForm
            (
                NXOpen::GeometricUtilities::StartHoleData::HoleForms holeForm /** holeform */ 
            );
            /**Returns  the screw type  <br> License requirements : None */
            public: NXString ScrewType
            (
            );
            /**Sets  the screw type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewType
            (
                const NXString & screwType /** screwtype */ 
            );
            /**Returns  the screw size  <br> License requirements : None */
            public: NXString ScrewSize
            (
            );
            /**Sets  the screw size  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewSize
            (
                const NXString & screwSize /** screwsize */ 
            );
            /**Returns  the fit option  <br> License requirements : None */
            public: NXString FitOption
            (
            );
            /**Sets  the fit option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFitOption
            (
                const NXString & fitOption /** fitoption */ 
            );
            /**Returns  the counterbore diameter  <br> License requirements : None */
            public: NXOpen::Expression * CounterboreDiameter
            (
            );
            /**Returns  the counterbore depth  <br> License requirements : None */
            public: NXOpen::Expression * CounterboreDepth
            (
            );
            /**Returns  the countersink diameter  <br> License requirements : None */
            public: NXOpen::Expression * CountersinkDiameter
            (
            );
            /**Returns  the countersink angle  <br> License requirements : None */
            public: NXOpen::Expression * CountersinkAngle
            (
            );
            /**Returns  the hole diameter  <br> License requirements : None */
            public: NXOpen::Expression * HoleDiameter
            (
            );
            /**Returns  the  relief  enabled  <br> License requirements : None */
            public: bool ReliefEnabled
            (
            );
            /**Sets  the  relief  enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReliefEnabled
            (
                bool reliefEnabled /** reliefenabled */ 
            );
            /**Returns  the relief depth  <br> License requirements : None */
            public: NXOpen::Expression * ReliefDepth
            (
            );
            /**Returns  the start chamfer enabled  <br> License requirements : None */
            public: bool StartChamferEnabled
            (
            );
            /**Sets  the start chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartChamferEnabled
            (
                bool startChamferEnabled /** startchamferenabled */ 
            );
            /**Returns  the start chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * StartChamferOffset
            (
            );
            /**Returns  the start chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * StartChamferAngle
            (
            );
            /**Returns  the neck chamfer enabled  <br> License requirements : None */
            public: bool NeckChamferEnabled
            (
            );
            /**Sets  the neck chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNeckChamferEnabled
            (
                bool neckChamferEnabled /** neckchamferenabled */ 
            );
            /**Returns  the neck chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * NeckChamferOffset
            (
            );
            /**Returns  the neck chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * NeckChamferAngle
            (
            );
            /**Returns  the end chamfer enabled  <br> License requirements : None */
            public: bool EndChamferEnabled
            (
            );
            /**Sets  the end chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndChamferEnabled
            (
                bool endChamferEnabled /** endchamferenabled */ 
            );
            /**Returns  the end chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * EndChamferOffset
            (
            );
            /**Returns  the end chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * EndChamferAngle
            (
            );
            /**Returns  the boolean operation  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
