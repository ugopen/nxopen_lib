#ifndef NXOpen_GEOMETRICUTILITIES_MODLDISTANCEANGLE_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_MODLDISTANCEANGLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_ModlDistanceAngle.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_ModlDistanceAngle.hxx>
#include <NXOpen/GeometricUtilities_OrientXpressBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class ModlDistanceAngle;
    }
    class Axis;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class OrientXpressBuilder;
    }
    namespace GeometricUtilities
    {
        class _ModlDistanceAngleBuilder;
        /**
            Represents a @link GeometricUtilities::ModlDistanceAngle GeometricUtilities::ModlDistanceAngle@endlink 
            */
        class NXOPENCPPEXPORT ModlDistanceAngle : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _ModlDistanceAngleBuilder;
            protected: ModlDistanceAngle();
            /**Returns  the linear axis of distance.  <br> License requirements : None */
            public: NXOpen::Axis * LinearAxis
            (
            );
            /**Sets  the linear axis of distance.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLinearAxis
            (
                NXOpen::Axis * linearAxis /** linearaxis */ 
            );
            /**Returns  the orientXpress.
                    OrientXpress used as overlay in Motion.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OrientXpressBuilder * OrientXpress
            (
            );
            /**Returns  the distance of linear transform.  <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );
            /**Returns  the value of angular transform.  <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the direction of angular dimensions.  <br> License requirements : None */
            public: NXOpen::Vector3d AngularDirection
            (
            );
            /**Sets  the direction of angular dimensions.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngularDirection
            (
                const NXOpen::Vector3d & angularDirection /** angulardirection */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
