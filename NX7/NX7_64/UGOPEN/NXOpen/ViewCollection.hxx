#ifndef NXOpen_VIEWCOLLECTION_HXX_INCLUDED
#define NXOpen_VIEWCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ViewCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Display_Background.hxx>
#include <NXOpen/Display_ExtractScene.hxx>
#include <NXOpen/Display_Image.hxx>
#include <NXOpen/Display_ImageBasedLighting.hxx>
#include <NXOpen/Display_LightBuilder.hxx>
#include <NXOpen/Display_Lighting.hxx>
#include <NXOpen/Display_NonProportionalZoom.hxx>
#include <NXOpen/Display_Reflection.hxx>
#include <NXOpen/Display_Scene.hxx>
#include <NXOpen/Display_Stage.hxx>
#include <NXOpen/Display_Wall.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class ViewCollection;
    class BasePart;
    class View;
    namespace Display
    {
        class Background;
    }
    namespace Display
    {
        class ExtractScene;
    }
    namespace Display
    {
        class Image;
    }
    namespace Display
    {
        class ImageBasedLighting;
    }
    namespace Display
    {
        class LightBuilder;
    }
    namespace Display
    {
        class Lighting;
    }
    namespace Display
    {
        class NonProportionalZoom;
    }
    namespace Display
    {
        class Reflection;
    }
    namespace Display
    {
        class Scene;
    }
    namespace Display
    {
        class Stage;
    }
    namespace Display
    {
        class Wall;
    }
    class Light;
    /**
     Represents a collection of @link View View@endlink s. 
     <br> To obtain an instance of this class, refer to @link BasePart BasePart@endlink  <br> */
    class NXOPENCPPEXPORT ViewCollection : public TaggedObjectCollection
    {
        private: NXOpen::BasePart* m_owner;
        public: explicit ViewCollection(NXOpen::BasePart *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Iterator for accessing the contents of the collection. */
        class iterator
        {
        public:
            typedef View * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }//lint !e1401 m_state is not initialized 
            explicit iterator(NXOpen::ViewCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }//lint !e1401 m_state is not initialized 
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::ViewCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Refreshes all the views in the current layout  <br> License requirements : None */
        public: void Refresh
        (
        );
        /** Returns the active views in the view collection.  @return  List of active views  <br> License requirements : None */
        public: std::vector<NXOpen::View *> GetActiveViews
        (
        );
        /** Returns a list of custom view names in the view collection.  @return  List of custom view names  <br> License requirements : None */
        public: std::vector<NXString> GetCustomViews
        (
        );
        /**Returns  the work view of the part.  <br> License requirements : None */
        public: NXOpen::View * WorkView
        (
        );
        /** Returns whether the work view of the given part is in expand state.  @return  true if the work view is expanded  <br> License requirements : None */
        public: bool IsWorkViewExpanded
        (
        );
        /** Saves a view with user specified name.  @return  Newly created view <br> License requirements : None */
        public: NXOpen::View * SaveAs
        (
            NXOpen::View * selectedView /** Selected view  */,
            const NXString & newViewName /** Selected name of the view    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            bool copyViewModifications /** True if view modifications to be copied */,
            bool moveViewDependencies /** True if view dependencies to be moved */
        );
        /** Saves current view.  <br> License requirements : None */
        public: void Save
        (
        );
        /** Finds the @link  View   View @endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  View with this identifier  <br> License requirements : None */
        public: NXOpen::View * FindObject
        (
            const NXString & journalIdentifier /** Identifier of the view to be found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Removes the work view from the expand state (assuming that it is
            in that state), restoring it to its normal size in its layout.  Other views
            in the layout become visible again.  If the work view is not in expand
            state, an error is returned.  The view remains the work view unless the view
            is a member view on a drawing sheet, in which case the sheet's view becomes
            the work view.  The given part must be the displayed part.
             <br>  In batch mode, the internal state of the view is no longer in
            expand state, but no display occurs.  <br>   <br> License requirements : None */
        public: void UnexpandWork
        (
        );
        /** Adjusts the center and scale of each view in the current layout such that all of each
            view is visible, except that this fit operation is not applied to member views on a drawing.
            If the work view is in expand state when this method is called, the work view is unexpanded
            before all of the views are fit.
             <br>  In batch mode, the data for each view is updated, but no display occurs.  <br>   <br> License requirements : None */
        public: void FitAll
        (
        );
        /** Regenerates the display of each view in the current layout.  The current scale of each
            view is used in determing the tolerances for rendering curves and facets within the view.
             <br>  In batch mode, the state of each view is updated, but no display occurs.  <br>  <br> License requirements : None */
        public: void Regenerate
        (
        );
        /** Updates the display of each view in the current layout.  This method redisplays
            those objects whose display has become out of date due to rotations of the view or
            increases in view scale.  For example: Following a rotation, the silhouettes of bodies
            in wireframe mode will be updated;  Following a significant scale increase, the faces
            of a body in shaded mode will be tessalated with tighter tolerances.
             <br>  In batch mode, the state of each view is updated, but no display occurs.  <br>  <br> License requirements : None */
        public: void UpdateDisplay
        (
        );
        /** Creates a @link Display::Scene Display::Scene@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::Scene * CreateScene
        (
            NXOpen::View * view /** view to which scene data will be associated */,
            bool makeReferencedObjects /** true if scene objects are to be created */
        );
        /** Creates a @link Display::Background Display::Background@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::Background * CreateBackground
        (
            NXOpen::View * view /** view to which background data will be associated */,
            bool makeReferencedObjects /** true if referenced image object is to be created */
        );
        /** Creates a @link Display::Image Display::Image@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::Image * CreateImage
        (
            NXOpen::View * view /** view to which image data will be associated */
        );
        /** Creates a @link Display::Stage Display::Stage@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::Stage * CreateStage
        (
            NXOpen::View * view /** view to which stage data will be associated */,
            bool makeReferencedObjects /** true if first wall's image object is to be created */
        );
        /** Creates a @link Display::Wall Display::Wall@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::Wall * CreateWall
        (
            NXOpen::View * view /** view to which stage data will be associated */,
            NXOpen::Display::Stage::WallType wallType /** where the wall sits in the Display.Stage */
        );
        /** Creates a @link Display::Reflection Display::Reflection@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::Reflection * CreateReflection
        (
            NXOpen::View * view /** view to which reflection data will be associated */,
            bool makeReferencedObjects /** true if referenced image object is to be created */
        );
        /** Creates a @link Display::Lighting Display::Lighting@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::Lighting * CreateLighting
        (
            NXOpen::View * view /** view to which lighting data will be associated */
        );
        /** Creates a @link Display::LightBuilder Display::LightBuilder@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::LightBuilder * CreateLightBuilder
        (
            NXOpen::Light * light /** light for which data will be modified */
        );
        /** Creates a @link Display::ImageBasedLighting Display::ImageBasedLighting@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::ImageBasedLighting * CreateImageBasedLighting
        (
            NXOpen::View * view /** view to which image-based lighting data will be associated */,
            bool makeReferencedObjects /** true if referenced image object is to be created */
        );
        /** Creates a @link Display::ExtractScene Display::ExtractScene@endlink   @return   <br> License requirements : None */
        public: NXOpen::Display::ExtractScene * CreateExtractScene
        (
            NXOpen::View * view /** view to which to extract the scene data will be associated */
        );
        /** Creates a @link Display::NonProportionalZoom Display::NonProportionalZoom@endlink   @return   <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
        public: NXOpen::Display::NonProportionalZoom * CreateNonProportionalZoom
        (
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
