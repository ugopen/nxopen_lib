#ifndef NXOpen_GEOMETRICUTILITIES_CURVEFITOPTIONS_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CURVEFITOPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CurveFitOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveFitOptions.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CurveFitOptions;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        class _CurveFitOptionsBuilder;
        /** Represents the curve fit data 
            */
        class NXOPENCPPEXPORT CurveFitOptions : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents the curve fit method */
            public: enum FitMethod
            {
                FitMethodCubic/** Cubic */,
                FitMethodQuintic/** Quintic */,
                FitMethodAdvanced/** Advanced */
            };

            private: friend class  _CurveFitOptionsBuilder;
            protected: CurveFitOptions();
            /**Sets  the curve fit method   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFitOption
            (
                NXOpen::GeometricUtilities::CurveFitOptions::FitMethod curveFitMethod /** curve fit method */
            );
            /**Returns  the curve fit method   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::CurveFitOptions::FitMethod FitOption
            (
            );
            /**Sets  the maximum degree method 
                    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaximumDegree
            (
                int maximumDegree /** maximum degree method */
            );
            /**Returns  the maximum degree method 
                    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int MaximumDegree
            (
            );
            /**Sets  the maximum segments method 
                    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMaximumSegments
            (
                int maximumSegments /** maximum segments */
            );
            /**Returns  the maximum segments method 
                    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int MaximumSegments
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
