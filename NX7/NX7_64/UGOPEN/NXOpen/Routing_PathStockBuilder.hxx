#ifndef NXOpen_ROUTING_PATHSTOCKBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_PATHSTOCKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_PathStockBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_PathStockBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class PathStockBuilder;
    }
    class Builder;
    class NXObject;
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _PathStockBuilderBuilder;
        /** Assigns stocks to segments based of users critiera and the current
                default stock.   <br> To create a new instance of this class, use @link Routing::RouteManager::CreatePathStockBuilder Routing::RouteManager::CreatePathStockBuilder@endlink  <br> */
        class NXOPENCPPEXPORT PathStockBuilder : public Builder
        {
            /** Determines how to choose which stock to assign. */
            public: enum AssignMethod
            {
                AssignMethodNone/** No Stock. */,
                AssignMethodDefaultStock/** Default Stock. */,
                AssignMethodFromStartObject/** Finds a stock based off of the
                                                                               default stock and the object
                                                                               selected by the user. */,
                AssignMethodDiameterValue/** User specified diameter, creates round
                                                                               space reservation stock. */,
                AssignMethodSpecifiedStock/** Stock selected from Specify Item dialog */
            };

            /** Determines the type of stock being assigned. */
            public: enum AssignStockType
            {
                AssignStockTypeStock/** Default stock type.             */,
                AssignStockTypeOverstock/** Overstock stock type.           */,
                AssignStockTypeFiller/** Filler stock type.              */,
                AssignStockTypeSpaceReservation/** Space Reservation stock type.   */
            };

            private: friend class  _PathStockBuilderBuilder;
            protected: PathStockBuilder();
            /**Returns  the method to determine which stock to assign.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::PathStockBuilder::AssignMethod AssignStockMethod
            (
            );
            /**Sets  the method to determine which stock to assign.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetAssignStockMethod
            (
                NXOpen::Routing::PathStockBuilder::AssignMethod method /** method */ 
            );
            /**Returns  the start object to use for the 
                        @link Routing::PathStockBuilder::AssignMethodFromStartObject Routing::PathStockBuilder::AssignMethodFromStartObject@endlink  
                        method of stock assignment.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::NXObject * StartObject
            (
            );
            /**Sets  the start object to use for the 
                        @link Routing::PathStockBuilder::AssignMethodFromStartObject Routing::PathStockBuilder::AssignMethodFromStartObject@endlink  
                        method of stock assignment.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStartObject
            (
                NXOpen::NXObject * startObject /** start object */ 
            );
            /** Assigns stock using the method defined by this stock builder object.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void AssignStock
            (
                const std::vector<NXOpen::Routing::ISegment *> & segments /** segments */ 
            );
            /**Returns  the diameter value to use for the 
                        @link Routing::PathStockBuilder::AssignMethodDiameterValue Routing::PathStockBuilder::AssignMethodDiameterValue@endlink  
                        method of stock assignment.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: double DiameterValue
            (
            );
            /**Sets  the diameter value to use for the 
                        @link Routing::PathStockBuilder::AssignMethodDiameterValue Routing::PathStockBuilder::AssignMethodDiameterValue@endlink  
                        method of stock assignment.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDiameterValue
            (
                double val /** val */ 
            );
            /** Updates an existing routing stock with settings stored in the builder. <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void UpdateExistingStock
            (
                NXOpen::Routing::Stock * existingStock /** Existing Stock */
            );
            /** Returns the specified stock to use for the 
                        @link Routing::PathStockBuilder::AssignMethodSpecifiedStock Routing::PathStockBuilder::AssignMethodSpecifiedStock@endlink  
                        method of stock assignment.  @return  Characteristic list used to find the appropriate 
                                                                            @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                                                                            See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink .  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::CharacteristicList * GetSpecifiedStock
            (
            );
            /** Returns the specified stock and applied characteristics to use for the 
                        @link Routing::PathStockBuilder::AssignMethodSpecifiedStock Routing::PathStockBuilder::AssignMethodSpecifiedStock@endlink  
                        method of stock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetSpecifiedStock
            (
                NXOpen::Routing::CharacteristicList ** stockPart /** Characteristic list used to find the appropriate 
                                                                                @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                                                                                See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList ** appliedCharx /** Applied characteristics for the specified stock. */
            );
            /** Sets the specified stock to use for the 
                        @link Routing::PathStockBuilder::AssignMethodSpecifiedStock Routing::PathStockBuilder::AssignMethodSpecifiedStock@endlink  
                        method of stock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSpecifiedStock
            (
                NXOpen::Routing::CharacteristicList * stockPart /** Characteristic list used to find the appropriate 
                                                                                @link Routing::StockData Routing::StockData@endlink  for building the stock.
                                                                                See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */
            );
            /** Sets the specified stock and applied characteristics to use for the 
                        @link Routing::PathStockBuilder::AssignMethodSpecifiedStock Routing::PathStockBuilder::AssignMethodSpecifiedStock@endlink  
                        method of stock assignment.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSpecifiedStock
            (
                NXOpen::Routing::CharacteristicList * stockPart /** Characteristic list used to find the appropriate 
                                                                                @link Routing::StockData Routing::StockData@endlink  for building the stock.
                                                                                See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList * appliedCharx /** Applied characteristics for the specified stock. */
            );
            /**Returns  the type of stock being assigned.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::PathStockBuilder::AssignStockType StockType
            (
            );
            /**Sets  the type of stock being assigned.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockType
            (
                NXOpen::Routing::PathStockBuilder::AssignStockType stockType /** stock type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
