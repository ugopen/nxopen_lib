#ifndef NXOpen_FEATURES_WRAPBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_WRAPBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_WrapBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_WrapBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class WrapBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class ScCollector;
    class Section;
    class SelectISurface;
    namespace Features
    {
        class _WrapBuilderBuilder;
        /**
            Represents a @link Features::WrapUnwrap Features::WrapUnwrap@endlink  builder. This class is used in the 
            process of creating or editing a wrap or unwrap curve feature, as well as creating
            wrapped or unwrapped curves not associated to a feature.
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateWrapBuilder Features::FeatureCollection::CreateWrapBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleTolerance </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        Associative </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        CutLineAngle.Value </td> <td> 
         
        180 (millimeters part), 180 (inches part) </td> </tr> 

        <tr><td> 
         
        DistanceTolerance </td> <td> 
         
        0.0254 (millimeters part), 0.001 (inches part) </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT WrapBuilder : public Features::FeatureBuilder
        {
            /** Settings for the type of wrap operation being performed. */
            public: enum Types
            {
                TypesWrap/** Curves are to be wrapped from a plane onto the selected faces, 
                                                               during edit you can get this value but any change will be ignored. */,
                TypesUnwrap/** Curves are to be unwrapped from the selected faces onto the tangent plane,
                                                               during edit you can get this value but any change will be ignored. */
            };

            private: friend class  _WrapBuilderBuilder;
            protected: WrapBuilder();
            /**Returns  the curves that are being wrapped or unwrapped.  <br> License requirements : None */
            public: NXOpen::Section * Curves
            (
            );
            /**Returns  the faces that the curves are being unwrapped from or wrapped to.  <br> License requirements : None */
            public: NXOpen::ScCollector * Faces
            (
            );
            /**Returns  the planar face or datum plane that the curves are being wrapped from or unwrapped to.  <br> License requirements : None */
            public: NXOpen::SelectISurface * Plane
            (
            );
            /**Returns  the specified plane that the curves are being wrapped from or unwrapped to.  <br> License requirements : None */
            public: NXOpen::Plane * SpecifyPlane
            (
            );
            /**Sets  the specified plane that the curves are being wrapped from or unwrapped to.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSpecifyPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the flag that indicates during creation if a feature is to be created or just the curves,
                        true indicates a feature will be created.  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the flag that indicates during creation if a feature is to be created or just the curves,
                        true indicates a feature will be created.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the angle, measured from the point of tangency of the plane and the faces,
                        at which curves will be split during the wrapping operation.  <br> License requirements : None */
            public: NXOpen::Expression * CutLineAngle
            (
            );
            /**Returns  the distance tolerance used to determine the sampling of the curve during processing, and
                        the accuracy of the output.  <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance used to determine the sampling of the curve during processing, and
                        the accuracy of the output.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance used to determine the sampling of the curve during processing, and
                        the accuracy of the output.  <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance used to determine the sampling of the curve during processing, and
                        the accuracy of the output.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the type of operation being performed.  <br> License requirements : None */
            public: NXOpen::Features::WrapBuilder::Types Type
            (
            );
            /**Sets  the type of operation being performed.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::WrapBuilder::Types type /** type */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
