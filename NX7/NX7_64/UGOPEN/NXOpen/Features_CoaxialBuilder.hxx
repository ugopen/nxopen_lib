#ifndef NXOpen_FEATURES_COAXIALBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_COAXIALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_CoaxialBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_CoaxialBuilder.hxx>
#include <NXOpen/Features_FaceRecognitionBuilder.hxx>
#include <NXOpen/GeometricUtilities_FaceChangeOverflowBehavior.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class CoaxialBuilder;
    }
    namespace Features
    {
        class FaceRecognitionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class FaceChangeOverflowBehavior;
    }
    class SelectDisplayableObject;
    class SelectFace;
    namespace Features
    {
        class _CoaxialBuilderBuilder;
        /**
            Represents a @link Features::Coaxial Features::Coaxial@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateCoaxialBuilder Features::FeatureCollection::CreateCoaxialBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        MoveAlongFace.CoaxialEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.CoplanarAxesEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.CoplanarEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.EqualDiameterEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.OffsetEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.ParallelEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.PerpendicularEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.SymmetricEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.TangentEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoveAlongFace.UseFaceBrowse </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT CoaxialBuilder : public Features::FeatureBuilder
        {
            private: friend class  _CoaxialBuilderBuilder;
            protected: CoaxialBuilder();
            /**Returns  the motion face.  <br> License requirements : None */
            public: NXOpen::SelectFace * MotionFace
            (
            );
            /**Returns  the stationary face  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * StationaryFace
            (
            );
            /**Returns  the move along face.  <br> License requirements : None */
            public: NXOpen::Features::FaceRecognitionBuilder * MoveAlongFace
            (
            );
            /**Returns  the face change overflow behavior. Please refer @link GeometricUtilities::FaceChangeOverflowBehavior GeometricUtilities::FaceChangeOverflowBehavior@endlink  for details.  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FaceChangeOverflowBehavior * FaceChangeOverflowBehavior
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
