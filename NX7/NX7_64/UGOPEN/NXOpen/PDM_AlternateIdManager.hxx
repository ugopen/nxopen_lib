#ifndef NXOpen_PDM_ALTERNATEIDMANAGER_HXX_INCLUDED
#define NXOpen_PDM_ALTERNATEIDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_AlternateIdManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PDM_AlternateIdManager.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace PDM
    {
        class AlternateIdManager;
    }
    namespace PDM
    {
        /** This class is responsible for setting and getting NX Manager database attribute.  <br> Use @link PDM::PartBuilder::NewAlternateIdManager PDM::PartBuilder::NewAlternateIdManager@endlink  to get the instance of this class. <br> */
        class NXOPENCPPEXPORT AlternateIdManager : public TransientObject
        {
             /**Contains alternate Ids data */
            public:
            struct AlternateIdsData
            {
                public: /** the new value for the alternate item ID  */NXString AlternateItemId;
                public: /** the new value for the alternate Revision ID*/NXString AlternateRevId;
                public: /** the new value for the alternate Name*/NXString AlternateName;
                public: /** the new value for the alternate Description*/NXString AlternateDescription;
                public: /** the new value for the alternate for modifiable flag*/bool Modifiable;
                public: AlternateIdsData() :
                    AlternateItemId(),
                    AlternateRevId(),
                    AlternateName(),
                    AlternateDescription(),
                    Modifiable()
                {
                }
                /** Constructor for the AlternateIdsData struct. */ 
                public: AlternateIdsData(NXString INIT_alternate_item_id /** the new value for the alternate item ID  */, 
                        NXString INIT_alternate_rev_id /** the new value for the alternate Revision ID*/, 
                        NXString INIT_alternate_name /** the new value for the alternate Name*/, 
                        NXString INIT_alternate_description /** the new value for the alternate Description*/, 
                        bool INIT_modifiable /** the new value for the alternate for modifiable flag*/) :
                    AlternateItemId(INIT_alternate_item_id),
                    AlternateRevId(INIT_alternate_rev_id),
                    AlternateName(INIT_alternate_name),
                    AlternateDescription(INIT_alternate_description),
                    Modifiable(INIT_modifiable)
                {
                }
            };

             /**Contains alternate Revision Id data */
            public:
            struct AssignAlternateRevData
            {
                public: /** the new value the alternate Revision ID  */NXString AlternateRevId;
                public: /** the new value of flag for revision modifiable */bool Modifiable;
                public: AssignAlternateRevData() :
                    AlternateRevId(),
                    Modifiable()
                {
                }
                /** Constructor for the AssignAlternateRevData struct. */ 
                public: AssignAlternateRevData(NXString INIT_alternate_rev_id /** the new value the alternate Revision ID  */, 
                        bool INIT_modifiable /** the new value of flag for revision modifiable */) :
                    AlternateRevId(INIT_alternate_rev_id),
                    Modifiable(INIT_modifiable)
                {
                }
            };

            public: explicit AlternateIdManager(void *ptr);
            /** Free resources associated with the instance. After this method
                    is called, it is illegal to use the object.  In .NET, this method
                    is automatically called when the object is deleted by the garbage
                    collector.  <br> License requirements : None */
            public: virtual ~AlternateIdManager();
            /** Sets the value of a context.  <br> License requirements : None */
            public: void SetContext
            (
                const NXString & context /** the new value the context is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a context as it is currently set on this manager class.  @return  the current value of the context on this manager  <br> License requirements : None */
            public: NXString GetContext
            (
            );
            /** Gets a list of all the available contexts.  @return  list of contexts  <br> License requirements : None */
            public: std::vector<NXString> GetAllContexts
            (
            );
            /** Sets the value of an ID type.  <br> License requirements : None */
            public: void SetIdType
            (
                const NXString & idType /** the new value the ID type is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a ID type as it is currently set on this manager class.  @return  the current value of the ID type on this manager  <br> License requirements : None */
            public: NXString GetIdType
            (
            );
            /** Gets a list of all the available ID types for a given context.  @return  list of ID types  <br> License requirements : None */
            public: std::vector<NXString> GetAllIdTypes
            (
                const NXString & context /** the context   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Sets the value of the alternate item ID.  <br> License requirements : None */
            public: void SetAlternateItemId
            (
                const NXString & alternateItemId /** the new value the alternate item ID is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** This method generates alternate item and revision IDs and sets these generated
                    values on this manager class. Note that the ID context and type must be set on the
                    builder in order for this assign operation to be successful.  <br> License requirements : None */
            public: void AssignAlternateId
            (
                NXString* alternateItemId /** the newly generated alternate item ID value
                                                               that was set on this manager */,
                NXString* alternateRevId /** the newly generated alternate revision ID value
                                                               that was set on this manager */
            );
            /** Gets the value of a alternate ID as it is currently set on this manager class.  @return  the current value of the alternate item ID on this manager  <br> License requirements : None */
            public: NXString GetAlternateItemId
            (
            );
            /** Sets the value of the alternate rev ID.  <br> License requirements : None */
            public: void SetAlternateRevId
            (
                const NXString & alternateRevId /** the new value the alternate rev ID
                                                                is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** This method generates an alternate rev ID and sets this generated value on
                    this manager class.  Note that the ID context and type must be set on the
                    builder in order for this assign operation to be successful.  @return  the newly generated alternate rev ID
                                                           value that was set on this manager  <br> License requirements : None */
            public: NXString AssignAlternateRevId
            (
            );
            /** Gets the value of a alternate rev ID as it is currently set on this manager class.  @return  the current value of the alternate rev ID
                                                           on this manager  <br> License requirements : None */
            public: NXString GetAlternateRevId
            (
            );
            /** Sets the value of the alternate name.  <br> License requirements : None */
            public: void SetAlternateName
            (
                const NXString & alternateName /** the new value the alternate name is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a alternate name as it is currently set on this manager class.  @return  the current value of the alternate name on
                                                         this manager  <br> License requirements : None */
            public: NXString GetAlternateName
            (
            );
            /** Sets the value of the alternate description.  <br> License requirements : None */
            public: void SetAlternateDescription
            (
                const NXString & alternateDescription /** the new value the alternate description
                                                                     is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Gets the value of a alternate name as it is currently set on this manager class.  @return  the current value of the alternate
                                                                description on this manager  <br> License requirements : None */
            public: NXString GetAlternateDescription
            (
            );
            /** Sets whether the alternate ID information should be the default indentifier.  <br> License requirements : None */
            public: void SetAlternateIdAsDefaultIndentifier
            (
                bool alternateIdAsDefaultIndentifier /** the new value the option
                                                                              is to be set to */
            );
            /** Gets (as it is currently set on this manager class) whether the
                    alternate ID information should be the default indentifier.  @return  the current value of option
                                                                                on this manager  <br> License requirements : None */
            public: bool GetAlternateIdAsDefaultIndentifier
            (
            );
            /** Sets alternate ID information on this manager class. NULL can be specified
                    for parameters which are set via other set or assign methods on this builder.  <br> License requirements : None */
            public: void SetAlternateIdInformation
            (
                const NXString & context /** the new value the context is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & idType /** the new value the ID type is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & alternateItemId /** the new value the alternate item ID is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & alternateRevId /** the new value the alternate rev ID
                                                                is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & alternateName /** the new value the alternate name is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & alternateDescription /** the new value the alternate description
                                                                      is to be set to   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool alternateIdAsDefaultIndentifier /** the new value the option
                                                                               is to be set to */
            );
            /** Adds the alternate ID information set by calling
                    @link SetAlternateIdInformation SetAlternateIdInformation@endlink  and the various "assign" and "set"
                    methods. The context, ID type, alternate ID, alternate revision ID, and the
                    alternate name must all be set before calling this method.  <br> License requirements : None */
            public: void CreateAlternateIdInformation
            (
            );
            /** Generates the alternate ID information by calling
                    @link AssignAlternateIds AssignAlternateIds@endlink  . Returns pointer to  PDM.Altids.AlternateIdsData object. 
                    Sets Alternate Name,Alternate Id,Alternate Revision ,Alternate Description,
                    flag for alternate Id modifiable and flag for revision modifiable into Alternate Manager object.
                     @return Contains alternate Ids data  <br> License requirements : None */
            public: NXOpen::PDM::AlternateIdManager::AlternateIdsData AssignAlternateIds
            (
                const NXString & context /** the context   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & idType /** the Id type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Generates the alternate Revision ID information. 
                    Sets Alternate Revision and flag for revision modifiable into Alternate Manager object.
                     @return Contains alternate Revision Id data  <br> License requirements : None */
            public: NXOpen::PDM::AlternateIdManager::AssignAlternateRevData AssignAlternateRevision
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
