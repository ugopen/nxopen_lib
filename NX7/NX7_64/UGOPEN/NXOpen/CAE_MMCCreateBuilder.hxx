#ifndef NXOpen_CAE_MMCCREATEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MMCCREATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MMCCreateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_MMCCreateBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class MMCCreateBuilder;
    }
    class Builder;
    namespace CAE
    {
        class MeshMate;
    }
    class Expression;
    class SelectIParameterizedSurface;
    class SelectIParameterizedSurfaceList;
    namespace CAE
    {
        class _MMCCreateBuilderBuilder;
        /**
            Represents a @link CAE::MMCCreateBuilder CAE::MMCCreateBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::MeshControlCollection::CreateMmcCreateBuilder CAE::MeshControlCollection::CreateMmcCreateBuilder@endlink  <br> */
        class NXOPENCPPEXPORT MMCCreateBuilder : public Builder
        {
            /**  Type of the Creation Methods for MMC */
            public: enum Types
            {
                TypesAutoCreate/** Auto Create*/,
                TypesManual/** Manual Create*/
            };

            /**  Types of Mesh Mating Conditions */
            public: enum MeshMatingType
            {
                MeshMatingTypeGlueCoincident/** glue coincident*/,
                MeshMatingTypeGlueNonCoincident/** glue non-coincident*/,
                MeshMatingTypeFreeCoincident/** free coincident*/
            };

            /**  Types of Face Serach Operations */
            public: enum FaceSearchType
            {
                FaceSearchTypeAllPairs/** all pairs*/,
                FaceSearchTypeIdenticalPairsOnly/** identical pairs only*/
            };

            private: friend class  _MMCCreateBuilderBuilder;
            protected: MMCCreateBuilder();
            /**Returns  the auto selection of faces/bodies for auto-create type  <br> License requirements : None */
            public: NXOpen::SelectIParameterizedSurfaceList * AutoSel
            (
            );
            /**Returns  the source face  <br> License requirements : None */
            public: NXOpen::SelectIParameterizedSurface * SourceFace
            (
            );
            /**Returns  the target face  <br> License requirements : None */
            public: NXOpen::SelectIParameterizedSurface * TargetFace
            (
            );
            /**Returns  the mmc creation type  <br> License requirements : None */
            public: NXOpen::CAE::MMCCreateBuilder::Types Type
            (
            );
            /**Sets  the mmc creation type  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetType
            (
                NXOpen::CAE::MMCCreateBuilder::Types type /** type */ 
            );
            /**Returns  the mesh mating type  <br> License requirements : None */
            public: NXOpen::CAE::MMCCreateBuilder::MeshMatingType MeshMatingOption
            (
            );
            /**Sets  the mesh mating type  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshMatingOption
            (
                NXOpen::CAE::MMCCreateBuilder::MeshMatingType meshMatingOption /** meshmatingoption */ 
            );
            /**Returns  the face search option  <br> License requirements : None */
            public: NXOpen::CAE::MMCCreateBuilder::FaceSearchType FaceSearchOption
            (
            );
            /**Sets  the face search option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetFaceSearchOption
            (
                NXOpen::CAE::MMCCreateBuilder::FaceSearchType faceSearchOption /** facesearchoption */ 
            );
            /**Returns  the dist tolerance  <br> License requirements : None */
            public: NXOpen::Expression * DistTolerance
            (
            );
            /**Returns  the reverse direction  <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the mmc  <br> License requirements : None */
            public: NXOpen::CAE::MeshMate * Mmc
            (
            );
            /**Sets  the mmc  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMmc
            (
                NXOpen::CAE::MeshMate * mmc /** mmc */ 
            );
            /** Commits the creation of the @link CAE::MeshMate CAE::MeshMate@endlink  objects
                        or Commits the changes made to the @link CAE::MeshMate CAE::MeshMate@endlink  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<NXOpen::CAE::MeshMate *> CommitMmcs
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
