#ifndef NXOpen_CAE_CAECONNECTIONCOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_CAECONNECTIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CAEConnectionCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class CAEConnectionCollection;
    }
    namespace CAE
    {
        class BaseFEModel;
    }
    namespace CAE
    {
        class CAEConnection;
    }
    namespace CAE
    {
        class CAEConnectionBuilder;
    }
    namespace CAE
    {
        class CAEWeldConnection;
    }
    namespace CAE
    {
        class CAEWeldConnectionBuilder;
    }
    namespace CAE
    {
        /**  @brief  Provides method for creating  builder for 
            connection operation commands in a fem/afem part  

           <br> To obtain an instance of this class, refer to @link CAE::BaseFEModel CAE::BaseFEModel@endlink  <br> */
        class NXOPENCPPEXPORT CAEConnectionCollection : public TaggedObjectCollection
        {
            private: NXOpen::CAE::BaseFEModel* m_owner;
            public: explicit CAEConnectionCollection(NXOpen::CAE::BaseFEModel *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef CAE::CAEConnection * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::CAE::CAEConnectionCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::CAE::CAEConnectionCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link CAE::CAEConnection CAE::CAEConnection@endlink  with the given identifier as recorded in a journal. 
                    An object may not return the same value as its JournalIdentifier in different versions of 
                    the software. However newer versions of the software should find the same object when 
                    FindObject is passed older versions of its journal identifier. In general, this method 
                    should not be used in handwritten code and exists to support record and playback of journals.

                    An exception will be thrown if no object can be found with the given journal identifier.  @return  connection with this identifier  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CAEConnection * FindObject
            (
                const NXString & journalIdentifier /** Connection name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Creates a builder for Connection Command  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CAEConnectionBuilder * CreateConnectionBuilder
            (
                NXOpen::CAE::CAEConnection * connection /** @link CAE::CAEConnection CAE::CAEConnection@endlink  to be edited, 
                                                                                             if NULL then create a new one */
            );
            /** Creates a builder for WeldConnection Command  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CAEWeldConnectionBuilder * CreateWeldConnectionBuilder
            (
                NXOpen::CAE::CAEWeldConnection * weldconnection /** WeldConnection Recipe to be edited, if NULL then create a new one */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
