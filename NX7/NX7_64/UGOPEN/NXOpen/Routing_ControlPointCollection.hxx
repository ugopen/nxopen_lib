#ifndef NXOpen_ROUTING_CONTROLPOINTCOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_CONTROLPOINTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_ControlPointCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class ControlPointCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    class IBaseCurve;
    class Point;
    namespace Routing
    {
        class IRoutePosition;
    }
    namespace Routing
    {
        class Port;
    }
    class TaggedObject;
    namespace Routing
    {
        /** Represents a collection of @link Routing::ControlPoint Routing::ControlPoint@endlink  objects.  <br> To obtain an instance of this class, refer to @link Routing::RouteManager Routing::RouteManager@endlink  <br> */
        class NXOPENCPPEXPORT ControlPointCollection : public TaggedObjectCollection
        {
            /** Option for searching for an existing @link Routing::ControlPoint Routing::ControlPoint@endlink  
                        when attempting to create an new @link Routing::ControlPoint Routing::ControlPoint@endlink . */
            public: enum CheckExisting
            {
                CheckExistingDontSearch/** Don't search for an exising object, 
                                                                            always create a new object. */,
                CheckExistingSearch/** Search for an existing object, don't 
                                                                            create a new object if one exists at the 
                                                                            correct location. */
            };

            /** Whether @link Routing::ControlPoint Routing::ControlPoint@endlink  returned from the creator 
                        methods was an existing @link Routing::ControlPoint Routing::ControlPoint@endlink  or a new
                        @link Routing::ControlPoint Routing::ControlPoint@endlink . */
            public: enum FoundExisting
            {
                FoundExistingBrandNew/** Object is a new object. */,
                FoundExistingExisting/** Object existed already. */
            };

            private: NXOpen::Routing::RouteManager* m_owner;
            public: explicit ControlPointCollection(NXOpen::Routing::RouteManager *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Iterator for accessing the contents of the collection. */
            class iterator
            {
            public:
                typedef Routing::ControlPoint * value_type;
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                explicit iterator(NXOpen::Routing::ControlPointCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                }//lint !e1401 m_state is not initialized 
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPPEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPPEXPORT  void next();
                NXOpen::Routing::ControlPointCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds an existing @link Routing::ControlPoint Routing::ControlPoint@endlink  at the given ABS coordinates within
                        the given tolerance.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * FindControlPoint
            (
                const NXOpen::Point3d & position /** ABS coordinates */,
                double tolerance /** Distance tolerance, smallest useful tolerance
                                                                        is returned from 
                                                                        @link Routing::RouteManager::GetLengthTolerance Routing::RouteManager::GetLengthTolerance@endlink . */
            );
            /** Creates a dumb @link Routing::ControlPoint Routing::ControlPoint@endlink  object.  The @link Routing::ControlPoint Routing::ControlPoint@endlink 's 
                        position is not associative to any other object.   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                const NXOpen::Point3d & position /** ABS coordinates*/,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link Routing::ControlPoint Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a smart @link Routing::ControlPoint Routing::ControlPoint@endlink  object.  The @link Routing::ControlPoint Routing::ControlPoint@endlink 's 
                        position is associative to the input @link Routing::Port Routing::Port@endlink .   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::Routing::Port * port /** port */ ,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link Routing::ControlPoint Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a @link Routing::ControlPoint Routing::ControlPoint@endlink  at the given object and normalized parameter.
                        Supports curves [includes segments], ports and circular edges.   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::TaggedObject * object /** object */ ,
                double objectParm /** object parm */ ,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link Routing::ControlPoint Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a smart @link Routing::ControlPoint Routing::ControlPoint@endlink  object.  The @link Routing::ControlPoint Routing::ControlPoint@endlink 's 
                        position is associative to the input @link Point Point@endlink .   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::Point * point /** point */ ,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link Routing::ControlPoint Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a smart @link Routing::ControlPoint Routing::ControlPoint@endlink  object.  The @link Routing::ControlPoint Routing::ControlPoint@endlink 's 
                        position is associative to a @link Point Point@endlink  that is defined at the center
                        of a @link IBaseCurve IBaseCurve@endlink  object.   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::IBaseCurve * conic /** conic */ ,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link Routing::ControlPoint Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a dumb @link Routing::ControlPoint Routing::ControlPoint@endlink  object.  The @link Routing::ControlPoint Routing::ControlPoint@endlink 's 
                        position is not associative to any other object.  The position of the object is located at
                        the XC, YC, ZC offset (using the work coordinate system) from the input 
                        @link Routing::IRoutePosition Routing::IRoutePosition@endlink   object.   @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::Routing::IRoutePosition * startObject /** Starting position. */,
                const NXOpen::Vector3d & offset /** Offset values. */,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link Routing::ControlPoint Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a smart @link Routing::ControlPoint Routing::ControlPoint@endlink  object.  The @link Routing::ControlPoint Routing::ControlPoint@endlink 's 
                        position is smart point that is associative to a @link Point Point@endlink  that is associative
                        to a @link Routing::ControlPoint Routing::ControlPoint@endlink  occurrence.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::Routing::ControlPoint * cpOcc /** Occurrence of a 
                                                                                            @link Routing::ControlPoint Routing::ControlPoint@endlink  object.*/,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link Routing::ControlPoint Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link Routing::ControlPoint Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
