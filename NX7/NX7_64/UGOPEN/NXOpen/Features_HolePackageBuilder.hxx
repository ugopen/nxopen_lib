#ifndef NXOpen_FEATURES_HOLEPACKAGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_HOLEPACKAGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_HolePackageBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_HolePackageBuilder.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_EndHoleData.hxx>
#include <NXOpen/GeometricUtilities_MiddleHoleData.hxx>
#include <NXOpen/GeometricUtilities_ProjectionOptions.hxx>
#include <NXOpen/GeometricUtilities_StartHoleData.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class HolePackageBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class EndHoleData;
    }
    namespace GeometricUtilities
    {
        class MiddleHoleData;
    }
    namespace GeometricUtilities
    {
        class ProjectionOptions;
    }
    namespace GeometricUtilities
    {
        class StartHoleData;
    }
    class Section;
    class SelectFace;
    namespace Features
    {
        class _HolePackageBuilderBuilder;
        /** Represents a @link Features::HolePackage Features::HolePackage@endlink  builder  <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateHolePackageBuilder Features::FeatureCollection::CreateHolePackageBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BooleanOperation.Type </td> <td> 
         
        Subtract </td> </tr> 

        <tr><td> 
         
        DrillSizeEndChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        DrillSizeEndChamferEnabled </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        DrillSizeEndChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        DrillSizeHoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        DrillSizeHoleDiameter.Value </td> <td> 
         
        11.0 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        DrillSizeStartChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        DrillSizeStartChamferEnabled </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        DrillSizeStartChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        DrillSizeTipAngle.Value </td> <td> 
         
        118 </td> </tr> 

        <tr><td> 
         
        EndHoleData.BooleanOperation.Type </td> <td> 
         
        Subtract </td> </tr> 

        <tr><td> 
         
        EndHoleData.HoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.HoleDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.MatchDimOfStartHole </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        EndHoleData.ScrewClearanceEndChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.ScrewClearanceEndChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.ScrewClearanceStartChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.ScrewClearanceStartChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.TapDrillDiameter.Value </td> <td> 
         
        8.5 (millimeters part), 0.34 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.ThreadDepth.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.ThreadLengthOption </td> <td> 
         
        Custom </td> </tr> 

        <tr><td> 
         
        EndHoleData.ThreadedEndChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.ThreadedEndChamferDiameter.Value </td> <td> 
         
        10.0 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.ThreadedStartChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.ThreadedStartChamferDiameter.Value </td> <td> 
         
        10.0 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        EndHoleData.TipAngle.Value </td> <td> 
         
        118 </td> </tr> 

        <tr><td> 
         
        GeneralCounterboreDepth.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralCounterboreDiameter.Value </td> <td> 
         
        38.0 (millimeters part), 1.5 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralCounterboreHoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralCounterboreHoleDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralCountersinkAngle.Value </td> <td> 
         
        90 (millimeters part), 82 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralCountersinkDiameter.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralCountersinkHoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralCountersinkHoleDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralHoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralHoleDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralHoleForm </td> <td> 
         
        Simple </td> </tr> 

        <tr><td> 
         
        GeneralSimpleHoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralSimpleHoleDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralTaperAngle.Value </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        GeneralTaperedHoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralTaperedHoleDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        GeneralTipAngle.Value </td> <td> 
         
        118 (millimeters part), 118 (inches part) </td> </tr> 

        <tr><td> 
         
        MiddleHoleData.BooleanOperation.Type </td> <td> 
         
        Subtract </td> </tr> 

        <tr><td> 
         
        MiddleHoleData.EndChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MiddleHoleData.EndChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        MiddleHoleData.HoleDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MiddleHoleData.MatchDimOfStartHole </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        MiddleHoleData.StartChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MiddleHoleData.StartChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceCounterboreDepth.Value </td> <td> 
         
        10.8 (millimeters part), 0.43 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceCounterboreDiameter.Value </td> <td> 
         
        18.0 (millimeters part), 0.72 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceCountersinkAngle.Value </td> <td> 
         
        90 (millimeters part), 82 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceCountersinkDiameter.Value </td> <td> 
         
        22.73 (millimeters part), 0.91 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceEndChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceEndChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceHoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceHoleDiameter.Value </td> <td> 
         
        11.0 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceHoleForm </td> <td> 
         
        Simple </td> </tr> 

        <tr><td> 
         
        ScrewClearanceNeckChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceNeckChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceReliefDepth.Value </td> <td> 
         
        1.2 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceStartChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceStartChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        ScrewClearanceTipAngle.Value </td> <td> 
         
        118 </td> </tr> 

        <tr><td> 
         
        StartHoleData.BooleanOperation.Type </td> <td> 
         
        Subtract </td> </tr> 

        <tr><td> 
         
        StartHoleData.CounterboreDepth.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.CounterboreDiameter.Value </td> <td> 
         
        38.0 (millimeters part), 1.5 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.CountersinkAngle.Value </td> <td> 
         
        90 (millimeters part), 82 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.CountersinkDiameter.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.EndChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.EndChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.HoleDiameter.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.HoleForm </td> <td> 
         
        Simple </td> </tr> 

        <tr><td> 
         
        StartHoleData.NeckChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.NeckChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.ReliefDepth.Value </td> <td> 
         
        1.2 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.StartChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        StartHoleData.StartChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        TapDrillDiameter.Value </td> <td> 
         
        8.5 (millimeters part), 0.34 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadDepth.Value </td> <td> 
         
        25.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadLengthOption </td> <td> 
         
        Custom </td> </tr> 

        <tr><td> 
         
        ThreadRotation </td> <td> 
         
        Right </td> </tr> 

        <tr><td> 
         
        ThreadedEndChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedEndChamferDiameter.Value </td> <td> 
         
        10.0 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedHoleDepth.Value </td> <td> 
         
        50.0 (millimeters part), 2.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedReliefAngle.Value </td> <td> 
         
        118.0 (millimeters part), 118.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedReliefChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedReliefChamferOffset.Value </td> <td> 
         
        0.6 (millimeters part), 0.024 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedReliefDepth.Value </td> <td> 
         
        5.0 (millimeters part), 0.2 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedReliefDiameter.Value </td> <td> 
         
        10.0 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedStartChamferAngle.Value </td> <td> 
         
        45.0 (millimeters part), 45.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedStartChamferDiameter.Value </td> <td> 
         
        10.0 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        ThreadedTipAngle.Value </td> <td> 
         
        118 (millimeters part), 118 (inches part) </td> </tr> 

        <tr><td> 
         
        Type </td> <td> 
         
        GeneralHole </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT HolePackageBuilder : public Features::FeatureBuilder
        {
            /** Represents hole types. */
            public: enum Types
            {
                TypesGeneralHole/** General hole */,
                TypesDrillSizeHole/** Drill Size hole */,
                TypesScrewClearanceHole/** Screw clearance hole */,
                TypesThreadedHole/** Threaded hole */,
                TypesHoleSeries/** Hole series */
            };

            /** Represents hole form options. */
            public: enum HoleForms
            {
                HoleFormsSimple/** Simple hole form */,
                HoleFormsCounterbored/** Counterbored hole form */,
                HoleFormsCountersink/** Countersink hole form */,
                HoleFormsTapered/** Tapered hole form */
            };

            /** Represents hole depth limit options. */
            public: enum HoleDepthLimitOptions
            {
                HoleDepthLimitOptionsValue/** Value limit options */,
                HoleDepthLimitOptionsUntilSelected/** Until selected limit options */,
                HoleDepthLimitOptionsUntilNext/** Until next limit options */,
                HoleDepthLimitOptionsThroughBody/** Through body limit options */
            };

            /** Represents thread length options. This option is applicable for the threaded hole. */
            public: enum ThreadLengthOptions
            {
                ThreadLengthOptionsDiameterx1/** 1   * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx15/** 1.5 * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx20/** 2   * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx25/** 2.5 * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx30/** 3   * (tap drill diameter) */,
                ThreadLengthOptionsStandard/** Length is Standard */,
                ThreadLengthOptionsCustom/** Length is custom */,
                ThreadLengthOptionsFull/** Length is full hole depth */
            };

            /** Represents thread rotation options. */
            public: enum ThreadRotationOptions
            {
                ThreadRotationOptionsRight/** Right rotation */,
                ThreadRotationOptionsLeft/** Left rotation */
            };

            private: friend class  _HolePackageBuilderBuilder;
            protected: HolePackageBuilder();
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::Features::HolePackageBuilder::Types Type
            (
            );
            /**Sets  the type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::HolePackageBuilder::Types type /** type */ 
            );
            /**Returns  the hole position  <br> License requirements : None */
            public: NXOpen::Section * HolePosition
            (
            );
            /**Returns  the thread size - this is applicable for threaded hole  <br> License requirements : None */
            public: NXString ThreadSize
            (
            );
            /**Sets  the thread size - this is applicable for threaded hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadSize
            (
                const NXString & threadSize /** threadsize */ 
            );
            /**Returns  the tap drill diameter - this is applicable for threaded hole  <br> License requirements : None */
            public: NXOpen::Expression * TapDrillDiameter
            (
            );
            /**Returns  the thread length option - this is applicable for threaded hole  <br> License requirements : None */
            public: NXOpen::Features::HolePackageBuilder::ThreadLengthOptions ThreadLengthOption
            (
            );
            /**Sets  the thread length option - this is applicable for threaded hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadLengthOption
            (
                NXOpen::Features::HolePackageBuilder::ThreadLengthOptions threadLengthOption /** threadlengthoption */ 
            );
            /**Returns  the thread depth - this is applicable for threaded hole  <br> License requirements : None */
            public: NXOpen::Expression * ThreadDepth
            (
            );
            /**Returns  the thread rotation - this is applicable for threaded hole  <br> License requirements : None */
            public: NXOpen::Features::HolePackageBuilder::ThreadRotationOptions ThreadRotation
            (
            );
            /**Sets  the thread rotation - this is applicable for threaded hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadRotation
            (
                NXOpen::Features::HolePackageBuilder::ThreadRotationOptions threadRotation /** threadrotation */ 
            );
            /**Returns  the hole form - this is applicable for general hole  <br> License requirements : None */
            public: NXOpen::Features::HolePackageBuilder::HoleForms GeneralHoleForm
            (
            );
            /**Sets  the hole form - this is applicable for general hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetGeneralHoleForm
            (
                NXOpen::Features::HolePackageBuilder::HoleForms holeForm /** holeform */ 
            );
            /**Returns  the hole form - this is applicable for screw clearance hole  <br> License requirements : None */
            public: NXOpen::Features::HolePackageBuilder::HoleForms ScrewClearanceHoleForm
            (
            );
            /**Sets  the hole form - this is applicable for screw clearance hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewClearanceHoleForm
            (
                NXOpen::Features::HolePackageBuilder::HoleForms holeForm /** holeform */ 
            );
            /**Returns  the hole direction options  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ProjectionOptions * ProjectionDirection
            (
            );
            /**Returns  the screw type - this is applicable for screw clearence hole  <br> License requirements : None */
            public: NXString ScrewType
            (
            );
            /**Sets  the screw type - this is applicable for screw clearence hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewType
            (
                const NXString & screwType /** screwtype */ 
            );
            /**Returns  the screw size - this is applicable for screw clearence hole  <br> License requirements : None */
            public: NXString ScrewSize
            (
            );
            /**Sets  the screw size - this is applicable for screw clearence hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewSize
            (
                const NXString & screwSize /** screwsize */ 
            );
            /**Returns  the screw fit Option - this is applicable for screw clearence hole <br> License requirements : None */
            public: NXString ScrewFitOption
            (
            );
            /**Sets  the screw fit Option - this is applicable for screw clearence hole <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewFitOption
            (
                const NXString & screwFitOption /** screwfitoption */ 
            );
            /**Returns  the drill size - this is applicable for drill size hole  <br> License requirements : None */
            public: NXString DrillSize
            (
            );
            /**Sets  the drill size - this is applicable for drill size hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrillSize
            (
                const NXString & drillSize /** drillsize */ 
            );
            /**Returns  the drill size screw fit Option - this is applicable for drill size hole <br> License requirements : None */
            public: NXString DrillSizeFitOption
            (
            );
            /**Sets  the drill size screw fit Option - this is applicable for drill size hole <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrillSizeFitOption
            (
                const NXString & drillSizeFitOption /** drillsizefitoption */ 
            );
            /**Returns  the radial engage option - this is applicable for screw clearence hole  <br> License requirements : None */
            public: NXString RadialEngageOption
            (
            );
            /**Sets  the radial engage option - this is applicable for screw clearence hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadialEngageOption
            (
                const NXString & radialEngageOption /** radialengageoption */ 
            );
            /**Returns  the counter bore diameter - this is applicable for general hole  <br> License requirements : None */
            public: NXOpen::Expression * GeneralCounterboreDiameter
            (
            );
            /**Returns  the counter bore depth - this is applicable for general hole  <br> License requirements : None */
            public: NXOpen::Expression * GeneralCounterboreDepth
            (
            );
            /**Returns  the counter sink diameter - this is applicable for general hole  <br> License requirements : None */
            public: NXOpen::Expression * GeneralCountersinkDiameter
            (
            );
            /**Returns  the counter sink angle - this is applicable for general hole  <br> License requirements : None */
            public: NXOpen::Expression * GeneralCountersinkAngle
            (
            );
            /**Returns  the hole diameter - this is applicable for general hole 
             @deprecated Deprecated in NX6.0 <br> 
             <br> License requirements : None */
            public: NXOpen::Expression * GeneralHoleDiameter
            (
            );
            /**Returns  the simple hole diameter - this is applicable for general hole simple form  <br> License requirements : None */
            public: NXOpen::Expression * GeneralSimpleHoleDiameter
            (
            );
            /**Returns  the counterbore hole diameter - this is applicable for general hole counterbore form  <br> License requirements : None */
            public: NXOpen::Expression * GeneralCounterboreHoleDiameter
            (
            );
            /**Returns  the countersink hole diameter - this is applicable for general hole countersink form  <br> License requirements : None */
            public: NXOpen::Expression * GeneralCountersinkHoleDiameter
            (
            );
            /**Returns  the tapered hole diameter - this is applicable for general hole tapered form  <br> License requirements : None */
            public: NXOpen::Expression * GeneralTaperedHoleDiameter
            (
            );
            /**Returns  the counter bore diameter - this is applicable for screw clearence hole  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceCounterboreDiameter
            (
            );
            /**Returns  the counter bore depth - this is applicable for screw clearence hole  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceCounterboreDepth
            (
            );
            /**Returns  the counter sink diameter - this is applicable for screw clearence hole  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceCountersinkDiameter
            (
            );
            /**Returns  the counter sink angle - this is applicable for screw clearence hole  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceCountersinkAngle
            (
            );
            /**Returns  the hole diameter - this is applicable for drill size hole  <br> License requirements : None */
            public: NXOpen::Expression * DrillSizeHoleDiameter
            (
            );
            /**Returns  the hole depth - this is applicable for drill size hole  <br> License requirements : None */
            public: NXOpen::Expression * DrillSizeHoleDepth
            (
            );
            /**Returns  the tip angle - this is applicable for drill size hole  <br> License requirements : None */
            public: NXOpen::Expression * DrillSizeTipAngle
            (
            );
            /**Returns  the hole diameter - this is applicable for screw clearence hole  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceHoleDiameter
            (
            );
            /**Returns  the hole depth limit - this is applicable for general hole, threaded hole and drill size hole type  <br> License requirements : None */
            public: NXOpen::Features::HolePackageBuilder::HoleDepthLimitOptions HoleDepthLimitOption
            (
            );
            /**Sets  the hole depth limit - this is applicable for general hole, threaded hole and drill size hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleDepthLimitOption
            (
                NXOpen::Features::HolePackageBuilder::HoleDepthLimitOptions holeDepthLimitOption /** holedepthlimitoption */ 
            );
            /**Returns  the until selected target - this is applicable for general hole, threaded hole and drill size hole type  <br> License requirements : None */
            public: NXOpen::SelectFace * UntilSelectedTarget
            (
            );
            /**Returns  the hole depth - this is applicable for general hole 
             @deprecated Deprecated in NX6.0 <br> 
             <br> License requirements : None */
            public: NXOpen::Expression * GeneralHoleDepth
            (
            );
            /**Returns  the simple hole depth - this is applicable for general hole simple form  <br> License requirements : None */
            public: NXOpen::Expression * GeneralSimpleHoleDepth
            (
            );
            /**Returns  the counterbore hole depth - this is applicable for general hole counterbore form  <br> License requirements : None */
            public: NXOpen::Expression * GeneralCounterboreHoleDepth
            (
            );
            /**Returns  the countersink hole depth - this is applicable for general hole countersink form  <br> License requirements : None */
            public: NXOpen::Expression * GeneralCountersinkHoleDepth
            (
            );
            /**Returns  the tapered hole depth - this is applicable for general hole tapered form  <br> License requirements : None */
            public: NXOpen::Expression * GeneralTaperedHoleDepth
            (
            );
            /**Returns  the tip angle - this is applicable for general hole  <br> License requirements : None */
            public: NXOpen::Expression * GeneralTipAngle
            (
            );
            /**Returns  the taper angle - this is applicable for general hole  <br> License requirements : None */
            public: NXOpen::Expression * GeneralTaperAngle
            (
            );
            /**Returns  the hole depth - this is applicable for screw clearance hole  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceHoleDepth
            (
            );
            /**Returns  the tip angle - this is applicable for screw clearance hole  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceTipAngle
            (
            );
            /**Returns  the hole depth - this is applicable for threaded hole  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedHoleDepth
            (
            );
            /**Returns  the tip angle - this is applicable for threaded hole  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedTipAngle
            (
            );
            /**Returns  the  relief  enabled - this is applicable for screw clearence hole type with 
                    countersunk hole form and threaded hole type   <br> License requirements : None */
            public: bool ScrewClearanceReliefEnabled
            (
            );
            /**Sets  the  relief  enabled - this is applicable for screw clearence hole type with 
                    countersunk hole form and threaded hole type   <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewClearanceReliefEnabled
            (
                bool screwClearanceReliefEnabled /** screwclearancereliefenabled */ 
            );
            /**Returns  the relief depth - this is applicable for screw clearence hole type  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceReliefDepth
            (
            );
            /**Returns  the threaded relief depth - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefDepth
            (
            );
            /**Returns  the threaded relief enabled - this is applicable for threaded hole type  <br> License requirements : None */
            public: bool ThreadedReliefEnabled
            (
            );
            /**Sets  the threaded relief enabled - this is applicable for threaded hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadedReliefEnabled
            (
                bool threadedReliefEnabled /** threadedreliefenabled */ 
            );
            /**Returns  the relief diameter - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefDiameter
            (
            );
            /**Returns  the relief angle - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefAngle
            (
            );
            /**Returns  the threaded relief chamfer enabled - this is applicable for threaded hole type  <br> License requirements : None */
            public: bool ReliefChamferEnabled
            (
            );
            /**Sets  the threaded relief chamfer enabled - this is applicable for threaded hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReliefChamferEnabled
            (
                bool reliefChamferEnabled /** reliefchamferenabled */ 
            );
            /**Returns  the threaded relief chamfer offset - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefChamferOffset
            (
            );
            /**Returns  the threaded relief chamfer angle - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefChamferAngle
            (
            );
            /**Returns  the drill size start chamfer enabled - this is applicable for drill size hole type  <br> License requirements : None */
            public: bool DrillSizeStartChamferEnabled
            (
            );
            /**Sets  the drill size start chamfer enabled - this is applicable for drill size hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrillSizeStartChamferEnabled
            (
                bool drillSizeStartChamferEnabled /** drillsizestartchamferenabled */ 
            );
            /**Returns  the drill size start chamfer offset - this is applicable for drill size hole type  <br> License requirements : None */
            public: NXOpen::Expression * DrillSizeStartChamferOffset
            (
            );
            /**Returns  the drill size start chamfer angle - this is applicable for drill size hole type  <br> License requirements : None */
            public: NXOpen::Expression * DrillSizeStartChamferAngle
            (
            );
            /**Returns  the screw clearance start chamfer enabled - this is applicable for screw clearance hole type  <br> License requirements : None */
            public: bool ScrewClearanceStartChamferEnabled
            (
            );
            /**Sets  the screw clearance start chamfer enabled - this is applicable for screw clearance hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewClearanceStartChamferEnabled
            (
                bool screwClearanceStartChamferEnabled /** screwclearancestartchamferenabled */ 
            );
            /**Returns  the screw clearance start chamfer offset - this is applicable for screw clearance hole type  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceStartChamferOffset
            (
            );
            /**Returns  the screw clearance start chamfer angle - this is applicable for screw clearance hole type  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceStartChamferAngle
            (
            );
            /**Returns  the threaded start chamfer enabled - this is applicable for threaded hole type  <br> License requirements : None */
            public: bool ThreadedStartChamferEnabled
            (
            );
            /**Sets  the threaded start chamfer enabled - this is applicable for threaded hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadedStartChamferEnabled
            (
                bool threadedStartChamferEnabled /** threadedstartchamferenabled */ 
            );
            /**Returns  the threaded start chamfer offset - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedStartChamferDiameter
            (
            );
            /**Returns  the threaded start chamfer angle - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedStartChamferAngle
            (
            );
            /**Returns  the drill size end chamfer enabled - this is applicable for drill size hole type  <br> License requirements : None */
            public: bool DrillSizeEndChamferEnabled
            (
            );
            /**Sets  the drill size end chamfer enabled - this is applicable for drill size hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrillSizeEndChamferEnabled
            (
                bool drillSizeEndChamferEnabled /** drillsizeendchamferenabled */ 
            );
            /**Returns  the drill size end chamfer offset - this is applicable for drill size hole type  <br> License requirements : None */
            public: NXOpen::Expression * DrillSizeEndChamferOffset
            (
            );
            /**Returns  the drill size end chamfer angle - this is applicable for drill size hole type  <br> License requirements : None */
            public: NXOpen::Expression * DrillSizeEndChamferAngle
            (
            );
            /**Returns  the end chamfer enabled - this is applicable for screw clearance hole type  <br> License requirements : None */
            public: bool ScrewClearanceEndChamferEnabled
            (
            );
            /**Sets  the end chamfer enabled - this is applicable for screw clearance hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewClearanceEndChamferEnabled
            (
                bool screwClearanceEndChamferEnabled /** screwclearanceendchamferenabled */ 
            );
            /**Returns  the screw clearance end chamfer offset - this is applicable for screw clearance hole type  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceEndChamferOffset
            (
            );
            /**Returns  the screw clearance end chamfer angle - this is applicable for screw clearance hole type  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceEndChamferAngle
            (
            );
            /**Returns  the threaded end chamfer enabled - this is applicable for threaded hole type  <br> License requirements : None */
            public: bool ThreadedEndChamferEnabled
            (
            );
            /**Sets  the threaded end chamfer enabled - this is applicable for threaded hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadedEndChamferEnabled
            (
                bool threadedEndChamferEnabled /** threadedendchamferenabled */ 
            );
            /**Returns  the threaded end chamfer offset - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedEndChamferDiameter
            (
            );
            /**Returns  the threaded end chamfer angle - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedEndChamferAngle
            (
            );
            /**Returns  the neck chamfer enabled - this is applicable for screw clearence hole type 
                        with counterbore hole form  <br> License requirements : None */
            public: bool NeckChamferEnabled
            (
            );
            /**Sets  the neck chamfer enabled - this is applicable for screw clearence hole type 
                        with counterbore hole form  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNeckChamferEnabled
            (
                bool neckChamferEnabled /** neckchamferenabled */ 
            );
            /**Returns  the neck chamfer offset - this is applicable for screw clearence hole type 
                        with counterbore hole form  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceNeckChamferOffset
            (
            );
            /**Returns  the neck chamfer angle - this is applicable for screw clearence hole type 
                        with counterbore hole form  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceNeckChamferAngle
            (
            );
            /**Returns  the boolean operation  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /**Returns  the drill size standard - this is applicable for drill size hole type  <br> License requirements : None */
            public: NXString DrillSizeStandard
            (
            );
            /**Sets  the drill size standard - this is applicable for drill size hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDrillSizeStandard
            (
                const NXString & drillSizeStandard /** drillsizestandard */ 
            );
            /**Returns  the screw standard - this is applicable for screw clearence hole type  <br> License requirements : None */
            public: NXString ScrewStandard
            (
            );
            /**Sets  the screw standard - this is applicable for screw clearence hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewStandard
            (
                const NXString & screwStandard /** screwstandard */ 
            );
            /**Returns  the thread standard - this is applicable for threaded hole type  <br> License requirements : None */
            public: NXString ThreadStandard
            (
            );
            /**Sets  the thread standard - this is applicable for threaded hole type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadStandard
            (
                const NXString & threadStandard /** threadstandard */ 
            );
            /**Returns  the distance tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the  start target body  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::StartHoleData * StartHoleData
            (
            );
            /**Returns  the target body  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::MiddleHoleData * MiddleHoleData
            (
            );
            /**Returns  the target body  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData * EndHoleData
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
