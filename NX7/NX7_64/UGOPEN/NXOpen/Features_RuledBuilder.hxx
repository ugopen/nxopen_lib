#ifndef NXOpen_FEATURES_RULEDBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_RULEDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_RuledBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_RuledBuilder.hxx>
#include <NXOpen/GeometricUtilities_AlignmentMethodBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class RuledBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class AlignmentMethodBuilder;
    }
    class Section;
    namespace Features
    {
        class _RuledBuilderBuilder;
        /**
            Represents a @link Features::Ruled Features::Ruled@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateRuledBuilder Features::FeatureCollection::CreateRuledBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AlignmentMethod.AlignType </td> <td> 
         
        Parameter </td> </tr> 

        <tr><td> 
         
        IsShapePreserved </td> <td> 
         
        True </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT RuledBuilder : public Features::FeatureBuilder
        {
            private: friend class  _RuledBuilderBuilder;
            protected: RuledBuilder();
            /**Returns  the first section  <br> License requirements : None */
            public: NXOpen::Section * FirstSection
            (
            );
            /**Returns  the second section  <br> License requirements : None */
            public: NXOpen::Section * SecondSection
            (
            );
            /**Returns  the alignment method  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::AlignmentMethodBuilder * AlignmentMethod
            (
            );
            /**Returns  the preserve shape flag. When preserve shape is used, the input
                    curves will not be approximated in constructing the ruled
                    surface. Only Parameter and By Points alignment options are
                    allowed if preserve shape is used.  <br> License requirements : None */
            public: bool IsShapePreserved
            (
            );
            /**Sets  the preserve shape flag. When preserve shape is used, the input
                    curves will not be approximated in constructing the ruled
                    surface. Only Parameter and By Points alignment options are
                    allowed if preserve shape is used.  <br> License requirements : None */
            public: void SetShapePreserved
            (
                bool isShapePreserved /** isshapepreserved */ 
            );
            /**Returns  the position tolerance  <br> License requirements : None */
            public: double PositionTolerance
            (
            );
            /**Sets  the position tolerance  <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetPositionTolerance
            (
                double positionTolerance /** positiontolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
