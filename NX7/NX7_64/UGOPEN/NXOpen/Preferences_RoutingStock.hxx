#ifndef NXOpen_PREFERENCES_ROUTINGSTOCK_HXX_INCLUDED
#define NXOpen_PREFERENCES_ROUTINGSTOCK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_RoutingStock.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/Routing_StockData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class RoutingStock;
    }
    namespace Preferences
    {
        class RoutingApplicationView;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Preferences
    {
        /** The Preferences for Routing Stock objects.  These correspond to
                the values represented on the Preferences-\>Routing dialog, Stock
                property page.  <br> To obtain an instance of this class, refer to @link Preferences::RoutingApplicationView Preferences::RoutingApplicationView@endlink  <br> */
        class NXOPENCPPEXPORT RoutingStock
        {
            /** Describes the valid value for stock mode.  */
            public: enum StockModeFlag
            {
                StockModeFlagLegacyStock/** solid body in the work part, no component */,
                StockModeFlagStockAsComponent/** component created with solid body in the component */
            };

            private: NXOpen::Preferences::RoutingApplicationView* m_owner;
            public: explicit RoutingStock(NXOpen::Preferences::RoutingApplicationView *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the default stock style  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Routing::StockStyle DefaultStockStyle
            (
            );
            /**Sets  the default stock style  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDefaultStockStyle
            (
                NXOpen::Routing::StockStyle defaultStockStyle /** default stock style */ 
            );
            /**Returns  the current routing level/tile  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString CurrentTile
            (
            );
            /**Sets  the current routing level/tile  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetCurrentTile
            (
                const NXString & tile /** tile */ 
            );
            /**Returns  the stock creation mode  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::Preferences::RoutingStock::StockModeFlag StockMode
            (
            );
            /**Sets  the stock creation mode  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockMode
            (
                NXOpen::Preferences::RoutingStock::StockModeFlag stockMode /** stock mode */ 
            );
            /**Returns  the default folder for stock components  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString StockFolder
            (
            );
            /**Sets  the default folder for stock components  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockFolder
            (
                const NXString & stockFolder /** stock folder */ 
            );
            /**Returns  the delete overstock flag during deletion of last stock covered by
                        the overstock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool DeleteOverstock
            (
            );
            /**Sets  the delete overstock flag during deletion of last stock covered by
                        the overstock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDeleteOverstock
            (
                bool deleteOverstock /** delete overstock */ 
            );
            /**Returns  the @link Routing::Anchor Routing::Anchor@endlink  name associated with the stock preferences.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString StockAnchor
            (
            );
            /**Sets  the @link Routing::Anchor Routing::Anchor@endlink  name associated with the stock preferences.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetStockAnchor
            (
                const NXString & anchorName /** anchor name */ 
            );
            /** Sets the current default stock to assign when creating paths.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetDefaultStock
            (
                NXOpen::Routing::CharacteristicList * stockPart /** Characteristic list used to find the appropriate 
                              @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                              See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList * dataCharx /** The list of optional and required characteristics to apply to the new stock. */
            );
            /** Returns the current default stock to assign when creating paths.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetDefaultStock
            (
                NXOpen::Routing::CharacteristicList ** stockPart /** Characteristic list used to find the appropriate 
                              @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                              See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList ** dataCharx /** The list of optional and required characteristics to apply to the new stock. */
            );
            /**Returns  the desired translucnecy of the newly created Space Reservation Stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int SpaceReservationTranslucency
            (
            );
            /**Sets  the desired translucnecy of the newly created Space Reservation Stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetSpaceReservationTranslucency
            (
                int spaceReservationTranslucency /** spacereservationtranslucency */ 
            );
            /** Sets the preferred stock for creating filler stock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPreferredFillerStock
            (
                NXOpen::Routing::CharacteristicList * stockPart /** Characteristic list used to find the appropriate 
                              @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                              See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList * dataCharx /** The list of optional and required characteristics to apply to the new stock. */
            );
            /** Returns the preferred for creating filler stock.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetPreferredFillerStock
            (
                NXOpen::Routing::CharacteristicList ** stockPart /** Characteristic list used to find the appropriate 
                              @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                              See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList ** dataCharx /** The list of optional and required characteristics to apply to the new stock. */
            );
            /** Sets the preferred stock for creating space Reservation  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPreferredSpaceReservation
            (
                NXOpen::Routing::CharacteristicList * stockPart /** Characteristic list used to find the appropriate 
                              @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                              See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList * dataCharx /** The list of optional and required characteristics to apply to the new stock. */
            );
            /** Returns the preferred stock for creating space reservation   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetPreferredSpaceReservation
            (
                NXOpen::Routing::CharacteristicList ** stockPart /** Characteristic list used to find the appropriate 
                              @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                              See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList ** dataCharx /** The list of optional and required characteristics to apply to the new stock. */
            );
            /** Sets the preferred stock for creating overstock  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetPreferredOverstock
            (
                NXOpen::Routing::CharacteristicList * stockPart /** Characteristic list used to find the appropriate 
                              @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                              See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList * dataCharx /** The list of optional and required characteristics to apply to the new stock. */
            );
            /** Returns the preferred stock for creating overstock.   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void GetPreferredOverstock
            (
                NXOpen::Routing::CharacteristicList ** stockPart /** Characteristic list used to find the appropriate 
                              @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                              See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList ** dataCharx /** The list of optional and required characteristics to apply to the new stock. */
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
