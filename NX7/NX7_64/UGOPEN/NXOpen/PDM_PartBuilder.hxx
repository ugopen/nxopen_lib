#ifndef NXOpen_PDM_PARTBUILDER_HXX_INCLUDED
#define NXOpen_PDM_PARTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PartBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PDM_AlternateIdManager.hxx>
#include <NXOpen/PDM_DatabaseAttributeManager.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace PDM
    {
        class PartBuilder;
    }
    namespace PDM
    {
        class AlternateIdManager;
    }
    namespace PDM
    {
        class DatabaseAttributeManager;
    }
    namespace PDM
    {
        /** This class serves as the base class for NX Manager part builders. The
                NX Manager part builders are used to create new parts in NX Manager mode.
             <br> This is an abstract class, and cannot be created. <br> */
        class NXOPENCPPEXPORT PartBuilder : public TransientObject
        {
             /** Contains part number information.*/
            public:
            struct PartNumberData
            {
                public: /** The part name*/NXString PartName;
                public: /** Modifiable flag for part name.*/bool PartNameModifiable;
                public: /** The part description*/NXString PartDescription;
                public: /** Modifiable flag for part description.*/bool PartDescriptionModifiable;
                public: /** The part number*/NXString PartNumber;
                public: /** Modifiable flag for part number.*/bool PartNumberModifiable;
                public: PartNumberData() :
                    PartName(),
                    PartNameModifiable(),
                    PartDescription(),
                    PartDescriptionModifiable(),
                    PartNumber(),
                    PartNumberModifiable()
                {
                }
                /** Constructor for the PartNumberData struct. */ 
                public: PartNumberData(NXString INIT_part_name /** The part name*/, 
                        bool INIT_part_name_modifiable /** Modifiable flag for part name.*/, 
                        NXString INIT_part_description /** The part description*/, 
                        bool INIT_part_description_modifiable /** Modifiable flag for part description.*/, 
                        NXString INIT_part_number /** The part number*/, 
                        bool INIT_part_number_modifiable /** Modifiable flag for part number.*/) :
                    PartName(INIT_part_name),
                    PartNameModifiable(INIT_part_name_modifiable),
                    PartDescription(INIT_part_description),
                    PartDescriptionModifiable(INIT_part_description_modifiable),
                    PartNumber(INIT_part_number),
                    PartNumberModifiable(INIT_part_number_modifiable)
                {
                }
            };

             /** Contains part revision information */
            public:
            struct PartRevisionData
            {
                public: /**Part revision*/NXString PartRevision;
                public: /** Revision Modifiable flag. False if part revision is not modifiable*/bool PartRevisionModifiable;
                public: PartRevisionData() :
                    PartRevision(),
                    PartRevisionModifiable()
                {
                }
                /** Constructor for the PartRevisionData struct. */ 
                public: PartRevisionData(NXString INIT_part_revision /**Part revision*/, 
                        bool INIT_part_revision_modifiable /** Revision Modifiable flag. False if part revision is not modifiable*/) :
                    PartRevision(INIT_part_revision),
                    PartRevisionModifiable(INIT_part_revision_modifiable)
                {
                }
            };

             /** Contains part file name information */
            public:
            struct PartFileNameData
            {
                public: /**Part file name*/NXString PartFileName;
                public: /** False if part file name is not modifiable*/bool PartFileNameModifiable;
                public: PartFileNameData() :
                    PartFileName(),
                    PartFileNameModifiable()
                {
                }
                /** Constructor for the PartFileNameData struct. */ 
                public: PartFileNameData(NXString INIT_part_file_name /**Part file name*/, 
                        bool INIT_part_file_name_modifiable /** False if part file name is not modifiable*/) :
                    PartFileName(INIT_part_file_name),
                    PartFileNameModifiable(INIT_part_file_name_modifiable)
                {
                }
            };

            /** Tokens identifying every possible UG/Manager part selection dialog. */
            public: enum Operation
            {
                OperationExportPartNew/** File-\>Export-\>Part:New radio button*/,
                OperationAssemblyDiagram/** Assembly-\>Report-\>Assembly Diagram... */,
                OperationAssemblyCreateNewComponent/** Assembly-\>Component-\>Create New... */,
                OperationDefault/** Default UG/Manager part selection dialog*/
            };

            public: explicit PartBuilder(void *ptr);
            /** Free resources associated with the instance. After this method
                    is called, it is illegal to use the object.  In .NET, this method
                    is automatically called when the object is deleted by the garbage
                    collector.  <br> License requirements : None */
            public: virtual ~PartBuilder();
            /** Create the specification for the new part that will be created.  <br> License requirements : None */
            public: void CreatePartSpec
            (
                const NXString & partType /** the part type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & partNumber /** the part number   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & partRevision /** the part revision   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & partFileType /** the part file type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & partFileName /** the part file name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create an instance of a @link PDM::DatabaseAttributeManager PDM::DatabaseAttributeManager@endlink 
                    class that will be used to modify database attributes while creating the new part.  @return  the new @link PDM::DatabaseAttributeManager PDM::DatabaseAttributeManager@endlink  instance  <br> License requirements : None */
            public: NXOpen::PDM::DatabaseAttributeManager * NewDatabaseAttributeManager
            (
            );
            /** Create an instance of a @link PDM::AlternateIdManager PDM::AlternateIdManager@endlink 
                    class that will be used to create alternate ID information while creating the new part.  @return  the new @link PDM::AlternateIdManager PDM::AlternateIdManager@endlink  instance  <br> License requirements : None */
            public: NXOpen::PDM::AlternateIdManager * NewAlternateIdManager
            (
            );
            /** This method generates a part number given an input part type and
                    assigns this part number to the builder.
                    
                     <br> The input part type will also be assigned to the builder. If the
                    input part type is NULL then this method will fail unless the part
                    type has already been set on the builder via a previous call to this method
                    or to @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink .
                     <br> 

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    (as will typically be the case) then the <b>part_type</b> and
                    <b>part_number</b> parameters of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the values assigned
                    by this method. Otherwise, CreatePartSpec will override the values assigned
                    here and assign the values of the <b>part_type</b> and <b>part_number</b>
                    parameters to the builder.
                     <br> 
                     @return  the assigned part number  <br> License requirements : None */
            public: NXString AssignPartNumber
            (
                const NXString & partType /** the part type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**This method generates a part revision and assigns this part revision
                    to the builder.

                     <br> 
                    This method depends on the part type and part number already being
                    set on the builder. Therefore, a call to
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink  or,
                    more likely, to @link AssignPartNumber AssignPartNumber@endlink  must be made
                    before calling this method.
                     <br> 

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    (as will typically be the case) then the <b>part_revision</b> parameter of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the value of the <b>part_revision</b>
                    parameters to the builder.
                     <br> 
                     @return  the assigned part revision  <br> License requirements : None */
            public: NXString AssignPartRevision
            (
            );
            /**This method generates a part file name given an input part file type and
                    assigns this part file name to the builder.

                     <br> 
                    This method depends on the part type, part number, and part revision
                    already being set on the builder. Therefore, a call to
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink  or,
                    more likely, calls to @link PDM::PartBuilder::AssignPartNumber PDM::PartBuilder::AssignPartNumber@endlink  and
                    @link PDM::PartBuilder::AssignPartRevision PDM::PartBuilder::AssignPartRevision@endlink  must be made
                    before calling this method.
                     <br> 

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    (as will typically be the case) then the <b>part_file_type</b> and
                    <b>part_file_name</b> parameters of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the values assigned
                    by this method. Otherwise, CreatePartSpec will override the values assigned
                    here and assign the values of the <b>part_file_type</b> and <b>part_file_name</b>
                    parameters to the builder.
                     <br> 

                     @return  the assigned part file name  <br> License requirements : None */
            public: NXString AssignPartFileName
            (
                const NXString & partFileType /** the part file type. Note that if the
                               part file type is "master", then this method will return NULL but
                               will still set the part file type in the builder.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** This method generates a part number given an input part type and
                    sets this part number to the builder.
                    
                     <br> The input part type will also be assigned to the builder. If the
                    input part type is NULL then this method will fail unless the part
                    type has already been set on the builder via a previous call to this method
                    or to @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink .
                     <br> 

                     <br> 
                    If this overloaded method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    then the <b>part_number</b> parameter of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the value of <b>part_number</b>
                    parameter to the builder.
                     <br> 
                     @return  Contains part number information. <br> License requirements : None */
            public: NXOpen::PDM::PartBuilder::PartNumberData AssignPartNumber
            (
                const NXString & oldPartNumber /** Old part number   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & partType /** Part type   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** This method generates a part revision and sets this part number to the builder.

                     <br> 
                    This method depends on the part type and part number already being
                    set on the builder. Therefore, a call to
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink  or,
                    more likely, to @link AssignPartNumber AssignPartNumber@endlink  must be made
                    before calling this method.
                     <br> 

                     <br> If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    then the <b>part_revision</b> parameter of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the value of the <b>part_revision</b>
                    parameters to the builder.
                     <br> 
                     @return  Contains part revision information  <br> License requirements : None */
            public: NXOpen::PDM::PartBuilder::PartRevisionData AssignPartRevision
            (
                int overload /** Dummy parameter to call this overloaded method*/
            );
            /**This method generates a part file name and assigns this part 
                    file name to the builder.

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    then the <b>part_file_name</b> parameter of @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the values of the <b>part_file_type</b> and <b>part_file_name</b>
                    parameters to the builder.
                     <br> 

                     @return   <br> License requirements : None */
            public: NXOpen::PDM::PartBuilder::PartFileNameData AssignPartFileName
            (
                const NXString & partNumber /**Part Number  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & partRevision /** part revision  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & partFileNameType /**Part file name type.
                                Note that if the part file type is "master", then this method will set the 
                                field <b>PartFileName</b> of @link PDM::PartBuilder::PartFileNameData PDM::PartBuilder::PartFileNameData@endlink 
                                with NULL  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & oldPartFileName /**Old part file name  <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**
                    Sets the part number explicitly into builder.   <br> 
                    This method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink         
                     <br>  <br> License requirements : None */
            public: void SetAssignPartNumber
            (
                const NXString & partNumber /** the part number   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**
                    Sets the part type explicitly into builder.   <br> 
                    This method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink        
                     <br>  <br> License requirements : None */
            public: void SetAssignPartType
            (
                const NXString & partType /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** 
                    Sets explicitly the place from where part selection dialog invoked into builder.
                      <br> License requirements : None */
            public: void SetContextOperation
            (
                NXOpen::PDM::PartBuilder::Operation operation /** Token identifying place from where UG/Manager part selection dialog invoked */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
