#ifndef NXOpen_FEATURES_SNIPSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SNIPSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SnipSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_SnipSurfaceBuilder.hxx>
#include <NXOpen/GeometricUtilities_RefitControlBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class SnipSurfaceBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class ProjectionOptions;
    }
    namespace GeometricUtilities
    {
        class RefitControlBuilder;
    }
    class Plane;
    class Section;
    class SelectFace;
    namespace Features
    {
        class _SnipSurfaceBuilderBuilder;
        /**
            Represents a @link Features::SnipSurface Features::SnipSurface@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateSnipSurfaceBuilder Features::FeatureCollection::CreateSnipSurfaceBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.Degree </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.SegmentsOrPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.UDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.UPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.VDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        RefitControl.DegreesAndSegmentsOrPatches.VPatches </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT SnipSurfaceBuilder : public Features::FeatureBuilder
        {
            private: friend class  _SnipSurfaceBuilderBuilder;
            protected: SnipSurfaceBuilder();
            /**Returns  the target face  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectFace * TargetFace
            (
            );
            /**Returns  the snipping curve  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Section * SnippingCurve
            (
            );
            /**Returns  the snipping plane  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Plane * SnippingPlane
            (
            );
            /**Sets  the snipping plane  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetSnippingPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the project direction  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::ProjectionOptions * ProjectDirection
            (
            );
            /**Returns  the refit control  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::RefitControlBuilder * RefitControl
            (
            );
            /**Returns  a value indicating whether to divide the surface  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool DivideSurface
            (
            );
            /**Sets  a value indicating whether to divide the surface  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetDivideSurface
            (
                bool divide /** divide */ 
            );
            /**Returns  a value indicating whether to keep the opposite surface.  This is applicable only when DivideSurface is false   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool KeepOppositeSurface
            (
            );
            /**Sets  a value indicating whether to keep the opposite surface.  This is applicable only when DivideSurface is false   <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetKeepOppositeSurface
            (
                bool switchRegion /** switchregion */ 
            );
            /**Returns   the 3D point picked on surface in Select Face  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Point3d RegionPickPoint
            (
            );
            /**Sets   the 3D point picked on surface in Select Face  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetRegionPickPoint
            (
                const NXOpen::Point3d & pnt /** pnt */ 
            );
            /**Returns  the UV values of the picked point on surface <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Point3d SurfacePointUV
            (
            );
            /**Sets  the UV values of the picked point on surface <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetSurfacePointUV
            (
                const NXOpen::Point3d & surfacePointUV /** surfacepointuv */ 
            );
            /**Returns  the cutting type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: int CutType
            (
            );
            /**Sets  the cutting type  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetCutType
            (
                int cutType /** cuttype */ 
            );
            public: bool GetCreateNewCopy
            (
            );
            public: void SetCreateNewCopy
            (
                bool createNewCopy /** createnewcopy */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
