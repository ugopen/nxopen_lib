#ifndef NXOpen_PHYSICALMATERIALCOLLECTION_HXX_INCLUDED
#define NXOpen_PHYSICALMATERIALCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PhysicalMaterialCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PhysicalMaterial.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class PhysicalMaterialCollection;
    class MaterialManager;
    class Material;
    namespace PhysMat
    {
        class PhysicalMaterialAssignBuilder;
    }
    namespace PhysMat
    {
        class PhysicalMaterialLibMgrBuilder;
    }
    namespace PhysMat
    {
        class PhysicalMaterialListBuilder;
    }
    class PhysicalMaterial;
    class PhysicalMaterialBuilder;
    /**  @brief  Represents the collection of all @link PhysicalMaterial PhysicalMaterial@endlink  objects in this Part 

       <br> To obtain an instance of this class, refer to @link MaterialManager MaterialManager@endlink  <br> */
    class NXOPENCPPEXPORT PhysicalMaterialCollection : public TaggedObjectCollection
    {
        private: NXOpen::MaterialManager* m_owner;
        public: explicit PhysicalMaterialCollection(NXOpen::MaterialManager *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Iterator for accessing the contents of the collection. */
        class iterator
        {
        public:
            typedef Material * value_type;
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
            }//lint !e1401 m_state is not initialized 
            explicit iterator(NXOpen::PhysicalMaterialCollection *context) : m_context(context), m_current(NULL_TAG)
            {
            }//lint !e1401 m_state is not initialized 
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::PhysicalMaterialCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link PhysicalMaterial PhysicalMaterial@endlink  with the given identifier as recorded in a journal.
            An exception will be thrown if no object can be found with the given journal identifier.  @return  material found  <br> License requirements : None */
        public: NXOpen::Material * FindObject
        (
            const NXString & journalIdentifier /** Identifier to be found   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** This method loads a material with the input library reference from the NX material library  @return  the loaded material   <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromNxlibrary
        (
            const NXString & libraryReference /** the unique library reference for a matieral in this Library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Creates a @link PhysMat::PhysicalMaterialListBuilder PhysMat::PhysicalMaterialListBuilder@endlink  that controls the physical materials list UI
                block look and feel as well as capturing the interactions so the values/settings can be journaled.
             @return  created @link PhysMat::PhysicalMaterialListBuilder PhysMat::PhysicalMaterialListBuilder@endlink   <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialListBuilder * CreateListBlockBuilder
        (
        );
        /** Creates a PhysMat.MaterialAssignBuilder used by the physical material assign UI to control the look and feel
                as well as capturing the interactions so the values/settings can be journaled.
             @return  created @link PhysMat::PhysicalMaterialAssignBuilder PhysMat::PhysicalMaterialAssignBuilder@endlink   <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialAssignBuilder * CreateMaterialAssignBuilder
        (
        );
        /** Creates a PhysMat.PhysicalMaterialBuilder used to edit physical materials.
             @return  created @link PhysicalMaterialBuilder PhysicalMaterialBuilder@endlink   <br> License requirements : None */
        public: NXOpen::PhysicalMaterialBuilder * CreatePhysicalMaterialEditBuilder
        (
            NXOpen::PhysicalMaterial * physicalMaterial /** @link PhysicalMaterial PhysicalMaterial@endlink  to be edited   */
        );
        /** Creates a PhysMat.PhysicalMaterialBuilder used to create a physical materials of a given type
             @return  created @link PhysicalMaterialBuilder PhysicalMaterialBuilder@endlink   <br> License requirements : None */
        public: NXOpen::PhysicalMaterialBuilder * CreatePhysicalMaterialBuilder
        (
            NXOpen::PhysicalMaterial::Type materialType /** Type of @link PhysicalMaterial PhysicalMaterial@endlink  to be created  */
        );
        /** Creates a PhysMat.PhysicalMaterialLibMgrBuilder used by the material library manager UI to control the look and feel
                as well as capturing the interactions so the values/settings can be journaled.
             @return  created @link PhysMat::PhysicalMaterialLibMgrBuilder PhysMat::PhysicalMaterialLibMgrBuilder@endlink   <br> License requirements : None */
        public: NXOpen::PhysMat::PhysicalMaterialLibMgrBuilder * CreateMaterialLibmgrBuilder
        (
        );
        /** This method loads a material with a given name from a specified MatML material library into the NX file.
             @return  the loaded material   <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * LoadFromMatmlLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & libraryReference /** the material name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** This method copies a material with a given name from a specified material library into the NX file.
             @return  the copied material   <br> License requirements : None */
        public: NXOpen::PhysicalMaterial * CopyMaterialFromLibrary
        (
            const NXString & libraryName /** the fully qualified library name or if the leaf it will use the current directory, followed by the user and site directories set up in the customer defaults   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & libraryReference /** the material name/identifier   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Writes out materials to a material library file.  These materials can be local material definitions or material definitions
                from other material libraries.  The combination of the material name and library name identify a material definition.  If
                the material definition is for a local material, the name is specified and the library name is specified as "".  Write access
                is needed for the Exported library.
             <br> License requirements : None */
        public: void OutputMaterialsToLibrary
        (
            std::vector<NXString> & pcMatlNames /** Array of identifiers of the materials to be exported         <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            std::vector<NXString> & pcLibNames /** Array of library names corresponding to the material names   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcExportedLibName /** The library to write the material definitions to              <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Updates the materials in a material library file.  Write access is needed for this operation.
             <br> License requirements : None */
        public: void UpdateMaterialsInLibrary
        (
            const std::vector<NXOpen::PhysicalMaterial *> & tEditedMatl /** Array of loaded material tags  */,
            std::vector<NXString> & pMatlNames /** Array of the material names which match the name in the library that should take the properties of the  corresponding material (tEditedMatl)   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcLibName /** Library to modify   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /** Deletes the materials from a material library file.  Write access is needed for this operation.
             <br> License requirements : None */
        public: void DeleteMaterialsFromLibrary
        (
            std::vector<NXString> & pMatlNames /** Arrays of identifiers of the materials to be deleted from the library   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
            const NXString & pcLibName /** Library to modify   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
