#ifndef NXOpen_GEOMETRICANALYSIS_GEOMETRICPROPERTIES_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_GEOMETRICPROPERTIES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_GeometricProperties.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/GeometricAnalysis_GeometricProperties.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class GeometricProperties;
    }
    class Builder;
    class NXObject;
    class SelectObjectList;
    namespace GeometricAnalysis
    {
        class _GeometricPropertiesBuilder;
        /** Represents the Geometric Properties class. This class can be used to
              find local geometric properties of faces, edges, curves, CAE faces, and CAE
              edges/curves at a given point.
              <br> To create a new instance of this class, use @link GeometricAnalysis::AnalysisManager::CreateGeometricPropertiesObject GeometricAnalysis::AnalysisManager::CreateGeometricPropertiesObject@endlink  <br> */
        class NXOPENCPPEXPORT GeometricProperties : public Builder
        {
            /** Represents how to output geometric properties.
                         @link GeometricAnalysis::GeometricProperties::OutputTypeDynamic GeometricAnalysis::GeometricProperties::OutputTypeDynamic@endlink 
                         displays the properties of an entity under the cursor when NX is
                         run interactively. */
            public: enum OutputType
            {
                OutputTypeDynamic/** Properties of an entity are displayed first on the dialog
                                                                              itself on mouse over. These properties are listed on in the
                                                                              information window upon selection of a point. */,
                OutputTypeStatic/** Propeties of the selected entities are displayed in the
                                                                            information window. */
            };

            /** Type of input entity for geometric properties. */
            public: enum Entity
            {
                EntityFace/** Face */,
                EntityEdge/** Either a modeling edge or a curve. */,
                EntityCaeFace/** CAE Face */,
                EntityCaeCurve/** CAE Curve */
            };

             /** Face Geometric Properties */
            public:
            struct Face
            {
                public: /** U parameter */double UParamater;
                public: /** V parameter */double VParamater;
                public: /**   XYZ Position in Work Part coordinates*/NXOpen::Point3d PositionInWcs;
                public: /**   Derivative Vector in U direction - Work Part  Coordinates*/NXOpen::Vector3d UDerivativeInWcs;
                public: /**   Derivative Vector in V direction - Work Part  Coordinates*/NXOpen::Vector3d VDerivativeInWcs;
                public: /**  Unitized Face Normal - Work Part Coordinates*/NXOpen::Vector3d NormalInWcs;
                public: /** XYZ Position */NXOpen::Point3d Position;
                public: /**   Derivative Vector in U direction -  Root Part Coordinates*/NXOpen::Vector3d UDerivative;
                public: /**   Derivative Vector in V direction - Root Part  Coordinates*/NXOpen::Vector3d VDerivative;
                public: /**  Unitized Face Normal - Root Part Coordinates*/NXOpen::Vector3d Normal;
                public: /** Inverse of Minumum  Radius of
                                                    Curvature, 1/(minimum radius of curvature) */double InvOfMinRadiusOfCurvature;
                public: /** Inverse of Maximum Radius of
                                                    Curvature,  1/(maximum radius of curvature). */double InvOfMaxRadiusOfCurvature;
                public: Face() :
                    UParamater(),
                    VParamater(),
                    PositionInWcs(),
                    UDerivativeInWcs(),
                    VDerivativeInWcs(),
                    NormalInWcs(),
                    Position(),
                    UDerivative(),
                    VDerivative(),
                    Normal(),
                    InvOfMinRadiusOfCurvature(),
                    InvOfMaxRadiusOfCurvature()
                {
                }
                /** Constructor for the Face struct. */ 
                public: Face(double INIT_u_paramater /** U parameter */, 
                        double INIT_v_paramater /** V parameter */, 
                        NXOpen::Point3d INIT_position_in_wcs /**   XYZ Position in Work Part coordinates*/, 
                        NXOpen::Vector3d INIT_u_derivative_in_wcs /**   Derivative Vector in U direction - Work Part  Coordinates*/, 
                        NXOpen::Vector3d INIT_v_derivative_in_wcs /**   Derivative Vector in V direction - Work Part  Coordinates*/, 
                        NXOpen::Vector3d INIT_normal_in_wcs /**  Unitized Face Normal - Work Part Coordinates*/, 
                        NXOpen::Point3d INIT_position /** XYZ Position */, 
                        NXOpen::Vector3d INIT_u_derivative /**   Derivative Vector in U direction -  Root Part Coordinates*/, 
                        NXOpen::Vector3d INIT_v_derivative /**   Derivative Vector in V direction - Root Part  Coordinates*/, 
                        NXOpen::Vector3d INIT_normal /**  Unitized Face Normal - Root Part Coordinates*/, 
                        double INIT_inv_of_min_radius_of_curvature /** Inverse of Minumum  Radius of
                                                            Curvature, 1/(minimum radius of curvature) */, 
                        double INIT_inv_of_max_radius_of_curvature /** Inverse of Maximum Radius of
                                                            Curvature,  1/(maximum radius of curvature). */) :
                    UParamater(INIT_u_paramater),
                    VParamater(INIT_v_paramater),
                    PositionInWcs(INIT_position_in_wcs),
                    UDerivativeInWcs(INIT_u_derivative_in_wcs),
                    VDerivativeInWcs(INIT_v_derivative_in_wcs),
                    NormalInWcs(INIT_normal_in_wcs),
                    Position(INIT_position),
                    UDerivative(INIT_u_derivative),
                    VDerivative(INIT_v_derivative),
                    Normal(INIT_normal),
                    InvOfMinRadiusOfCurvature(INIT_inv_of_min_radius_of_curvature),
                    InvOfMaxRadiusOfCurvature(INIT_inv_of_max_radius_of_curvature)
                {
                }
            };

             /** Edge/Curve Geometric Properties */
            public:
            struct Edge
            {
                public: /** Curve Parameter Percentage */double ParameterPercentage;
                public: /**  Curve Parameter*/double Parameter;
                public: /**   XYZ Position in Work Part coordinates*/NXOpen::Point3d PositionInWcs;
                public: /**   XYZ Position in Root Part coordinates*/NXOpen::Point3d Position;
                public: /**   Tangent Vector in Work Part coordinates*/NXOpen::Vector3d TangentInWcs;
                public: /**   Tangent Vector in Root Part coordinates*/NXOpen::Vector3d Tangent;
                public: /**   Curve Normal in Work Part coordinates*/NXOpen::Vector3d NormalInWcs;
                public: /**   Curve Normal in Root Part coordinates*/NXOpen::Vector3d Normal;
                public: /**  Curve Binormal in Work Part coordinates*/NXOpen::Vector3d BinormalInWcs;
                public: /**  Curve Binormal in Root Part coordinates*/NXOpen::Vector3d Binormal;
                public: /**   Curve Torsion*/double Torsion;
                public: /**    Curvature of the Curve*/double Curvature;
                public: Edge() :
                    ParameterPercentage(),
                    Parameter(),
                    PositionInWcs(),
                    Position(),
                    TangentInWcs(),
                    Tangent(),
                    NormalInWcs(),
                    Normal(),
                    BinormalInWcs(),
                    Binormal(),
                    Torsion(),
                    Curvature()
                {
                }
                /** Constructor for the Edge struct. */ 
                public: Edge(double INIT_parameter_percentage /** Curve Parameter Percentage */, 
                        double INIT_parameter /**  Curve Parameter*/, 
                        NXOpen::Point3d INIT_position_in_wcs /**   XYZ Position in Work Part coordinates*/, 
                        NXOpen::Point3d INIT_position /**   XYZ Position in Root Part coordinates*/, 
                        NXOpen::Vector3d INIT_tangent_in_wcs /**   Tangent Vector in Work Part coordinates*/, 
                        NXOpen::Vector3d INIT_tangent /**   Tangent Vector in Root Part coordinates*/, 
                        NXOpen::Vector3d INIT_normal_in_wcs /**   Curve Normal in Work Part coordinates*/, 
                        NXOpen::Vector3d INIT_normal /**   Curve Normal in Root Part coordinates*/, 
                        NXOpen::Vector3d INIT_binormal_in_wcs /**  Curve Binormal in Work Part coordinates*/, 
                        NXOpen::Vector3d INIT_binormal /**  Curve Binormal in Root Part coordinates*/, 
                        double INIT_torsion /**   Curve Torsion*/, 
                        double INIT_curvature /**    Curvature of the Curve*/) :
                    ParameterPercentage(INIT_parameter_percentage),
                    Parameter(INIT_parameter),
                    PositionInWcs(INIT_position_in_wcs),
                    Position(INIT_position),
                    TangentInWcs(INIT_tangent_in_wcs),
                    Tangent(INIT_tangent),
                    NormalInWcs(INIT_normal_in_wcs),
                    Normal(INIT_normal),
                    BinormalInWcs(INIT_binormal_in_wcs),
                    Binormal(INIT_binormal),
                    Torsion(INIT_torsion),
                    Curvature(INIT_curvature)
                {
                }
            };

             /** CAE Face Geometric Properties */
            public:
            struct CaeFace
            {
                public: /** closest point on face in Root Part Coordinates*/NXOpen::Vector3d ClosestPoint;
                public: /**  u parameter of the closest point in Root Part Coordinates*/double UParameter;
                public: /**  v parameter of the closest point in Root Part Coordinates*/double VParameter;
                public: /**  normal at the closest point in Root Part Coordinates*/NXOpen::Vector3d Normal;
                public: /**  closest point in Work Part Coordinates*/NXOpen::Point3d ClosestPointInWcs;
                public: /** normal in Work Part Coordinates*/NXOpen::Vector3d NormalInWcs;
                public: /**  Derivative in U, Root Part Coordinates*/NXOpen::Vector3d UDerivative;
                public: /**  Derivative in V, Root Part Coordinates*/NXOpen::Vector3d VDerivative;
                public: /**  Derivative in U in Work Part Coordinates*/NXOpen::Vector3d UDerivativeInWcs;
                public: /**  Derivative in V in Work Part Coordinates*/NXOpen::Vector3d VDerivativeInWcs;
                public: CaeFace() :
                    ClosestPoint(),
                    UParameter(),
                    VParameter(),
                    Normal(),
                    ClosestPointInWcs(),
                    NormalInWcs(),
                    UDerivative(),
                    VDerivative(),
                    UDerivativeInWcs(),
                    VDerivativeInWcs()
                {
                }
                /** Constructor for the CaeFace struct. */ 
                public: CaeFace(NXOpen::Vector3d INIT_closest_point /** closest point on face in Root Part Coordinates*/, 
                        double INIT_u_parameter /**  u parameter of the closest point in Root Part Coordinates*/, 
                        double INIT_v_parameter /**  v parameter of the closest point in Root Part Coordinates*/, 
                        NXOpen::Vector3d INIT_normal /**  normal at the closest point in Root Part Coordinates*/, 
                        NXOpen::Point3d INIT_closest_point_in_wcs /**  closest point in Work Part Coordinates*/, 
                        NXOpen::Vector3d INIT_normal_in_wcs /** normal in Work Part Coordinates*/, 
                        NXOpen::Vector3d INIT_u_derivative /**  Derivative in U, Root Part Coordinates*/, 
                        NXOpen::Vector3d INIT_v_derivative /**  Derivative in V, Root Part Coordinates*/, 
                        NXOpen::Vector3d INIT_u_derivative_in_wcs /**  Derivative in U in Work Part Coordinates*/, 
                        NXOpen::Vector3d INIT_v_derivative_in_wcs /**  Derivative in V in Work Part Coordinates*/) :
                    ClosestPoint(INIT_closest_point),
                    UParameter(INIT_u_parameter),
                    VParameter(INIT_v_parameter),
                    Normal(INIT_normal),
                    ClosestPointInWcs(INIT_closest_point_in_wcs),
                    NormalInWcs(INIT_normal_in_wcs),
                    UDerivative(INIT_u_derivative),
                    VDerivative(INIT_v_derivative),
                    UDerivativeInWcs(INIT_u_derivative_in_wcs),
                    VDerivativeInWcs(INIT_v_derivative_in_wcs)
                {
                }
            };

             /** CAE Edge/Curve Geometric Properties */
            public:
            struct CaeCurve
            {
                public: /** ArcLength parametrization*/double ArcLengthParameter;
                public: /** UnitArcLength parametrization*/double UnitArcLengthParameter;
                public: /** closest point on curve in Work Part Coordinates*/NXOpen::Point3d ClosestPointInWcs;
                public: /** normal of closest point in Work Part Coordinates*/NXOpen::Vector3d NormalInWcs;
                public: /** tangent of closest point in Work Part Coordinates*/NXOpen::Vector3d TangentInWcs;
                public: /** tangent of closest point in Root Part Coordinates*/NXOpen::Vector3d Tangent;
                public: /** normal of closest point in Root Part Coordinates*/NXOpen::Vector3d Normal;
                public: /** closest point on curve in Root Part Coordinates*/NXOpen::Point3d ClosestPoint;
                public: CaeCurve() :
                    ArcLengthParameter(),
                    UnitArcLengthParameter(),
                    ClosestPointInWcs(),
                    NormalInWcs(),
                    TangentInWcs(),
                    Tangent(),
                    Normal(),
                    ClosestPoint()
                {
                }
                /** Constructor for the CaeCurve struct. */ 
                public: CaeCurve(double INIT_arc_length_parameter /** ArcLength parametrization*/, 
                        double INIT_unit_arc_length_parameter /** UnitArcLength parametrization*/, 
                        NXOpen::Point3d INIT_closest_point_in_wcs /** closest point on curve in Work Part Coordinates*/, 
                        NXOpen::Vector3d INIT_normal_in_wcs /** normal of closest point in Work Part Coordinates*/, 
                        NXOpen::Vector3d INIT_tangent_in_wcs /** tangent of closest point in Work Part Coordinates*/, 
                        NXOpen::Vector3d INIT_tangent /** tangent of closest point in Root Part Coordinates*/, 
                        NXOpen::Vector3d INIT_normal /** normal of closest point in Root Part Coordinates*/, 
                        NXOpen::Point3d INIT_closest_point /** closest point on curve in Root Part Coordinates*/) :
                    ArcLengthParameter(INIT_arc_length_parameter),
                    UnitArcLengthParameter(INIT_unit_arc_length_parameter),
                    ClosestPointInWcs(INIT_closest_point_in_wcs),
                    NormalInWcs(INIT_normal_in_wcs),
                    TangentInWcs(INIT_tangent_in_wcs),
                    Tangent(INIT_tangent),
                    Normal(INIT_normal),
                    ClosestPoint(INIT_closest_point)
                {
                }
            };

            /** Status of computing geometric properties. */
            public: enum Status
            {
                StatusSuccess/** Success */,
                StatusInvalidInput/** Input specified is not
                                                                               valid.*/,
                StatusFailed/** Failed to find all geometric
                                                                         properties*/
            };

            private: friend class  _GeometricPropertiesBuilder;
            protected: GeometricProperties();
            /**Returns  the output method  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::GeometricProperties::OutputType OutputMethod
            (
            );
            /**Sets  the output method  <br> License requirements : None */
            public: void SetOutputMethod
            (
                NXOpen::GeometricAnalysis::GeometricProperties::OutputType outputMethod /** output method */ 
            );
            /**Returns  the Objects for analysis  <br> License requirements : None */
            public: NXOpen::SelectObjectList * ObjectsForAnalysis
            (
            );
            /** Returns face local properties at the given point  @return  Return status  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::GeometricProperties::Status GetFaceProperties
            (
                NXOpen::NXObject * entityTag /** NXObject to
                                                                             obtain the properties for */,
                const NXOpen::Point3d & absPoint /** Absolute point
                                                                            co-ordinates of the reference point 
                                                                            to compute the properties */,
                NXOpen::GeometricAnalysis::GeometricProperties::Face* face /** Face Properties */
            );
            /** Returns edge/curve local properties at the given point  @return  Return status  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::GeometricProperties::Status GetEdgeProperties
            (
                NXOpen::NXObject * entityTag /** NXObject to
                                                                             obtain the properties for */,
                const NXOpen::Point3d & absPoint /** Absolute point
                                                                            co-ordinates of the reference point 
                                                                            to compute the properties */,
                NXOpen::GeometricAnalysis::GeometricProperties::Edge* edge /** Edge/Curve Properties */
            );
            /** Returns CAE face local properties at the given point  @return  Return status  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::GeometricProperties::Status GetCaeFaceProperties
            (
                NXOpen::NXObject * entityTag /** NXObject to
                                                                             obtain the properties for */,
                const NXOpen::Point3d & absPoint /** Absolute point
                                                                            co-ordinates of the reference point 
                                                                            to compute the properties */,
                NXOpen::GeometricAnalysis::GeometricProperties::CaeFace* caeFace /** CAE Face Properties */
            );
            /** Returns CAE curve local properties at the given point  @return  Return status  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::GeometricProperties::Status GetCaeCurveProperties
            (
                NXOpen::NXObject * entityTag /** NXObject to
                                                                             obtain the properties for */,
                const NXOpen::Point3d & absPoint /** Absolute point
                                                                            co-ordinates of the reference point 
                                                                            to compute the properties */,
                NXOpen::GeometricAnalysis::GeometricProperties::CaeCurve* caeCurve /** CAE Edge/Curve Properties */
            );
            /** Displays the local properties of the specified object at the
                          given point in the listing window  @return  Return status  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::GeometricProperties::Status ListProperties
            (
                NXOpen::NXObject * entityTag /** NXObject to
                                                                             obtain the properties for */,
                const NXOpen::Point3d & absPoint /** Absolute point
                                                                            co-ordinates of the reference point 
                                                                            to compute the properties */
            );
            /** Displays the local properties of
                           @link ObjectsForAnalysis ObjectsForAnalysis@endlink  at the given point in 
                           the listing window.   @return  Return status  <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::GeometricProperties::Status ListProperties
            (
                const NXOpen::Point3d & absPoint /** Absolute point
                                                                            co-ordinates of the reference point 
                                                                            to compute the properties */
            );
            /** Clears all markers showing the local geometric properties in the graphics window  <br> License requirements : None */
            public: void Reset
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
