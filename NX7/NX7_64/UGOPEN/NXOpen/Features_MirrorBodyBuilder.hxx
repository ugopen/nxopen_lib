#ifndef NXOpen_FEATURES_MIRRORBODYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MIRRORBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MirrorBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_MirrorBodyBuilder.hxx>
#include <NXOpen/GeometricUtilities_ReplAsstBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class MirrorBodyBuilder;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class ReplAsstBuilder;
    }
    class SelectBodyList;
    class SelectDatumPlane;
    namespace Features
    {
        class _MirrorBodyBuilderBuilder;
        /**
            Represents a @link Features::MirrorBody Features::MirrorBody@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateMirrorBodyBuilder Features::FeatureCollection::CreateMirrorBodyBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        FixAtCurrentTimestamp </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        InheritDisplayProperties </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        MakePositionIndependent </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        ParentPartType </td> <td> 
         
        WorkPart </td> </tr> 

        <tr><td> 
         
        ReplacementAssistant.OneToOne </td> <td> 
         
        True </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT MirrorBodyBuilder : public Features::FeatureBuilder
        {
            /** the parent part types */
            public: enum ParentPart
            {
                ParentPartWorkPart/** Work Part */,
                ParentPartOtherPart/** Other Part */
            };

            private: friend class  _MirrorBodyBuilderBuilder;
            protected: MirrorBodyBuilder();
            /**Returns  the mirror plane
                     <br> License requirements : None */
            public: NXOpen::SelectDatumPlane * Plane
            (
            );
            /**Returns  the mirror body list
                     <br> License requirements : None */
            public: NXOpen::SelectBodyList * MirrorBodyList
            (
            );
            /**Returns  the fix at current timestamp  <br> License requirements : None */
            public: bool FixAtCurrentTimestamp
            (
            );
            /**Sets  the fix at current timestamp  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFixAtCurrentTimestamp
            (
                bool atTimeStamp /** attimestamp */ 
            );
            /**Returns  the associative
                     <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the reverse direction
                     <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseDirection
            (
                bool reverse /** reverse */ 
            );
            /**Returns  the parent part type  <br> License requirements : None */
            public: NXOpen::Features::MirrorBodyBuilder::ParentPart ParentPartType
            (
            );
            /**Sets  the parent part type  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetParentPartType
            (
                NXOpen::Features::MirrorBodyBuilder::ParentPart sourceType /** sourcetype */ 
            );
            /**Returns  the frec at time stamp  <br> License requirements : None */
            public: NXOpen::Features::Feature * FrecAtTimeStamp
            (
            );
            /**Sets  the frec at time stamp  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFrecAtTimeStamp
            (
                NXOpen::Features::Feature * terminalFrec /** terminal frec */ 
            );
            /**Returns  the make position independent  <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the make position independent  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
            /**Returns  the inherit display properties from source option  <br> License requirements : None */
            public: bool InheritDisplayProperties
            (
            );
            /**Sets  the inherit display properties from source option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetInheritDisplayProperties
            (
                bool inheritDisplayProperties /** inheritdisplayproperties */ 
            );
            /**Returns  the Replacement Assistant builder. Call Enter() to enter or re-enter into the mapping environment. 
                        Enter() needs to be executed before invoking any map creation or automatic matching APIs.
                        The matches inferred internally (internal identifier reuse, inherited from parent and siblings)
                        will be populated when Enter() is executed for the first time after selecting a replacement entity.
                        Call Exit() to exit the mapping environment.  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ReplAsstBuilder * ReplacementAssistant
            (
            );
            /** Prints wave browser type information about link  <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void GetWaveLinkInformation
            (
                NXString* info /** queried wave information */,
                bool* xformExists /** true if there is a transform */,
                NXOpen::Point3d* xformOrigin /** transformation origin */,
                NXOpen::Matrix3x3* xformOrientation /** transformation matrix */,
                double* xformScale /** transformation scale */
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
