#ifndef NXOpen_ROUTING_STOCKDATA_HXX_INCLUDED
#define NXOpen_ROUTING_STOCKDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_StockData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class StockData;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    class NXObject;
    namespace Routing
    {
        class Anchor;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class CrossSection;
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        /** Available styles of @link Routing::CrossSection Routing::CrossSection@endlink  for a given 
                @link Routing::StockData Routing::StockData@endlink .  A  @link Routing::StockData Routing::StockData@endlink  may
                have at most one @link Routing::CrossSection Routing::CrossSection@endlink  of each type.  */
        enum StockStyle
        {
            StockStyleNone/** No profile. */,
            StockStyleSimple/** Simple profile. */,
            StockStyleDetailed/** Detailed profile. */
        };

        /** Whether the @link Routing::StockData Routing::StockData@endlink  was generated by the
                bundling algorithm used for routing wires. */
        enum StockDataType
        {
            StockDataTypeNotBundled/** Not generated (or used ) by bundling. */,
            StockDataTypeBundled/** Generated (or used ) by bundling. */
        };

    }
    namespace Routing
    {
        class _StockDataBuilder;
        /** A @link Routing::StockData Routing::StockData@endlink  contains the various profiles, characteristic information, 
                @link Routing::Anchor Routing::Anchor@endlink  and other attributes that define @link Routing::Stock Routing::Stock@endlink  
                objects. Each @link Routing::Stock Routing::Stock@endlink  has exactly one @link Routing::StockData Routing::StockData@endlink 
                associated with it.  All @link Routing::CrossSection Routing::CrossSection@endlink  and @link Routing::Anchor Routing::Anchor@endlink 
                objects used in a @link Routing::Stock Routing::Stock@endlink  object must come from the 
                @link Routing::StockData Routing::StockData@endlink  associated with that @link Routing::Stock Routing::Stock@endlink  object.
               <br> Creator not available in KF because transient objects are not supported. <br> */
        class NXOPENCPPEXPORT StockData : public NXObject, public virtual Routing::ICharacteristic
        {
            private: friend class  _StockDataBuilder;
            protected: StockData();
            /** Gets the list of @link Routing::CrossSection Routing::CrossSection@endlink  objects associated with this
                        @link Routing::StockData Routing::StockData@endlink .  There should be no more than one 
                        @link Routing::CrossSection Routing::CrossSection@endlink  of any particular @link Routing::StockStyle Routing::StockStyle@endlink  
                        (and no @link Routing::CrossSection Routing::CrossSection@endlink  with a style of 
                        @link Routing::StockStyleNone Routing::StockStyleNone@endlink ).  @return  The list of @link Routing::CrossSection Routing::CrossSection@endlink  objects.    <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Routing::CrossSection *> GetCrossSections
            (
            );
            /** Sets the list of @link Routing::CrossSection Routing::CrossSection@endlink  objects associated with this
                        @link Routing::StockData Routing::StockData@endlink .  There should be no more than one @link Routing::CrossSection Routing::CrossSection@endlink 
                        of any particular @link Routing::StockStyle Routing::StockStyle@endlink  (and no @link Routing::CrossSection Routing::CrossSection@endlink  
                        with a style of @link Routing::StockStyleNone Routing::StockStyleNone@endlink ).  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetCrossSections
            (
                const std::vector<NXOpen::Routing::CrossSection *> & crossSections /** The list of @link Routing::CrossSection Routing::CrossSection@endlink  objects.*/
            );
            /** Gets the list of @link Routing::Anchor Routing::Anchor@endlink  objects associated with this
                        @link Routing::StockData Routing::StockData@endlink .  There should be no more than one @link Routing::Anchor Routing::Anchor@endlink 
                        with the same name.  @return  The list of @link Routing::Anchor Routing::Anchor@endlink  objects.    <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Routing::Anchor *> GetAnchors
            (
            );
            /** Sets the list of @link Routing::Anchor Routing::Anchor@endlink  objects associated with this
                        @link Routing::StockData Routing::StockData@endlink .  There should be no more than one @link Routing::Anchor Routing::Anchor@endlink 
                        with the same name.  <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetAnchors
            (
                const std::vector<NXOpen::Routing::Anchor *> & anchors /** The list of @link Routing::Anchor Routing::Anchor@endlink  objects.   */
            );
            /** Returns whether or not the @link Routing::StockData Routing::StockData@endlink  is used in
                        the bundling of wires or not.   @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::StockDataType GetIsBundled
            (
            );
            /** Returns all of the @link Routing::Stock Routing::Stock@endlink  objects that use this 
                      @link Routing::StockData Routing::StockData@endlink  object.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Routing::Stock *> GetStocks
            (
            );
            /** Returns all of the @link Routing::StockData Routing::StockData@endlink  that were used to build this object 
                       by the bundling algorithm.  Only returns valid output if 
                       @link Routing::StockData::GetIsBundled Routing::StockData::GetIsBundled@endlink  returns 
                       @link Routing::StockDataTypeBundled Routing::StockDataTypeBundled@endlink .
                        @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Routing::StockData *> GetBundledStockDatas
            (
            );
            /** Returns the @link Routing::Anchor Routing::Anchor@endlink  which is part of the @link 
                         Routing::StockData 
                         Routing::StockData@endlink , given the anchors name.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::Anchor * GetNamedAnchor
            (
                const NXString & anchorName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Returns the @link Routing::CrossSection Routing::CrossSection@endlink  which is part of the @link 
                        Routing::StockData 
                        Routing::StockData@endlink , given the cross section style.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: NXOpen::Routing::CrossSection * GetStyledCross
            (
                NXOpen::Routing::StockStyle stockStyle /** stock style */ 
            );
            /** Get all of the characteristics values on the this object.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                int value /** value */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                double value /** value */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void SetCharacteristic
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & value /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Removes the input list of characteristics from this object.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /**   Returns the destination characteristics from the input object.
                          Retrieves the description of which destination characteristics to read
                          from the application view and then reads those destination 
                          characteristics from the object
                          <ul>
                              <li>Ports: Reads characteristics from the port.</li>
                              <li>RCPs: Attempts to find a port at the RCP, reads characteristics from
                                          the port if it exists, otherwise reads from the
                                          stock associated with the rcp.</li>
                              <li>Segments: Reads characteristics from the stock associated with the segment.</li>
                              <li>Components: Reads characteristics directly from the component.</li>
                              <li>Stock: Reads characteristics from the stock or from the stock's data.</li>
                          </ul>
                     @return   <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: virtual NXOpen::Routing::CharacteristicList * GetDestinationCharacteristics
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
