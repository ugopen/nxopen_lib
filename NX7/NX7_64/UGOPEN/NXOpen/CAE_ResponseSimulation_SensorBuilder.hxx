#ifndef NXOpen_CAE_RESPONSESIMULATION_SENSORBUILDER_HXX_INCLUDED
#define NXOpen_CAE_RESPONSESIMULATION_SENSORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResponseSimulation_SensorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ResponseSimulation_BaseBuilder.hxx>
#include <NXOpen/CAE_ResponseSimulation.hxx>
#include <NXOpen/CAE_ResponseSimulation_SensorBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class SensorBuilder;
        }
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class BaseBuilder;
        }
    }
    class Direction;
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class _SensorBuilderBuilder;
            /** Represents a @link CAE::ResponseSimulation::SensorBuilder CAE::ResponseSimulation::SensorBuilder@endlink 
                  <br> To create a new instance of this class, use @link CAE::ResponseSimulation::SensorCollection::CreateSensorBuilder CAE::ResponseSimulation::SensorCollection::CreateSensorBuilder@endlink  <br> */
            class NXOPENCPPEXPORT SensorBuilder : public CAE::ResponseSimulation::BaseBuilder
            {
                private: friend class  _SensorBuilderBuilder;
                protected: SensorBuilder();
                /** Returns the destination nodes  @return   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: std::vector<NXOpen::CAE::FENode *> GetSelectedNodes
                (
                );
                /** Sets the destination nodes  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSelectedNodes
                (
                    const std::vector<NXOpen::CAE::FENode *> & destinationNodes /** destination nodes */ 
                );
                /**Returns  the sensor name 
                 @deprecated Deprecated in NX6 <br> 
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXString SensorName
                (
                );
                /**Sets  the sensor name 
                 @deprecated Deprecated in NX6 <br> 
                 <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorName
                (
                    const NXString & name /** name */ 
                );
                /**Returns  the sensor's type  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::SensorType SensorType
                (
                );
                /**Sets  the sensor's type  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorType
                (
                    NXOpen::CAE::ResponseSimulation::SensorType sensorType /** sensor type */ 
                );
                /**Returns  the sensor's result type  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::SensorResultType SensorResultType
                (
                );
                /**Sets  the sensor's result type  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorResultType
                (
                    NXOpen::CAE::ResponseSimulation::SensorResultType resultType /** result type */ 
                );
                /**Returns  the sensor's coordinate type  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::CAE::ResponseSimulation::SensorCoordinateType SensorCoordinateType
                (
                );
                /**Sets  the sensor's coordinate type  <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorCoordinateType
                (
                    NXOpen::CAE::ResponseSimulation::SensorCoordinateType coordinateType /** coordinate type */ 
                );
                /**Returns  the user defined direction.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeDirection CAE::ResponseSimulation::SensorTypeDirection@endlink   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: NXOpen::Direction * SensorVector
                (
                );
                /**Sets  the user defined direction.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeDirection CAE::ResponseSimulation::SensorTypeDirection@endlink   <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorVector
                (
                    NXOpen::Direction * sensorVector /** sensor vector */ 
                );
                /**Returns  the setting for x direction compontent of sensor. 
                            If true, the response on direction x will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool SensorDirectionX
                (
                );
                /**Sets  the setting for x direction compontent of sensor. 
                            If true, the response on direction x will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorDirectionX
                (
                    bool directionX /** direction x */ 
                );
                /**Returns  the setting for y direction compontent of sensor. 
                            If true, the response on direction y will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool SensorDirectionY
                (
                );
                /**Sets  the setting for y direction compontent of sensor. 
                            If true, the response on direction y will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorDirectionY
                (
                    bool directionY /** direction y */ 
                );
                /**Returns  the setting for z direction compontent of sensor. 
                            If true, the response on direction z will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool SensorDirectionZ
                (
                );
                /**Sets  the setting for z direction compontent of sensor. 
                            If true, the response on direction z will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorDirectionZ
                (
                    bool directionZ /** direction z */ 
                );
                /**Returns  the setting for x rotation compontent of sensor. 
                            If true, the response on rotation x will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool SensorRotationX
                (
                );
                /**Sets  the setting for x rotation compontent of sensor. 
                            If true, the response on rotation x will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorRotationX
                (
                    bool rotationX /** rotation x */ 
                );
                /**Returns  the setting for y rotation compontent of sensor. 
                            If true, the response on rotation y will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool SensorRotationY
                (
                );
                /**Sets  the setting for y rotation compontent of sensor. 
                            If true, the response on rotation y will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorRotationY
                (
                    bool rotationY /** rotation y */ 
                );
                /**Returns  the setting for z rotation compontent of sensor. 
                            If true, the response on rotation z will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool SensorRotationZ
                (
                );
                /**Sets  the setting for z rotation compontent of sensor. 
                            If true, the response on rotation z will be calculated.
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeComponent CAE::ResponseSimulation::SensorTypeComponent@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetSensorRotationZ
                (
                    bool rotationZ /** rotation z */ 
                );
                /**Returns  the option for reverse the normal direction. 
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeNormal CAE::ResponseSimulation::SensorTypeNormal@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: bool ReverseNormalDirection
                (
                );
                /**Sets  the option for reverse the normal direction. 
                            Only available when the sensor type is
                            @link CAE::ResponseSimulation::SensorTypeNormal CAE::ResponseSimulation::SensorTypeNormal@endlink    <br> License requirements : nx_response_anlys ("NX Response Analysis") */
                public: void SetReverseNormalDirection
                (
                    bool normalDirection /** normal direction */ 
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
