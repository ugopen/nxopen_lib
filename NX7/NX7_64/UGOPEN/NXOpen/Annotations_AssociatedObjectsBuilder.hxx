#ifndef NXOpen_ANNOTATIONS_ASSOCIATEDOBJECTSBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ASSOCIATEDOBJECTSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_AssociatedObjectsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_AssociatedObjectsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class AssociatedObjectsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectDisplayableObjectList;
    namespace Annotations
    {
        class _AssociatedObjectsBuilderBuilder;
        /** The associated objects builder is used to store objects which annotations are associated to */
        class NXOPENCPPEXPORT AssociatedObjectsBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _AssociatedObjectsBuilderBuilder;
            protected: AssociatedObjectsBuilder();
            /**Returns  the associated objects  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * Objects
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
