#ifndef NXOpen_SKETCHAUTOCONSTRAINBUILDER_HXX_INCLUDED
#define NXOpen_SKETCHAUTOCONSTRAINBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchAutoConstrainBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/SketchAutoConstrainBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class SketchAutoConstrainBuilder;
    class Builder;
    class SelectObjectList;
    class _SketchAutoConstrainBuilderBuilder;
    /** 
    Represents a @link SketchAutoConstrainBuilder SketchAutoConstrainBuilder@endlink 
     <br> To create a new instance of this class, use @link SketchCollection::CreateAutoConstrainBuilder SketchCollection::CreateAutoConstrainBuilder@endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    Horizontal </td> <td> 
     
    True </td> </tr> 

    <tr><td> 
     
    Parallel </td> <td> 
     
    True </td> </tr> 

    <tr><td> 
     
    Perpendicular </td> <td> 
     
    True </td> </tr> 

    <tr><td> 
     
    Tangent </td> <td> 
     
    True </td> </tr> 

    <tr><td> 
     
    Vertical </td> <td> 
     
    True </td> </tr> 

    </table>  
    */
    class NXOPENCPPEXPORT SketchAutoConstrainBuilder : public Builder
    {
        private: friend class  _SketchAutoConstrainBuilderBuilder;
        protected: SketchAutoConstrainBuilder();
        /**Returns  the selected curve list.  <br> License requirements : None */
        public: NXOpen::SelectObjectList * CurveList
        (
        );
        /**Returns  the horizontal  <br> License requirements : None */
        public: bool Horizontal
        (
        );
        /**Sets  the horizontal  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetHorizontal
        (
            bool horizontal /** horizontal */ 
        );
        /**Returns  the vertical  <br> License requirements : None */
        public: bool Vertical
        (
        );
        /**Sets  the vertical  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetVertical
        (
            bool vertical /** vertical */ 
        );
        /**Returns  the tangent  <br> License requirements : None */
        public: bool Tangent
        (
        );
        /**Sets  the tangent  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetTangent
        (
            bool tangent /** tangent */ 
        );
        /**Returns  the parallel  <br> License requirements : None */
        public: bool Parallel
        (
        );
        /**Sets  the parallel  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetParallel
        (
            bool parallel /** parallel */ 
        );
        /**Returns  the perpendicular  <br> License requirements : None */
        public: bool Perpendicular
        (
        );
        /**Sets  the perpendicular  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetPerpendicular
        (
            bool perpendicular /** perpendicular */ 
        );
        /**Returns  the collinear  <br> License requirements : None */
        public: bool Collinear
        (
        );
        /**Sets  the collinear  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetCollinear
        (
            bool collinear /** collinear */ 
        );
        /**Returns  the concentric  <br> License requirements : None */
        public: bool Concentric
        (
        );
        /**Sets  the concentric  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetConcentric
        (
            bool concentric /** concentric */ 
        );
        /**Returns  the equal length  <br> License requirements : None */
        public: bool EqualLength
        (
        );
        /**Sets  the equal length  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetEqualLength
        (
            bool equalLength /** equallength */ 
        );
        /**Returns  the equal radius  <br> License requirements : None */
        public: bool EqualRadius
        (
        );
        /**Sets  the equal radius  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetEqualRadius
        (
            bool equalRadius /** equalradius */ 
        );
        /**Returns  the point on curve  <br> License requirements : None */
        public: bool PointOnCurve
        (
        );
        /**Sets  the point on curve  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetPointOnCurve
        (
            bool pointOnCurve /** pointoncurve */ 
        );
        /**Returns  the coincident  <br> License requirements : None */
        public: bool Coincident
        (
        );
        /**Sets  the coincident  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetCoincident
        (
            bool coincident /** coincident */ 
        );
        /** Set all of the individual constraints (turn toggle to on for each one)  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetAllConstraints
        (
        );
        /** Clear all of the indivivual constraints (turn toggle to off for each one)  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void ClearAllConstraints
        (
        );
        /**Returns  the distance tolerance  <br> License requirements : None */
        public: double DistanceTolerance
        (
        );
        /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetDistanceTolerance
        (
            double distanceTolerance /** distancetolerance */ 
        );
        /**Returns  the angle tolerance  <br> License requirements : None */
        public: double AngleTolerance
        (
        );
        /**Sets  the angle tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetAngleTolerance
        (
            double angleTolerance /** angletolerance */ 
        );
        /**Returns  the apply remote constraints  <br> License requirements : None */
        public: bool ApplyRemoteConstraints
        (
        );
        /**Sets  the apply remote constraints  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetApplyRemoteConstraints
        (
            bool applyRemoteConstraints /** applyremoteconstraints */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
