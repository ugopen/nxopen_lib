#ifndef NXOpen_DIE_HANDLINGCOREPARENTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_HANDLINGCOREPARENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_HandlingCoreParentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class HandlingCoreParentBuilder;
    }
    namespace Die
    {
        class HandlingCoreChildBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Die
    {
        class _HandlingCoreParentBuilderBuilder;
        /** Represents a Die Handling Core Parent sub feature.  <br> This sub feature is created via the main feature builder. <br> */
        class NXOPENCPPEXPORT HandlingCoreParentBuilder : public Features::FeatureBuilder
        {
            private: friend class  _HandlingCoreParentBuilderBuilder;
            protected: HandlingCoreParentBuilder();
            /**Sets  the height of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHeight
            (
                double height /** height */ 
            );
            /**Returns  the height of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Height
            (
            );
            /**Sets  the width of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetWidth
            (
                double width /** width */ 
            );
            /**Returns  the width of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Width
            (
            );
            /**Sets  the clearance of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetClearance
            (
                double clearance /** clearance */ 
            );
            /**Returns  the clearance of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Clearance
            (
            );
            /**Sets  the depth of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDepth
            (
                double depth /** depth */ 
            );
            /**Returns  the depth of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: double Depth
            (
            );
            /**Sets  the design status of handling cores, if true the handling cores will be built into the model, if false they will not.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDesignStatus
            (
                bool designStatus /** design status */ 
            );
            /**Returns  the design status of handling cores, if true the handling cores will be built into the model, if false they will not.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DesignStatus
            (
            );
            /**Returns  the build status of handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBuildStatusOption BuildStatus
            (
            );
            /**Sets  the display status of handling cores, if true input data to the handling cores will be displayed, 
                    if false the input data will not be displayed.  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayStatus
            (
                bool displayStatus /** display status */ 
            );
            /**Returns  the display status of handling cores, if true input data to the handling cores will be displayed, 
                    if false the input data will not be displayed.  <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayStatus
            (
            );
            /** Creates a child handling core.  @return   <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::HandlingCoreChildBuilder * CreateChild
            (
            );
            /** Deletes a child handling core.  <br> License requirements : ug_die_design ("Die Design") */
            public: void DeleteChild
            (
                NXOpen::Die::HandlingCoreChildBuilder * diehandlingcorechild /** diehandlingcorechild */ 
            );
            /** Outputs the child handling cores.  @return  The child handling cores.  <br> License requirements : ug_die_design ("Die Design") */
            public: std::vector<NXOpen::Die::HandlingCoreChildBuilder *> GetChildren
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
