#ifndef NXOpen_CAM_CUTPARAMETERS_HXX_INCLUDED
#define NXOpen_CAM_CUTPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CutParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CutParameters.hxx>
#include <NXOpen/CAM_CutParametersEnum.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class CutParameters;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class InheritableToolDepBuilder;
    }
    namespace CAM
    {
        class _CutParametersBuilder;
        /**
            Represents a @link CAM::CutParameters CAM::CutParameters@endlink 
            */
        class NXOPENCPPEXPORT CutParameters : public TaggedObject
        {
            private: friend class  _CutParametersBuilder;
            protected: CutParameters();
            /**Returns  the use tool holder  <br> License requirements : None */
            public: bool UseToolHolder
            (
            );
            /**Sets  the use tool holder  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseToolHolder
            (
                bool propValue /** the use tool holder usage value */
            );
            /**Returns   the value to Check for Ipw Collsions  <br> License requirements : None */
            public: bool CheckIpwCollisions
            (
            );
            /**Sets   the value to Check for Ipw Collsions  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCheckIpwCollisions
            (
                bool flag /** the collision check flag */
            );
            /**Returns  the IPW type  <br> License requirements : None */
            public: NXOpen::CAM::CutParametersIpwTypes IpwType
            (
            );
            /**Sets  the IPW type  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIpwType
            (
                NXOpen::CAM::CutParametersIpwTypes propValue /** propvalue */ 
            );
            /**Returns  the part stock  <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * PartStock
            (
            );
            /**Returns  the part inner tolerance  <br> License requirements : None */
            public: double PartInTol
            (
            );
            /**Sets  the part inner tolerance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartInTol
            (
                double propValue /** the inner tolerance value */
            );
            /**Returns  the part outer tolerance  <br> License requirements : None */
            public: double PartOutTol
            (
            );
            /**Sets  the part outer tolerance  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPartOutTol
            (
                double propValue /** the inner tolerance value */
            );
            /**Returns  the Part Safe Clearance   <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * PartSafeClearance
            (
            );
            /**Returns  the Check Safe Clearance  <br> License requirements : None */
            public: NXOpen::CAM::InheritableToolDepBuilder * CheckSafeClearance
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
