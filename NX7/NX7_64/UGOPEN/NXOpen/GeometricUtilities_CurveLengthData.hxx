#ifndef NXOpen_GEOMETRICUTILITIES_CURVELENGTHDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_CURVELENGTHDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_CurveLengthData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class CurveLengthData;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricUtilities
    {
        /** This enum represents the extension method */
        enum ExtensionMethod
        {
            ExtensionMethodIncremental/** Extension Method Incremental */,
            ExtensionMethodTotal/** Extension Method Total */
        };

        /** This enum represents the extension side */
        enum ExtensionSide
        {
            ExtensionSideStartEnd/** Extension Side Start/End */,
            ExtensionSideStart/** Extension Side Start */,
            ExtensionSideEnd/** Extension Side End */,
            ExtensionSideSymmetric/** Extension Side Symmetric */
        };

        /** This enum represents extension direction */
        enum ExtensionDirection
        {
            ExtensionDirectionNatural/** Extension Direction Natural */,
            ExtensionDirectionLinear/** Extension Direction Circular */,
            ExtensionDirectionCircular/** Extension Direction Linear */
        };

    }
    namespace GeometricUtilities
    {
        class _CurveLengthDataBuilder;
        /** Represents an CurveLength data. 
            */
        class NXOPENCPPEXPORT CurveLengthData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _CurveLengthDataBuilder;
            protected: CurveLengthData();
            /**Sets  the total or incremental extension method 
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtensionMethod
            (
                NXOpen::GeometricUtilities::ExtensionMethod extensionMethod /** CurveLength extension method */
            );
            /**Returns  the total or incremental extension method 
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ExtensionMethod ExtensionMethod
            (
            );
            /**Sets  the extension direction
                    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtensionDirection
            (
                NXOpen::GeometricUtilities::ExtensionDirection extensionDirection /** CurveLength extension direction */
            );
            /**Returns  the extension direction
                    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ExtensionDirection ExtensionDirection
            (
            );
            /**Sets  the extension side option 
                    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtensionSide
            (
                NXOpen::GeometricUtilities::ExtensionSide extensionSide /** CurveLength both ends */
            );
            /**Returns  the extension side option 
                    <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::GeometricUtilities::ExtensionSide ExtensionSide
            (
            );
            /** Set start distance 
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartDistance
            (
                const NXString & startDistance /** Start distance   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the start distance 
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * StartDistance
            (
            );
            /** Set end distance 
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEndDistance
            (
                const NXString & endDistance /** End distance   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the end distance 
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * EndDistance
            (
            );
            /** Set total length
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTotalLength
            (
                const NXString & totalLength /** Total Length   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /**Returns  the total length
                     <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Expression * TotalLength
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
