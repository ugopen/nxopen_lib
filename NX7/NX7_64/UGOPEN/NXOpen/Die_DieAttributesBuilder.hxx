#ifndef NXOpen_DIE_DIEATTRIBUTESBUILDER_HXX_INCLUDED
#define NXOpen_DIE_DIEATTRIBUTESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DieAttributesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_DieAttributesBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class DieAttributesBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class NXColor;
    namespace Die
    {
        class _DieAttributesBuilderBuilder;
        /**
            Represents a @link Die::DieAttributesBuilder Die::DieAttributesBuilder@endlink . The Die Attributes class is a helper to
            the main Die Design feature to gather the attribute title and value and face color to be applied.
            The attribute will be applied to a face or faces in the application of varying types, such as a
            base face.
             <br> To create a new instance of this class, use @link Die::DieCollection::CreateDieAttribute Die::DieCollection::CreateDieAttribute@endlink  <br> */
        class NXOPENCPPEXPORT DieAttributesBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            private: friend class  _DieAttributesBuilderBuilder;
            protected: DieAttributesBuilder();
            /**Returns  the title of the attribute to be applied  <br> License requirements : None */
            public: NXString AttributeTitle
            (
            );
            /**Sets  the title of the attribute to be applied  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetAttributeTitle
            (
                const NXString & attributeTitle /** attributetitle */ 
            );
            /**Returns  the value given to the attribute  <br> License requirements : None */
            public: NXString AttributeValue
            (
            );
            /**Sets  the value given to the attribute  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetAttributeValue
            (
                const NXString & attributeValue /** attributevalue */ 
            );
            /**Returns  the color to be applied to the face, or faces, in the application  <br> License requirements : None */
            public: NXOpen::NXColor * AttributeColor
            (
            );
            /**Sets  the color to be applied to the face, or faces, in the application  <br> License requirements : ug_die_design ("Die Design") */
            public: void SetAttributeColor
            (
                NXOpen::NXColor * attributeColor /** attributecolor */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
