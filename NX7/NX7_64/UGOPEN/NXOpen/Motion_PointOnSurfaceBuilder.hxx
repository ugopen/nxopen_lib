#ifndef NXOpen_MOTION_POINTONSURFACEBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_POINTONSURFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PointOnSurfaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_MotionBuilder.hxx>
#include <NXOpen/Motion_PointOnSurfaceBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Motion
    {
        class PointOnSurfaceBuilder;
    }
    class Face;
    namespace Motion
    {
        class MotionBuilder;
    }
    class Point;
    namespace Motion
    {
        class _PointOnSurfaceBuilderBuilder;
        /**
            Represents a @link Motion::PointOnSurfaceBuilder Motion::PointOnSurfaceBuilder@endlink 
             <br> To create a new instance of this class, use @link Motion::PointOnSurfaceCollection::CreatePointOnSurfaceBuilder Motion::PointOnSurfaceCollection::CreatePointOnSurfaceBuilder@endlink  <br> */
        class NXOPENCPPEXPORT PointOnSurfaceBuilder : public Motion::MotionBuilder
        {
            private: friend class  _PointOnSurfaceBuilderBuilder;
            protected: PointOnSurfaceBuilder();
            /**Returns  the selected point  <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the selected point  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /** Returns the selected faces  @return   <br> License requirements : None */
            public: std::vector<NXOpen::Face *> GetFaces
            (
            );
            /** Set the faces  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFaces
            (
                const std::vector<NXOpen::Face *> & faces /** faces */ 
            );
            /**Returns  the name  <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name  <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
