#ifndef NXOpen_CAE_ELEMENTMODIFYORDERBUILDER_HXX_INCLUDED
#define NXOpen_CAE_ELEMENTMODIFYORDERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ElementModifyOrderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ElementModifyOrderBuilder.hxx>
#include <NXOpen/CAE_ElementTypeBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class ElementModifyOrderBuilder;
    }
    class Builder;
    namespace CAE
    {
        class ElementTypeBuilder;
    }
    namespace CAE
    {
        class Mesh;
    }
    class Expression;
    class SelectTaggedObjectList;
    namespace CAE
    {
        class _ElementModifyOrderBuilderBuilder;
        /**
            Represents a @link CAE::ElementModifyOrderBuilder CAE::ElementModifyOrderBuilder@endlink 
             <br> To create a new instance of this class, use @link CAE::NodeElementManager::CreateElementModifyOrderBuilder CAE::NodeElementManager::CreateElementModifyOrderBuilder@endlink  <br> */
        class NXOPENCPPEXPORT ElementModifyOrderBuilder : public Builder
        {
            /**  Represents the options for type of operation */
            public: enum Operation
            {
                OperationOrder/** changes the order of a mesh from linear to parabolic or vice versa */,
                OperationMidnode/** changes the midnode option for a parabolic mesh to mixed, curved or linear */
            };

            /**  Represents the options for midnodes */
            public: enum Midnode
            {
                MidnodeMixed/** mixed midnodes */,
                MidnodeCurved/** curved midnodes */,
                MidnodeLinear/** linear midnodes */
            };

            private: friend class  _ElementModifyOrderBuilderBuilder;
            protected: ElementModifyOrderBuilder();
            /**Returns  the selected mesh(es)  <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * MeshSelection
            (
            );
            /**Returns  the operation option  <br> License requirements : None */
            public: NXOpen::CAE::ElementModifyOrderBuilder::Operation OperationType
            (
            );
            /**Sets  the operation option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetOperationType
            (
                NXOpen::CAE::ElementModifyOrderBuilder::Operation operationType /** operationtype */ 
            );
            /**Returns  the midnode option  <br> License requirements : None */
            public: NXOpen::CAE::ElementModifyOrderBuilder::Midnode MidnodeType
            (
            );
            /**Sets  the midnode option  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMidnodeType
            (
                NXOpen::CAE::ElementModifyOrderBuilder::Midnode midnodeType /** midnodetype */ 
            );
            /**Returns  the jacobian value to be used for creating mixed type midnodes <br> License requirements : None */
            public: NXOpen::Expression * Jacobian
            (
            );
            /**Returns  the element type to be created <br> License requirements : None */
            public: NXOpen::CAE::ElementTypeBuilder * ElementType
            (
            );
            public: std::vector<NXOpen::CAE::Mesh *> CommitMesh
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
