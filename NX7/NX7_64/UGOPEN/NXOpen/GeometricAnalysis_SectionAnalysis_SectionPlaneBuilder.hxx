#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONPLANEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_SectionPlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_SectionPlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionPlaneBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _SectionPlaneBuilderBuilder;
            /** Represents a plane which is used to cut sections on faces or facet bodies */
            class NXOPENCPPEXPORT SectionPlaneBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
            {
                /** The type of different section planes */
                public: enum PlaneType
                {
                    PlaneTypeXc/** XC plane */,
                    PlaneTypeYc/** YC plane */,
                    PlaneTypeZc/** ZC plane */,
                    PlaneTypeView/** View plane */,
                    PlaneTypePlane/** A user specifed plane */
                };

                private: friend class  _SectionPlaneBuilderBuilder;
                protected: SectionPlaneBuilder();
                /**Returns  the plane type  <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionPlaneBuilder::PlaneType Plane
                (
                );
                /**Sets  the plane type  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetPlane
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionPlaneBuilder::PlaneType plane /** plane */ 
                );
                /**Returns  the plane origin  <br> License requirements : None */
                public: NXOpen::Point3d Origin
                (
                );
                /**Sets  the plane origin  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetOrigin
                (
                    const NXOpen::Point3d & origin /** origin */ 
                );
                /**Returns  the plane X axis  <br> License requirements : None */
                public: NXOpen::Vector3d XAxis
                (
                );
                /**Sets  the plane X axis  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetXAxis
                (
                    const NXOpen::Vector3d & xAxis /** xaxis */ 
                );
                /**Returns  the plane Y axis  <br> License requirements : None */
                public: NXOpen::Vector3d YAxis
                (
                );
                /**Sets  the plane Y axis  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetYAxis
                (
                    const NXOpen::Vector3d & yAxis /** yaxis */ 
                );
                /** Returns true if the inputs to the component are sufficient for 
                            commit to be called.  For example, if the component requires
                            you to set some property, this method will return false if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
