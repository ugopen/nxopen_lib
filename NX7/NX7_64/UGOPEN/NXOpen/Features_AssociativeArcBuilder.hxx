#ifndef NXOpen_FEATURES_ASSOCIATIVEARCBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_ASSOCIATIVEARCBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_AssociativeArcBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_AssociativeArcBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveLimitsData.hxx>
#include <NXOpen/GeometricUtilities_SupportPlaneData.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class AssociativeArcBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveLimitsData;
    }
    namespace GeometricUtilities
    {
        class SupportPlaneData;
    }
    class SelectCartesianCoordinateSystem;
    class SelectDisplayableObject;
    class SelectObject;
    class SelectPoint;
    namespace Features
    {
        class _AssociativeArcBuilderBuilder;
        /** Represents a @link Features::AssociativeArc Features::AssociativeArc@endlink  builder  <br> To create a new instance of this class, use @link Features::BaseFeatureCollection::CreateAssociativeArcBuilder Features::BaseFeatureCollection::CreateAssociativeArcBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        Limits.EndLimit.LimitOption </td> <td> 
         
        AtPoint </td> </tr> 

        <tr><td> 
         
        SupportPlaneData.SupportPlaneLockStatus </td> <td> 
         
        No </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT AssociativeArcBuilder : public Features::FeatureBuilder
        {
            /** Represents arc type. */
            public: enum Types
            {
                TypesThreePointArc/** Three point arc */,
                TypesArcFromCenter/** Arc from center */
            };

            /** Represents start point options type */
            public: enum StartOption
            {
                StartOptionInferred/** Inferred */,
                StartOptionPoint/** Point */,
                StartOptionTangent/** Tangent */
            };

            /** Represents references for start point */
            public: enum StartReference
            {
                StartReferenceWcs/** WCS */,
                StartReferenceAbsolute/** Absolute CSYS */,
                StartReferenceCordinatesSystem/** CSYS */
            };

            /** Represents references for center point */
            public: enum CenterReference
            {
                CenterReferenceWcs/** WCS */,
                CenterReferenceAbsolute/** Absolute CSYS */,
                CenterReferenceCordinatesSystem/** CSYS */
            };

            /** Represents end point options type */
            public: enum EndOption
            {
                EndOptionInferred/** Inferred */,
                EndOptionPoint/** Point */,
                EndOptionTangent/** Tangent */,
                EndOptionRadius/** Radius */
            };

            /** Represents references for end point */
            public: enum EndReference
            {
                EndReferenceWcs/** WCS */,
                EndReferenceAbsolute/** Absolute CSYS */,
                EndReferenceCordinatesSystem/** CSYS */
            };

            /** Represents mid point options type */
            public: enum MidOption
            {
                MidOptionInferred/** Inferred */,
                MidOptionPoint/** Point */,
                MidOptionTangent/** Tangent */,
                MidOptionRadius/** Radius */
            };

            /** Represents references for mid point */
            public: enum MidReference
            {
                MidReferenceWcs/** WCS */,
                MidReferenceAbsolute/** Absolute CSYS */,
                MidReferenceCordinatesSystem/** CSYS */
            };

            private: friend class  _AssociativeArcBuilderBuilder;
            protected: AssociativeArcBuilder();
            /**Returns  the type option  <br> License requirements : None */
            public: NXOpen::Features::AssociativeArcBuilder::Types Type
            (
            );
            /**Sets  the type option  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetType
            (
                NXOpen::Features::AssociativeArcBuilder::Types type /** type */ 
            );
            /**Returns  the start point options  <br> License requirements : None */
            public: NXOpen::Features::AssociativeArcBuilder::StartOption StartPointOptions
            (
            );
            /**Sets  the start point options  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetStartPointOptions
            (
                NXOpen::Features::AssociativeArcBuilder::StartOption startPointOptions /** startpointoptions */ 
            );
            /**Returns  the start inferred constraint  <br> License requirements : None */
            public: NXOpen::SelectObject * StartInferredConstraint
            (
            );
            /**Returns  the start point reference  <br> License requirements : None */
            public: NXOpen::Features::AssociativeArcBuilder::StartReference StartPointReference
            (
            );
            /**Sets  the start point reference  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetStartPointReference
            (
                NXOpen::Features::AssociativeArcBuilder::StartReference startPointReference /** startpointreference */ 
            );
            /**Returns  the start reference coordinate system  <br> License requirements : None */
            public: NXOpen::SelectCartesianCoordinateSystem * StartReferenceCsys
            (
            );
            /**Returns  the start point  <br> License requirements : None */
            public: NXOpen::SelectPoint * StartPoint
            (
            );
            /**Returns  the start tangent  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * StartTangent
            (
            );
            /**Returns  the center point reference  <br> License requirements : None */
            public: NXOpen::Features::AssociativeArcBuilder::CenterReference CenterPointReference
            (
            );
            /**Sets  the center point reference  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCenterPointReference
            (
                NXOpen::Features::AssociativeArcBuilder::CenterReference centerPointReference /** centerpointreference */ 
            );
            /**Returns  the center point reference coordinate system  <br> License requirements : None */
            public: NXOpen::SelectCartesianCoordinateSystem * CenterPointReferenceCsys
            (
            );
            /**Returns  the center point  <br> License requirements : None */
            public: NXOpen::SelectPoint * CenterPoint
            (
            );
            /**Returns  the end point options  <br> License requirements : None */
            public: NXOpen::Features::AssociativeArcBuilder::EndOption EndPointOptions
            (
            );
            /**Sets  the end point options  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetEndPointOptions
            (
                NXOpen::Features::AssociativeArcBuilder::EndOption endPointOptions /** endpointoptions */ 
            );
            /**Returns  the end inferred constraint  <br> License requirements : None */
            public: NXOpen::SelectObject * EndInferredConstraint
            (
            );
            /**Returns  the end point reference  <br> License requirements : None */
            public: NXOpen::Features::AssociativeArcBuilder::EndReference EndPointReference
            (
            );
            /**Sets  the end point reference  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetEndPointReference
            (
                NXOpen::Features::AssociativeArcBuilder::EndReference endPointReference /** endpointreference */ 
            );
            /**Returns  the end reference coordinate system  <br> License requirements : None */
            public: NXOpen::SelectCartesianCoordinateSystem * EndReferenceCsys
            (
            );
            /**Returns  the end point  <br> License requirements : None */
            public: NXOpen::SelectPoint * EndPoint
            (
            );
            /**Returns  the end tangent  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * EndTangent
            (
            );
            /**Returns  the mid point options  <br> License requirements : None */
            public: NXOpen::Features::AssociativeArcBuilder::MidOption MidPointOptions
            (
            );
            /**Sets  the mid point options  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetMidPointOptions
            (
                NXOpen::Features::AssociativeArcBuilder::MidOption midPointOptions /** midpointoptions */ 
            );
            /**Returns  the mid inferred constraint  <br> License requirements : None */
            public: NXOpen::SelectObject * MidInferredConstraint
            (
            );
            /**Returns  the mid point reference  <br> License requirements : None */
            public: NXOpen::Features::AssociativeArcBuilder::MidReference MidPointReference
            (
            );
            /**Sets  the mid point reference  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetMidPointReference
            (
                NXOpen::Features::AssociativeArcBuilder::MidReference midPointReference /** midpointreference */ 
            );
            /**Returns  the mid reference coordinate system  <br> License requirements : None */
            public: NXOpen::SelectCartesianCoordinateSystem * MidReferenceCsys
            (
            );
            /**Returns  the mid point  <br> License requirements : None */
            public: NXOpen::SelectPoint * MidPoint
            (
            );
            /**Returns  the mid tangent  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * MidTangent
            (
            );
            /**Returns  the radius of arc <br> License requirements : None */
            public: NXOpen::Expression * Radius
            (
            );
            /**Returns  the support plane data  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SupportPlaneData * SupportPlaneData
            (
            );
            /**Returns  the limits  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveLimitsData * Limits
            (
            );
            /**Returns  the associative  <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the zone point for point-point radius.  <br> License requirements : None */
            public: NXOpen::Point3d ZonePoint
            (
            );
            /**Sets  the zone point for point-point radius.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetZonePoint
            (
                const NXOpen::Point3d & zonePoint /** zonepoint */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
