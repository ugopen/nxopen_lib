#ifndef NXOpen_PARTIMPORTER_HXX_INCLUDED
#define NXOpen_PARTIMPORTER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PartImporter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Importer.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class PartImporter;
    class Importer;
    class NXMatrix;
    class _PartImporterBuilder;
    /** Used to import a part into the work part.  The imported part can be an NX part or a foreign part,
        e.g. an I-DEAS, CATIA, or Teamcenter Visualization part.
     <br>  <br> */
    class NXOPENCPPEXPORT PartImporter : public Importer
    {
        /** Specifies on which layer to import a part. */
        public: enum LayerOptionType
        {
            LayerOptionTypeWork/** Import part on work layer. */,
            LayerOptionTypeOriginal/** Import part on original layers. */
        };

        /** Specifies the destination coordinate system specification. */
        public: enum DestinationCoordinateSystemSpecificationType
        {
            DestinationCoordinateSystemSpecificationTypeWork/** Use Work Coordinate System. */,
            DestinationCoordinateSystemSpecificationTypeSpecified/** Use specified coordinate system. */
        };

        private: friend class  _PartImporterBuilder;
        protected: PartImporter();
        /**Returns  the scale.
             <br> License requirements : None */
        public: double Scale
        (
        );
        /**Sets  the scale.
             <br> License requirements : None */
        public: void SetScale
        (
            double scale /** scale */ 
        );
        /**Returns  the Create Named Group flag.  True if the Create Named Group flag is on.
             <br> License requirements : None */
        public: bool CreateNamedGroup
        (
        );
        /**Sets  the Create Named Group flag.  True if the Create Named Group flag is on.
             <br> License requirements : None */
        public: void SetCreateNamedGroup
        (
            bool createNamedGroup /** create named group */ 
        );
        /**Returns  the Import Views flag.  True if the Import Views flag is on.
             <br> License requirements : None */
        public: bool ImportViews
        (
        );
        /**Sets  the Import Views flag.  True if the Import Views flag is on.
             <br> License requirements : None */
        public: void SetImportViews
        (
            bool importViews /** import views */ 
        );
        /**Returns  the Import CAM Objects flag.  True if the Import CAM Objects flag is on.
             <br> License requirements : None */
        public: bool ImportCamObjects
        (
        );
        /**Sets  the Import CAM Objects flag.  True if the Import CAM Objects flag is on.
             <br> License requirements : None */
        public: void SetImportCamObjects
        (
            bool importCamObjects /** import cam objects */ 
        );
        /**Returns  the layer option.
             <br> License requirements : None */
        public: NXOpen::PartImporter::LayerOptionType LayerOption
        (
        );
        /**Sets  the layer option.
             <br> License requirements : None */
        public: void SetLayerOption
        (
            NXOpen::PartImporter::LayerOptionType layerOption /** layer option */ 
        );
        /**Returns  the destination coordinate system specification.
             <br> License requirements : None */
        public: NXOpen::PartImporter::DestinationCoordinateSystemSpecificationType DestinationCoordinateSystemSpecification
        (
        );
        /**Sets  the destination coordinate system specification.
             <br> License requirements : None */
        public: void SetDestinationCoordinateSystemSpecification
        (
            NXOpen::PartImporter::DestinationCoordinateSystemSpecificationType destinationCoordinateSystemSpecification /** destination coordinate system specification */ 
        );
        /**Returns  the destination coordinate system.
             <br> License requirements : None */
        public: NXOpen::NXMatrix * DestinationCoordinateSystem
        (
        );
        /**Sets  the destination coordinate system.
             <br> License requirements : None */
        public: void SetDestinationCoordinateSystem
        (
            NXOpen::NXMatrix * destinationCoordinateSystem /** destination coordinate system */ 
        );
        /**Returns  the destination point.
             <br> License requirements : None */
        public: NXOpen::Point3d DestinationPoint
        (
        );
        /**Sets  the destination point.
             <br> License requirements : None */
        public: void SetDestinationPoint
        (
            const NXOpen::Point3d & destinationPoint /** destination point */ 
        );
    };
}
#undef EXPORTLIBRARY
#endif
