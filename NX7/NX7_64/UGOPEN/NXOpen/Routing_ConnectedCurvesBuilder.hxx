#ifndef NXOpen_ROUTING_CONNECTEDCURVESBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_CONNECTEDCURVESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_ConnectedCurvesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_ConnectedCurvesBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class ConnectedCurvesBuilder;
    }
    class Builder;
    class Curve;
    class SelectCurveList;
    namespace Routing
    {
        class _ConnectedCurvesBuilderBuilder;
        /** Builder for creating automatically creating segments on end-to-end connected
                curves.  <br> To create a new instance of this class, use @link Routing::RouteManager::CreateConnectedCurvesBuilder Routing::RouteManager::CreateConnectedCurvesBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AllowArcs </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        AllowLines </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        AllowOccs </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        AllowSplines </td> <td> 
         
        1 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT ConnectedCurvesBuilder : public Builder
        {
            private: friend class  _ConnectedCurvesBuilderBuilder;
            protected: ConnectedCurvesBuilder();
            /**Returns  the list of selected curves.  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXOpen::SelectCurveList * CurveSelection
            (
            );
            /**Returns  the flag that allows traversal of lines when finding connected
                        curves. If False, the traversal will stop when it hits a line curve.  In addition
                        the curve selection list will not allow lines to be added to the list.
                         <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool AllowLines
            (
            );
            /**Sets  the flag that allows traversal of lines when finding connected
                        curves. If False, the traversal will stop when it hits a line curve.  In addition
                        the curve selection list will not allow lines to be added to the list.
                         <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetAllowLines
            (
                bool allowLines /** allowlines */ 
            );
            /**Returns  the flag that allows traversal of arcs when finding connected
                        curves. If False, the traversal will stop when it hits an arc curve.  In addition
                        the curve selection list will not allow arcs to be added to the list.
                         <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool AllowArcs
            (
            );
            /**Sets  the flag that allows traversal of arcs when finding connected
                        curves. If False, the traversal will stop when it hits an arc curve.  In addition
                        the curve selection list will not allow arcs to be added to the list.
                         <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetAllowArcs
            (
                bool allowArcs /** allowarcs */ 
            );
            /**Returns  the flag that allows traversal of splines when finding connected
                        curves. If False, the traversal will stop when it hits an spline curve.  In addition
                        the curve selection list will not allow splines to be added to the list.
                         <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool AllowSplines
            (
            );
            /**Sets  the flag that allows traversal of splines when finding connected
                        curves. If False, the traversal will stop when it hits an spline curve.  In addition
                        the curve selection list will not allow splines to be added to the list.
                         <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetAllowSplines
            (
                bool allowSplines /** allowsplines */ 
            );
            /**Returns  the flag that allows traversal of curve occurrences when finding connected
                        curves. If False, the traversal will stop when it hits a curve occurrence.  In 
                        addition the curve selection list will not allow curve occurrences to be added 
                        to the list.
                         <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: bool AllowOccs
            (
            );
            /**Sets  the flag that allows traversal of curve occurrences when finding connected
                        curves. If False, the traversal will stop when it hits a curve occurrence.  In 
                        addition the curve selection list will not allow curve occurrences to be added 
                        to the list.
                         <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: void SetAllowOccs
            (
                bool allowOccs /** allowoccs */ 
            );
            /** Finds all curves attached end-to-end with the current list of selected
                        curves.  The returned list of curves includes the selected curves.  @return   <br> License requirements : routing_mechanical ("Routing Mechanical") OR routing_electrical ("Routing Electrical") OR routing_combined ("Routing Combined") */
            public: std::vector<NXOpen::Curve *> ChainSelectedCurves
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
