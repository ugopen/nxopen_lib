#ifndef NXOpen_ANNOTATIONS_FEATURECONTROLFRAMEDATABUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_FEATURECONTROLFRAMEDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_FeatureControlFrameDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_DatumReferenceBuilder.hxx>
#include <NXOpen/Annotations_FeatureControlFrameDataBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class FeatureControlFrameDataBuilder;
    }
    namespace Annotations
    {
        class DatumReferenceBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _FeatureControlFrameDataBuilderBuilder;
        /**
            Represents a @link Annotations::FeatureControlFrameDataBuilder Annotations::FeatureControlFrameDataBuilder@endlink 
            */
        class NXOPENCPPEXPORT FeatureControlFrameDataBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Specifies the zone shape for the feature control frame */
            public: enum ToleranceZoneShape
            {
                ToleranceZoneShapeNone/** no zone shape */,
                ToleranceZoneShapeDiameter/** diameter */,
                ToleranceZoneShapeSphericalDiameter/** spherical diameter */,
                ToleranceZoneShapeSquare/** square */
            };

            /** Specifies the tolerance material modifier condition */
            public: enum ToleranceMaterialModifier
            {
                ToleranceMaterialModifierNone/** no material modifier */,
                ToleranceMaterialModifierLeastMaterialCondition/** least material condition */,
                ToleranceMaterialModifierMaximumMaterialCondition/** maximum material condition */,
                ToleranceMaterialModifierRegardlessOfFeatureSize/** regardless of feature size condition */
            };

            private: friend class  _FeatureControlFrameDataBuilderBuilder;
            protected: FeatureControlFrameDataBuilder();
            /**Returns  the unit basis toggle
                        Only available when feature control frame characteristic is
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicStraightness Annotations::FeatureControlFrameBuilder::FcfCharacteristicStraightness@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicFlatness Annotations::FeatureControlFrameBuilder::FcfCharacteristicFlatness@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfALine Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfALine@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfASurface Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfASurface@endlink   <br> License requirements : None */
            public: bool UnitBasis
            (
            );
            /**Sets  the unit basis toggle
                        Only available when feature control frame characteristic is
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicStraightness Annotations::FeatureControlFrameBuilder::FcfCharacteristicStraightness@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicFlatness Annotations::FeatureControlFrameBuilder::FcfCharacteristicFlatness@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfALine Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfALine@endlink 
                        @link Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfASurface Annotations::FeatureControlFrameBuilder::FcfCharacteristicProfileOfASurface@endlink   <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUnitBasis
            (
                bool unitBasis /** unitbasis */ 
            );
            /**Returns  the zone shape  <br> License requirements : None */
            public: NXOpen::Annotations::FeatureControlFrameDataBuilder::ToleranceZoneShape ZoneShape
            (
            );
            /**Sets  the zone shape  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetZoneShape
            (
                NXOpen::Annotations::FeatureControlFrameDataBuilder::ToleranceZoneShape zoneShape /** zoneshape */ 
            );
            /**Returns  the tolerance value string  <br> License requirements : None */
            public: NXString ToleranceValue
            (
            );
            /**Sets  the tolerance value string  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetToleranceValue
            (
                const NXString & toleranceValue /** tolerancevalue */ 
            );
            /**Returns  the unit basis value1 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderUnitBasis Annotations::FeatureControlFrameDataBuilderUnitBasis@endlink 
                        is true. <br> License requirements : None */
            public: NXString UnitBasisValue1
            (
            );
            /**Sets  the unit basis value1 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderUnitBasis Annotations::FeatureControlFrameDataBuilderUnitBasis@endlink 
                        is true. <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUnitBasisValue1
            (
                const NXString & unitBasisValue1 /** unitbasisvalue1 */ 
            );
            /**Returns  the unit basis value2 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderUnitBasis Annotations::FeatureControlFrameDataBuilderUnitBasis@endlink 
                        is true. <br> License requirements : None */
            public: NXString UnitBasisValue2
            (
            );
            /**Sets  the unit basis value2 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderUnitBasis Annotations::FeatureControlFrameDataBuilderUnitBasis@endlink 
                        is true. <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUnitBasisValue2
            (
                const NXString & unitBasisValue2 /** unitbasisvalue2 */ 
            );
            /**Returns  the material modifier  <br> License requirements : None */
            public: NXOpen::Annotations::FeatureControlFrameDataBuilder::ToleranceMaterialModifier MaterialModifier
            (
            );
            /**Sets  the material modifier  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetMaterialModifier
            (
                NXOpen::Annotations::FeatureControlFrameDataBuilder::ToleranceMaterialModifier materialModifier /** materialmodifier */ 
            );
            /**Returns  the free state toggle  <br> License requirements : None */
            public: bool FreeState
            (
            );
            /**Sets  the free state toggle  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetFreeState
            (
                bool freeState /** freestate */ 
            );
            /**Returns  the tangent plane toggle  <br> License requirements : None */
            public: bool TangentPlane
            (
            );
            /**Sets  the tangent plane toggle  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetTangentPlane
            (
                bool tangentPlane /** tangentplane */ 
            );
            /**Returns  the projected toggle  <br> License requirements : None */
            public: bool Projected
            (
            );
            /**Sets  the projected toggle  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetProjected
            (
                bool projected /** projected */ 
            );
            /**Returns  the projected value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderProjected Annotations::FeatureControlFrameDataBuilderProjected@endlink 
                        is true.  <br> License requirements : None */
            public: NXString ProjectedValue
            (
            );
            /**Sets  the projected value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderProjected Annotations::FeatureControlFrameDataBuilderProjected@endlink 
                        is true.  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetProjectedValue
            (
                const NXString & projectedValue /** projectedvalue */ 
            );
            /**Returns  the circle utoggle  <br> License requirements : None */
            public: bool CircleU
            (
            );
            /**Sets  the circle utoggle  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCircleU
            (
                bool circleU /** circleu */ 
            );
            /**Returns  the circle u value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderCircleU Annotations::FeatureControlFrameDataBuilderCircleU@endlink 
                        is true.  <br> License requirements : None */
            public: NXString CircleUvalue
            (
            );
            /**Sets  the circle u value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderCircleU Annotations::FeatureControlFrameDataBuilderCircleU@endlink 
                        is true.  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCircleUvalue
            (
                const NXString & circleUValue /** circleuvalue */ 
            );
            /**Returns  the statistical tolerance toggle  <br> License requirements : None */
            public: bool StatisticalTolerance
            (
            );
            /**Sets  the statistical tolerance toggle  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetStatisticalTolerance
            (
                bool statisticalTolerance /** statisticaltolerance */ 
            );
            /**Returns  the common zone toggle  <br> License requirements : None */
            public: bool CommonZone
            (
            );
            /**Sets  the common zone toggle  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetCommonZone
            (
                bool commonZone /** commonzone */ 
            );
            /**Returns  the maximum tolerance toggle  <br> License requirements : None */
            public: bool MaximumTolerance
            (
            );
            /**Sets  the maximum tolerance toggle  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetMaximumTolerance
            (
                bool maximumTolerance /** maximumtolerance */ 
            );
            /**Returns  the maximum tolerance value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderMaximumTolerance Annotations::FeatureControlFrameDataBuilderMaximumTolerance@endlink 
                        is true.  <br> License requirements : None */
            public: NXString MaximumToleranceValue
            (
            );
            /**Sets  the maximum tolerance value 
                        Only available when
                        @link Annotations::FeatureControlFrameDataBuilderMaximumTolerance Annotations::FeatureControlFrameDataBuilderMaximumTolerance@endlink 
                        is true.  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetMaximumToleranceValue
            (
                const NXString & maximumToleranceValue /** maximumtolerancevalue */ 
            );
            /**Returns  the primary datum reference  <br> License requirements : None */
            public: NXOpen::Annotations::DatumReferenceBuilder * PrimaryDatumReference
            (
            );
            /**Returns  the secondary datum reference  <br> License requirements : None */
            public: NXOpen::Annotations::DatumReferenceBuilder * SecondaryDatumReference
            (
            );
            /**Returns  the tertiary datum reference  <br> License requirements : None */
            public: NXOpen::Annotations::DatumReferenceBuilder * TertiaryDatumReference
            (
            );
            /** Get the datum references  <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void PrimaryDatumReferences
            (
                std::vector<NXOpen::Annotations::DatumReferenceBuilder *> & primaryDatumReferences /** datum references */
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
