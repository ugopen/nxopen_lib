#ifndef NXOpen_ANNOTATIONS_LEADERDATA_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_LEADERDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_LeaderData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_LeaderData.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Annotations
    {
        class LeaderData;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectDisplayableObject;
    class SelectDisplayableObjectList;
    namespace Annotations
    {
        class _LeaderDataBuilder;
        /**
            Represents a @link Annotations::LeaderData Annotations::LeaderData@endlink .  This class is
            used to construct the definition for a single leader object.
             <br> To create a new instance of this class, use @link Annotations::AnnotationManager::CreateLeaderData Annotations::AnnotationManager::CreateLeaderData@endlink  <br> */
        class NXOPENCPPEXPORT LeaderData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** the set of datatypes used to define the types of leaders that can
                        be applied to an annotation */
            public: enum LeaderType
            {
                LeaderTypePlain/** Plain leader style */,
                LeaderTypeAllAround/** Plain leader style with all around symbol */,
                LeaderTypePlainWithoutStub/** Plain leader style with no stub */,
                LeaderTypeFlag/** Flag style */,
                LeaderTypeDatum/** Datum feature symbol style */,
                LeaderTypeDotTerminated/** Datum feature on stub of dot terminated style */,
                LeaderTypeExtension/** Id symbol extension style leader */
            };

            /** the set of arrowhead types used to define a leader arrowhead */
            public: enum ArrowheadType
            {
                ArrowheadTypeClosedArrow/** Closed arrowhead type */,
                ArrowheadTypeClosedSolidArrow/** Closed solid arrowhead type */,
                ArrowheadTypeOpenArrow/** Open arrowhead type */,
                ArrowheadTypeFilledArrow/** Filled arrowhead type */,
                ArrowheadTypeClosedDoubleArrow/** Closed double arrowhead type */,
                ArrowheadTypeClosedDoubleSolidArrow/** Closed double solid arrowhead type */,
                ArrowheadTypeOpenDoubleArrow/** Open double arrowhead type */,
                ArrowheadTypeFilledDoubleArrow/** Filled double arrowhead type */,
                ArrowheadTypeNone/** No terminating symbol */,
                ArrowheadTypeOrigin/** Origin symbol */,
                ArrowheadTypeCross/** Cross symbol */,
                ArrowheadTypeIntegral/** Integral symbol */,
                ArrowheadTypeDot/** Dot symbol */,
                ArrowheadTypeFilledDot/** Filled dot symbol */,
                ArrowheadTypeSquare/** Square symbol */,
                ArrowheadTypeFilledSquare/** Filled square symbol */,
                ArrowheadTypeDatum/** Datum symbol */,
                ArrowheadTypeFilledDatum/** Filled datum symbol */,
                ArrowheadTypeTopOpenArrow/** Top open arrowhead */,
                ArrowheadTypeBottomOpenArrow/** bottom open arrowhead */,
                ArrowheadTypeTopFilledArrow/** top filled arrowhead */,
                ArrowheadTypeBottomFilledArrow/** bottom filled arrowhead */
            };

            private: friend class  _LeaderDataBuilder;
            protected: LeaderData();
            /**Returns  the terminator type  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderData::LeaderType TerminatorType
            (
            );
            /**Sets  the terminator type  <br> License requirements : geometric_tol ("GDT") */
            public: void SetTerminatorType
            (
                NXOpen::Annotations::LeaderData::LeaderType terminatorType /** terminatortype */ 
            );
            /**Returns  the leader  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * Leader
            (
            );
            /**Returns  the jogs  <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * Jogs
            (
            );
            /**Returns  the arrowhead  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderData::ArrowheadType Arrowhead
            (
            );
            /**Sets  the arrowhead  <br> License requirements : geometric_tol ("GDT") */
            public: void SetArrowhead
            (
                NXOpen::Annotations::LeaderData::ArrowheadType arrowhead /** arrowhead */ 
            );
            /**Returns  the stub side  <br> License requirements : None */
            public: NXOpen::Annotations::LeaderSide StubSide
            (
            );
            /**Sets  the stub side  <br> License requirements : geometric_tol ("GDT") */
            public: void SetStubSide
            (
                NXOpen::Annotations::LeaderSide stubSide /** stub side */ 
            );
            /**Returns  the stub size  <br> License requirements : None */
            public: double StubSize
            (
            );
            /**Sets  the stub size  <br> License requirements : geometric_tol ("GDT") */
            public: void SetStubSize
            (
                double stubSize /** stubsize */ 
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
