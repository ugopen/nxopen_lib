#ifndef NXOpen_PREFERENCES_PARTDRAFTING_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTDRAFTING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartDrafting.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class PartDrafting;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    class NXColor;
    namespace Preferences
    {
        /** Represents the set of drafting preferences applicable to part  <br> To obtain an instance of this class, refer to @link Preferences::PartPreferences Preferences::PartPreferences@endlink  <br> */
        class NXOPENCPPEXPORT PartDrafting
        {
            /** Describes the available view style types for preview */
            public: enum ViewStyleType
            {
                ViewStyleTypeBorder/** Border  */,
                ViewStyleTypeWireframe/** Wireframe */,
                ViewStyleTypeHiddenWireframe/** Hidden Wireframe */,
                ViewStyleTypeShaded/** Shaded  */
            };

            /** Describes the available font types */
            public: enum FontType
            {
                FontTypeOriginal/** Original  */,
                FontTypeInvisible/** Invisible */,
                FontTypeSolid/** Solid */,
                FontTypeDashed/** Dashed */,
                FontTypePhantom/** Phantom */,
                FontTypeCenterline/** CenterLine  */,
                FontTypeDotted/** Dotted */,
                FontTypeLongDashed/** Long Dashed */,
                FontTypeDottedDashed/** Dotted Dashed */
            };

            /** Describes the available width types */
            public: enum WidthType
            {
                WidthTypeOriginal/** Original  */,
                WidthTypeThin/** Thin */,
                WidthTypeNormal/** Normal */,
                WidthTypeThick/** Thick   */
            };

            private: NXOpen::Preferences::PartPreferences* m_owner;
            public: explicit PartDrafting(NXOpen::Preferences::PartPreferences *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the flag indicating whether to delay update of the drafting views during system 
                    initiated drawing updates   <br> License requirements : None */
            public: bool DelayViewUpdate
            (
            );
            /**Sets  the flag indicating whether to delay update of the drafting views during system 
                    initiated drawing updates   <br> License requirements : None */
            public: void SetDelayViewUpdate
            (
                bool isDelayViewUpdateOn /** isdelayviewupdateon */ 
            );
            /**Returns  the flag indicating whether the newly created views should update immediately even
                    when the view update is delayed.  <br> License requirements : None */
            public: bool DelayUpdateOnCreation
            (
            );
            /**Sets  the flag indicating whether the newly created views should update immediately even
                    when the view update is delayed.  <br> License requirements : None */
            public: void SetDelayUpdateOnCreation
            (
                bool isDelayUpdateOnCreationOn /** isdelayupdateoncreationon */ 
            );
            /**Returns  the flag indicating whether to display borders around drafting views, when selected  <br> License requirements : None */
            public: bool DisplayBorders
            (
            );
            /**Sets  the flag indicating whether to display borders around drafting views, when selected  <br> License requirements : None */
            public: void SetDisplayBorders
            (
                bool displayBorders /** display borders */ 
            );
            /**Returns  the drafting view border color. The value should be between 1 and 216. <br> License requirements : None */
            public: int BorderColor
            (
            );
            /**Sets  the drafting view border color. The value should be between 1 and 216. <br> License requirements : None */
            public: void SetBorderColor
            (
                int borderColor /** border color */ 
            );
            /**Returns  the flag indicating whether to retain @link Annotations::Annotation Annotations::Annotation@endlink  objects
                    when the geometry they are attached to is deleted. When false, the @link Annotations::Annotation Annotations::Annotation@endlink  
                    objects get deleted with the geometry.  <br> License requirements : None */
            public: bool RetainAnnotations
            (
            );
            /**Sets  the flag indicating whether to retain @link Annotations::Annotation Annotations::Annotation@endlink  objects
                    when the geometry they are attached to is deleted. When false, the @link Annotations::Annotation Annotations::Annotation@endlink  
                    objects get deleted with the geometry.  <br> License requirements : None */
            public: void SetRetainAnnotations
            (
                bool retainAnnotations /** retain annotations */ 
            );
            /**Returns  the color of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects. 
                    The value should be between 1 and 216.  <br> License requirements : None */
            public: int Color
            (
            );
            /**Sets  the color of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects. 
                    The value should be between 1 and 216.  <br> License requirements : None */
            public: void SetColor
            (
                int color /** color */ 
            );
            /**Returns  the line font of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects  <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::FontType Font
            (
            );
            /**Sets  the line font of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects  <br> License requirements : None */
            public: void SetFont
            (
                NXOpen::Preferences::PartDrafting::FontType font /** font */ 
            );
            /**Returns  the line width of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects  <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::WidthType Width
            (
            );
            /**Sets  the line width of the retained @link Annotations::Annotation Annotations::Annotation@endlink  objects  <br> License requirements : None */
            public: void SetWidth
            (
                NXOpen::Preferences::PartDrafting::WidthType width /** width */ 
            );
            /**Returns  the drafting view style type for preview when placing the view  <br> License requirements : None */
            public: NXOpen::Preferences::PartDrafting::ViewStyleType ViewStyle
            (
            );
            /**Sets  the drafting view style type for preview when placing the view  <br> License requirements : None */
            public: void SetViewStyle
            (
                NXOpen::Preferences::PartDrafting::ViewStyleType viewStyle /** view style */ 
            );
            /**Returns  the drafting version objects setting when updating drafting objects and member views  <br> License requirements : None */
            public: bool VersionObjects
            (
            );
            /**Sets  the drafting version objects setting when updating drafting objects and member views  <br> License requirements : None */
            public: void SetVersionObjects
            (
                bool versonObjects /** verson objects */ 
            );
            /**Returns  the flag indicating whether to track a drafting view during preview
                    when placing the view. The cursor is tracked using XC/YC coordinates.   <br> License requirements : None */
            public: bool ViewTracking
            (
            );
            /**Sets  the flag indicating whether to track a drafting view during preview
                    when placing the view. The cursor is tracked using XC/YC coordinates.   <br> License requirements : None */
            public: void SetViewTracking
            (
                bool viewTracking /** view tracking */ 
            );
            /**Returns  the flag indicating whether to display solids in shaded member views with translucency.   <br> License requirements : None */
            public: bool Translucency
            (
            );
            /**Sets  the flag indicating whether to display solids in shaded member views with translucency.   <br> License requirements : None */
            public: void SetTranslucency
            (
                bool translucency /** translucency */ 
            );
            /**Returns  the flag indicating whether to display drawing using line antialiasing.   <br> License requirements : None */
            public: bool LineAntialiasing
            (
            );
            /**Sets  the flag indicating whether to display drawing using line antialiasing.   <br> License requirements : None */
            public: void SetLineAntialiasing
            (
                bool lineAntialiasing /** line antialiasing */ 
            );
            /**Returns  the flag indicating whether to display facet edges in shaded member views.   <br> License requirements : None */
            public: bool ShowFacetEdges
            (
            );
            /**Sets  the flag indicating whether to display facet edges in shaded member views.   <br> License requirements : None */
            public: void SetShowFacetEdges
            (
                bool showFacetEdges /** show facet edges */ 
            );
            /**Returns  the drafting active view color.  <br> License requirements : None */
            public: NXOpen::NXColor * ActiveViewColor
            (
            );
            /**Sets  the drafting active view color.  <br> License requirements : None */
            public: void SetActiveViewColor
            (
                NXOpen::NXColor * borderColor /** border color */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
