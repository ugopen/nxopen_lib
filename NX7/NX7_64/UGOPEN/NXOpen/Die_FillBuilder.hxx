#ifndef NXOpen_DIE_FILLBUILDER_HXX_INCLUDED
#define NXOpen_DIE_FILLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_FillBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Die
    {
        class FillBuilder;
    }
    class Body;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class IProfile;
    class ISurface;
    class Point;
    namespace Die
    {
        class _FillBuilderBuilder;
        /** Represents an Area Fill feature  <br> To create a new instance of this class, use @link Die::DieCollection::Fill Die::DieCollection::Fill@endlink  <br> */
        class NXOPENCPPEXPORT FillBuilder : public Features::FeatureBuilder
        {
            private: friend class  _FillBuilderBuilder;
            protected: FillBuilder();
            /**Returns  the tipped product of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Features::Feature * TippedProduct
            (
            );
            /**Sets  the tipped product of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTippedProduct
            (
                NXOpen::Features::Feature * tippedProduct /** tipped product */ 
            );
            /** Sets the fill shape of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFillShape
            (
                const std::vector<NXOpen::Body *> & bodies /** bodies */
            );
            /** Gets the fill shape of the area fill  @return  bodies  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::Body *> GetFillShape
            (
            );
            /** Sets the region bounds of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetRegionBounds
            (
                NXOpen::Die::DirectionOption direction /** Profile direction */,
                const std::vector<NXOpen::IProfile *> & profileEntries /** profile entries */
            );
            /** Gets the region bounds of the area fill  @return  profile entries  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXOpen::IProfile *> GetRegionBounds
            (
                NXOpen::Die::DirectionOption* direction /** Profile direction */
            );
            /**Returns  the point in region of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * PointInRegion
            (
            );
            /**Sets  the point in region of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPointInRegion
            (
                NXOpen::Point * pointInRegion /** point in region */ 
            );
            /**Returns  the plane to mirror the area fill about  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ISurface * MirrorPlane
            (
            );
            /**Sets  the plane to mirror the area fill about  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetMirrorPlane
            (
                NXOpen::ISurface * mirrorPlane /** mirror plane */ 
            );
            /**Returns  the fill for addendum setting of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool FillForAddendum
            (
            );
            /**Sets  the fill for addendum setting of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFillForAddendum
            (
                bool fillForAddendum /** = true - area fill is for addendum and will be called 
                                                                      DIE_ADDENDUM_FILL */
            );
            /**Returns  the copy and mirror setting of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool CopyAndMirror
            (
            );
            /**Sets  the copy and mirror setting of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetCopyAndMirror
            (
                bool copyAndMirror /** = true - original sheet body will be copied in its current
                                                                     position and a copy will also be mirrored.  the two
                                                                     sheet bodies will be sewn together on output
                                                            = false - only mirrored copy will be produced */
            );
            /**Returns  the angle tolerance of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angle tolerance */ 
            );
            /**Returns  the distance tolerance of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance of the area fill  <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distance tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
