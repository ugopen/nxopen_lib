#ifndef NXOpen_FIELDS_FIELDMANAGER_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_DisplayPropertiesBuilder.hxx>
#include <NXOpen/Fields_ExportData.hxx>
#include <NXOpen/Fields_ImportData.hxx>
#include <NXOpen/Fields_PathObjects.hxx>
#include <NXOpen/Fields_SpatialMap.hxx>
#include <NXOpen/Fields_SpatialMapBuilder.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Fields
    {
        class FieldManager;
    }
    class Expression;
    namespace Fields
    {
        class DisplayPropertiesBuilder;
    }
    namespace Fields
    {
        class ExportData;
    }
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class FieldDomainCollection;
    }
    namespace Fields
    {
        class FieldExpression;
    }
    namespace Fields
    {
        class FieldFormula;
    }
    namespace Fields
    {
        class FieldLink;
    }
    namespace Fields
    {
        class FieldTable;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class FieldWrapper;
    }
    namespace Fields
    {
        class ImportData;
    }
    namespace Fields
    {
        class NameVariable;
    }
    namespace Fields
    {
        class PathObjects;
    }
    namespace Fields
    {
        class ScalarFieldWrapper;
    }
    namespace Fields
    {
        class SpatialMap;
    }
    namespace Fields
    {
        class SpatialMapBuilder;
    }
    namespace Fields
    {
        class VectorFieldWrapper;
    }
    class NXObject;
    class Unit;
    namespace Fields
    {
        class _FieldManagerBuilder;
        /**  @brief  Represents the manager class of the Fields  

          
             <br> This manager class gives access to all the fields @link Fields::Field Fields::Field@endlink  within a part, 
            as well as the collection of domains @link Fields::FieldDomain Fields::FieldDomain@endlink . <br> 
             <br> It also provides creation methods for the various builders of fields and related classes. <br> 
            */
        class NXOPENCPPEXPORT FieldManager : public NXObject
        {
            private: friend class  _FieldManagerBuilder;
            protected: FieldManager();
            /** Creates a system @link Fields::FieldExpression Fields::FieldExpression@endlink  object.  Specifies the new expression 
                        string.
                         <br> This method is deprecated; field expressions are children of 
                        @link Fields::FieldFormula Fields::FieldFormula@endlink  and should not be created independently. <br> 
                      @return  field  <br> License requirements : None */
            public: NXOpen::Fields::FieldExpression * CreateFieldExpression
            (
                const NXString & fieldExpString /** expression string to be associated with the field   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** unit of the field */
            );
            /** Creates a system @link Fields::FieldExpression Fields::FieldExpression@endlink  object with independent variables.
                        Specifies the new expression string.
                         <br> This method is deprecated; field expressions are children of 
                        @link Fields::FieldFormula Fields::FieldFormula@endlink  and should not be created independently. <br> 
                      @return  field  <br> License requirements : None */
            public: NXOpen::Fields::FieldExpression * CreateFieldExpression
            (
                const NXString & fieldExpString /** expression string to be associated with the field   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** unit of the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */
            );
            /** Creates a system @link Fields::FieldExpression Fields::FieldExpression@endlink  object with independent variables.
                        Specifies the new expression string.
                         <br> This method is used to create sub expression fields for a 
                        @link Fields::FieldFormula Fields::FieldFormula@endlink . <br> 
                      @return  field  <br> License requirements : None */
            public: NXOpen::Fields::FieldExpression * CreateSubFieldExpression
            (
                NXOpen::Fields::FieldVariable * depVar /** dependent variables to be associated with the field */
            );
            /** Creates a @link Fields::FieldFormula Fields::FieldFormula@endlink  object with dependent @link Fields::FieldExpression Fields::FieldExpression@endlink .
                      @return  field  <br> License requirements : None */
            public: NXOpen::Fields::FieldFormula * CreateFieldFormula
            (
                const NXString & fieldName /** field name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                const std::vector<NXOpen::Fields::FieldExpression *> & depExpArray /** dependent expression fields to be associated with the formula field */
            );
            /** Creates a @link Fields::FieldTable Fields::FieldTable@endlink  object with dependent and independent variables 
                        @link Fields::FieldVariable Fields::FieldVariable@endlink .
                      @return  field  <br> License requirements : None */
            public: NXOpen::Fields::FieldTable * CreateFieldTable
            (
                const NXString & fieldName /** field name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                const std::vector<double> & datapoints /** row based array of double values representing the table; then number of points should equal the number of independent variables * the number of dependent variables * the number of rows. */
            );
            /** Creates a @link Fields::FieldLink Fields::FieldLink@endlink .
                      @return  field  <br> License requirements : None */
            public: NXOpen::Fields::FieldLink * CreateFieldLink
            (
                const NXString & fieldName /** field name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Fields::Field * fieldToLink /** field to link */
            );
            /** Deletes the specified @link Fields::Field Fields::Field@endlink  object; if the object cannot be deleted
                        it is returned.
                      @return  If the field cannot be deleted, it is returned; if the field is deleted, this will be NULL  <br> License requirements : None */
            public: NXOpen::Fields::Field * DeleteField
            (
                NXOpen::Fields::Field * field /** field to delete */
            );
            /** Creates a system @link Fields::FieldVariable Fields::FieldVariable@endlink  to be added to a field.
                      @return  independent variable created and associated to the field 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateIndependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                const NXString & varName /** name of the independent variable to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** unit of the independent variable */,
                bool minValueSet /** logical value whether minimum value set */,
                double minValue /** minimum value of the variable range */,
                bool maxValueSet /** logical value whether maximum value set */,
                double maxValue /** maximum value of the variable range */,
                bool numPtsSet /** logical value whether num_pts set */,
                int numPts /** num_pts of the variable range */,
                bool defaultValueSet /** logical value whether default value set */,
                double defaultValue /** default value of the variable range */
            );
            /** Create an independent variable to be added to the field 
                      @return  independent variable created and associated to the field 
             @deprecated Deprecated in NX6.0.2 <br> 
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateIndependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                const NXString & varName /** name of the independent variable to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** unit of the independent variable */,
                bool minValueSet /** logical value whether minimum value set */,
                bool minValueInclusive /** minimum value is itself included in range */,
                double minValue /** minimum value of the variable range */,
                bool maxValueSet /** logical value whether maximum value set */,
                bool maxValueInclusive /** maximum value is itself included in range */,
                double maxValue /** maximum value of the variable range */,
                bool numPtsSet /** logical value whether num_pts set */,
                int numPts /** num_pts of the variable range */,
                bool defaultValueSet /** logical value whether default value set */,
                double defaultValue /** default value of the variable range */
            );
            /** Create an independent variable to be added to the field 
                      @return  independent variable created and associated to the field  <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateIndependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                NXOpen::Fields::NameVariable * nameVariable /** existing name variable */,
                NXOpen::Unit * unitType /** unit of the independent variable */,
                bool minValueSet /** logical value whether minimum value set */,
                bool minValueInclusive /** minimum value is itself included in range */,
                double minValue /** minimum value of the variable range */,
                bool maxValueSet /** logical value whether maximum value set */,
                bool maxValueInclusive /** maximum value is itself included in range */,
                double maxValue /** maximum value of the variable range */,
                bool numPtsSet /** logical value whether num_pts set */,
                int numPts /** num_pts of the variable range */,
                bool defaultValueSet /** logical value whether default value set */,
                double defaultValue /** default value of the variable range */
            );
            /** Edit an independent variable 
                      <br> License requirements : None */
            public: void EditIndependentVariable
            (
                NXOpen::Fields::FieldVariable * indepVar /** indep var to edit */,
                const NXString & varName /** name of the independent variable to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** unit of the independent variable */,
                bool minValueSet /** logical value whether minimum value set */,
                bool minValueInclusive /** minimum value is itself included in range */,
                double minValue /** minimum value of the variable range */,
                bool maxValueSet /** logical value whether maximum value set */,
                bool maxValueInclusive /** maximum value is itself included in range */,
                double maxValue /** maximum value of the variable range */,
                bool numPtsSet /** logical value whether num_pts set */,
                int numPts /** num_pts of the variable range */,
                bool defaultValueSet /** logical value whether default value set */,
                double defaultValue /** default value of the variable range */
            );
            /** Create a dependent variable to be added to the field 
                      @return  dependent variable created and associated to the field 
             @deprecated Deprecated in NX6.0.2 <br> 
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateDependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                const NXString & varName /** name of the dependent variable to be created   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** unit of the dependent variable */
            );
            /** Create a dependent variable to be added to the field 
                      @return  dependent variable created and associated to the field  <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateDependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                NXOpen::Fields::NameVariable * nameVariable /** existing name variable */,
                NXOpen::Unit * unitType /** unit of the dependent variable */
            );
            /** Edit dependent variable 
                      <br> License requirements : None */
            public: void EditDependentVariable
            (
                NXOpen::Fields::FieldVariable * depVar /** dep variable to edit */,
                const NXString & varName /** new name for variable, or NULL to skip updating name   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::Unit * unitType /** new unit of the dependent variable */
            );
            /** Create a field wrapper backed up by a field  @return  scalar field wrapper created and associated to the field  <br> License requirements : None */
            public: NXOpen::Fields::FieldWrapper * CreateFieldWrapper
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */
            );
            /** Create a field wrapper backed by a scalar expression  @return  scalar field wrapper created and associated to the expression  <br> License requirements : None */
            public: NXOpen::Fields::ScalarFieldWrapper * CreateScalarFieldWrapperWithExpression
            (
                NXOpen::Expression * expression /** an existing expression that will be this wrapper's value */
            );
            /** Create a scalar field wrapper backed up by a scaled scalar field  @return  scalar field wrapper created and associated to the field  <br> License requirements : None */
            public: NXOpen::Fields::ScalarFieldWrapper * CreateScalarFieldWrapperWithField
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */,
                double scaleFactor /** the field will be multiplied by this scale factor when being evaluated */
            );
            /** Create a vector field wrapper backed by three scalar expressions  @return  scalar field wrapper created and associated to the expression  <br> License requirements : None */
            public: NXOpen::Fields::VectorFieldWrapper * CreateVectorFieldWrapperWithExpressions
            (
                const std::vector<NXOpen::Expression *> & expressions /** existing expressions that will be this wrapper's value */
            );
            /** Create a vector field wrapper backed up by a scaled vector field  @return  vector field wrapper created and associated to the field  <br> License requirements : None */
            public: NXOpen::Fields::VectorFieldWrapper * CreateVectorFieldWrapperWithField
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */,
                const std::vector<double> & scaleFactors /** the field will be multiplied by this scale factor when being evaluated */
            );
            /** Creates a @link Fields::DisplayPropertiesBuilder Fields::DisplayPropertiesBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Fields::DisplayPropertiesBuilder * CreateDisplayPropertiesBuilder
            (
                const std::vector<NXOpen::Fields::Field *> & fieldArray /** fields to edit display properties */
            );
            /** Creates a @link Fields::SpatialMapBuilder Fields::SpatialMapBuilder@endlink   @return   <br> License requirements : None */
            public: NXOpen::Fields::SpatialMapBuilder * CreateSpatialMapBuilder
            (
                NXOpen::Fields::SpatialMap * spatialmap /** Existing SpatialMap to edit; NULL to create */
            );
            /** Creates a Fields.ExportData  @return  the export data created  <br> License requirements : None */
            public: NXOpen::Fields::ExportData * CreateExportData
            (
            );
            /** Exports fields to a text file as defined by export_data parameter  <br> License requirements : None */
            public: void ExportFields
            (
                NXOpen::Fields::ExportData * exportData /** Export data */
            );
            /** Creates a Fields.ImportData  @return  the import data created  <br> License requirements : None */
            public: NXOpen::Fields::ImportData * CreateImportData
            (
            );
            /** Imports fields from a text file as defined by import_data parameter  <br> License requirements : None */
            public: void ImportFields
            (
                NXOpen::Fields::ImportData * importData /** Import data */
            );
            /** Creates a @link Fields::PathObjects Fields::PathObjects@endlink   @return   <br> License requirements : None */
            public: NXOpen::Fields::PathObjects * CreatePathObjects
            (
            );
            /** Locate an existing, or create a new @link Fields::NameVariable Fields::NameVariable@endlink  object  @return  name variable with the specified measure and name  <br> License requirements : None */
            public: NXOpen::Fields::NameVariable * GetNameVariable
            (
                const NXString & variableName /** alphanumeric string; if it matches an existing name variable, the measures must also match   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & measureName /** must match an existing measure name, or "Unitless"   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );


            private: NXOpen::Fields::FieldDomainCollection *domains;
            /** Returns a collection of Units */
            public: NXOpen::Fields::FieldDomainCollection *Domains()
            {
                return domains;
            }
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
