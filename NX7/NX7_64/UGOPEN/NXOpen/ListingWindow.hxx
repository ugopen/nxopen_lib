#ifndef NXOpen_LISTINGWINDOW_HXX_INCLUDED
#define NXOpen_LISTINGWINDOW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ListingWindow.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    class ListingWindow;
    class Session;
    /**
    Represents a ListingWindow.    
     <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
    class NXOPENCPPEXPORT ListingWindow
    {
        /** Describes the type of listing window */
        public: enum DeviceType
        {
            DeviceTypeWindow/** The UI's Information window */,
            DeviceTypeFile/** Output is written to a file instead of the Information window */,
            DeviceTypeFileAndWindow/** Output is written to a file and to the Information window */,
            DeviceTypeNone/** Output is not written anywhere; output gets discarded */
        };

        private: NXOpen::Session* m_owner;
        public: explicit ListingWindow(NXOpen::Session *owner): m_owner(owner)
        {
        }
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        /** Opens the listing window.  The listing window must be open before
            lines can be written to it  <br> License requirements : None */
        public: void Open
        (
        );
        /** Closes the stream to the listing window.  The window itself is not closed. 
            If the listing window is a file,
            this will flush the buffer and close the file.  <br> License requirements : None */
        public: void Close
        (
        );
        /** Closes the listing window actually from the UI.  <br> License requirements : None */
        public: void CloseWindow
        (
        );
        /** Writes a line to the listing window.
            The listing window must be open before you can write to it.
            If the listing window is a file, the output is buffered, so the
            output may not appear in the file until the buffer gets flushed.
            The buffer is flushed when the listing window gets closed.   <br> License requirements : None */
        public: void WriteLine
        (
            const NXString & msg /** Line to write   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  a flag indicating whether the listing window is open.
            To open the window, use @link Open Open@endlink . <br> License requirements : None */
        public: bool IsOpen
        (
        );
        /** Changes where the listing window output is sent.  The
            listing window output can be sent to the Information window 
            of the Unigraphics session, to a file, or to both.

            Note: file output is buffered.  If file output is used, the buffer
            will not be flushed until the output device is changed again.
            E.g.
             @code 
            ListingWindow.SelectDeviceType(File, "log.txt")
            ListingWindow.Open()
            ListingWindow.WriteLine("output")
            ListingWindow.Close()
            ' buffer is not flushed yet
            ListingWindow.SelectDeviceType(Window, "")
            ' now the buffer is flushed
             @endcode 
             <br> License requirements : None */
        public: void SelectDevice
        (
            NXOpen::ListingWindow::DeviceType deviceType /** The type of device (file, Information window, or both) */,
            const NXString & fileName /** Name of the file.  Used only if the device type is file.   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
        );
        /**Returns  the device type for the window.  The device type indicates
            whether the output for the listing window is sent to the Information window, 
            to a file, or to both  <br> License requirements : None */
        public: NXOpen::ListingWindow::DeviceType Device
        (
        );
        public: virtual void initialize();
    };
}
#undef EXPORTLIBRARY
#endif
