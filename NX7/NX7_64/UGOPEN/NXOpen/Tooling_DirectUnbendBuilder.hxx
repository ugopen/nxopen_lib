#ifndef NXOpen_TOOLING_DIRECTUNBENDBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_DIRECTUNBENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_DirectUnbendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_DirectUnbendBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Tooling
    {
        class DirectUnbendBuilder;
    }
    class Body;
    class Builder;
    class SelectEdgeList;
    class SelectFaceList;
    namespace Tooling
    {
        class _DirectUnbendBuilderBuilder;
        /**The builder contains all inputs for direct unbend  <br> To create a new instance of this class, use @link Tooling::DirectUnfoldCollection::CreateDirectUnbendBuilder Tooling::DirectUnfoldCollection::CreateDirectUnbendBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AlterResult </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        KeepRadFixed </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OverbendAngle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WorkParts </td> <td> 
         
        Part </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT DirectUnbendBuilder : public Builder
        {
            /** three unbend operations */
            public: enum Bendtypes
            {
                BendtypesUnbend/** unbend operation */,
                BendtypesRebend/** rebend operation */,
                BendtypesOverbend/** overbend operation */
            };

            /** work parts */
            public: enum Work
            {
                WorkPart/** part */ 
            };

            private: friend class  _DirectUnbendBuilderBuilder;
            protected: DirectUnbendBuilder();
            /**Returns  the work parts  <br> License requirements : None */
            public: NXOpen::Tooling::DirectUnbendBuilder::Work WorkParts
            (
            );
            /**Sets  the work parts  <br> License requirements : None */
            public: void SetWorkParts
            (
                NXOpen::Tooling::DirectUnbendBuilder::Work workParts /** workparts */ 
            );
            /**Returns  the selection of bends  <br> License requirements : None */
            public: NXOpen::SelectFaceList * SelBend
            (
            );
            /**Returns  the reference objects  <br> License requirements : None */
            public: NXOpen::SelectEdgeList * RefObject
            (
            );
            /**Returns  the switch to set if use an alternate result  <br> License requirements : None */
            public: bool AlterResult
            (
            );
            /**Sets  the switch to set if use an alternate result  <br> License requirements : None */
            public: void SetAlterResult
            (
                bool alterResult /** alterresult */ 
            );
            /**Returns  the overbend angle  <br> License requirements : None */
            public: double OverbendAngle
            (
            );
            /**Sets  the overbend angle  <br> License requirements : None */
            public: void SetOverbendAngle
            (
                double overbendAngle /** overbendangle */ 
            );
            /**Returns  the keep radius fixed  <br> License requirements : None */
            public: bool KeepRadFixed
            (
            );
            /**Sets  the keep radius fixed  <br> License requirements : None */
            public: void SetKeepRadFixed
            (
                bool keepRadFixed /** keepradfixed */ 
            );
            /**Returns  the type  <br> License requirements : None */
            public: NXOpen::Tooling::DirectUnbendBuilder::Bendtypes Type
            (
            );
            /**Sets  the type  <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::DirectUnbendBuilder::Bendtypes type /** type */ 
            );
            /**Returns  the base body  <br> License requirements : None */
            public: NXOpen::Body * BaseBody
            (
            );
            /**Sets  the base body  <br> License requirements : None */
            public: void SetBaseBody
            (
                NXOpen::Body * baseBody /** basebody */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
