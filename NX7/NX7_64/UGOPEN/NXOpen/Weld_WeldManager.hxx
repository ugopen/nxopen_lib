#ifndef NXOpen_WELD_WELDMANAGER_HXX_INCLUDED
#define NXOpen_WELD_WELDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_WeldManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Weld
    {
        class WeldManager;
    }
    namespace Features
    {
        class FeatureCollection;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Weld
    {
        class AutoPointBuilder;
    }
    namespace Weld
    {
        class ExportWeldBuilder;
    }
    namespace Weld
    {
        class GrooveBuilder;
    }
    namespace Weld
    {
        class WeldPointBuilder;
    }
    namespace Weld
    {
        class WeldPreferenceBuilder;
    }
    namespace Weld
    {
        /** Manages weld features and assistant tools.  <br> To obtain an instance of this class, refer to @link Features::FeatureCollection Features::FeatureCollection@endlink  <br> */
        class NXOPENCPPEXPORT WeldManager
        {
            private: NXOpen::Features::FeatureCollection* m_owner;
            public: explicit WeldManager(NXOpen::Features::FeatureCollection *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Creates a @link Weld::GrooveBuilder Weld::GrooveBuilder@endlink  object.  @return  WeldGroove feature builder <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::GrooveBuilder * CreateWeldGrooveBuilder
            (
                NXOpen::Features::Feature * weldGroove /** Groove Weld to be edited, if NULL then create a new one */
            );
            /** Creates a @link Weld::WeldPointBuilder Weld::WeldPointBuilder@endlink  object.  @return  WeldPoint feature builder <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointBuilder * CreateWeldPointBuilder
            (
                NXOpen::Features::Feature * weldPoint /** @link WeldPointBuilder WeldPointBuilder@endlink 
                                                                          to be edited, if NULL then create a new one */
            );
            /** Creates a @link Weld::ExportWeldBuilder Weld::ExportWeldBuilder@endlink  object.  @return  ExportWeld assistant builder <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::ExportWeldBuilder * CreateExportWeldBuilder
            (
            );
            /** Creates a @link Weld::AutoPointBuilder Weld::AutoPointBuilder@endlink  object.  @return  AutoPoint assistant builder <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::AutoPointBuilder * CreateAutoPointBuilder
            (
                NXOpen::Features::Feature * unused /** Builder only creates */
            );
            /** Creates a @link Weld::WeldPreferenceBuilder Weld::WeldPreferenceBuilder@endlink  object.  @return  WeldPref assistant builder <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPreferenceBuilder * CreatePreferenceBuilder
            (
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
