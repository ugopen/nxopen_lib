#ifndef NXOpen_FEATURES_TRIMEXTENDBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TRIMEXTENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TrimExtendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/Features_TrimExtendBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Features
    {
        class TrimExtendBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    namespace Features
    {
        class _TrimExtendBuilderBuilder;
        /**
            Represents a @link Features::TrimExtend Features::TrimExtend@endlink  builder
             <br> To create a new instance of this class, use @link Features::FeatureCollection::CreateTrimExtendBuilder Features::FeatureCollection::CreateTrimExtendBuilder@endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ExtendNewFace </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        TargetExtendDistance.Value </td> <td> 
         
        25 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ToolExtendDistance.Value </td> <td> 
         
        10 </td> </tr> 

        </table>  
        */
        class NXOPENCPPEXPORT TrimExtendBuilder : public Features::FeatureBuilder
        {
            /** This enum represents the TrimExtend types */
            public: enum CreationTypes
            {
                CreationTypesByDistance/** By Distance */,
                CreationTypesPercentOfMeasured/** Percentage of Measured Edges */,
                CreationTypesUntilSelected/** By Until Selected */,
                CreationTypesMakeCorner/** Make Corner */
            };

            /** This enum represents the TrimExtend Extension Methods */
            public: enum ExtensionMethods
            {
                ExtensionMethodsNaturalCurvature/** Natural Curvature */,
                ExtensionMethodsNaturalTangent/** Natural Tangent */,
                ExtensionMethodsMirrored/** Mirrored */
            };

            /** This enum represents the TrimExtend Arrow Side Options */
            public: enum ArrowSideOptions
            {
                ArrowSideOptionsRetain/** Retain */,
                ArrowSideOptionsDelete/** Delete */
            };

            private: friend class  _TrimExtendBuilderBuilder;
            protected: TrimExtendBuilder();
            /**Returns  the trim extend creation option  <br> License requirements : None */
            public: NXOpen::Features::TrimExtendBuilder::CreationTypes Type
            (
            );
            /**Sets  the trim extend creation option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetType
            (
                NXOpen::Features::TrimExtendBuilder::CreationTypes type /** type */ 
            );
            /**Returns  the trim extend extension method to specify the continuity of an extend operation  <br> License requirements : None */
            public: NXOpen::Features::TrimExtendBuilder::ExtensionMethods ExtensionMethod
            (
            );
            /**Sets  the trim extend extension method to specify the continuity of an extend operation  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtensionMethod
            (
                NXOpen::Features::TrimExtendBuilder::ExtensionMethods extensionMethod /** extension method */ 
            );
            /**Returns  the trim and extend arrow side option to specify to retain or discard material in trim operations when Limits are set to Until Selected  <br> License requirements : None */
            public: NXOpen::Features::TrimExtendBuilder::ArrowSideOptions ArrowSideOption
            (
            );
            /**Sets  the trim and extend arrow side option to specify to retain or discard material in trim operations when Limits are set to Until Selected  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetArrowSideOption
            (
                NXOpen::Features::TrimExtendBuilder::ArrowSideOptions arrowSideOption /** arrow side option */ 
            );
            /**Returns  the target collector tool selection to specify the target for a trim or extend operation  <br> License requirements : None */
            public: NXOpen::ScCollector * TargetCollector
            (
            );
            /**Returns  the tool collector tool selection to specify the tool for a trim or extend operation  <br> License requirements : None */
            public: NXOpen::ScCollector * ToolCollector
            (
            );
            /**Returns  the target extend distance  <br> License requirements : None */
            public: NXOpen::Expression * TargetExtendDistance
            (
            );
            /**Returns  the tool extend distance  <br> License requirements : None */
            public: NXOpen::Expression * ToolExtendDistance
            (
            );
            /**Returns  the extend new face to keep the original edges on the target or tool geometry  <br> License requirements : None */
            public: bool ExtendNewFace
            (
            );
            /**Sets  the extend new face to keep the original edges on the target or tool geometry  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExtendNewFace
            (
                bool extendNewFace /** extendnewface */ 
            );
            /**Returns  the target material side direction , targetReversed = true, means target direction is reversed  <br> License requirements : None */
            public: bool TargetReversed
            (
            );
            /**Sets  the target material side direction , targetReversed = true, means target direction is reversed  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetReversed
            (
                bool targetReversed /** targetreversed */ 
            );
            /**Returns  the target material side direction , toolReversed = true, means tool direction is reversed  <br> License requirements : None */
            public: bool ToolReversed
            (
            );
            /**Sets  the target material side direction , toolReversed = true, means tool direction is reversed  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetToolReversed
            (
                bool toolReversed /** toolreversed */ 
            );
            /**Returns  the distance tolerance  <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the distance tolerance  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
