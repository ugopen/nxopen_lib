#ifndef NXOpen_ROUTING_DESIGNRULEOVERRIDE_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULEOVERRIDE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRuleOverride.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Routing
    {
        class DesignRuleOverride;
    }
    class NXObject;
    namespace Routing
    {
        class _DesignRuleOverrideBuilder;
        /** Represents Routing DesignRuleOverride object  <br> Creator not available in KF. <br> */
        class NXOPENCPPEXPORT DesignRuleOverride : public NXObject
        {
            private: friend class  _DesignRuleOverrideBuilder;
            protected: DesignRuleOverride();
            /**Returns  the user of the design rule override is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString User
            (
            );
            /**Sets  the user of the design rule override is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetUser
            (
                const NXString & user /** user */ 
            );
            /**Returns  the reason of the design rule override is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: NXString Reason
            (
            );
            /**Sets  the reason of the design rule override is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetReason
            (
                const NXString & name /** name */ 
            );
            /**Returns  the time stamp of the design rule override is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: int TimeStamp
            (
            );
            /**Sets  the time stamp of the design rule override is returned  <br> License requirements : routing_combined ("Routing Combined") OR routing_electrical ("Routing Electrical") OR routing_mechanical ("Routing Mechanical") */
            public: void SetTimeStamp
            (
                int timeStamp /** timestamp */ 
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
