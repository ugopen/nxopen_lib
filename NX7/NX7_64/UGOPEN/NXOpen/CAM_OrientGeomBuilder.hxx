#ifndef NXOpen_CAM_ORIENTGEOMBUILDER_HXX_INCLUDED
#define NXOpen_CAM_ORIENTGEOMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_OrientGeomBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_ParamBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAM
    {
        class OrientGeomBuilder;
    }
    namespace CAM
    {
        class InheritableIntBuilder;
    }
    namespace CAM
    {
        class LayoutCiBuilder;
    }
    namespace CAM
    {
        class ParamBuilder;
    }
    class CartesianCoordinateSystem;
    class NXObject;
    namespace CAM
    {
        class _OrientGeomBuilderBuilder;
        /** Represents a OrientGeom Builder  <br> This is an abstract class, and cannot be instantiated. <br> */
        class NXOPENCPPEXPORT OrientGeomBuilder : public CAM::ParamBuilder
        {
            /** The CSYS purpose mode options */
            public: enum CsysPurposeModes
            {
                CsysPurposeModesLocal/** CSYS purpose mode: Local */,
                CsysPurposeModesMain/** CSYS purpose mode: Main */
            };

            /** The special output mode options */
            public: enum SpecialOutputModes
            {
                SpecialOutputModesNone/** Special output mode: None */,
                SpecialOutputModesUseMainMcs/** Special output mode: Use main MCS */,
                SpecialOutputModesFixtureOffset/** Special output mode: Fixture offset */,
                SpecialOutputModesCsysRotation/** Special output mode: CSYS rotation */
            };

            /** the tool axis mode options */
            public: enum ToolAxisModes
            {
                ToolAxisModesPositiveZOfMcs/** Tool axis mode: +Z of MCS */,
                ToolAxisModesFixedAxis/** Tool axis mode: Fixed axis */,
                ToolAxisModesAllAxes/** Tool axis mode: All axes */
            };

            private: friend class  _OrientGeomBuilderBuilder;
            protected: OrientGeomBuilder();
            /**Returns  the MCS  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CartesianCoordinateSystem * Mcs
            (
            );
            /**Sets  the MCS  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMcs
            (
                NXOpen::CartesianCoordinateSystem * mcs /** the MCS */
            );
            /** Returns the CSYS purpose  @return  the CSYS purpose mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::OrientGeomBuilder::CsysPurposeModes GetCsysPurposeMode
            (
            );
            public: void SetCsysPurposeMode
            (
                NXOpen::CAM::OrientGeomBuilder::CsysPurposeModes csysPurposeMode /** the CSYS purpose mode */
            );
            /** Returns the Special Output  @return  the special output mode  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::OrientGeomBuilder::SpecialOutputModes GetSpecialOutputMode
            (
            );
            public: void SetSpecialOutputMode
            (
                NXOpen::CAM::OrientGeomBuilder::SpecialOutputModes specialOutputMode /** the special output mode */
            );
            /**Returns  the Fixture Offset builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::InheritableIntBuilder * FixtureOffsetBuilder
            (
            );
            /**Returns  the link RCS to MCS  <br> License requirements : cam_base ("CAM BASE") */
            public: bool LinkRcsToMcs
            (
            );
            /**Sets  the link RCS to MCS  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLinkRcsToMcs
            (
                bool linkRcsToMcs /** the link RCS to MCS value */
            );
            /**Returns  the RCS  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CartesianCoordinateSystem * Rcs
            (
            );
            /**Sets  the RCS  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRcs
            (
                NXOpen::CartesianCoordinateSystem * rcs /** the MCS */
            );
            /** Returns the tool axis mode  @return  the integer value   <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::OrientGeomBuilder::ToolAxisModes GetToolAxisMode
            (
            );
            public: void SetToolAxisMode
            (
                NXOpen::CAM::OrientGeomBuilder::ToolAxisModes toolAxisMode /** the integer value  */
            );
            /**Returns  the tool axis vector  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::NXObject * ToolAxisVector
            (
            );
            /**Sets  the tool axis vector  <br> License requirements : cam_base ("CAM BASE") */
            public: void SetToolAxisVector
            (
                NXOpen::NXObject * toolAxisVector /** the vector tag */
            );
            /**Returns  the Save Layer/Layout builder  <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LayoutCiBuilder * LayoutCiBuilder
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
