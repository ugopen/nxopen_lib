#ifndef NXOpen_CAE_POST_HXX_INCLUDED
#define NXOpen_CAE_POST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Post.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CaeGroupCollection.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace CAE
    {
        class Post;
    }
    class Session;
    namespace CAE
    {
        namespace ResponseSimulation
        {
            class RSEvent;
        }
    }
    namespace CAE
    {
        class SimPart;
    }
    namespace CAE
    {
        class SimSolution;
    }
    class NXColor;
    class Unit;
    namespace CAE
    {
        /** Represents Post-Processing  <br> To obtain an instance of this class, refer to @link Session Session@endlink  <br> */
        class NXOPENCPPEXPORT Post
        {
            /** Fringe styles */
            public: enum Style
            {
                StyleSmoothContours/** smooth contours */ ,
                StyleBandedContours/** banded contours */ ,
                StyleElements/** elements */ ,
                StyleIsoLines/** iso lines */ ,
                StyleIsoSurfaces/** iso surfaces */ ,
                StyleCubes/** cubes */ ,
                StyleSpheres/** spheres */ ,
                StyleArrows/** arrows */ ,
                StyleTensors/** tensors */ ,
                StyleStreamlines/** streamlines */ 
            };

            /** legend display options */
            public: enum Legend
            {
                LegendDetailed/** detailed */ ,
                LegendColorbarOnly/** colorbar only */ ,
                LegendHeaderOnly/** header only */ 
            };

            /** colorbar thresholds */
            public: enum Threshold
            {
                ThresholdResult/** result */ ,
                ThresholdDisplayed/** displayed */ ,
                ThresholdSpecified/** specified */ 
            };

            /** colorbar spectrums */
            public: enum Spectrum
            {
                SpectrumStructural/** structural */ ,
                SpectrumThermal/** thermal */ ,
                SpectrumGrayScale/** gray scale */ ,
                SpectrumStopLight/** stop light */ 
            };

            /** Colorbar scales */
            public: enum Scale
            {
                ScaleAutomatic/** automatic */ ,
                ScaleLinear/** linear */ ,
                ScaleLogarithmic/** logarithmic */ 
            };

            /** Edge display styles */
            public: enum EdgeStyle
            {
                EdgeStyleExternal/** external */ ,
                EdgeStyleFeature/** feature */ ,
                EdgeStyleWireframe/** wireframe */ ,
                EdgeStyleNone/** none */ 
            };

            /** Face display styles */
            public: enum FaceStyle
            {
                FaceStyleOpaque/** opaque */ ,
                FaceStyleTranslucent/** translucent */ ,
                FaceStyleNone/** none */ 
            };

            /** Mark render styles */
            public: enum MarkRenderStyle
            {
                MarkRenderStyleLine/** line */ ,
                MarkRenderStyleSolid/** solid */ 
            };

            /** Mark styles for tensors */
            public: enum MarkTensorStyle
            {
                MarkTensorStyleBoxAndArrows/** box and arrows */ ,
                MarkTensorStyleOnlyArrows/** only arrows */ ,
                MarkTensorStyleOnlyBox/** only box */ 
            };

            /** Mark color options */
            public: enum MarkColor
            {
                MarkColorResultValue/** result value */ ,
                MarkColorSpecified/** specified */ ,
                MarkColorTextcolor/** textcolor */ 
            };

            /** Mark size options */
            public: enum MarkSize
            {
                MarkSizeResultValue/** result value */ ,
                MarkSizeSpecified/** specified */ 
            };

            /** Maximum mark size options */
            public: enum MarkMaximumSize
            {
                MarkMaximumSizePercentageOfModel/** percentage of model */ ,
                MarkMaximumSizeSpecifiedLength/** specified length */ 
            };

            /** Mark locations */
            public: enum MarkLocation
            {
                MarkLocationNodes/** nodes */ ,
                MarkLocationElements/** elements */ 
            };

            /** Mark hide options */
            public: enum MarkHide
            {
                MarkHideResultPercent/** result percent */ ,
                MarkHideAbsoluteResultPercent/** absolute result percent */ ,
                MarkHideResultValue/** result value */ 
            };

            /** Target operators */
            public: enum Target
            {
                TargetFreeFacees/** free facees */ ,
                TargetVolume/** volume */ ,
                TargetCuttingPlane/** cutting plane */ 
            };

            /** Min-Max marker display options */
            public: enum Marker
            {
                MarkerMinimumAndMaximum/** minimum and maximum */ ,
                MarkerMinimumOnly/** minimum only */ ,
                MarkerMaximumOnly/** maximum only */ 
            };

            /** Animation types */
            public: enum AnimationType
            {
                AnimationTypeResult/** result */ ,
                AnimationTypeIterations/** iterations */ ,
                AnimationTypeStreamline/** streamline */ 
            };

            /** Animation styles */
            public: enum AnimationStyle
            {
                AnimationStyleLinear/** linear */ ,
                AnimationStyleModal/** modal */ 
            };

            /** Animation controls */
            public: enum AnimationControl
            {
                AnimationControlBack/** back */ ,
                AnimationControlNext/** next */ ,
                AnimationControlPlay/** play */ ,
                AnimationControlPause/** pause */ ,
                AnimationControlStop/** stop */ ,
                AnimationControlSetFrame/** set frame */ ,
                AnimationControlFullCycle/** full cycle */ ,
                AnimationControlDelay/** delay */ ,
                AnimationControlStreamline/** streamline */ 
            };

            /** Clip hither-yon-cutplaneonly options */
            public: enum ClipSide
            {
                ClipSidePositive/** positive */ ,
                ClipSideNegative/** negative */ ,
                ClipSideBoth/** both */ 
            };

            /** Cutting plane options */
            public: enum ClipPlane
            {
                ClipPlaneX/** x */ ,
                ClipPlaneY/** y */ ,
                ClipPlaneZ/** z */ 
            };

            /** Criteria for value sharing of extracted data at a graph point */
            public: enum ValueSharingCriterion
            {
                ValueSharingCriterionAverage/** average */ ,
                ValueSharingCriterionMinimum/** minimum */ ,
                ValueSharingCriterionMaximum/** maximum */ 
            };

            /** NoData treatments for extracted data at a graph point */
            public: enum NoDataTreatment
            {
                NoDataTreatmentIgnore/** ignore */ ,
                NoDataTreatmentSpecifiedValue/** specified value */ 
            };

            /** Abcissa types for graph */
            public: enum Abcissa
            {
                AbcissaUneven/** uneven */ ,
                AbcissaEven/** even */ ,
                AbcissaSequenced/** sequenced */ 
            };

            /** Export types for postview display */
            public: enum Export
            {
                ExportAscii/** ascii */ ,
                ExportJt/** jt */ ,
                ExportVrml/** vrml */ 
            };

            /** Show hide options for user group visibiliy control */
            public: enum GroupVisibility
            {
                GroupVisibilityShowOnly/** show only */ ,
                GroupVisibilityShow/** show */ ,
                GroupVisibilityHide/** hide */ 
            };

            /** Direction options for streamline extraction */
            public: enum StreamlineDirection
            {
                StreamlineDirectionUpstream/** upstream */ ,
                StreamlineDirectionDownstream/** downstream */ ,
                StreamlineDirectionBoth/** both */ 
            };

            /** Intergration schemes for streamline extraction */
            public: enum IntegrationScheme
            {
                IntegrationSchemeEuler/** euler */ ,
                IntegrationSchemeRk2/** rk2 */ ,
                IntegrationSchemeRk4/** rk4 */ 
            };

            /** Streamline display styles */
            public: enum StreamlineStyle
            {
                StreamlineStyleLine/** line */ ,
                StreamlineStyleRibbon/** ribbon */ ,
                StreamlineStyleTube/** tube */ ,
                StreamlineStyleBubble/** bubble */ 
            };

            /** Streamline color options */
            public: enum StreamlineColor
            {
                StreamlineColorResultValue/** result value */ ,
                StreamlineColorSpecified/** specified */ ,
                StreamlineColorTextcolor/** textcolor */ 
            };

            /** Streamline size options */
            public: enum StreamlineSize
            {
                StreamlineSizePercentageOfModel/** percentage of model */ ,
                StreamlineSizeSpecifiedLength/** specified length */ 
            };

            /** Streamline line weight options */
            public: enum StreamlineLineWeight
            {
                StreamlineLineWeightThin/** thin */ ,
                StreamlineLineWeightNormal/** normal */ ,
                StreamlineLineWeightThick/** thick */ 
            };

            /** Synchronization options for streamlines */
            public: enum StreamlineSynchronization
            {
                StreamlineSynchronizationUpstream/** upstream */ ,
                StreamlineSynchronizationDownstream/** downstream */ ,
                StreamlineSynchronizationSeedPoint/** seed point */ 
            };

             /** Colorbar settings */
            public:
            struct Colorbar
            {
                public: /** spectrum */ NXOpen::CAE::Post::Spectrum Spectrum;
                public: /** invert spectrum */ bool InvertSpectrum;
                public: /** scale */ NXOpen::CAE::Post::Scale Scale;
                public: /** number of levels */ int NumberOfLevels;
                public: /** threshold */ NXOpen::CAE::Post::Threshold Threshold;
                public: /** threshold minimum */ double ThresholdMinimum;
                public: /** threshold maximum */ double ThresholdMaximum;
                public: /** show overflow above */ bool ShowOverflowAbove;
                public: /** show overflow below */ bool ShowOverflowBelow;
                public: /** overflow above color */ NXColor* OverflowAboveColor;
                public: /** overflow below color */ NXColor* OverflowBelowColor;
                public: Colorbar() :
                    Spectrum((NXOpen::CAE::Post::Spectrum)0),
                    InvertSpectrum(),
                    Scale((NXOpen::CAE::Post::Scale)0),
                    NumberOfLevels(),
                    Threshold((NXOpen::CAE::Post::Threshold)0),
                    ThresholdMinimum(),
                    ThresholdMaximum(),
                    ShowOverflowAbove(),
                    ShowOverflowBelow(),
                    OverflowAboveColor(),
                    OverflowBelowColor()
                {
                }
                /** Constructor for the Colorbar struct. */ 
                public: Colorbar(NXOpen::CAE::Post::Spectrum INIT_spectrum /** spectrum */ , 
                        bool INIT_invert_spectrum /** invert spectrum */ , 
                        NXOpen::CAE::Post::Scale INIT_scale /** scale */ , 
                        int INIT_number_of_levels /** number of levels */ , 
                        NXOpen::CAE::Post::Threshold INIT_threshold /** threshold */ , 
                        double INIT_threshold_minimum /** threshold minimum */ , 
                        double INIT_threshold_maximum /** threshold maximum */ , 
                        bool INIT_show_overflow_above /** show overflow above */ , 
                        bool INIT_show_overflow_below /** show overflow below */ , 
                        NXColor* INIT_overflow_above_color /** overflow above color */ , 
                        NXColor* INIT_overflow_below_color /** overflow below color */ ) :
                    Spectrum(INIT_spectrum),
                    InvertSpectrum(INIT_invert_spectrum),
                    Scale(INIT_scale),
                    NumberOfLevels(INIT_number_of_levels),
                    Threshold(INIT_threshold),
                    ThresholdMinimum(INIT_threshold_minimum),
                    ThresholdMaximum(INIT_threshold_maximum),
                    ShowOverflowAbove(INIT_show_overflow_above),
                    ShowOverflowBelow(INIT_show_overflow_below),
                    OverflowAboveColor(INIT_overflow_above_color),
                    OverflowBelowColor(INIT_overflow_below_color)
                {
                }
            };

             /** Edge and Face display settings */
            public:
            struct EdgeFace
            {
                public: /** edge style */ NXOpen::CAE::Post::EdgeStyle EdgeStyle;
                public: /** edge color */ NXColor* EdgeColor;
                public: /** face style */ NXOpen::CAE::Post::FaceStyle FaceStyle;
                public: /** face color */ NXColor* FaceColor;
                public: EdgeFace() :
                    EdgeStyle((NXOpen::CAE::Post::EdgeStyle)0),
                    EdgeColor(),
                    FaceStyle((NXOpen::CAE::Post::FaceStyle)0),
                    FaceColor()
                {
                }
                /** Constructor for the EdgeFace struct. */ 
                public: EdgeFace(NXOpen::CAE::Post::EdgeStyle INIT_edge_style /** edge style */ , 
                        NXColor* INIT_edge_color /** edge color */ , 
                        NXOpen::CAE::Post::FaceStyle INIT_face_style /** face style */ , 
                        NXColor* INIT_face_color /** face color */ ) :
                    EdgeStyle(INIT_edge_style),
                    EdgeColor(INIT_edge_color),
                    FaceStyle(INIT_face_style),
                    FaceColor(INIT_face_color)
                {
                }
            };

             /** Mark display settings */
            public:
            struct Mark
            {
                public: /** show arrow x component */ bool ShowArrowXComponent;
                public: /** show arrow y component */ bool ShowArrowYComponent;
                public: /** show arrow z component */ bool ShowArrowZComponent;
                public: /** show arrow magnitude */ bool ShowArrowMagnitude;
                public: /** mark render style */ NXOpen::CAE::Post::MarkRenderStyle MarkRenderStyle;
                public: /** mark tensor style */ NXOpen::CAE::Post::MarkTensorStyle MarkTensorStyle;
                public: /** mark color */ NXOpen::CAE::Post::MarkColor MarkColor;
                public: /** specified color */ NXColor* SpecifiedColor;
                public: /** mark size */ NXOpen::CAE::Post::MarkSize MarkSize;
                public: /** mark maximum size */ NXOpen::CAE::Post::MarkMaximumSize MarkMaximumSize;
                public: /** model precent value */ double ModelPrecentValue;
                public: /** specified length value */ double SpecifiedLengthValue;
                public: /** mark location */ NXOpen::CAE::Post::MarkLocation MarkLocation;
                public: /** hide marks below */ bool HideMarksBelow;
                public: /** below mark hide type */ NXOpen::CAE::Post::MarkHide BelowMarkHideType;
                public: /** below result percent */ double BelowResultPercent;
                public: /** below result value */ double BelowResultValue;
                public: /** display numerical value with arrow */ bool DisplayNumericalValueWithArrow;
                public: Mark() :
                    ShowArrowXComponent(),
                    ShowArrowYComponent(),
                    ShowArrowZComponent(),
                    ShowArrowMagnitude(),
                    MarkRenderStyle((NXOpen::CAE::Post::MarkRenderStyle)0),
                    MarkTensorStyle((NXOpen::CAE::Post::MarkTensorStyle)0),
                    MarkColor((NXOpen::CAE::Post::MarkColor)0),
                    SpecifiedColor(),
                    MarkSize((NXOpen::CAE::Post::MarkSize)0),
                    MarkMaximumSize((NXOpen::CAE::Post::MarkMaximumSize)0),
                    ModelPrecentValue(),
                    SpecifiedLengthValue(),
                    MarkLocation((NXOpen::CAE::Post::MarkLocation)0),
                    HideMarksBelow(),
                    BelowMarkHideType((NXOpen::CAE::Post::MarkHide)0),
                    BelowResultPercent(),
                    BelowResultValue(),
                    DisplayNumericalValueWithArrow()
                {
                }
                /** Constructor for the Mark struct. */ 
                public: Mark(bool INIT_show_arrow_x_component /** show arrow x component */ , 
                        bool INIT_show_arrow_y_component /** show arrow y component */ , 
                        bool INIT_show_arrow_z_component /** show arrow z component */ , 
                        bool INIT_show_arrow_magnitude /** show arrow magnitude */ , 
                        NXOpen::CAE::Post::MarkRenderStyle INIT_mark_render_style /** mark render style */ , 
                        NXOpen::CAE::Post::MarkTensorStyle INIT_mark_tensor_style /** mark tensor style */ , 
                        NXOpen::CAE::Post::MarkColor INIT_mark_color /** mark color */ , 
                        NXColor* INIT_specified_color /** specified color */ , 
                        NXOpen::CAE::Post::MarkSize INIT_mark_size /** mark size */ , 
                        NXOpen::CAE::Post::MarkMaximumSize INIT_mark_maximum_size /** mark maximum size */ , 
                        double INIT_model_precent_value /** model precent value */ , 
                        double INIT_specified_length_value /** specified length value */ , 
                        NXOpen::CAE::Post::MarkLocation INIT_mark_location /** mark location */ , 
                        bool INIT_hide_marks_below /** hide marks below */ , 
                        NXOpen::CAE::Post::MarkHide INIT_below_mark_hide_type /** below mark hide type */ , 
                        double INIT_below_result_percent /** below result percent */ , 
                        double INIT_below_result_value /** below result value */ , 
                        bool INIT_display_numerical_value_with_arrow /** display numerical value with arrow */ ) :
                    ShowArrowXComponent(INIT_show_arrow_x_component),
                    ShowArrowYComponent(INIT_show_arrow_y_component),
                    ShowArrowZComponent(INIT_show_arrow_z_component),
                    ShowArrowMagnitude(INIT_show_arrow_magnitude),
                    MarkRenderStyle(INIT_mark_render_style),
                    MarkTensorStyle(INIT_mark_tensor_style),
                    MarkColor(INIT_mark_color),
                    SpecifiedColor(INIT_specified_color),
                    MarkSize(INIT_mark_size),
                    MarkMaximumSize(INIT_mark_maximum_size),
                    ModelPrecentValue(INIT_model_precent_value),
                    SpecifiedLengthValue(INIT_specified_length_value),
                    MarkLocation(INIT_mark_location),
                    HideMarksBelow(INIT_hide_marks_below),
                    BelowMarkHideType(INIT_below_mark_hide_type),
                    BelowResultPercent(INIT_below_result_percent),
                    BelowResultValue(INIT_below_result_value),
                    DisplayNumericalValueWithArrow(INIT_display_numerical_value_with_arrow)
                {
                }
            };

             /** Streamline data extraction parameters */
            public:
            struct StreamlineData
            {
                public: /** value shareing criterion */ NXOpen::CAE::Post::ValueSharingCriterion ValueShareingCriterion;
                public: /** no data treatment */ NXOpen::CAE::Post::NoDataTreatment NoDataTreatment;
                public: /** no data value */ double NoDataValue;
                public: StreamlineData() :
                    ValueShareingCriterion((NXOpen::CAE::Post::ValueSharingCriterion)0),
                    NoDataTreatment((NXOpen::CAE::Post::NoDataTreatment)0),
                    NoDataValue()
                {
                }
                /** Constructor for the StreamlineData struct. */ 
                public: StreamlineData(NXOpen::CAE::Post::ValueSharingCriterion INIT_value_shareing_criterion /** value shareing criterion */ , 
                        NXOpen::CAE::Post::NoDataTreatment INIT_no_data_treatment /** no data treatment */ , 
                        double INIT_no_data_value /** no data value */ ) :
                    ValueShareingCriterion(INIT_value_shareing_criterion),
                    NoDataTreatment(INIT_no_data_treatment),
                    NoDataValue(INIT_no_data_value)
                {
                }
            };

             /** Streamline display settings */
            public:
            struct Streamline
            {
                public: /** data params */ NXOpen::CAE::Post::StreamlineData DataParams;
                public: /** stream style */ NXOpen::CAE::Post::StreamlineStyle StreamStyle;
                public: /** stream color */ NXOpen::CAE::Post::StreamlineColor StreamColor;
                public: /** specified color */ NXColor* SpecifiedColor;
                public: /** stream size */ NXOpen::CAE::Post::StreamlineSize StreamSize;
                public: /** model precent value */ double ModelPrecentValue;
                public: /** specified length value */ double SpecifiedLengthValue;
                public: /** lineweight */ NXOpen::CAE::Post::StreamlineLineWeight Lineweight;
                public: /** stream sync */ NXOpen::CAE::Post::StreamlineSynchronization StreamSync;
                public: /** bubble timestep */ double BubbleTimestep;
                public: Streamline() :
                    DataParams(),
                    StreamStyle((NXOpen::CAE::Post::StreamlineStyle)0),
                    StreamColor((NXOpen::CAE::Post::StreamlineColor)0),
                    SpecifiedColor(),
                    StreamSize((NXOpen::CAE::Post::StreamlineSize)0),
                    ModelPrecentValue(),
                    SpecifiedLengthValue(),
                    Lineweight((NXOpen::CAE::Post::StreamlineLineWeight)0),
                    StreamSync((NXOpen::CAE::Post::StreamlineSynchronization)0),
                    BubbleTimestep()
                {
                }
                /** Constructor for the Streamline struct. */ 
                public: Streamline(NXOpen::CAE::Post::StreamlineData INIT_data_params /** data params */ , 
                        NXOpen::CAE::Post::StreamlineStyle INIT_stream_style /** stream style */ , 
                        NXOpen::CAE::Post::StreamlineColor INIT_stream_color /** stream color */ , 
                        NXColor* INIT_specified_color /** specified color */ , 
                        NXOpen::CAE::Post::StreamlineSize INIT_stream_size /** stream size */ , 
                        double INIT_model_precent_value /** model precent value */ , 
                        double INIT_specified_length_value /** specified length value */ , 
                        NXOpen::CAE::Post::StreamlineLineWeight INIT_lineweight /** lineweight */ , 
                        NXOpen::CAE::Post::StreamlineSynchronization INIT_stream_sync /** stream sync */ , 
                        double INIT_bubble_timestep /** bubble timestep */ ) :
                    DataParams(INIT_data_params),
                    StreamStyle(INIT_stream_style),
                    StreamColor(INIT_stream_color),
                    SpecifiedColor(INIT_specified_color),
                    StreamSize(INIT_stream_size),
                    ModelPrecentValue(INIT_model_precent_value),
                    SpecifiedLengthValue(INIT_specified_length_value),
                    Lineweight(INIT_lineweight),
                    StreamSync(INIT_stream_sync),
                    BubbleTimestep(INIT_bubble_timestep)
                {
                }
            };

             /** Animation settings for streamline animation */
            public:
            struct AnimationStreamline
            {
                public: /** show guides */ bool ShowGuides;
                public: /** stream sync */ NXOpen::CAE::Post::StreamlineSynchronization StreamSync;
                public: /** between 0.0 and 1.0 */double ActiveRegionStartFactor;
                public: /** between 0.0 and 1.0 */double ActiveRegionEndFactor;
                public: /** number of increments */ int NumberOfIncrements;
                public: /** continuous pulse */ bool ContinuousPulse;
                public: /** number of time periods */ int NumberOfTimePeriods;
                public: /** more than 2.0 */double FramesPerPulse;
                public: /** not yet supported */double PulseDutycycle;
                public: AnimationStreamline() :
                    ShowGuides(),
                    StreamSync((NXOpen::CAE::Post::StreamlineSynchronization)0),
                    ActiveRegionStartFactor(),
                    ActiveRegionEndFactor(),
                    NumberOfIncrements(),
                    ContinuousPulse(),
                    NumberOfTimePeriods(),
                    FramesPerPulse(),
                    PulseDutycycle()
                {
                }
                /** Constructor for the AnimationStreamline struct. */ 
                public: AnimationStreamline(bool INIT_show_guides /** show guides */ , 
                        NXOpen::CAE::Post::StreamlineSynchronization INIT_stream_sync /** stream sync */ , 
                        double INIT_active_region_start_factor /** between 0.0 and 1.0 */, 
                        double INIT_active_region_end_factor /** between 0.0 and 1.0 */, 
                        int INIT_number_of_increments /** number of increments */ , 
                        bool INIT_continuous_pulse /** continuous pulse */ , 
                        int INIT_number_of_time_periods /** number of time periods */ , 
                        double INIT_frames_per_pulse /** more than 2.0 */, 
                        double INIT_pulse_dutycycle /** not yet supported */) :
                    ShowGuides(INIT_show_guides),
                    StreamSync(INIT_stream_sync),
                    ActiveRegionStartFactor(INIT_active_region_start_factor),
                    ActiveRegionEndFactor(INIT_active_region_end_factor),
                    NumberOfIncrements(INIT_number_of_increments),
                    ContinuousPulse(INIT_continuous_pulse),
                    NumberOfTimePeriods(INIT_number_of_time_periods),
                    FramesPerPulse(INIT_frames_per_pulse),
                    PulseDutycycle(INIT_pulse_dutycycle)
                {
                }
            };

             /** Animation settings */
            public:
            struct Animation
            {
                public: /** animation type */ NXOpen::CAE::Post::AnimationType AnimationType;
                public: /** animation style */ NXOpen::CAE::Post::AnimationStyle AnimationStyle;
                public: /** number of frames */ int NumberOfFrames;
                public: /** start loadcase */ int StartLoadcase;
                public: /** start iteration */ int StartIteration;
                public: /** end loadcase */ int EndLoadcase;
                public: /** end iteration */ int EndIteration;
                public: /** iteration increment */ int IterationIncrement;
                public: /** full cycle */ bool FullCycle;
                public: /** milliseconds */int Delay;
                public: /** animation streamline */ NXOpen::CAE::Post::AnimationStreamline AnimationStreamline;
                public: Animation() :
                    AnimationType((NXOpen::CAE::Post::AnimationType)0),
                    AnimationStyle((NXOpen::CAE::Post::AnimationStyle)0),
                    NumberOfFrames(),
                    StartLoadcase(),
                    StartIteration(),
                    EndLoadcase(),
                    EndIteration(),
                    IterationIncrement(),
                    FullCycle(),
                    Delay(),
                    AnimationStreamline()
                {
                }
                /** Constructor for the Animation struct. */ 
                public: Animation(NXOpen::CAE::Post::AnimationType INIT_animation_type /** animation type */ , 
                        NXOpen::CAE::Post::AnimationStyle INIT_animation_style /** animation style */ , 
                        int INIT_number_of_frames /** number of frames */ , 
                        int INIT_start_loadcase /** start loadcase */ , 
                        int INIT_start_iteration /** start iteration */ , 
                        int INIT_end_loadcase /** end loadcase */ , 
                        int INIT_end_iteration /** end iteration */ , 
                        int INIT_iteration_increment /** iteration increment */ , 
                        bool INIT_full_cycle /** full cycle */ , 
                        int INIT_delay /** milliseconds */, 
                        NXOpen::CAE::Post::AnimationStreamline INIT_animation_streamline /** animation streamline */ ) :
                    AnimationType(INIT_animation_type),
                    AnimationStyle(INIT_animation_style),
                    NumberOfFrames(INIT_number_of_frames),
                    StartLoadcase(INIT_start_loadcase),
                    StartIteration(INIT_start_iteration),
                    EndLoadcase(INIT_end_loadcase),
                    EndIteration(INIT_end_iteration),
                    IterationIncrement(INIT_iteration_increment),
                    FullCycle(INIT_full_cycle),
                    Delay(INIT_delay),
                    AnimationStreamline(INIT_animation_streamline)
                {
                }
            };

             /** Cutting-plane display settings */
            public:
            struct Clipping
            {
                public: /** show outline */ bool ShowOutline;
                public: /** show clipped ghost */ bool ShowClippedGhost;
                public: /** clip value */ double ClipValue;
                public: /** side */ NXOpen::CAE::Post::ClipSide Side;
                public: /** plane */ NXOpen::CAE::Post::ClipPlane Plane;
                public: /** Any except Local */NXOpen::CAE::Result::CoordinateSystem PlaneCoordinateSystem;
                public: Clipping() :
                    ShowOutline(),
                    ShowClippedGhost(),
                    ClipValue(),
                    Side((NXOpen::CAE::Post::ClipSide)0),
                    Plane((NXOpen::CAE::Post::ClipPlane)0),
                    PlaneCoordinateSystem((NXOpen::CAE::Result::CoordinateSystem)0)
                {
                }
                /** Constructor for the Clipping struct. */ 
                public: Clipping(bool INIT_show_outline /** show outline */ , 
                        bool INIT_show_clipped_ghost /** show clipped ghost */ , 
                        double INIT_clip_value /** clip value */ , 
                        NXOpen::CAE::Post::ClipSide INIT_side /** side */ , 
                        NXOpen::CAE::Post::ClipPlane INIT_plane /** plane */ , 
                        NXOpen::CAE::Result::CoordinateSystem INIT_plane_coordinate_system /** Any except Local */) :
                    ShowOutline(INIT_show_outline),
                    ShowClippedGhost(INIT_show_clipped_ghost),
                    ClipValue(INIT_clip_value),
                    Side(INIT_side),
                    Plane(INIT_plane),
                    PlaneCoordinateSystem(INIT_plane_coordinate_system)
                {
                }
            };

             /** Annotation box display settings */
            public:
            struct AnnotationBox
            {
                public: /** line color */ NXColor* LineColor;
                public: /** area color */ NXColor* AreaColor;
                public: /** show border */ bool ShowBorder;
                public: /** fill area */ bool FillArea;
                public: /** area translucency */ bool AreaTranslucency;
                public: AnnotationBox() :
                    LineColor(),
                    AreaColor(),
                    ShowBorder(),
                    FillArea(),
                    AreaTranslucency()
                {
                }
                /** Constructor for the AnnotationBox struct. */ 
                public: AnnotationBox(NXColor* INIT_line_color /** line color */ , 
                        NXColor* INIT_area_color /** area color */ , 
                        bool INIT_show_border /** show border */ , 
                        bool INIT_fill_area /** fill area */ , 
                        bool INIT_area_translucency /** area translucency */ ) :
                    LineColor(INIT_line_color),
                    AreaColor(INIT_area_color),
                    ShowBorder(INIT_show_border),
                    FillArea(INIT_fill_area),
                    AreaTranslucency(INIT_area_translucency)
                {
                }
            };

             /** Annotation text settings */
            public:
            struct Text
            {
                public: /** font */ int Font;
                public: /** size */ int Size;
                public: /** color */ NXColor* Color;
                public: /** bold */ int Bold;
                public: Text() :
                    Font(),
                    Size(),
                    Color(),
                    Bold()
                {
                }
                /** Constructor for the Text struct. */ 
                public: Text(int INIT_font /** font */ , 
                        int INIT_size /** size */ , 
                        NXColor* INIT_color /** color */ , 
                        int INIT_bold /** bold */ ) :
                    Font(INIT_font),
                    Size(INIT_size),
                    Color(INIT_color),
                    Bold(INIT_bold)
                {
                }
            };

             /** Streamline extraction parameters */
            public:
            struct StreamlineExtraction
            {
                public: /** direction */ NXOpen::CAE::Post::StreamlineDirection Direction;
                public: /** maximum time elapsed */ double MaximumTimeElapsed;
                public: /** max integration steps */ int MaxIntegrationSteps;
                public: /** limit step size */ bool LimitStepSize;
                public: /** maximum step size */ double MaximumStepSize;
                public: /** not yet supported */NXOpen::CAE::Post::IntegrationScheme IntegrationScheme;
                public: /** disjoint restart */ bool DisjointRestart;
                public: StreamlineExtraction() :
                    Direction((NXOpen::CAE::Post::StreamlineDirection)0),
                    MaximumTimeElapsed(),
                    MaxIntegrationSteps(),
                    LimitStepSize(),
                    MaximumStepSize(),
                    IntegrationScheme((NXOpen::CAE::Post::IntegrationScheme)0),
                    DisjointRestart()
                {
                }
                /** Constructor for the StreamlineExtraction struct. */ 
                public: StreamlineExtraction(NXOpen::CAE::Post::StreamlineDirection INIT_direction /** direction */ , 
                        double INIT_maximum_time_elapsed /** maximum time elapsed */ , 
                        int INIT_max_integration_steps /** max integration steps */ , 
                        bool INIT_limit_step_size /** limit step size */ , 
                        double INIT_maximum_step_size /** maximum step size */ , 
                        NXOpen::CAE::Post::IntegrationScheme INIT_integration_scheme /** not yet supported */, 
                        bool INIT_disjoint_restart /** disjoint restart */ ) :
                    Direction(INIT_direction),
                    MaximumTimeElapsed(INIT_maximum_time_elapsed),
                    MaxIntegrationSteps(INIT_max_integration_steps),
                    LimitStepSize(INIT_limit_step_size),
                    MaximumStepSize(INIT_maximum_step_size),
                    IntegrationScheme(INIT_integration_scheme),
                    DisjointRestart(INIT_disjoint_restart)
                {
                }
            };

             /** Streamline seed point definition */
            public:
            struct StreamlineSeed
            {
                public: /** extraction */ NXOpen::CAE::Post::StreamlineExtraction Extraction;
                public: /** coordinates */ NXOpen::Point3d Coordinates;
                public: /** -1 if not known */int ElementId;
                public: StreamlineSeed() :
                    Extraction(),
                    Coordinates(),
                    ElementId()
                {
                }
                /** Constructor for the StreamlineSeed struct. */ 
                public: StreamlineSeed(NXOpen::CAE::Post::StreamlineExtraction INIT_extraction /** extraction */ , 
                        NXOpen::Point3d INIT_coordinates /** coordinates */ , 
                        int INIT_element_id /** -1 if not known */) :
                    Extraction(INIT_extraction),
                    Coordinates(INIT_coordinates),
                    ElementId(INIT_element_id)
                {
                }
            };

             /** Graph extraction parameters */
            public:
            struct GraphParameters
            {
                public: /** Not yet supported */bool UseDeformedConfiguration;
                public: /** include intersections */ bool IncludeIntersections;
                public: /** value shareing criterion */ NXOpen::CAE::Post::ValueSharingCriterion ValueShareingCriterion;
                public: /** no data treatment */ NXOpen::CAE::Post::NoDataTreatment NoDataTreatment;
                public: /** no data value */ double NoDataValue;
                public: /** abcissa */ NXOpen::CAE::Post::Abcissa Abcissa;
                public: GraphParameters() :
                    UseDeformedConfiguration(),
                    IncludeIntersections(),
                    ValueShareingCriterion((NXOpen::CAE::Post::ValueSharingCriterion)0),
                    NoDataTreatment((NXOpen::CAE::Post::NoDataTreatment)0),
                    NoDataValue(),
                    Abcissa((NXOpen::CAE::Post::Abcissa)0)
                {
                }
                /** Constructor for the GraphParameters struct. */ 
                public: GraphParameters(bool INIT_use_deformed_configuration /** Not yet supported */, 
                        bool INIT_include_intersections /** include intersections */ , 
                        NXOpen::CAE::Post::ValueSharingCriterion INIT_value_shareing_criterion /** value shareing criterion */ , 
                        NXOpen::CAE::Post::NoDataTreatment INIT_no_data_treatment /** no data treatment */ , 
                        double INIT_no_data_value /** no data value */ , 
                        NXOpen::CAE::Post::Abcissa INIT_abcissa /** abcissa */ ) :
                    UseDeformedConfiguration(INIT_use_deformed_configuration),
                    IncludeIntersections(INIT_include_intersections),
                    ValueShareingCriterion(INIT_value_shareing_criterion),
                    NoDataTreatment(INIT_no_data_treatment),
                    NoDataValue(INIT_no_data_value),
                    Abcissa(INIT_abcissa)
                {
                }
            };

             /** Graph handle */
            public:
            struct GraphIds
            {
                public: /** graph file id */ int GraphFileId;
                public: /** graph set id */ int GraphSetId;
                public: GraphIds() :
                    GraphFileId(),
                    GraphSetId()
                {
                }
                /** Constructor for the GraphIds struct. */ 
                public: GraphIds(int INIT_graph_file_id /** graph file id */ , 
                        int INIT_graph_set_id /** graph set id */ ) :
                    GraphFileId(INIT_graph_file_id),
                    GraphSetId(INIT_graph_set_id)
                {
                }
            };

             /** Tolerances used for comparing postview ASCII display files */
            public:
            struct ASCIIDiffTolerances
            {
                public: /** error allowed on coordinate values */double Coorderr;
                public: /** error allowed on data values */double Dataerr;
                public: /** absolute tolerance on rgb values */double Rgbtol;
                public: /** absolute tolerance on coordinate values */double Coordtol;
                public: /** absolute tolerance on data values */double Datatol;
                public: /** zero tolerance on any value */double Zerotol;
                public: ASCIIDiffTolerances() :
                    Coorderr(),
                    Dataerr(),
                    Rgbtol(),
                    Coordtol(),
                    Datatol(),
                    Zerotol()
                {
                }
                /** Constructor for the ASCIIDiffTolerances struct. */ 
                public: ASCIIDiffTolerances(double INIT_coorderr /** error allowed on coordinate values */, 
                        double INIT_dataerr /** error allowed on data values */, 
                        double INIT_rgbtol /** absolute tolerance on rgb values */, 
                        double INIT_coordtol /** absolute tolerance on coordinate values */, 
                        double INIT_datatol /** absolute tolerance on data values */, 
                        double INIT_zerotol /** zero tolerance on any value */) :
                    Coorderr(INIT_coorderr),
                    Dataerr(INIT_dataerr),
                    Rgbtol(INIT_rgbtol),
                    Coordtol(INIT_coordtol),
                    Datatol(INIT_datatol),
                    Zerotol(INIT_zerotol)
                {
                }
            };

            private: NXOpen::Session* m_owner;
            public: explicit Post(NXOpen::Session *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /** Load an existing result file that is not associated with a solution.
                        Returns a result handle that may be used in PostviewCreate* calls  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int LoadImportedResult
            (
                const NXString & resultName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & fileName /**    <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::Unit *> & units /** units */ 
            );
            /** Load results for a solution.
                        Returns a result handle that may be used in PostviewCreate* calls  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int LoadSolutionResult
            (
                NXOpen::CAE::SimSolution * solution /** solution */ 
            );
            /** Load results for a Response analysis event.
                        Returns a result handle that may be used in PostviewCreate* calls  @return    <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int LoadRaEventResult
            (
                NXOpen::CAE::ResponseSimulation::RSEvent * raEvent /** ra event */ 
            );
            /** Unload results that use the input file name  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void UnloadResultFile
            (
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Unload the input result id. The result id is what was obtained from 
                        LoadImportedResult or LoadSolutionResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void UnloadResult
            (
                int resultId /** result id */ 
            );
            /** Synchronize the Groups in Post-Processing with those in the Simulation Part  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void UpdateUserGroupsFromSimPart
            (
                NXOpen::CAE::SimPart * simpart /** simpart */ 
            );
            /** Create a new post view with default settings on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult. 
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int CreatePostview
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                int resultId /** result id */ ,
                bool overlay /** overlay */ 
            );
            /** Create a new post view with specified result on a loaded result id. 
                        The result id is what was obtained from LoadImportedResult or LoadSolutionResult.
                        Returns a postview handle that may be used in Postview*, CreatePath* and CreateGraph* calls  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int CreatePostviewForResult
            (
                int viewIndex /** 0 thru 8, viewport number to place postview in */,
                int resultId /** result id */ ,
                bool overlay /** overlay */ ,
                const NXOpen::CAE::Result::ResultParameters & result /** result */ 
            );
            /** End all post processing activity in the input view port index  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteViewport
            (
                int viewIndex /** 0 thru 8, viewport number to remove post displays */
            );
            /** Rename a postview. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewRename
            (
                int postviewId /** postview id */ ,
                const NXString & newName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Delete a postview
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewDelete
            (
                int postviewId /** postview id */ 
            );
            /** Set the input postview id as the current postview if it is one of several overlaid postviews
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetCurrentInOverlay
            (
                int postviewId /** postview id */ 
            );
            /** Play or Replay the animation for the input postview id with the input animation parameters.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewAnimationPlay
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Animation & animation /** animation */ 
            );
            /** Control animation for the input postview id
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewAnimationControl
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::AnimationControl control /** control */ ,
                int frame /** frame number to use with control = SetFrame */,
                bool fullCycle /** to be used with control = FullCycle */,
                int delay /** milliseconds, to use with control = Delay */
            );
            /** Control streamline animation for the input postview id
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewAnimationControlStreamline
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::AnimationStreamline & control /** control */ 
            );
            /** Set the min-max markers on-off for the input postview id.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewMarkerOnOff
            (
                int postviewId /** postview id */ ,
                bool showMarker /** show marker */ 
            );
            /** Apply a loaded template on the input postview id.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewApplyTemplate
            (
                int postviewId /** postview id */ ,
                int templateId /** template id */ 
            );
            /** Apply a template file on the input postview id.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewApplyTemplateFile
            (
                int postviewId /** postview id */ ,
                const NXString & xmlFileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Perform a Show All on the input postview id.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewApplyShowAll
            (
                int postviewId /** postview id */ 
            );
            /** Set the visibility of an element group container in the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewApplyGroupContainerVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group (index) within a container (1D, 2D, Connector etc) in 
                        the input postview id with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewApplyGroupVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                int group /** 0 thru number of groups in container - 1 */,
                bool visibility /** visibility */ 
            );
            /** Control visibility of one or more usergroups with immediate effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewApplyUserGroupVisibility
            (
                int postviewId /** postview id */ ,
                const std::vector<int> & usergroupIds /** usergroup ids */ ,
                NXOpen::CAE::Post::GroupVisibility visibility /** visibility */ 
            );
            /** Set the fringe style in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetStyle
            (
                int postviewId /** postview id */ ,
                int showStyle /** show style */ ,
                NXOpen::CAE::Post::Style style /** style */ 
            );
            /** Set the target operator in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetTarget
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Post::Target target /** target */ 
            );
            /** Set the result for color display in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetResult
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Result::ResultParameters & result /** result */ 
            );
            /** Set the result for deformed shape in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetDeformation
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Result::DeformationParameters & deformation /** deformation */ 
            );
            /** Set the velocity field for streamline extraction in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewSetStreamlineVelocity
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Result::VelocityParameters & velocity /** velocity */ 
            );
            /** Set the seed set to use for streamline extraction in the input postview id. Needs a PostviewUpdate call to take effect.
                         The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewSetStreamlineSeedSet
            (
                int postviewId /** postview id */ ,
                int seedsetId /** seedset id */ 
            );
            /** Set the mark display options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetMark
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Mark & mark /** mark */ 
            );
            /** Set the streamline display options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PostviewSetStreamline
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Streamline & streamline /** streamline */ 
            );
            /** Set the primary display to be deformed/undeformed in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetDeformed
            (
                int postviewId /** postview id */ ,
                bool deformed /** deformed */ 
            );
            /** Set the undeformed display in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetUndeformed
            (
                int postviewId /** postview id */ ,
                bool undeformed /** undeformed */ 
            );
            /** Set synchronization of the color and deformed display in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetColorDisplayDeformationSynchronization
            (
                int postviewId /** postview id */ ,
                bool synchronization /** synchronization */ 
            );
            /** Set the primary display to be deformed/undeformed in the input postview id. Specify any additional
                        undeformed display and whether the load case and iteration are to sunchronized for the 
                        color display and deformed shape. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetDeformedUndeformedSynchronization
            (
                int postviewId /** postview id */ ,
                bool showDeformedPrimaryDisplay /** show deformed primary display */ ,
                bool showUndeformedModel /** show undeformed model */ ,
                bool synchronizeLoadCaseAndIteration /** synchronize load case and iteration */ 
            );
            /** Set colorbar options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetColorbar
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Colorbar & colorbar /** colorbar */ 
            );
            /** Set legend options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetLegend
            (
                int postviewId /** postview id */ ,
                bool showLegend /** show legend */ ,
                NXOpen::CAE::Post::Legend legend /** legend */ 
            );
            /** Set edge and face styles and colors for both primary and undeformed displays in the input 
                        postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetEdgeFace
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::EdgeFace & primaryEdgeface /** primary edgeface */ ,
                const NXOpen::CAE::Post::EdgeFace & undeformedEdgeface /** undeformed edgeface */ 
            );
            /** Set text color used for legend and identify in the input postview id. The other options are not 
                        yet supported. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetText
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Text & text /** text */ 
            );
            /** Set min-max marker options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetMarker
            (
                int postviewId /** postview id */ ,
                bool showMarker /** show marker */ ,
                NXOpen::CAE::Post::Marker marker /** marker */ 
            );
            /** Set min-max marker box options in the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetAnnotationBox
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::AnnotationBox & annotationBox /** annotation box */ 
            );
            /** Set cutting-plane options in the input postview id. Needs a PostviewUpdate call to take effect.
                        In addition, needs to have the Target set to CuttingPlane for the model to appear clipped.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetClipping
            (
                int postviewId /** postview id */ ,
                const NXOpen::CAE::Post::Clipping & clipping /** clipping */ 
            );
            /** Set the visibility of an element group container in the input postview id. 
                        Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetGroupContainerVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                bool visibility /** visibility */ 
            );
            /** Set the visibility of an element group (index) within a container (1D, 2D, Connector etc) in 
                        the input postview id. Needs a PostviewUpdate call to take effect.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewSetGroupVisibility
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::Result::GroupContainer container /** container */ ,
                int group /** 0 thru number of groups in container - 1 */,
                bool visibility /** visibility */ 
            );
            /** Make the input postview id up-to-date with all the settings made via PostviewSet* methods so far.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewUpdate
            (
                int postviewId /** postview id */ 
            );
            /** Capture an animated gif image for an input postview id is that is already animating.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewCaptureAnimatedGif
            (
                int postviewId /** postview id */ ,
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                bool includeOverlayedPostviews /** include overlayed postviews */ ,
                bool whiteBackground /** white background */ 
            );
            /** Export the display of the input postview id to the specified format. VRML is not yet supported.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewExportDisplay
            (
                int postviewId /** postview id */ ,
                const NXString & fileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                NXOpen::CAE::Post::Export format /** format */ ,
                bool ignoreClipping /** ignore clipping */ ,
                bool ignoreVisibility /** ignore visibility */ 
            );
            /** Save all the setting of the input postview id to a template xml file, capture image,
                        and load template for future use.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a template handle that may be used in PostviewApplyTemplate and Template* calls   @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int PostviewSaveTemplate
            (
                int postviewId /** postview id */ 
            );
            /** Save all the setting of the input postview id to a template xml file. no image capture.
                        xml file is not loaded, and can be reused only via PostviewApplyTemplateFile 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void PostviewExportTemplate
            (
                int postviewId /** postview id */ ,
                const NXString & xmlFileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Create a User Group using element or node labels. Returns a usergroup handle that 
                        may be used in UserGroup* calls and in PostViewApplyUserGroupVisibility  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int CreateUserGroupFromEntityLabels
            (
                int postviewId /** postview id */ ,
                NXOpen::CAE::CaeGroupCollection::EntityType entityType /** entity type */ ,
                const std::vector<int> & labels /** labels */ 
            );
            /** Delete a User Group. 
                        The input usergroup id is what was returned from CreateUserGroupFromEntityLabels  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void UserGroupRename
            (
                int usergroupId /** usergroup id */ ,
                const NXString & newName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Rename a User Group. 
                        The input usergroup id is what was returned from CreateUserGroupFromEntityLabels  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void UserGroupDelete
            (
                int usergroupId /** usergroup id */ 
            );
            /** Create a seed set that can be used to specify the start points for streamline extraction. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a seedset handle that maye be used in StreamlineSeedSet* calls and PostVeiwSetStreamlineSeedSet  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int CreateStreamlineSeedSet
            (
                int postviewId /** postview id */ ,
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<NXOpen::CAE::Post::StreamlineSeed> & seeds /** seeds */ 
            );
            /** Delete a Seed Set. 
                        The input seedset id is what was returned from JA_SPP_CreateStreamlineSeedSet  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void StreamlineSeedSetDelete
            (
                int seedsetId /** seedset id */ 
            );
            /** Create a path from an ordered set of node ids on the input postview id. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a path handle that maye be used in CreateSpatialGraph and Path* calls  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int CreatePathFromNodeIds
            (
                int postviewId /** postview id */ ,
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<int> & nodeIds /** node ids */ 
            );
            /** Create a path from an ordered set of points on the input postview id. 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        Returns a path handle that maye be used in CreateSpatialGraph and Path* calls  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int CreatePathFromPoints
            (
                int postviewId /** postview id */ ,
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const std::vector<double> & points /** points */ ,
                int numberOfInsertPointsPerSegment /** greater than or equal to 0 */
            );
            /** Delete the input path id. 
                        The input path id is what was returned from CreatePathFromNodeIds or CreatePathFromPoints  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PathDelete
            (
                int pathId /** path id */ 
            );
            /** Create a graph by extracting data from the input postview id, along an input path id 
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        The input path id is what was returned from CreatePathFromNodeIds or CreatePathFromPoints.
                        Returns a graph handle that may be used in PlotGraph and Graph* calls  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::Post::GraphIds CreateSpatialGraph
            (
                int postviewId /** postview id */ ,
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::CAE::Post::GraphParameters & graph /** graph */ ,
                int pathId /** path id */ 
            );
            /** Create a graph by extracting data from the input postview id, at the input node label or point,
                        for the input iterations. Iterations specified as start, end and step.
                        The input postview id is what was returned from CreatePostview or CreatePostviewForResult.
                        The input path id is what was returned from CreatePathFromNodeIds or CreatePathFromPoints.
                        Returns a graph handle that may be used in PlotGraph and Graph* calls  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::Post::GraphIds CreateHistoryGraph
            (
                int postviewId /** postview id */ ,
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::CAE::Post::GraphParameters & graph /** graph */ ,
                int startIteration /** start iteration */ ,
                int endIteration /** end iteration */ ,
                int iterationIncrement /** iteration increment */ ,
                int nodeLabel /** node label */ ,
                const std::vector<double> & point /** point */ 
            );
            /** Plot or Overlay the input graph specfied by graph_ids. 
                        The input graph_ids is what was returned from CreateSpatialGraph or CreateHistoryGraph  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PlotGraph
            (
                int viewIndex /** view index */ ,
                const NXOpen::CAE::Post::GraphIds & graphIds /** graph ids */ ,
                bool overlay /** overlay */ 
            );
            /** Delete the input graph specfied by graph_ids.
                        The input graph_ids is what was returned from CreateSpatialGraph or CreateHistoryGraph  <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void GraphDelete
            (
                const NXOpen::CAE::Post::GraphIds & graphIds /** graph ids */ 
            );
            /** Delete a loaded template xml file specified by template_id.
                        The input template_id is what was returned from PostviewSaveTemplate or TemplateSearch  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void TemplateDelete
            (
                int templateId /** template id */ 
            );
            /** Rename a loaded template xml file specified by template_id.
                        The input template_id is what was returned from PostviewSaveTemplate or TemplateSearch  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void TemplateRename
            (
                int templateId /** template id */ ,
                const NXString & newName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Search for a template handle for loaded template xml file specified by its name.
                        Returns a template handle that may be used in PostviewApplyTemplate and Template* calls  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int TemplateSearch
            (
                const NXString & name /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */
            );
            /** Set a loaded template as the default postview settings to be used for all subsequent
                        PostviewCreate calls.
                        The input template_id is what was returned from PostviewSaveTemplate or TemplateSearch  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void TemplateSetAsDefault
            (
                int templateId /** template id */ 
            );
            /** Delete all loaded template xml files  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteAllTemplates
            (
            );
            /** Search and load template xml files  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ReloadTemplates
            (
            );
            /** Use factory defaults rather than a template for the default postview settings to be used
                        in all subsequent PostviewCreate calls  <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFactoryDefaultTemplate
            (
            );
            /** Utility to compare post ascii files  @return   <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString CompareDisplayFiles
            (
                const NXString & benchmarkFileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXString & testFileName /**   <br>  NOTE: The full Unicode character set is not supported for this parameter.  <br> */,
                const NXOpen::CAE::Post::ASCIIDiffTolerances & tolerances /** tolerances */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
