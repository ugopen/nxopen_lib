#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_XYZPLANEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_XYZPLANEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_XYZPlaneBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_XYZPlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class XYZPlaneBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _XYZPlaneBuilderBuilder;
            /** Represents the XYZ Plane specification for a @link GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder@endlink .*/
            class NXOPENCPPEXPORT XYZPlaneBuilder : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
            {
                private: friend class  _XYZPlaneBuilderBuilder;
                protected: XYZPlaneBuilder();
                /**Returns  a value indicating whether X is enabled  <br> License requirements : None */
                public: bool IsXEnabled
                (
                );
                /**Sets  a value indicating whether X is enabled  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetXEnabled
                (
                    bool isXEnabled /** isxenabled */ 
                );
                /**Returns  a value indicating whether Y is enabled  <br> License requirements : None */
                public: bool IsYEnabled
                (
                );
                /**Sets  a value indicating whether Y is enabled  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetYEnabled
                (
                    bool isYEnabled /** isyenabled */ 
                );
                /**Returns  a value indicating whether Z is enabled  <br> License requirements : None */
                public: bool IsZEnabled
                (
                );
                /**Sets  a value indicating whether Z is enabled  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetZEnabled
                (
                    bool isZEnabled /** iszenabled */ 
                );
                /**Returns  a value indicating whether the number is used  <br> License requirements : None */
                public: bool IsNumberEnabled
                (
                );
                /**Sets  a value indicating whether the number is used  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNumberEnabled
                (
                    bool isNumberEnabled /** isnumberenabled */ 
                );
                /**Returns  a value indicating how many sections should be created  <br> License requirements : None */
                public: int Number
                (
                );
                /**Sets  a value indicating how many sections should be created  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNumber
                (
                    int number /** number */ 
                );
                /**Returns  a value indicating whether the spacing is applied  <br> License requirements : None */
                public: bool IsSpacingEnabled
                (
                );
                /**Sets  a value indicating whether the spacing is applied  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSpacingEnabled
                (
                    bool isSpacingEnabled /** isspacingenabled */ 
                );
                /**Returns  a value indicating the space between sections  <br> License requirements : None */
                public: double Spacing
                (
                );
                /**Sets  a value indicating the space between sections  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetSpacing
                (
                    double spacing /** spacing */ 
                );
                /**Returns  the anchor position  <br> License requirements : None */
                public: NXOpen::Point3d AnchorOrigin
                (
                );
                /**Sets  the anchor position  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetAnchorOrigin
                (
                    const NXOpen::Point3d & anchorOrigin /** anchororigin */ 
                );
                /**Returns  the anchor X axis  <br> License requirements : None */
                public: NXOpen::Vector3d AnchorXAxis
                (
                );
                /**Sets  the anchor X axis  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetAnchorXAxis
                (
                    const NXOpen::Vector3d & anchorXAxis /** anchorxaxis */ 
                );
                /**Returns  the anchor Y axis  <br> License requirements : None */
                public: NXOpen::Vector3d AnchorYAxis
                (
                );
                /**Sets  the anchor Y axis  <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetAnchorYAxis
                (
                    const NXOpen::Vector3d & anchorYAxis /** anchoryaxis */ 
                );
                /** Returns true if the inputs to the component are sufficient for 
                            commit to be called.  For example, if the component requires
                            you to set some property, this method will return false if
                            you haven't set it.  This method throws a not-yet-implemented
                            NXException for some components.
                         @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
                public: virtual bool Validate
                (
                );
            };
        }
    }
}
#undef EXPORTLIBRARY
#endif
