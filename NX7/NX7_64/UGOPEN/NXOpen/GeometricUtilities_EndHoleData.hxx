#ifndef NXOpen_GEOMETRICUTILITIES_ENDHOLEDATA_HXX_INCLUDED
#define NXOpen_GEOMETRICUTILITIES_ENDHOLEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricUtilities_EndHoleData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/GeometricUtilities_BooleanOperation.hxx>
#include <NXOpen/GeometricUtilities_EndHoleData.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace GeometricUtilities
    {
        class EndHoleData;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class BooleanOperation;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class SelectFace;
    namespace GeometricUtilities
    {
        class _EndHoleDataBuilder;
        /** Represents a @link GeometricUtilities::EndHoleData GeometricUtilities::EndHoleData@endlink  */
        class NXOPENCPPEXPORT EndHoleData : public TaggedObject, public virtual GeometricUtilities::IComponentBuilder
        {
            /** Represents hole form options. */
            public: enum FormOptions
            {
                FormOptionsScrewClearance/** Screw clearance */,
                FormOptionsThreaded/** Threaded hole */,
                FormOptionsThrough/** Through hole - This option should not be used in NX6 and later versions. Instead of this
                                                                                 screw_clearance option should be used */
            };

            /** Represents thread length options. */
            public: enum ThreadLengthOptions
            {
                ThreadLengthOptionsDiameterx1/** 1   * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx15/** 1.5 * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx20/** 2   * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx25/** 2.5 * (tap drill diameter) */,
                ThreadLengthOptionsDiameterx30/** 3   * (tap drill diameter) */,
                ThreadLengthOptionsStandard/** Length is standard */,
                ThreadLengthOptionsCustom/** Length is custom */,
                ThreadLengthOptionsFull/** Length is full hole depth */
            };

            /** Represents thread rotation options. */
            public: enum ThreadRotationOptions
            {
                ThreadRotationOptionsRight/** Right rotation */,
                ThreadRotationOptionsLeft/** Left rotation */
            };

            /** Represents hole depth limit options for threaded hole in end plate of hole series. */
            public: enum HoleDepthLimitOptions
            {
                HoleDepthLimitOptionsValue/** Value limit options */,
                HoleDepthLimitOptionsUntilSelected/** Until selected limit options */,
                HoleDepthLimitOptionsUntilNext/** Until next limit options */,
                HoleDepthLimitOptionsThroughBody/** Through body limit options */
            };

            private: friend class  _EndHoleDataBuilder;
            protected: EndHoleData();
            /**Returns  the match dim of start hole  <br> License requirements : None */
            public: bool MatchDimOfStartHole
            (
            );
            /**Sets  the match dim of start hole  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMatchDimOfStartHole
            (
                bool matchDimOfStartHole /** matchdimofstarthole */ 
            );
            /**Returns  the form option  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData::FormOptions FormOption
            (
            );
            /**Sets  the form option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFormOption
            (
                NXOpen::GeometricUtilities::EndHoleData::FormOptions formOption /** formoption */ 
            );
            /**Returns  the thread size  <br> License requirements : None */
            public: NXString ThreadSize
            (
            );
            /**Sets  the thread size  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadSize
            (
                const NXString & threadSize /** threadsize */ 
            );
            /**Returns  the tap drill diameter  <br> License requirements : None */
            public: NXOpen::Expression * TapDrillDiameter
            (
            );
            /**Returns  the thread length option  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData::ThreadLengthOptions ThreadLengthOption
            (
            );
            /**Sets  the thread length option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadLengthOption
            (
                NXOpen::GeometricUtilities::EndHoleData::ThreadLengthOptions threadLengthOption /** threadlengthoption */ 
            );
            /**Returns  the thread depth  <br> License requirements : None */
            public: NXOpen::Expression * ThreadDepth
            (
            );
            /**Returns  the thread rotation  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData::ThreadRotationOptions ThreadRotation
            (
            );
            /**Sets  the thread rotation  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadRotation
            (
                NXOpen::GeometricUtilities::EndHoleData::ThreadRotationOptions threadRotation /** threadrotation */ 
            );
            /**Returns  the fit option  <br> License requirements : None */
            public: NXString FitOption
            (
            );
            /**Sets  the fit option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFitOption
            (
                const NXString & fitOption /** fitoption */ 
            );
            /**Returns  the radial engage option  <br> License requirements : None */
            public: NXString RadialEngageOption
            (
            );
            /**Sets  the radial engage option  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadialEngageOption
            (
                const NXString & radialEngageOption /** radialengageoption */ 
            );
            /**Returns  the hole diameter  <br> License requirements : None */
            public: NXOpen::Expression * HoleDiameter
            (
            );
            /**Returns  the hole depth limit  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::EndHoleData::HoleDepthLimitOptions HoleDepthLimitOption
            (
            );
            /**Sets  the hole depth limit  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleDepthLimitOption
            (
                NXOpen::GeometricUtilities::EndHoleData::HoleDepthLimitOptions holeDepthLimitOption /** holedepthlimitoption */ 
            );
            /**Returns  the until selected target - this is applicable for general hole and threaded hole type  <br> License requirements : None */
            public: NXOpen::SelectFace * UntilSelectedTarget
            (
            );
            /**Returns  the hole depth  <br> License requirements : None */
            public: NXOpen::Expression * HoleDepth
            (
            );
            /**Returns  the tip angle  <br> License requirements : None */
            public: NXOpen::Expression * TipAngle
            (
            );
            /**Returns  the screw clearance start chamfer enabled  <br> License requirements : None */
            public: bool ScrewClearanceStartChamferEnabled
            (
            );
            /**Sets  the screw clearance start chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewClearanceStartChamferEnabled
            (
                bool screwClearenceStartChamferEnabled /** screwclearencestartchamferenabled */ 
            );
            /**Returns  the screw clearance start chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceStartChamferOffset
            (
            );
            /**Returns  the screw clearance start chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceStartChamferAngle
            (
            );
            /**Returns  the threaded start chamfer enabled  <br> License requirements : None */
            public: bool ThreadedStartChamferEnabled
            (
            );
            /**Sets  the threaded start chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadedStartChamferEnabled
            (
                bool threadedStartChamferEnabled /** threadedstartchamferenabled */ 
            );
            /**Returns  the threaded start chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedStartChamferDiameter
            (
            );
            /**Returns  the threaded start chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedStartChamferAngle
            (
            );
            /**Returns  the screw clearance end chamfer enabled  <br> License requirements : None */
            public: bool ScrewClearanceEndChamferEnabled
            (
            );
            /**Sets  the screw clearance end chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetScrewClearanceEndChamferEnabled
            (
                bool screwClearanceEndChamferEnabled /** screwclearanceendchamferenabled */ 
            );
            /**Returns  the screw clearance end chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceEndChamferOffset
            (
            );
            /**Returns  the screw clearance end chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * ScrewClearanceEndChamferAngle
            (
            );
            /**Returns  the threaded end chamfer enabled  <br> License requirements : None */
            public: bool ThreadedEndChamferEnabled
            (
            );
            /**Sets  the threaded end chamfer enabled  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadedEndChamferEnabled
            (
                bool threadedEndChamferEnabled /** threadedendchamferenabled */ 
            );
            /**Returns  the threaded end chamfer offset  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedEndChamferDiameter
            (
            );
            /**Returns  the threaded end chamfer angle  <br> License requirements : None */
            public: NXOpen::Expression * ThreadedEndChamferAngle
            (
            );
            /**Returns  the boolean operation  <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BooleanOperation * BooleanOperation
            (
            );
            /** Returns true if the inputs to the component are sufficient for 
                        commit to be called.  For example, if the component requires
                        you to set some property, this method will return false if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful  <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: virtual bool Validate
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
