#ifndef NXOpen_PREFERENCES_SESSIONSKETCH_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONSKETCH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionSketch.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_SketchPreferences.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace Preferences
    {
        class SessionSketch;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        /** Represents the set of sketch preferences applicable to entire session  <br> To obtain an instance of this class, refer to @link Preferences::SessionPreferences Preferences::SessionPreferences@endlink  <br> */
        class NXOPENCPPEXPORT SessionSketch
        {
            /** Describes the available sketch origin types. */
            public: enum OriginType
            {
                OriginTypeInferFromPlaneSelection/** Sketch origin is inferred from placement face */,
                OriginTypeProjectWorkPartOrigin/** Sketch origin is the projection of the work part origin */
            };

            /** Describes the available sketch background types. */
            public: enum BackgroundType
            {
                BackgroundTypeInherit/** Sketch background color is inherited from the parent application */,
                BackgroundTypePlain/** Sketch background color is forced to the plain background color */
            };

            private: NXOpen::Preferences::SessionPreferences* m_owner;
            public: explicit SessionSketch(NXOpen::Preferences::SessionPreferences *owner): m_owner(owner)
            {
            }
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            /**Returns  the snap angle.  This is snap angle tolerance for vertical, horizontal, parallel, and perpendicular 
                lines.The default value is 3 and maximum value is 20  <br> License requirements : None */
            public: double SnapAngle
            (
            );
            /**Sets  the snap angle.  This is snap angle tolerance for vertical, horizontal, parallel, and perpendicular 
                lines.The default value is 3 and maximum value is 20  <br> License requirements : None */
            public: void SetSnapAngle
            (
                double snapAngle /** snap angle */ 
            );
            /**Returns  the change view orientation flag.  If true, when a sketch is activated, the view will be changed to 
                align with the sketch  <br> License requirements : None */
            public: bool ChangeViewOrientation
            (
            );
            /**Sets  the change view orientation flag.  If true, when a sketch is activated, the view will be changed to 
                align with the sketch  <br> License requirements : None */
            public: void SetChangeViewOrientation
            (
                bool changeViewOrientation /** change view orientation */ 
            );
            /**Returns  the maintain blank status flag.  If true, when a sketch is activated, previously blanked objects will not be visible  <br> License requirements : None */
            public: bool MaintainBlankStatus
            (
            );
            /**Sets  the maintain blank status flag.  If true, when a sketch is activated, previously blanked objects will not be visible  <br> License requirements : None */
            public: void SetMaintainBlankStatus
            (
                bool keepBlank /** keep blank */ 
            );
            /**Returns  the maintain layer status flag. Controls whether the work layer remains the same or returns to its previous 
                value when a sketch is deactivated.  <br> License requirements : None */
            public: bool MaintainLayerStatus
            (
            );
            /**Sets  the maintain layer status flag. Controls whether the work layer remains the same or returns to its previous 
                value when a sketch is deactivated.  <br> License requirements : None */
            public: void SetMaintainLayerStatus
            (
                bool maintainLayerStatus /** maintain layer status */ 
            );
            /**Returns  the displays DOF arrows flag. Controls the display of the degree of freedom arrows. When this flag is set as
                False, the display of the arrows is turned OFF.  <br> License requirements : None */
            public: bool DisplayDOFArrows
            (
            );
            /**Sets  the displays DOF arrows flag. Controls the display of the degree of freedom arrows. When this flag is set as
                False, the display of the arrows is turned OFF.  <br> License requirements : None */
            public: void SetDisplayDOFArrows
            (
                bool displayDOFArrows /** display d o f arrows */ 
            );
            /**Returns  the dynamic constraints display flag. If it is True, constraint symbols do not display if the associated 
                geometry is very small.  <br> License requirements : None */
            public: bool DynamicConstraintDisplay
            (
            );
            /**Sets  the dynamic constraints display flag. If it is True, constraint symbols do not display if the associated 
                geometry is very small.  <br> License requirements : None */
            public: void SetDynamicConstraintDisplay
            (
                bool dynamicConstraintDisplay /** dynamic constraint display */ 
            );
            /**Returns  the text size fixed flag. If it is True, text size adjusts opposite of zoom scale so that dimensions appear a constant size.  <br> License requirements : None */
            public: bool TextSizeFixed
            (
            );
            /**Sets  the text size fixed flag. If it is True, text size adjusts opposite of zoom scale so that dimensions appear a constant size.  <br> License requirements : None */
            public: void SetTextSizeFixed
            (
                bool textSizeFixed /** text size fixed */ 
            );
            /**Returns  the dimension text size when the text size fixed flag is set.  <br> License requirements : None */
            public: double FixedTextSize
            (
            );
            /**Sets  the dimension text size when the text size fixed flag is set.  <br> License requirements : None */
            public: void SetFixedTextSize
            (
                double fixedTextSize /** fixed text size */ 
            );
            /**Returns  the retain dimensions flag. If it is True, sketch dimensions continue to display after a sketch is deactivated.  <br> License requirements : None */
            public: bool RetainDimensions
            (
            );
            /**Sets  the retain dimensions flag. If it is True, sketch dimensions continue to display after a sketch is deactivated.  <br> License requirements : None */
            public: void SetRetainDimensions
            (
                bool retainDimensions /** retain dimensions */ 
            );
            /**Returns  the origin option  <br> License requirements : None */
            public: NXOpen::Preferences::SessionSketch::OriginType OriginOption
            (
            );
            /**Sets  the origin option  <br> License requirements : None */
            public: void SetOriginOption
            (
                NXOpen::Preferences::SessionSketch::OriginType originType /** origin type */ 
            );
            /**Returns  the background option  <br> License requirements : None */
            public: NXOpen::Preferences::SessionSketch::BackgroundType BackgroundOption
            (
            );
            /**Sets  the background option  <br> License requirements : None */
            public: void SetBackgroundOption
            (
                NXOpen::Preferences::SessionSketch::BackgroundType backgroundType /** background type */ 
            );
            /**Returns  the default sketch name prefix   <br> License requirements : None */
            public: NXString DefaultSketchNamePrefix
            (
            );
            /**Sets  the default sketch name prefix   <br> License requirements : None */
            public: void SetDefaultSketchNamePrefix
            (
                const NXString & defaultSketchNamePrefix /** default sketch name prefix */ 
            );
            /**Returns  the default vertex name prefix  <br> License requirements : None */
            public: NXString DefaultVertexNamePrefix
            (
            );
            /**Sets  the default vertex name prefix  <br> License requirements : None */
            public: void SetDefaultVertexNamePrefix
            (
                const NXString & defaultVertexNamePrefix /** default vertex name prefix */ 
            );
            /**Returns  the default line name prefix  <br> License requirements : None */
            public: NXString DefaultLineNamePrefix
            (
            );
            /**Sets  the default line name prefix  <br> License requirements : None */
            public: void SetDefaultLineNamePrefix
            (
                const NXString & defaultLineNamePrefix /** default line name prefix */ 
            );
            /**Returns  the default arc name prefix  <br> License requirements : None */
            public: NXString DefaultArcNamePrefix
            (
            );
            /**Sets  the default arc name prefix  <br> License requirements : None */
            public: void SetDefaultArcNamePrefix
            (
                const NXString & defaultArcNamePrefix /** default arc name prefix */ 
            );
            /**Returns  the default conic name prefix  <br> License requirements : None */
            public: NXString DefaultConicNamePrefix
            (
            );
            /**Sets  the default conic name prefix  <br> License requirements : None */
            public: void SetDefaultConicNamePrefix
            (
                const NXString & defaultConicNamePrefix /** default conic name prefix */ 
            );
            /**Returns  the default spline name prefix  <br> License requirements : None */
            public: NXString DefaultSplineNamePrefix
            (
            );
            /**Sets  the default spline name prefix  <br> License requirements : None */
            public: void SetDefaultSplineNamePrefix
            (
                const NXString & defaultSplineNamePrefix /** default spline name prefix */ 
            );
            /**Returns  the decimal places
                    NX6 - The decimal places preference has been removed from sketches. Each sketch dimension's
                    decimal places will be controlled via its own annotation preferences.
                    get function -  will always return the annotation preferences- dimension- decimal places.  
                    set function -  will do nothing.
                    The annotation preference can be asked or set by calling the following functions.
                       JA_ANN_GBL_ask_dimension_preferences
                       JA_ANN_GBL_set_dimension_preferences 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: int DecimalPlaces
            (
            );
            /**Sets  the decimal places
                    NX6 - The decimal places preference has been removed from sketches. Each sketch dimension's
                    decimal places will be controlled via its own annotation preferences.
                    get function -  will always return the annotation preferences- dimension- decimal places.  
                    set function -  will do nothing.
                    The annotation preference can be asked or set by calling the following functions.
                       JA_ANN_GBL_ask_dimension_preferences
                       JA_ANN_GBL_set_dimension_preferences 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetDecimalPlaces
            (
                int decimalPlaces /** decimal places */ 
            );
            /**Returns  the text height 
                    NX6 - The text height preference has been removed from sketches. Each sketch dimension's
                    text height  will be controlled via its own annotation preferences.
                    get function -  will always return the annotation preferences- letter prefs- dimension- text height.  
                    set function -  will do nothing.
                    The annotation preference can be asked or set by calling the following functions.
                       JA_ANN_GBL_ask_lettering_preferences
                       JA_ANN_GBL_set_lettering_preferences 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: double TextHeight
            (
            );
            /**Sets  the text height 
                    NX6 - The text height preference has been removed from sketches. Each sketch dimension's
                    text height  will be controlled via its own annotation preferences.
                    get function -  will always return the annotation preferences- letter prefs- dimension- text height.  
                    set function -  will do nothing.
                    The annotation preference can be asked or set by calling the following functions.
                       JA_ANN_GBL_ask_lettering_preferences
                       JA_ANN_GBL_set_lettering_preferences 
             @deprecated Deprecated in NX6 <br> 
             <br> License requirements : None */
            public: void SetTextHeight
            (
                double textHeight /** text height */ 
            );
            /**Returns  the dimension label  <br> License requirements : None */
            public: NXOpen::Preferences::SketchPreferences::DimensionLabelType DimensionLabel
            (
            );
            /**Sets  the dimension label  <br> License requirements : None */
            public: void SetDimensionLabel
            (
                NXOpen::Preferences::SketchPreferences::DimensionLabelType dimensionLabel /** dimension label */ 
            );
            /**Returns  the delay evaluation preference.  This preference is used in the UI to indicate 
                whether the sketch should be evaluated when a constraint is
                added to the sketch.  <br> License requirements : None */
            public: bool DelayEvaluation
            (
            );
            /**Sets  the delay evaluation preference.  This preference is used in the UI to indicate 
                whether the sketch should be evaluated when a constraint is
                added to the sketch.  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetDelayEvaluation
            (
                bool delayEvaluation /** delay evaluation */ 
            );
            /**Returns  the display object color  <br> License requirements : None */
            public: bool DisplayObjectColor
            (
            );
            /**Sets  the display object color  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetDisplayObjectColor
            (
                bool displayObjColor /** display obj color */ 
            );
            /**Returns  the create inferred constraints  <br> License requirements : None */
            public: bool CreateInferredConstraints
            (
            );
            /**Sets  the create inferred constraints  <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
            public: void SetCreateInferredConstraints
            (
                bool createInferredConstraints /** create inferred constraints */ 
            );
            public: virtual void initialize();
        };
    }
}
#undef EXPORTLIBRARY
#endif
