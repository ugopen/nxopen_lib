#ifndef NXOpen_VISUALREPORTING_RULE_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_RULE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_Rule.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/VisualReporting_Condition.hxx>
#include <NXOpen/VisualReporting_GroupLabel.hxx>
#include <NXOpen/VisualReporting_Property.hxx>
#include <NXOpen/VisualReporting_Rule.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>
namespace NXOpen
{
    namespace VisualReporting
    {
        class Rule;
    }
    class NXObject;
    namespace VisualReporting
    {
        class Condition;
    }
    namespace VisualReporting
    {
        class GroupLabel;
    }
    namespace VisualReporting
    {
        class Property;
    }
    namespace VisualReporting
    {
        class _RuleBuilder;
        /** A rule within a @link VisualReport VisualReport@endlink .
            */
        class NXOPENCPPEXPORT Rule : public NXObject
        {
            /** Represents the possible @link ClassifierType ClassifierType @endlink and @link SetClassifierType SetClassifierType @endlink  options.
                        for a rule.
                    */
            public: enum ClassifierOption
            {
                ClassifierOptionSimple/** Simple classifier type */,
                ClassifierOptionValue/** Value classifier type */,
                ClassifierOptionRange/** Range classifier type */
            };

            /** Represents the possible @link GroupingMethod GroupingMethod @endlink and @link SetGroupingMethod SetGroupingMethod @endlink  options.
                       for a Rule.
                    */
            public: enum GroupingMethodOption
            {
                GroupingMethodOptionManual/** Grouping is manual */,
                GroupingMethodOptionAutomatic/** Grouping is automatic */,
                GroupingMethodOptionSemiAutomatic/** Grouping is automatic but some @link GroupLabel GroupLabel@endlink s have been modified */
            };

            /** Represents the possible @link RangeMethod RangeMethod @endlink and @link SetRangeMethod SetRangeMethod @endlink  options.
                       for a Rule.
                    */
            public: enum RangeMethodOption
            {
                RangeMethodOptionNumber/** A numeric range will be used */,
                RangeMethodOptionPercentage/** A percentage range will be used */
            };

            private: friend class  _RuleBuilder;
            protected: Rule();
            /**Returns  the Reporting @link ClassifierOption ClassifierOption@endlink  for this rule
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Rule::ClassifierOption ClassifierType
            (
            );
            /**Returns  the Reporting @link Property Property@endlink  for this rule. If the
                        @link ReportingProperty ReportingProperty @endlink and @link SetReportingProperty SetReportingProperty @endlink  is set to NULL, then it
                        is deleted.
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Property * ReportingProperty
            (
            );
            /**Returns  the Reporting @link VisualReporting::Property::DatatypeOption VisualReporting::Property::DatatypeOption@endlink  for this rule.

                        The returned datatype will never be
                        @link VisualReporting::Property::DatatypeOptionUnknown VisualReporting::Property::DatatypeOptionUnknown@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Property::DatatypeOption ReportingDatatype
            (
            );
            /**Returns  the filter @link Condition Condition@endlink  from this rule. Setting this will delete
                        any existing @link FilterCondition FilterCondition @endlink and @link SetFilterCondition SetFilterCondition @endlink  and all of its children
                        (except it won't delete the replacement @link Condition Condition@endlink  being set
                        by this call).
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Condition * FilterCondition
            (
            );
            /**Returns  the @link GroupingMethodOption GroupingMethodOption@endlink  for this rule. If it uses manual grouping
                        then no @link GroupLabel GroupLabel@endlink s will be automatically generated, and they
                        should instead be added using
                        @link VisualReporting::VisualReportBuilder::CreateGroupLabel VisualReporting::VisualReportBuilder::CreateGroupLabel@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Rule::GroupingMethodOption GroupingMethod
            (
            );
            /**Returns  the type of range used for this rule if @link ClassifierType ClassifierType @endlink and @link SetClassifierType SetClassifierType @endlink 
                        is @link VisualReporting::Rule::ClassifierOptionRange VisualReporting::Rule::ClassifierOptionRange@endlink .
                     <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::Rule::RangeMethodOption RangeMethod
            (
            );
            /** Returns the @link GroupLabel GroupLabel@endlink s associated with this rule.
                     @return   <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::VisualReporting::GroupLabel *> GetGroupLabels
            (
            );
        };
    }
}
#undef EXPORTLIBRARY
#endif
