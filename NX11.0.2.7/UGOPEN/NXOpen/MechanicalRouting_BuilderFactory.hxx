#ifndef NXOpen_MECHANICALROUTING_BUILDERFACTORY_HXX_INCLUDED
#define NXOpen_MECHANICALROUTING_BUILDERFACTORY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MechanicalRouting_BuilderFactory.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_mechanicalrouting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MechanicalRouting
    {
        class BuilderFactory;
    }
    namespace MechanicalRouting
    {
        class RoutingManager;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace MechanicalRouting
    {
        class AssignCornerBuilder;
    }
    namespace MechanicalRouting
    {
        class ConnectBuilder;
    }
    namespace MechanicalRouting
    {
        class CreatePathBuilder;
    }
    namespace MechanicalRouting
    {
        class EditPointBuilder;
    }
    namespace MechanicalRouting
    {
        class InsulationBuilder;
    }
    namespace MechanicalRouting
    {
        class ManageInlineBehaviorBuilder;
    }
    namespace MechanicalRouting
    {
        class MergeBuilder;
    }
    namespace MechanicalRouting
    {
        class MovePathBuilder;
    }
    namespace MechanicalRouting
    {
        class PartPlacementBuilder;
    }
    namespace MechanicalRouting
    {
        class SplitBuilder;
    }
    namespace MechanicalRouting
    {
        class StockBuilder;
    }
    namespace MechanicalRouting
    {
        class TransformBlockBuilder;
    }
    class NXObject;
    class Part;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace MechanicalRouting
    {
        class BuilderFactoryImpl;
        /** Represents an @link NXOpen::MechanicalRouting::BuilderFactory NXOpen::MechanicalRouting::BuilderFactory@endlink  object.  Use this object 
                to create specific routing mechanical builders.
             <br> To obtain an instance of this class, refer to @link NXOpen::MechanicalRouting::RoutingManager  NXOpen::MechanicalRouting::RoutingManager @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MECHANICALROUTINGEXPORT  BuilderFactory
        {
            private: BuilderFactoryImpl * m_builderfactory_impl;
            private: NXOpen::MechanicalRouting::RoutingManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit BuilderFactory(NXOpen::MechanicalRouting::RoutingManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~BuilderFactory();
            /**  Create a @link NXOpen::MechanicalRouting::EditPointBuilder NXOpen::MechanicalRouting::EditPointBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::EditPointBuilder * CreateEditPointBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Creates a @link NXOpen::MechanicalRouting::PartPlacementBuilder NXOpen::MechanicalRouting::PartPlacementBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::PartPlacementBuilder * CreatePartPlacementBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Creates a @link NXOpen::MechanicalRouting::ManageInlineBehaviorBuilder NXOpen::MechanicalRouting::ManageInlineBehaviorBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::ManageInlineBehaviorBuilder * CreateManageInlineBehaviorBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Create a @link NXOpen::MechanicalRouting::MovePathBuilder NXOpen::MechanicalRouting::MovePathBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::MovePathBuilder * CreateMovePathBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Create a @link NXOpen::MechanicalRouting::CreatePathBuilder NXOpen::MechanicalRouting::CreatePathBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::CreatePathBuilder * CreateCreatePathBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Creates a @link NXOpen::MechanicalRouting::StockBuilder NXOpen::MechanicalRouting::StockBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::StockBuilder * CreateStockBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                const std::vector<NXOpen::NXObject *> & segmentsOrStocks /** Occurrences of Routing segments to assign
                                                                                                                    stock to or stock to be edited */
            );
            /**  Creates a @link NXOpen::MechanicalRouting::SplitBuilder NXOpen::MechanicalRouting::SplitBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::SplitBuilder * CreateSplitBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                const std::vector<NXOpen::Routing::ControlPoint *> & controlPoints /** selected Control Points for split stock components */
            );
            /**  Create a @link NXOpen::MechanicalRouting::TransformBlockBuilder NXOpen::MechanicalRouting::TransformBlockBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::TransformBlockBuilder * CreateTransformBlockBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Create a @link NXOpen::MechanicalRouting::InsulationBuilder NXOpen::MechanicalRouting::InsulationBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::MechanicalRouting::InsulationBuilder * CreateInsulationBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * insulationPartOccurrence /** insulationpartoccurrence */ 
            );
            /**  Creates a @link NXOpen::MechanicalRouting::AssignCornerBuilder NXOpen::MechanicalRouting::AssignCornerBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::AssignCornerBuilder * CreateAssignCornerBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Creates a @link NXOpen::MechanicalRouting::MergeBuilder NXOpen::MechanicalRouting::MergeBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::MergeBuilder * CreateMergeBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Creates a @link NXOpen::MechanicalRouting::ConnectBuilder NXOpen::MechanicalRouting::ConnectBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::ConnectBuilder * CreateConnectBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                const std::vector<NXOpen::Assemblies::Component *> & components /** selected Components for Connect Path */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
