#ifndef NXOpen_MOTION_PACKAGINGMEASUREBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_PACKAGINGMEASUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PackagingMeasureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_PackagingBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class PackagingMeasureBuilder;
    }
    class Direction;
    class DisplayableObject;
    class Expression;
    namespace Motion
    {
        class PackagingBuilder;
    }
    namespace Motion
    {
        class _PackagingMeasureBuilderBuilder;
        class PackagingMeasureBuilderImpl;
        /** This is the builder class to create or edit a Measure object. <br> To create a new instance of this class, use @link NXOpen::Motion::PackagingCollection::CreateMeasureBuilder  NXOpen::Motion::PackagingCollection::CreateMeasureBuilder @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  PackagingMeasureBuilder : public NXOpen::Motion::PackagingBuilder
        {
            /** Measure type */
            public: enum MeasureType
            {
                MeasureTypeMinimumDistance/** Measure minimum distance between objects. */,
                MeasureTypeAngle/** Measure angle between lines or linear edges. */
            };

            /** Measure condition */
            public: enum MeasureCondition
            {
                MeasureConditionLessThan/** Stop event defined by minimum measurement
                                                                                          less than threshold value. */,
                MeasureConditionGreaterThan/** Stop event defined by minimum measurement
                                                                                          greater than threshold value. */,
                MeasureConditionEqualTo/** Stop event defined by minimum measurement
                                                                                          equal to threshold (target) value. */
            };

             /** Represents geometry data. 
                The direction tag covers point and vector.
                The direction tag can be smart one, but point and vector cannot.
                It is recommened to use direction rather than point and vector */
            public:
            struct  GeometryData
            {
                public: /** Geometry */NXOpen::DisplayableObject * Geometry;
                public: /** Start point */NXOpen::Point3d Point;
                public: /** Initial vector */NXOpen::Vector3d Vector;
                public: /** Direction tag */NXOpen::Direction * Direction;
                public: GeometryData() :
                    Geometry(),
                    Point(),
                    Vector(),
                    Direction()
                {
                }
                /** Constructor for the GeometryData struct. */ 
                public: GeometryData(NXOpen::DisplayableObject * geometryInitial /** Geometry */, 
                        const NXOpen::Point3d &pointInitial /** Start point */, 
                        const NXOpen::Vector3d &vectorInitial /** Initial vector */, 
                        NXOpen::Direction * directionInitial /** Direction tag */) :
                    Geometry(geometryInitial),
                    Point(pointInitial),
                    Vector(vectorInitial),
                    Direction(directionInitial)
                {
                }
            };

            private: PackagingMeasureBuilderImpl * m_packagingmeasurebuilder_impl;
            private: friend class  _PackagingMeasureBuilderBuilder;
            protected: PackagingMeasureBuilder();
            public: ~PackagingMeasureBuilder();
            /** Returns the geometry list 2 of @link  NXOpen::Motion::PackagingMeasure   NXOpen::Motion::PackagingMeasure @endlink  object.
                    Measure can have one or two lists defined.  If the user
                    defines two lists, then measurements will be done between
                    each object in list 1 against each object in list 2.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXOpen::DisplayableObject *> GetList2
            (
            );
            /** Sets the geometry list 2. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetList2
            (
                const std::vector<NXOpen::DisplayableObject *> & list2 /** list2 */ 
            );
            /**Returns  the Measure type defined at @link  NXOpen::Motion::PackagingMeasureBuilder::MeasureType   NXOpen::Motion::PackagingMeasureBuilder::MeasureType @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PackagingMeasureBuilder::MeasureType MsType
            (
            );
            /**Sets  the Measure type defined at @link  NXOpen::Motion::PackagingMeasureBuilder::MeasureType   NXOpen::Motion::PackagingMeasureBuilder::MeasureType @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMsType
            (
                NXOpen::Motion::PackagingMeasureBuilder::MeasureType mType /** m type */ 
            );
            /**Returns  the measure condition defined at @link  NXOpen::Motion::PackagingMeasureBuilder::MeasureCondition   NXOpen::Motion::PackagingMeasureBuilder::MeasureCondition @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PackagingMeasureBuilder::MeasureCondition Condition
            (
            );
            /**Sets  the measure condition defined at @link  NXOpen::Motion::PackagingMeasureBuilder::MeasureCondition   NXOpen::Motion::PackagingMeasureBuilder::MeasureCondition @endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCondition
            (
                NXOpen::Motion::PackagingMeasureBuilder::MeasureCondition condition /** condition */ 
            );
            /**Returns  the Measure threshold value 
             <br>  @deprecated Deprecated in NX8.0.0.  Obtain the expression using @link NXOpen::Motion::PackagingMeasureBuilder::ThresholdExpression NXOpen::Motion::PackagingMeasureBuilder::ThresholdExpression@endlink  or @link NXOpen::Motion::PackagingMeasureBuilder::ThresholdAngleExpression NXOpen::Motion::PackagingMeasureBuilder::ThresholdAngleExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Obtain the expression using NXOpen::Motion::PackagingMeasureBuilder::ThresholdExpression or NXOpen::Motion::PackagingMeasureBuilder::ThresholdAngleExpression to query or edit it.") double Threshold
            (
            );
            /**Sets  the Measure threshold value 
             <br>  @deprecated Deprecated in NX8.0.0.  Obtain the expression using @link NXOpen::Motion::PackagingMeasureBuilder::ThresholdExpression NXOpen::Motion::PackagingMeasureBuilder::ThresholdExpression@endlink  or @link NXOpen::Motion::PackagingMeasureBuilder::ThresholdAngleExpression NXOpen::Motion::PackagingMeasureBuilder::ThresholdAngleExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Obtain the expression using NXOpen::Motion::PackagingMeasureBuilder::ThresholdExpression or NXOpen::Motion::PackagingMeasureBuilder::ThresholdAngleExpression to query or edit it.") void SetThreshold
            (
                double threshold /** threshold */ 
            );
            /**Returns  the Measure tolerance value 
             <br>  @deprecated Deprecated in NX8.0.0.  Obtain the expression using @link NXOpen::Motion::PackagingMeasureBuilder::ToleranceExpression NXOpen::Motion::PackagingMeasureBuilder::ToleranceExpression@endlink  or @link NXOpen::Motion::PackagingMeasureBuilder::ToleranceAngleExpression NXOpen::Motion::PackagingMeasureBuilder::ToleranceAngleExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Obtain the expression using NXOpen::Motion::PackagingMeasureBuilder::ToleranceExpression or NXOpen::Motion::PackagingMeasureBuilder::ToleranceAngleExpression to query or edit it.") double Tolerance
            (
            );
            /**Sets  the Measure tolerance value 
             <br>  @deprecated Deprecated in NX8.0.0.  Obtain the expression using @link NXOpen::Motion::PackagingMeasureBuilder::ToleranceExpression NXOpen::Motion::PackagingMeasureBuilder::ToleranceExpression@endlink  or @link NXOpen::Motion::PackagingMeasureBuilder::ToleranceAngleExpression NXOpen::Motion::PackagingMeasureBuilder::ToleranceAngleExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public:  NX_DEPRECATED("Deprecated in NX8.0.0.  Obtain the expression using NXOpen::Motion::PackagingMeasureBuilder::ToleranceExpression or NXOpen::Motion::PackagingMeasureBuilder::ToleranceAngleExpression to query or edit it.") void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the Stop_On_Event flag of @link  NXOpen::Motion::PackagingMeasure   NXOpen::Motion::PackagingMeasure @endlink  object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool StopOnEvent
            (
            );
            /**Sets  the Stop_On_Event flag of @link  NXOpen::Motion::PackagingMeasure   NXOpen::Motion::PackagingMeasure @endlink  object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStopOnEvent
            (
                bool stopOnEvent /** stop on event */ 
            );
            /** Gets the source geometry data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void GetSourceList
            (
                std::vector<NXOpen::Motion::PackagingMeasureBuilder::GeometryData> & sourceGeometryData /** Source geometry data */
            );
            /** Sets the source geometry data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSourceList
            (
                const std::vector<NXOpen::Motion::PackagingMeasureBuilder::GeometryData> & sourceGeometryData /** Source geometry data */
            );
            /** Gets the target geometry data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void GetTargetList
            (
                std::vector<NXOpen::Motion::PackagingMeasureBuilder::GeometryData> & targetGeometryData /** Target geometry data */
            );
            /** Sets the target geometry data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTargetList
            (
                const std::vector<NXOpen::Motion::PackagingMeasureBuilder::GeometryData> & targetGeometryData /** Target geometry data */
            );
            /**Returns  the Measure threshold expression value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ThresholdExpression
            (
            );
            /**Returns  the Measure angular threshold expression value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ThresholdAngleExpression
            (
            );
            /**Returns  the Measure tolerance expression value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ToleranceExpression
            (
            );
            /**Returns  the Measure angular tolerance expression value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ToleranceAngleExpression
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
