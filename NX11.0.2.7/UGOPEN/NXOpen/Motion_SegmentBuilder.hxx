#ifndef NXOpen_MOTION_SEGMENTBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_SEGMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_SegmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_SegmentBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class SegmentBuilder;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Motion
    {
        class MotionFunction;
    }
    namespace Motion
    {
        class _SegmentBuilderBuilder;
        class SegmentBuilderImpl;
        /**
            Represents a @link NXOpen::Motion::SegmentBuilder NXOpen::Motion::SegmentBuilder@endlink ,
            only creation is supported
             <br> To create a new instance of this class, use @link NXOpen::Motion::RoadBuilder::CreateSegmentBuilder  NXOpen::Motion::RoadBuilder::CreateSegmentBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  SegmentBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** type attribute of the segment */
            public: enum TypeChoices
            {
                TypeChoicesStraight/** Straight */,
                TypeChoicesConstantRadius/** Constant Radius */,
                TypeChoicesLaneChange/** Lane Change */,
                TypeChoicesSlalom/** Slalom */,
                TypeChoicesUserDefined/** User Defined */
            };

            /** data type attribute of the straight data */
            public: enum StraightTransitionTypeChoices
            {
                StraightTransitionTypeChoicesLinear/** Linear */,
                StraightTransitionTypeChoicesCubic/** Cubic */
            };

            private: SegmentBuilderImpl * m_segmentbuilder_impl;
            private: friend class  _SegmentBuilderBuilder;
            protected: SegmentBuilder();
            public: ~SegmentBuilder();
            /**Returns  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the segment type of a road segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SegmentBuilder::TypeChoices SegmentType
            (
            );
            /**Sets  the segment type of a road segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSegmentType
            (
                NXOpen::Motion::SegmentBuilder::TypeChoices segmentType /** segmenttype */ 
            );
            /**Returns  the length of a straight segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Length
            (
            );
            /**Returns  the elevation change of a straight segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * StraightElevationChange
            (
            );
            /**Returns  the transition type of a straight segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SegmentBuilder::StraightTransitionTypeChoices TransitionType
            (
            );
            /**Sets  the transition type of a straight segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTransitionType
            (
                NXOpen::Motion::SegmentBuilder::StraightTransitionTypeChoices segmentType /** segmenttype */ 
            );
            /**Returns  the radius of a constant radius segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Radius
            (
            );
            /**Returns  the elevation change of a constant radius segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ConstantRadiusElevationChange
            (
            );
            /**Returns  the angle of a constant radius segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the bank angle of a constant radius segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ConstantRadiusBankAngle
            (
            );
            /**Returns  the forward length of a lane change segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * LaneChangeForwardLength
            (
            );
            /**Returns  the lateral shift length of a lane change segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * LateralShiftLength
            (
            );
            /**Returns  the elevation change of a lane change segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * LaneChangeElevationChange
            (
            );
            /**Returns  the forward length of a slalom segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * SlalomForwardLength
            (
            );
            /**Returns  the lateral amplitude of a slalom segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * LateralAmplitude
            (
            );
            /**Returns  the elevation change of a slalom segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * SlalomElevationChange
            (
            );
            /**Returns  the number of pylons of a slalom segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * NumberOfPylons
            (
            );
            /**Returns  the y spline curve of a user defined segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionFunction * YCurve
            (
            );
            /**Sets  the y spline curve of a user defined segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetYCurve
            (
                NXOpen::Motion::MotionFunction * spline /** spline */ 
            );
            /**Returns  the z spline curve of a user defined segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionFunction * ZCurve
            (
            );
            /**Sets  the z spline curve of a user defined segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetZCurve
            (
                NXOpen::Motion::MotionFunction * spline /** spline */ 
            );
            /**Returns  the bank angle spline curve of a user defined segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionFunction * BankAngleCurve
            (
            );
            /**Sets  the bank angle spline curve of a user defined segment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBankAngleCurve
            (
                NXOpen::Motion::MotionFunction * spline /** spline */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
