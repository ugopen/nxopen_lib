#ifndef NXOpen_CAE_XYPLOT_PLOT_HXX_INCLUDED
#define NXOpen_CAE_XYPLOT_PLOT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Xyplot_Plot.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Xyplot_BasicModel.hxx>
#include <NXOpen/CAE_Xyplot_Graph.hxx>
#include <NXOpen/CAE_Xyplot_NoteModel.hxx>
#include <NXOpen/CAE_Xyplot_Plot.hxx>
#include <NXOpen/CAE_Xyplot_PlotGraphTemplate.hxx>
#include <NXOpen/CAE_Xyplot_IDisplayableModel.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Xyplot
        {
            class Plot;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class BasicModel;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class Graph;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class IDisplayableModel;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class NoteModel;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class PlotGraphTemplate;
        }
    }
    class NXObject;
    class TaggedObject;
    namespace CAE
    {
        namespace Xyplot
        {
            class _PlotBuilder;
            class PlotImpl;
            /** Manages the plot template  <br> Not support KF.  <br> 
             <br>  Created in NX7.5.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Plot : public NXOpen::NXObject, public virtual NXOpen::CAE::Xyplot::IDisplayableModel
            {
                private: PlotImpl * m_plot_impl;
                private: friend class  _PlotBuilder;
                protected: Plot();
                public: ~Plot();
                /** Returns the count of plotted records on the plot graph.  @return  Record count 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetRecordCount
                (
                );
                /** Saves plotted records on a graph to an afu file.
                               The record index is between 0 and the value returned from
                               @link NXOpen::CAE::Xyplot::Plot::GetRecordCount NXOpen::CAE::Xyplot::Plot::GetRecordCount@endlink . 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: void SaveRecords
                (
                    const std::vector<int> & recordIndexes /** The index of records to be saved */,
                    std::vector<NXString> & recordNames /** The output record names */,
                    const NXString & outputFileName /** The destination file with full file name.
                                                                                            The file suffix must be ".afu". */,
                    bool reportError /** reporterror */ 
                );
                /** Saves plotted records on a graph to an afu file.
                               The record index is between 0 and the value returned from
                               @link NXOpen::CAE::Xyplot::Plot::GetRecordCount NXOpen::CAE::Xyplot::Plot::GetRecordCount@endlink . 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                void SaveRecords
                (
                    const std::vector<int> & recordIndexes /** The index of records to be saved */,
                    std::vector<NXString> & recordNames /** The output record names */,
                    const char * outputFileName /** The destination file with full file name.
                                                                                            The file suffix must be ".afu". */,
                    bool reportError /** reporterror */ 
                );
                /** Gets the window device and view index of the plot graph.  @return  the device of window 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: int GetDeviceAndViewIndex
                (
                    int* viewIndex /** the index of view */
                );
                /** Gets all graphs on the plot. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: void GetGraphs
                (
                    std::vector<NXOpen::CAE::Xyplot::Graph *> & graphs /** Graph objects */
                );
                /**Returns  the sub-graph count in a stacked plot. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: int SubGraphCountInStack
                (
                );
                /**Returns  the plot template 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: NXOpen::CAE::Xyplot::PlotGraphTemplate * PlotTemplate
                (
                );
                /** Update axis limits for an overlaying plot if current displayed axis limits in plot do not fit for all records. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: void FitAxisLimit
                (
                );
                /** Saves plotted records on a plot graph to a CSV file. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: void SaveRecordsToCsv
                (
                    const std::vector<int> & recordIndex /** the indexes of records to be saved */,
                    std::vector<NXString> & recordNames /** recordnames */ ,
                    const NXString & csvFileName /** the destination CSV file name */,
                    bool isWriteHeader /** iswriteheader */ 
                );
                /** Saves plotted records on a plot graph to a CSV file. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                void SaveRecordsToCsv
                (
                    const std::vector<int> & recordIndex /** the indexes of records to be saved */,
                    std::vector<NXString> & recordNames /** recordnames */ ,
                    const char * csvFileName /** the destination CSV file name */,
                    bool isWriteHeader /** iswriteheader */ 
                );
                /** Creates a note on the plot  @return  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: NXOpen::CAE::Xyplot::NoteModel * CreateNote
                (
                    std::vector<NXString> & lines /** lines */ ,
                    const NXOpen::Point2d & textPosition /** textposition */ 
                );
                /** Gets all notes on the plot  @return  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: std::vector<NXOpen::CAE::Xyplot::NoteModel *> GetNotes
                (
                );
                /** Gets the titles on the plot.  @return  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: std::vector<NXOpen::CAE::Xyplot::BasicModel *> GetTitles
                (
                );
                /** Gets the bounding box of the plot view. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: void GetViewBoundingBox
                (
                    NXOpen::Point3d* leftBottom /** leftbottom */ ,
                    NXOpen::Point3d* rightTop /** righttop */ 
                );
                /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given identifier as recorded in a journal. 
                            An object may not return the same value as its JournalIdentifier in different versions of 
                            the software. However newer versions of the software should find the same object when 
                            FindObject is passed older versions of its journal identifier. In general, this method 
                            should not be used in handwritten code and exists to support record and playback of journals.

                            An exception will be thrown if no object can be found with the given journal identifier.  @return  
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::TaggedObject * Find
                (
                    const NXString & journalIdentifier /** Journal identifier of the object */
                );
                /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given identifier as recorded in a journal. 
                            An object may not return the same value as its JournalIdentifier in different versions of 
                            the software. However newer versions of the software should find the same object when 
                            FindObject is passed older versions of its journal identifier. In general, this method 
                            should not be used in handwritten code and exists to support record and playback of journals.

                            An exception will be thrown if no object can be found with the given journal identifier.  @return  
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::TaggedObject * Find
                (
                    const char * journalIdentifier /** Journal identifier of the object */
                );
                /** Updates model display 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_ftk ("NX Advanced Graphing") */
                public: virtual void UpdateDisplay
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
