#ifndef NXOpen_SPREADSHEETMANAGER_HXX_INCLUDED
#define NXOpen_SPREADSHEETMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SpreadsheetManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Spreadsheet.hxx>
#include <NXOpen/SpreadsheetCellData.hxx>
#include <NXOpen/SpreadsheetExternal.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SpreadsheetManager;
    class Session;
    class Spreadsheet;
    class SpreadsheetCellData;
    class SpreadsheetExternal;
    class SpreadsheetManagerImpl;
    /** Represents a class for interacting with spreadsheets. 
    There are different types of methods to use the APIs from this class.

    For interacting with the spreadsheet associated with a part file, use @link Spreadsheet Spreadsheet@endlink  object returned by @link NXOpen::SpreadsheetManager::Open  NXOpen::SpreadsheetManager::Open @endlink 
    For interacting with external spreadsheet, use @link Spreadsheet Spreadsheet@endlink  object returned by @link NXOpen::SpreadsheetManager::OpenFile  NXOpen::SpreadsheetManager::OpenFile @endlink .  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
     <br>  Usable only on Windows <br> 
     <br>  Created in NX11.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  SpreadsheetManager
    {
        /** Sheet types to open spreadsheet. 
         <br>  Created in NX11.0.0.  <br>  
        */
        public: enum OpenMode
        {
            OpenModeRead/** read mode */,
            OpenModeWrite/** write mode */
        };

        /** Modes of lookup in the table. 
         <br>  Created in NX11.0.0.  <br>  
        */
        public: enum LookupMode
        {
            LookupModeExact/** Requires an exact match */,
            LookupModeHigher/** Returns the higher cell */,
            LookupModeLower/** Returns the lower cell */,
            LookupModeClosest/** Returns the closest cell */
        };

        /** Sheet types to open spreadsheet. 
         <br>  Created in NX11.0.0.  <br>  
        */
        public: enum Sheettype
        {
            SheettypeGateway/** Specifies Gateway sheet type */,
            SheettypeModeling/** Specifies Modeling sheet type */,
            SheettypePartfamily/** specifies Partfamily sheet type */
        };

        private: SpreadsheetManagerImpl * m_spreadsheetmanager_impl;
        private: NXOpen::Session* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit SpreadsheetManager(NXOpen::Session *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~SpreadsheetManager();
        /** Reads value in a given cell, from a given spreadsheet.
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database. @return  The numerical value in a spreadsheet cell. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SpreadsheetCellData * ReadCell
        (
            const NXString & filename /** File name with full path */,
            const NXString & cell /** Cell number can contain the worksheet along with the cell number
                                                    by separating the two fields with an exclamation mark.  For example:  Sheet1!A1*/
        );
        /** Reads value in a given cell, from a given spreadsheet.
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database. @return  The numerical value in a spreadsheet cell. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::SpreadsheetCellData * ReadCell
        (
            const char * filename /** File name with full path */,
            const char * cell /** Cell number can contain the worksheet along with the cell number
                                                    by separating the two fields with an exclamation mark.  For example:  Sheet1!A1*/
        );
        /** Reads value in a given cell, from a given spreadsheet.
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database. @return  The value in a spreadsheet cell as either a string or a number 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SpreadsheetCellData * ReadAny
        (
            const NXString & filename /** File name with full path */,
            const NXString & cell /** Cell number can contain the worksheet along with the cell number
                                                    by separating the two fields with an exclamation mark.  For example:  Sheet1!A1*/
        );
        /** Reads value in a given cell, from a given spreadsheet.
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database. @return  The value in a spreadsheet cell as either a string or a number 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::SpreadsheetCellData * ReadAny
        (
            const char * filename /** File name with full path */,
            const char * cell /** Cell number can contain the worksheet along with the cell number
                                                    by separating the two fields with an exclamation mark.  For example:  Sheet1!A1*/
        );
        /** Reads the value from a given spreadsheet using a horizontal table lookup.
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database.
            
            Note:
            The mode works when the target cell contains only numeric values and the mode is ignored when the target
            cell contains text  @return  The calculated value in a spreadsheet cell as per the horizontal lookup 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SpreadsheetCellData * HorizontalLookup
        (
            const NXString & file /** File name with full path */,
            const NXString & target /** Lookup target */,
            const NXString & range /** Table range */,
            int offset /** The offset to the data cell. */,
            NXOpen::SpreadsheetManager::LookupMode mode /** The mode of lookup in the table. */
        );
        /** Reads the value from a given spreadsheet using a horizontal table lookup.
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database.
            
            Note:
            The mode works when the target cell contains only numeric values and the mode is ignored when the target
            cell contains text  @return  The calculated value in a spreadsheet cell as per the horizontal lookup 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::SpreadsheetCellData * HorizontalLookup
        (
            const char * file /** File name with full path */,
            const char * target /** Lookup target */,
            const char * range /** Table range */,
            int offset /** The offset to the data cell. */,
            NXOpen::SpreadsheetManager::LookupMode mode /** The mode of lookup in the table. */
        );
        /** Reads the value from a given spreadsheet using a vertical table lookup.
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database.
                
            Note:
            The mode works when the target cell contains only numeric values and the mode is ignored when the target
            cell contains text  @return  The calculated value in a spreadsheet cell as per the vertical lookup 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SpreadsheetCellData * VerticalLookup
        (
            const NXString & file /** File name with full path */,
            const NXString & target /** Lookup target */,
            const NXString & range /** Table range */,
            int offset /** The offset to the data cell. */,
            NXOpen::SpreadsheetManager::LookupMode mode /** The mode of lookup in the table. */
        );
        /** Reads the value from a given spreadsheet using a vertical table lookup.
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database.
                
            Note:
            The mode works when the target cell contains only numeric values and the mode is ignored when the target
            cell contains text  @return  The calculated value in a spreadsheet cell as per the vertical lookup 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::SpreadsheetCellData * VerticalLookup
        (
            const char * file /** File name with full path */,
            const char * target /** Lookup target */,
            const char * range /** Table range */,
            int offset /** The offset to the data cell. */,
            NXOpen::SpreadsheetManager::LookupMode mode /** The mode of lookup in the table. */
        );
        /** Opens an Excel spreadsheet file.
            The type of the access mode can be either Read, or Write. 
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database.

            Note: For dataset file stored in the Teamcenter database, the spreadsheet must 
            be stored as a MSExcel or MSExcelX dataset.  The dataset shall be attached to 
            its containing item revision with an IMAN_specification relation.  Up to one 
            MSExcel or MSExcelX dataset can be attached. @return  Returns a @link SpreadsheetExternal SpreadsheetExternal@endlink  object to be used to access the external spreadsheet. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SpreadsheetExternal * OpenFile
        (
            const NXString & sheet /** An external Excel file name */,
            NXOpen::SpreadsheetManager::OpenMode mode /** Mode read/write */
        );
        /** Opens an Excel spreadsheet file.
            The type of the access mode can be either Read, or Write. 
            The Excel spreadsheet to be opened could be either from the native file system, 
            or from the dataset file stored in the Teamcenter database.

            Note: For dataset file stored in the Teamcenter database, the spreadsheet must 
            be stored as a MSExcel or MSExcelX dataset.  The dataset shall be attached to 
            its containing item revision with an IMAN_specification relation.  Up to one 
            MSExcel or MSExcelX dataset can be attached. @return  Returns a @link SpreadsheetExternal SpreadsheetExternal@endlink  object to be used to access the external spreadsheet. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::SpreadsheetExternal * OpenFile
        (
            const char * sheet /** An external Excel file name */,
            NXOpen::SpreadsheetManager::OpenMode mode /** Mode read/write */
        );
        /** In NX/MGR mode, export an Excel spreadsheet file from the dataset file stored in
            the Teamcenter database to the native file system. The file is exported for 
            readnig only.

            Note: For dataset file stored in the Teamcenter database, the spreadsheet must 
            be stored as a MSExcel or MSExcelX dataset.  The dataset shall be attached to 
            its containing item revision with an IMAN_specification relation.  Up to one 
            MSExcel or MSExcelX dataset can be attached. @return  If the file is exported successfully, the function returns a string indicating
                                           the full file name in native file system.
                                           If the file failed to export, the function returns empty string indicating no 
                                           native file available. 

                                           In Native mode, it does nothing and always returns an empty string.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ExportFile
        (
            const NXString & partnum /** A part number containing a MsExcel dataset. */
        );
        /** In NX/MGR mode, export an Excel spreadsheet file from the dataset file stored in
            the Teamcenter database to the native file system. The file is exported for 
            readnig only.

            Note: For dataset file stored in the Teamcenter database, the spreadsheet must 
            be stored as a MSExcel or MSExcelX dataset.  The dataset shall be attached to 
            its containing item revision with an IMAN_specification relation.  Up to one 
            MSExcel or MSExcelX dataset can be attached. @return  If the file is exported successfully, the function returns a string indicating
                                           the full file name in native file system.
                                           If the file failed to export, the function returns empty string indicating no 
                                           native file available. 

                                           In Native mode, it does nothing and always returns an empty string.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        NXString ExportFile
        (
            const char * partnum /** A part number containing a MsExcel dataset. */
        );
        /** Opens excel sheet associated with given part file. And returns a @link Spreadsheet Spreadsheet@endlink  object. @return  Returns a @link Spreadsheet Spreadsheet@endlink  object to be used to access the spreadsheet. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Spreadsheet * Open
        (
            NXOpen::SpreadsheetManager::Sheettype sheettype /** Sheet type */,
            const NXString & partfile /** Part file */
        );
        /** Opens excel sheet associated with given part file. And returns a @link Spreadsheet Spreadsheet@endlink  object. @return  Returns a @link Spreadsheet Spreadsheet@endlink  object to be used to access the spreadsheet. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Spreadsheet * Open
        (
            NXOpen::SpreadsheetManager::Sheettype sheettype /** Sheet type */,
            const char * partfile /** Part file */
        );
        /** Creates SpreadsheetCellData object.  @return  SpreadsheetCellData object.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SpreadsheetCellData * CreateCellData
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
