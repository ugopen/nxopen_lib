#ifndef NXOpen_REPORT_COMMANDBUILDER_HXX_INCLUDED
#define NXOpen_REPORT_COMMANDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Report_CommandBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Report_BaseArgument.hxx>
#include <NXOpen/Report_CommandBuilder.hxx>
#include <NXOpen/Report_ProgramInformation.hxx>
#include <NXOpen/Report_UserInput.hxx>
#include <NXOpen/libnxopencpp_report_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Report
    {
        class CommandBuilder;
    }
    class Builder;
    namespace Report
    {
        class BaseArgument;
    }
    namespace Report
    {
        class ProgramInformation;
    }
    namespace Report
    {
        class UserInput;
    }
    namespace Report
    {
        class _CommandBuilderBuilder;
        class CommandBuilderImpl;
        /** Represents a @link NXOpen::Report::CommandBuilder NXOpen::Report::CommandBuilder@endlink .  <br> To create a new instance of this class, use @link NXOpen::Report::CommandManager::CreateCommandBuilder  NXOpen::Report::CommandManager::CreateCommandBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_REPORTEXPORT  CommandBuilder : public NXOpen::Builder
        {
            /** Represents the user input location in command. */
            public: enum UserInputLocation
            {
                UserInputLocationBeforeAutomation/** The user item before automation */,
                UserInputLocationAfterAutomation/** The user item after automation */
            };

            private: CommandBuilderImpl * m_commandbuilder_impl;
            private: friend class  _CommandBuilderBuilder;
            protected: CommandBuilder();
            public: ~CommandBuilder();
            /**Returns  the command name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the command name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetName
            (
                const NXString & commandName /** commandname */ 
            );
            /**Sets  the command name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetName
            (
                const char * commandName /** commandname */ 
            );
            /** Gets the command hint 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetHint
            (
                std::vector<NXString> & commandHint /** commandhint */ 
            );
            /** Sets the command hint 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHint
            (
                std::vector<NXString> & commandHint /** commandhint */ 
            );
            /**Returns  the command display name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DisplayName
            (
            );
            /**Sets  the command display name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayName
            (
                const NXString & displayName /** displayname */ 
            );
            /**Sets  the command display name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetDisplayName
            (
                const char * displayName /** displayname */ 
            );
            /**Returns   @brief  a value that indicates whether the command is active or not.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Active
            (
            );
            /**Sets   @brief  a value that indicates whether the command is active or not.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetActive
            (
                bool isActive /** isactive */ 
            );
            /** Sets the categories which command apply to. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNamespaces
            (
                std::vector<NXString> & pNamespaces /** pnamespaces */ 
            );
            /** Gets the categories which command apply to. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetNamespaces
            (
                std::vector<NXString> & pNamespaces /** pnamespaces */ 
            );
            /** Adds an argument and adds it to the command.  @return   
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Report::BaseArgument * AddArgument
            (
                NXOpen::Report::BaseArgument::Type argumentType /** argumenttype */ 
            );
            /** Gets all arguments in the command. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetArguments
            (
                std::vector<NXOpen::Report::BaseArgument *> & pArguments /** parguments */ 
            );
            /** Removes the arguments. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveArguments
            (
                const std::vector<NXOpen::Report::BaseArgument *> & pArguments /** parguments */ 
            );
            /** Adds an user input and adds it to command.  @return   
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Report::UserInput * AddUserInput
            (
                NXOpen::Report::CommandBuilder::UserInputLocation userInputLocation /** userinputlocation */ ,
                NXOpen::Report::UserInput::Type userInputType /** userinputtype */ 
            );
            /** Gets all user inputs. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetUserInputs
            (
                NXOpen::Report::CommandBuilder::UserInputLocation userInputLocation /** userinputlocation */ ,
                std::vector<NXOpen::Report::UserInput *> & pUserInputs /** puserinputs */ 
            );
            /** Removes the user inputs. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveUserInputs
            (
                NXOpen::Report::CommandBuilder::UserInputLocation userInputLocation /** userinputlocation */ ,
                const std::vector<NXOpen::Report::UserInput *> & pUserInputs /** puserinputs */ 
            );
            /** Moves the user inputs to the new position. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void MoveUserInputs
            (
                NXOpen::Report::CommandBuilder::UserInputLocation userInputLocation /** userinputlocation */ ,
                const std::vector<NXOpen::Report::UserInput *> & pUserInputs /** puserinputs */ ,
                bool isBeforeRefUserInput /** isbeforerefuserinput */ ,
                NXOpen::Report::UserInput * pRefUserInputs /** the target reference user input */
            );
            /**Returns  the automation program information object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Report::ProgramInformation * ProgramInformation
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
