#ifndef NXOpen_AME_PORTBUILDER_HXX_INCLUDED
#define NXOpen_AME_PORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PortBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_PortBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PortBuilder;
    }
    class Builder;
    namespace AME
    {
        class _PortBuilderBuilder;
        class PortBuilderImpl;
        /** builder for the software block properties dialog <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePortBuilder  NXOpen::AME::AMEManager::CreatePortBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PortBuilder : public NXOpen::Builder
        {
            /** the type of a port */
            public: enum Type
            {
                TypeAll/** all */ ,
                TypeCaller/** caller */ ,
                TypeOperand/** operand */ ,
                TypeMethod/** method */ ,
                TypeBlock/** block */ 
            };

            private: PortBuilderImpl * m_portbuilder_impl;
            private: friend class  _PortBuilderBuilder;
            protected: PortBuilder();
            public: ~PortBuilder();
            /**Returns  the type of port 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PortType
            (
            );
            /**Sets  the type of port 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortType
            (
                const NXString & type /** type */ 
            );
            /**Sets  the type of port 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPortType
            (
                const char * type /** type */ 
            );
            /**Returns  the name of port 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PortName
            (
            );
            /**Sets  the name of port 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortName
            (
                const NXString & portName /** portname */ 
            );
            /**Sets  the name of port 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPortName
            (
                const char * portName /** portname */ 
            );
            /** Set the direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortDirection
            (
                const NXString & portDirection /** portdirection */ 
            );
            /** Set the direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPortDirection
            (
                const char * portDirection /** portdirection */ 
            );
            /** Set the cardinality 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPortCardinality
            (
                const NXString & portCardinality /** portcardinality */ 
            );
            /** Set the cardinality 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPortCardinality
            (
                const char * portCardinality /** portcardinality */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
