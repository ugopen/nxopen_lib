#ifndef NXOpen_ROUTING_LOGICALCONNECTION_HXX_INCLUDED
#define NXOpen_ROUTING_LOGICALCONNECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_LogicalConnection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_ConnectivityDefinition.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class LogicalConnection;
    }
    namespace Routing
    {
        class ConnectivityDefinition;
    }
    namespace Routing
    {
        class LogicalTerminal;
    }
    namespace Routing
    {
        class _LogicalConnectionBuilder;
        class LogicalConnectionImpl;
        /**  @brief 
                Represents a connection between mutiple From and To @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink .
                 

         
                 <br> 
                Use @link Routing::Electrical::Connection Routing::Electrical::Connection@endlink  to constrain 
                a connection to one From and To @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink 
                This is an abstract class and is for future use.
                See NX Open Routing help for detailed information on the Connection data model
                 <br> 
              <br> Creator not available in KF.  <br> 
         <br>  Created in NX4.0.2.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  LogicalConnection : public NXOpen::Routing::ConnectivityDefinition
        {
            private: LogicalConnectionImpl * m_logicalconnection_impl;
            private: friend class  _LogicalConnectionBuilder;
            protected: LogicalConnection();
            public: ~LogicalConnection();
            /** Get all From Terminals from the logical connection  @return  Collection of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::LogicalTerminal *> GetFromTerminals
            (
            );
            /** Get all To Terminals from the logical connection @return  Collection of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::LogicalTerminal *> GetToTerminals
            (
            );
            /** Replace the existing From Terminals for the logical connection with
                         collection of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  terminals 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ReplaceFromTerminals
            (
                const std::vector<NXOpen::Routing::LogicalTerminal *> & fromTerminals /** Collection of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  <br> 
                                          NULL empties From Terminal array   <br>  */
            );
            /** Replace the existing To Terminals for the logical connection with
                        collection of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  terminals 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ReplaceToTerminals
            (
                const std::vector<NXOpen::Routing::LogicalTerminal *> & toTerminals /** Collection of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  <br> 
                                       NULL empties To Terminal array  <br> */
            );
            /** Add @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  to the From Terminals collection.
                        Ordering is not important within variable length array.  @return  Successfully added @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink ?
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool AddFromTerminal
            (
                NXOpen::Routing::LogicalTerminal * fromTerminal /** Cannot be NULL */
            );
            /** Remove a @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  from the From Terminals collection.
                        Ordering is not important within the variable length array.  @return  Successful removal of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink ?
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool RemoveFromTerminal
            (
                NXOpen::Routing::LogicalTerminal * fromTerminal /** May be NULL */
            );
            /** Add @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  to end of the To Terminals collection.
                        Ordering is not important within variable length array.  @return  Successful addition of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink ?. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool AddToTerminal
            (
                NXOpen::Routing::LogicalTerminal * toTerminal /** A @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink   <br> Cannot be NULL  <br>  */
            );
            /** Remove a @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink  from the To Terminals collection.
                        Ordering is not important within the variable length array.  @return  Successful removal of @link Routing::LogicalTerminal Routing::LogicalTerminal@endlink ? 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool RemoveToTerminal
            (
                NXOpen::Routing::LogicalTerminal * toTerminal /** May be NULL */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
