#ifndef NXOpen_MOTION_MOTIONSOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_MOTIONSOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_MotionSolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_AdamsSolverProperty.hxx>
#include <NXOpen/Motion_LmsSolverProperty.hxx>
#include <NXOpen/Motion_MotionSolutionBuilder.hxx>
#include <NXOpen/Motion_RecurdynSolverProperty.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class MotionSolutionBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    namespace Motion
    {
        class AdamsSolverProperty;
    }
    namespace Motion
    {
        class LmsSolverProperty;
    }
    namespace Motion
    {
        class RecurdynSolverProperty;
    }
    namespace Motion
    {
        class _MotionSolutionBuilderBuilder;
        class MotionSolutionBuilderImpl;
        /**
            Represents a @link NXOpen::Motion::MotionSolutionBuilder NXOpen::Motion::MotionSolutionBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::Motion::MotionSolutionCollection::CreateSolutionBuilder  NXOpen::Motion::MotionSolutionCollection::CreateSolutionBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  MotionSolutionBuilder : public NXOpen::Builder
        {
            /** Solution type */
            public: enum SolutionTypes
            {
                SolutionTypesNormal/** Normal run */,
                SolutionTypesArticulation/** Articulation run */,
                SolutionTypesSpreadsheet/** Spreadsheet run */,
                SolutionTypesFlexbody/** Flexible Body Dynamics run */
            };

            /** Analysis type
                        The LMS Solver does not support @link NXOpen::Motion::MotionSolutionBuilder::AnalysisTypesControl NXOpen::Motion::MotionSolutionBuilder::AnalysisTypesControl@endlink .*/
            public: enum AnalysisTypes
            {
                AnalysisTypesDynamic/** Dynamic or Kinematic analysis */,
                AnalysisTypesStatic/** Static analysis */,
                AnalysisTypesControl/** control */ 
            };

            private: MotionSolutionBuilderImpl * m_motionsolutionbuilder_impl;
            private: friend class  _MotionSolutionBuilderBuilder;
            protected: MotionSolutionBuilder();
            public: ~MotionSolutionBuilder();
            /**Returns  the solution type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionSolutionBuilder::SolutionTypes SolutionType
            (
            );
            /**Sets  the solution type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolutionType
            (
                NXOpen::Motion::MotionSolutionBuilder::SolutionTypes solutionType /** solutiontype */ 
            );
            /**Returns  the analysis type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionSolutionBuilder::AnalysisTypes AnalysisType
            (
            );
            /**Sets  the analysis type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAnalysisType
            (
                NXOpen::Motion::MotionSolutionBuilder::AnalysisTypes analysisType /** analysistype */ 
            );
            /**Returns  the time 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtion the exression using @link NXOpen::Motion::MotionSolutionBuilder::TimeExpression NXOpen::Motion::MotionSolutionBuilder::TimeExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtion the exression using NXOpen::Motion::MotionSolutionBuilder::TimeExpression to query or edit it.") double Time
            (
            );
            /**Sets  the time 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtion the exression using @link NXOpen::Motion::MotionSolutionBuilder::TimeExpression NXOpen::Motion::MotionSolutionBuilder::TimeExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtion the exression using NXOpen::Motion::MotionSolutionBuilder::TimeExpression to query or edit it.") void SetTime
            (
                double time /** time */ 
            );
            /**Returns  the step 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int Step
            (
            );
            /**Sets  the step 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStep
            (
                int step /** step */ 
            );
            /**Returns  the Static Analysis option
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool StaticAnalysis
            (
            );
            /**Sets  the Static Analysis option
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticAnalysis
            (
                bool staticAnalysis /** staticanalysis */ 
            );
            /**Returns  the gravity vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * GravityVector
            (
            );
            /**Sets  the gravity vector 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetGravityVector
            (
                NXOpen::Direction * gravityVector /** gravityvector */ 
            );
            /**Returns  the gravity value 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtion the exression using @link NXOpen::Motion::MotionSolutionBuilder::GravityValueExpression NXOpen::Motion::MotionSolutionBuilder::GravityValueExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtion the exression using NXOpen::Motion::MotionSolutionBuilder::GravityValueExpression to query or edit it.") double GravityValue
            (
            );
            /**Sets  the gravity value 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtion the exression using @link NXOpen::Motion::MotionSolutionBuilder::GravityValueExpression NXOpen::Motion::MotionSolutionBuilder::GravityValueExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtion the exression using NXOpen::Motion::MotionSolutionBuilder::GravityValueExpression to query or edit it.") void SetGravityValue
            (
                double gravityValue /** gravityvalue */ 
            );
            /**Returns  the description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
            /**Sets  the description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the Adams Solver property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::AdamsSolverProperty * AdamsSolverProperty
            (
            );
            /**Sets  the Adams Solver property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAdamsSolverProperty
            (
                NXOpen::Motion::AdamsSolverProperty * adamsSolverProperty /** adamssolverproperty */ 
            );
            /**Returns  the Recurdyn Solver property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::RecurdynSolverProperty * RecurdynSolverProperty
            (
            );
            /**Sets  the Recurdyn Solver property 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRecurdynSolverProperty
            (
                NXOpen::Motion::RecurdynSolverProperty * recurdynSolverProperty /** recurdynsolverproperty */ 
            );
            /**Returns  the LMS Solver property 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::LmsSolverProperty * LmsSolverProperty
            (
            );
            /**Sets  the LMS Solver property 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetLmsSolverProperty
            (
                NXOpen::Motion::LmsSolverProperty * lmsSolverProperty /** lmssolverproperty */ 
            );
            /**Returns  the skipped steps option
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSkipStep
            (
            );
            /**Sets  the skipped steps option
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSkipStep
            (
                bool isSkipStep /** isskipstep */ 
            );
            /**Returns  the skipped steps
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SkipSteps
            (
            );
            /**Sets  the skipped steps
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSkipSteps
            (
                const NXString & skipSteps /** skipsteps */ 
            );
            /**Sets  the skipped steps
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetSkipSteps
            (
                const char * skipSteps /** skipsteps */ 
            );
            /**Returns  the time expression 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TimeExpression
            (
            );
            /**Returns  the gravity value expression
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GravityValueExpression
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
