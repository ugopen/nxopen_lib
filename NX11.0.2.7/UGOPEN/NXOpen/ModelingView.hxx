#ifndef NXOpen_MODELINGVIEW_HXX_INCLUDED
#define NXOpen_MODELINGVIEW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModelingView.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_DynamicSection.hxx>
#include <NXOpen/View.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ModelingView;
    namespace Display
    {
        class DynamicSection;
    }
    class ModelingViewHighQualityImage;
    class View;
    class _ModelingViewBuilder;
    class ModelingViewImpl;
    /** Represents a Modeling View <br> Modeling Views may only be created by Save As.  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ModelingView : public NXOpen::View
    {
        /** Defines whether to disable and enable capping. If enabled, the capping
                color can be further defined by 'cap_color', or using the color of the 
                solid that is being sectioned. If desired, solid interference check can 
                also be enabled for visual inspection 
         <br>  @deprecated Deprecated in NX5.0.0.  This funcitonality is replaced by @link NXOpen::ModelingView::SetActiveDynamicSection NXOpen::ModelingView::SetActiveDynamicSection@endlink  <br>  
        */
        public: enum NX_DEPRECATED("Deprecated in NX5.0.0.  This funcitonality is replaced by NXOpen::ModelingView::SetActiveDynamicSection")  SectionCap
        {
            SectionCapOff/** disable */,
            SectionCapOn/** enable using cap_color */,
            SectionCapBodyColor/** enable using color of solid body */,
            SectionCapBodyColorAndInterference/** with interference check */
        };

        /** This arbitrarily defines an initial reference point. If the 'primary' plane,
                which is farther from WCS, or the 'secondary' plane, which is closer to WCS, 
                should be the active sectioning (cutting) plane 
         <br>  @deprecated Deprecated in NX5.0.0.  This funcitonality is replaced by @link NXOpen::ModelingView::SetActiveDynamicSection NXOpen::ModelingView::SetActiveDynamicSection@endlink  <br>  
        */
        public: enum NX_DEPRECATED("Deprecated in NX5.0.0.  This funcitonality is replaced by NXOpen::ModelingView::SetActiveDynamicSection")  SectionPlane
        {
            SectionPlanePrimary/** Primary */,
            SectionPlaneSecondary/** Secondary */
        };

         /** This defines the attributes data for dynamic sectioning 
         <br>  @deprecated Deprecated in NX5.0.0.  This funcitonality is replaced by @link NXOpen::ModelingView::SetActiveDynamicSection NXOpen::ModelingView::SetActiveDynamicSection@endlink  <br>  
        */
        public:
        struct  NX_DEPRECATED("Deprecated in NX5.0.0.  This funcitonality is replaced by NXOpen::ModelingView::SetActiveDynamicSection")  OtherSectionAttrT
        {
            public: /** If true, all enabled planes are moved as a group */bool Lock;
            public: /** Enable or disable capping */NXOpen::ModelingView::SectionCap CapType;
            public: /** capping color index from UG's color table */int CapColor;
            public: /** Either 1/2/6 planes can be active at a time */int TotalPlanesActive;
            public: /** To select the 'active' plane (of the 2 set) */NXOpen::ModelingView::SectionPlane ActivePlane;
            public: OtherSectionAttrT() :
                Lock(),
                CapType((NXOpen::ModelingView::SectionCap)0),
                CapColor(),
                TotalPlanesActive(),
                ActivePlane((NXOpen::ModelingView::SectionPlane)0)
            {
            }
            /** Constructor for the OtherSectionAttrT struct. */ 
            public: OtherSectionAttrT(bool lockInitial /** If true, all enabled planes are moved as a group */, 
                    NXOpen::ModelingView::SectionCap capTypeInitial /** Enable or disable capping */, 
                    int capColorInitial /** capping color index from UG's color table */, 
                    int totalPlanesActiveInitial /** Either 1/2/6 planes can be active at a time */, 
                    NXOpen::ModelingView::SectionPlane activePlaneInitial /** To select the 'active' plane (of the 2 set) */) :
                Lock(lockInitial),
                CapType(capTypeInitial),
                CapColor(capColorInitial),
                TotalPlanesActive(totalPlanesActiveInitial),
                ActivePlane(activePlaneInitial)
            {
            }
        };

        private: ModelingViewImpl * m_modelingview_impl;
        private: friend class  _ModelingViewBuilder;
        protected: ModelingView();
        public: ~ModelingView();
        /** Changes the set of lights used in the given view to the
                "Default" set, which for now is the Scene Ambient,
                Scene Left Top and Scene Right Top lights.  If the definition
                of the "Default" set should ever change, the implementation
                of this method would change accordingly.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void UseDefaultLights
        (
        );
        /** Changes the set of lights used in the given view to the
                "Scene" set, which for now includes the eight predefined
                scene lights (including the Scene Ambient light).
                If the definition of the "Scene" set should ever change,
                the implementation of this method would change accordingly.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void UseSceneLights
        (
        );
        /**Returns  the toggle between enabling or disabling the Dynamic Sectioning viewing 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool DisplaySectioningToggle
        (
        );
        /**Sets  the toggle between enabling or disabling the Dynamic Sectioning viewing 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDisplaySectioningToggle
        (
            bool newState /** To enable or disable dyanamic Sectioning on display */
        );
        /** To adjust and orient the Sectioning planes as a quick display trick. It is not to
                confuse this operation with the TRUE modeling boolean operation.         
                All the attributes used are for the benefit of the UI dialog. The View Sectioning
                operation is really meaningless when it is not in interactive mode without visual
                feedback (UI). But for journaling playback to work properly, we must remember the
                states of all the setting in the dialog. 
                
                There can be a max of six section planes at one time 'sectioning' out a geometry.
                When all are enabled, they are 3 set of 2-parallel planes. These 3 sets are ALWAYS
                perpendicular to each other much like the XYZ coordinate. Therefore, one 1 rotation
                matrix is required to orient all these 6 planes. Either 1, 2 or 6 planes can be enabled
                at anytime. Initially, these 3 sets are parallel to the x-y plane, x-z plane, and the 
                y-z plane of the WCS respectively. 
                
                With this API, user can update the distance of all 6 planes even the number of 
                active planes are 1 or 2. Therefore, the length of 'plane_dist' array does not have
                to be the same as field total_planes_active in @link NXOpen::ModelingView::OtherSectionAttrT NXOpen::ModelingView::OtherSectionAttrT@endlink .
                
                For further details on how dynamic sectioning works, please refer to the UG doc.

                 <br> This method is deprecated. 
                Use @link NXOpen::BasePart::DynamicSections NXOpen::BasePart::DynamicSections@endlink  
                to create section builder and modify view sectioning definition.
                 <br> 
                
         <br>  @deprecated Deprecated in NX5.0.0.  Use @link NXOpen::ModelingView::SetActiveDynamicSection NXOpen::ModelingView::SetActiveDynamicSection@endlink  instead. <br>  

         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX5.0.0.  Use NXOpen::ModelingView::SetActiveDynamicSection instead.") void SetDisplaySectioning
        (
            const NXOpen::Matrix3x3 & sectionMatrix /** Section planes matrix relative to ABS coordinates */,
            const NXOpen::Point3d & sectionOrigin /** Center of rectangle representing the active plane */,
            const std::vector<double> & planeDist /** distance from section_object_origin of the 6 planes */,
            const NXOpen::ModelingView::OtherSectionAttrT & otherAttrs /** additional sectioning attributes */
        );
        /** To adjust and orient the Sectioning planes as a quick display trick. It is not to
                confuse this operation with the TURE modeling boolean operation.         
                All the attributes used are for the benefit of the UI dialog. The View Sectioning
                operation is really meanlingless when it is not in interactive mode without visual
                feedback (UI). But for journaling playback to work properly, we must remember the
                states of all the setting in the dialog. 
                
                There can be a max of six section planes at one time 'sectioning' out a geometry.
                When all are enabled, they are 3 set of 2-parallel planes. These 3 sets are ALWAYS
                perpendicular to each other much like the XYZ coordinate. Therefore, one 1 rotation
                matrix is required to orient all these 6 planes. Either 1, 2 or 6 planes can be enabled
                at anytime. Initially, these 3 sets are parallel to the x-y plane, x-z plane, and the 
                y-z plane of the WCS respectively. 
                
                With this API, user can update the distance of all 6 planes even the number of 
                active planes are 1 or 2. Therefore, the length of the 'plane_dist' array does not have
                to be the same as field total_planes_active in @link NXOpen::ModelingView::OtherSectionAttrT NXOpen::ModelingView::OtherSectionAttrT@endlink .
                
                For further details on how dynamic sectioning works, please refer to the UG doc.

                 <br> This method is deprecated. 
                Use @link NXOpen::BasePart::DynamicSections NXOpen::BasePart::DynamicSections@endlink   
                to create section builder and query sectioning attributes stored in a view.
                 <br>    
                
         <br>  @deprecated Deprecated in NX5.0.0.  Use @link NXOpen::ModelingView::ActiveDynamicSection NXOpen::ModelingView::ActiveDynamicSection@endlink  instead. <br>  

         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX5.0.0.  Use NXOpen::ModelingView::ActiveDynamicSection instead.") void GetDisplaySectioning
        (
            NXOpen::Matrix3x3* sectionMatrix /** Section planes matrix relative to ABS coordinates */,
            NXOpen::Point3d* sectionOrigin /** Center of rectangle representing the active plane */,
            std::vector<double> & planeDist /** distance from section_object_origin of the 6 planes */,
            NXOpen::ModelingView::OtherSectionAttrT* otherAttrs /** additional sectioning attributes */
        );
        /**Returns  the active dynamic section object in the modeling view.
                 <br> 
                Each modeling view can contain one and only one active dynamic section. Trying
                to reset the active dynamic section in the view by specifying NULL 
                dynamic section will raise an error.
                 <br> 
             
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::DynamicSection * ActiveDynamicSection
        (
        );
        /**Sets  the active dynamic section object in the modeling view.
                 <br> 
                Each modeling view can contain one and only one active dynamic section. Trying
                to reset the active dynamic section in the view by specifying NULL 
                dynamic section will raise an error.
                 <br> 
             
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetActiveDynamicSection
        (
            NXOpen::Display::DynamicSection * dynamicSection /** Dynamic section object. Specify NULL to reset active dynamic section. */
        );
        /** Returns if the specified dynamic section object is visible
                in this view.
                
                 <br> 
                When dynamic section object is visible, the section curves
                are shown in the view.
                 <br> 
              @return  Visibility flag 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsDynamicSectionVisible
        (
            NXOpen::Display::DynamicSection * dynamicSection /** Dynamic section object */
        );
        /** Sets the specified dynamic section object is visible/invisible
                in this view. 
                
                 <br> 
                When dynamic section object is visible, the section curves
                are shown in the view. Showing section objects in a view is a
                performance intensive operation. In involves cutting all visible
                bodies in the view with the section object definition.        
                 <br> 
             
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDynamicSectionVisible
        (
            NXOpen::Display::DynamicSection * dynamicSection /** Dynamic section object */,
            bool visible /** Visibility flag */
        );
        /**Returns  a flag indicating whether the model view is mirrored 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool IsMirrored
        (
        );
        /** Expand or collapse the node for the specified Model View in the Part Navigator. 
         <br>  Created in NX9.0.3.  <br>  
         <br> License requirements : None */
        public: void ExpandCollapseNode
        (
            bool expand /** expand */ 
        );


        /** Returns the High Quality Image instance belonging to a view 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ModelingViewHighQualityImage *HiqhQualityImage();
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
