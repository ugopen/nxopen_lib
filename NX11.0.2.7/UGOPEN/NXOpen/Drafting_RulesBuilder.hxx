#ifndef NXOpen_DRAFTING_RULESBUILDER_HXX_INCLUDED
#define NXOpen_DRAFTING_RULESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drafting_RulesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drafting_RulesBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_drafting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drafting
    {
        class RulesBuilder;
    }
    class Builder;
    namespace Drafting
    {
        class _RulesBuilderBuilder;
        class RulesBuilderImpl;
        /** This class is used to specify knowledge fusion rules in a drawing template. The rules are 
                executed when the template is instantiated.  <br> To create a new instance of this class, use @link NXOpen::Drafting::AutomationManager::CreateRulesBuilder  NXOpen::Drafting::AutomationManager::CreateRulesBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_DRAFTINGEXPORT  RulesBuilder : public NXOpen::Builder
        {
            private: RulesBuilderImpl * m_rulesbuilder_impl;
            private: friend class  _RulesBuilderBuilder;
            protected: RulesBuilder();
            public: ~RulesBuilder();
            /**Returns  the dimension rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DimensionRule
            (
            );
            /**Sets  the dimension rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drawing_auto ("NX Drawing Automation") */
            public: void SetDimensionRule
            (
                const NXString & dimensionRule /** dimensionrule */ 
            );
            /**Sets  the dimension rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drawing_auto ("NX Drawing Automation") */
            void SetDimensionRule
            (
                const char * dimensionRule /** dimensionrule */ 
            );
            /**Returns  the symbol rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SymbolRule
            (
            );
            /**Sets  the symbol rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drawing_auto ("NX Drawing Automation") */
            public: void SetSymbolRule
            (
                const NXString & symbolRule /** symbolrule */ 
            );
            /**Sets  the symbol rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drawing_auto ("NX Drawing Automation") */
            void SetSymbolRule
            (
                const char * symbolRule /** symbolrule */ 
            );
            /**Returns  the note rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NoteRule
            (
            );
            /**Sets  the note rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drawing_auto ("NX Drawing Automation") */
            public: void SetNoteRule
            (
                const NXString & noteRule /** noterule */ 
            );
            /**Sets  the note rule 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_drawing_auto ("NX Drawing Automation") */
            void SetNoteRule
            (
                const char * noteRule /** noterule */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
