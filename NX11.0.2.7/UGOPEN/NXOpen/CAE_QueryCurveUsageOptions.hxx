#ifndef NXOpen_CAE_QUERYCURVEUSAGEOPTIONS_HXX_INCLUDED
#define NXOpen_CAE_QUERYCURVEUSAGEOPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_QueryCurveUsageOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_QueryCurveUsageOptions.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class QueryCurveUsageOptions;
    }
    namespace CAE
    {
        class QueryCurve;
    }
    namespace CAE
    {
        class _QueryCurveUsageOptionsBuilder;
        class QueryCurveUsageOptionsImpl;
        /**  @brief  Represents the options to apply a query curve  

           <br> This is a sub object  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  QueryCurveUsageOptions : public NXOpen::TaggedObject
        {
            /** Types of ways query curves can be used */
            public: enum CurveUsageType
            {
                CurveUsageTypeUseVertices/** use vertices */ ,
                CurveUsageTypeUseIntersectionLocation/** use intersection location */ ,
                CurveUsageTypeProjectToElementFaces/** project to element faces */ 
            };

            /** Where the curve will resolve entities on the curve path */
            public: enum ResultantCurveLocatorType
            {
                ResultantCurveLocatorTypeUseAsIs/** use as is */ ,
                ResultantCurveLocatorTypeSnapToClosestNode/** snap to closest node */ ,
                ResultantCurveLocatorTypeUseIntersectedElements/** use intersected elements */ 
            };

            private: QueryCurveUsageOptionsImpl * m_querycurveusageoptions_impl;
            private: friend class  _QueryCurveUsageOptionsBuilder;
            protected: QueryCurveUsageOptions();
            public: ~QueryCurveUsageOptions();
            /**Returns  the query curve object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::QueryCurve * QueryCurve
            (
            );
            /**Sets  the query curve object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetQueryCurve
            (
                NXOpen::CAE::QueryCurve * queryCurve /** querycurve */ 
            );
            /**Returns  the reverse direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetReverseDirection
            (
                bool reverseDirection /** reversedirection */ 
            );
            /**Returns  the curve usage 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::QueryCurveUsageOptions::CurveUsageType CurveUsage
            (
            );
            /**Sets  the curve usage 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetCurveUsage
            (
                NXOpen::CAE::QueryCurveUsageOptions::CurveUsageType curveUsage /** curveusage */ 
            );
            /**Returns  the resultant curve locator 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::QueryCurveUsageOptions::ResultantCurveLocatorType ResultantCurveLocator
            (
            );
            /**Sets  the resultant curve locator 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetResultantCurveLocator
            (
                NXOpen::CAE::QueryCurveUsageOptions::ResultantCurveLocatorType resultantCurveLocator /** resultantcurvelocator */ 
            );
            /**Returns  the distance to mesh tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance to mesh tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the resultant location tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double ResultantLocationTolerance
            (
            );
            /**Sets  the resultant location tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetResultantLocationTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the projection direction
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vector3d ProjectDirection
            (
            );
            /**Sets  the projection direction
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetProjectDirection
            (
                const NXOpen::Vector3d & direction /** direction */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
