#ifndef NXOpen_MECHANICALROUTING_MOVEPATHBUILDER_HXX_INCLUDED
#define NXOpen_MECHANICALROUTING_MOVEPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MechanicalRouting_MovePathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_ModlMotion.hxx>
#include <NXOpen/MechanicalRouting_MovePathBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/libnxopencpp_mechanicalrouting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MechanicalRouting
    {
        class MovePathBuilder;
    }
    class Builder;
    namespace GeometricUtilities
    {
        class ModlMotion;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace MechanicalRouting
    {
        class _MovePathBuilderBuilder;
        class MovePathBuilderImpl;
        /** Represents @link NXOpen::MechanicalRouting::MovePathBuilder NXOpen::MechanicalRouting::MovePathBuilder@endlink . Allows the user to perform 
                transform of routing objects.  If run from a non-interactive session it will return NULL.
             <br> To create a new instance of this class, use @link NXOpen::MechanicalRouting::BuilderFactory::CreateMovePathBuilder  NXOpen::MechanicalRouting::BuilderFactory::CreateMovePathBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Motion.DeltaEnum </td> <td> 
         
        ReferenceWcsWorkPart </td> </tr> 

        <tr><td> 
         
        Motion.DeltaXc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Motion.DeltaYc.Value </td> <td> 
         
        0.0 </td> </tr> 

        <tr><td> 
         
        Motion.DeltaZc.Value </td> <td> 
         
        0.0 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MECHANICALROUTINGEXPORT  MovePathBuilder : public NXOpen::Builder
        {
            /** Specifies the options that will allow the user to enforce the transformation by detaching 
                        the routing objects (if necessary) from objects that stop the selected object from moving.
                    */
            public: enum DetachTypes
            {
                DetachTypesAlwaysMaintainConnections/** always maintain connections */ ,
                DetachTypesAllowDetachOnConflict/** allow detach on conflict */ ,
                DetachTypesDetachSelectedObjects/** detach selected objects */ 
            };

            private: MovePathBuilderImpl * m_movepathbuilder_impl;
            private: friend class  _MovePathBuilderBuilder;
            protected: MovePathBuilder();
            public: ~MovePathBuilder();
            /**Returns  the objects that make up the path that needs to be transformed.

                        The objects can be segments, routing control points and routing components that have properties that 
                        make them suitable to be moved by the routing application.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteObjectCollector * PathSelection
            (
            );
            /**Returns  the transformation to apply to the selected routing objects. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::GeometricUtilities::ModlMotion * Motion
            (
            );
            /**Returns  the maintain length setting. 
                    
                        This keeps the length of the selected segments constant through the transform operation. The adjacent 
                        segments will be modified and reconnected to the end of the moving segments as required. 
                        If this option is turned off, the segments that are moved may extend or trim back to connect to adjacent segments. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool MaintainLength
            (
            );
            /**Sets  the maintain length setting. 
                    
                        This keeps the length of the selected segments constant through the transform operation. The adjacent 
                        segments will be modified and reconnected to the end of the moving segments as required. 
                        If this option is turned off, the segments that are moved may extend or trim back to connect to adjacent segments. 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMaintainLength
            (
                bool maintainLength /** maintainlength */ 
            );
            /**Returns  the detach type setting. 

                        Allows the user to specify acceptable detach types for objects that prevent the transformation of the 
                        selected objects.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::MovePathBuilder::DetachTypes DetachType
            (
            );
            /**Sets  the detach type setting. 

                        Allows the user to specify acceptable detach types for objects that prevent the transformation of the 
                        selected objects.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDetachType
            (
                NXOpen::MechanicalRouting::MovePathBuilder::DetachTypes detachType /** detachtype */ 
            );
            /** Begin a drag operation.  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void StartDrag
            (
            );
            /** Perform a drag operation.  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DragObjects
            (
            );
            /** End a drag operation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void StopDrag
            (
            );
            /** Reset a drag operation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ResetDrag
            (
            );
            /**Returns  the preview setting 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool Preview
            (
            );
            /**Sets  the preview setting 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPreview
            (
                bool preview /** preview */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
