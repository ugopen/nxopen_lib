#ifndef NXOpen_REPORT_INTEGERARGUMENT_HXX_INCLUDED
#define NXOpen_REPORT_INTEGERARGUMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Report_IntegerArgument.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Report_BaseArgument.hxx>
#include <NXOpen/Report_IntegerArgument.hxx>
#include <NXOpen/libnxopencpp_report_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Report
    {
        class IntegerArgument;
    }
    namespace Report
    {
        class BaseArgument;
    }
    namespace Report
    {
        class _IntegerArgumentBuilder;
        class IntegerArgumentImpl;
        /** Represents an argument for integer type data. This class
                does not include upper bound and lower bound in default.  <br> Not support KF.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_REPORTEXPORT  IntegerArgument : public NXOpen::Report::BaseArgument
        {
            private: IntegerArgumentImpl * m_integerargument_impl;
            private: friend class  _IntegerArgumentBuilder;
            protected: IntegerArgument();
            public: ~IntegerArgument();
            /**Returns  the maximum value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int MaximumValue
            (
            );
            /**Sets  the maximum value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumValue
            (
                int maximumValue /** maximumvalue */ 
            );
            /**Returns   @brief  a value that indicates whether includes the upper bound.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeUpperBound
            (
            );
            /**Sets   @brief  a value that indicates whether includes the upper bound.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIncludeUpperBound
            (
                bool includeUpperBound /** includeupperbound */ 
            );
            /**Returns  the minimum value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int MinimumValue
            (
            );
            /**Sets  the minimum value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumValue
            (
                int minimumValue /** minimumvalue */ 
            );
            /**Returns   @brief  a value that indicates whether includes the lower bound.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeLowerBound
            (
            );
            /**Sets   @brief  a value that indicates whether includes the lower bound.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIncludeLowerBound
            (
                bool includeLowerBound /** includelowerbound */ 
            );
            /**Returns  the argument default value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int DefaultValue
            (
            );
            /**Sets  the argument default value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultValue
            (
                int defaultValue /** defaultvalue */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
