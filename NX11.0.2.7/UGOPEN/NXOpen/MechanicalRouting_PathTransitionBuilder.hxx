#ifndef NXOpen_MECHANICALROUTING_PATHTRANSITIONBUILDER_HXX_INCLUDED
#define NXOpen_MECHANICALROUTING_PATHTRANSITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MechanicalRouting_PathTransitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MechanicalRouting_PathTransitionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechanicalrouting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MechanicalRouting
    {
        class PathTransitionBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class Expression;
    class NXObject;
    class Point;
    namespace MechanicalRouting
    {
        class _PathTransitionBuilderBuilder;
        class PathTransitionBuilderImpl;
        /** Represents @link NXOpen::MechanicalRouting::PathTransitionBuilder NXOpen::MechanicalRouting::PathTransitionBuilder@endlink . Allows the user to create 
                a routing path transition.
             <br> To create a new instance of this class, use @link NXOpen::MechanicalRouting::PathTransitionListManagerBuilder::CreatePathTransitionBuilder  NXOpen::MechanicalRouting::PathTransitionListManagerBuilder::CreatePathTransitionBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MECHANICALROUTINGEXPORT  PathTransitionBuilder : public NXOpen::Builder
        {
            /** The type of transition the path takes to reach the transition end point. */
            public: enum Type
            {
                TypeDirect/** direct */ ,
                TypeHeal/** heal */ ,
                TypeIntersect/** intersect */ 
            };

            /** The heal transition traversal order the path takes to reach the transition end point. */
            public: enum TraversalOrder
            {
                TraversalOrderXyz/** xyz */ ,
                TraversalOrderXzy/** xzy */ ,
                TraversalOrderYzx/** yzx */ ,
                TraversalOrderYxz/** yxz */ ,
                TraversalOrderZxy/** zxy */ ,
                TraversalOrderZyx/** zyx */ ,
                TraversalOrderInvalid/** invalid */ 
            };

            /** The box orientation for heal transition traversal order. */
            public: enum HealOrientation
            {
                HealOrientationWcs/** wcs */ ,
                HealOrientationAbsolute/** absolute */ ,
                HealOrientationStart/** start */ ,
                HealOrientationEnd/** end */ ,
                HealOrientationNewCsys/** new csys */ 
            };

            private: PathTransitionBuilderImpl * m_pathtransitionbuilder_impl;
            private: friend class  _PathTransitionBuilderBuilder;
            protected: PathTransitionBuilder();
            public: ~PathTransitionBuilder();
            /**Returns  the type of transition the path takes to reach the transition end point. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::PathTransitionBuilder::Type TransitionType
            (
            );
            /**Sets  the type of transition the path takes to reach the transition end point. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetTransitionType
            (
                NXOpen::MechanicalRouting::PathTransitionBuilder::Type transitionType /** transitiontype */ 
            );
            /**Returns  the box orientation for heal transition traversal order. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::PathTransitionBuilder::HealOrientation BoxOrientation
            (
            );
            /**Sets  the box orientation for heal transition traversal order. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBoxOrientation
            (
                NXOpen::MechanicalRouting::PathTransitionBuilder::HealOrientation boxOrientation /** boxorientation */ 
            );
            /**Returns  the user-defined coordinate system for the @link NXOpen::MechanicalRouting::PathTransitionBuilder::HealOrientationNewCsys NXOpen::MechanicalRouting::PathTransitionBuilder::HealOrientationNewCsys@endlink  heal box orientation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::CoordinateSystem * HealSolutionCsys
            (
            );
            /**Sets  the user-defined coordinate system for the @link NXOpen::MechanicalRouting::PathTransitionBuilder::HealOrientationNewCsys NXOpen::MechanicalRouting::PathTransitionBuilder::HealOrientationNewCsys@endlink  heal box orientation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetHealSolutionCsys
            (
                NXOpen::CoordinateSystem * coordinateSystem /** coordinatesystem */ 
            );
            /**Returns  the toggle to set forward/backward extensions for this transition. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool AddExtensionToggle
            (
            );
            /**Sets  the toggle to set forward/backward extensions for this transition. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAddExtensionToggle
            (
                bool extensionToggle /** extensiontoggle */ 
            );
            /**Returns  the direction for extension segments. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Direction * ExtensionVector
            (
            );
            /**Sets  the direction for extension segments. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetExtensionVector
            (
                NXOpen::Direction * extensionVector /** extensionvector */ 
            );
            /**Returns  the backward extension length for this transition. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * BackwardExtension
            (
            );
            /**Sets  the backward extension length for this transition. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBackwardExtension
            (
                NXOpen::Expression * backwardExtension /** backwardextension */ 
            );
            /**Returns  the forward extension length for this transition. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * ForwardExtension
            (
            );
            /**Sets  the forward extension length for this transition. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetForwardExtension
            (
                NXOpen::Expression * forwardExtension /** forwardextension */ 
            );
            /**Returns  the toggle setting to define whether the path passes forward through the extension vector, or backward. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool PathForwardThroughExtensionVector
            (
            );
            /**Sets  the toggle setting to define whether the path passes forward through the extension vector, or backward. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPathForwardThroughExtensionVector
            (
                bool isPathForwardThroughExtensionVector /** ispathforwardthroughextensionvector */ 
            );
            /**Returns  the heal transition traversal order the path takes to reach the transition end point. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::PathTransitionBuilder::TraversalOrder HealTraversalOrder
            (
            );
            /**Sets  the heal transition traversal order the path takes to reach the transition end point. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetHealTraversalOrder
            (
                NXOpen::MechanicalRouting::PathTransitionBuilder::TraversalOrder healTraversalOrder /** healtraversalorder */ 
            );
            /**Returns  the end point that defines the end of the path transition. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Point * EndPoint
            (
            );
            /**Sets  the end point that defines the end of the path transition. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetEndPoint
            (
                NXOpen::Point * endPoint /** endpoint */ 
            );
            /**Returns  the object that the end point of this path transition connects to. If the transition
                        connects to a port or a routing control point, it is required to set that object as the connected object to
                        build connectivity. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::NXObject * ConnectedObject
            (
            );
            /**Sets  the object that the end point of this path transition connects to. If the transition
                        connects to a port or a routing control point, it is required to set that object as the connected object to
                        build connectivity. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetConnectedObject
            (
                NXOpen::NXObject * connectedObject /** connectedobject */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
