#ifndef NXOpen_ROUTING_REUSELIBRARY_HXX_INCLUDED
#define NXOpen_ROUTING_REUSELIBRARY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_ReuseLibrary.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class ReuseLibrary;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ReuseLibraryImpl;
        /** Represents a @link NXOpen::Routing::ReuseLibrary NXOpen::Routing::ReuseLibrary@endlink   <br> No creator is available in KF.  <br> 
         <br>  Created in NX7.5.3.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  ReuseLibrary
        {
            /** Represents the part type. */
            public: enum PartType
            {
                PartTypeGasket/** Gasket Post Placement Type */,
                PartTypeBolt/** Bolt Post Placement Type */,
                PartTypeStud/** Stud Post Placement Type */,
                PartTypeNut/** Nut Post Placement Type */,
                PartTypeWasher/** Washer Post Placement Type */,
                PartTypeWeldring/** Weld Ring Post Placement Type */,
                PartTypeRingjoint/** Ring Joint Post Placement Type */,
                PartTypeUnknown/** Unknown Type */ = -1
            };

            /** Represents the report in BOM logical type. */
            public: enum ReportInBom
            {
                ReportInBomDoNotReport/** Do not report in the Bill of Materials */,
                ReportInBomReport/** Report in the Bill of Materials */
            };

            private: ReuseLibraryImpl * m_reuselibrary_impl;
            private: NXOpen::Routing::RouteManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ReuseLibrary(NXOpen::Routing::RouteManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ReuseLibrary();
            /** Reloads all of the nodes of the Routing Reuse Library based on the current discipline. 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void Reload
            (
            );
            /** Returns the identifiers which represent the start nodes for the current discipline. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void PartLibraryGetDisciplineRoots
            (
                std::vector<NXString> & identifiers /** The discipline start node identifiers.*/,
                std::vector<NXString> & names /** The discipline start node identifiers.*/
            );
            /** Given an identifier, this routine returns it's child identifiers. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void PartLibraryGetChildNodes
            (
                const NXString & nodeIdentifier /** A part library node identifier. */,
                std::vector<NXString> & childIdentifiers /** The child node identifiers. */,
                std::vector<NXString> & names /** The discipline start node identifiers.*/
            );
            /** Given an identifier, this routine returns it's child identifiers. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void PartLibraryGetChildNodes
            (
                const char * nodeIdentifier /** A part library node identifier. */,
                std::vector<NXString> & childIdentifiers /** The child node identifiers. */,
                std::vector<NXString> & names /** The discipline start node identifiers.*/
            );
            /** Given a node identifier, this routine will return all parts associated with that node. @return  An array of parts. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CharacteristicList * PartLibraryGetPartsAtNode
            (
                const NXString & nodeIdentifier /** A part library node identifier. */
            );
            /** Given a node identifier, this routine will return all parts associated with that node. @return  An array of parts. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXOpen::Routing::CharacteristicList * PartLibraryGetPartsAtNode
            (
                const char * nodeIdentifier /** A part library node identifier. */
            );
            /** Execute a search query into the part library starting at a specific node. The search will include
                        the given node and all of it's children, recursively. @return  Search Results 
             <br>  @deprecated Deprecated in NX8.5.3.  Use @link NXOpen::Routing::ReuseLibrary::GetMatchingParts NXOpen::Routing::ReuseLibrary::GetMatchingParts@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.3.  Use NXOpen::Routing::ReuseLibrary::GetMatchingParts instead.") NXOpen::Routing::CharacteristicList * PartLibraryQuery
            (
                const NXString & startingIdentifier /** Identifier to begin the search from. */,
                NXOpen::Routing::CharacteristicList * searchCriteria /** Search Criteria */
            );
            /** Execute a search query into the part library starting at a specific node. The search will include
                        the given node and all of it's children, recursively. @return  Search Results 
             <br>  @deprecated Deprecated in NX8.5.3.  Use @link NXOpen::Routing::ReuseLibrary::GetMatchingParts NXOpen::Routing::ReuseLibrary::GetMatchingParts@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXOpen::Routing::CharacteristicList * PartLibraryQuery
            (
                const char * startingIdentifier /** Identifier to begin the search from. */,
                NXOpen::Routing::CharacteristicList * searchCriteria /** Search Criteria */
            );
            /** Query the reuse library for all parts that match the given search criteria. The search will include 
                        the given node and all of its children.  @return  Search Results 
             <br>  Created in NX8.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::CharacteristicList *> GetMatchingParts
            (
                const NXString & startingIdentifier /** Node from which to begin the search. */,
                NXOpen::Routing::CharacteristicList * searchCriteria /** Search Criteria */
            );
            /** Query the reuse library for all parts that match the given search criteria. The search will include 
                        the given node and all of its children.  @return  Search Results 
             <br>  Created in NX8.5.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            std::vector<NXOpen::Routing::CharacteristicList *> GetMatchingParts
            (
                const char * startingIdentifier /** Node from which to begin the search. */,
                NXOpen::Routing::CharacteristicList * searchCriteria /** Search Criteria */
            );
            /** Returns the names of all of the specifications that are defined for the current discipline. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetDisciplineSpecifications
            (
                std::vector<NXString> & specs /** Specification names. */
            );
            /** Returns the name of the current specification.  @return  The name of the current specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString SpecificationsGetCurrent
            (
            );
            /** Adds a new empty specification to the library. The input name can be used
                        to configure the specification once it has been added. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AddNewSpecification
            (
                const NXString & specName /** The name of the new specification. */
            );
            /** Adds a new empty specification to the library. The input name can be used
                        to configure the specification once it has been added. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void AddNewSpecification
            (
                const char * specName /** The name of the new specification. */
            );
            /** Sets the description text for a specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsSetDescription
            (
                const NXString & specName /** The name of the specification. */,
                const NXString & description /** The description to add. */
            );
            /** Sets the description text for a specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsSetDescription
            (
                const char * specName /** The name of the specification. */,
                const char * description /** The description to add. */
            );
            /** Gets the description of a specification.   @return  Specification description. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString SpecificationsGetDescription
            (
                const NXString & specName /** The name of the specification. */
            );
            /** Gets the description of a specification.   @return  Specification description. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXString SpecificationsGetDescription
            (
                const char * specName /** The name of the specification. */
            );
            /** Sets the attribute relationships for a specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsSetAttributeRelationships
            (
                const NXString & specName /** The name of the specification. */,
                const NXString & nodeIdentifier /** A part library node identifier. */,
                NXOpen::Routing::CharacteristicList * attributeFilter /** Attribute filters. */
            );
            /** Sets the attribute relationships for a specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsSetAttributeRelationships
            (
                const char * specName /** The name of the specification. */,
                const char * nodeIdentifier /** A part library node identifier. */,
                NXOpen::Routing::CharacteristicList * attributeFilter /** Attribute filters. */
            );
            /** Gets the attribute relationships at a given library node.  @return  Attribute filters. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::CharacteristicList * SpecificationsGetAttributeRelationships
            (
                const NXString & specName /** The name of the specification. */,
                const NXString & nodeIdentifier /** A part library node identifier. */,
                int* numFilters /** numfilters */ 
            );
            /** Gets the attribute relationships at a given library node.  @return  Attribute filters. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::Routing::CharacteristicList * SpecificationsGetAttributeRelationships
            (
                const char * specName /** The name of the specification. */,
                const char * nodeIdentifier /** A part library node identifier. */,
                int* numFilters /** numfilters */ 
            );
            /** Gets the branch compatibilities for the input specification. Compatibilities can be identified by indexing into
                        the NPSValues and NPS_BRANCHValues arrays. Index 0 in each array is a compatibility and so on. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetBranchTable
            (
                const NXString & specName /** The name of the specification. */,
                std::vector<double> & npsValues /** The NPS Values. */,
                std::vector<double> & npsBranchValues /** The NPS_BRANCH values. */
            );
            /** Gets the branch compatibilities for the input specification. Compatibilities can be identified by indexing into
                        the NPSValues and NPS_BRANCHValues arrays. Index 0 in each array is a compatibility and so on. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsGetBranchTable
            (
                const char * specName /** The name of the specification. */,
                std::vector<double> & npsValues /** The NPS Values. */,
                std::vector<double> & npsBranchValues /** The NPS_BRANCH values. */
            );
            /** Sets a branch compatibility. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsSetBranchCompatibility
            (
                const NXString & specName /** The name of the specification. */,
                double nps /** NPS Value */,
                double npsBranch /** NPS_BRANCH Vale */
            );
            /** Sets a branch compatibility. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsSetBranchCompatibility
            (
                const char * specName /** The name of the specification. */,
                double nps /** NPS Value */,
                double npsBranch /** NPS_BRANCH Vale */
            );
            /** Removes a branch compatibility 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsRemoveBranchCompatibility
            (
                const NXString & specName /** The name of the specification. */,
                double nps /** NPS Value */,
                double npsBranch /** NPS_BRANCH value */
            );
            /** Removes a branch compatibility 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsRemoveBranchCompatibility
            (
                const char * specName /** The name of the specification. */,
                double nps /** NPS Value */,
                double npsBranch /** NPS_BRANCH value */
            );
            /** Adds a connection compatibility to the specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsAddConnectionCompatibility
            (
                const NXString & specName /** The name of the specification. */,
                const NXString & connectionTypeOne /** Value of the first CONNECTION_TYPE attribute. */,
                const NXString & connectionTypeTwo /** Value of the second CONNECTION_TYPE attribute.*/
            );
            /** Adds a connection compatibility to the specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsAddConnectionCompatibility
            (
                const char * specName /** The name of the specification. */,
                const char * connectionTypeOne /** Value of the first CONNECTION_TYPE attribute. */,
                const char * connectionTypeTwo /** Value of the second CONNECTION_TYPE attribute.*/
            );
            /** Removes a connection compatibility from the specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsRemoveConnectionCompatibility
            (
                const NXString & specName /** Name of the specification. */,
                const NXString & connectionTypeOne /** Value of the first CONNECTION_TYPE attribute. */,
                const NXString & connectionTypeTwo /** Value of the second CONNECTION_TYPE attribute.*/
            );
            /** Removes a connection compatibility from the specification. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsRemoveConnectionCompatibility
            (
                const char * specName /** Name of the specification. */,
                const char * connectionTypeOne /** Value of the first CONNECTION_TYPE attribute. */,
                const char * connectionTypeTwo /** Value of the second CONNECTION_TYPE attribute.*/
            );
            /** Get the list of connection compatibilities from the specificaiton. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetConnectionCompatibilities
            (
                const NXString & specName /** Specification name. */,
                std::vector<NXString> & connectionTypesOne /** Values for the first CONNECTION_TYPE attribute. */,
                std::vector<NXString> & connectionTypesTwo /** Values for the second CONNECTION_TYPE attribute. */
            );
            /** Get the list of connection compatibilities from the specificaiton. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsGetConnectionCompatibilities
            (
                const char * specName /** Specification name. */,
                std::vector<NXString> & connectionTypesOne /** Values for the first CONNECTION_TYPE attribute. */,
                std::vector<NXString> & connectionTypesTwo /** Values for the second CONNECTION_TYPE attribute. */
            );
            /** Set Connection post placement rules on a valid connection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsSetConnectionPostPlacement
            (
                const NXString & specName /** Specification name. */,
                const NXString & connectionTypeOne /** The first CONNECTION_TYPE value. */,
                const NXString & connectionTypeTwo /** The second CONNECTION_TYPE value.  */,
                bool gasket /** Whether or not to place Gaskets for this connection. */,
                bool bolt /** Whether or not to place Bolts for this connection. */,
                bool stud /** Whether or not to place Studs for this connection. */,
                bool nut /** Whether or not to place Nuts for this connection. */,
                bool washers /** Whether or not to place Washers for this connection. */,
                bool weldRing /** Whether or not to place Weld Rings for this connection. */,
                bool ringJoints /** ringjoints */ 
            );
            /** Set Connection post placement rules on a valid connection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsSetConnectionPostPlacement
            (
                const char * specName /** Specification name. */,
                const char * connectionTypeOne /** The first CONNECTION_TYPE value. */,
                const char * connectionTypeTwo /** The second CONNECTION_TYPE value.  */,
                bool gasket /** Whether or not to place Gaskets for this connection. */,
                bool bolt /** Whether or not to place Bolts for this connection. */,
                bool stud /** Whether or not to place Studs for this connection. */,
                bool nut /** Whether or not to place Nuts for this connection. */,
                bool washers /** Whether or not to place Washers for this connection. */,
                bool weldRing /** Whether or not to place Weld Rings for this connection. */,
                bool ringJoints /** ringjoints */ 
            );
            /** Get post placement options for a given connection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetConnectionPostPlacement
            (
                const NXString & specName /** Specification name. */,
                const NXString & connectionTypeOne /** The first CONNECTION_TYPE value. */,
                const NXString & connectionTypeTwo /** The second CONNECTION_TYPE value. */,
                bool* gasket /** Whether or not to place Gaskets for this connection. */,
                bool* bolt /** Whether or not to place Bolts for this connection. */,
                bool* stud /** Whether or not to place Studs for this connection. */,
                bool* nut /** Whether or not to place Nuts for this connection. */,
                bool* washers /** Whether or not to place Washers for this connection. */,
                bool* weldRing /** Whether or not to place Weld Rings for this connection. */,
                bool* ringJoints /** ringjoints */ 
            );
            /** Get post placement options for a given connection. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsGetConnectionPostPlacement
            (
                const char * specName /** Specification name. */,
                const char * connectionTypeOne /** The first CONNECTION_TYPE value. */,
                const char * connectionTypeTwo /** The second CONNECTION_TYPE value. */,
                bool* gasket /** Whether or not to place Gaskets for this connection. */,
                bool* bolt /** Whether or not to place Bolts for this connection. */,
                bool* stud /** Whether or not to place Studs for this connection. */,
                bool* nut /** Whether or not to place Nuts for this connection. */,
                bool* washers /** Whether or not to place Washers for this connection. */,
                bool* weldRing /** Whether or not to place Weld Rings for this connection. */,
                bool* ringJoints /** ringjoints */ 
            );
            /** Defines Post Placement rules. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsDefinePostPlacementRules
            (
                const NXString & specName /** Specification Name. */,
                NXOpen::Routing::ReuseLibrary::PartType partType /** Post Placement Type */,
                const NXString & startingIdentifier /** Library Node to search from. */,
                std::vector<NXString> & searchAttributes /** Search Attribute Titles. */
            );
            /** Defines Post Placement rules. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsDefinePostPlacementRules
            (
                const char * specName /** Specification Name. */,
                NXOpen::Routing::ReuseLibrary::PartType partType /** Post Placement Type */,
                const char * startingIdentifier /** Library Node to search from. */,
                std::vector<NXString> & searchAttributes /** Search Attribute Titles. */
            );
            /** Gets post placement rules. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetPostPlacementRules
            (
                const NXString & specName /** Specification name. */,
                NXOpen::Routing::ReuseLibrary::PartType partType /** Part Type. */,
                NXString* startingIdentifier /** Library node to begin searching from. */,
                std::vector<NXString> & searchAttributes /** Search Attribute Titles. */
            );
            /** Gets post placement rules. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsGetPostPlacementRules
            (
                const char * specName /** Specification name. */,
                NXOpen::Routing::ReuseLibrary::PartType partType /** Part Type. */,
                NXString* startingIdentifier /** Library node to begin searching from. */,
                std::vector<NXString> & searchAttributes /** Search Attribute Titles. */
            );
            /** Sets the report in BOM flags. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsSetReportInBom
            (
                const NXString & specName /** Spec Name */,
                bool gasket /** Report Gaskets */,
                bool bolt /** Report Bolts */,
                bool stud /** Report Studs */,
                bool nut /** Report Nuts */,
                bool washers /** Report Washers */,
                bool weldRing /** Report Weld Rings */,
                bool ringJoints /** Report Ring Joints */,
                bool weldGap /** weldgap */ 
            );
            /** Sets the report in BOM flags. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsSetReportInBom
            (
                const char * specName /** Spec Name */,
                bool gasket /** Report Gaskets */,
                bool bolt /** Report Bolts */,
                bool stud /** Report Studs */,
                bool nut /** Report Nuts */,
                bool washers /** Report Washers */,
                bool weldRing /** Report Weld Rings */,
                bool ringJoints /** Report Ring Joints */,
                bool weldGap /** weldgap */ 
            );
            /** Gets the Report in BOM flags. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetReportInBom
            (
                const NXString & specName /** Specification Name */,
                bool* gasket /** Report Gaskets */,
                bool* bolt /** Report Bolts */,
                bool* stud /** Report Studs*/,
                bool* nut /** Report Nuts*/,
                bool* washers /** Report Washers*/,
                bool* weldRing /** Report Weld Rings*/,
                bool* ringJoints /** Report Ring Joints*/,
                bool* weldGap /** weldgap */ 
            );
            /** Gets the Report in BOM flags. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsGetReportInBom
            (
                const char * specName /** Specification Name */,
                bool* gasket /** Report Gaskets */,
                bool* bolt /** Report Bolts */,
                bool* stud /** Report Studs*/,
                bool* nut /** Report Nuts*/,
                bool* washers /** Report Washers*/,
                bool* weldRing /** Report Weld Rings*/,
                bool* ringJoints /** Report Ring Joints*/,
                bool* weldGap /** weldgap */ 
            );
            /** Sets the General Connection Options. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsSetGeneralConnectionOptions
            (
                const NXString & specName /** Specification Name*/,
                bool modelGaskets /** Whether or not to model Gaskets*/,
                bool modelWeldGaps /** Whether or not to model weld gaps. */,
                double additionalBoltLength /** Additional length to add to bolts */,
                double additionalStudLength /** Additional length to add to studs*/,
                double weldGapValue /** weldgapvalue */ 
            );
            /** Sets the General Connection Options. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsSetGeneralConnectionOptions
            (
                const char * specName /** Specification Name*/,
                bool modelGaskets /** Whether or not to model Gaskets*/,
                bool modelWeldGaps /** Whether or not to model weld gaps. */,
                double additionalBoltLength /** Additional length to add to bolts */,
                double additionalStudLength /** Additional length to add to studs*/,
                double weldGapValue /** weldgapvalue */ 
            );
            /** Gets the general connection options. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetGeneralConnectionOptions
            (
                const NXString & specName /** Specification Name */,
                bool* modelGaskets /** Whether or not to model Gaskets */,
                bool* modelWeldGaps /** Whether or not to model Weld Gaps */,
                double* additionalBoltLength /** Additional length for bolts. */,
                double* additionalStudLength /** Additional length for studs*/,
                double* weldGapValue /** weldgapvalue */ 
            );
            /** Gets the general connection options. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsGetGeneralConnectionOptions
            (
                const char * specName /** Specification Name */,
                bool* modelGaskets /** Whether or not to model Gaskets */,
                bool* modelWeldGaps /** Whether or not to model Weld Gaps */,
                double* additionalBoltLength /** Additional length for bolts. */,
                double* additionalStudLength /** Additional length for studs*/,
                double* weldGapValue /** weldgapvalue */ 
            );
            /** Add a generic post placmeent rule. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsAddGenericPostPlacement
            (
                const NXString & specName /** Specification Name */,
                const NXString & placedPartIdentifier /** The placed part node identifier. */,
                const NXString & postPlacementIdentifier /** The post placement part identifier. */,
                std::vector<NXString> & searchAttributes /** Attribute search titles. */
            );
            /** Add a generic post placmeent rule. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsAddGenericPostPlacement
            (
                const char * specName /** Specification Name */,
                const char * placedPartIdentifier /** The placed part node identifier. */,
                const char * postPlacementIdentifier /** The post placement part identifier. */,
                std::vector<NXString> & searchAttributes /** Attribute search titles. */
            );
            /** Remove a generic post placement option.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsRemoveGenericPostPlacement
            (
                const NXString & specName /** Specification Name */,
                const NXString & placedPartIdentifier /** Placed part node identifier. */,
                const NXString & postPlacementIdentifier /** postplacementidentifier */ 
            );
            /** Remove a generic post placement option.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsRemoveGenericPostPlacement
            (
                const char * specName /** Specification Name */,
                const char * placedPartIdentifier /** Placed part node identifier. */,
                const char * postPlacementIdentifier /** postplacementidentifier */ 
            );
            /** Gets the defined generic post placement rules. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetGenericPostPlacements
            (
                const NXString & specName /** Specification Name. */,
                std::vector<NXString> & placedPartIdentifier /** The list of placed part node identifiers */,
                std::vector<NXString> & postPlacementIdentifier /** The list of post placement node identifiers. */
            );
            /** Gets the defined generic post placement rules. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsGetGenericPostPlacements
            (
                const char * specName /** Specification Name. */,
                std::vector<NXString> & placedPartIdentifier /** The list of placed part node identifiers */,
                std::vector<NXString> & postPlacementIdentifier /** The list of post placement node identifiers. */
            );
            /** Get the generic post placement search attributes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SpecificationsGetGenericPostPlacementSearchAttributes
            (
                const NXString & specName /** Specification Name */,
                const NXString & placedPartIdentifier /** Placed part node identifier. */,
                const NXString & postPlacementIdentifier /** Post placement node identifier */,
                std::vector<NXString> & searchAttributes /** Attribute search titles. */
            );
            /** Get the generic post placement search attributes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SpecificationsGetGenericPostPlacementSearchAttributes
            (
                const char * specName /** Specification Name */,
                const char * placedPartIdentifier /** Placed part node identifier. */,
                const char * postPlacementIdentifier /** Post placement node identifier */,
                std::vector<NXString> & searchAttributes /** Attribute search titles. */
            );
            /** Reload Specifications into the reuse library. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ReloadSpecifications
            (
                bool forceReload /** Should the specifications be forced to reload? 
                                                           Setting forceReload false will reload only if there are no 
                                                           (non-legacy) specifications loaded in the reuse library. */
            );
            /** Reload a Specification into the reuse library. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ReloadSpecification
            (
                const NXString & specName /** Specification Name */
            );
            /** Reload a Specification into the reuse library. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void ReloadSpecification
            (
                const char * specName /** Specification Name */
            );
            /** Delete a Specification from the reuse library. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void DeleteSpecification
            (
                const NXString & specName /** Specification Name */
            );
            /** Delete a Specification from the reuse library. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void DeleteSpecification
            (
                const char * specName /** Specification Name */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
