#ifndef NXOpen_TOOLING_MOLDFEATURERECOGNITIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_MOLDFEATURERECOGNITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_MoldFeatureRecognitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_MoldFeatureRecognitionBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class MoldFeatureRecognitionBuilder;
    }
    class Builder;
    class Expression;
    class SelectBody;
    namespace Tooling
    {
        class _MoldFeatureRecognitionBuilderBuilder;
        class MoldFeatureRecognitionBuilderImpl;
        /** Represents a @link NXOpen::Tooling::MoldFeatureRecognitionBuilder NXOpen::Tooling::MoldFeatureRecognitionBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::MoldwizardManager::CreateMoldFeatureRecognitionBuilder  NXOpen::Tooling::MoldwizardManager::CreateMoldFeatureRecognitionBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DraftAngle.Value </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        MaximumRibLength.Value </td> <td> 
         
        2.0 (millimeters part), 0.07 (inches part) </td> </tr> 

        <tr><td> 
         
        MaximumRibThickness.Value </td> <td> 
         
        5.0 (millimeters part), 0.19 (inches part) </td> </tr> 

        <tr><td> 
         
        UndercutMinimumWidth.Value </td> <td> 
         
        0.25 (millimeters part), 0.0098 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  MoldFeatureRecognitionBuilder : public NXOpen::Builder
        {
            private: MoldFeatureRecognitionBuilderImpl * m_moldfeaturerecognitionbuilder_impl;
            private: friend class  _MoldFeatureRecognitionBuilderBuilder;
            protected: MoldFeatureRecognitionBuilder();
            public: ~MoldFeatureRecognitionBuilder();
            /**Returns  the selected body for analysis 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * SelectionBody
            (
            );
            /** Analyze selected body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void AnalyzeMoldBody
            (
            );
            /** Export analysis result 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void ExportResult
            (
            );
            /**Returns  the x dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double XDimension
            (
            );
            /**Sets  the x dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetXDimension
            (
                double xLength /** xlength */ 
            );
            /**Returns  the y dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double YDimension
            (
            );
            /**Sets  the y dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetYDimension
            (
                double yLength /** ylength */ 
            );
            /**Returns  the z dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double ZDimension
            (
            );
            /**Sets  the z dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetZDimension
            (
                double zLength /** zlength */ 
            );
            /**Returns  the minimum x dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MinimumXDimension
            (
            );
            /**Sets  the minimum x dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMinimumXDimension
            (
                double minxLength /** minxlength */ 
            );
            /**Returns  the minimum y dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MinimumYDimension
            (
            );
            /**Sets  the minimum y dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMinimumYDimension
            (
                double minyLength /** minylength */ 
            );
            /**Returns  the minimum z dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MinimumZDimension
            (
            );
            /**Sets  the minimum z dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMinimumZDimension
            (
                double minzLength /** minzlength */ 
            );
            /**Returns  the surface area value 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double BodySurfaceArea
            (
            );
            /**Sets  the surface area value 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetBodySurfaceArea
            (
                double surfaceArea /** surfacearea */ 
            );
            /**Returns  the product body volume 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double PartVolume
            (
            );
            /**Sets  the product body volume 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetPartVolume
            (
                double partVolume /** partvolume */ 
            );
            /**Returns  the project area 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double BodyProjectArea
            (
            );
            /**Sets  the project area 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetBodyProjectArea
            (
                double bodyProjectArea /** bodyprojectarea */ 
            );
            /**Returns  the minimum wall thickness 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MinimumWallThickness
            (
            );
            /**Sets  the minimum wall thickness 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMinimumWallThickness
            (
                double minWallThickness /** minwallthickness */ 
            );
            /**Returns  the maximum wall thickness 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MaximumWallThickness
            (
            );
            /**Sets  the maximum wall thickness 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMaximumWallThickness
            (
                double maxWallThickness /** maxwallthickness */ 
            );
            /**Returns  the undercut minimum width 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UndercutMinimumWidth
            (
            );
            /**Returns  the draft angle 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DraftAngle
            (
            );
            /**Returns  the maximum rib length to be recognized 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumRibLength
            (
            );
            /**Returns  the maximum rib thickness to be recognized 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumRibThickness
            (
            );
            /** Set the product orientation 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetProductOrientation
            (
                const NXOpen::Matrix3x3 & matrix /** matrix */ 
            );
            /** Get the product orientation  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 GetProductOrientation
            (
            );
            /**Returns  the value that indicates whether to save part and export analysis data or not. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool SaveAndExportStatus
            (
            );
            /**Sets  the value that indicates whether to save part and export analysis data or not. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetSaveAndExportStatus
            (
                bool status /** status */ 
            );
            /**Returns  the folder in which output XML results can be found 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString XmlFolderBrowser
            (
            );
            /**Sets  the folder in which output XML results can be found 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetXmlFolderBrowser
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the folder in which output XML results can be found 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetXmlFolderBrowser
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the folder of part file to be saved 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString PartFolderBrowser
            (
            );
            /**Sets  the folder of part file to be saved 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetPartFolderBrowser
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the folder of part file to be saved 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetPartFolderBrowser
            (
                const char * foldername /** foldername */ 
            );
            /** Free all product feature data 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void ReleaseAllProductFeatureData
            (
            );
            /** Find and collect molding features 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void FindMoldFeatures
            (
            );
            /** Set the value whether user has changed core/cavity faces or not. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetIsCoreCavityFaceChanged
            (
                bool status /** status */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
