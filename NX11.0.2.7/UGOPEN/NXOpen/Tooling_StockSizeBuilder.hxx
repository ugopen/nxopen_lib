#ifndef NXOpen_TOOLING_STOCKSIZEBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_STOCKSIZEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_StockSizeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_StockSizeBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class StockSizeBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class Expression;
    class NXObject;
    class SelectBodyList;
    class SelectCoordinateSystem;
    namespace Tooling
    {
        class _StockSizeBuilderBuilder;
        class StockSizeBuilderImpl;
        /** Represents a Tooling::StockSizeBuilder builder.  <br> To create a new instance of this class, use @link NXOpen::Tooling::StockSizeCollection::CreateStocksizeBuilder  NXOpen::Tooling::StockSizeCollection::CreateStocksizeBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Associative </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Clearance.Value </td> <td> 
         
        3.0 (millimeters part), 0.125 (inches part) </td> </tr> 

        <tr><td> 
         
        IsClearanceAutoSet </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ReferenceCsysType </td> <td> 
         
        Wcs </td> </tr> 

        <tr><td> 
         
        SizePrecision </td> <td> 
         
        3 </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  StockSizeBuilder : public NXOpen::Builder
        {
            /** Represents the shape of stock size. */
            public: enum Types
            {
                TypesBlock/** The shape is a block */,
                TypesCylinder/** The shape is a cylinder */
            };

            /** Represents the reference CSYS type. */
            public: enum RefCsysType
            {
                RefCsysTypeWcs/** reference WCS*/,
                RefCsysTypeAbsoluteDisplayedPart/** reference ABS in displayed part*/,
                RefCsysTypeSelectedCSYS/** reference the selected csys*/
            };

            /** Represents the shape of stock size. This is to be obsoleted.*/
            public: enum Shape
            {
                ShapeBlock/** The shape is a block */,
                ShapeCylinder/** The shape is a cylinder */
            };

            /** Represents the base circle type of cylinder.*/
            public: enum Cylinder
            {
                CylinderCircumscribed/** circumcircle based cylinder */,
                CylinderInscribedCircle/** inscribed circle based cylinder */
            };

            private: StockSizeBuilderImpl * m_stocksizebuilder_impl;
            private: friend class  _StockSizeBuilderBuilder;
            protected: StockSizeBuilder();
            public: ~StockSizeBuilder();
            /**Returns  the selected body to calculate a bounding box for stock size. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectBody
            (
            );
            /**Returns  the reference csys to calculate stocksize.
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") NXOpen::CoordinateSystem * RefCsys
            (
            );
            /**Sets  the reference csys to calculate stocksize.
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") void SetRefCsys
            (
                NXOpen::CoordinateSystem * refCsys /** refcsys */ 
            );
            /**Returns  the stock shape to be generated, it can be a box or cylinder. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") NXOpen::Tooling::StockSizeBuilder::Shape StockType
            (
            );
            /**Sets  the stock shape to be generated, it can be a box or cylinder. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") void SetStockType
            (
                NXOpen::Tooling::StockSizeBuilder::Shape enumStockType /** enumstocktype */ 
            );
            /**Returns  the cylinder type to generate a cylinder for the stock size. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") NXOpen::Tooling::StockSizeBuilder::Cylinder CylinderType
            (
            );
            /**Sets  the cylinder type to generate a cylinder for the stock size. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") void SetCylinderType
            (
                NXOpen::Tooling::StockSizeBuilder::Cylinder enumCylinderType /** enumcylindertype */ 
            );
            /**Returns  the stock size string, it is separated by " X ". 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringStock
            (
            );
            /**Sets  the stock size string, it is separated by " X ". 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStringStock
            (
                const NXString & stringStock /** stringstock */ 
            );
            /**Sets  the stock size string, it is separated by " X ". 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetStringStock
            (
                const char * stringStock /** stringstock */ 
            );
            /**Returns  the size precision of the stock. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int SizePrecision
            (
            );
            /**Sets  the size precision of the stock. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSizePrecision
            (
                int integerPrecision /** integerprecision */ 
            );
            /**Returns  the clearance of the stocksize. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Clearance
            (
            );
            /** Modifies the reference csys for stock size. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void ModifyRefCsys
            (
                const NXOpen::Point3d & inputOrigin /** inputorigin */ ,
                const NXOpen::Matrix3x3 & inputMatrix /** inputmatrix */ 
            );
            /** Creates the reference csys for stock size. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateRefCsys
            (
                const NXOpen::Point3d & inputOrigin /** inputorigin */ ,
                const NXOpen::Matrix3x3 & inputMatrix /** inputmatrix */ 
            );
            /** Add or edit stock size attributes. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void EditStockSizeAttr
            (
                NXOpen::NXObject * workPart /** workpart */ 
            );
            /**Returns  the reference csys type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::StockSizeBuilder::RefCsysType ReferenceCsysType
            (
            );
            /**Sets  the reference csys type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetReferenceCsysType
            (
                NXOpen::Tooling::StockSizeBuilder::RefCsysType referenceCsysType /** referencecsystype */ 
            );
            /**Returns  the reference csys to calculate stocksize.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectCoordinateSystem * RefCsysSelection
            (
            );
            /**Returns  the cylinder axis vector to calculate cylinder stock szie
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * AxisVector
            (
            );
            /**Sets  the cylinder axis vector to calculate cylinder stock szie
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAxisVector
            (
                NXOpen::Direction * cylinderVector /** cylindervector */ 
            );
            /**Returns  the stock shape to be generated, it can be a block or cylinder. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::StockSizeBuilder::Types Type
            (
            );
            /**Sets  the stock shape to be generated, it can be a block or cylinder. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::StockSizeBuilder::Types type /** type */ 
            );
            /**Returns  the blank size string, it is separated by " X ". 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BlankSize
            (
            );
            /**Sets  the blank size string, it is separated by " X ". 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBlankSize
            (
                const NXString & blankSize /** blanksize */ 
            );
            /**Sets  the blank size string, it is separated by " X ". 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetBlankSize
            (
                const char * blankSize /** blanksize */ 
            );
            /**Returns  the blank size precision string. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double BlankPrecisionValue
            (
            );
            /**Sets  the blank size precision string. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBlankPrecisionValue
            (
                double blankPrecisionValue /** blankprecisionvalue */ 
            );
            /**Returns  the connection string 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ConnectionString
            (
            );
            /**Sets  the connection string 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetConnectionString
            (
                const NXString & connectionString /** connectionstring */ 
            );
            /**Sets  the connection string 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetConnectionString
            (
                const char * connectionString /** connectionstring */ 
            );
            /**Returns  the is clearance auto set 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsClearanceAutoSet
            (
            );
            /**Sets  the is clearance auto set 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetClearanceAutoSet
            (
                bool isClearanceAutoSet /** isclearanceautoset */ 
            );
            /**Returns  the clearance value for the blank in +X direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetPositiveX
            (
            );
            /**Sets  the clearance value for the blank in +X direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOffsetPositiveX
            (
                double offsetPositiveX /** offsetpositivex */ 
            );
            /**Returns  the clearance value for the blank in -X direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetNegativeX
            (
            );
            /**Sets  the clearance value for the blank in -X direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOffsetNegativeX
            (
                double offsetNegativeX /** offsetnegativex */ 
            );
            /**Returns  the clearance value for the blank in +Y direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetPositiveY
            (
            );
            /**Sets  the clearance value for the blank in +Y direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOffsetPositiveY
            (
                double offsetPositiveY /** offsetpositivey */ 
            );
            /**Returns  the clearance value for the blank in -Y direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetNegativeY
            (
            );
            /**Sets  the clearance value for the blank in -Y direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOffsetNegativeY
            (
                double offsetNegativeY /** offsetnegativey */ 
            );
            /**Returns  the clearance value for the blank in +Z direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetPositiveZ
            (
            );
            /**Sets  the clearance value for the blank in +Z direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOffsetPositiveZ
            (
                double offsetPositiveZ /** offsetpositivez */ 
            );
            /**Returns  the clearance value for the blank in -Z direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double OffsetNegativeZ
            (
            );
            /**Sets  the clearance value for the blank in -Z direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOffsetNegativeZ
            (
                double offsetNegativeZ /** offsetnegativez */ 
            );
            /**Returns  the clearance value for the cylinder blank in radial direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double RadialOffset
            (
            );
            /**Sets  the clearance value for the cylinder blank in radial direction. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRadialOffset
            (
                double radialOffset /** radialoffset */ 
            );
            /** Update blank size. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateBlankSizeString
            (
            );
            /** Update stock size. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateStockSizeString
            (
            );
            /** Calculate box size and get directions, edge length, lower point position. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CalculateBoxSize
            (
                NXOpen::Point3d* minPoint /** minpoint */ ,
                std::vector<double> & edgeLength /** edgelength */ ,
                NXOpen::Matrix3x3* cysMatrix /** cysmatrix */ 
            );
            /** Set the orientation of the current bounded box. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetManipulatorOrientation
            (
                const NXOpen::Matrix3x3 & cysMatrix /** cysmatrix */ 
            );
            /** Find out those extreme planar faces, and set fitting face status in all directions. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFitFaceStatus
            (
                bool fitFace /** fitface */ 
            );
            /**Returns  the association of stock size object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the association of stock size object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAssociative
            (
                bool isAssociation /** isassociation */ 
            );
            /** Set stock size object. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStockSizeObject
            (
                NXOpen::NXObject * stock /** stock */ 
            );
            /** Convert stock size object data to builder. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ConvertStockDataToBuilder
            (
                NXOpen::NXObject * stock /** stock */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
