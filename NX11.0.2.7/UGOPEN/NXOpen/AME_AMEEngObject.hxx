#ifndef NXOpen_AME_AMEENGOBJECT_HXX_INCLUDED
#define NXOpen_AME_AMEENGOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AMEEngObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEEngObject.hxx>
#include <NXOpen/AME_AspectNode.hxx>
#include <NXOpen/AME_PageBuilder.hxx>
#include <NXOpen/AME_IEngObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AMEEngObject;
    }
    namespace AME
    {
        class AspectNode;
    }
    namespace AME
    {
        class IEngObject;
    }
    class NXObject;
    namespace AME
    {
        class _AMEEngObjectBuilder;
        class AMEEngObjectImpl;
        /** Represents Engineering Object  <br> This object does not need a creator.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AMEEngObject : public NXOpen::NXObject, public virtual NXOpen::AME::IEngObject
        {
            private: AMEEngObjectImpl * m_ameengobject_impl;
            private: friend class  _AMEEngObjectBuilder;
            protected: AMEEngObject();
            public: ~AMEEngObject();
            /** Set the EO as placed/not-placed for a particular page type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPlacement
            (
                NXOpen::AME::PageBuilder::Types pageType /** pagetype */ ,
                bool status /** status */ 
            );
            /** Get the EO's placement for a particular page type  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool GetPlacement
            (
                NXOpen::AME::PageBuilder::Types pageType /** pagetype */ 
            );
            /** Removes the product selection from the device 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveProduct
            (
            );
            /** Get the Engineering Object aspects @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: virtual std::vector<NXOpen::AME::AspectNode *> GetAspects
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
