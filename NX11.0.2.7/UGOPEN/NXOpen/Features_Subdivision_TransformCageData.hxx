#ifndef NXOpen_FEATURES_SUBDIVISION_TRANSFORMCAGEDATA_HXX_INCLUDED
#define NXOpen_FEATURES_SUBDIVISION_TRANSFORMCAGEDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Subdivision_TransformCageData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_Subdivision_CageManipulatorData.hxx>
#include <NXOpen/Features_Subdivision_SelectCageObjectData.hxx>
#include <NXOpen/Features_Subdivision_TransformCageData.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace Subdivision
        {
            class TransformCageData;
        }
    }
    class Builder;
    class Direction;
    namespace Features
    {
        namespace Subdivision
        {
            class CageManipulatorData;
        }
    }
    namespace Features
    {
        namespace Subdivision
        {
            class SelectCageObjectData;
        }
    }
    class Plane;
    namespace Features
    {
        namespace Subdivision
        {
            class _TransformCageDataBuilder;
            class TransformCageDataImpl;
            /** Represents a @link NXOpen::Features::Subdivision::TransformCageData NXOpen::Features::Subdivision::TransformCageData@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Features::Subdivision::SubdivisionBodyCollection::CreateTransformCageData  NXOpen::Features::Subdivision::SubdivisionBodyCollection::CreateTransformCageData @endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            CanRelocateToolToSelection </td> <td> 
             
            true </td> </tr> 

            <tr><td> 
             
            CanReorientToolToSelection </td> <td> 
             
            true </td> </tr> 

            </table>  

             <br>  Created in NX9.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  TransformCageData : public NXOpen::Builder
            {
                /** Transformation method types */
                public: enum TransformationMethodType
                {
                    TransformationMethodTypeDrag/** Edit cage topology by direct dragging */,
                    TransformationMethodTypeTransform/** Edit cage topology by transformations */
                };

                /** Movement types */
                public: enum MovementMethodType
                {
                    MovementMethodTypeWCS/** Movement along WCS principal axis or plane */,
                    MovementMethodTypeView/** Movement in view plane */,
                    MovementMethodTypeVector/** Movement along arbitrary direction */,
                    MovementMethodTypePlane/** Movement in arbitrary plane */,
                    MovementMethodTypeNormal/** Movement along a face normal */,
                    MovementMethodTypeEdge/** Movement along an edge */
                };

                /** WCS principal axis or plane types */
                public: enum WCSOptionType
                {
                    WCSOptionTypeInferredAxis/** Along axis inferred during movement */,
                    WCSOptionTypeX/** Along X axis */,
                    WCSOptionTypeY/** Along Y axis */,
                    WCSOptionTypeZ/** Along Z axis */,
                    WCSOptionTypeYZ/** In YZ plane */,
                    WCSOptionTypeXZ/** In XZ plane */,
                    WCSOptionTypeXY/** In XY plane */
                };

                /** Scaling method */
                public: enum ScalingMethodType
                {
                    ScalingMethodTypeLinear/** Scale in the specified direction */,
                    ScalingMethodTypePlanar/** Scale in the plane normal to specified direction */,
                    ScalingMethodTypeUniform/** Scale uniformly all the directions */
                };

                /** Falloff method types */
                public: enum FallOffMethodType
                {
                    FallOffMethodTypeNone/** No falloff */,
                    FallOffMethodTypeSelected/** Selected vertices falloff */,
                    FallOffMethodTypeAll/** All vertices falloff */
                };

                private: TransformCageDataImpl * m_transformcagedata_impl;
                private: friend class  _TransformCageDataBuilder;
                protected: TransformCageData();
                public: ~TransformCageData();
                /**Returns  the cage manipulation data. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::Subdivision::CageManipulatorData * CageManipulator
                (
                );
                /**Returns  the transformation method. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::Subdivision::TransformCageData::TransformationMethodType TransformationMethod
                (
                );
                /**Sets  the transformation method. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetTransformationMethod
                (
                    NXOpen::Features::Subdivision::TransformCageData::TransformationMethodType method /** method */ 
                );
                /**Returns  the movement method. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::Subdivision::TransformCageData::MovementMethodType MovementMethod
                (
                );
                /**Sets  the movement method. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetMovementMethod
                (
                    NXOpen::Features::Subdivision::TransformCageData::MovementMethodType movementMethod /** movementmethod */ 
                );
                /**Returns  the WCS option. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::Subdivision::TransformCageData::WCSOptionType WCSOption
                (
                );
                /**Sets  the WCS option. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetWCSOption
                (
                    NXOpen::Features::Subdivision::TransformCageData::WCSOptionType wcsOption /** wcsoption */ 
                );
                /**Returns  the movement vector. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * MovementVector
                (
                );
                /**Sets  the movement vector. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetMovementVector
                (
                    NXOpen::Direction * movementVector /** movementvector */ 
                );
                /**Returns  the movement plane. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * MovementPlane
                (
                );
                /**Sets  the movement plane. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetMovementPlane
                (
                    NXOpen::Plane * movementPlane /** movementplane */ 
                );
                /**Returns  the flag indicating if transformer tool can be moved without transforming the selected cage topology. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool CanMoveToolOnly
                (
                );
                /**Sets  the flag indicating if transformer tool can be moved without transforming the selected cage topology. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetCanMoveToolOnly
                (
                    bool canMove /** canmove */ 
                );
                /**Returns  the flag indicating if transformer tool can be relocated based on cage topology selection. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool CanRelocateToolToSelection
                (
                );
                /**Sets  the flag indicating if transformer tool can be relocated based on cage topology selection. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetCanRelocateToolToSelection
                (
                    bool canRelocate /** canrelocate */ 
                );
                /**Returns  the flag indicating if transformer tool can be reoriented based on cage topology selection. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: bool CanReorientToolToSelection
                (
                );
                /**Sets  the flag indicating if transformer tool can be reoriented based on cage topology selection. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetCanReorientToolToSelection
                (
                    bool canReorient /** canreorient */ 
                );
                /**Returns  the scaling method. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::Subdivision::TransformCageData::ScalingMethodType ScalingMethod
                (
                );
                /**Sets  the scaling method. 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetScalingMethod
                (
                    NXOpen::Features::Subdivision::TransformCageData::ScalingMethodType scalingMethod /** scalingmethod */ 
                );
                /**Returns  the falloff method. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::Subdivision::TransformCageData::FallOffMethodType FallOffMethod
                (
                );
                /**Sets  the falloff method. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetFallOffMethod
                (
                    NXOpen::Features::Subdivision::TransformCageData::FallOffMethodType fallOffMethod /** falloffmethod */ 
                );
                /**Returns  the falloff objects. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::Subdivision::SelectCageObjectData * FallOffObjects
                (
                );
                /**Returns  the falloff factor. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: double FallOffFactor
                (
                );
                /**Sets  the falloff factor. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void SetFallOffFactor
                (
                    double factor /** factor */ 
                );
                /** Resets the falloff scale to linear. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_subdivision (" NX SUBDIVISION") */
                public: void ResetFallOffToLinear
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
