#ifndef NXOpen_FEATURES_FLOWBLENDBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_FLOWBLENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FlowBlendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FlowBlendBuilder.hxx>
#include <NXOpen/Features_SmoothRangeBuilder.hxx>
#include <NXOpen/Features_VariableRadiusPointsBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class FlowBlendBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SmoothRangeBuilder;
    }
    namespace Features
    {
        class SmoothRangeBuilderList;
    }
    namespace Features
    {
        class VariableRadiusPointsBuilder;
    }
    namespace Features
    {
        class VariableRadiusPointsBuilderList;
    }
    class ScCollector;
    namespace Features
    {
        class _FlowBlendBuilderBuilder;
        class FlowBlendBuilderImpl;
        /**
            Represents a @link NXOpen::Features::FlowBlend NXOpen::Features::FlowBlend@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateFlowBlendBuilder  NXOpen::Features::FeatureCollection::CreateFlowBlendBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Patch </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Trim (deprecated) </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  FlowBlendBuilder : public NXOpen::Features::FeatureBuilder
        {
            private: FlowBlendBuilderImpl * m_flowblendbuilder_impl;
            private: friend class  _FlowBlendBuilderBuilder;
            protected: FlowBlendBuilder();
            public: ~FlowBlendBuilder();
            /**Returns  the edge to blend 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * EdgeToBlend
            (
            );
            /**Returns  the control point object
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VariableRadiusPointsBuilderList * ControlPoint
            (
            );
            /** The control point object's create function @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::VariableRadiusPointsBuilder * NewControlPoint
            (
            );
            /**Returns  the smooth range object
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SmoothRangeBuilderList * SmoothRange
            (
            );
            /** The smooth range object's create function @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::SmoothRangeBuilder * NewSmoothRange
            (
            );
            /**Returns  the toggle to specify trim input faces or not 
             <br>  @deprecated Deprecated in NX10.0.1.  This functionality is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX10.0.1.  This functionality is no longer supported.") bool Trim
            (
            );
            /**Sets  the toggle to specify trim input faces or not 
             <br>  @deprecated Deprecated in NX10.0.1.  This functionality is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public:  NX_DEPRECATED("Deprecated in NX10.0.1.  This functionality is no longer supported.") void SetTrim
            (
                bool trim /** trim */ 
            );
            /**Returns  the toggle to specify patch to body or not 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: bool Patch
            (
            );
            /**Sets  the toggle to specify patch to body or not 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPatch
            (
                bool patch /** patch */ 
            );
            /**Returns  the patch trim option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool TrimInputFacesToExtendedRail
            (
            );
            /**Sets  the patch trim option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimInputFacesToExtendedRail
            (
                bool trimInputFacesToExtendedRail /** triminputfacestoextendedrail */ 
            );
            /**Returns  the tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
