#ifndef NXOpen_FEATURES_SHEETMETAL_AEROFLANGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHEETMETAL_AEROFLANGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SheetMetal_AeroFlangeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_SheetMetal_BendOptions.hxx>
#include <NXOpen/Features_SheetMetal_SheetmetalBaseBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace SheetMetal
        {
            class AeroFlangeBuilder;
        }
    }
    class Expression;
    namespace Features
    {
        namespace SheetMetal
        {
            class BendOptions;
        }
    }
    namespace Features
    {
        namespace SheetMetal
        {
            class SheetmetalBaseBuilder;
        }
    }
    class Plane;
    class ScCollector;
    namespace Features
    {
        namespace SheetMetal
        {
            class _AeroFlangeBuilderBuilder;
            class AeroFlangeBuilderImpl;
            /** Represents a Aerospace Sheet Metal Flange Builder. 
                     <br> To create a new instance of this class, use @link NXOpen::Features::SheetMetal::AeroSheetmetalManager::CreateFlangeBuilder  NXOpen::Features::SheetMetal::AeroSheetmetalManager::CreateFlangeBuilder @endlink  <br> 
             <br>  Created in NX4.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  AeroFlangeBuilder : public NXOpen::Features::SheetMetal::SheetmetalBaseBuilder
            {
                /** This enum defines the length type options. 
                            */
                public: enum LengthType
                {
                    LengthTypeValue/** Value */,
                    LengthTypeInfer/** Infer from face */
                };

                /** This enum defines the ends of a bend edge 
                            */
                public: enum EndType
                {
                    EndTypeEnd1/** Start of section */,
                    EndTypeEnd2/** End of section */,
                    EndTypeClosed/** Periodic Bend Edge */
                };

                /** This enum defines the type of direction vector 
                            */
                public: enum DirType
                {
                    DirTypeBend/** Bend Direction Type */,
                    DirTypeDiscard/** Discard Direction Type */
                };

                /** This method defines the types of Flange Compensation 
                            */
                public: enum CompType
                {
                    CompTypeAutomatic/** Automatic */,
                    CompTypeAngle/** Angle */,
                    CompTypeDistance/** Distance */,
                    CompTypeNone/** None */
                };

                /** This enum defines the material types 
                            */
                public: enum MatType
                {
                    MatTypeMaterialInside/** Material Inside */,
                    MatTypeMaterialOutside/** Material Outside */,
                    MatTypeBendOutside/** Bend Outside */
                };

                /** This enum defines the flange length dimension types 
                            */
                public: enum DimType
                {
                    DimTypeInside/** Inside Dimension */,
                    DimTypeOutside/** Outside Dimension */
                };

                private: AeroFlangeBuilderImpl * m_aeroflangebuilder_impl;
                private: friend class  _AeroFlangeBuilderBuilder;
                protected: AeroFlangeBuilder();
                public: ~AeroFlangeBuilder();
                /**Sets  the base edge section object for the flange.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetBaseEdges
                (
                    NXOpen::ScCollector * baseEdges /** Base Edges */
                );
                /**Returns  the base edge section object for the flange.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::ScCollector * BaseEdges
                (
                );
                /**Sets  the ref face smart collector object
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetRefFaces
                (
                    NXOpen::ScCollector * faceCollector /** face collector */ 
                );
                /**Returns  the ref face smart collector object
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::ScCollector * RefFaces
                (
                );
                /** Set the angle expression. 
                                This method should be called only when there is no ref_face selection.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetAngle
                (
                    const NXString & angleExpression /** value of angle expression */
                );
                /** Set the angle expression. 
                                This method should be called only when there is no ref_face selection.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                void SetAngle
                (
                    const char * angleExpression /** value of angle expression */
                );
                /**Returns  the angle expression. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::Expression * Angle
                (
                );
                /** Set the type of length and the length expression. 
                                If there are no ref_face's then the only length type 
                                possible is "Value". If there are selected ref_face's 
                                and the length type is "Infer", then the length 
                                expression should be NULL.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetLength
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::LengthType type /** length type input Value/Infer */,
                    const NXString & valueExpression /** value of length expression */
                );
                /** Set the type of length and the length expression. 
                                If there are no ref_face's then the only length type 
                                possible is "Value". If there are selected ref_face's 
                                and the length type is "Infer", then the length 
                                expression should be NULL.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                void SetLength
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::LengthType type /** length type input Value/Infer */,
                    const char * valueExpression /** value of length expression */
                );
                /** Get the type of length and the length expression. 
                             @return  length expression 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::Expression * GetLength
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::LengthType* type /** length type Value/Infer */
                );
                /** Set flip direction.
                                This method is called if either the bend direction or the
                                material direction needs to be flipped. 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetFlipDirection
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::DirType type /** direction type bend/discard */,
                    bool flipFlag /** flip_flag =\> false = do not flip, true = flip */
                );
                /** Get flip direction. 
                             @return  flip_flag =\> false = do not flip, true = flip 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: bool GetFlipDirection
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::DirType type /** direction type bend/discard */
                );
                /** Set end compensation.
                                This method sets the flange compensation for one end of a non-periodic
                                Base Edge section. The end_type input parameter denotes if the end is
                                the start of section(end1) or the end of section(end2). If the compensation
                                type( comp_type) is either Angle or Distance, an expression for the
                                value of compensation must be provided. This expression input can be NULL
                                for Automatic and None type of compensations.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetEndCompensation
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::EndType endType /** end1/end2 */,
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::CompType compType /** Automatic/Angle/Distance/None */,
                    const NXString & valueExpression /** value of compensation expression */
                );
                /** Set end compensation.
                                This method sets the flange compensation for one end of a non-periodic
                                Base Edge section. The end_type input parameter denotes if the end is
                                the start of section(end1) or the end of section(end2). If the compensation
                                type( comp_type) is either Angle or Distance, an expression for the
                                value of compensation must be provided. This expression input can be NULL
                                for Automatic and None type of compensations.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                void SetEndCompensation
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::EndType endType /** end1/end2 */,
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::CompType compType /** Automatic/Angle/Distance/None */,
                    const char * valueExpression /** value of compensation expression */
                );
                /** Get end compensation.
                             @return  compensation expression 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::Expression * GetEndCompensation
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::EndType endType /** end1/end2 */,
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::CompType* compType /** Automatic/Angle/Distance/None */
                );
                /** Set the end plane 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetEndPlane
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::EndType endType /** end1/end2 */,
                    NXOpen::Plane * endPlane /** smart plane entity */
                );
                /** Get the end plane 
                             @return  smart plane entity 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::Plane * GetEndPlane
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::EndType endType /** end1/end2 */
                );
                /** Set the flag that turns on/off the visibility of Contour Curve 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetContourFlag
                (
                    bool showContour /** false = Hide contour curve, true = Show contour curve */
                );
                /** Get the flag that turns on/off the visibility of Contour Curve 
                             @return  false = Hide contour curve, true = Show contour curve 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: bool GetContourFlag
                (
                );
                /** Set the material type of the flange 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetMaterialType
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::MatType matType /** material inside/material outside/bend outside */
                );
                /** Get the material type of the flange 
                             @return  material inside/material outside/bend outside 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::Features::SheetMetal::AeroFlangeBuilder::MatType GetMaterialType
                (
                );
                /** Set the length dimension type of the flange 
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: void SetDimensionType
                (
                    NXOpen::Features::SheetMetal::AeroFlangeBuilder::DimType dimType /** inside/outside */
                );
                /** Get the length dimension type of the flange 
                             @return  inside/outside 
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::Features::SheetMetal::AeroFlangeBuilder::DimType GetDimensionType
                (
                );
                /**Returns  the base edge section object for the flange.
                            
                 <br>  Created in NX4.0.0.  <br>  
                 <br> License requirements : aero_sheet_metal ("Aerospace Sheet Metal") OR adv_sheet_metal_dsgn ("ADVANCED SHEET METAL DESIGN") */
                public: NXOpen::Features::SheetMetal::BendOptions * BendOptions
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
