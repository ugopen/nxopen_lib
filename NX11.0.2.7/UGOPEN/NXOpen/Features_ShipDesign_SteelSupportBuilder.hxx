#ifndef NXOpen_FEATURES_SHIPDESIGN_STEELSUPPORTBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SHIPDESIGN_STEELSUPPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ShipDesign_SteelSupportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_ShipDesign_SteelSupportBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace ShipDesign
        {
            class SteelSupportBuilder;
        }
    }
    class CoordinateSystem;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class SelectTaggedObject;
    namespace Features
    {
        namespace ShipDesign
        {
            class _SteelSupportBuilderBuilder;
            class SteelSupportBuilderImpl;
            /**
                    Represents a @link NXOpen::Features::ShipDesign::SteelSupport NXOpen::Features::ShipDesign::SteelSupport@endlink  builder
                     <br> To create a new instance of this class, use @link NXOpen::Features::ShipCollection::CreateSteelSupportBuilder  NXOpen::Features::ShipCollection::CreateSteelSupportBuilder @endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            AngularDim.Value </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            EndCapThickness.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            EndOffset.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            Line1Offset.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            Line2Offset.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            PlacementMethod </td> <td> 
             
            TwoPlanesandLines </td> </tr> 

            <tr><td> 
             
            StartCapThickness.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            StartOffset.Value </td> <td> 
             
            0 (millimeters part), 0 (inches part) </td> </tr> 

            <tr><td> 
             
            SupportCapOptions </td> <td> 
             
            None </td> </tr> 

            </table>  

             <br>  Created in NX7.5.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  SteelSupportBuilder : public NXOpen::Features::FeatureBuilder
            {
                /** Method used to create the support feature */
                public: enum CreationMethod
                {
                    CreationMethodTwoPlanesandLines/** two planesand lines */ ,
                    CreationMethodSpecifyLine/** specify line */ ,
                    CreationMethodSpecifyCsys/** specify csys */ 
                };

                /** Does this feature have end caps, and if so what kind? */
                public: enum CapOptions
                {
                    CapOptionsNone/** none */ ,
                    CapOptionsTwoSided/** two sided */ ,
                    CapOptionsSymmetric/** symmetric */ 
                };

                private: SteelSupportBuilderImpl * m_steelsupportbuilder_impl;
                private: friend class  _SteelSupportBuilderBuilder;
                protected: SteelSupportBuilder();
                public: ~SteelSupportBuilder();
                /**Returns  the placement method used to create the feature 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::SteelSupportBuilder::CreationMethod PlacementMethod
                (
                );
                /**Sets  the placement method used to create the feature 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetPlacementMethod
                (
                    NXOpen::Features::ShipDesign::SteelSupportBuilder::CreationMethod placementMethod /** placementmethod */ 
                );
                /**Returns  the start plane (only used with "TwoPlanesandLines" creation method)  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * StartPlane
                (
                );
                /**Sets  the start plane (only used with "TwoPlanesandLines" creation method)  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetStartPlane
                (
                    NXOpen::Plane * startPlane /** startplane */ 
                );
                /**Returns  whether or not we should keep the selected start plane on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepStartPlane
                (
                );
                /**Sets  whether or not we should keep the selected start plane on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepStartPlane
                (
                    bool keepStartPlane /** keepstartplane */ 
                );
                /**Returns  the select guide curve (only used with "SpecifyLine" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObject * SelectGuideCurve
                (
                );
                /**Returns  whether or not we should keep the selected guide curve on apply (only used with "SpecifyLine" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepSelectGuideCurve
                (
                );
                /**Sets  whether or not we should keep the selected guide curve on apply (only used with "SpecifyLine" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepSelectGuideCurve
                (
                    bool keepSelectGuideCurve /** keepselectguidecurve */ 
                );
                /**Returns  the first line (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObject * SelectLine1
                (
                );
                /**Returns  whether or not we should keep the selected first line on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepSelectLine1
                (
                );
                /**Sets  whether or not we should keep the selected first line on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepSelectLine1
                (
                    bool keepSelectLine1 /** keepselectline1 */ 
                );
                /**Returns  the second line (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObject * SelectLine2
                (
                );
                /**Returns  whether or not we should keep the selected second line on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepSelectLine2
                (
                );
                /**Sets  whether or not we should keep the selected second line on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepSelectLine2
                (
                    bool keepSelectLine2 /** keepselectline2 */ 
                );
                /**Returns  the end plane (only used with "TwoPlanesandLines" creation method)  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * EndPlane
                (
                );
                /**Sets  the end plane (only used with "TwoPlanesandLines" creation method)  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetEndPlane
                (
                    NXOpen::Plane * endPlane /** endplane */ 
                );
                /**Returns  whether or not we should keep the selected end plane on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepEndPlane
                (
                );
                /**Sets  whether or not we should keep the selected end plane on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepEndPlane
                (
                    bool keepEndPlane /** keependplane */ 
                );
                /**Returns  the coord system (only used with "SpecifyCsys" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CoordinateSystem * CoordSystem
                (
                );
                /**Sets  the coord system (only used with "SpecifyCsys" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetCoordSystem
                (
                    NXOpen::CoordinateSystem * coordSystem /** coordsystem */ 
                );
                /**Returns  whether or not we should keep the selected csys on apply (only used with "SpecifyCsys" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepCoordSystem
                (
                );
                /**Sets  whether or not we should keep the selected csys on apply (only used with "SpecifyCsys" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepCoordSystem
                (
                    bool keepCoordSystem /** keepcoordsystem */ 
                );
                /**Returns  the orientation line (only used with "SpecifyLine" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObject * SelectOrientationLine
                (
                );
                /**Returns  whether or not we should keep the selected orientation line on apply (only used with "SpecifyLine" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepSelectOrientationLine
                (
                );
                /**Sets  whether or not we should keep the selected orientation line on apply (only used with "SpecifyLine" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepSelectOrientationLine
                (
                    bool keepSelectOrientationLine /** keepselectorientationline */ 
                );
                /**Returns  the support type.  Determines the cross section of the support. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: int SupportType
                (
                );
                /**Sets  the support type.  Determines the cross section of the support. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetSupportType
                (
                    int supportType /** supporttype */ 
                );
                /** The list of available support types.  @return  Array of available types.
                                                                              These names are specified by a special
                                                                              sketch naming convention for sketches
                                                                              loaded in the support library.  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetAvailableSupportTypes
                (
                );
                /**Returns  the support size.  Determines the cross section of the support. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: int SupportSize
                (
                );
                /**Sets  the support size.  Determines the cross section of the support. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetSupportSize
                (
                    int supportSize /** supportsize */ 
                );
                /** The list of available sizes.  The available sizes will change everytime the support type changes.  @return  Array of available sizes.
                                                                              These names are specified by a special
                                                                              sketch naming convention for sketches
                                                                              loaded in the support library.  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetAvailableSupportSizes
                (
                );
                /**Returns  the angular dimension used to rotate the support feature. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * AngularDim
                (
                );
                /**Returns  the first line offset (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Line1Offset
                (
                );
                /**Returns  the reverse first line offset (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ReverseLine1Offset
                (
                );
                /**Sets  the reverse first line offset (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetReverseLine1Offset
                (
                    bool reverseLine1Offset /** reverseline1offset */ 
                );
                /**Returns  the keep previous reverse setting on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepReverseLine1Offset
                (
                );
                /**Sets  the keep previous reverse setting on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepReverseLine1Offset
                (
                    bool keepReverseLine1Offset /** keepreverseline1offset */ 
                );
                /**Returns  the second line offset (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Line2Offset
                (
                );
                /**Returns  the reverse second line offset (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ReverseLine2Offset
                (
                );
                /**Sets  the reverse second line offset (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetReverseLine2Offset
                (
                    bool reverseLine2Offset /** reverseline2offset */ 
                );
                /**Returns  the keep previous reverse setting on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepReverseLine2Offset
                (
                );
                /**Sets  the keep previous reverse setting on apply (only used with "TwoPlanesandLines" creation method) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepReverseLine2Offset
                (
                    bool keepReverseLine2Offset /** keepreverseline2offset */ 
                );
                /**Returns  the offset used to determine where the support starts (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * StartOffset
                (
                );
                /**Returns  the reverse start offset (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ReverseStartOffset
                (
                );
                /**Sets  the reverse start offset (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetReverseStartOffset
                (
                    bool reverseStartOffset /** reversestartoffset */ 
                );
                /**Returns  the keep previous reverse setting on apply (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepReverseStartOffset
                (
                );
                /**Sets  the keep previous reverse setting on apply (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepReverseStartOffset
                (
                    bool keepReverseStartOffset /** keepreversestartoffset */ 
                );
                /**Returns  the offset used to determine where the support ends (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * EndOffset
                (
                );
                /**Returns  the reverse end offset (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ReverseEndOffset
                (
                );
                /**Sets  the reverse end offset (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetReverseEndOffset
                (
                    bool reverseEndOffset /** reverseendoffset */ 
                );
                /**Returns  the keep previous reverse setting on apply (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: bool KeepReverseEndOffset
                (
                );
                /**Sets  the keep previous reverse setting on apply (used with "SpecifyLine" and "SpecifyCsys" creation methods) 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetKeepReverseEndOffset
                (
                    bool keepReverseEndOffset /** keepreverseendoffset */ 
                );
                /**Returns  the support cap options 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::ShipDesign::SteelSupportBuilder::CapOptions SupportCapOptions
                (
                );
                /**Sets  the support cap options 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetSupportCapOptions
                (
                    NXOpen::Features::ShipDesign::SteelSupportBuilder::CapOptions supportCapOptions /** supportcapoptions */ 
                );
                /**Returns  the start cap type.  Determines the cross section of the support cap. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: int StartCapType
                (
                );
                /**Sets  the start cap type.  Determines the cross section of the support cap. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetStartCapType
                (
                    int startCapType /** startcaptype */ 
                );
                /** The list of available start and end cap types.  @return  Array of available cap types.
                                                                              These names are specified by a special
                                                                              sketch naming convention for sketches
                                                                              loaded in the support cap library.  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetAvailableCapTypes
                (
                );
                /**Returns  the start cap size.  Determines the cross section of the support cap. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: int StartCapSize
                (
                );
                /**Sets  the start cap size.  Determines the cross section of the support cap. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetStartCapSize
                (
                    int startCapSize /** startcapsize */ 
                );
                /** The list of available start cap sizes.  The available start cap sizes will change everytime the start cap type changes.  @return  Array of available start cap sizes.
                                                                              These names are specified by a special
                                                                              sketch naming convention for sketches
                                                                              loaded in the support cap library.  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetAvailableStartCapSizes
                (
                );
                /**Returns  the start cap thickness 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * StartCapThickness
                (
                );
                /**Returns  the end cap type.  Determines the cross section of the support cap. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: int EndCapType
                (
                );
                /**Sets  the end cap type.  Determines the cross section of the support cap. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetEndCapType
                (
                    int endCapType /** endcaptype */ 
                );
                /**Returns  the end cap size.  Determines the cross section of the support cap. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: int EndCapSize
                (
                );
                /**Sets  the end cap size.  Determines the cross section of the support cap. 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetEndCapSize
                (
                    int endCapSize /** endcapsize */ 
                );
                /** The list of available end cap sizes.  The available end cap sizes will change everytime the end cap type changes.  @return  Array of available end cap sizes.
                                                                              These names are specified by a special
                                                                              sketch naming convention for sketches
                                                                              loaded in the support cap library.  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetAvailableEndCapSizes
                (
                );
                /**Returns  the end cap thickness 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * EndCapThickness
                (
                );
                /**Returns  the name attribute value 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: int AttributeName
                (
                );
                /**Sets  the name attribute value 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetAttributeName
                (
                    int attributeName /** attributename */ 
                );
                /** Returns the list of available name attributes  @return  Array of available attribute names.
                                                                              These names are specified in the customer
                                                                              defaults file.  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetAvailableAttributeNames
                (
                );
                /**Returns  the attribute material 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: int AttributeMaterial
                (
                );
                /**Sets  the attribute material 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : nx_ship_concept ("Ship Concept") */
                public: void SetAttributeMaterial
                (
                    int attributeMaterial /** attributematerial */ 
                );
                /** Returns the list of available material attributes  @return  Array of available attribute materials.
                                                                              These materials are specified in the customer
                                                                              defaults file.  
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXString> GetAvailableAttributeMaterials
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
