#ifndef NXOpen_AME_CALLMETHODRULEBUILDER_HXX_INCLUDED
#define NXOpen_AME_CALLMETHODRULEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_CallMethodRuleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_CallMethodRuleBuilder.hxx>
#include <NXOpen/AME_ConditionsBuilder.hxx>
#include <NXOpen/AME_ObjectConnectionBuilder.hxx>
#include <NXOpen/AME_ObjectConnectionDetailBuilder.hxx>
#include <NXOpen/AME_PlcRule.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class CallMethodRuleBuilder;
    }
    namespace AME
    {
        class ConditionsBuilder;
    }
    namespace AME
    {
        class ObjectConnectionBuilder;
    }
    namespace AME
    {
        class ObjectConnectionDetailBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    class Builder;
    namespace AME
    {
        class _CallMethodRuleBuilderBuilder;
        class CallMethodRuleBuilderImpl;
        /** JA class for the call method rule dialog <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateCallMethodRuleBuilder  NXOpen::AME::AMEManager::CreateCallMethodRuleBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  CallMethodRuleBuilder : public NXOpen::Builder
        {
            /** replace or insert rule Type */
            public: enum CreationType
            {
                CreationTypePort/** port */ ,
                CreationTypeObject/** object */ 
            };

            private: CallMethodRuleBuilderImpl * m_callmethodrulebuilder_impl;
            private: friend class  _CallMethodRuleBuilderBuilder;
            protected: CallMethodRuleBuilder();
            public: ~CallMethodRuleBuilder();
            /**Returns  the replacement port selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * SelectionPort
            (
            );
            /**Returns  the rule name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString RuleName
            (
            );
            /**Sets  the rule name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetRuleName
            (
                const NXString & resultText /** resulttext */ 
            );
            /**Sets  the rule name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetRuleName
            (
                const char * resultText /** resulttext */ 
            );
            /**Returns  the object connection ui block
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ObjectConnectionBuilder * ObjectConnection
            (
            );
            /**Returns  the parameter object connection ui block
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ObjectConnectionBuilder * ParameterObjectConnection
            (
            );
            /**Returns  the object connection detail ui block
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ObjectConnectionDetailBuilder * ObjectConnectionDetail
            (
            );
            /**Returns  the rule type of selected parameter
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcRule::Type CurrentParameterRuleType
            (
            );
            /**Sets  the rule type of selected parameter
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetCurrentParameterRuleType
            (
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ 
            );
            /**Returns  the creation type by creating a position
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CallMethodRuleBuilder::CreationType RuleCreationType
            (
            );
            /**Returns  the constantText of a parameter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString ParameterText
            (
            );
            /**Sets  the constantText of a parameter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetParameterText
            (
                const NXString & resultText /** resulttext */ 
            );
            /**Sets  the constantText of a parameter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetParameterText
            (
                const char * resultText /** resulttext */ 
            );
            /**Sets  the creation type by creating a position
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetRuleCreationType
            (
                NXOpen::AME::CallMethodRuleBuilder::CreationType type /** type */ 
            );
            /** Update the selected parameter list
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateAllParameters
            (
            );
            /** Update the selected parameter
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateSelectedParameter
            (
                const NXString & paramOwnerId /** paramownerid */ ,
                const NXString & paramName /** paramname */ 
            );
            /** Update the selected parameter
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UpdateSelectedParameter
            (
                const char * paramOwnerId /** paramownerid */ ,
                const char * paramName /** paramname */ 
            );
            /** Update the builder of the reuse blocks
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RefreshContent
            (
                const NXString & paramOwnerId /** paramownerid */ ,
                const NXString & paramName /** paramname */ 
            );
            /** Update the builder of the reuse blocks
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void RefreshContent
            (
                const char * paramOwnerId /** paramownerid */ ,
                const char * paramName /** paramname */ 
            );
            /**Returns  the object condition ui block
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ConditionsBuilder * Conditions
            (
            );
            /** Refresh the content of the detail builder
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RefreshParameterDetail
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
