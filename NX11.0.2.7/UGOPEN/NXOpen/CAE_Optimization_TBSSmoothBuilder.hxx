#ifndef NXOpen_CAE_OPTIMIZATION_TBSSMOOTHBUILDER_HXX_INCLUDED
#define NXOpen_CAE_OPTIMIZATION_TBSSMOOTHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Optimization_TBSSmoothBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Optimization_NameDescription.hxx>
#include <NXOpen/CAE_Optimization_TBSGroupDefinition.hxx>
#include <NXOpen/CAE_Optimization_TBSSmoothBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Optimization
        {
            class TBSSmoothBuilder;
        }
    }
    class Builder;
    namespace CAE
    {
        namespace Optimization
        {
            class NameDescription;
        }
    }
    namespace CAE
    {
        namespace Optimization
        {
            class TBSGroupDefinition;
        }
    }
    class Direction;
    class Expression;
    namespace CAE
    {
        namespace Optimization
        {
            class _TBSSmoothBuilderBuilder;
            class TBSSmoothBuilderImpl;
            /** Represents the builder of @link NXOpen::CAE::Optimization::TBSSmooth NXOpen::CAE::Optimization::TBSSmooth@endlink .   <br> To create a new instance of this class, use @link NXOpen::CAE::Optimization::TBSOptimizationManager::CreateSmoothBuilder  NXOpen::CAE::Optimization::TBSOptimizationManager::CreateSmoothBuilder @endlink  <br> 
             <br>  Created in NX8.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  TBSSmoothBuilder : public NXOpen::Builder
            {
                /** Defines the output file format of surface representation */
                public: enum Format
                {
                    FormatBdf/** Represents surfaces in .bdf file */,
                    FormatStl/** Represents surfaces in .stl file */,
                    FormatIges/** Represents surfaces in .igs file */
                };

                /** Defines if the element material values are to be filtered before the isocut*/
                public: enum ResultFiltering
                {
                    ResultFilteringOff/** Don't filter the element material values */,
                    ResultFilteringModerate/** Filters the element material values partially*/,
                    ResultFilteringFull/** Filters the element material values fully */
                };

                /** Specifies the content saved to the output files */
                public: enum IsoType
                {
                    IsoTypeOriginal/** Saves the original surface*/,
                    IsoTypeNew/** Saves the surface gererated by Isocut*/,
                    IsoTypeBoth/** Saves the complete surface */
                };

                /** Defines if the original surface is to be smoothed or remain unchanged */
                public: enum OriginalSurfaceSmoothingOption
                {
                    OriginalSurfaceSmoothingOptionOff/** No changes to the original surface*/,
                    OriginalSurfaceSmoothingOptionShrink/** Allows the nodes on original surface to be moved towards the inside only*/,
                    OriginalSurfaceSmoothingOptionFull/** Allows any modifications to the original surface */
                };

                /** Defines how to save slices */
                public: enum SliceFormatOption
                {
                    SliceFormatOptionIgsPolygon/** Saves slices as polygons using cubic parametric splines for each segment*/,
                    SliceFormatOptionIgsCurves/** Saves slices as curves obtained by interpolation using uniform cubic splines */,
                    SliceFormatOptionCli/** Saves slices as polygons saved in common layer interface format */,
                    SliceFormatOptionAll/** Save slices in all formats mentioned above */
                };

                /** Defines if the self-itersection checks are to be performed during the isocut, smoothing and data reduction*/
                public: enum SelfIntersectionCheckingOption
                {
                    SelfIntersectionCheckingOptionOff/** No checks */,
                    SelfIntersectionCheckingOptionCheck/** Check once */,
                    SelfIntersectionCheckingOptionRuntime/** Check always */,
                    SelfIntersectionCheckingOptionIterative/** First run without check, then rerun if self-intersections are found */
                };

                private: TBSSmoothBuilderImpl * m_tbssmoothbuilder_impl;
                private: friend class  _TBSSmoothBuilderBuilder;
                protected: TBSSmoothBuilder();
                public: ~TBSSmoothBuilder();
                /**Returns  the name description 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::NameDescription * NameDescription
                (
                );
                /**Returns  the iso value that is used to determine the positions on the element edges where the new nodes are created.
                        Larger value lead to models with smaller volume. Value is between 0 and 1 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double IsoValue
                (
                );
                /**Sets  the iso value that is used to determine the positions on the element edges where the new nodes are created.
                        Larger value lead to models with smaller volume. Value is between 0 and 1 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetIsoValue
                (
                    double isoValue /** isovalue */ 
                );
                /**Returns  the target volume that is to be achieved iteratively by varying the isovalue. If set to 0,
                        the given @link NXOpen::CAE::Optimization::TBSSmoothBuilder::IsoValue NXOpen::CAE::Optimization::TBSSmoothBuilder::IsoValue @endlink and @link NXOpen::CAE::Optimization::TBSSmoothBuilder::SetIsoValue NXOpen::CAE::Optimization::TBSSmoothBuilder::SetIsoValue @endlink  is usedfor the generation of the isosurface 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double TargetVolume
                (
                );
                /**Sets  the target volume that is to be achieved iteratively by varying the isovalue. If set to 0,
                        the given @link NXOpen::CAE::Optimization::TBSSmoothBuilder::IsoValue NXOpen::CAE::Optimization::TBSSmoothBuilder::IsoValue @endlink and @link NXOpen::CAE::Optimization::TBSSmoothBuilder::SetIsoValue NXOpen::CAE::Optimization::TBSSmoothBuilder::SetIsoValue @endlink  is usedfor the generation of the isosurface 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetTargetVolume
                (
                    double targetVolume /** targetvolume */ 
                );
                /** The output result format accessor  @return  
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::CAE::Optimization::TBSSmoothBuilder::Format> GetFormatOption
                (
                );
                /** The output result format mutator 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetFormatOption
                (
                    const std::vector<NXOpen::CAE::Optimization::TBSSmoothBuilder::Format> & formatOption /** formatoption */ 
                );
                /**Returns  the result filtering option 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSSmoothBuilder::ResultFiltering ResultFilteringOption
                (
                );
                /**Sets  the result filtering option 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetResultFilteringOption
                (
                    NXOpen::CAE::Optimization::TBSSmoothBuilder::ResultFiltering resultFilteringOption /** resultfilteringoption */ 
                );
                /**Returns  the option that specifies what should be saved to the output files 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSSmoothBuilder::IsoType IsoTypeOption
                (
                );
                /**Sets  the option that specifies what should be saved to the output files 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetIsoTypeOption
                (
                    NXOpen::CAE::Optimization::TBSSmoothBuilder::IsoType isoTypeOption /** isotypeoption */ 
                );
                /**Returns  the option of how to smooth the original surface 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSSmoothBuilder::OriginalSurfaceSmoothingOption OriginalSurfaceSmooth
                (
                );
                /**Sets  the option of how to smooth the original surface 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetOriginalSurfaceSmooth
                (
                    NXOpen::CAE::Optimization::TBSSmoothBuilder::OriginalSurfaceSmoothingOption originalSurfaceSmooth /** originalsurfacesmooth */ 
                );
                /**Returns  the choice whether to form quardrilaterals from adjacent triangles 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: bool MixedMesh
                (
                );
                /**Sets  the choice whether to form quardrilaterals from adjacent triangles 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetMixedMesh
                (
                    bool mixedMesh /** mixedmesh */ 
                );
                /**Returns  the area to be smoothed 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSGroupDefinition * SmoothArea
                (
                );
                /**Returns  the slice number 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: int SliceNumber
                (
                );
                /**Sets  the slice number 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetSliceNumber
                (
                    int sliceNumber /** slicenumber */ 
                );
                /**Returns  the slice normal vector 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * SliceNormalVector
                (
                );
                /**Sets  the slice normal vector 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetSliceNormalVector
                (
                    NXOpen::Direction * sliceNormalVector /** slicenormalvector */ 
                );
                /**Returns  the slice format 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSSmoothBuilder::SliceFormatOption SliceFormat
                (
                );
                /**Sets  the slice format 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetSliceFormat
                (
                    NXOpen::CAE::Optimization::TBSSmoothBuilder::SliceFormatOption sliceFormat /** sliceformat */ 
                );
                /**Returns  the option of self-intersection checking 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Optimization::TBSSmoothBuilder::SelfIntersectionCheckingOption SelfIntersectionChecking
                (
                );
                /**Sets  the option of self-intersection checking 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetSelfIntersectionChecking
                (
                    NXOpen::CAE::Optimization::TBSSmoothBuilder::SelfIntersectionCheckingOption selfIntersectionChecking /** selfintersectionchecking */ 
                );
                /**Returns  the reduction angle that defines the maximal angle between adjacent faces at a node such
                        that the node may be removed during the data reduction 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ReductionAngle
                (
                );
                /**Returns  the reduction rate that defines the percent of faces that should be removed during the data reduction.
                        if set to 0, no data reduction occurs. If set to 100, the data reduction sopts when no faces could be removed 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: double ReductionRate
                (
                );
                /**Sets  the reduction rate that defines the percent of faces that should be removed during the data reduction.
                        if set to 0, no data reduction occurs. If set to 100, the data reduction sopts when no faces could be removed 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetReductionRate
                (
                    double reductionRate /** reductionrate */ 
                );
                /**Returns  the minimum angle that defines the minimal angle of the triangles that result from the smoothing
                        and data reduction. Too large value may prevent the smoothing, and too small value may lead to degenerated triangles 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MinimumAngle
                (
                );
                /**Returns  the number of smoothing cycles. If set to 0, no smoothing is performed. Larger value
                        leads to smoother models, but may cause the narrowing of thin components 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: int SmoothCycles
                (
                );
                /**Sets  the number of smoothing cycles. If set to 0, no smoothing is performed. Larger value
                        leads to smoother models, but may cause the narrowing of thin components 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetSmoothCycles
                (
                    int smoothCycles /** smoothcycles */ 
                );
                /**Returns  the limiting size that defines the minimal allowed relative size of a connected component.
                        All components with the relative size below this value are removed 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ComponentLimitingSize
                (
                );
                /**Returns  the option to save border. If yes, the border of the shell element model will saved 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Border
                (
                );
                /**Sets  the option to save border. If yes, the border of the shell element model will saved 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetBorder
                (
                    bool border /** border */ 
                );
                /**Returns  the option to use additional parameter. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : None */
                public: bool UseAdditionalParameters
                (
                );
                /**Sets  the option to use additional parameter. 
                 <br>  Created in NX8.0.0.  <br>  
                 <br> License requirements : cae_opt_topo ("NX Topology Optimization") OR cae_opt_topobead ("NX Bead Optimization") OR cae_opt_toposhape ("NX Shape Optimization") */
                public: void SetUseAdditionalParameters
                (
                    bool useAdditionalParameters /** useadditionalparameters */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
