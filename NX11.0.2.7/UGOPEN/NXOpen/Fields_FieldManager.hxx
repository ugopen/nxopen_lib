#ifndef NXOpen_FIELDS_FIELDMANAGER_HXX_INCLUDED
#define NXOpen_FIELDS_FIELDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_FieldManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Fields_DisplayPropertiesBuilder.hxx>
#include <NXOpen/Fields_ExportData.hxx>
#include <NXOpen/Fields_FieldVariable.hxx>
#include <NXOpen/Fields_ImportData.hxx>
#include <NXOpen/Fields_PathObjects.hxx>
#include <NXOpen/Fields_SpatialMap.hxx>
#include <NXOpen/Fields_SpatialMapBuilder.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class FieldManager;
    }
    class Expression;
    namespace Fields
    {
        class ComplexScalarFieldWrapper;
    }
    namespace Fields
    {
        class DisplayPropertiesBuilder;
    }
    namespace Fields
    {
        class ExportData;
    }
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class FieldCollection;
    }
    namespace Fields
    {
        class FieldDomainCollection;
    }
    namespace Fields
    {
        class FieldExpression;
    }
    namespace Fields
    {
        class FieldFormula;
    }
    namespace Fields
    {
        class FieldLink;
    }
    namespace Fields
    {
        class FieldLinksTable;
    }
    namespace Fields
    {
        class FieldProfileTable;
    }
    namespace Fields
    {
        class FieldTable;
    }
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class FieldWrapper;
    }
    namespace Fields
    {
        class ImportData;
    }
    namespace Fields
    {
        class NameVariable;
    }
    namespace Fields
    {
        class PathObjects;
    }
    namespace Fields
    {
        class ScalarFieldWrapper;
    }
    namespace Fields
    {
        class SpatialMap;
    }
    namespace Fields
    {
        class SpatialMapBuilder;
    }
    namespace Fields
    {
        class VectorFieldWrapper;
    }
    class NXObject;
    class Sketch;
    class TaggedObject;
    class Unit;
    namespace Fields
    {
        class _FieldManagerBuilder;
        class FieldManagerImpl;
        /**  @brief  Represents the manager class of the Fields  

          
             <br> This manager class gives access to all the fields @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink  within a part, 
            as well as the collection of domains @link NXOpen::Fields::FieldDomain NXOpen::Fields::FieldDomain@endlink . <br> 
             <br> It also provides creation methods for the various builders of fields and related classes. <br> 
            
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  FieldManager : public NXOpen::NXObject
        {
            private: FieldManagerImpl * m_fieldmanager_impl;
            private: friend class  _FieldManagerBuilder;
            protected: FieldManager();
            public: ~FieldManager();
            /** Creates a system @link NXOpen::Fields::FieldExpression NXOpen::Fields::FieldExpression@endlink  object.  Specifies the new expression 
                        string.
                      @return  field 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldExpression * CreateFieldExpression
            (
                const NXString & fieldExpString /** expression string to be associated with the field */,
                NXOpen::Unit * unitType /** unit of the field */
            );
            /** Creates a system @link NXOpen::Fields::FieldExpression NXOpen::Fields::FieldExpression@endlink  object.  Specifies the new expression 
                        string.
                      @return  field 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldExpression * CreateFieldExpression
            (
                const char * fieldExpString /** expression string to be associated with the field */,
                NXOpen::Unit * unitType /** unit of the field */
            );
            /** Creates a system @link NXOpen::Fields::FieldExpression NXOpen::Fields::FieldExpression@endlink  object with independent variables.
                        Specifies the new expression string.
                         <br> This method is deprecated; field expressions are children of 
                        @link NXOpen::Fields::FieldFormula NXOpen::Fields::FieldFormula@endlink  and should not be created independently. <br> 
                      @return  field 
             <br>  @deprecated Deprecated in NX10.0.0.  Field expressions are owned by other objects.  They are managed by the creation and editing of the owning object and should not be created independently. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX10.0.0.  Field expressions are owned by other objects.  They are managed by the creation and editing of the owning object and should not be created independently.") NXOpen::Fields::FieldExpression * CreateFieldExpression
            (
                const NXString & fieldExpString /** expression string to be associated with the field */,
                NXOpen::Unit * unitType /** unit of the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */
            );
            /** Creates a system @link NXOpen::Fields::FieldExpression NXOpen::Fields::FieldExpression@endlink  object with independent variables.
                        Specifies the new expression string.
                         <br> This method is deprecated; field expressions are children of 
                        @link NXOpen::Fields::FieldFormula NXOpen::Fields::FieldFormula@endlink  and should not be created independently. <br> 
                      @return  field 
             <br>  @deprecated Deprecated in NX10.0.0.  Field expressions are owned by other objects.  They are managed by the creation and editing of the owning object and should not be created independently. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldExpression * CreateFieldExpression
            (
                const char * fieldExpString /** expression string to be associated with the field */,
                NXOpen::Unit * unitType /** unit of the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */
            );
            /** Creates a system @link NXOpen::Fields::FieldExpression NXOpen::Fields::FieldExpression@endlink  object with independent variables.
                        Specifies the new expression string.
                         <br> This method is used to create sub expression fields for a 
                        @link NXOpen::Fields::FieldFormula NXOpen::Fields::FieldFormula@endlink . <br> 
                      @return  field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldExpression * CreateSubFieldExpression
            (
                NXOpen::Fields::FieldVariable * depVar /** dependent variables to be associated with the field */
            );
            /** Creates a @link NXOpen::Fields::FieldFormula NXOpen::Fields::FieldFormula@endlink  object with dependent @link NXOpen::Fields::FieldExpression NXOpen::Fields::FieldExpression@endlink .
                      @return  field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldFormula * CreateFieldFormula
            (
                const NXString & fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                const std::vector<NXOpen::Fields::FieldExpression *> & depExpArray /** dependent expression fields to be associated with the formula field */
            );
            /** Creates a @link NXOpen::Fields::FieldFormula NXOpen::Fields::FieldFormula@endlink  object with dependent @link NXOpen::Fields::FieldExpression NXOpen::Fields::FieldExpression@endlink .
                      @return  field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldFormula * CreateFieldFormula
            (
                const char * fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                const std::vector<NXOpen::Fields::FieldExpression *> & depExpArray /** dependent expression fields to be associated with the formula field */
            );
            /** Creates a @link NXOpen::Fields::FieldTable NXOpen::Fields::FieldTable@endlink  object with dependent and independent variables 
                        @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .
                      @return  field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldTable * CreateFieldTable
            (
                const NXString & fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                const std::vector<double> & datapoints /** row based array of double values representing the table; then number of points should equal the number of independent variables * the number of dependent variables * the number of rows. */
            );
            /** Creates a @link NXOpen::Fields::FieldTable NXOpen::Fields::FieldTable@endlink  object with dependent and independent variables 
                        @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .
                      @return  field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldTable * CreateFieldTable
            (
                const char * fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the table field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables to be associated with the table field */,
                const std::vector<double> & datapoints /** row based array of double values representing the table; then number of points should equal the number of independent variables * the number of dependent variables * the number of rows. */
            );
            /** Creates a @link NXOpen::Fields::FieldTable NXOpen::Fields::FieldTable@endlink  object with dependent and independent variables
                        @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .  This will create a 2 dimensional table, with the option to specify 
                        the value type for the dependent variable.
                      @return  field 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldTable * CreateFieldTableFromData
            (
                const NXString & fieldNamePrefix /** field name prefix; e.g. "AFU Record"; field will have a unique generated name begining with this string */,
                NXOpen::Unit * ivarUnit /** unit of the independent variable */,
                NXOpen::Unit * dvarUnit /** unit of the dependent variable */,
                NXOpen::Fields::FieldVariable::ValueType dvarType /** dependent variable type (real/imaginary/complex...) */,
                const std::vector<double> & datapoints /** row based array of double values representing the table; then number of points should equal the number of independent variables * the number of dependent variables * the number of rows. */
            );
            /** Creates a @link NXOpen::Fields::FieldTable NXOpen::Fields::FieldTable@endlink  object with dependent and independent variables
                        @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .  This will create a 2 dimensional table, with the option to specify 
                        the value type for the dependent variable.
                      @return  field 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldTable * CreateFieldTableFromData
            (
                const char * fieldNamePrefix /** field name prefix; e.g. "AFU Record"; field will have a unique generated name begining with this string */,
                NXOpen::Unit * ivarUnit /** unit of the independent variable */,
                NXOpen::Unit * dvarUnit /** unit of the dependent variable */,
                NXOpen::Fields::FieldVariable::ValueType dvarType /** dependent variable type (real/imaginary/complex...) */,
                const std::vector<double> & datapoints /** row based array of double values representing the table; then number of points should equal the number of independent variables * the number of dependent variables * the number of rows. */
            );
            /** Creates a @link NXOpen::Fields::FieldLink NXOpen::Fields::FieldLink@endlink .
                      @return  field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldLink * CreateFieldLink
            (
                const NXString & fieldName /** field name */,
                NXOpen::Fields::Field * fieldToLink /** field to link */
            );
            /** Creates a @link NXOpen::Fields::FieldLink NXOpen::Fields::FieldLink@endlink .
                      @return  field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldLink * CreateFieldLink
            (
                const char * fieldName /** field name */,
                NXOpen::Fields::Field * fieldToLink /** field to link */
            );
            /** Deletes the specified @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink  object; if the object cannot be deleted
                        it is returned.
                      @return  If the field cannot be deleted, it is returned; if the field is deleted, this will be NULL 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::Field * DeleteField
            (
                NXOpen::Fields::Field * field /** field to delete */
            );
            /** Create an independent variable to be added to the field 
                      @return  independent variable created and associated to the field 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateIndependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                NXOpen::Fields::NameVariable * nameVariable /** existing name variable */,
                NXOpen::Unit * unitType /** unit of the independent variable */,
                bool minValueSet /** logical value whether minimum value set */,
                bool minValueInclusive /** minimum value is itself included in range */,
                double minValue /** minimum value of the variable range */,
                bool maxValueSet /** logical value whether maximum value set */,
                bool maxValueInclusive /** maximum value is itself included in range */,
                double maxValue /** maximum value of the variable range */,
                bool numPtsSet /** logical value whether num_pts set */,
                int numPts /** num_pts of the variable range */,
                bool defaultValueSet /** logical value whether default value set */,
                double defaultValue /** default value of the variable range */
            );
            /** Create an independent variable to be added to the field, specifying the variable value type
                      @return  independent variable created and associated to the field 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateIndependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                NXOpen::Fields::NameVariable * nameVariable /** existing name variable */,
                NXOpen::Unit * unitType /** unit of the independent variable */,
                NXOpen::Fields::FieldVariable::ValueType type /** variable value type */,
                bool minValueSet /** logical value whether minimum value set */,
                bool minValueInclusive /** minimum value is itself included in range */,
                double minValue /** minimum value of the variable range */,
                bool maxValueSet /** logical value whether maximum value set */,
                bool maxValueInclusive /** maximum value is itself included in range */,
                double maxValue /** maximum value of the variable range */,
                bool numPtsSet /** logical value whether num_pts set */,
                int numPts /** num_pts of the variable range */,
                bool defaultValueSet /** logical value whether default value set */,
                double defaultValue /** default value of the variable range */
            );
            /** Edit an independent variable 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void EditIndependentVariable
            (
                NXOpen::Fields::FieldVariable * indepVar /** indep var to edit */,
                const NXString & varName /** name of the independent variable to be created */,
                NXOpen::Unit * unitType /** unit of the independent variable */,
                bool minValueSet /** logical value whether minimum value set */,
                bool minValueInclusive /** minimum value is itself included in range */,
                double minValue /** minimum value of the variable range */,
                bool maxValueSet /** logical value whether maximum value set */,
                bool maxValueInclusive /** maximum value is itself included in range */,
                double maxValue /** maximum value of the variable range */,
                bool numPtsSet /** logical value whether num_pts set */,
                int numPts /** num_pts of the variable range */,
                bool defaultValueSet /** logical value whether default value set */,
                double defaultValue /** default value of the variable range */
            );
            /** Edit an independent variable 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void EditIndependentVariable
            (
                NXOpen::Fields::FieldVariable * indepVar /** indep var to edit */,
                const char * varName /** name of the independent variable to be created */,
                NXOpen::Unit * unitType /** unit of the independent variable */,
                bool minValueSet /** logical value whether minimum value set */,
                bool minValueInclusive /** minimum value is itself included in range */,
                double minValue /** minimum value of the variable range */,
                bool maxValueSet /** logical value whether maximum value set */,
                bool maxValueInclusive /** maximum value is itself included in range */,
                double maxValue /** maximum value of the variable range */,
                bool numPtsSet /** logical value whether num_pts set */,
                int numPts /** num_pts of the variable range */,
                bool defaultValueSet /** logical value whether default value set */,
                double defaultValue /** default value of the variable range */
            );
            /** Edit an independent variable 
                     
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void EditIndependentVariable
            (
                NXOpen::Fields::FieldVariable * indepVar /** indep var to edit */,
                NXOpen::Unit * unitType /** unit of the independent variable */
            );
            /** Create a dependent variable to be added to the field 
                      @return  dependent variable created and associated to the field 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateDependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                NXOpen::Fields::NameVariable * nameVariable /** existing name variable */,
                NXOpen::Unit * unitType /** unit of the dependent variable */
            );
            /** Create a dependent variable to be added to the field, specifying the variable value type 
                      @return  dependent variable created and associated to the field 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldVariable * CreateDependentVariable
            (
                NXOpen::Fields::Field * ownerField /** owner field */,
                NXOpen::Fields::NameVariable * nameVariable /** existing name variable */,
                NXOpen::Unit * unitType /** unit of the dependent variable */,
                NXOpen::Fields::FieldVariable::ValueType type /** variable value type */
            );
            /** Edit dependent variable 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void EditDependentVariable
            (
                NXOpen::Fields::FieldVariable * depVar /** dep variable to edit */,
                const NXString & varName /** new name for variable, or NULL to skip updating name */,
                NXOpen::Unit * unitType /** new unit of the dependent variable */
            );
            /** Edit dependent variable 
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void EditDependentVariable
            (
                NXOpen::Fields::FieldVariable * depVar /** dep variable to edit */,
                const char * varName /** new name for variable, or NULL to skip updating name */,
                NXOpen::Unit * unitType /** new unit of the dependent variable */
            );
            /** Edit dependent variable 
                     
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void EditDependentVariable
            (
                NXOpen::Fields::FieldVariable * depVar /** dep variable to edit */,
                NXOpen::Unit * unitType /** new unit of the dependent variable */
            );
            /** Create a field wrapper backed up by a field  @return  scalar field wrapper created and associated to the field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldWrapper * CreateFieldWrapper
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */
            );
            /** Create a field wrapper backed by a scalar expression  @return  scalar field wrapper created and associated to the expression 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ScalarFieldWrapper * CreateScalarFieldWrapperWithExpression
            (
                NXOpen::Expression * expression /** an existing expression that will be this wrapper's value */
            );
            /** Create a scalar field wrapper backed up by a scaled scalar field  @return  scalar field wrapper created and associated to the field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ScalarFieldWrapper * CreateScalarFieldWrapperWithField
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */,
                double scaleFactor /** the field will be multiplied by this scale factor when being evaluated */
            );
            /** Create a vector field wrapper backed by three scalar expressions  @return  scalar field wrapper created and associated to the expression 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::VectorFieldWrapper * CreateVectorFieldWrapperWithExpressions
            (
                const std::vector<NXOpen::Expression *> & expressions /** existing expressions that will be this wrapper's value */
            );
            /** Create a vector field wrapper backed up by a scaled vector field  @return  vector field wrapper created and associated to the field 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::VectorFieldWrapper * CreateVectorFieldWrapperWithField
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */,
                const std::vector<double> & scaleFactors /** the field will be multiplied by this scale factor when being evaluated */
            );
            /** Create a complex scalar field wrapper backed by two scalar expressions  @return  scalar field wrapper created and associated to the expression 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ComplexScalarFieldWrapper * CreateComplexScalarFieldWrapperWithExpressions
            (
                const std::vector<NXOpen::Expression *> & expressions /** existing expressions that will be this wrapper's value */
            );
            /** Create a complex scalar field wrapper backed up by a complex scalar field  @return  vector field wrapper created and associated to the field 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ComplexScalarFieldWrapper * CreateComplexScalarFieldWrapperWithField
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */
            );
            /** Creates a @link NXOpen::Fields::DisplayPropertiesBuilder NXOpen::Fields::DisplayPropertiesBuilder@endlink   @return  
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::DisplayPropertiesBuilder * CreateDisplayPropertiesBuilder
            (
                const std::vector<NXOpen::Fields::Field *> & fieldArray /** fields to edit display properties */
            );
            /** Creates a @link NXOpen::Fields::SpatialMapBuilder NXOpen::Fields::SpatialMapBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMapBuilder * CreateSpatialMapBuilder
            (
                NXOpen::Fields::SpatialMap * spatialmap /** Existing SpatialMap to edit; NULL to create */
            );
            /** Creates a Fields.ExportData  @return  the export data created 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ExportData * CreateExportData
            (
            );
            /** Exports fields to a text file as defined by export_data parameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void ExportFields
            (
                NXOpen::Fields::ExportData * exportData /** Export data */
            );
            /** Creates a Fields.ImportData  @return  the import data created 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ImportData * CreateImportData
            (
            );
            /** Imports fields from a text file as defined by import_data parameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void ImportFields
            (
                NXOpen::Fields::ImportData * importData /** Import data */
            );
            /** Creates a @link NXOpen::Fields::PathObjects NXOpen::Fields::PathObjects@endlink   @return  
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::PathObjects * CreatePathObjects
            (
            );
            /** Locate an existing, or create a new @link NXOpen::Fields::NameVariable NXOpen::Fields::NameVariable@endlink  object  @return  name variable with the specified measure and name 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::NameVariable * GetNameVariable
            (
                const NXString & variableName /** alphanumeric string; if it matches an existing name variable, the measures must also match */,
                const NXString & measureName /** must match an existing measure name, or "Unitless" */
            );
            /** Locate an existing, or create a new @link NXOpen::Fields::NameVariable NXOpen::Fields::NameVariable@endlink  object  @return  name variable with the specified measure and name 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::NameVariable * GetNameVariable
            (
                const char * variableName /** alphanumeric string; if it matches an existing name variable, the measures must also match */,
                const char * measureName /** must match an existing measure name, or "Unitless" */
            );
            /** Get the next available ID for @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink  object  @return  valid id 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int GetValidFieldId
            (
            );
            /** Creates a @link NXOpen::Fields::FieldLinksTable NXOpen::Fields::FieldLinksTable@endlink  object with dependent and independent variables 
                        @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .
                      @return  links table field 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldLinksTable * CreateFieldLinksTable
            (
                const NXString & fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables of this and all linked fields */,
                const std::vector<double> & datapoints /** row based array of double values representing the first independent variable; the number of points should equal the number of rows. */,
                const std::vector<NXOpen::Fields::Field *> & linkFieldsArray /** row based array of link field values representing the table; the number of fields should equal the number of rows.*/
            );
            /** Creates a @link NXOpen::Fields::FieldLinksTable NXOpen::Fields::FieldLinksTable@endlink  object with dependent and independent variables 
                        @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink .
                      @return  links table field 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldLinksTable * CreateFieldLinksTable
            (
                const char * fieldName /** field name */,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** independent variables to be associated with the field */,
                const std::vector<NXOpen::Fields::FieldVariable *> & depVarArray /** dependent variables of this and all linked fields */,
                const std::vector<double> & datapoints /** row based array of double values representing the first independent variable; the number of points should equal the number of rows. */,
                const std::vector<NXOpen::Fields::Field *> & linkFieldsArray /** row based array of link field values representing the table; the number of fields should equal the number of rows.*/
            );
            /** Create Mesh Size Field @link NXOpen::Fields::Field NXOpen::Fields::Field@endlink  object
                      @return  Created Field 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::Field * CreateMeshSizeFieldData
            (
                int elementSizeType /** At Centroid of Element Free Face and Elements=0,  At Centroid of Element Free Faces=1, At Centroid of Elements=2 */,
                const std::vector<NXOpen::TaggedObject *> & meshArray /** mesh array */ 
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::Fields::FieldProfileTable NXOpen::Fields::FieldProfileTable@endlink  object with dependent and independent variables 
                        @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink  and sketch curves@link NXOpen::Sketch NXOpen::Sketch@endlink .
                      @return  profile table field 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::FieldProfileTable * CreateProfileField
            (
                const NXString & fieldName /** field name */,
                NXOpen::Unit * dependentUnit /** unit of the dependent variable */,
                NXOpen::Sketch * sketch /** sketch source for profile */,
                int discreteType /** discretetype */ ,
                int numPoints /** numpoints */ ,
                NXOpen::Expression * chordalTolerance /** chordaltolerance */ ,
                NXOpen::Expression * offset /** offset expression for dependent variable */,
                NXOpen::Expression * scale /** scale expression for dependent variable */,
                int interpolationType /** profile interpolation type*/
            );
            /** Creates a @link NXOpen::Fields::FieldProfileTable NXOpen::Fields::FieldProfileTable@endlink  object with dependent and independent variables 
                        @link NXOpen::Fields::FieldVariable NXOpen::Fields::FieldVariable@endlink  and sketch curves@link NXOpen::Sketch NXOpen::Sketch@endlink .
                      @return  profile table field 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            NXOpen::Fields::FieldProfileTable * CreateProfileField
            (
                const char * fieldName /** field name */,
                NXOpen::Unit * dependentUnit /** unit of the dependent variable */,
                NXOpen::Sketch * sketch /** sketch source for profile */,
                int discreteType /** discretetype */ ,
                int numPoints /** numpoints */ ,
                NXOpen::Expression * chordalTolerance /** chordaltolerance */ ,
                NXOpen::Expression * offset /** offset expression for dependent variable */,
                NXOpen::Expression * scale /** scale expression for dependent variable */,
                int interpolationType /** profile interpolation type*/
            );

            /// \endcond 


            /** Returns a collection of Domains 
             <br>  Created in NX3.0.0.  <br>  
            */
            public: NXOpen::Fields::FieldDomainCollection *Domains();
            /** Returns a collection of Fields 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: NXOpen::Fields::FieldCollection *Fields();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
