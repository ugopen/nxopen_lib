#ifndef NXOpen_DRAWINGS_CONVERSIONPROCESSSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_CONVERSIONPROCESSSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ConversionProcessSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ConversionProcessSettingsBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ConversionProcessSettingsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Drawings
    {
        class _ConversionProcessSettingsBuilderBuilder;
        class ConversionProcessSettingsBuilderImpl;
        /**
            Represents a @link Drawings::ConversionProcessSettingsBuilder Drawings::ConversionProcessSettingsBuilder@endlink .
            This class queries and sets settings specific to drafting data which will get converted to PMIs.
            
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ConversionProcessSettingsBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** enum is used to list out different Action on error types */
            public: enum ActionOnErrorEnum
            {
                ActionOnErrorEnumSkipObjectAndContinue/** skip object and continue */ ,
                ActionOnErrorEnumStopProcessingAfterLimit/** stop processing after limit */ ,
                ActionOnErrorEnumStopProcessing/** stop processing */ 
            };

            private: ConversionProcessSettingsBuilderImpl * m_conversionprocesssettingsbuilder_impl;
            private: friend class  _ConversionProcessSettingsBuilderBuilder;
            protected: ConversionProcessSettingsBuilder();
            public: ~ConversionProcessSettingsBuilder();
            /**Returns  the configuration file browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ConfigurationFile
            (
            );
            /**Sets  the configuration file browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetConfigurationFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the configuration file browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetConfigurationFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the save as file browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SaveAsLocation
            (
            );
            /**Sets  the save as file browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSaveAsLocation
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the save as file browser 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetSaveAsLocation
            (
                const char * filename /** filename */ 
            );
            /**Returns  the multi-CAD assembly 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool MultiCADAssembly
            (
            );
            /**Sets  the multi-CAD assembly 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMultiCADAssembly
            (
                bool multiCADAssembly /** multicadassembly */ 
            );
            /**Returns  the JT part name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString JTPartNameAttribute
            (
            );
            /**Sets  the JT part name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetJTPartNameAttribute
            (
                const NXString & partNameAttribute /** partnameattribute */ 
            );
            /**Sets  the JT part name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetJTPartNameAttribute
            (
                const char * partNameAttribute /** partnameattribute */ 
            );
            /**Returns  the Source part name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SourcePartNameAttribute
            (
            );
            /**Sets  the Source part name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSourcePartNameAttribute
            (
                const NXString & partNameAttribute /** partnameattribute */ 
            );
            /**Sets  the Source part name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetSourcePartNameAttribute
            (
                const char * partNameAttribute /** partnameattribute */ 
            );
            /**Returns  the geometry tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double JTGeometryTolerance
            (
            );
            /**Sets  the geometry tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetJTGeometryTolerance
            (
                double geometryTolerance /** geometrytolerance */ 
            );
            /**Returns  the log file location folder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LogFileLocation
            (
            );
            /**Sets  the log file location folder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLogFileLocation
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the log file location folder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetLogFileLocation
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the store log file in teamcenter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool StoreLogFileInTeamCenter
            (
            );
            /**Sets  the store log file in teamcenter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetStoreLogFileInTeamCenter
            (
                bool storeLogFileInTeamCenter /** storelogfileinteamcenter */ 
            );
            /**Returns  the action on error 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ConversionProcessSettingsBuilder::ActionOnErrorEnum ActionOnError
            (
            );
            /**Sets  the action on error 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetActionOnError
            (
                NXOpen::Drawings::ConversionProcessSettingsBuilder::ActionOnErrorEnum actionOnError /** actiononerror */ 
            );
            /**Returns  the error limit integer 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int ErrorLimit
            (
            );
            /**Sets  the error limit integer 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetErrorLimit
            (
                int errorLimit /** errorlimit */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
