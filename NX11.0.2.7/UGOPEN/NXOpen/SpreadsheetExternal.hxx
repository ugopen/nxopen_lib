#ifndef NXOpen_SPREADSHEETEXTERNAL_HXX_INCLUDED
#define NXOpen_SPREADSHEETEXTERNAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SpreadsheetExternal.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/SpreadsheetCellData.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SpreadsheetExternal;
    class SpreadsheetCellData;
    class SpreadsheetExternalImpl;
    /** Represents a class for external spreadsheet.
    To call functions from this class, use @link SpreadsheetExternal SpreadsheetExternal@endlink  object returned by @link NXOpen::SpreadsheetManager::OpenFile  NXOpen::SpreadsheetManager::OpenFile @endlink . 
     <br>  Usable only on Windows <br> 
     <br>  Created in NX11.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  SpreadsheetExternal : public NXOpen::TransientObject
    {
        private: SpreadsheetExternalImpl * m_spreadsheetexternal_impl;
        /// \cond NX_NO_DOC 
        public: explicit SpreadsheetExternal(void *ptr);
        /// \endcond 
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector.  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~SpreadsheetExternal();
        /** Closes an excel file with an option to save the file before close. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void CloseFile
        (
            bool save /** If true, the file will be saved. If false, the file will not be saved.  */
        );
        /** Returns worksheet ID. @return  worksheet ID 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: int GetWorksheetIndex
        (
            const NXString & sheetname /** Sheet name to get Index*/
        );
        /** Returns worksheet ID. @return  worksheet ID 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        int GetWorksheetIndex
        (
            const char * sheetname /** Sheet name to get Index*/
        );
        /** Reads a named range. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ReadNamedRange
        (
            int worksheet /** worksheet ID */,
            const NXString & rangename /** Range name*/,
            std::vector<NXOpen::SpreadsheetCellData *> & v2 /** Data list for given range name */
        );
        /** Reads a named range. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void ReadNamedRange
        (
            int worksheet /** worksheet ID */,
            const char * rangename /** Range name*/,
            std::vector<NXOpen::SpreadsheetCellData *> & v2 /** Data list for given range name */
        );
        /** Reads the spreadsheet file and returns the data in the specified ranges 
            of the cells.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ReadRange
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            std::vector<NXOpen::SpreadsheetCellData *> & v2 /** Data list for given range */
        );
        /** Appends a new row of data to the Excel file. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void AppendRow
        (
            int worksheet /** Worksheet ID */,
            const std::vector<NXOpen::SpreadsheetCellData *> & data /** The append data list.*/
        );
        /** Writes the data to the specified range of the spreadsheet. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void WriteRange
        (
            const std::vector<NXOpen::SpreadsheetCellData *> & data /** The data list to be written to external Excel worksheet.*/
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
