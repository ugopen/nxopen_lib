#ifndef NXOpen_CAE_BCSELECTIONDISPLAYBUILDER_HXX_INCLUDED
#define NXOpen_CAE_BCSELECTIONDISPLAYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_BCSelectionDisplayBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BCSelectionDisplayBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class BCSelectionDisplayBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SimBC;
    }
    class NXColor;
    namespace CAE
    {
        class _BCSelectionDisplayBuilderBuilder;
        class BCSelectionDisplayBuilderImpl;
        /** This class provides BC Selection Visual Display support, use this class to get the 
                BC types in current solution, adds special BCs to list, and display the BC's selection
                geometry with the BC's color to do visually check <br> To create a new instance of this class, use @link NXOpen::CAE::SimSimulation::CreateBcSelectionDisplayBuilder  NXOpen::CAE::SimSimulation::CreateBcSelectionDisplayBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ShowExcludes </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseUnspecified </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  BCSelectionDisplayBuilder : public NXOpen::Builder
        {
            private: BCSelectionDisplayBuilderImpl * m_bcselectiondisplaybuilder_impl;
            private: friend class  _BCSelectionDisplayBuilderBuilder;
            protected: BCSelectionDisplayBuilder();
            public: ~BCSelectionDisplayBuilder();
            /** Returns the list of BC family names used in the current solution.  Use the returned names as a filter
                        in @link BCSelectionDisplayBuilder::AskBCsByFilter BCSelectionDisplayBuilder::AskBCsByFilter@endlink 
                        to get all the BCs with the same family name  @return Current family names list, the first filter name will be "All"
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> AskFamilyNamesByFilter
            (
                bool loadFilter /** If True, load family names will be included*/,
                bool constraintFilter /** If True, constraint  family names will be included*/,
                bool simObjFilter /** If True, simulation object family names will be included*/
            );
            /** Return the BCs in the active solution using the specified filters 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void AskBCsByFilter
            (
                bool loadFilter /**The load filter status*/,
                bool constraintFilter /**The constraint filter status*/,
                bool simObjFilter /**The simulation object filter status*/,
                const NXString & familyFilterNames /** Family filter name, they can be found using  @link CAE::BCSelectionDisplayBuilder::AskFamilyNamesByFilter CAE::BCSelectionDisplayBuilder::AskFamilyNamesByFilter@endlink  */,
                std::vector<NXOpen::CAE::SimBC *> & bcs /** bcs */ 
            );
            /** Return the BCs in the active solution using the specified filters 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void AskBCsByFilter
            (
                bool loadFilter /**The load filter status*/,
                bool constraintFilter /**The constraint filter status*/,
                bool simObjFilter /**The simulation object filter status*/,
                const char * familyFilterNames /** Family filter name, they can be found using  @link CAE::BCSelectionDisplayBuilder::AskFamilyNamesByFilter CAE::BCSelectionDisplayBuilder::AskFamilyNamesByFilter@endlink  */,
                std::vector<NXOpen::CAE::SimBC *> & bcs /** bcs */ 
            );
            /** Add BCs to the Selected BCs List 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void AddToSelectedBCsList
            (
                const std::vector<NXOpen::CAE::SimBC *> & bcs /** bcs */ 
            );
            /** Remove BCs from the Selected BCs List 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveFromSelectedBCsList
            (
                const std::vector<NXOpen::CAE::SimBC *> & bcs /** bcs */ 
            );
            /** Ask all BCs in the Selected BCs List 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void AskSelectedBCsList
            (
                std::vector<NXOpen::CAE::SimBC *> & bcs /** bcs */ 
            );
            /** Returns those BCs which have defined geometries overlapping within the input BCs list
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void AskOverlappingBCs
            (
                const std::vector<NXOpen::CAE::SimBC *> & bcs /**Candidate @link CAE::SimBC CAE::SimBC@endlink  objects*/,
                std::vector<NXOpen::CAE::SimBC *> & overlappingBCs /**Overlapping @link CAE::SimBC CAE::SimBC@endlink  objects*/
            );
            /**Returns  a value indicating whether the builder will display polygonal geometry or mesh, 
                        which do not have these BCs specified on them, with the unspecified color  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseUnspecified
            (
            );
            /**Sets  a value indicating whether the builder will display polygonal geometry or mesh, 
                        which do not have these BCs specified on them, with the unspecified color  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseUnspecified
            (
                bool useUnspecifiedToggle /** useunspecifiedtoggle */ 
            );
            /**Returns  a value indicating how the BCs excluded Model objects will be displayed with the
                        color set by @link NXOpen::CAE::BCSelectionDisplayBuilder::SetExcludesColor NXOpen::CAE::BCSelectionDisplayBuilder::SetExcludesColor@endlink , 
                       if True they be displayed using the Excludes Color , if false they be displayed with
                       default color    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowExcludes
            (
            );
            /**Sets  a value indicating how the BCs excluded Model objects will be displayed with the
                        color set by @link NXOpen::CAE::BCSelectionDisplayBuilder::SetExcludesColor NXOpen::CAE::BCSelectionDisplayBuilder::SetExcludesColor@endlink , 
                       if True they be displayed using the Excludes Color , if false they be displayed with
                       default color    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowExcludes
            (
                bool showExcludesToggle /** showexcludestoggle */ 
            );
            /**Returns  the unspecified color for target sets
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * UnspecifiedColor
            (
            );
            /**Sets  the unspecified color for target sets
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUnspecifiedColor
            (
                NXOpen::NXColor * unspecifiedColor /** unspecifiedcolor */ 
            );
            /**Returns  the excludes target sets displayed color 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ExcludesColor
            (
            );
            /**Sets  the excludes target sets displayed color 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExcludesColor
            (
                NXOpen::NXColor * excludesColor /** excludescolor */ 
            );
            /**Returns  the overlapping target sets displayed color
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OverlappingColor
            (
            );
            /**Sets  the overlapping target sets displayed color
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOverlappingColor
            (
                NXOpen::NXColor * overlappingColor /** overlappingcolor */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
