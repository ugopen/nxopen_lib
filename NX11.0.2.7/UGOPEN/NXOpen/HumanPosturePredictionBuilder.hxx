#ifndef NXOpen_HUMANPOSTUREPREDICTIONBUILDER_HXX_INCLUDED
#define NXOpen_HUMANPOSTUREPREDICTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     HumanPosturePredictionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/HumanData.hxx>
#include <NXOpen/HumanPosturePredictionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class HumanPosturePredictionBuilder;
    class Body;
    class Builder;
    class CoordinateSystem;
    namespace Features
    {
        class Human;
    }
    class NXObject;
    class Point;
    class _HumanPosturePredictionBuilderBuilder;
    class HumanPosturePredictionBuilderImpl;
    /** Represents a Human Posture Prediction Builder.  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateHumanPosturePredictionBuilder  NXOpen::Features::FeatureCollection::CreateHumanPosturePredictionBuilder @endlink  <br> 
     <br>  Created in NX5.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  HumanPosturePredictionBuilder : public NXOpen::Builder
    {
        /**Represents the predition method type. */
        public: enum PredictionMethodType
        {
            PredictionMethodTypeAspect/** Indicate ASPECT H_point method     */,
            PredictionMethodTypePreAspect/** Indicate Pre-ASPECT H_point method */
        };

        /** This enum represents the steering wheel or pedal type, if there is no steering wheel or pedal, use csys as steering
                wheel and pedal type */
        public: enum SteeringWheelPedalType
        {
            SteeringWheelPedalTypeSolid/** Use solid steering wheel or pedal              */,
            SteeringWheelPedalTypeCurve/** Use curve steering wheel or pedal              */,
            SteeringWheelPedalTypeSae/** Use sae data to define steering wheel or pedal */,
            SteeringWheelPedalTypeCsys/** No steering wheel or pedal, use csys to define 
                                                                                                  the position and orientation of hand or foot   */
        };

        /** Represents the vehicle type. */
        public: enum VehicleType
        {
            VehicleTypeClassA/** Indicate Class A vehicle. Vehicles with H-point heights (H30) 
                                                                                       less than 405 mm and steering wheel diameters (W9) less than
                                                                                       450 mm. This class of vehicles includes passenger cars, 
                                                                                       multipurpose passenger vehicles, and vans. */,
            VehicleTypeClassB/** Indicate Class B vehicle. Vehicles with H-point heights (H30)
                                                                                       between 405 and 530 mm and steering wheel diameters (W9) between
                                                                                       450 and 560 mm with treadle accelerator pedals. This class of
                                                                                       vehicles includes heavy trucks, some medium duty trucks, and some buses. */
        };

        /**Represents the occupant type. */
        public: enum OccupantType
        {
            OccupantTypeDriver/** Indicate Driver          */,
            OccupantTypeFrontPassenger/** Indicate Front passenger */,
            OccupantTypeRearPassenger/** Indicate Rear passenger  */
        };

        /**Represents the transmission type */
        public: enum TransmissionType
        {
            TransmissionTypeAutomatic/** Indicate automatic transmission */,
            TransmissionTypeManual/** Indicate manual transmission    */
        };

        /**Represents the seat type  */
        public: enum SeatType
        {
            SeatTypeFixed/** Indicate fixed seat      */,
            SeatTypeAdjustable/** Indicate adjustable seat */
        };

        /** Represents the cushion firmness type */
        public: enum CushionFirmnessType
        {
            CushionFirmnessTypeSoft/** Indicate soft cushion   */,
            CushionFirmnessTypeMedium/** Indicate medium cushion */,
            CushionFirmnessTypeFirm/** Indicate firm cushion   */
        };

        private: HumanPosturePredictionBuilderImpl * m_humanposturepredictionbuilder_impl;
        private: friend class  _HumanPosturePredictionBuilderBuilder;
        protected: HumanPosturePredictionBuilder();
        public: ~HumanPosturePredictionBuilder();
        /**Returns  the name of posture prediction, it is an internal name for posture prediction, and it does not display on
                user interface 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString Name
        (
        );
        /**Sets  the name of posture prediction, it is an internal name for posture prediction, and it does not display on
                user interface 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetName
        (
            const NXString & name /** the internal name */
        );
        /**Sets  the name of posture prediction, it is an internal name for posture prediction, and it does not display on
                user interface 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetName
        (
            const char * name /** the internal name */
        );
        /**Returns  the flag of using vehicle package data, if true, use data from vehicle package, otherwize use
                customer defined vehicle data 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: bool UseVehiclePackagingData
        (
        );
        /**Sets  the flag of using vehicle package data, if true, use data from vehicle package, otherwize use
                customer defined vehicle data 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetUseVehiclePackagingData
        (
            bool useVehiclePackagingData /** the flag of using vehicle package data */
        );
        /**Returns  the prediction method: aspect or pre_aspect 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanPosturePredictionBuilder::PredictionMethodType PredictionMethod
        (
        );
        /**Sets  the prediction method: aspect or pre_aspect 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetPredictionMethod
        (
            NXOpen::HumanPosturePredictionBuilder::PredictionMethodType predictionMethodType /** the prediction method type */
        );
        /**Returns  the show report status, if true, then show the report of result 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: bool ShowReport
        (
        );
        /**Sets  the show report status, if true, then show the report of result 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetShowReport
        (
            bool showReport /** the show report status */
        );
        /**Returns  the Car Coordinate System 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::CoordinateSystem * CarCsys
        (
        );
        /** Create the Car Coordinate System, only one Car Coordinate System is allowed in a part or an assembly 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void CreateCarCsys
        (
            const NXOpen::Point3d & carCsysOrigin /** the origin of Car Coordinate System */,
            const NXOpen::Matrix3x3 & carCsysMatrix /** the matrix of Car Coordinate System */
        );
        /**Returns  the vehicle packaging data name, it is invalid when using customer defined vehicle data. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString VehiclePackagingDataName
        (
        );
        /**Sets  the vehicle packaging data name, it is invalid when using customer defined vehicle data. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetVehiclePackagingDataName
        (
            const NXString & vehiclePackagingDataName /** the vehicle packaging data name */
        );
        /**Sets  the vehicle packaging data name, it is invalid when using customer defined vehicle data. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetVehiclePackagingDataName
        (
            const char * vehiclePackagingDataName /** the vehicle packaging data name */
        );
        /**Returns  the vehicle type: Class A or Class B 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanPosturePredictionBuilder::VehicleType Vehicle
        (
        );
        /**Sets  the vehicle type: Class A or Class B 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetVehicle
        (
            NXOpen::HumanPosturePredictionBuilder::VehicleType vehicleType /** the vehicle type */
        );
        /**Returns  the occupant type: driver, front passenger or rear passenger. The occupant type should be driver
                when vehicle type is Class B 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanPosturePredictionBuilder::OccupantType Occupant
        (
        );
        /**Sets  the occupant type: driver, front passenger or rear passenger. The occupant type should be driver
                when vehicle type is Class B 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetOccupant
        (
            NXOpen::HumanPosturePredictionBuilder::OccupantType occupantType /** the occupant type */
        );
        /**Returns  the transmission type: automatic or manual. The transmission type should be manual when vehicle
                type is Class B 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanPosturePredictionBuilder::TransmissionType Transmission
        (
        );
        /**Sets  the transmission type: automatic or manual. The transmission type should be manual when vehicle
                type is Class B 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetTransmission
        (
            NXOpen::HumanPosturePredictionBuilder::TransmissionType transmissionType /** the transmission type */
        );
        /**Returns  the seat type: fixed seat or adjustable seat 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanPosturePredictionBuilder::SeatType Seat
        (
        );
        /**Sets  the seat type: fixed seat or adjustable seat 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetSeat
        (
            NXOpen::HumanPosturePredictionBuilder::SeatType seatType /** the seat type */
        );
        /**Returns  the cushion firmness type: soft cushion, medium cushion or firm cushion 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanPosturePredictionBuilder::CushionFirmnessType CushionFirmness
        (
        );
        /**Sets  the cushion firmness type: soft cushion, medium cushion or firm cushion 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetCushionFirmness
        (
            NXOpen::HumanPosturePredictionBuilder::CushionFirmnessType cushionFirmnessType /** the cushion firmness type */
        );
        /**Returns  the lumbar prominence L81 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString LumbarProminenceL81
        (
        );
        /**Sets  the lumbar prominence L81 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetLumbarProminenceL81
        (
            const NXString & lumbarProminenceL81 /** the lumbar prominence L81 expression */
        );
        /**Sets  the lumbar prominence L81 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetLumbarProminenceL81
        (
            const char * lumbarProminenceL81 /** the lumbar prominence L81 expression */
        );
        /**Returns  the seat track X range lower limit TL1 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString TrackLowerLimitLengthTL1
        (
        );
        /**Sets  the seat track X range lower limit TL1 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetTrackLowerLimitLengthTL1
        (
            const NXString & trackLowerLimitLengthTL1 /** the seat track X range lower limit TL1 expression */
        );
        /**Sets  the seat track X range lower limit TL1 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetTrackLowerLimitLengthTL1
        (
            const char * trackLowerLimitLengthTL1 /** the seat track X range lower limit TL1 expression */
        );
        /**Returns  the seat track X range upper limit TL23 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString TrackUpperLimitLengthTL23
        (
        );
        /**Sets  the seat track X range upper limit TL23 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetTrackUpperLimitLengthTL23
        (
            const NXString & trackUpperLimitLengthTL23 /** the seat track X range upper limit TL23 expression */
        );
        /**Sets  the seat track X range upper limit TL23 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetTrackUpperLimitLengthTL23
        (
            const char * trackUpperLimitLengthTL23 /** the seat track X range upper limit TL23 expression */
        );
        /**Returns  the seat track Z range lower limit TH1 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString TrackLowerLimitHeightTH1
        (
        );
        /**Sets  the seat track Z range lower limit TH1 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetTrackLowerLimitHeightTH1
        (
            const NXString & trackLowerLimitHeightTH1 /** the seat track Z range lower limit TH1 expression */
        );
        /**Sets  the seat track Z range lower limit TH1 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetTrackLowerLimitHeightTH1
        (
            const char * trackLowerLimitHeightTH1 /** the seat track Z range lower limit TH1 expression */
        );
        /**Returns  the seat travel Z range upper limit TH2 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString TrackUpperLimitHeightTH2
        (
        );
        /**Sets  the seat travel Z range upper limit TH2 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetTrackUpperLimitHeightTH2
        (
            const NXString & trackUpperLimitHeightTH2 /** the seat track Z range lower limit TH2 expression */
        );
        /**Sets  the seat travel Z range upper limit TH2 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetTrackUpperLimitHeightTH2
        (
            const char * trackUpperLimitHeightTH2 /** the seat track Z range lower limit TH2 expression */
        );
        /**Returns  the back angle A40 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString BackAngleA40
        (
        );
        /**Sets  the back angle A40 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetBackAngleA40
        (
            const NXString & backAngleA40 /** the back angle A40 expression */
        );
        /**Sets  the back angle A40 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetBackAngleA40
        (
            const char * backAngleA40 /** the back angle A40 expression */
        );
        /**Returns  the cushion angle A27 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString CushionAngleA27
        (
        );
        /**Sets  the cushion angle A27 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetCushionAngleA27
        (
            const NXString & cushionAngleA27 /** the cushion angle A27 expression */
        );
        /**Sets  the cushion angle A27 of seat data, it should be set for Class A driver, Class A front passenger
                and Class A rear passenger 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetCushionAngleA27
        (
            const char * cushionAngleA27 /** the cushion angle A27 expression */
        );
        /**Returns  the track angle A19 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString SeatTrackAngleA19
        (
        );
        /**Sets  the track angle A19 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetSeatTrackAngleA19
        (
            const NXString & seatTrackAngleA19 /** the track angle A19 expression */
        );
        /**Sets  the track angle A19 of seat data, it should be set for Class A driver, Class A front passenger
                and Class B driver 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetSeatTrackAngleA19
        (
            const char * seatTrackAngleA19 /** the track angle A19 expression */
        );
        /** Get the SgRP point, it is NULL if SgRP is set by coordinates  @return  the SgRP point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::Point * GetSgrpPoint
        (
        );
        /** Set the SgRP point by an existing point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetSgrpPoint
        (
            NXOpen::Point * sgrpPoint /** the SgRP point */
        );
        /** Get the SgRP point coordinates, L31, W20, H70. The coordinates are NULL if SgRP is
                set by an existing point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void GetSgrpCoordinates
        (
            NXString* pointX /** the length coordinates L31 expression */,
            NXString* pointY /** the width  coordinates W20 expression */,
            NXString* pointZ /** the height coordinates H70 expression */
        );
        /** Set the SgRP point by coordinates, L31, W20, H70 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetSgrpCoordinates
        (
            const NXString & pointX /** the length coordinates L31 expression */,
            const NXString & pointY /** the width  coordinates W20 expression */,
            const NXString & pointZ /** the height coordinates H70 expression */
        );
        /** Set the SgRP point by coordinates, L31, W20, H70 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetSgrpCoordinates
        (
            const char * pointX /** the length coordinates L31 expression */,
            const char * pointY /** the width  coordinates W20 expression */,
            const char * pointZ /** the height coordinates H70 expression */
        );
        /** Get the AHP point, it is NULL if AHP is set by coordinates  @return  the AHP point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::Point * GetAhpPoint
        (
        );
        /** Set the AHP point by an existing point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetAhpPoint
        (
            NXOpen::Point * ahpPoint /** the AHP point */
        );
        /** Get the AHP point coordinates, L8, W8, H8. The coordinates are NULL if AHP is
                set by an existing point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void GetAhpCoordinates
        (
            NXString* pointX /** the length coordinates L8 expression */,
            NXString* pointY /** the width  coordinates W8 expression */,
            NXString* pointZ /** the height coordinates H8 expression */
        );
        /** Set the AHP point by coordinates, L8, W8, H8 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetAhpCoordinates
        (
            const NXString & pointX /** the length coordinates L8 expression */,
            const NXString & pointY /** the width  coordinates W8 expression */,
            const NXString & pointZ /** the height coordinates H8 expression */
        );
        /** Set the AHP point by coordinates, L8, W8, H8 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetAhpCoordinates
        (
            const char * pointX /** the length coordinates L8 expression */,
            const char * pointY /** the width  coordinates W8 expression */,
            const char * pointZ /** the height coordinates H8 expression */
        );
        /** Get the steering wheel and pedal types of hand foot data  @return  the type of steering wheel or pedal 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::HumanPosturePredictionBuilder::SteeringWheelPedalType GetHandFootDataType
        (
            NXOpen::HumanData::HandFootType handFoot /** Indicates Human hand or foot        */,
            NXOpen::HumanData::SideType side /** Indicates Human left or right       */
        );
        /** Set the steering wheel and pedal types of hand foot data. The steering wheel and pedal types of both hands
                should be csys if the occupant type is front passenger and rear passenger. The steering wheel and pedal types
                of both hands of should be same or at least one hand should be set as csys if the occupant type is driver. 
                For example, you can set solid - solid, curve - curve, sae - sae, csys - csys, any type - csys for both hands of a driver. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetHandFootDataType
        (
            NXOpen::HumanData::HandFootType handFoot /** Indicates Human hand or foot        */,
            NXOpen::HumanData::SideType side /** Indicates Human left or right       */,
            NXOpen::HumanPosturePredictionBuilder::SteeringWheelPedalType steeringWheelPedalType /** the type of steering wheel or pedal */
        );
        /** Get the solid bodies of steering wheel or pedal of hand foot data, it will return NULL if the steering wheel pedal type 
                is not Solid  @return  the solid bodies of steeing wheel or pedal 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: std::vector<NXOpen::Body *> GetHandFootDataSolids
        (
            NXOpen::HumanData::HandFootType handFoot /** Indicates Human hand or foot  */,
            NXOpen::HumanData::SideType side /** Indicates Human left or right */
        );
        /** Set the solid bodies of steering wheel or pedal of hand foot data, the steering wheel pedal type should be set as Solid 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetHandFootDataSolids
        (
            NXOpen::HumanData::HandFootType handFoot /** Indicates Human hand or foot  */,
            NXOpen::HumanData::SideType side /** Indicates Human left or right */,
            const std::vector<NXOpen::Body *> & solids /** the solid bodies of steeing wheel or pedal */
        );
        /** Get the curves or edges of steering wheel or pedal of hand foot data, it will return NULL if the steering wheel pedal type is
                not Curve  @return  the curves of steeing wheel or pedal 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: std::vector<NXOpen::NXObject *> GetHandFootDataCurves
        (
            NXOpen::HumanData::HandFootType handFoot /** Indicates Human hand or foot  */,
            NXOpen::HumanData::SideType side /** Indicates Human left or right */
        );
        /** Set the curves or edges of steering wheel or pedal of hand foot data, the steering wheel pedal type should
                be set as Curve and the input curves should be closed 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetHandFootDataCurves
        (
            NXOpen::HumanData::HandFootType handFoot /** Indicates Human hand or foot  */,
            NXOpen::HumanData::SideType side /** Indicates Human left or right */,
            const std::vector<NXOpen::NXObject *> & curves /** the curves of steeing wheel or pedal */
        );
        /** Get the steering wheel SAE Data, L11, H17, W9 and A18 for both hand, it will return NULL if the steering
                wheel pedal type is not Sae 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void GetHandDataSae
        (
            NXOpen::HumanData::SideType side /** Indicates Human left or right                      */,
            NXString* l11 /** AHP to steering wheel center length L11 expression */,
            NXString* h17 /** AHP to steering wheel center height H17 expression */,
            NXString* w9 /** the steering wheel angle A18 expression            */,
            NXString* a18 /** the steering wheel outside diameter W9 expression  */
        );
        /** Set the steering wheel SAE Data, L11, H17, W9 and A18 of hand data, the steering wheel pedal type
                should be set as Sae 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetHandDataSae
        (
            NXOpen::HumanData::SideType side /** Indicates Human left or right                      */,
            const NXString & l11 /** AHP to steering wheel center length L11 expression */,
            const NXString & h17 /** AHP to steering wheel center height H17 expression */,
            const NXString & w9 /** the steering wheel angle A18 expression            */,
            const NXString & a18 /** the steering wheel outside diameter W9 expression  */
        );
        /** Set the steering wheel SAE Data, L11, H17, W9 and A18 of hand data, the steering wheel pedal type
                should be set as Sae 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetHandDataSae
        (
            NXOpen::HumanData::SideType side /** Indicates Human left or right                      */,
            const char * l11 /** AHP to steering wheel center length L11 expression */,
            const char * h17 /** AHP to steering wheel center height H17 expression */,
            const char * w9 /** the steering wheel angle A18 expression            */,
            const char * a18 /** the steering wheel outside diameter W9 expression  */
        );
        /** Get the pedal Sae data of foot, the steering wheel pedal type should be set as Sae  @return  Left Foot Angle or Pedal Plane Angle A47 expression 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXString GetFootDataSae
        (
            NXOpen::HumanData::SideType side /** Indicates Human left or right                       */
        );
        /** Set the pedal Sae data of foot data, the steering wheel pedal type should be set as Sae 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetFootDataSae
        (
            NXOpen::HumanData::SideType side /** Indicates Human left or right                       */,
            const NXString & pedalAngle /** Left Foot Angle or Pedal Plane Angle A47 expression */
        );
        /** Set the pedal Sae data of foot data, the steering wheel pedal type should be set as Sae 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        void SetFootDataSae
        (
            NXOpen::HumanData::SideType side /** Indicates Human left or right                       */,
            const char * pedalAngle /** Left Foot Angle or Pedal Plane Angle A47 expression */
        );
        /** Get the Csys of hand foot. Calculate method should be called to compute Csys first for solid, curve or sae 
                before get it 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void GetHandFootCsys
        (
            NXOpen::HumanData::HandFootType handFoot /** Indicates Human hand or foot    */,
            NXOpen::HumanData::SideType side /** Indicates Human left or right   */,
            NXOpen::Point3d* position /** the position of hand or foot    */,
            NXOpen::Matrix3x3* orientation /** the orientation of hand or foot */
        );
        /** Set the Csys of hand foot, the hand foot csys should be on solid, curve or not conflict with
                SAE data related to its steering wheel and pedal type. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetHandFootCsys
        (
            NXOpen::HumanData::HandFootType handFoot /** Indicates Human hand or foot    */,
            NXOpen::HumanData::SideType side /** Indicates Human left or right   */,
            const NXOpen::Point3d & position /** the position of hand or foot    */,
            const NXOpen::Matrix3x3 & orientation /** the orientation of hand or foot */
        );
        /** Compute the Csys of both hands according to solid, curve or sae data. The left hand and right
                hand are on the 10 / 2 position of the steering wheel. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void ComputeHandCsys
        (
            NXOpen::Point3d* leftHandPosition /** the position of left hand     */,
            NXOpen::Matrix3x3* leftHandOrientation /** the orientation of left hand  */,
            NXOpen::Point3d* rightHandPosition /** the position of right hand    */,
            NXOpen::Matrix3x3* rightHandOrientation /** the orientation of right hand */
        );
        /** Compute the Foot Csys according to solid, curve or sae data. The right foot is on the position of AHP 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void ComputeFootCsys
        (
            NXOpen::HumanData::SideType side /** Indicates Human left or right */,
            NXOpen::Point3d* position /** the position of foot          */,
            NXOpen::Matrix3x3* orientation /** the orientation of foot       */
        );
        /**Returns  the human for posture prediction 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: NXOpen::Features::Human * Human
        (
        );
        /**Sets  the human for posture prediction 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING"), ug_human ("Human Modelling") */
        public: void SetHuman
        (
            NXOpen::Features::Human * human /** the human for posture prediction */
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
