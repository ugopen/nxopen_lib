#ifndef NXOpen_TOOLING_EWDRAFTINGBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_EWDRAFTINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_EWDraftingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_EWDraftingBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class EWDraftingBuilder;
    }
    class Builder;
    class SelectPartList;
    namespace Tooling
    {
        class _EWDraftingBuilderBuilder;
        class EWDraftingBuilderImpl;
        /** Represents the drafting builder which is used to create electrode drafting.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ElectrodeDesignCollection::CreateEwdraftingBuilder  NXOpen::Tooling::ElectrodeDesignCollection::CreateEwdraftingBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CncOption </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CncTemplate </td> <td> 
         
        CncTemplate1 </td> </tr> 

        <tr><td> 
         
        DraftingMode </td> <td> 
         
        Create </td> </tr> 

        <tr><td> 
         
        DrawingType </td> <td> 
         
        MasterModel </td> </tr> 

        <tr><td> 
         
        EdmOption </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        EdmTemplate </td> <td> 
         
        EdmTemplate1 </td> </tr> 

        <tr><td> 
         
        IncludeOption </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        OrdinateDimension </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OutputPDF </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        OutputSameSheet </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RenameComponent </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SheetName </td> <td> 
         
        Sh1 </td> </tr> 

        <tr><td> 
         
        UseInstance </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  EWDraftingBuilder : public NXOpen::Builder
        {
            /** the drafting mode option */
            public: enum ModeOption
            {
                ModeOptionCreate/** create drawing */,
                ModeOptionAdd/** add drawing */,
                ModeOptionEdit/** edit drawing */
            };

            /** the drawing sheet name option */
            public: enum NameOption
            {
                NameOptionSh1/** sh1 sheet name */,
                NameOptionSh2/** sh2 sheet name */
            };

            /** the template option of edm sheet type */
            public: enum EDMTemplateOption
            {
                EDMTemplateOptionEdmTemplate1/** template1 */,
                EDMTemplateOptionEdmTemplate2/** template2 */
            };

            /** the template option of cnc sheet type */
            public: enum CNCTemplateOption
            {
                CNCTemplateOptionCncTemplate1/** template1 */,
                CNCTemplateOptionCncTemplate2/** template2 */
            };

            /** the drawing type */
            public: enum DrawingOption
            {
                DrawingOptionMasterModel/** master model */,
                DrawingOptionSelfContained/** self contained */
            };

            private: EWDraftingBuilderImpl * m_ewdraftingbuilder_impl;
            private: friend class  _EWDraftingBuilderBuilder;
            protected: EWDraftingBuilder();
            public: ~EWDraftingBuilder();
            /**Returns  the drafting mode: create, add or edit. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::EWDraftingBuilder::ModeOption DraftingMode
            (
            );
            /**Sets  the drafting mode: create, add or edit. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetDraftingMode
            (
                NXOpen::Tooling::EWDraftingBuilder::ModeOption draftingMode /** draftingmode */ 
            );
            /**Returns  the blank components used to create drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::SelectPartList * BlankComps
            (
            );
            /**Returns  the sheet name option used to edit drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::EWDraftingBuilder::NameOption SheetName
            (
            );
            /**Sets  the sheet name option used to edit drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetSheetName
            (
                NXOpen::Tooling::EWDraftingBuilder::NameOption sheetName /** sheetname */ 
            );
            /**Returns  the option to create edm sheet type drafting or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool EdmOption
            (
            );
            /**Sets  the option to create edm sheet type drafting or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetEdmOption
            (
                bool edmOption /** edmoption */ 
            );
            /**Returns  the template of edm sheet type to create drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::EWDraftingBuilder::EDMTemplateOption EdmTemplate
            (
            );
            /**Sets  the template of edm sheet type to create drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetEdmTemplate
            (
                NXOpen::Tooling::EWDraftingBuilder::EDMTemplateOption edmTemplate /** edmtemplate */ 
            );
            /**Returns  the option to create cnc sheet type drafting or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool CncOption
            (
            );
            /**Sets  the option to create cnc sheet type drafting or not. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetCncOption
            (
                bool cncOption /** cncoption */ 
            );
            /**Returns  the template of cnc sheet type to create drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::EWDraftingBuilder::CNCTemplateOption CncTemplate
            (
            );
            /**Sets  the template of cnc sheet type to create drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetCncTemplate
            (
                NXOpen::Tooling::EWDraftingBuilder::CNCTemplateOption cncTemplate /** cnctemplate */ 
            );
            /**Returns  the drawing type used to create drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::EWDraftingBuilder::DrawingOption DrawingType
            (
            );
            /**Sets  the drawing type used to create drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetDrawingType
            (
                NXOpen::Tooling::EWDraftingBuilder::DrawingOption drawingType /** drawingtype */ 
            );
            /**Returns  the name rule used to create drafting part. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXString NameRule
            (
            );
            /**Sets  the name rule used to create drafting part. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetNameRule
            (
                const NXString & nameRule /** namerule */ 
            );
            /**Sets  the name rule used to create drafting part. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            void SetNameRule
            (
                const char * nameRule /** namerule */ 
            );
            /**Returns  the option used to rename the part which is created. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool RenameComponent
            (
            );
            /**Sets  the option used to rename the part which is created. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRenameComponent
            (
                bool renameComponent /** renamecomponent */ 
            );
            /**Returns  the option used to set ordinate dimension. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool OrdinateDimension
            (
            );
            /**Sets  the option used to set ordinate dimension. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetOrdinateDimension
            (
                bool ordinateDimension /** ordinatedimension */ 
            );
            /**Returns  the option used to include the working component when creating drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool IncludeOption
            (
            );
            /**Sets  the option used to include the working component when creating drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetIncludeOption
            (
                bool includeOption /** includeoption */ 
            );
            /**Returns  the option used to include fixture when creating drafting. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool IncludeFixture
            (
            );
            /**Sets  the option used to include fixture when creating drafting. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetIncludeFixture
            (
                bool includeFixture /** includefixture */ 
            );
            /**Returns  the option used to output all the blanks in the same sheet. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool OutputSameSheet
            (
            );
            /**Sets  the option used to output all the blanks in the same sheet. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetOutputSameSheet
            (
                bool outputSameSheet /** outputsamesheet */ 
            );
            /**Returns  the option used to output pdf file when creating drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool OutputPDF
            (
            );
            /**Sets  the option used to output pdf file when creating drafting. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetOutputPDF
            (
                bool outputPDF /** outputpdf */ 
            );
            /**Returns  the option used to display and use instance of electrode to create drawing. 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool UseInstance
            (
            );
            /**Sets  the option used to display and use instance of electrode to create drawing. 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetUseInstance
            (
                bool useInstance /** useinstance */ 
            );
            /**Returns  the name to create a master model part for EDM drawing. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MasterModelEdmPartName
            (
            );
            /**Sets  the name to create a master model part for EDM drawing. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetMasterModelEdmPartName
            (
                const NXString & masterModelPartName /** mastermodelpartname */ 
            );
            /**Sets  the name to create a master model part for EDM drawing. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            void SetMasterModelEdmPartName
            (
                const char * masterModelPartName /** mastermodelpartname */ 
            );
            /**Returns  the name to create a master model part for CNC drawing. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MasterModelCncPartName
            (
            );
            /**Sets  the name to create a master model part for CNC drawing. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetMasterModelCncPartName
            (
                const NXString & masterModelPartName /** mastermodelpartname */ 
            );
            /**Sets  the name to create a master model part for CNC drawing. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            void SetMasterModelCncPartName
            (
                const char * masterModelPartName /** mastermodelpartname */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
