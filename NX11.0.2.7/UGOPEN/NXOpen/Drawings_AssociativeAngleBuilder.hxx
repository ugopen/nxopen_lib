#ifndef NXOpen_DRAWINGS_ASSOCIATIVEANGLEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_ASSOCIATIVEANGLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_AssociativeAngleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_AssociativeAngleBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class AssociativeAngleBuilder;
    }
    class Direction;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class Plane;
    class Scalar;
    class SelectNXObject;
    class View;
    namespace Drawings
    {
        class _AssociativeAngleBuilderBuilder;
        class AssociativeAngleBuilderImpl;
        /** This builder allows the user to create an associative or non-associative angle by measuring
                between a combination of two objects or vectors evaluated on a specified plane, or by an expression 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  AssociativeAngleBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Represents the object type. */
            public: enum ObjectType
            {
                ObjectTypeObject/** indicates the selected type is an object */,
                ObjectTypeVector/** indicates the selected type is a vector */
            };

            /** evaluation plane types */
            public: enum EvaluationPlaneType
            {
                EvaluationPlaneTypeDrawingSheet/** drawing sheet */ ,
                EvaluationPlaneTypeTrueAngle/** true angle */ ,
                EvaluationPlaneTypeSpecifyPlane/** specify plane */ 
            };

            private: AssociativeAngleBuilderImpl * m_associativeanglebuilder_impl;
            private: friend class  _AssociativeAngleBuilderBuilder;
            protected: AssociativeAngleBuilder();
            public: ~AssociativeAngleBuilder();
            /**Returns  the angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Angle
            (
            );
            /**Returns  the associative flag 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative flag 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the first object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * FirstObject
            (
            );
            /**Returns  the first vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * FirstVector
            (
            );
            /**Sets  the first vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFirstVector
            (
                NXOpen::Direction * firstVector /** firstvector */ 
            );
            /**Returns  the first map view 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::View * FirstMapView
            (
            );
            /**Sets  the first map view 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFirstMapView
            (
                NXOpen::View * firstMapView /** firstmapview */ 
            );
            /**Returns  the second object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SecondObject
            (
            );
            /**Returns  the second vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SecondVector
            (
            );
            /**Sets  the second vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSecondVector
            (
                NXOpen::Direction * secondVector /** secondvector */ 
            );
            /**Returns  the second map view 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::View * SecondMapView
            (
            );
            /**Sets  the second map view 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSecondMapView
            (
                NXOpen::View * secondMapView /** secondmapview */ 
            );
            /**Returns  the evaluation plane type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::AssociativeAngleBuilder::EvaluationPlaneType EvaluationPlane
            (
            );
            /**Sets  the evaluation plane type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetEvaluationPlane
            (
                NXOpen::Drawings::AssociativeAngleBuilder::EvaluationPlaneType evaluationPlane /** evaluationplane */ 
            );
            /**Returns  the plane 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the plane 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /** The alternate angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void AlternateAngle
            (
            );
            /** Creates a scalar object for an associative angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void CreateScalarObject
            (
            );
            /** Sets IsMeasure flag indicating angle is result of a measure 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetIsMeasure
            (
                bool isMeasure /** ismeasure */ 
            );
            /**  Creates scalar object for an associative angle using data from existing scalar object or angle value. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void CreateScalarObjectFromData
            (
                NXOpen::Scalar * scalarTag /** scalartag */ ,
                double angleValue /** anglevalue */ 
            );
            /**Returns  the angle value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleValue
            (
            );
            /**Sets  the angle value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngleValue
            (
                double angleValue /** anglevalue */ 
            );
            /**Returns  the scalar object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Scalar * ScalarObject
            (
            );
            /**Sets  the scalar object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetScalarObject
            (
                NXOpen::Scalar * scalarObject /** scalarobject */ 
            );
            /**Returns  the first object type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::AssociativeAngleBuilder::ObjectType FirstObjectType
            (
            );
            /**Sets  the first object type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFirstObjectType
            (
                NXOpen::Drawings::AssociativeAngleBuilder::ObjectType objtype /** objtype */ 
            );
            /**Returns  the second object type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::AssociativeAngleBuilder::ObjectType SecondObjectType
            (
            );
            /**Sets  the second object type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSecondObjectType
            (
                NXOpen::Drawings::AssociativeAngleBuilder::ObjectType objtype /** objtype */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
