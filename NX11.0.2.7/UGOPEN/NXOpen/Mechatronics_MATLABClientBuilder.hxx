#ifndef NXOpen_MECHATRONICS_MATLABCLIENTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_MATLABCLIENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_MATLABClientBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Mechatronics_MATLABClientBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class MATLABClientBuilder;
    }
    class Builder;
    class Expression;
    namespace Mechatronics
    {
        class _MATLABClientBuilderBuilder;
        class MATLABClientBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::MATLABClientBuilder NXOpen::Mechatronics::MATLABClientBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::Mechatronics::PhysicsManager::CreateMatlabclientBuilder  NXOpen::Mechatronics::PhysicsManager::CreateMatlabclientBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  MATLABClientBuilder : public NXOpen::Builder
        {
            /** Represents the data type. */
            public: enum DataType
            {
                DataTypeBool/** bool   */,
                DataTypeInt/** int    */,
                DataTypeDouble/** double */
            };

            /** Represents the data port type. */
            public: enum DataPortType
            {
                DataPortTypeInput/** Input  */,
                DataPortTypeOutput/** Output */
            };

             /** the attribute of MATLAB item. */
            public:
            struct  TagAttribute
            {
                public: /** item Name */NXString SignalName;
                public: /** Data Type */NXOpen::Mechatronics::MATLABClientBuilder::DataType SignalType;
                public: /** Port Type */NXOpen::Mechatronics::MATLABClientBuilder::DataPortType SignalportType;
                public: TagAttribute() :
                    SignalName(),
                    SignalType((NXOpen::Mechatronics::MATLABClientBuilder::DataType)0),
                    SignalportType((NXOpen::Mechatronics::MATLABClientBuilder::DataPortType)0)
                {
                }
                /** Constructor for the TagAttribute struct. */ 
                public: TagAttribute(const NXString &signalNameInitial /** item Name */, 
                        NXOpen::Mechatronics::MATLABClientBuilder::DataType signalTypeInitial /** Data Type */, 
                        NXOpen::Mechatronics::MATLABClientBuilder::DataPortType signalportTypeInitial /** Port Type */) :
                    SignalName(signalNameInitial),
                    SignalType(signalTypeInitial),
                    SignalportType(signalportTypeInitial)
                {
                }
            };

             /** Defines the signal data. */
            public:
            struct  SignalData
            {
                public: /** Name                */NXString Name;
                public: /** Data Type           */NXString DataType;
                public: /** Data Port Type      */NXString PortType;
                public: SignalData() :
                    Name(),
                    DataType(),
                    PortType()
                {
                }
                /** Constructor for the SignalData struct. */ 
                public: SignalData(const NXString &nameInitial /** Name                */, 
                        const NXString &dataTypeInitial /** Data Type           */, 
                        const NXString &portTypeInitial /** Data Port Type      */) :
                    Name(nameInitial),
                    DataType(dataTypeInitial),
                    PortType(portTypeInitial)
                {
                }
            };

            private: MATLABClientBuilderImpl * m_matlabclientbuilder_impl;
            private: friend class  _MATLABClientBuilderBuilder;
            protected: MATLABClientBuilder();
            public: ~MATLABClientBuilder();
            /**Returns  the MATLAB server prog ID. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MATLABServerProgID
            (
            );
            /**Sets  the MATLAB server prog ID. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetMATLABServerProgID
            (
                const NXString & matlabServerProgID /** matlabserverprogid */ 
            );
            /**Sets  the MATLAB server prog ID. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            void SetMATLABServerProgID
            (
                const char * matlabServerProgID /** matlabserverprogid */ 
            );
            /**Returns  the update time. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UpdateTime
            (
            );
            /**Returns  the simulink file browser. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MatlabFileBrowser
            (
            );
            /**Sets  the simulink file browser. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetMatlabFileBrowser
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the simulink file browser. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            void SetMatlabFileBrowser
            (
                const char * filename /** filename */ 
            );
            /** Get the available MATLAB items. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void GetAvailableItems
            (
                std::vector<NXString> & signalName /** signalname */ ,
                std::vector<NXOpen::Mechatronics::MATLABClientBuilder::DataType> & signalType /** signaltype */ 
            );
            /** Set the available MATLAB items. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetAvailableItems
            (
                const std::vector<NXString> & signalName /** signalname */ ,
                const std::vector<NXOpen::Mechatronics::MATLABClientBuilder::DataType> & signalType /** signaltype */ 
            );
            /** Get the attribute of MATLAB items 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void GetItemAttributes
            (
                std::vector<NXOpen::Mechatronics::MATLABClientBuilder::TagAttribute> & attr /** attr */ 
            );
            /** Set the attribute of MATLAB items 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetItemAttributes
            (
                const std::vector<NXOpen::Mechatronics::MATLABClientBuilder::TagAttribute> & attr /** attr */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
