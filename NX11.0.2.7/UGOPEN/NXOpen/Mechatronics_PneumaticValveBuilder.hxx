#ifndef NXOpen_MECHATRONICS_PNEUMATICVALVEBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_PNEUMATICVALVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_PneumaticValveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Mechatronics_PneumaticValveBuilder.hxx>
#include <NXOpen/Mechatronics_PhysicsConstraintBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class PneumaticValveBuilder;
    }
    class Expression;
    namespace Mechatronics
    {
        class PhysicsConstraintBuilder;
    }
    namespace Mechatronics
    {
        class PneumaticCylinder;
    }
    namespace Mechatronics
    {
        class SelectPneumaticCylinderList;
    }
    namespace Mechatronics
    {
        class _PneumaticValveBuilderBuilder;
        class PneumaticValveBuilderImpl;
        /**  @brief  Represents a @link NXOpen::Mechatronics::PneumaticValve NXOpen::Mechatronics::PneumaticValve@endlink  builder.  

           <br> To create a new instance of this class, use @link NXOpen::Mechatronics::PneumaticValveCollection::CreatePneumaticValveBuilder  NXOpen::Mechatronics::PneumaticValveCollection::CreatePneumaticValveBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  PneumaticValveBuilder : public NXOpen::Mechatronics::PhysicsConstraintBuilder
        {
            /**  @brief  the Valve types.  

              */
            public: enum OutputValveType
            {
                OutputValveTypeFourWay/** 4-way valve */,
                OutputValveTypeThreeWay/** 3-way valve */
            };

            private: PneumaticValveBuilderImpl * m_pneumaticvalvebuilder_impl;
            private: friend class  _PneumaticValveBuilderBuilder;
            protected: PneumaticValveBuilder();
            public: ~PneumaticValveBuilder();
            /**Returns   @brief  the Cylinders. This can be a @link PneumaticCylinder PneumaticCylinder@endlink . 

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::SelectPneumaticCylinderList * Cylinders
            (
            );
            /**  @brief  the Cylinders. Sets the cylinder array. 

             
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetCylinders
            (
                const std::vector<NXOpen::Mechatronics::PneumaticCylinder *> & cylinders /** Input geometries*/
            );
            /**Returns   @brief  the initial supply pressure.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * SupplyPressure
            (
            );
            /**Returns   @brief  the initial exhaust pressure.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * ExhaustPressure
            (
            );
            /**Returns   @brief  the initial nominal pressure.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * NominalPressure
            (
            );
            /**Returns   @brief  the initial nominal flow.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * NominalFlow
            (
            );
            /**Returns   @brief  the initial control input.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Expression * ControlInput
            (
            );
            /**Returns   @brief  the valve type.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: NXOpen::Mechatronics::PneumaticValveBuilder::OutputValveType ValveType
            (
            );
            /**Sets   @brief  the valve type.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER") */
            public: void SetValveType
            (
                NXOpen::Mechatronics::PneumaticValveBuilder::OutputValveType valveType /** valvetype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
