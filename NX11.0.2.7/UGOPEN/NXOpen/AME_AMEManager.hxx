#ifndef NXOpen_AME_AMEMANAGER_HXX_INCLUDED
#define NXOpen_AME_AMEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AMEManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEBaseNode.hxx>
#include <NXOpen/AME_AMEEngObject.hxx>
#include <NXOpen/AME_AMEEngineeringObjectLabel.hxx>
#include <NXOpen/AME_AMEGroup.hxx>
#include <NXOpen/AME_AMEGroupFolder.hxx>
#include <NXOpen/AME_AMEQuery.hxx>
#include <NXOpen/AME_ApplicationBuilder.hxx>
#include <NXOpen/AME_AspectNavigatorPreferencesBuilder.hxx>
#include <NXOpen/AME_AspectNode.hxx>
#include <NXOpen/AME_AspectPrefixBuilder.hxx>
#include <NXOpen/AME_AssignAspectBuilder.hxx>
#include <NXOpen/AME_BreakTemplateBuilder.hxx>
#include <NXOpen/AME_BulkConnectionBuilder.hxx>
#include <NXOpen/AME_BulkEngineeringObjectBuilder.hxx>
#include <NXOpen/AME_CallMethodRuleBuilder.hxx>
#include <NXOpen/AME_CreateEngObjectDefinitionBuilder.hxx>
#include <NXOpen/AME_CreatePmiNoteBuilder.hxx>
#include <NXOpen/AME_CreateProductBuilder.hxx>
#include <NXOpen/AME_CreateTemplateBuilder.hxx>
#include <NXOpen/AME_CreateTemplateDefinitionBuilder.hxx>
#include <NXOpen/AME_DefineAspectBuilder.hxx>
#include <NXOpen/AME_DeviceFunctionBuilder.hxx>
#include <NXOpen/AME_DocumentStructureBuilder.hxx>
#include <NXOpen/AME_EditClauseBuilder.hxx>
#include <NXOpen/AME_EditEngineeringObjectBuilder.hxx>
#include <NXOpen/AME_EditQueryBuilder.hxx>
#include <NXOpen/AME_EngineeringObjectBuilder.hxx>
#include <NXOpen/AME_EngineeringObjectDefinitionLabelBuilder.hxx>
#include <NXOpen/AME_EplanImportProjectTemplateBuilder.hxx>
#include <NXOpen/AME_EplanProjectGenerationBuilder.hxx>
#include <NXOpen/AME_EplanSettingsBuilder.hxx>
#include <NXOpen/AME_ExtractAttributeBuilder.hxx>
#include <NXOpen/AME_FragmentBuilder.hxx>
#include <NXOpen/AME_GlobalSelectionBuilder.hxx>
#include <NXOpen/AME_GroupBuilder.hxx>
#include <NXOpen/AME_ImportEplanPageMacroBuilder.hxx>
#include <NXOpen/AME_ImportHWXmlBuilder.hxx>
#include <NXOpen/AME_ImportSWXmlBuilder.hxx>
#include <NXOpen/AME_InstanceDataBlockBuilder.hxx>
#include <NXOpen/AME_InstantiateTemplateBuilder.hxx>
#include <NXOpen/AME_InterfaceMemberPort.hxx>
#include <NXOpen/AME_LineDesignerMappingBuilder.hxx>
#include <NXOpen/AME_LoadLineDesignerBuilder.hxx>
#include <NXOpen/AME_MapToExistingObjectBuilder.hxx>
#include <NXOpen/AME_NamingRuleSettingsBuilder.hxx>
#include <NXOpen/AME_OperandRuleBuilder.hxx>
#include <NXOpen/AME_OrderAspectsBuilder.hxx>
#include <NXOpen/AME_POUSelectionBuilder.hxx>
#include <NXOpen/AME_PageBuilder.hxx>
#include <NXOpen/AME_PageNamingBuilder.hxx>
#include <NXOpen/AME_ParameterRuleBuilder.hxx>
#include <NXOpen/AME_PlcBlock.hxx>
#include <NXOpen/AME_PlcCodePosition.hxx>
#include <NXOpen/AME_PlcMethod.hxx>
#include <NXOpen/AME_PlcMethodBuilder.hxx>
#include <NXOpen/AME_PlcRule.hxx>
#include <NXOpen/AME_PlcSymbolBuilder.hxx>
#include <NXOpen/AME_PortBuilder.hxx>
#include <NXOpen/AME_PortConnectorBuilder.hxx>
#include <NXOpen/AME_PortsManagerBuilder.hxx>
#include <NXOpen/AME_ProductDefinition.hxx>
#include <NXOpen/AME_ProductMatchingRulesBuilder.hxx>
#include <NXOpen/AME_ProductSelectionBuilder.hxx>
#include <NXOpen/AME_ProductSelectionDetailsBuilder.hxx>
#include <NXOpen/AME_ProjectEngineeringObjectBuilder.hxx>
#include <NXOpen/AME_PropertiesBuilder.hxx>
#include <NXOpen/AME_QueryBuilder.hxx>
#include <NXOpen/AME_QueryClause.hxx>
#include <NXOpen/AME_QueryFolder.hxx>
#include <NXOpen/AME_SaveToLibraryBuilder.hxx>
#include <NXOpen/AME_SelectAndHighlightBuilder.hxx>
#include <NXOpen/AME_ShowHideObjectsBuilder.hxx>
#include <NXOpen/AME_SymbolChannelBuilder.hxx>
#include <NXOpen/AME_TCSavedQueriesBuilder.hxx>
#include <NXOpen/AME_TiaProjectItemBuilder.hxx>
#include <NXOpen/AME_TransferFileDataBuilder.hxx>
#include <NXOpen/AME_TypeMappingListBuilder.hxx>
#include <NXOpen/AME_UnloadLineDesignerBuilder.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AMEManager;
    }
    class Session;
    namespace AME
    {
        class AMEBaseNode;
    }
    namespace AME
    {
        class AMEEngObject;
    }
    namespace AME
    {
        class AMEEngineeringObjectLabel;
    }
    namespace AME
    {
        class AMEGroup;
    }
    namespace AME
    {
        class AMEGroupFolder;
    }
    namespace AME
    {
        class AMEQuery;
    }
    namespace AME
    {
        class ApplicationBuilder;
    }
    namespace AME
    {
        class AspectNavigatorPreferencesBuilder;
    }
    namespace AME
    {
        class AspectNode;
    }
    namespace AME
    {
        class AspectPrefixBuilder;
    }
    namespace AME
    {
        class AssignAspectBuilder;
    }
    namespace AME
    {
        class BreakTemplateBuilder;
    }
    namespace AME
    {
        class BulkConnectionBuilder;
    }
    namespace AME
    {
        class BulkEngineeringObjectBuilder;
    }
    namespace AME
    {
        class CallMethodRuleBuilder;
    }
    namespace AME
    {
        class CreateEngObjectDefinitionBuilder;
    }
    namespace AME
    {
        class CreatePmiNoteBuilder;
    }
    namespace AME
    {
        class CreateProductBuilder;
    }
    namespace AME
    {
        class CreateTemplateBuilder;
    }
    namespace AME
    {
        class CreateTemplateDefinitionBuilder;
    }
    namespace AME
    {
        class DefineAspectBuilder;
    }
    namespace AME
    {
        class DeviceFunctionBuilder;
    }
    namespace AME
    {
        class DocumentStructureBuilder;
    }
    namespace AME
    {
        class EditClauseBuilder;
    }
    namespace AME
    {
        class EditEngineeringObjectBuilder;
    }
    namespace AME
    {
        class EditQueryBuilder;
    }
    namespace AME
    {
        class EngineeringObjectBuilder;
    }
    namespace AME
    {
        class EngineeringObjectDefinitionLabelBuilder;
    }
    namespace AME
    {
        class EplanImportProjectTemplateBuilder;
    }
    namespace AME
    {
        class EplanProjectGenerationBuilder;
    }
    namespace AME
    {
        class EplanSettingsBuilder;
    }
    namespace AME
    {
        class ExtractAttributeBuilder;
    }
    namespace AME
    {
        class FragmentBuilder;
    }
    namespace AME
    {
        class GlobalSelectionBuilder;
    }
    namespace AME
    {
        class GroupBuilder;
    }
    namespace AME
    {
        class IEngObject;
    }
    namespace AME
    {
        class ImportEplanPageMacroBuilder;
    }
    namespace AME
    {
        class ImportHWXmlBuilder;
    }
    namespace AME
    {
        class ImportNode;
    }
    namespace AME
    {
        class ImportSWXmlBuilder;
    }
    namespace AME
    {
        class InstanceDataBlockBuilder;
    }
    namespace AME
    {
        class InstantiateTemplateBuilder;
    }
    namespace AME
    {
        class InterfaceMemberPort;
    }
    namespace AME
    {
        class LineDesignerMappingBuilder;
    }
    namespace AME
    {
        class LoadLineDesignerBuilder;
    }
    namespace AME
    {
        class MapToExistingObjectBuilder;
    }
    namespace AME
    {
        class NamingRuleSettingsBuilder;
    }
    namespace AME
    {
        class OperandRuleBuilder;
    }
    namespace AME
    {
        class OrderAspectsBuilder;
    }
    namespace AME
    {
        class POUSelectionBuilder;
    }
    namespace AME
    {
        class PageBuilder;
    }
    namespace AME
    {
        class PageNamingBuilder;
    }
    namespace AME
    {
        class ParameterRuleBuilder;
    }
    namespace AME
    {
        class PlcBlock;
    }
    namespace AME
    {
        class PlcCodePosition;
    }
    namespace AME
    {
        class PlcMethod;
    }
    namespace AME
    {
        class PlcMethodBuilder;
    }
    namespace AME
    {
        class PlcSymbolBuilder;
    }
    namespace AME
    {
        class PortBuilder;
    }
    namespace AME
    {
        class PortConnectorBuilder;
    }
    namespace AME
    {
        class PortsManagerBuilder;
    }
    namespace AME
    {
        class ProductDefinition;
    }
    namespace AME
    {
        class ProductMatchingRulesBuilder;
    }
    namespace AME
    {
        class ProductSelectionBuilder;
    }
    namespace AME
    {
        class ProductSelectionDetailsBuilder;
    }
    namespace AME
    {
        class ProjectEngineeringObjectBuilder;
    }
    namespace AME
    {
        class PropertiesBuilder;
    }
    namespace AME
    {
        class QueryBuilder;
    }
    namespace AME
    {
        class QueryClause;
    }
    namespace AME
    {
        class QueryFolder;
    }
    namespace AME
    {
        class SaveToLibraryBuilder;
    }
    namespace AME
    {
        class SelectAndHighlightBuilder;
    }
    namespace AME
    {
        class ShowHideObjectsBuilder;
    }
    namespace AME
    {
        class SymbolChannelBuilder;
    }
    namespace AME
    {
        class TCSavedQueriesBuilder;
    }
    namespace AME
    {
        class TiaProjectItemBuilder;
    }
    namespace AME
    {
        class TransferFileDataBuilder;
    }
    namespace AME
    {
        class TypeMappingListBuilder;
    }
    namespace AME
    {
        class UnloadLineDesignerBuilder;
    }
    class NXObject;
    class Part;
    namespace AME
    {
        class AMEManagerImpl;
        /** Represents a manager of automation designer objects  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AMEManager
        {
            /** the status of paste operation */
            public: enum PasteStatus
            {
                PasteStatusSuccessful/** successful */ ,
                PasteStatusNoValidObjectToPaste/** no valid object to paste */ ,
                PasteStatusNameUnderParentExists/** name under parent exists */ ,
                PasteStatusAdditionalObjectsInvolved/** additional objects involved */ 
            };

            /** the deletion type */
            public: enum DeleteType
            {
                DeleteTypeDeleteObject/** delete object */ ,
                DeleteTypeDeleteTemplate/** delete template */ ,
                DeleteTypeRemoveLastAspect/** remove last aspect */ ,
                DeleteTypeDeleteSymbolicRepresentation/** delete symbolic representation */ 
            };

            private: AMEManagerImpl * m_amemanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AMEManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static AMEManager* theAMEManager;
            /** Returns the AMEManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static AMEManager* GetAMEManager(NXOpen::Session *owner);
            public: ~AMEManager();
            /** Creates a builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ApplicationBuilder * CreateApplicationBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Return the application builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ApplicationBuilder * GetApplicationBuilder
            (
            );
            /** Creates a  global selection builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::GlobalSelectionBuilder * CreateGlobalSelectionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Delete the AME aspect node object and the connected EO as well as all children in all aspects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteSingleAspect
            (
                NXOpen::AME::AspectNode * obj /** obj */ 
            );
            /** Unassign the Plc Block to from a PLC
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnassginPlcblock
            (
                NXOpen::AME::PlcBlock * obj /** obj */ 
            );
            /** Change the instance data block to single / global instance
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MakeInstanceDbGlobal
            (
                NXOpen::AME::PlcBlock * obj /** obj */ 
            );
            /** Change the instance data block to multiple instance
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MakeMultipleInstanceDb
            (
                NXOpen::AME::PlcBlock * obj /** obj */ 
            );
            /** Submit the delete of EOs 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SubmitEngObjectDelete
            (
            );
            /** Submit the delete of Query Objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SubmitQueryObjectDelete
            (
            );
            /** Creates an import software builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportSWXmlBuilder * CreateImportSwxmlBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates an HWXml import builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportHWXmlBuilder * CreateImportHwxmlBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEBaseNode * parentNode /** parentnode */ 
            );
            /** Creates a @link AME::TiaProjectItemBuilder AME::TiaProjectItemBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TiaProjectItemBuilder * CreateTiaprojectItemBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a port builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PortBuilder * CreatePortBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * parent /** parent */,
                NXOpen::NXObject * port /** port to edit. Is NULL in create Mode */
            );
            /** Creates a port builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PortConnectorBuilder * CreatePortConnectorBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * port /** port */ 
            );
            /** Creates a @link AME::PlcSymbolBuilder AME::PlcSymbolBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcSymbolBuilder * CreatePlcSymbolBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEBaseNode * node /** node to edit can be NULL */
            );
            /** Creates an EplanSettingsBuilder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanSettingsBuilder * CreateEplanSettingsBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEBaseNode * node /** node to edit can be NULL */
            );
            /** Creates a @link AME::ImportEplanPageMacroBuilder AME::ImportEplanPageMacroBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportEplanPageMacroBuilder * CreateImportEplanPageMacroBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Delete the AME object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteObject
            (
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Creates a builder for the Properties Dialog  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PropertiesBuilder * CreatePropertiesBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AspectNode * node /** node to edit can be NULL */
            );
            /** Creates a @link AME::EngineeringObjectBuilder AME::EngineeringObjectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EngineeringObjectBuilder * CreateEngineeringObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::AssignAspectBuilder AME::AssignAspectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AssignAspectBuilder * CreateAssignAspectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::EditEngineeringObjectBuilder AME::EditEngineeringObjectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditEngineeringObjectBuilder * CreateEditEngineeringObjectBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEEngObject * editObject /** editobject */ 
            );
            /** Change the parent of a node in navigator
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeParent
            (
                NXOpen::NXObject * obj /** obj */ ,
                NXOpen::NXObject * newParent /** newparent */ 
            );
            /** Change the name of the node
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeName
            (
                NXOpen::AME::AMEBaseNode * node /** node */ ,
                const NXString & text /** text */ 
            );
            /** Change the name of the node
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void ChangeName
            (
                NXOpen::AME::AMEBaseNode * node /** node */ ,
                const char * text /** text */ 
            );
            /** Change the description of the node 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeDescription
            (
                NXOpen::AME::AMEBaseNode * node /** node */ ,
                const NXString & text /** text */ 
            );
            /** Change the description of the node 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void ChangeDescription
            (
                NXOpen::AME::AMEBaseNode * node /** node */ ,
                const char * text /** text */ 
            );
            /** Change the description of an Engineering Object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ChangeEngineeringObjectDescription
            (
                NXOpen::AME::IEngObject * eoTag /** eotag */ ,
                const NXString & text /** text */ 
            );
            /** Change the description of an Engineering Object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void ChangeEngineeringObjectDescription
            (
                NXOpen::AME::IEngObject * eoTag /** eotag */ ,
                const char * text /** text */ 
            );
            /** Creates a builder for the EPLAN project generation dialog @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanProjectGenerationBuilder * CreateEplanProjectGenerationBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Copies objects on the clipboard 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CopyObjects
            (
                const std::vector<NXOpen::AME::AMEBaseNode *> & objectsToCopy /** objectstocopy */ 
            );
            /** Cuts objects and places them on the clipboard 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CutObjects
            (
                const std::vector<NXOpen::AME::AMEBaseNode *> & objectsToCut /** objectstocut */ 
            );
            /** Pastes objects from the clipboard under given parent  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEManager::PasteStatus PasteObjects
            (
                NXOpen::AME::AMEBaseNode * parent /** parent */ ,
                std::vector<NXOpen::AME::AMEBaseNode *> & newObjects /** newobjects */ 
            );
            /** Clears clipboard 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ClearClipboard
            (
            );
            /** Creates a builder for the Set Naming Rules dialog @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::NamingRuleSettingsBuilder * CreateNamingRuleSettingsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a builder for the aspect navigator preferences dialog @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AspectNavigatorPreferencesBuilder * CreateAspectNavigatorPreferencesBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::LineDesignerMappingBuilder AME::LineDesignerMappingBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::LineDesignerMappingBuilder * CreateLineDesignerMappingBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Apply naming rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ApplyNamingRule
            (
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Apply naming rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetNaming
            (
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Creates a @link AME::CreateTemplateBuilder AME::CreateTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateTemplateBuilder * CreateTemplateBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::OrderAspectsBuilder AME::OrderAspectsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::OrderAspectsBuilder * CreateOrderAspectsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::POUSelectionBuilder AME::POUSelectionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::POUSelectionBuilder * CreatePouSelectionBuilder
            (
                NXOpen::NXObject * station /** station */ 
            );
            /** Creates a @link AME::GroupBuilder AME::GroupBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::GroupBuilder * CreateGroupBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEGroup * group /** group */ 
            );
            /** Creates a @link AME::CreatePmiNoteBuilder AME::CreatePmiNoteBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreatePmiNoteBuilder * CreatePmiNoteBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Journaling the unload of template or definition project  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnloadProject
            (
                NXOpen::NXObject * project /** project */ 
            );
            /** Creates a @link AME::PlcMethodBuilder AME::PlcMethodBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcMethodBuilder * CreatePlcMethodBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcMethod * method /** method */ 
            );
            /** Creates a @link AME::InstantiateTemplateBuilder AME::InstantiateTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InstantiateTemplateBuilder * CreateInstantiateTemplateBuilder
            (
                NXOpen::Part * part /** part */ ,
                const NXString & reusePartName /** reusepartname */ 
            );
            /** Creates a @link AME::InstantiateTemplateBuilder AME::InstantiateTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::AME::InstantiateTemplateBuilder * CreateInstantiateTemplateBuilder
            (
                NXOpen::Part * part /** part */ ,
                const char * reusePartName /** reusepartname */ 
            );
            /** Creates a @link AME::AMEGroupFolder AME::AMEGroupFolder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEGroupFolder * CreateGroupFolder
            (
                NXOpen::AME::AMEBaseNode * parentNode /** parentnode */ 
            );
            /** Creates a @link AME::QueryFolder AME::QueryFolder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::QueryFolder * CreateQueryFolder
            (
                NXOpen::AME::AMEBaseNode * parentNode /** parentnode */ 
            );
            /** Creates an instance data block builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InstanceDataBlockBuilder * CreateInstanceDataBlockBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcBlock * node /** node to edit can be not NULL */,
                NXOpen::AME::InstanceDataBlockBuilder::CreateMode mode /** create idb from aspect or library */
            );
            /** Creates a @link AME::BreakTemplateBuilder AME::BreakTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BreakTemplateBuilder * CreateBreakTemplateBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEEngObject * engObj /** engobj */ 
            );
            /** Create Show/Hide Objects Builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ShowHideObjectsBuilder * CreateShowHideObjectsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::EplanImportProjectTemplateBuilder AME::EplanImportProjectTemplateBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EplanImportProjectTemplateBuilder * CreateEplanImportProjectTemplateBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Unmap a LD object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnmapLdObject
            (
                NXOpen::NXObject * ldObject /** ldobject */ ,
                bool keepTypeMapped /** keeptypemapped */ 
            );
            /** Unmap a template 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnmapTemplate
            (
                const NXString & templateId /** templateid */ 
            );
            /** Unmap a template 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnmapTemplate
            (
                const char * templateId /** templateid */ 
            );
            /** Map a LD object to an eo 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapLdObject
            (
                NXOpen::NXObject * ldObject /** ldobject */ ,
                NXOpen::AME::IEngObject * eo /** eo */ 
            );
            /** Map a LD object to a template
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapLdObjectToTemplate
            (
                NXOpen::NXObject * ldObject /** ldobject */ ,
                NXOpen::NXObject * tc /** tc */ 
            );
            /** Delete a Broken EO - LD Mapping Link 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteBrokenEoLinkToLdObject
            (
                NXOpen::AME::IEngObject * engObj /** engobj */ 
            );
            /** Delete a Broken template - LD Mapping Link 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteBrokenTemplateLinkToLdObject
            (
                NXOpen::NXObject * tc /** tc */ 
            );
            /** Create an eo and map it to a LD object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CreateEngineeringObjectAndMapLdObject
            (
                NXOpen::NXObject * ldObject /** ldobject */ 
            );
            /** Creates a Map To Existing Builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::MapToExistingObjectBuilder * CreateMapToExistingObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Set the objects to be deleted
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetObjectsToBeDeleted
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                NXOpen::AME::AMEManager::DeleteType deleteType /** deletetype */ 
            );
            /** Set the delete option
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDeleteConditionalObject
            (
                bool deleteOption /** deleteoption */ 
            );
            /** Start to delete
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DoDelete
            (
            );
            /** End of the delete
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteEnd
            (
            );
            /** Creates an extract attribute builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ExtractAttributeBuilder * CreateExtractAttributeBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::ProjectEngineeringObjectBuilder AME::ProjectEngineeringObjectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProjectEngineeringObjectBuilder * CreateProjectEngineeringObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::SelectAndHighlightBuilder AME::SelectAndHighlightBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAndHighlightBuilder * SelectAndHighlightBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a ports manager builder  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PortsManagerBuilder * CreatePortsManagerBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::NXObject * portsContainer /** portscontainer */ 
            );
            /** Removes an engineering object from a group 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveFromGroup
            (
                NXOpen::AME::AMEGroup * group /** group */ ,
                NXOpen::AME::IEngObject * eoTag /** eotag */ 
            );
            /** Unloads a part even if modified
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnloadPart
            (
                NXOpen::NXObject * partTag /** parttag */ 
            );
            /** Creates a @link AME::TransferFileDataBuilder AME::TransferFileDataBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TransferFileDataBuilder * CreateTransferFileDataBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::ImportNode * importNodeTag /** importnodetag */ 
            );
            /** Update all the node's name based on the naming rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateAllNames
            (
            );
            /** Creates a @link AME::EngineeringObjectDefinitionLabelBuilder AME::EngineeringObjectDefinitionLabelBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EngineeringObjectDefinitionLabelBuilder * CreateEngineeringObjectDefinitionLabelBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::CreateEngObjectDefinitionBuilder AME::CreateEngObjectDefinitionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateEngObjectDefinitionBuilder * CreateEngObjectDefinitionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::CreateTemplateDefinitionBuilder AME::CreateTemplateDefinitionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateTemplateDefinitionBuilder * CreateTemplateDefinitionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::CreateProductBuilder AME::CreateProductBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CreateProductBuilder * CreateProductBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::DefineAspectBuilder AME::DefineAspectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::DefineAspectBuilder * DefineAspectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::SaveToLibraryBuilder AME::SaveToLibraryBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SaveToLibraryBuilder * CreateSaveToLibraryBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Moves an Engineering Object Label 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveLabel
            (
                NXOpen::AME::AMEEngineeringObjectLabel * label /** label */ ,
                const NXOpen::Point3d & targetPosition /** targetposition */ 
            );
            /** Creates an Engineering Object Label  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AMEEngineeringObjectLabel * CreateLabel
            (
                NXOpen::AME::AMEEngObject * eo /** eo */ ,
                const NXOpen::Point3d & targetPosition /** targetposition */ 
            );
            /** Creates a @link AME::PageBuilder AME::PageBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PageBuilder * CreatePageBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Deletes an Engineering Object Label 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteLabel
            (
                NXOpen::AME::AMEEngineeringObjectLabel * label /** label */ 
            );
            /** Creates a @link AME::ParameterRuleBuilder AME::ParameterRuleBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ParameterRuleBuilder * CreateParameterRuleBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::InterfaceMemberPort * imPort /** import */ ,
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ 
            );
            /** Creates a @link AME::OperandRuleBuilder AME::OperandRuleBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::OperandRuleBuilder * CreateOperandRuleBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcCodePosition * editedRule /** editedrule */ ,
                NXOpen::AME::PlcBlock * block /** block */ ,
                int indexOfCompileUnit /** indexofcompileunit */ ,
                int indexOfStatement /** indexofstatement */ ,
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ 
            );
            /** Creates a @link AME::CallMethodRuleBuilder AME::CallMethodRuleBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CallMethodRuleBuilder * CreateCallMethodRuleBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::PlcCodePosition * editedRule /** editedrule */ ,
                NXOpen::AME::PlcBlock * block /** block */ ,
                NXOpen::AME::PlcRule::Type ruleType /** ruletype */ ,
                NXOpen::AME::PlcRule::RefObjectType refObjectType /** refobjecttype */ ,
                NXOpen::AME::PlcRule::ReplacementType replacementType /** replacementtype */ ,
                int compileUnitIndex /** compileunitindex */ ,
                int startIndex /** startindex */ ,
                int endIndex /** endindex */ 
            );
            /** Establish the children 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void EstablishChildren
            (
                NXOpen::NXObject * parent /** parent */ 
            );
            /** Creates a @link AME::TypeMappingListBuilder AME::TypeMappingListBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TypeMappingListBuilder * CreateTypeMappingListBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::LoadLineDesignerBuilder AME::LoadLineDesignerBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::LoadLineDesignerBuilder * CreateLoadLineDesignerBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::UnloadLineDesignerBuilder AME::UnloadLineDesignerBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::UnloadLineDesignerBuilder * CreateUnloadLineDesignerBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::PageNamingBuilder AME::PageNamingBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PageNamingBuilder * CreatePageNamingBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::DocumentStructureBuilder AME::DocumentStructureBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::DocumentStructureBuilder * CreateDocumentStructureBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::FragmentBuilder AME::FragmentBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FragmentBuilder * CreateFragmentBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Locks/unlocks the template
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void LockTemplate
            (
                bool lock /** lock */ 
            );
            /** Creates a @link AME::BulkConnectionBuilder AME::BulkConnectionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BulkConnectionBuilder * CreateBulkConnectionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::SymbolChannelBuilder AME::SymbolChannelBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolChannelBuilder * CreateSymbolChannelBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::DeviceFunctionBuilder AME::DeviceFunctionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::DeviceFunctionBuilder * DeviceFunctionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Validate if object is modifiable
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ValidateForModification
            (
                NXOpen::NXObject * objectTag /** objecttag */ 
            );
            /**Creates a @link AME::QueryBuilder AME::QueryBuilder@endlink  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::QueryBuilder * CreateQueryBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::BulkEngineeringObjectBuilder AME::BulkEngineeringObjectBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BulkEngineeringObjectBuilder * CreateBulkEngineeringObjectBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Moves Navigator nodes under same parent 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MoveNavigatorNodes
            (
                NXOpen::AME::AMEBaseNode * after /** after */ ,
                const std::vector<NXOpen::AME::AMEBaseNode *> & nodesToMove /** nodestomove */ 
            );
            /** Creates a @link AME::EditClauseBuilder AME::EditClauseBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditClauseBuilder * CreateEditClauseBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEQuery * queryObject /** queryobject */ ,
                NXOpen::AME::QueryClause * queryClause /** queryclause */ 
            );
            /** Creates a @link AME::AspectPrefixBuilder AME::AspectPrefixBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AspectPrefixBuilder * CreateAspectPrefixBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::EditQueryBuilder AME::EditQueryBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EditQueryBuilder * CreateEditQueryBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::TCSavedQueriesBuilder AME::TCSavedQueriesBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TCSavedQueriesBuilder * CreateEditQueryScopeBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::AME::AMEQuery * queryObject /** queryobject */ ,
                NXOpen::AME::QueryClause * queryClause /** queryclause */ 
            );
            /** Creates a @link AME::ProductMatchingRulesBuilder AME::ProductMatchingRulesBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductMatchingRulesBuilder * CreateProductMatchingRulesBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::ProductSelectionBuilder AME::ProductSelectionBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductSelectionBuilder * CreateProductSelectionBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link AME::ProductSelectionDetailsBuilder AME::ProductSelectionDetailsBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductSelectionDetailsBuilder * CreateProductSelectionDetailsBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Loads the Product Defintion @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductDefinition * LoadProductDefinition
            (
                const NXString & reusePartName /** reusepartname */ 
            );
            /** Loads the Product Defintion @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::AME::ProductDefinition * LoadProductDefinition
            (
                const char * reusePartName /** reusepartname */ 
            );
            /** Place products for station in product aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PlaceProductsForStation
            (
                NXOpen::AME::AMEBaseNode * station /** station */ 
            );
            /** Loads connected Engineering objects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void LoadConnectedEos
            (
                const std::vector<NXOpen::AME::IEngObject *> & objects /** objects */ 
            );
            /** Set the target to be edited, target can be Type or Template, targetID is the DB id from the Teamcenter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void EditTarget
            (
                const NXString & targetID /** targetid */ 
            );
            /** Set the target to be edited, target can be Type or Template, targetID is the DB id from the Teamcenter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void EditTarget
            (
                const char * targetID /** targetid */ 
            );
            /** Hide/Show a LD object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void HideShowLdObject
            (
                NXOpen::NXObject * ldObject /** ldobject */ ,
                bool hide /** hide */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
