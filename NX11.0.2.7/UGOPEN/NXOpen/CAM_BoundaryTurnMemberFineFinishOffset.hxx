#ifndef NXOpen_CAM_BOUNDARYTURNMEMBERFINEFINISHOFFSET_HXX_INCLUDED
#define NXOpen_CAM_BOUNDARYTURNMEMBERFINEFINISHOFFSET_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_BoundaryTurnMemberFineFinishOffset.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_BoundaryTurnMemberFineFinishOffset.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class BoundaryTurnMemberFineFinishOffset;
    }
    class Builder;
    namespace CAM
    {
        class _BoundaryTurnMemberFineFinishOffsetBuilder;
        class BoundaryTurnMemberFineFinishOffsetImpl;
        /**
            Represents a @link NXOpen::CAM::BoundaryTurnMemberFineFinishOffset NXOpen::CAM::BoundaryTurnMemberFineFinishOffset@endlink 
             <br> This builder cannot be instantiated separately.  <br> 
         <br>  Created in NX9.0.2.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  BoundaryTurnMemberFineFinishOffset : public NXOpen::Builder
        {
            /** the fine finish offset stati available */
            public: enum StatusValue
            {
                StatusValueNone/** none */ ,
                StatusValueSpecify/** specify */ 
            };

            /** the types available for fine finsish offset method */
            public: enum TypeValue
            {
                TypeValueNominal/** nominal */ ,
                TypeValueDiameter/** diameter */ 
            };

            private: BoundaryTurnMemberFineFinishOffsetImpl * m_boundaryturnmemberfinefinishoffset_impl;
            private: friend class  _BoundaryTurnMemberFineFinishOffsetBuilder;
            protected: BoundaryTurnMemberFineFinishOffset();
            public: ~BoundaryTurnMemberFineFinishOffset();
            /**Returns  the fine finish offset status 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BoundaryTurnMemberFineFinishOffset::StatusValue Status
            (
            );
            /**Sets  the fine finish offset status 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetStatus
            (
                NXOpen::CAM::BoundaryTurnMemberFineFinishOffset::StatusValue newValue /** newvalue */ 
            );
            /**Returns  the fine finish offset type 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BoundaryTurnMemberFineFinishOffset::TypeValue Type
            (
            );
            /**Sets  the fine finish offset type 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetType
            (
                NXOpen::CAM::BoundaryTurnMemberFineFinishOffset::TypeValue newValue /** newvalue */ 
            );
            /**Returns  the offset value 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: double Value
            (
            );
            /**Sets  the offset value 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetValue
            (
                double newValue /** newvalue */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
