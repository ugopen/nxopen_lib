#ifndef NXOpen_CAE_PRETESTSOLUTIONBUILDER_HXX_INCLUDED
#define NXOpen_CAE_PRETESTSOLUTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PreTestSolutionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PreTestSolutionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PreTestSolutionBuilder;
    }
    class Builder;
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class _PreTestSolutionBuilderBuilder;
        class PreTestSolutionBuilderImpl;
        /** Represents a @link NXOpen::CAE::PreTestSolution NXOpen::CAE::PreTestSolution@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::CAE::PreTestSolutionCollection::CreatePretestBuilder  NXOpen::CAE::PreTestSolutionCollection::CreatePretestBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PreTestSolutionBuilder : public NXOpen::Builder
        {
            /** Enum type for the complex mode conversion settings */
            public: enum ModeConversionType
            {
                ModeConversionTypeSignedAmplitude/** No triax sensors required */,
                ModeConversionTypeComplexTransform/** All sensors must be triax */
            };

            private: PreTestSolutionBuilderImpl * m_pretestsolutionbuilder_impl;
            private: friend class  _PreTestSolutionBuilderBuilder;
            protected: PreTestSolutionBuilder();
            public: ~PreTestSolutionBuilder();
            /**Returns  the pre-test name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the pre-test name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the pre-test name 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the pre-test working solution 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SimSolution * Solution
            (
            );
            /**Sets  the pre-test working solution 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetSolution
            (
                NXOpen::CAE::SimSolution * solution /** solution */ 
            );
            /**Returns  the low-frequency filtering option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool LowFrequencyFilteringMode
            (
            );
            /**Sets  the low-frequency filtering option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetLowFrequencyFilteringMode
            (
                bool lowFrequencyFilteringMode /** lowfrequencyfilteringmode */ 
            );
            /**Returns  the low-frequency cutoff 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double LowFrequencyCutoff
            (
            );
            /**Sets  the low-frequency cutoff 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetLowFrequencyCutoff
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
            /**Returns  the high-frequency filtering option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool HighFrequencyFilteringMode
            (
            );
            /**Sets  the high-frequency filtering option 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetHighFrequencyFilteringMode
            (
                bool highFrequencyFilteringMode /** highfrequencyfilteringmode */ 
            );
            /**Returns  the high-frequency cutoff 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double HighFrequencyCutoff
            (
            );
            /**Sets  the high-frequency cutoff 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_correl_base ("FE Correlation") */
            public: void SetHighFrequencyCutoff
            (
                double cutoffFrequency /** cutofffrequency */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
