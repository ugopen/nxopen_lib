#ifndef NXOpen_FEATURES_VARIABLEOFFSETBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VARIABLEOFFSETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VariableOffsetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_VariableOffsetBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class VariableOffsetBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class SelectFace;
    namespace Features
    {
        class _VariableOffsetBuilderBuilder;
        class VariableOffsetBuilderImpl;
        /**
                Represents a @link NXOpen::Features::VariableOffset NXOpen::Features::VariableOffset@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateVariableOffsetBuilder  NXOpen::Features::FeatureCollection::CreateVariableOffsetBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        IsApplyToAll </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsKeepParameterization </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Method </td> <td> 
         
        Linear </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  VariableOffsetBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** offset methods for creating the new surface */
            public: enum MethodOptions
            {
                MethodOptionsLinear/** linear offset applied along both of U and V directions */,
                MethodOptionsCubic/** cublic offset applied along both of U and V directions */
            };

            private: VariableOffsetBuilderImpl * m_variableoffsetbuilder_impl;
            private: friend class  _VariableOffsetBuilderBuilder;
            protected: VariableOffsetBuilder();
            public: ~VariableOffsetBuilder();
            /**Returns  the face to be offset 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * Face
            (
            );
            /**Returns  the toggle to reverse the direction of all offsets. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsReverseDirection
            (
            );
            /**Sets  the toggle to reverse the direction of all offsets. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetReverseDirection
            (
                bool isReverseDirection /** isreversedirection */ 
            );
            /**Returns  the toggle to set all offsets to equal value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsApplyToAll
            (
            );
            /**Sets  the toggle to set all offsets to equal value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetApplyToAll
            (
                bool isApplyToAll /** isapplytoall */ 
            );
            /**Returns  the point at corner A. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointA
            (
            );
            /**Sets  the point at corner A. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPointA
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the offset at corner A. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetAtA
            (
            );
            /**Returns  the point at corner B. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointB
            (
            );
            /**Sets  the point at corner B. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPointB
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the offset at corner B. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetAtB
            (
            );
            /**Returns  the point at corner C. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointC
            (
            );
            /**Sets  the point at corner C. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPointC
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the offset at corner C. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetAtC
            (
            );
            /**Returns  the point at corner D. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointD
            (
            );
            /**Sets  the point at corner D. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetPointD
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the offset at corner D. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetAtD
            (
            );
            /**Returns  the toggle to maintain source face parameterization in the offset face. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsKeepParameterization
            (
            );
            /**Sets  the toggle to maintain source face parameterization in the offset face. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetKeepParameterization
            (
                bool isKeepParameterization /** iskeepparameterization */ 
            );
            /**Returns  the offset method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VariableOffsetBuilder::MethodOptions Method
            (
            );
            /**Sets  the offset method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMethod
            (
                NXOpen::Features::VariableOffsetBuilder::MethodOptions method /** method */ 
            );
            /**Returns  the distance tolerance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
