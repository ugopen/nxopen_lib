#ifndef NXOpen_CAE_MANUALMORPHBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MANUALMORPHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ManualMorphBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ManualMorphBuilder.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ManualMorphBuilder;
    }
    class Builder;
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class TaggedObject;
    namespace CAE
    {
        class _ManualMorphBuilderBuilder;
        class ManualMorphBuilderImpl;
        /** Represents a @link NXOpen::CAE::ManualMorphBuilder NXOpen::CAE::ManualMorphBuilder@endlink  <br> To create a new instance of this class, use @link NXOpen::CAE::NodeElementManager::CreateManualMorphBuilder  NXOpen::CAE::NodeElementManager::CreateManualMorphBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ManualMorphBuilder : public NXOpen::Builder
        {
            /** Represents the type of Manual Mapping  */
            public: enum MapType
            {
                MapTypeStationary/** stationary mapping  */,
                MapTypeNodeToPoint/** node to point mapping */,
                MapTypeNodeToEdge/** node to edge mapping */,
                MapTypeNodeToFace/** node to face mapping */
            };

            /**  Represents the chosen type to apply node mapping on selected geometry. For example the nearest point or along specifed vector. */
            public: enum MapMethod
            {
                MapMethodNearestPoint/** nearest point */ ,
                MapMethodAlongVector/** along vector */ ,
                MapMethodUniformAcrossEdge/** uniform across edge */ ,
                MapMethodKeepSourceBias/** keep source bias */ ,
                MapMethodBasedOnEdgeNodeMovement/** based on edge node movement */ ,
                MapMethodAlongElementNormal/** along element normal */ 
            };

            private: ManualMorphBuilderImpl * m_manualmorphbuilder_impl;
            private: friend class  _ManualMorphBuilderBuilder;
            protected: ManualMorphBuilder();
            public: ~ManualMorphBuilder();
            /**Returns  the selected elements, which will take part in mapping 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * ElementSelection
            (
            );
            /**Returns  the the flag which decides whether mapping is to be done sequentially (one-by-one) or in one go 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool MapSequence
            (
            );
            /**Sets  the the flag which decides whether mapping is to be done sequentially (one-by-one) or in one go 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMapSequence
            (
                bool isSeq /** isseq */ 
            );
            /**Returns the list of tags of manual map objects created by user  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::TaggedObject *> GetManualMapList
            (
            );
            /** Sets the new manual map object tag to map tag array
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMapData
            (
                NXOpen::TaggedObject * mapTag /** maptag */ 
            );
            /** Removes specified manual map object from map tag array
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void RemoveMapData
            (
                NXOpen::TaggedObject * mapTag /** maptag */ 
            );
            /** Removes all the elements from manual map tag array and makes it empty
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void EmptyMapList
            (
            );
            /** Creates the object for user defined manual maps @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::TaggedObject * CreateMapData
            (
            );
            /** Sets the name of manual mapping
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMapName
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                const NXString & mapName /** mapname */ 
            );
            /** Sets the name of manual mapping
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetMapName
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                const char * mapName /** mapname */ 
            );
            /** Returns the tag of user map object by its name @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::TaggedObject * GetMapByName
            (
                const std::vector<NXOpen::TaggedObject *> & pMapTags /** pmaptags */ ,
                const NXString & mapName /** mapname */ 
            );
            /** Returns the tag of user map object by its name @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::TaggedObject * GetMapByName
            (
                const std::vector<NXOpen::TaggedObject *> & pMapTags /** pmaptags */ ,
                const char * mapName /** mapname */ 
            );
            /** Sets the manual map type - Stationary, Node-to-Edge, Node-to-Face
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMapType
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                NXOpen::CAE::ManualMorphBuilder::MapType mapType /** maptype */ 
            );
            /** Sets the method chosen to apply node mapping on selected geometry
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMapMethod
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                NXOpen::CAE::ManualMorphBuilder::MapMethod mapMethod /** mapmethod */ 
            );
            /** Sets the node selected for manual map
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNodeSelection
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                const std::vector<NXOpen::CAE::FENode *> & pNodeTags /** pnodetags */ 
            );
            /** Sets the the geometry selected for manual map
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGeometrySelection
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                const std::vector<NXOpen::TaggedObject *> & pGeomTags /** pgeomtags */ 
            );
            /** Sets the direction along which nodes will be mapped on to selected geometry
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMapDirection
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                const std::vector<double> & direction /** direction */ 
            );
            /** Sets the start point of vector chosen to define direction of manual map
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMapDirectionPoint
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                const std::vector<double> & pointCoords /** pointcoords */ 
            );
            /** Sets the vector creation method used to define direction of manual map
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMapDirectionMethod
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                int vecMethod /** vecmethod */ 
            );
            /** Sets the flag for node-to-vertex map for node-to-edge mapping type
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVertexNode
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                bool isVertexNode /** isvertexnode */ 
            );
            /** Sets the node-to-vetex map for node-to-edge mapping type
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNodeToVertexMap
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                const std::vector<NXOpen::CAE::FENode *> & pVertexNodeTags /** pvertexnodetags */ 
            );
            /** Sets the node-to-CurveEndPoint map for node-to-edge mapping type
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetNodeToCurveEndPointMap
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ ,
                const std::vector<NXOpen::CAE::FENode *> & pVertexNodeTags /** pvertexnodetags */ 
            );
            /** Removes all the selected nodes from the manual map
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void ClearNodesOfMap
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ 
            );
            /** Removes all the selected geometry from the manual map
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void ClearGeometryOfMap
            (
                NXOpen::TaggedObject * mapDataTag /** mapdatatag */ 
            );
            /** Checks continuity of nodes for uniform distribution along selected edges
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void CheckNodesForContinuity
            (
                const std::vector<NXOpen::CAE::FENode *> & pNodeTags /** pnodetags */ ,
                const std::vector<NXOpen::CAE::FENode *> & pVertexNodeTags /** pvertexnodetags */ 
            );
            /** Checks out of plane displacement of nodes for Node to Point Mapping @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool CheckNodeToPointMapForPlanarAnalysis
            (
                NXOpen::TaggedObject * pointTag /** pointtag */ ,
                NXOpen::TaggedObject * nodeTag /** nodetag */ 
            );
            /** Checks out of plane displacement of nodes for Node to Face Mapping @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool CheckNodeToFaceMapForPlanarAnalysis
            (
                NXOpen::TaggedObject * faceTag /** facetag */ ,
                const std::vector<NXOpen::CAE::FENode *> & pNodeTags /** pnodetags */ 
            );
            /** Checks out of plane displacement of nodes for Node to Edge Mapping @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool CheckNodeToEdgeMapForPlanarAnalysis
            (
                const std::vector<NXOpen::TaggedObject *> & pEdgeTags /** pedgetags */ ,
                const std::vector<NXOpen::CAE::FENode *> & pNodeTags /** pnodetags */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
