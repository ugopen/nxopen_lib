#ifndef NXOpen_CAM_SURFACEREGIONS_HXX_INCLUDED
#define NXOpen_CAM_SURFACEREGIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_SurfaceRegions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_SurfaceRegions.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class SurfaceRegions;
    }
    class Body;
    class Direction;
    class Face;
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectBodyList;
    class SelectFaceList;
    namespace CAM
    {
        class _SurfaceRegionsBuilder;
        class SurfaceRegionsImpl;
        /** Represents a Surface Regions Builder  <br> To create a new instance of this class, use @link NXOpen::CAM::CAMSetup::CreateSurfaceRegions  NXOpen::CAM::CAMSetup::CreateSurfaceRegions @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  SurfaceRegions : public NXOpen::Features::FeatureBuilder
        {
            /** enum for feature type */
            public: enum FeatureTypes
            {
                FeatureTypesFace/** type to  face */,
                FeatureTypesRegionOfFaces/** type to region */,
                FeatureTypesBody/** type to body */,
                FeatureTypesSteep/** type to steep */
            };

            /** enum for create regions */
            public: enum CreateRegionsTypes
            {
                CreateRegionsTypesSteep/** steep */,
                CreateRegionsTypesNonSteep/** non-steep */,
                CreateRegionsTypesSteepAndNonSteep/** steep and non-steep */
            };

            private: SurfaceRegionsImpl * m_surfaceregions_impl;
            private: friend class  _SurfaceRegionsBuilder;
            protected: SurfaceRegions();
            public: ~SurfaceRegions();
            /**Returns  the feature type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::SurfaceRegions::FeatureTypes FeatureType
            (
            );
            /**Sets  the feature type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFeatureType
            (
                NXOpen::CAM::SurfaceRegions::FeatureTypes type /** type */ 
            );
            /**Returns  the seed face 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Face * SeedFace
            (
            );
            /**Sets  the seed face 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSeedFace
            (
                NXOpen::Face * face /** face */ 
            );
            /**Returns  the boundary faces 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * BoundaryFaces
            (
            );
            /**Returns  the faces 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * Faces
            (
            );
            /**Returns  the surface region name  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SurfaceRegionName
            (
            );
            /**Sets  the surface region name  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSurfaceRegionName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the surface region name  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetSurfaceRegionName
            (
                const char * name /** name */ 
            );
            /**Returns  the bodies 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * Bodies
            (
            );
            /**Returns  the steep body 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Body * SteepBody
            (
            );
            /**Sets  the steep body 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSteepBody
            (
                NXOpen::Body * body /** body */ 
            );
            /**Returns  the excluded faces 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * ExcludedFaces
            (
            );
            /**Returns  the direction 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Direction
            (
            );
            /**Sets  the direction 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
            /**Returns  the isocline angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double IsoclineAngle
            (
            );
            /**Sets  the isocline angle 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetIsoclineAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the create regions type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::SurfaceRegions::CreateRegionsTypes CreateRegionsOption
            (
            );
            /**Sets  the create regions type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCreateRegionsOption
            (
                NXOpen::CAM::SurfaceRegions::CreateRegionsTypes type /** type */ 
            );
            /**Returns  the limit steep by cut direction flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool LimitSteepByCutDirection
            (
            );
            /**Sets  the limit steep by cut direction flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLimitSteepByCutDirection
            (
                bool limit /** limit */ 
            );
            /**Returns  the cut direction 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * CutDirection
            (
            );
            /**Sets  the cut direction 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetCutDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
            /**Returns  the traverse interior edges flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool TraverseInteriorEdges
            (
            );
            /**Sets  the traverse interior edges flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTraverseInteriorEdges
            (
                bool traverseInteriorEdges /** traverseinterioredges */ 
            );
            /**Returns  the use tangent edge angle flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTangentEdgeAngles
            (
            );
            /**Sets  the use tangent edge angle flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetUseTangentEdgeAngles
            (
                bool useAngle /** useangle */ 
            );
            /**Returns  the angle tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAngleTolerance
            (
                double angleTol /** angletol */ 
            );
            /**Returns  the at timestamp flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool AtTimestamp
            (
            );
            /**Sets  the at timestamp flag 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAtTimestamp
            (
                bool timestamp /** timestamp */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
