#ifndef NXOpen_CAE_THICKNESSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_THICKNESSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ThicknessBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/CAE_ThicknessBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ThicknessBuilder;
    }
    class Builder;
    namespace CAE
    {
        class Mesh;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    namespace CAE
    {
        class SelectFENodeList;
    }
    class NXColor;
    class TaggedObject;
    namespace CAE
    {
        class _ThicknessBuilderBuilder;
        class ThicknessBuilderImpl;
        /**
            Represents a @link NXOpen::CAE::ThicknessBuilder NXOpen::CAE::ThicknessBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::NodeElementInfoManager::CreateThicknessBuilder  NXOpen::CAE::NodeElementInfoManager::CreateThicknessBuilder @endlink  <br> 
         <br>  Created in NX6.0.1.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ThicknessBuilder : public NXOpen::Builder
        {
            /** Option to Info on Node or Element */
            public: enum EntityType
            {
                EntityTypeNode/** Info on node*/,
                EntityTypeElement/** Info on element*/
            };

            private: ThicknessBuilderImpl * m_thicknessbuilder_impl;
            private: friend class  _ThicknessBuilderBuilder;
            protected: ThicknessBuilder();
            public: ~ThicknessBuilder();
            /**Returns  the entity option 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ThicknessBuilder::EntityType EntityOption
            (
            );
            /**Sets  the entity option 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetEntityOption
            (
                NXOpen::CAE::ThicknessBuilder::EntityType entityOption /** entityoption */ 
            );
            /**Returns  the selected node 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectFENodeList * Node
            (
            );
            /**Returns  the selected elements 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * Element
            (
            );
            /**Returns  the mesh in context 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::Mesh * MeshContext
            (
            );
            /**Sets  the mesh in context 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMeshContext
            (
                NXOpen::CAE::Mesh * meshContext /**Mesh for thickness data access*/
            );
            /**Returns  the all mesh in context 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: bool AllMeshContext
            (
            );
            /**Sets  the all mesh in context 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetAllMeshContext
            (
                bool fAllMeshes /** All displayed meshes flag */
            );
            /**Returns  the mid thickness color 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * MidThicknessColor
            (
            );
            /**Sets  the mid thickness color 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMidThicknessColor
            (
                NXOpen::NXColor * goodThicknessColor /**thickness color*/
            );
            /**Returns  the above high color 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HighThicknessColor
            (
            );
            /**Sets  the above high color 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetHighThicknessColor
            (
                NXOpen::NXColor * highThicknessColor /**thickness color*/
            );
            /**Returns  the low color 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * LowThicknessColor
            (
            );
            /**Sets  the low color 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLowThicknessColor
            (
                NXOpen::NXColor * lowThicknessColor /**thickness color*/
            );
            /**Returns  the zero thickness color 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ZeroThicknessColor
            (
            );
            /**Sets  the zero thickness color 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetZeroThicknessColor
            (
                NXOpen::NXColor * noThicknessColor /**thickness color*/
            );
            /**Returns  the thickness scale 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: double Scale
            (
            );
            /**Sets  the thickness scale 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetScale
            (
                double scale /**scale */
            );
            /** The method to access average nodal thickness  @return Average thickness at node 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: double GetNodeThickness
            (
                NXOpen::TaggedObject * node /**Valid shell node*/,
                bool* fFound /**Node result status:found or not found*/
            );
            /** The method to access nodal thickness at corner nodes of an element, If found 
                         the output array will have either 4 values for quad elements and 3 values 
                         for tria elements  @return  array of Element Nodal thickness  
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<double> GetElementThickness
            (
                NXOpen::TaggedObject * element /**Valid shell element tag*/,
                bool* fFound /**Element result status:found or not found*/
            );
            /** The plotting method 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void Plot
            (
            );
            /** The clear context 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void Clear
            (
            );
            /** The field creation 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void CreateField
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
