#ifndef NXOpen_ATTRIBUTEMANAGER_HXX_INCLUDED
#define NXOpen_ATTRIBUTEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AttributeManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AttributePropertiesBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class AttributeManager;
    class Session;
    class AttributePropertiesBuilder;
    class BasePart;
    class NXObject;
    class AttributeManagerImpl;
    /** Provides methods for querying and updating attributes.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
     <br>  Created in NX8.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  AttributeManager
    {
        private: AttributeManagerImpl * m_attributemanager_impl;
        private: NXOpen::Session* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit AttributeManager(NXOpen::Session *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~AttributeManager();
        /** Creates the AttributePropertiesBuilder  @return  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AttributePropertiesBuilder * CreateAttributePropertiesBuilder
        (
            NXOpen::BasePart * part /** The part that owns the builder. The builder owner is not
                                                              strictly required (that is, it can be NULL), but it is
                                                              highly suggested to ensure proper cleanup of the builder in
                                                              case the client does not explicitly clean it up properly.  */,
            const std::vector<NXOpen::NXObject *> & objects /** the array of objects */,
            NXOpen::AttributePropertiesBuilder::OperationType operationType /** the type of operation */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
