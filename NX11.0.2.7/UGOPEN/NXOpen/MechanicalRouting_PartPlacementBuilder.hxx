#ifndef NXOpen_MECHANICALROUTING_PARTPLACEMENTBUILDER_HXX_INCLUDED
#define NXOpen_MECHANICALROUTING_PARTPLACEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MechanicalRouting_PartPlacementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MechanicalRouting_PartPlacementBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Placement_PlacementEngineBuilder.hxx>
#include <NXOpen/Placement_PlacementSolution.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_mechanicalrouting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MechanicalRouting
    {
        class PartPlacementBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class Builder;
    class NXObject;
    namespace PDM
    {
        class LogicalObject;
    }
    namespace Placement
    {
        class PlacementEngineBuilder;
    }
    namespace Placement
    {
        class PlacementSolution;
    }
    class TaggedObject;
    namespace MechanicalRouting
    {
        class _PartPlacementBuilderBuilder;
        class PartPlacementBuilderImpl;
        /** Represents @link NXOpen::MechanicalRouting::PartPlacementBuilder NXOpen::MechanicalRouting::PartPlacementBuilder@endlink .  <br> To create a new instance of this class, use @link NXOpen::MechanicalRouting::BuilderFactory::CreatePartPlacementBuilder  NXOpen::MechanicalRouting::BuilderFactory::CreatePartPlacementBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MECHANICALROUTINGEXPORT  PartPlacementBuilder : public NXOpen::Builder
        {
            /** The positioning types 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: enum PositionAsType
            {
                PositionAsTypeRouting/** position as inline routing fitting */,
                PositionAsTypeEquipment/** position as equipment   */
            };

            /** The placement validation status 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: enum PlacementValidationStatus
            {
                PlacementValidationStatusSuccess/** part placement is successful as expected */,
                PlacementValidationStatusPartNotConnectedToRout/** after placement connection should have been built with routing system but it was not */
            };

            private: PartPlacementBuilderImpl * m_partplacementbuilder_impl;
            private: friend class  _PartPlacementBuilderBuilder;
            protected: PartPlacementBuilder();
            public: ~PartPlacementBuilder();
            /** Sets the file specification of the part to place 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetFileSpecificationOfPartToPlace
            (
                const NXString & filename /** filename */ 
            );
            /** Sets the file specification of the part to place 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetFileSpecificationOfPartToPlace
            (
                const char * filename /** filename */ 
            );
            /** Sets the identifier of the classification object associated with the part to place 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetClassificationObjectIdentifier
            (
                const NXString & classificationObjectId /** classificationobjectid */ 
            );
            /** Sets the identifier of the classification object associated with the part to place 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetClassificationObjectIdentifier
            (
                const char * classificationObjectId /** classificationobjectid */ 
            );
            /** Sets the reference object and reference location for placement.  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetReferenceObjectForPlacement
            (
                NXOpen::TaggedObject * referenceObject /** New object to attach to. Can be NULL. */,
                const NXOpen::Point3d & referencePositionPoint /** The new location for the part. */
            );
            /** Loads the @link BasePart BasePart@endlink  to place.   @return  loaded part 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::BasePart * LoadPart
            (
            );
            /** Creates the @link Assemblies::Component Assemblies::Component@endlink  for part to place with given reference set and layer.
                        The created component will be used to generate placement solutions. Error will be raised if part to place is not loaded.  @return  created part occurrence 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Assemblies::Component * CreatePartOccurrenceToPlace
            (
                const NXString & referenceSet /** reference set to apply on part occurrence */,
                int layer /** layer */
            );
            /** Creates the @link Assemblies::Component Assemblies::Component@endlink  for part to place with given reference set and layer.
                        The created component will be used to generate placement solutions. Error will be raised if part to place is not loaded.  @return  created part occurrence 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXOpen::Assemblies::Component * CreatePartOccurrenceToPlace
            (
                const char * referenceSet /** reference set to apply on part occurrence */,
                int layer /** layer */
            );
            /** Initializes the Placement Engine builder with input already present in the Part Placement Builder.   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Placement::PlacementEngineBuilder * InitializePlacementEngineBuilder
            (
            );
            /** Pre commits the current placement operation to prepare data (ex. split stock, post placement, etc) for final commit. This method must be followed 
                        by a call to final commit method @link MechanicalRouting::PartPlacementBuilder::CommitThisPlacement MechanicalRouting::PartPlacementBuilder::CommitThisPlacement@endlink  to complete the placement operation
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void PreCommitThisPlacement
            (
            );
            /** Commits the current placement operation. This method must be called after calling method
                        @link MechanicalRouting::PartPlacementBuilder::PreCommitThisPlacement MechanicalRouting::PartPlacementBuilder::PreCommitThisPlacement@endlink . 
                        This method returns @link NXOpen::MechanicalRouting::PartPlacementBuilder::PlacementValidationStatus NXOpen::MechanicalRouting::PartPlacementBuilder::PlacementValidationStatus@endlink  value @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::PartPlacementBuilder::PlacementValidationStatus CommitThisPlacement
            (
            );
            /** Sets the primary solutions flag on builder. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPrimarySolutionsFlag
            (
                bool showPrimarySolutions /** showprimarysolutions */ 
            );
            /** Filters placement solutions based existing filtration flags in builder ex. primary.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Placement::PlacementSolution *> GetFilteredPlacementSolutions
            (
            );
            /** Sets the port for filtration from the part being placed. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPortOfPlaceableObject
            (
                NXOpen::TaggedObject * sourcePortObject /** sourceportobject */ 
            );
            /** Sets the positioning option @link NXOpen::MechanicalRouting::PartPlacementBuilder::PositionAsType NXOpen::MechanicalRouting::PartPlacementBuilder::PositionAsType@endlink  on the builder. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPositionAsOption
            (
                NXOpen::MechanicalRouting::PartPlacementBuilder::PositionAsType positioningType /** positioningtype */ 
            );
            /** Rotates the fitting by the specified angle along the plane perpendicular to the vector defined by the engaged port. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RotatePlaceableObjectByAngle
            (
                double rotationAngle /** rotationangle */ 
            );
            /** Sets the identifier of the classification object associated with the part to be post placed. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetClassificationObjectIdentifierOfPartToPostPlace
            (
                const NXString & classificationObjectId /** classificationobjectid */ 
            );
            /** Sets the identifier of the classification object associated with the part to be post placed. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetClassificationObjectIdentifierOfPartToPostPlace
            (
                const char * classificationObjectId /** classificationobjectid */ 
            );
            /** Updates the reference set for the Design Elements created during part placement operation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateReferenceSet
            (
                const NXString & referenseSetName /** referensesetname */ 
            );
            /** Updates the reference set for the Design Elements created during part placement operation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void UpdateReferenceSet
            (
                const char * referenseSetName /** referensesetname */ 
            );
            /** Updates the layer for the Design Elements created during part placement operation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateLayer
            (
                int layerNumber /** layernumber */ 
            );
            /** Auto assign the auto assignable attributes of all @link PDM::LogicalObject PDM::LogicalObject@endlink s that were created during part placement operation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AutoAssignAttributes
            (
            );
            /** Returns the @link PDM::LogicalObject PDM::LogicalObject@endlink s having unassigned non-auto-assignable required attributes. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetLogicalObjectsHavingUnassignedRequiredAttributes
            (
                std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /** Returns the @link PDM::LogicalObject PDM::LogicalObject@endlink s that were created during part placement operation. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetLogicalObjects
            (
                std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /** Returns the error code for a placement solution. A non-zero error code may suggest whether there
                    will be any design rule validation due to the given placement solution.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int GetErrorCodeForPlacementSolution
            (
                NXOpen::Placement::PlacementSolution * placementSolution /** placementsolution */ 
            );
            /** Sets the option that determines whether a part positioned as Equipment should be added to the active Run  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAddUnconnectedEquipmentToActiveRunOption
            (
                bool canAddEquipmentToActiveRun /** Flag when true will result in parts positioned as Equipment to be added to the active Run. */
            );
            /**Returns  the mapping logical design object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::NXObject * LogicalDesignObject
            (
            );
            /**Sets  the mapping logical design object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetLogicalDesignObject
            (
                NXOpen::NXObject * logicalDesignObject /** logicaldesignobject */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
