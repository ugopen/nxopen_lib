#ifndef NXOpen_PRINT3DBUILDER_HXX_INCLUDED
#define NXOpen_PRINT3DBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Print3dBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Print3dBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Print3dBuilder;
    class Builder;
    class CoordinateSystem;
    class SelectBodyList;
    class _Print3dBuilderBuilder;
    class Print3dBuilderImpl;
    /**This class sends the 3d model for 3dprinting. The user can select solid bodies, convergent bodies,
        NX facet bodies or JT facet bodies for 3d printing.The print can be chosen to have a support, raft,
        various types of density and quality  <br> To create a new instance of this class, use @link NXOpen::PlotManager::CreatePrint3dBuilder  NXOpen::PlotManager::CreatePrint3dBuilder @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    AddRaft </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    AddSupport </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    InFillPrint </td> <td> 
     
    Hollow </td> </tr> 

    <tr><td> 
     
    QualityPrint </td> <td> 
     
    High </td> </tr> 

    </table>  

     <br>  Created in NX11.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Print3dBuilder : public NXOpen::Builder
    {
        /** Sets the print quality */
        public: enum PrintQualityEnum
        {
            PrintQualityEnumHigh/** high */ ,
            PrintQualityEnumMedium/** medium */ ,
            PrintQualityEnumDraft/** draft */ 
        };

        /**Sets the Infill type required for the 3d printing*/
        public: enum PrintInfillEnum
        {
            PrintInfillEnumHollow/** hollow */ ,
            PrintInfillEnumLow/** low */ ,
            PrintInfillEnumMedium/** medium */ ,
            PrintInfillEnumHigh/** high */ ,
            PrintInfillEnumSolid/** solid */ 
        };

        private: Print3dBuilderImpl * m_print3dbuilder_impl;
        private: friend class  _Print3dBuilderBuilder;
        protected: Print3dBuilder();
        public: ~Print3dBuilder();
        /**Returns  the printer name 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXString PrinterText
        (
        );
        /**Sets  the printer name 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPrinterText
        (
            const NXString & printer /** printer */ 
        );
        /**Sets  the printer name 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void SetPrinterText
        (
            const char * printer /** printer */ 
        );
        /**Returns the bodies to be printed 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SelectBodyList * Bodies
        (
        );
        /**Returns  the coordinate system which determines the orientation with respect to the printer 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::CoordinateSystem * LocationCoordinateSystem
        (
        );
        /**Sets  the coordinate system which determines the orientation with respect to the printer 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLocationCoordinateSystem
        (
            NXOpen::CoordinateSystem * locationCSYS /** locationcsys */ 
        );
        /**Returns  the quality of the 3d print 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Print3dBuilder::PrintQualityEnum QualityPrint
        (
        );
        /**Sets  the quality of the 3d print 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetQualityPrint
        (
            NXOpen::Print3dBuilder::PrintQualityEnum qualityPrint /** qualityprint */ 
        );
        /**Returns  the type of infill for the 3d print 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Print3dBuilder::PrintInfillEnum InFillPrint
        (
        );
        /**Sets  the type of infill for the 3d print 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetInFillPrint
        (
            NXOpen::Print3dBuilder::PrintInfillEnum inFillPrint /** infillprint */ 
        );
        /**Returns the support printing for 3d print 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool AddSupport
        (
        );
        /**Sets the support printing for 3d print 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAddSupport
        (
            bool addSupport /** addsupport */ 
        );
        /**Returns  the raft printing for the 3d print
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool AddRaft
        (
        );
        /**Sets  the raft printing for the 3d print
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAddRaft
        (
            bool addRaft /** addraft */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
