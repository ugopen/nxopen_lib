#ifndef NXOpen_TOOLING_DIEENGDEFINEPRODUCTORIENTATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_DIEENGDEFINEPRODUCTORIENTATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_DieEngDefineProductOrientationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Tooling_DieEngDefineProductOrientationBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class DieEngDefineProductOrientationBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Direction;
    class NXColor;
    class Point;
    class ScCollector;
    namespace Tooling
    {
        class _DieEngDefineProductOrientationBuilderBuilder;
        class DieEngDefineProductOrientationBuilderImpl;
        /** Die Engineer define product orientation builder. <br> To create a new instance of this class, use @link NXOpen::Tooling::AutoDieCollection::CreateDieEngDefineProductOrientationBuilder  NXOpen::Tooling::AutoDieCollection::CreateDieEngDefineProductOrientationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngleIncrement </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        AngleValue </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        AngleValueOptimal </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ChooseOptimalMethod </td> <td> 
         
        MinimizeBackdraft </td> </tr> 

        <tr><td> 
         
        DoublePassTranslucency </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DraftAngleScale </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FacetQualityOptions </td> <td> 
         
        Coarse </td> </tr> 

        <tr><td> 
         
        FailureShowIsocline </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FailureValue </td> <td> 
         
        75 </td> </tr> 

        <tr><td> 
         
        LimitShading </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TrimWallAngleScale </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        VisualizeDepth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        VisualizeDraft </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        VisualizeDraftOptions </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        WarningShowIsocline </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WarningValue </td> <td> 
         
        50 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  DieEngDefineProductOrientationBuilder : public NXOpen::Builder
        {
            /** the optimal method */
            public: enum OptimalMethod
            {
                OptimalMethodMinimizeBackdraft/** minimize backdraft */ ,
                OptimalMethodMinimizeDrawDepth/** minimize draw depth */ ,
                OptimalMethodNormaltoFace/** normalto face */ ,
                OptimalMethodAxisofHole/** axisof hole */ ,
                OptimalMethodThreePoints/** three points */ 
            };

            /** the facet quality option */
            public: enum FacetQualityOption
            {
                FacetQualityOptionCoarse/** coarse */ ,
                FacetQualityOptionNormal/** normal */ ,
                FacetQualityOptionFine/** fine */ ,
                FacetQualityOptionExtraFine/** extra fine */ ,
                FacetQualityOptionUltraFine/** ultra fine */ 
            };

            /** view draft options */
            public: enum ViewDraftOptions
            {
                ViewDraftOptionsNone/** none */ ,
                ViewDraftOptionsComputeTrimAngles/** compute trim angles */ ,
                ViewDraftOptionsComputeWallAngles/** compute wall angles */ 
            };

            private: DieEngDefineProductOrientationBuilderImpl * m_dieengdefineproductorientationbuilder_impl;
            private: friend class  _DieEngDefineProductOrientationBuilderBuilder;
            protected: DieEngDefineProductOrientationBuilder();
            public: ~DieEngDefineProductOrientationBuilder();
            /**Returns  the angle about 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Direction * AngleAbout
            (
            );
            /**Sets  the angle about 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleAbout
            (
                NXOpen::Direction * angleAbout /** angleabout */ 
            );
            /**Returns  the angle value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleValue
            (
            );
            /**Sets  the angle value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleValue
            (
                double angleValue /** anglevalue */ 
            );
            /**Returns  the name csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXString NameCSYS
            (
            );
            /**Sets  the name csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetNameCSYS
            (
                const NXString & nameCSYS /** namecsys */ 
            );
            /**Sets  the name csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            void SetNameCSYS
            (
                const char * nameCSYS /** namecsys */ 
            );
            /** Returns the reason  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: std::vector<NXString> GetReason
            (
            );
            /** Sets the reason 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetReason
            (
                const std::vector<NXString> & reason /** reason */ 
            );
            /** The callback function of button new 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void ButtonNew
            (
            );
            /** The callback function of button cut 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void ButtonCut
            (
            );
            /** The callback function of button copy 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void ButtonCopy
            (
            );
            /** The callback function of button paste 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void ButtonPaste
            (
            );
            /** The callback function of button copy tip 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void ButtonCopyTip
            (
            );
            /** The callback function of button view 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void ButtonView
            (
            );
            /**Returns  the point in region 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * PointInRegion
            (
            );
            /**Sets  the point in region 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPointInRegion
            (
                NXOpen::Point * pointInRegion /** pointinregion */ 
            );
            /**Returns  the reverse normal 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool ReverseNormal
            (
            );
            /**Sets  the reverse normal 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetReverseNormal
            (
                bool reverseNormal /** reversenormal */ 
            );
            /**Returns  the choose optimal method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngDefineProductOrientationBuilder::OptimalMethod ChooseOptimalMethod
            (
            );
            /**Sets  the choose optimal method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetChooseOptimalMethod
            (
                NXOpen::Tooling::DieEngDefineProductOrientationBuilder::OptimalMethod chooseOptimalMethod /** chooseoptimalmethod */ 
            );
            /**Returns  the angle increment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleIncrement
            (
            );
            /**Sets  the angle increment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleIncrement
            (
                double angleIncrement /** angleincrement */ 
            );
            /**Returns  the angle value optimal 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double AngleValueOptimal
            (
            );
            /**Sets  the angle value optimal 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetAngleValueOptimal
            (
                double angleValueOptimal /** anglevalueoptimal */ 
            );
            /**Returns  the optimal hole axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ScCollector * OptimalHoleAxis
            (
            );
            /**Returns  the optimal point1 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * OptimalPoint1
            (
            );
            /**Sets  the optimal point1 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetOptimalPoint1
            (
                NXOpen::Point * optimalPoint1 /** optimalpoint1 */ 
            );
            /**Returns  the optimal point2 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * OptimalPoint2
            (
            );
            /**Sets  the optimal point2 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetOptimalPoint2
            (
                NXOpen::Point * optimalPoint2 /** optimalpoint2 */ 
            );
            /**Returns  the optimal point3 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * OptimalPoint3
            (
            );
            /**Sets  the optimal point3 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetOptimalPoint3
            (
                NXOpen::Point * optimalPoint3 /** optimalpoint3 */ 
            );
            /** The callback function of button apply optimal 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void ButtonApplyOptimal
            (
            );
            /**Returns  the view region bounds 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ScCollector * ViewRegionBounds
            (
            );
            /**Returns  the point in region1 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * PointInRegion1
            (
            );
            /**Sets  the point in region1 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetPointInRegion1
            (
                NXOpen::Point * pointInRegion1 /** pointinregion1 */ 
            );
            /**Returns  the limit shading 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool LimitShading
            (
            );
            /**Sets  the limit shading 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetLimitShading
            (
                bool limitShading /** limitshading */ 
            );
            /**Returns  the reverse sheet normal 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool ReverseSheetNormal
            (
            );
            /**Sets  the reverse sheet normal 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetReverseSheetNormal
            (
                bool reverseSheetNormal /** reversesheetnormal */ 
            );
            /**Returns  the facet quality options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngDefineProductOrientationBuilder::FacetQualityOption FacetQualityOptions
            (
            );
            /**Sets  the facet quality options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFacetQualityOptions
            (
                NXOpen::Tooling::DieEngDefineProductOrientationBuilder::FacetQualityOption facetQualityOptions /** facetqualityoptions */ 
            );
            /**Returns  the visualize draft options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Tooling::DieEngDefineProductOrientationBuilder::ViewDraftOptions VisualizeDraftOptions
            (
            );
            /**Sets  the visualize draft options 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetVisualizeDraftOptions
            (
                NXOpen::Tooling::DieEngDefineProductOrientationBuilder::ViewDraftOptions visualizeDraftOptions /** visualizedraftoptions */ 
            );
            /**Returns  the visualize draft 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool VisualizeDraft
            (
            );
            /**Sets  the visualize draft 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetVisualizeDraft
            (
                bool visualizeDraft /** visualizedraft */ 
            );
            /**Returns  the color draft angle pass 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::NXColor * ColorDraftAnglePass
            (
            );
            /**Sets  the color draft angle pass 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetColorDraftAnglePass
            (
                NXOpen::NXColor * colorDraftAnglePass /** colordraftanglepass */ 
            );
            /**Returns  the double pass translucency 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double DoublePassTranslucency
            (
            );
            /**Sets  the double pass translucency 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDoublePassTranslucency
            (
                double doublePassTranslucency /** doublepasstranslucency */ 
            );
            /**Returns  the color draft angle warning 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::NXColor * ColorDraftAngleWarning
            (
            );
            /**Sets  the color draft angle warning 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetColorDraftAngleWarning
            (
                NXOpen::NXColor * colorDraftAngleWarning /** colordraftanglewarning */ 
            );
            /**Returns  the warning show isocline 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool WarningShowIsocline
            (
            );
            /**Sets  the warning show isocline 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetWarningShowIsocline
            (
                bool warningShowIsocline /** warningshowisocline */ 
            );
            /**Returns  the draft angle scale 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double DraftAngleScale
            (
            );
            /**Sets  the draft angle scale 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetDraftAngleScale
            (
                double draftAngleScale /** draftanglescale */ 
            );
            /**Returns  the color draft angle failure 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::NXColor * ColorDraftAngleFailure
            (
            );
            /**Sets  the color draft angle failure 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetColorDraftAngleFailure
            (
                NXOpen::NXColor * colorDraftAngleFailure /** colordraftanglefailure */ 
            );
            /**Returns  the failure show isocline 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool FailureShowIsocline
            (
            );
            /**Sets  the failure show isocline 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFailureShowIsocline
            (
                bool failureShowIsocline /** failureshowisocline */ 
            );
            /**Returns  the trim wall angle scale 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double TrimWallAngleScale
            (
            );
            /**Sets  the trim wall angle scale 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetTrimWallAngleScale
            (
                double trimWallAngleScale /** trimwallanglescale */ 
            );
            /**Returns  the visualize depth 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: bool VisualizeDepth
            (
            );
            /**Sets  the visualize depth 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetVisualizeDepth
            (
                bool visualizeDepth /** visualizedepth */ 
            );
            /**Returns  the color depth pass 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::NXColor * ColorDepthPass
            (
            );
            /**Sets  the color depth pass 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetColorDepthPass
            (
                NXOpen::NXColor * colorDepthPass /** colordepthpass */ 
            );
            /**Returns  the color warning 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::NXColor * ColorWarning
            (
            );
            /**Sets  the color warning 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetColorWarning
            (
                NXOpen::NXColor * colorWarning /** colorwarning */ 
            );
            /**Returns  the warning value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double WarningValue
            (
            );
            /**Sets  the warning value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetWarningValue
            (
                double warningValue /** warningvalue */ 
            );
            /**Returns  the color failure 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::NXColor * ColorFailure
            (
            );
            /**Sets  the color failure 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetColorFailure
            (
                NXOpen::NXColor * colorFailure /** colorfailure */ 
            );
            /**Returns  the failure value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: double FailureValue
            (
            );
            /**Sets  the failure value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFailureValue
            (
                double failureValue /** failurevalue */ 
            );
            /**Returns  the from vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Direction * FromVector
            (
            );
            /**Sets  the from vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFromVector
            (
                NXOpen::Direction * fromVector /** fromvector */ 
            );
            /**Returns  the to vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Direction * ToVector
            (
            );
            /**Sets  the to vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetToVector
            (
                NXOpen::Direction * toVector /** tovector */ 
            );
            /**Returns  the from point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * FromPoint
            (
            );
            /**Sets  the from point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetFromPoint
            (
                NXOpen::Point * fromPoint /** frompoint */ 
            );
            /**Returns  the to point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Point * ToPoint
            (
            );
            /**Sets  the to point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetToPoint
            (
                NXOpen::Point * toPoint /** topoint */ 
            );
            /**Returns  the product csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::CoordinateSystem * ProductCSYS
            (
            );
            /**Sets  the product csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: void SetProductCSYS
            (
                NXOpen::CoordinateSystem * productCSYS /** productcsys */ 
            );
            /**Returns  the trim profile 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::ScCollector * TrimProfile
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
