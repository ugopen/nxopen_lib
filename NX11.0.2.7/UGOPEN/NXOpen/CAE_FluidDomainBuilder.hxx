#ifndef NXOpen_CAE_FLUIDDOMAINBUILDER_HXX_INCLUDED
#define NXOpen_CAE_FLUIDDOMAINBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FluidDomainBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ElementTypeBuilder.hxx>
#include <NXOpen/CAE_FluidDomainBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class FluidDomainBuilder;
    }
    class Builder;
    namespace CAE
    {
        class CAEBody;
    }
    namespace CAE
    {
        class ElementTypeBuilder;
    }
    namespace CAE
    {
        class SelectCAEFace;
    }
    class Direction;
    class Expression;
    class Point;
    class SelectTaggedObjectList;
    namespace CAE
    {
        class _FluidDomainBuilderBuilder;
        class FluidDomainBuilderImpl;
        /**
            Represents a @link NXOpen::CAE::FluidDomainRecipe NXOpen::CAE::FluidDomainRecipe@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::FluidDomainCollection::CreateBuilder  NXOpen::CAE::FluidDomainCollection::CreateBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        InteriorExteriorType </td> <td> 
         
        Point </td> </tr> 

        </table>  

         <br>  Created in NX7.5.2.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  FluidDomainBuilder : public NXOpen::Builder
        {
            /** Represents the interior/exterior types. */
            public: enum IntExtType
            {
                IntExtTypeFaceAndNormalVector/** The interior specified by providing a face and a normal. */,
                IntExtTypePoint/** The interior specified by providing a point. */,
                IntExtTypeFromExterior/** Wrap from the exterior. */
            };

            /** Represents the output types. */
            public: enum OutputOptionsType
            {
                OutputOptionsTypeBodyOnly/** The output type specified as only body generation. */,
                OutputOptionsTypeBodyandMesh/** The output type specified as body and mesh generation. */,
                OutputOptionsTypeMeshOnly/** The output type specified as only mesh genberation. */
            };

            private: FluidDomainBuilderImpl * m_fluiddomainbuilder_impl;
            private: friend class  _FluidDomainBuilderBuilder;
            protected: FluidDomainBuilder();
            public: ~FluidDomainBuilder();
            /**Returns  the element type builder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ElementTypeBuilder * ElementType
            (
            );
            /**Returns  the geometry selection 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * GeometrySelection
            (
            );
            /**Returns  the interior selection type represented by @link NXOpen::CAE::FluidDomainBuilder::IntExtType NXOpen::CAE::FluidDomainBuilder::IntExtType@endlink  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::FluidDomainBuilder::IntExtType InteriorExteriorType
            (
            );
            /**Sets  the interior selection type represented by @link NXOpen::CAE::FluidDomainBuilder::IntExtType NXOpen::CAE::FluidDomainBuilder::IntExtType@endlink  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetInteriorExteriorType
            (
                NXOpen::CAE::FluidDomainBuilder::IntExtType type /** type */ 
            );
            /**Returns  the output selection type represented by @link NXOpen::CAE::FluidDomainBuilder::OutputOptionsType NXOpen::CAE::FluidDomainBuilder::OutputOptionsType@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::FluidDomainBuilder::OutputOptionsType OutputType
            (
            );
            /**Sets  the output selection type represented by @link NXOpen::CAE::FluidDomainBuilder::OutputOptionsType NXOpen::CAE::FluidDomainBuilder::OutputOptionsType@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetOutputType
            (
                NXOpen::CAE::FluidDomainBuilder::OutputOptionsType type /** type */ 
            );
            /**Returns  the collector name selection to place the new element collector into 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CollectorName
            (
            );
            /**Sets  the collector name selection to place the new element collector into 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetCollectorName
            (
                const NXString & collectorName /** collectorname */ 
            );
            /**Sets  the collector name selection to place the new element collector into 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            void SetCollectorName
            (
                const char * collectorName /** collectorname */ 
            );
            /**Returns  the face selection 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectCAEFace * FaceSelection
            (
            );
            /**Returns  the face normal 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * FaceNormal
            (
            );
            /**Sets  the face normal 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetFaceNormal
            (
                NXOpen::Direction * faceNormal /** facenormal */ 
            );
            /**Returns  the interior point. 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * InteriorPoint
            (
            );
            /**Sets  the interior point. 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetInteriorPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the resolution 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Resolution
            (
            );
            /**Returns  the edge snapping flag - obsolete: use SnapToSourceBoundaries() instead 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool DoSharpFeatureEdge
            (
            );
            /**Sets  the edge snapping flag - obsolete: use SnapToSourceBoundaries() instead 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetDoSharpFeatureEdge
            (
                bool doSnapping /** dosnapping */ 
            );
            /**Returns  the plane intersection detection flag - obsolete: use SnapToSourceBoundaries() instead 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool DoSharpFeaturePlaneIntersection
            (
            );
            /**Sets  the plane intersection detection flag - obsolete: use SnapToSourceBoundaries() instead 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetDoSharpFeaturePlaneIntersection
            (
                bool doSnapping /** dosnapping */ 
            );
            /**Returns  the decimation flag - obsolete: always using surface wrapper default values 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool DoCoplanarDecimation
            (
            );
            /**Sets  the decimation flag - obsolete: always using surface wrapper default values 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetDoCoplanarDecimation
            (
                bool doDecimation /** dodecimation */ 
            );
            /**Returns  the coplanar decimation threshold - obsolete: always using surface wrapper default values  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: double CoplanarThreshold
            (
            );
            /**Sets  the coplanar decimation threshold - obsolete: always using surface wrapper default values  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetCoplanarThreshold
            (
                double coplanarThreshold /** coplanarthreshold */ 
            );
            /**Returns  the colinear decimation threshold - obsolete: always using surface wrapper default values  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: double ColinearThreshold
            (
            );
            /**Sets  the colinear decimation threshold - obsolete: always using surface wrapper default values  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetColinearThreshold
            (
                double colinearThreshold /** colinearthreshold */ 
            );
            /**Returns  the export mesh to solver flag. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool DoExportMeshToSolver
            (
            );
            /**Sets  the export mesh to solver flag. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetDoExportMeshToSolver
            (
                bool doExporting /** doexporting */ 
            );
            /**Returns  the smoothing level parameter controls the amount of time spent smoothing and snapping in the wrapper engine 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double SmoothingLevel
            (
            );
            /**Sets  the smoothing level parameter controls the amount of time spent smoothing and snapping in the wrapper engine 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetSmoothingLevel
            (
                double smoothingLevel /** smoothinglevel */ 
            );
            /**Returns  the edge snapping to boundaries flag controls whether or not the generated surface wrap body should be projected on the input boundaries 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool SnapToSourceBoundaries
            (
            );
            /**Sets  the edge snapping to boundaries flag controls whether or not the generated surface wrap body should be projected on the input boundaries 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void SetSnapToSourceBoundaries
            (
                bool snapToSourceBoundaries /** snaptosourceboundaries */ 
            );
            /**Returns  the feature angle specifies the minimum angle between the normals of 2 elements sharing an edge for the edge to be considered for snapping 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FeatureAngle
            (
            );
            /** The calculate Auto Size method.
                        This computes and populates optimal resolution for surface wrapping. 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: void AutoSizeButton
            (
            );
            /** Commits the creation of the @link NXOpen::CAE::FluidDomainRecipe NXOpen::CAE::FluidDomainRecipe@endlink  objects
                        or Commits the changes made to the @link NXOpen::CAE::FluidDomainRecipe NXOpen::CAE::FluidDomainRecipe@endlink 
                      @return  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : nx_adv_fluid_mod ("NX Advanced Fluid Modeling") OR nx_acoustic_modeling (" NX Acoustic Modeling") */
            public: NXOpen::CAE::CAEBody * CommitFluidDomain
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
