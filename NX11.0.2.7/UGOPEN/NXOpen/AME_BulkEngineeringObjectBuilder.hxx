#ifndef NXOpen_AME_BULKENGINEERINGOBJECTBUILDER_HXX_INCLUDED
#define NXOpen_AME_BULKENGINEERINGOBJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_BulkEngineeringObjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_BulkEngineeringObjectBuilder.hxx>
#include <NXOpen/AME_EODefAttributeHolder.hxx>
#include <NXOpen/AME_EngineeringObjectNameBuilder.hxx>
#include <NXOpen/AME_SelectionEngineeringObjectDefinitionBuilder.hxx>
#include <NXOpen/AME_MultipleObjectsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class BulkEngineeringObjectBuilder;
    }
    namespace AME
    {
        class EODefAttributeHolder;
    }
    namespace AME
    {
        class EngineeringObjectNameBuilder;
    }
    namespace AME
    {
        class MultipleObjectsBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNodeList;
    }
    namespace AME
    {
        class SelectionEngineeringObjectDefinitionBuilder;
    }
    namespace AME
    {
        class _BulkEngineeringObjectBuilderBuilder;
        class BulkEngineeringObjectBuilderImpl;
        /** BulkEngineeringObjectBuilder class will be used for bulk Engineering Object Operation.
             <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateBulkEngineeringObjectBuilder  NXOpen::AME::AMEManager::CreateBulkEngineeringObjectBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AspectPlacement </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowInAutomation </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowInFunction </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowInLocation </td> <td> 
         
        false </td> </tr> 

        <tr><td> 
         
        ShowInProduct </td> <td> 
         
        false </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  BulkEngineeringObjectBuilder : public NXOpen::AME::MultipleObjectsBuilder
        {
            private: BulkEngineeringObjectBuilderImpl * m_bulkengineeringobjectbuilder_impl;
            private: friend class  _BulkEngineeringObjectBuilderBuilder;
            protected: BulkEngineeringObjectBuilder();
            public: ~BulkEngineeringObjectBuilder();
            /**Returns  the selected eo def
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectionEngineeringObjectDefinitionBuilder * SelectedEngObjectDefinition
            (
            );
            /**Returns  the eo name and description ui block
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EngineeringObjectNameBuilder * EOName
            (
            );
            /**Returns  the select object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNodeList * SelectedObjects
            (
            );
            /**Returns  the show in function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInFunction
            (
            );
            /**Sets  the show in function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInFunction
            (
                bool showInFunction /** showinfunction */ 
            );
            /**Returns  the show in location 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInLocation
            (
            );
            /**Sets  the show in location 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInLocation
            (
                bool showInLocation /** showinlocation */ 
            );
            /**Returns  the show in product 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInProduct
            (
            );
            /**Sets  the show in product 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInProduct
            (
                bool showInProduct /** showinproduct */ 
            );
            /**Returns  the show in automation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInAutomation
            (
            );
            /**Sets  the show in automation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInAutomation
            (
                bool showInAutomation /** showinautomation */ 
            );
            /**Returns  the aspect placement 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool AspectPlacement
            (
            );
            /**Sets  the aspect placement 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAspectPlacement
            (
                bool aspectPlacement /** aspectplacement */ 
            );
            /**Returns  the def 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EODefAttributeHolder * EoDefAttributeHolder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
