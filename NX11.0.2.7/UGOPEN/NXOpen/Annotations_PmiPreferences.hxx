#ifndef NXOpen_ANNOTATIONS_PMIPREFERENCES_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_PMIPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_PmiPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations.hxx>
#include <NXOpen/Annotations_CuttingPlaneSymbolBuilder.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class PmiPreferences;
    }
    class NXColor;
    namespace Annotations
    {
    }
    namespace Annotations
    {
        class PmiPreferencesImpl;
        /** Represents line and arrow preferences 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  PmiPreferences : public NXOpen::TransientObject
        {
            /** Specifies the allowable symbol types for Parallel To Screen and Lock Pan/Zoom */
            public: enum PreferenceSymbolTypes
            {
                PreferenceSymbolTypesNote/** note */,
                PreferenceSymbolTypesGeneralNote/** general note */,
                PreferenceSymbolTypesSpecificNote/** specific note */,
                PreferenceSymbolTypesEnterpriseId/** enterprise id */,
                PreferenceSymbolTypesMaterialSpecification/** material specification */,
                PreferenceSymbolTypesPartId/** part id */,
                PreferenceSymbolTypesProcessSpecification/** process specification */,
                PreferenceSymbolTypesUrlNote/** url note */,
                PreferenceSymbolTypesStringNote/** string note */,
                PreferenceSymbolTypesNumberNote/** number note */,
                PreferenceSymbolTypesIntegerNote/** integer note */,
                PreferenceSymbolTypesBalloonNote/** balloon note */,
                PreferenceSymbolTypesCustomSymbol/** custom symbol */,
                PreferenceSymbolTypesGovernmentSecurityInfo/** government security info */,
                PreferenceSymbolTypesCompanySpecificProprietaryInfo/** company specific proprietary info */,
                PreferenceSymbolTypesExportControl/** export control */
            };

            private: PmiPreferencesImpl * m_pmipreferences_impl;
            /// \cond NX_NO_DOC 
            public: explicit PmiPreferences(void *ptr);
            /// \endcond 
            /** Frees the object from memory.  After this method is called,
                    it is illegal to use the object.  In .NET, this method is automatically
                    called when the object is deleted by the garbage collector.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PmiPreferences();
            /**Returns  the default annotation plane for PMI symbols 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PmiDefaultPlane DefaultPlane
            (
            );
            /**Sets  the default annotation plane for PMI symbols 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultPlane
            (
                NXOpen::Annotations::PmiDefaultPlane defaultPlane /** default plane */ 
            );
            /**Returns  the toggle for display through shaded models 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShadedDisplay
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShadedDisplay
            (
                bool shadedDisplay /** shaded display */ 
            );
            /**Returns  the initial letter for datum labels 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DatumLabel
            (
            );
            /**Sets  the initial letter for datum labels 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDatumLabel
            (
                const NXString & datumLabel /** datum label */ 
            );
            /**Sets  the initial letter for datum labels 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void SetDatumLabel
            (
                const char * datumLabel /** datum label */ 
            );
            /**Returns  the flag indicating whether the PMI would be created view independent 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateViewIndependent
            (
            );
            /**Sets  the flag indicating whether the PMI would be created view independent 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCreateViewIndependent
            (
                bool createViewIndependent /** create view independent */ 
            );
            /**Returns  the rectangular region width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double PmiRegionWidth
            (
            );
            /**Sets  the rectangular region width 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPmiRegionWidth
            (
                double width /** width */ 
            );
            /**Returns  the rectangular region height 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double PmiRegionHeight
            (
            );
            /**Sets  the rectangular region height 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPmiRegionHeight
            (
                double height /** height */ 
            );
            /**Returns  the circular/annular region outer diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double PmiRegionOuterDiameter
            (
            );
            /**Sets  the circular/annular region outer diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPmiRegionOuterDiameter
            (
                double outerDiameter /** outer diameter */ 
            );
            /**Returns  the circular/annular region inner diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double PmiRegionInnerDiameter
            (
            );
            /**Sets  the circular/annular region inner diameter 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPmiRegionInnerDiameter
            (
                double innerDiameter /** inner diameter */ 
            );
            /**Returns  the flag indicating whether to enable resize.  If true the resize command is enabled. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableResize
            (
            );
            /** 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnableResize
            (
                bool enableResize /** enable resize */ 
            );
            /**Returns  the flag indicating whether to resize on create 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ResizeOnCreate
            (
            );
            /** 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetResizeOnCreate
            (
                bool resizeOnCreate /** resize on create */ 
            );
            /**Returns  the flag indicating whether to resize on view save 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool ResizeOnViewSave
            (
            );
            /** 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetResizeOnViewSave
            (
                bool resizeOnViewSave /** resize on view save */ 
            );
            /**Returns  the resize method 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::PmiResizeMethod ResizeMethod
            (
            );
            /** 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetResizeMethod
            (
                NXOpen::Annotations::PmiResizeMethod resizeMethod /** resize method */ 
            );
            /**Returns  the flag indicating whether PMI support for geometry  sharing is available
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PmiSupportForGeometrySharing
            (
            );
            /** 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPmiSupportForGeometrySharing
            (
                bool pmiSupportForGeomSharing /** pmi support for geom sharing */ 
            );
            /**Returns  the PMI query dialog visibility from mb3 option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayPmiQueryDialogFromMb3
            (
            );
            /**Sets  the PMI query dialog visibility from mb3 option 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayPmiQueryDialogFromMb3
            (
                bool withDialog /** withdialog */ 
            );
            /**Returns  the value indicating precise option of PMI Effectivity for prime geometry
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DisplayPmiEffectivityMethod DisplayPmiEffectivityMethod
            (
            );
            /** 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : nx_pmi_effectivity ("NX PMI EFFECTIVITY") */
            public: void SetDisplayPmiEffectivityMethod
            (
                NXOpen::Annotations::DisplayPmiEffectivityMethod displayPmiEffectivityMethod /** display pmi effectivity method */ 
            );
            /**Returns  the value indicating precise option of PMI Effectivity for reference geometry
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DisplayPmiEffectivityMethod DisplayPmiEffectivityReferenceMethod
            (
            );
            /** 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : nx_pmi_effectivity ("NX PMI EFFECTIVITY") */
            public: void SetDisplayPmiEffectivityReferenceMethod
            (
                NXOpen::Annotations::DisplayPmiEffectivityMethod displayPmiEffectivityReferenceMethod /** display pmi effectivity reference method */ 
            );
            /**Returns  the flag indicating PMI associated objects components loaded for reference
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool DisplayPmiAssociatedComponentsLoadedForReference
            (
            );
            /** 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : nx_pmi_effectivity ("NX PMI EFFECTIVITY") */
            public: void SetDisplayPmiAssociatedComponentsLoadedForReference
            (
                bool displayPmiAssociatedComponentsLoadedForReference /** display pmi associated components loaded for reference */ 
            );
            /**Returns  the flag indicating the display of Effectivity Filtered PMI node in Part Navigator
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool DisplayEffectivityFilterNodesInPartNavigator
            (
            );
            /** 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : nx_pmi_effectivity ("NX PMI EFFECTIVITY") */
            public: void SetDisplayEffectivityFilterNodesInPartNavigator
            (
                bool displayEffectivityFilterNodesInPartNavigator /** display effectivity filter nodes in part navigator */ 
            );
            /**Returns  the flag indicating whether PMI support for lightweight section view assembly crosshatching option is available
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssemblyCrosshatching
            (
            );
            /** 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssemblyCrosshatching
            (
                bool assemblyCrosshatching /** assemblycrosshatching */ 
            );
            /**Returns  the flag indicating whether PMI support for lightweight section view restrict crosshatch angle option is available
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool RestrictCrosshatchAngle
            (
            );
            /** 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRestrictCrosshatchAngle
            (
                bool restrictCrosshatchAngle /** restrictcrosshatchangle */ 
            );
            /**Returns  the flag indicating whether PMI support for lightweight section view crosshatch adjacency tolerance is available
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double CrosshatchAdjacencyTolerance
            (
            );
            /** 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCrosshatchAdjacencyTolerance
            (
                double crosshatchAdjacencyTolerance /** crosshatchadjacencytolerance */ 
            );
            /**Returns  the option indicating whether plane is associative for Lightweight Section Views
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssociativityForLightweightSectionViews
            (
            );
            /** 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociativityForLightweightSectionViews
            (
                bool associativityOptionForLightweightSectionViews /** associativityoptionforlightweightsectionviews */ 
            );
            /**Returns  the starting letter for cutting plane symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CuttingPlaneSymbolStartingLetter
            (
            );
            /**Sets  the starting letter for cutting plane symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCuttingPlaneSymbolStartingLetter
            (
                const NXString & startingLetter /** startingletter */ 
            );
            /**Sets  the starting letter for cutting plane symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetCuttingPlaneSymbolStartingLetter
            (
                const char * startingLetter /** startingletter */ 
            );
            /**Returns  the section prefix for cutting plane symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CuttingPlaneSymbolSectionPrefix
            (
            );
            /**Sets  the section prefix for cutting plane symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCuttingPlaneSymbolSectionPrefix
            (
                const NXString & sectionPrefix /** sectionprefix */ 
            );
            /**Sets  the section prefix for cutting plane symbol 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetCuttingPlaneSymbolSectionPrefix
            (
                const char * sectionPrefix /** sectionprefix */ 
            );
            /**Returns  the cutting plane symbol shaded plane option
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CuttingPlaneSymbolShadedPlane
            (
            );
            /**Sets  the cutting plane symbol shaded plane option
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCuttingPlaneSymbolShadedPlane
            (
                bool shadedPlane /** shadedplane */ 
            );
            /**Returns  the cutting plane symbol color 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CuttingPlaneSymbolColor
            (
            );
            /**Sets  the cutting plane symbol color 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCuttingPlaneSymbolColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the orientation of the cutting plane symbol text plane with respect to arrow plane
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CuttingPlaneSymbolBuilder::TextPlaneRelativeArrow CuttingPlaneSymbolTextPlaneRelativeToArrow
            (
            );
            /**Sets  the orientation of the cutting plane symbol text plane with respect to arrow plane
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCuttingPlaneSymbolTextPlaneRelativeToArrow
            (
                NXOpen::Annotations::CuttingPlaneSymbolBuilder::TextPlaneRelativeArrow textPlaneRelativeArrow /** textplanerelativearrow */ 
            );
            /**Returns  the cutting plane symbol arrow length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double CuttingPlaneSymbolArrowLength
            (
            );
            /**Sets  the cutting plane symbol arrow length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCuttingPlaneSymbolArrowLength
            (
                double arrowLength /** arrowlength */ 
            );
            /**Returns  the Section View name prefix
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SectionViewNamePrefix
            (
            );
            /**Sets  the Section View name prefix
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSectionViewNamePrefix
            (
                const NXString & sectionViewNamePrefix /** sectionviewnameprefix */ 
            );
            /**Sets  the Section View name prefix
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetSectionViewNamePrefix
            (
                const char * sectionViewNamePrefix /** sectionviewnameprefix */ 
            );
            /**Returns  the cutting plane symbol arrow direction related to plane
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::CuttingPlaneSymbolBuilder::ArrowDirectionOption CuttingPlaneSymbolArrowDirection
            (
            );
            /**Sets  the cutting plane symbol arrow direction related to plane
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCuttingPlaneSymbolArrowDirection
            (
                NXOpen::Annotations::CuttingPlaneSymbolBuilder::ArrowDirectionOption arrowDirection /** arrowdirection */ 
            );
            /**Returns  the region boundary color 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * RegionBoundaryColor
            (
            );
            /**Sets  the region boundary color 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRegionBoundaryColor
            (
                NXOpen::NXColor * boundaryColor /** boundarycolor */ 
            );
            /**Returns  the region boundary font 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int RegionBoundaryFont
            (
            );
            /**Sets  the region boundary font 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRegionBoundaryFont
            (
                int boundaryFont /** boundaryfont */ 
            );
            /**Returns  the region boundary width 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int RegionBoundaryWidth
            (
            );
            /**Sets  the region boundary width 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRegionBoundaryWidth
            (
                int boundaryWidth /** boundarywidth */ 
            );
            /**Returns  the option indicating clip coplanar objects
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ClipCoplanarObjectsForLightweightSectionViews
            (
            );
            /**Sets  the option indicating clip coplanar objects
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetClipCoplanarObjectsForLightweightSectionViews
            (
                bool clipCoplanarObjectsOptionForLightweightSectionViews /** clipcoplanarobjectsoptionforlightweightsectionviews */ 
            );
            /**Returns  the option indicating clip wireframe objects
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ClipWireframeObjects
            (
            );
            /**Sets  the option indicating clip wireframe objects
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetClipWireframeObjects
            (
                bool clipWireframeObjectsOption /** clipwireframeobjectsoption */ 
            );
            /**Returns  the parallel to screen option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ParallelToScreen
            (
            );
            /**Sets  the parallel to screen option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetParallelToScreen
            (
                bool parallelToScreen /** paralleltoscreen */ 
            );
            /**Returns  the lock pan/zoom option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool LockSizeAndPosition
            (
            );
            /**Sets  the lock pan/zoom option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLockSizeAndPosition
            (
                bool lockSizeAndPosition /** locksizeandposition */ 
            );
            /** The parallel to screen enabled pmi type  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void GetParallelToScreenEnabledPmiTypes
            (
                std::vector<NXOpen::Annotations::PmiPreferences::PreferenceSymbolTypes> & parallelToScreenEnabledPmiTypes /** paralleltoscreenenabledpmitypes */ 
            );
            /** 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetParallelToScreenEnabledPmiTypes
            (
                const std::vector<NXOpen::Annotations::PmiPreferences::PreferenceSymbolTypes> & parallelToScreenEnabledPmiTypes /** paralleltoscreenenabledpmitypes */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
