#ifndef NXOpen_CAE_POSTSELECTIONENTITY_HXX_INCLUDED
#define NXOpen_CAE_POSTSELECTIONENTITY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostSelectionEntity.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostSelectionEntity.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostSelectionEntity;
    }
    namespace CAE
    {
        class PostSelectionEntityImpl;
        /**  @brief  This class has the information related to post selection entity.
            Not Each attribute of this class is relevent for all the purpose. The best way 
            To use this class is to first check if the attribute is set before using it, 
            if user is not sure.
             

          <br> To obtain an instance of this class use CAE::Post  <br> 
         <br>  Created in NX11.0.2.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostSelectionEntity : public NXOpen::TransientObject
        {
            private: PostSelectionEntityImpl * m_postselectionentity_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostSelectionEntity(void *ptr);
            /// \endcond 
            /**Returns  the node id selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int NodeId
            (
            );
            /**Sets  the node id selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNodeId
            (
                int nodeId /** nodeid */ 
            );
            /** Tells if Node label is set  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasNode
            (
            );
            /**Returns  the elem label selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int ElemId
            (
            );
            /**Sets  the elem label selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetElemId
            (
                int elemId /** elemid */ 
            );
            /** Tells if Element label is set  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasElem
            (
            );
            /**Returns  the edge id selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int EdgeId
            (
            );
            /**Sets  the edge id selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEdgeId
            (
                int edgeId /** edgeid */ 
            );
            /** Tells if Edge is set  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasEdge
            (
            );
            /**Returns  the face id selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int FaceId
            (
            );
            /**Sets  the face id selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFaceId
            (
                int faceId /** faceid */ 
            );
            /** Tells if Face is set  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasFace
            (
            );
            /**Returns  the super element id selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int SEId
            (
            );
            /**Sets  the super element id selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSEId
            (
                int seId /** seid */ 
            );
            /** Tells if Super Element id is set  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasSE
            (
            );
            /**Returns  the node label selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int SectorId
            (
            );
            /**Sets  the node label selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSectorId
            (
                int sectorId /** sectorid */ 
            );
            /** Tells if Sector is set  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasSector
            (
            );
            /**Returns  the rotation angle selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double RotationAngle
            (
            );
            /**Sets  the rotation angle selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetRotationAngle
            (
                double rotationAngle /** rotationangle */ 
            );
            /** Tells if Rotation Angle is set  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasRotationAngle
            (
            );
            /**Returns  the point selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Point3d Point
            (
            );
            /**Sets  the point selected 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPoint
            (
                const NXOpen::Point3d & point /** point */ 
            );
            /** Tells if Point is set  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HasPoint
            (
            );
            /** Frees the object from memory.  After this method is called,
                        it is illegal to use the object. In .NET, this method is automatically
                        called when the object is deleted by the garbage collector. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: virtual ~PostSelectionEntity();
            /** Deletes the selection entity. User must call @link TransientObject::Dispose TransientObject::Dispose@endlink  after calling this method. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void Delete
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
