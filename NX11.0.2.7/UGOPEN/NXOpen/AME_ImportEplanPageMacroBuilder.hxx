#ifndef NXOpen_AME_IMPORTEPLANPAGEMACROBUILDER_HXX_INCLUDED
#define NXOpen_AME_IMPORTEPLANPAGEMACROBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ImportEplanPageMacroBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_ImportEplanPageMacroBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ImportEplanPageMacroBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    class Builder;
    namespace AME
    {
        class _ImportEplanPageMacroBuilderBuilder;
        class ImportEplanPageMacroBuilderImpl;
        /** ImportEplanPageMacroBuilder  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateImportEplanPageMacroBuilder  NXOpen::AME::AMEManager::CreateImportEplanPageMacroBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ImportEplanPageMacroBuilder : public NXOpen::Builder
        {
            private: ImportEplanPageMacroBuilderImpl * m_importeplanpagemacrobuilder_impl;
            private: friend class  _ImportEplanPageMacroBuilderBuilder;
            protected: ImportEplanPageMacroBuilder();
            public: ~ImportEplanPageMacroBuilder();
            /**Returns  the selected engineering object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * SelectedAspectNode
            (
            );
            /**Returns  the eplan page macro template file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString MacroFile
            (
            );
            /**Sets  the eplan page macro template file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMacroFile
            (
                const NXString & macroFile /** macrofile */ 
            );
            /**Sets  the eplan page macro template file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetMacroFile
            (
                const char * macroFile /** macrofile */ 
            );
            /**Returns  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetName
            (
                const char * name /** name */ 
            );
            /** Imports an eplan page macro 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ImportMacro
            (
                const std::vector<NXString> & deviceListXmlParts /** devicelistxmlparts */ 
            );
            /**Returns  the description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Description
            (
            );
            /**Sets  the description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the macro type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int MacroType
            (
            );
            /**Sets  the macro type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMacroType
            (
                int macroType /** macrotype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
