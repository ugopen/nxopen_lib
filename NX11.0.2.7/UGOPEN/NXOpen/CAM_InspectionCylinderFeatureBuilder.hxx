#ifndef NXOpen_CAM_INSPECTIONCYLINDERFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONCYLINDERFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionCylinderFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionCylinderFeatureBuilder.hxx>
#include <NXOpen/CAM_InspectionOperationEnums.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionCylinderFeatureBuilder;
    }
    namespace CAM
    {
        class InspectionAxisExtrapolationModeBuilder;
    }
    namespace CAM
    {
        class InspectionCylinderCircleFitModeBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Direction;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionCylinderFeatureBuilderBuilder;
        class InspectionCylinderFeatureBuilderImpl;
        /** Represents a CMM Inspection Cylinder Feature builder  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionCylinderFeatureBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionCylinderFeatureBuilder @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionCylinderFeatureBuilder : public NXOpen::CAM::OperationBuilder
        {
            private: InspectionCylinderFeatureBuilderImpl * m_inspectioncylinderfeaturebuilder_impl;
            private: friend class  _InspectionCylinderFeatureBuilderBuilder;
            protected: InspectionCylinderFeatureBuilder();
            public: ~InspectionCylinderFeatureBuilder();
            /**Returns  the selected cylinder 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectedCylinder
            (
            );
            /**Returns  the selected cylinder geometry 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectedGeometry
            (
            );
            /**Returns  the cylinders axis vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * AxisVector
            (
            );
            /**Sets  the cylinders axis vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAxisVector
            (
                NXOpen::Direction * axisVector /** axisvector */ 
            );
            /**Returns  the coordinate system reference type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationCsysreferencetypes CsysReferenceType
            (
            );
            /**Sets  the coordinate system reference type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysReferenceType
            (
                NXOpen::CAM::CamInspectionOperationCsysreferencetypes csysReferenceType /** csysreferencetype */ 
            );
            /**Returns  the inspection feature inner/outer type (hole/pin) 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationInneroutertypes InnerOuterType
            (
            );
            /**Sets  the inspection feature inner/outer type (hole/pin) 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInnerOuterType
            (
                NXOpen::CAM::CamInspectionOperationInneroutertypes innerOuterType /** inneroutertype */ 
            );
            /**Returns  the cylinder diameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double Diameter
            (
            );
            /**Sets  the cylinder diameter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the extent type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationExtenttypes ExtentType
            (
            );
            /**Sets  the extent type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetExtentType
            (
                NXOpen::CAM::CamInspectionOperationExtenttypes extentType /** extenttype */ 
            );
            /**Returns  the length of the cylinder 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double Length
            (
            );
            /**Sets  the length of the cylinder 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLength
            (
                double length /** length */ 
            );
            /**Returns  the base point X coordinate 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double BasePointX
            (
            );
            /**Sets  the base point X coordinate 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetBasePointX
            (
                double basePointX /** basepointx */ 
            );
            /**Returns  the base point Y coordinate 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double BasePointY
            (
            );
            /**Sets  the base point Y coordinate 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetBasePointY
            (
                double basePointY /** basepointy */ 
            );
            /**Returns  the base point Z coordinate 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double BasePointZ
            (
            );
            /**Sets  the base point Z coordinate 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetBasePointZ
            (
                double basePointZ /** basepointz */ 
            );
            /**Returns  the axis direction vector I component 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double AxisDirectionI
            (
            );
            /**Sets  the axis direction vector I component 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAxisDirectionI
            (
                double axisDirectionI /** axisdirectioni */ 
            );
            /**Returns  the axis direction vector J component 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double AxisDirectionJ
            (
            );
            /**Sets  the axis direction vector J component 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAxisDirectionJ
            (
                double axisDirectionJ /** axisdirectionj */ 
            );
            /**Returns  the axis direction vector K component 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double AxisDirectionK
            (
            );
            /**Sets  the axis direction vector K component 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAxisDirectionK
            (
                double axisDirectionK /** axisdirectionk */ 
            );
            /**Returns  the name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetName
            (
                const char * name /** name */ 
            );
            /** Updates cylinder inspection feature characteristic parameters based on selected geometry 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParams
            (
            );
            /** Flips the cylinder inspection feature axis direction vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipAxisDirection
            (
            );
            /** Updates cylinder inspection feature axis direction vector based on selected vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateAxisDirection
            (
                const NXOpen::Vector3d & vector /** vector */ 
            );
            /**Returns  the Cylinder Circle Fitting Mode Builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionCylinderCircleFitModeBuilder * CylinderCircleFitModeBuilder
            (
            );
            /**Returns  the Axis Extrapolation Mode Builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAxisExtrapolationModeBuilder * AxisExtrapolationModeBuilder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
