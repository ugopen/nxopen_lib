#ifndef NXOpen_CAE_BOUNDINGVOLUMEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_BOUNDINGVOLUMEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_BoundingVolumeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BoundingVolumeBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class BoundingVolumeBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Expression;
    class Point;
    namespace CAE
    {
        class _BoundingVolumeBuilderBuilder;
        class BoundingVolumeBuilderImpl;
        /** Represents a @link CAE::BoundingVolume CAE::BoundingVolume@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::CAE::BoundingVolumeCollection::CreateBuilder  NXOpen::CAE::BoundingVolumeCollection::CreateBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CylinderHeight.Value </td> <td> 
         
        5 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        Diameter.Value </td> <td> 
         
        5 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        Height.Value </td> <td> 
         
        5 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        Length.Value </td> <td> 
         
        5 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        Width.Value </td> <td> 
         
        5 (millimeters part), 2 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  BoundingVolumeBuilder : public NXOpen::Builder
        {
            /** the bounding volume creation types */
            public: enum Types
            {
                TypesBoxCsysAndEdgeLengths/** box csys and edge lengths */ ,
                TypesBoxTwoDiagonalPoints/** box two diagonal points */ ,
                TypesBoxTwoPointsOnViewPlane/** box two points on view plane */ ,
                TypesCylinderCsysDiameterAndHeight/** cylinder csys diameter and height */ ,
                TypesCylinderTwoPointsAndDiameter/** cylinder two points and diameter */ ,
                TypesCylinderOriginAndDiameterOnViewPlane/** cylinder origin and diameter on view plane */ ,
                TypesSphereOriginAndDiameter/** sphere origin and diameter */ 
            };

            private: BoundingVolumeBuilderImpl * m_boundingvolumebuilder_impl;
            private: friend class  _BoundingVolumeBuilderBuilder;
            protected: BoundingVolumeBuilder();
            public: ~BoundingVolumeBuilder();
            /**Returns  the center csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CenterCsys
            (
            );
            /**Sets  the center csys 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCenterCsys
            (
                NXOpen::CoordinateSystem * centerCsys /** centercsys */ 
            );
            /**Returns  the center point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * CenterPoint
            (
            );
            /**Sets  the center point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCenterPoint
            (
                NXOpen::Point * centerPoint /** centerpoint */ 
            );
            /**Returns  the target point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TargetPoint
            (
            );
            /**Sets  the target point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTargetPoint
            (
                NXOpen::Point * targetPoint /** targetpoint */ 
            );
            /**Returns  the length 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Length
            (
            );
            /**Returns  the width 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Width
            (
            );
            /**Returns  the height 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the diameter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Diameter
            (
            );
            /**Returns  the cylinder height 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CylinderHeight
            (
            );
            /**Returns  the base center 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * BaseCenter
            (
            );
            /**Sets  the base center 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetBaseCenter
            (
                NXOpen::Point * baseCenter /** basecenter */ 
            );
            /**Returns  the base center1 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TopCenter
            (
            );
            /**Sets  the base center1 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTopCenter
            (
                NXOpen::Point * topCenter /** topcenter */ 
            );
            /**Returns  the type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::BoundingVolumeBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetType
            (
                NXOpen::CAE::BoundingVolumeBuilder::Types type /** type */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
