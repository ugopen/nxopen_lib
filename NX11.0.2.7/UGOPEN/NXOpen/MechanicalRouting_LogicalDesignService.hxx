#ifndef NXOpen_MECHANICALROUTING_LOGICALDESIGNSERVICE_HXX_INCLUDED
#define NXOpen_MECHANICALROUTING_LOGICALDESIGNSERVICE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MechanicalRouting_LogicalDesignService.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_mechanicalrouting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MechanicalRouting
    {
        class LogicalDesignService;
    }
    namespace MechanicalRouting
    {
        class RoutingManager;
    }
    namespace Assemblies
    {
        class Component;
    }
    class NXObject;
    namespace Routing
    {
        class Port;
    }
    namespace MechanicalRouting
    {
        class LogicalDesignServiceImpl;
        /** Represents a @link NXOpen::MechanicalRouting::LogicalDesignService NXOpen::MechanicalRouting::LogicalDesignService@endlink  object.
                Uses the @link MechanicalRouting::RoutingManager::LogicalDesignService MechanicalRouting::RoutingManager::LogicalDesignService@endlink  to obtain
                an instance of this class.
              <br> To obtain an instance of this class, refer to @link NXOpen::MechanicalRouting::RoutingManager  NXOpen::MechanicalRouting::RoutingManager @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MECHANICALROUTINGEXPORT  LogicalDesignService
        {
            /** The status returned from checking the logical design mapping to physical design. */
            public: enum MappingStatus
            {
                MappingStatusPass/** pass */ ,
                MappingStatusOutOfDate/** out of date */ ,
                MappingStatusUnloaded/** unloaded */ ,
                MappingStatusFail/** fail */ ,
                MappingStatusUnknown/** unknown */ 
            };

            private: LogicalDesignServiceImpl * m_logicaldesignservice_impl;
            private: NXOpen::MechanicalRouting::RoutingManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit LogicalDesignService(NXOpen::MechanicalRouting::RoutingManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~LogicalDesignService();
            /** Assigns a 3D @link Routing::Port Routing::Port@endlink  mapping to a logical port object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void Assign3DPortToLogicalPort
            (
                NXOpen::NXObject * logicalPort /** The logical port.*/,
                NXOpen::Routing::Port * physicalPort /** The 3D port. */
            );
            /** Unassigns the 3D ports from the logical port object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void Unassign3DPortsFromLogicalPort
            (
                NXOpen::Assemblies::Component * container /** The component of the subset in the workset. */,
                NXOpen::NXObject * logicalPort /** The logical port.*/
            );
            /** Returns the mapping status from the logical design to physical design.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::LogicalDesignService::MappingStatus GetMappingStatus
            (
                NXOpen::NXObject * routingObject /** routingobject */ ,
                NXOpen::Assemblies::Component * container /** container */ 
            );
            /** Returns the mapping status message from logical design to physical design.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString GetMappingStatusMessage
            (
                NXOpen::NXObject * routingObject /** routingobject */ ,
                NXOpen::Assemblies::Component * container /** container */ 
            );
            /** Assigns a list of @link Assemblies::Component Assemblies::Component@endlink  mapping to a logical connection object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignComponentsToLogicalConnection
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** A list of Components to assign to the logical connection. */,
                NXOpen::NXObject * logicalConnection /** The logical connection object. */
            );
            /** Unassigns all the components currently assigned to this logical connection object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UnassignComponentsToLogicalConnection
            (
                NXOpen::Assemblies::Component * container /** A component that represents the container that holds the Routing design. E.g, a subset in a workset */,
                NXOpen::NXObject * logicalConnection /** The logical connection object.*/
            );
            /** Assigns a component @link Assemblies::Component Assemblies::Component@endlink  to a logical equipment object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignComponentToLogicalEquipment
            (
                NXOpen::NXObject * logicalEquipment /** The logical equipment object.*/,
                NXOpen::Assemblies::Component * component /** The @link Assemblies::Component Assemblies::Component@endlink  represents a 3D routing equipment. */
            );
            /** Unassigns all the components that are currently assigned to the given logical equipment object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UnassignComponentToLogicalEquipment
            (
                NXOpen::Assemblies::Component * container /** A component that represents the container that holds the Routing design */,
                NXOpen::NXObject * logicalEquipment /** The logical equipment object.*/
            );
            /** Gets the @link NXOpen::PLAS::Run NXOpen::PLAS::Run@endlink s that are included in a given @link Assemblies::Component Assemblies::Component@endlink  that represents a container for the Routing design, such as a subset in a workset  @return  The Runs included in the container 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::NXObject *> GetRunsInContainer
            (
                NXOpen::Assemblies::Component * container /** A component that represents the container that holds the Routing design, such as a subset in a workset */
            );
            /** Makes a @link NXOpen::PLAS::Run NXOpen::PLAS::Run@endlink  active in given @link Assemblies::Component Assemblies::Component@endlink  that represents a container for the Routing design, such as a subset in Workset 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void MakeRunActive
            (
                NXOpen::Assemblies::Component * container /** A component that represents the container that holds the Routing design, such as a subset in a workset */,
                NXOpen::NXObject * run /** The Run that needs to be made active */
            );
            /** Gets a @link NXOpen::PLAS::Run NXOpen::PLAS::Run@endlink  that is currently active in given @link Assemblies::Component Assemblies::Component@endlink  that represents a container for the Routing design, such as a subset in a workset  @return  The currently active Run. Can be null if no active Run is present 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::NXObject * GetActiveRun
            (
                NXOpen::Assemblies::Component * container /** A component that represents the container that holds the Routing design such as a subset in a workset */
            );
            /** Ensures that the logical model is loaded for all the Runs included in the given @link Assemblies::Component Assemblies::Component@endlink  that represents a container for the Routing design, such as a subset in a workset 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void EnsureLogicalModelIsLoaded
            (
                NXOpen::Assemblies::Component * container /** A component that represents the container that holds the Routing design such as a subset in a workset */
            );
            /** Reassigns all the components from a source logical connection object to a destination logical connection object or run object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ReassignComponentsFromLogicalConnection
            (
                NXOpen::Assemblies::Component * container /** The component of the subset in the workset. */,
                NXOpen::NXObject * sourceLogicalConnection /** The source logical connection object.*/,
                NXOpen::NXObject * destinationObject /** The destination logical connection object or run object.*/
            );
            /** Reassigns a list of @link Assemblies::Component Assemblies::Component@endlink  mapping to a destination run object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ReassignComponentsToRun
            (
                const std::vector<NXOpen::Assemblies::Component *> & components /** A list of Components to reassign to the run. */,
                NXOpen::NXObject * run /** The run object. */
            );
            /** Deletes run objects. 
                        NOTE: only the empty run object can be deleted.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DeleteRuns
            (
                const std::vector<NXOpen::NXObject *> & runs /** The run objects. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
