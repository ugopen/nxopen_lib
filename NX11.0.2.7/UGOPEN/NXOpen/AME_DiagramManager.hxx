#ifndef NXOpen_AME_DIAGRAMMANAGER_HXX_INCLUDED
#define NXOpen_AME_DIAGRAMMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_DiagramManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEEngObject.hxx>
#include <NXOpen/AME_AMEPort.hxx>
#include <NXOpen/AME_FragmentObject.hxx>
#include <NXOpen/AME_PageObject.hxx>
#include <NXOpen/Diagramming_Connection.hxx>
#include <NXOpen/Diagramming_Node.hxx>
#include <NXOpen/Diagramming_Sheet.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class DiagramManager;
    }
    class Session;
    namespace AME
    {
        class AMEEngObject;
    }
    namespace AME
    {
        class AMEPort;
    }
    namespace AME
    {
        class FragmentObject;
    }
    namespace AME
    {
        class PageObject;
    }
    namespace Diagramming
    {
        class Connection;
    }
    namespace Diagramming
    {
        class Node;
    }
    namespace Diagramming
    {
        class Sheet;
    }
    namespace Diagramming
    {
        class SheetElement;
    }
    class NXObject;
    namespace AME
    {
        class DiagramManagerImpl;
        /** Represents an object that manages sheet elements.  <br> This object does not need a creator.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  DiagramManager
        {
            private: DiagramManagerImpl * m_diagrammanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit DiagramManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static DiagramManager* theDiagramManager;
            /** Returns the DiagramManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static DiagramManager* GetDiagramManager(NXOpen::Session *owner);
            public: ~DiagramManager();
            /** Create Topology Diagram Node  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Node * CreateTopologyNode
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::AMEEngObject * engObject /** engobject */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ 
            );
            /** Create Schematic Diagram Node  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Node * CreateSchematicNode
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::AMEEngObject * engObject /** engobject */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ ,
                const NXString & symbolVariantName /** symbolvariantname */ 
            );
            /** Create Schematic Diagram Node  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::Diagramming::Node * CreateSchematicNode
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::AMEEngObject * engObject /** engobject */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ ,
                const char * symbolVariantName /** symbolvariantname */ 
            );
            /** Scale to default
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ScaleToDefault
            (
                NXOpen::Diagramming::Node * node /** node */ 
            );
            /** Delete Sheet Element
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteSheetElements
            (
                const std::vector<NXOpen::Diagramming::SheetElement *> & elements /** elements */ 
            );
            /** Creating or Updating fragment Sheet Bounding Box in Template 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CreateOrUpdateFragmentSheet
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ 
            );
            /** Cut schematic object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CutSchematicObjects
            (
                const std::vector<NXOpen::Diagramming::SheetElement *> & elements /** elements */ 
            );
            /** Copy schematic object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CopySchematicObjects
            (
                const std::vector<NXOpen::Diagramming::SheetElement *> & elements /** elements */ 
            );
            /** Paste schematic object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PasteSchematicObjects
            (
                NXOpen::AME::PageObject * page /** page */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ 
            );
            /** Remove plug from object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemovePlugPort
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ 
            );
            /** Get Diagramming Sheet's Part From Page  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * GetSheetPartFromPage
            (
                NXOpen::AME::PageObject * pageObject /** pageobject */ 
            );
            /** Create Fragment Diagram Node Copy @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Node * CreateFragmentNodeCopy
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::FragmentObject * fragment /** fragment */ 
            );
            /** Place Copied Fragment on page
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PlaceCopiedFragmentOnPage
            (
                NXOpen::AME::FragmentObject * fragment /** fragment */ ,
                NXOpen::AME::PageObject * page /** page */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ 
            );
            /** Update node location
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateNodeLocation
            (
                NXOpen::Diagramming::Node * node /** node */ ,
                double cordinateX /** cordinatex */ ,
                double cordinateY /** cordinatey */ 
            );
            /** Create Diagramming Connection  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Connection * CreateConnection
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::AMEPort * startPort /** startport */ ,
                NXOpen::AME::AMEPort * endPort /** endport */ ,
                const std::vector<NXOpen::Point2d> & p2dBendPoints /** p2dbendpoints */ 
            );
            /** Delete Connections 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteConnections
            (
                const std::vector<NXOpen::Diagramming::Connection *> & elements /** elements */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
