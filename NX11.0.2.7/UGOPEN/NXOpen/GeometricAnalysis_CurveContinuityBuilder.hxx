#ifndef NXOpen_GEOMETRICANALYSIS_CURVECONTINUITYBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_CURVECONTINUITYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_CurveContinuityBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricAnalysis_CurveContinuityBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class CurveContinuityBuilder;
    }
    class Builder;
    class Expression;
    class SelectDisplayableObjectList;
    class SelectNXObject;
    namespace GeometricAnalysis
    {
        class _CurveContinuityBuilderBuilder;
        class CurveContinuityBuilderImpl;
        /** Represents a curve continuity builder  <br> To create a new instance of this class, use @link NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateCurveContinuityBuilder  NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateCurveContinuityBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AngularThreshold.Value </td> <td> 
         
        15.0 </td> </tr> 

        <tr><td> 
         
        ContinuityType </td> <td> 
         
        Multicurve </td> </tr> 

        <tr><td> 
         
        DistanceThreshold.Value </td> <td> 
         
        10.0 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        EndPointX </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EndPointY </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EndPointZ </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        G0Check </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        G0Check2 </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        G0Tolerance </td> <td> 
         
        0.01 </td> </tr> 

        <tr><td> 
         
        G1Check </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        G1Check2 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        G1Tolerance </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        G2Check </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        G2Check2 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        G2Tolerance </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        G3Check </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        G3Check2 </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        G3Tolerance </td> <td> 
         
        0.5 </td> </tr> 

        <tr><td> 
         
        ShowDeviation </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ShowMarkup </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ShowMaximum </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ShowMinimum </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ShowNeedle </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ShowOutOfTolerance </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  CurveContinuityBuilder : public NXOpen::Builder
        {
            /** Define curve continuity types */
            public: enum Type
            {
                TypeCurvetoObject/** curve to object */,
                TypeMulticurve/** multicurve */
            };

            private: CurveContinuityBuilderImpl * m_curvecontinuitybuilder_impl;
            private: friend class  _CurveContinuityBuilderBuilder;
            protected: CurveContinuityBuilder();
            public: ~CurveContinuityBuilder();
            /**Returns  the select curve 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectCurve
            (
            );
            /**Returns  the select object 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectObject
            (
            );
            /**Returns  the end point x value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double EndPointX
            (
            );
            /**Sets  the end point x value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetEndPointX
            (
                double endPointX /** endpointx */ 
            );
            /**Returns  the end point y value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double EndPointY
            (
            );
            /**Sets  the end point y value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetEndPointY
            (
                double endPointY /** endpointy */ 
            );
            /**Returns  the end point z value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double EndPointZ
            (
            );
            /**Sets  the end point z value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetEndPointZ
            (
                double endPointZ /** endpointz */ 
            );
            /**Returns  the G0 check 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool G0Check
            (
            );
            /**Sets  the G0 check 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG0Check
            (
                bool g0Check /** g0check */ 
            );
            /**Returns  the G1 check 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool G1Check
            (
            );
            /**Sets  the G1 check 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG1Check
            (
                bool g1Check /** g1check */ 
            );
            /**Returns  the G2 check 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool G2Check
            (
            );
            /**Sets  the G2 check 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG2Check
            (
                bool g2Check /** g2check */ 
            );
            /**Returns  the G3 check 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool G3Check
            (
            );
            /**Sets  the G3 check 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG3Check
            (
                bool g3Check /** g3check */ 
            );
            /**Returns  the show needle 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowNeedle
            (
            );
            /**Sets  the show needle 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetShowNeedle
            (
                bool showNeedle /** showneedle */ 
            );
            /**Returns  the curve continuity type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::CurveContinuityBuilder::Type ContinuityType
            (
            );
            /**Sets  the curve continuity type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetContinuityType
            (
                NXOpen::GeometricAnalysis::CurveContinuityBuilder::Type continuityType /** continuitytype */ 
            );
            /**Returns  the multiple curve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * MultiCurve
            (
            );
            /**Returns  the G0 check for multicurve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool G0Check2
            (
            );
            /**Sets  the G0 check for multicurve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG0Check2
            (
                bool g0Check2 /** g0check2 */ 
            );
            /**Returns  the G1 check for multicurve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool G1Check2
            (
            );
            /**Sets  the G1 check for multicurve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG1Check2
            (
                bool g1Check2 /** g1check2 */ 
            );
            /**Returns  the G2 check for multicurve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool G2Check2
            (
            );
            /**Sets  the G2 check for multicurve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG2Check2
            (
                bool g2Check2 /** g2check2 */ 
            );
            /**Returns  the G3 check for multicurve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool G3Check2
            (
            );
            /**Sets  the G3 check for multicurve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG3Check2
            (
                bool g3Check2 /** g3check2 */ 
            );
            /**Returns  the show tolerance markup 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ShowMarkup
            (
            );
            /**Sets  the show tolerance markup 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetShowMarkup
            (
                bool showMarkup /** showmarkup */ 
            );
            /**Returns  the show out of tolerance only 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ShowOutOfTolerance
            (
            );
            /**Sets  the show out of tolerance only 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetShowOutOfTolerance
            (
                bool showOutOfTolerance /** showoutoftolerance */ 
            );
            /**Returns  the show deviation label 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ShowDeviation
            (
            );
            /**Sets  the show deviation label 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetShowDeviation
            (
                bool showDeviation /** showdeviation */ 
            );
            /**Returns  the show minimum label 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ShowMinimum
            (
            );
            /**Sets  the show minimum label 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetShowMinimum
            (
                bool showMinimum /** showminimum */ 
            );
            /**Returns  the show maximum label 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool ShowMaximum
            (
            );
            /**Sets  the show maximum label 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetShowMaximum
            (
                bool showMaximum /** showmaximum */ 
            );
            /**Returns  the distance threshold 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DistanceThreshold
            (
            );
            /**Returns  the angular threshold 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AngularThreshold
            (
            );
            /**Returns  the g0 tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double G0Tolerance
            (
            );
            /**Sets  the g0 tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG0Tolerance
            (
                double g0Tolerance /** g0tolerance */ 
            );
            /**Returns  the g1 tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double G1Tolerance
            (
            );
            /**Sets  the g1 tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG1Tolerance
            (
                double g1Tolerance /** g1tolerance */ 
            );
            /**Returns  the g2 tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double G2Tolerance
            (
            );
            /**Sets  the g2 tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG2Tolerance
            (
                double g2Tolerance /** g2tolerance */ 
            );
            /**Returns  the g3 tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double G3Tolerance
            (
            );
            /**Sets  the g3 tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void SetG3Tolerance
            (
                double g3Tolerance /** g3tolerance */ 
            );
            /**Returns  the location for dynamic label 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * DynamicLabel
            (
            );
            /** Prepare to toggle deviation label 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : gateway ("UG GATEWAY") */
            public: void ResetShowDeviation
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
