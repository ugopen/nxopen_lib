#ifndef NXOpen_MODELINGVIEWHIGHQUALITYIMAGE_HXX_INCLUDED
#define NXOpen_MODELINGVIEWHIGHQUALITYIMAGE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModelingViewHighQualityImage.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_SessionVisualizationHighQualityImage.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ModelingViewHighQualityImage;
    class ModelingView;
    class ModelingViewHighQualityImageImpl;
    /** Represents the properties and methods for generating a High Quality Image
    of a Modeling View  <br> To obtain an instance of this class, refer to @link NXOpen::ModelingView  NXOpen::ModelingView @endlink  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ModelingViewHighQualityImage
    {
        /** Describes the method to be used to generate a High Quality Image */
        public: enum ShadeMethod
        {
            ShadeMethodFlat/** The fastest shading method.  Each facet
                                                                                           is assigned a uniform color. */,
            ShadeMethodGouraud/** Provides smooth interpolated colors.
                                                                                           Not quite as fast as Flat shading. */,
            ShadeMethodPhong/** Provides smoother highlights than Gouraud shading,
                                                                                           but otherwise supports the same level of functionality. */,
            ShadeMethodImproved/** Shading with textures material parameters highlights and shadows.
                                                                                           imilar quality to photo-realistic but significantly faster. */,
            ShadeMethodPreview/** An improvement over the Improved method. Preview adds
                                                                                           support for transparency without the requirement to
                                                                                           also anti-alias the image. */,
            ShadeMethodPhotoRealistic/** All the features of the Improved method, plus support for
                                                                                           anti-aliasing and transparency. Images shaded with this mode
                                                                                           could take two to three times longer to render than those
                                                                                           using the Improved method. */,
            ShadeMethodRayTraced/** Produces photo-realistic images generated with ray tracing.
                                                                                           This method is slower than photo-realistic, but it correctly
                                                                                           anti-aliases, or renders, textures. */,
            ShadeMethodRayTracedFfa/** Same as the Ray Traced option, but with
                                                                                           Feature Following Anti-aliasing. */,
            ShadeMethodRadiosity/** An iterative light processing method where indirect lighting
                                                                                           in a scene is derived from direct light bouncing off of surfaces
                                                                                           before an image is rendered.  Use this method when physically
                                                                                           accurate lighting is required for your modeled scene. */,
            ShadeMethodHybridRadiosity/** Uses standard rendering techniques to calculate direct lighting
                                                                                           together with radiosity processing for indirect lighting for
                                                                                           image rendering.  Use this method over Radiosity when precise
                                                                                           direct lighting effects are also required.*/
        };

        /** Describes the output format of the High Quality Image to be generated */
        public: enum FormatType
        {
            FormatTypeRasterImage/** A normal single raster image */,
            FormatTypeQtvrPanorama/** Quick Time Virtual Reality panoramic movie, which is a set of images
                                                                                           from a fixed viewpoint.  The viewer can look in all directions. */,
            FormatTypeQtvrObjectLow/** Quick Time Virtual Reality object movie, which is a set of image of an
                                                                                           object in different rotations.  The viewer can rotate the object to look at it
                                                                                           in any orientation.  A low number of frames is generated. */,
            FormatTypeQtvrObjectHigh/** Quick Time Virtual Reality object movie , which is a set of image of an
                                                                                           object in different rotations.  The viewer can rotate the object to look at it
                                                                                           in any orientation.  A high number of frames is generated. */
        };

        /** Describes the technique to be used when generating the High Quality Image */
        public: enum DisplayTechniqueType
        {
            DisplayTechniqueTypeRgbPlusNoise/** The RGB algorithm is augmented with the addition of
                                                                                                    random noise to the initial RGB values before the
                                                                                                    dither takes place. */,
            DisplayTechniqueTypeFsRgb/** The pixel conversion process uses the Floyd-Steinberg dither
                                                                                                    algorithm to distribute the color error across the picture.
                                                                                                    This is a recommended mode for 8 bit plane display devices. */,
            DisplayTechniqueTypeFsRgbPlusNoise/** The Floyd-Steinberg algorithm is augmented with the addition
                                                                                                    of random noise to the initial RGB values before the dither
                                                                                                    takes place. For some images this method avoids artifacts
                                                                                                    that can occur using the FS RGB method. */,
            DisplayTechniqueTypeMonochrome/** Pixels are converted to black and white and dithered using
                                                                                                    the Floyd-Steinberg algorithm. This mode is useful
                                                                                                    on 1 bit display devices. */,
            DisplayTechniqueTypeGrayScale/** Each pixel is converted to a gray level using the NTSC color
                                                                                                    to gray scale conversion. */,
            DisplayTechniqueTypeNearestRgb/** Conversion is to the nearest RGB value in the color lookup table. */,
            DisplayTechniqueTypeOrderedDither/** A color dither matrix screens pixel colors. This is a trade of
                                                                                                    color resolution for screen resolution. This method is faster
                                                                                                    then the Floyd-Steinberg dither methods but tends to introduce
                                                                                                    a noticeable pattern in the output image. */,
            DisplayTechniqueTypeTcPlusNoise/** Random noise is added to each pixel where the noise is
                                                                                                    specifically tailored for true color display devices. */
        };

        private: ModelingViewHighQualityImageImpl * m_modelingviewhighqualityimage_impl;
        private: NXOpen::ModelingView* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ModelingViewHighQualityImage(NXOpen::ModelingView *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ModelingViewHighQualityImage();
        /**Returns  the display technique to use for the generation of the High Quality Image. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ModelingViewHighQualityImage::DisplayTechniqueType DisplayTechnique
        (
        );
        /**Sets  the display technique to use for the generation of the High Quality Image. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDisplayTechnique
        (
            NXOpen::ModelingViewHighQualityImage::DisplayTechniqueType displayTechnique /** display technique */ 
        );
        /**Returns  the quality of the facets of the High Quality Image. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double FacetsQuality
        (
        );
        /**Sets  the quality of the facets of the High Quality Image. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFacetsQuality
        (
            double facetsQuality /** In range 0.1 [smooth] to 2.0 [coarse] */
        );
        /**Returns  the format to use for the generation of the High Quality Image. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ModelingViewHighQualityImage::FormatType Format
        (
        );
        /**Sets  the format to use for the generation of the High Quality Image. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFormat
        (
            NXOpen::ModelingViewHighQualityImage::FormatType format /** format */ 
        );
        /**Returns  the method to use for the generation of the High Quality Image. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ModelingViewHighQualityImage::ShadeMethod Method
        (
        );
        /**Sets  the method to use for the generation of the High Quality Image. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMethod
        (
            NXOpen::ModelingViewHighQualityImage::ShadeMethod method /** method */ 
        );
        /**Returns  the setting for whether the High Quality Image is to contain shadows 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool Shadows
        (
        );
        /**Sets  the setting for whether the High Quality Image is to contain shadows 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetShadows
        (
            bool generateShadows /** generate shadows */ 
        );
        /**Returns  the setting for whether the High Quality Image is to use IBL 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool UseIbl
        (
        );
        /**Sets  the setting for whether the High Quality Image is to use IBL 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUseIbl
        (
            bool useIbl /** When true, use image-based lighting in lieu of individual lights for HQI's */
        );
        /** Generates a high qualilty image of a view based on the previously
                defined shading parameters for the view.
                Currently the given view must be the work view.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Generate
        (
        );
        /** Saves the currently displayed high qualilty image of a view
                to a file.
                Currently the given view must be the work view.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Save
        (
            const NXString & imageFileName /** File name for the saved image.  This may
                                                          *  include an extension, which may be .tif,
                                                          *  .jpg, .gif or .wrl.  If no extension is
                                                          *  provided, or if the extension is invalid,
                                                          *  a .tif file will be created */,
            bool compressImage /** Should the image file be compressed? */
        );
        /** Saves the currently displayed high qualilty image of a view
                to a file.
                Currently the given view must be the work view.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void Save
        (
            const char * imageFileName /** File name for the saved image.  This may
                                                          *  include an extension, which may be .tif,
                                                          *  .jpg, .gif or .wrl.  If no extension is
                                                          *  provided, or if the extension is invalid,
                                                          *  a .tif file will be created */,
            bool compressImage /** Should the image file be compressed? */
        );
        /** Erases the previously generated high qualilty image of a view.
                Currently the given view must be the work view.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Erase
        (
        );
        /** Plots the previously generated high qualilty image of a view.
                Currently the given view must be the work view.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Plot
        (
            NXOpen::Preferences::SessionVisualizationHighQualityImage::ResolutionType resolution /** The resolution for the plot */,
            int dotsPerInch /** Used only when resolution is ...user_defined */,
            NXOpen::Preferences::SessionVisualizationHighQualityImage::PlotQualityType plotQuality /** The quality level for the plot */,
            const NXString & plotFileName /** Full path name for the plot file to create */
        );
        /** Plots the previously generated high qualilty image of a view.
                Currently the given view must be the work view.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void Plot
        (
            NXOpen::Preferences::SessionVisualizationHighQualityImage::ResolutionType resolution /** The resolution for the plot */,
            int dotsPerInch /** Used only when resolution is ...user_defined */,
            NXOpen::Preferences::SessionVisualizationHighQualityImage::PlotQualityType plotQuality /** The quality level for the plot */,
            const char * plotFileName /** Full path name for the plot file to create */
        );
        /** Shows information about the last image rendered.  The information is
                what is shown by the Information button on the High Quality Image
                dialog.  It is displayed in the listing window.
                 <br>  If no image has been rendered in this session, the information shown
                is meaningless, and so this method should not be used unless an image
                has been rendered in the session.  <br> 
                 <br>  Currently the input modeling_view is not used in this function, as the
                information is returned for the last image regardless of which view it was
                rendered for.  This might change in the future.  <br> 
                 <br>  Internal mode only.  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void ShowImageInformation
        (
        );
        /** Get information about the last image rendered.  If no image has been
                rendered in this session, all zeroes are returned.
                 <br>  Currently the input modeling_view is not used in this function, as the
                information is returned for the last image regardless of which view it was
                rendered for.  This might change in the future.  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void GetImageCounts
        (
            int* numberBodiesRendered /** How many bodies were rendered for the image */,
            int* numberFacesRendered /** How many faces  were rendered for the image */,
            int* numberPolygonsGenerated /** How many polygons were created from the faces for the image */,
            double* polygonGenerationSeconds /** Number of seconds to generate the polygons */,
            double* shadowGenerationSeconds /** Number of seconds to generate the shadows */,
            double* imageGenerationSeconds /** Number of seconds to generate the image */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
