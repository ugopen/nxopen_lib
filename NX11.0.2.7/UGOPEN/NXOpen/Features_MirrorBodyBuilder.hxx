#ifndef NXOpen_FEATURES_MIRRORBODYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MIRRORBODYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MirrorBodyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_MirrorBodyBuilder.hxx>
#include <NXOpen/GeometricUtilities_ReplAsstBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class MirrorBodyBuilder;
    }
    namespace Assemblies
    {
        namespace ProductInterface
        {
            class InterfaceObject;
        }
    }
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class ReplAsstBuilder;
    }
    class ScCollector;
    class SelectBodyList;
    class SelectDatumPlane;
    class TaggedObject;
    namespace Features
    {
        class _MirrorBodyBuilderBuilder;
        class MirrorBodyBuilderImpl;
        /**
            Represents a @link NXOpen::Features::MirrorBody NXOpen::Features::MirrorBody@endlink  builder. 
             Inputs to this class can be convergent objects.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateMirrorBodyBuilder  NXOpen::Features::FeatureCollection::CreateMirrorBodyBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Associative </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        CopyThreads </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        FixAtCurrentTimestamp </td> <td> 
         
        True </td> </tr> 

        <tr><td> 
         
        InheritDisplayProperties </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        MakePositionIndependent </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        ParentPartType </td> <td> 
         
        WorkPart </td> </tr> 

        <tr><td> 
         
        ReplacementAssistant.OneToOne </td> <td> 
         
        True </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  MirrorBodyBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** the parent part types */
            public: enum ParentPart
            {
                ParentPartWorkPart/** Work Part */,
                ParentPartOtherPart/** Other Part */
            };

            /** enum for feature option type */
            public: enum FeatureOptionType
            {
                FeatureOptionTypeOneFeatureForAllBodies/** An option to create one mirror or linked mirror body feature for all selected bodies as body collector */,
                FeatureOptionTypeSeparateFeatureForEachBody/** An option to create a separate mirror or linked mirror body feature per single body */
            };

            private: MirrorBodyBuilderImpl * m_mirrorbodybuilder_impl;
            private: friend class  _MirrorBodyBuilderBuilder;
            protected: MirrorBodyBuilder();
            public: ~MirrorBodyBuilder();
            /**Returns  the mirror plane
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDatumPlane * Plane
            (
            );
            /**Returns  the mirror body list. For KF, only one parent body should be selected for this attribute. 
                    
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Features::MirrorBodyBuilder::MirrorBodyCollector NXOpen::Features::MirrorBodyBuilder::MirrorBodyCollector@endlink  instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Features::MirrorBodyBuilder::MirrorBodyCollector instead.") NXOpen::SelectBodyList * MirrorBodyList
            (
            );
            /**Returns  the feature option type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MirrorBodyBuilder::FeatureOptionType FeatureOption
            (
            );
            /**Sets  the feature option type 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatureOption
            (
                NXOpen::Features::MirrorBodyBuilder::FeatureOptionType featureOptionType /** featureoptiontype */ 
            );
            /**Returns  a collection of bodies to mirror 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * MirrorBodyCollector
            (
            );
            /**Returns  the fix at current timestamp 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool FixAtCurrentTimestamp
            (
            );
            /**Sets  the fix at current timestamp 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFixAtCurrentTimestamp
            (
                bool atTimeStamp /** attimestamp */ 
            );
            /**Returns  the associative
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the associative
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the reverse direction
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseDirection
            (
            );
            /**Sets  the reverse direction
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReverseDirection
            (
                bool reverse /** reverse */ 
            );
            /**Returns  the parent part type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MirrorBodyBuilder::ParentPart ParentPartType
            (
            );
            /**Sets  the parent part type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetParentPartType
            (
                NXOpen::Features::MirrorBodyBuilder::ParentPart sourceType /** sourcetype */ 
            );
            /**Returns  the frec at time stamp 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * FrecAtTimeStamp
            (
            );
            /**Sets  the frec at time stamp 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFrecAtTimeStamp
            (
                NXOpen::Features::Feature * terminalFrec /** terminal frec */ 
            );
            /**Returns  the make position independent 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool MakePositionIndependent
            (
            );
            /**Sets  the make position independent 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMakePositionIndependent
            (
                bool makePositionIndependent /** makepositionindependent */ 
            );
            /**Returns  the inherit display properties from source option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool InheritDisplayProperties
            (
            );
            /**Sets  the inherit display properties from source option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInheritDisplayProperties
            (
                bool inheritDisplayProperties /** inheritdisplayproperties */ 
            );
            /**Returns  the Replacement Assistant builder. Call Enter() to enter or re-enter into the mapping environment. 
                        Enter() needs to be executed before invoking any map creation or automatic matching APIs.
                        The matches inferred internally (internal identifier reuse, inherited from parent and siblings)
                        will be populated when Enter() is executed for the first time after selecting a replacement entity.
                        Call Exit() to exit the mapping environment. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::GeometricUtilities::ReplAsstBuilder * ReplacementAssistant
            (
            );
            /** Prints wave browser type information about link 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : wave ("WAVE FUNCTIONALITY") */
            public: void GetWaveLinkInformation
            (
                NXString* info /** queried wave information */,
                bool* xformExists /** true if there is a transform */,
                NXOpen::Point3d* xformOrigin /** transformation origin */,
                NXOpen::Matrix3x3* xformOrientation /** transformation matrix */,
                double* xformScale /** transformation scale */
            );
            /**Returns  the copy threads option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool CopyThreads
            (
            );
            /**Sets  the copy threads option 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCopyThreads
            (
                bool copyThreads /** copythreads */ 
            );
            /** Gets selected product interface objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetProductInterfaceObjects
            (
                std::vector<NXOpen::Assemblies::ProductInterface::InterfaceObject *> & selectedObjects /** items in list */
            );
            /** Sets selected product interface objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProductInterfaceObjects
            (
                const std::vector<NXOpen::Assemblies::ProductInterface::InterfaceObject *> & selectedObjects /** items in list */
            );
            /**Returns  the source part occurrence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * SourcePartOccurrence
            (
            );
            /**Sets  the source part occurrence 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSourcePartOccurrence
            (
                NXOpen::TaggedObject * sourcePartOcc /** sourcepartocc */ 
            );
            /** Gets source part occurrences 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSourcePartOccurrences
            (
                std::vector<NXOpen::TaggedObject *> & sourcePartOccurrences /** sourcepartoccurrences */ 
            );
            /** Sets source part occurrences 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSourcePartOccurrences
            (
                const std::vector<NXOpen::TaggedObject *> & sourcePartOccurrences /** sourcepartoccurrences */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
