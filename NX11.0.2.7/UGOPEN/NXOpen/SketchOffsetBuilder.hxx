#ifndef NXOpen_SKETCHOFFSETBUILDER_HXX_INCLUDED
#define NXOpen_SKETCHOFFSETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchOffsetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SketchOffset.hxx>
#include <NXOpen/SketchOffsetBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SketchOffsetBuilder;
    class Builder;
    class Expression;
    class NXObject;
    class Section;
    class _SketchOffsetBuilderBuilder;
    class SketchOffsetBuilderImpl;
    /**
        Represents a @link NXOpen::SketchOffsetBuilder NXOpen::SketchOffsetBuilder@endlink 
         <br> To create a new instance of this class, use @link NXOpen::SketchCollection::CreateSketchOffsetBuilder  NXOpen::SketchCollection::CreateSketchOffsetBuilder @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    CapType </td> <td> 
     
    Extension </td> </tr> 

    <tr><td> 
     
    ConvertToReference </td> <td> 
     
    False </td> </tr> 

    <tr><td> 
     
    CreateDimension </td> <td> 
     
    True </td> </tr> 

    <tr><td> 
     
    Degree </td> <td> 
     
    3 </td> </tr> 

    <tr><td> 
     
    Distance.Value </td> <td> 
     
    5.0 (millimeters part), 2.0 (inches part) </td> </tr> 

    <tr><td> 
     
    IsSymmetric </td> <td> 
     
    False </td> </tr> 

    <tr><td> 
     
    NumberOfCopies </td> <td> 
     
    1 </td> </tr> 

    </table>  

     <br>  Created in NX5.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  SketchOffsetBuilder : public NXOpen::Builder
    {
        private: SketchOffsetBuilderImpl * m_sketchoffsetbuilder_impl;
        private: friend class  _SketchOffsetBuilderBuilder;
        protected: SketchOffsetBuilder();
        public: ~SketchOffsetBuilder();
        /** The function creates a new empty section object and adds it to the builder  @return  New section object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Section * CreateSection
        (
        );
        /** The function removes the given section from the builder 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void RemoveSection
        (
            NXOpen::Section * section /** Section obj to remove */
        );
        /**Returns  the offset distance expression 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * Distance
        (
        );
        /**Returns  the number of offset copies 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: int NumberOfCopies
        (
        );
        /**Sets  the number of offset copies 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetNumberOfCopies
        (
            int copies /** copies */ 
        );
        /**Returns  the flag to create offset with a dimension or a dimensionless offset 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool CreateDimension
        (
        );
        /**Sets  the flag to create offset with a dimension or a dimensionless offset 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetCreateDimension
        (
            bool createDim /** createdim */ 
        );
        /**Returns  the type of the cap needed at the corners 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SketchOffset::CapType CapType
        (
        );
        /**Sets  the type of the cap needed at the corners 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetCapType
        (
            NXOpen::SketchOffset::CapType capType /** captype */ 
        );
        /**Returns  the flag to indicate if the offset needs to be symmetric or not 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsSymmetric
        (
        );
        /**Sets  the flag to indicate if the offset needs to be symmetric or not 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetSymmetric
        (
            bool symmetric /** symmetric */ 
        );
        /**Returns  the flag to indicate if the input curves needs to converted to reference 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool ConvertToReference
        (
        );
        /**Sets  the flag to indicate if the input curves needs to converted to reference 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetConvertToReference
        (
            bool reference /** reference */ 
        );
        /**Returns  the degree for approximating offset spline 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: int Degree
        (
        );
        /**Sets  the degree for approximating offset spline 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetDegree
        (
            int degree /** degree */ 
        );
        /**Returns  the tolerance for approximating offset spline 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: double Tolerance
        (
        );
        /**Sets  the tolerance for approximating offset spline 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetTolerance
        (
            double tolerance /** tolerance */ 
        );
        /** This function reverses the offset direction of the chain containing the input geometry 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void ReverseOffsetDirectionOfChain
        (
            NXOpen::NXObject * objectInChain /** An object in chain to reverse */
        );
        /** This function breaks the base chain and all the associated offsets at a given location 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void BreakChain
        (
            NXOpen::NXObject * object1 /** An object in chain to break */,
            NXOpen::NXObject * object2 /** Adjacent object to the previous one */,
            const NXOpen::Point3d & helpPt /** Help point for multiple intersections */
        );
        /** This function merges the two chains. The last geom of first chain and first geom of next chain are taken 
                    as input. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void MergeChains
        (
            NXOpen::NXObject * object1 /** Last geom of first chain */,
            NXOpen::NXObject * object2 /** First geom of next chain */,
            const NXOpen::Point3d & helpPt /** Help point for multiple intersections */
        );
        /** This function removes end constraint from the given offset 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetEndConstraint
        (
            NXOpen::NXObject * objectInChain /** An object in the base chain */,
            int inx /** Index of the constraint - starts from 0 */,
            bool isStartEnd /** TRUE, if we want to remove the start end con */,
            bool constraint /** TRUE to add the con, false to remove */
        );
        /** This function gets all output curves of an offset  @return  All the curves associated with constraint 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::NXObject *> GetOutputCurvesOfOffset
        (
        );
        /** This function gets all sections of an offset during create/edit  @return  All the sections associated with the builder 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: std::vector<NXOpen::Section *> GetSections
        (
        );
        /** This function will update the offset after curves are selected. If the input section is updated to add/remove curves, this function must be called
                    to update the offset constraint. This function will keep the offset constraint synchronised with the edits done to input section. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void UpdateLoopsAndCopies
        (
        );
        /** This function will solve the offset constraint to update it based on the new data set in the builder 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void EvaluateOffset
        (
        );
        /** This function will update the distance in the sketch solver using the new data set in the builder 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void UpdateSolverDistance
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
