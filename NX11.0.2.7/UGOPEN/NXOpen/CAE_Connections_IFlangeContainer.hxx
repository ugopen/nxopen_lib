#ifndef NXOpen_CAE_CONNECTIONS_IFLANGECONTAINER_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_IFLANGECONTAINER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_IFlangeContainer.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class IFlangeContainer;
        }
    }
    class INXObject;
    class TaggedObject;
    namespace CAE
    {
        namespace Connections
        {
            /**  @brief  This interface offers access to the flanges of a connection (SpotWeld for example).
                    The flanges are used for specifying the connecting surfaces of the connection. Each flange can have one or more entities like meshes, elements etc.
                      

              
             <br>  Created in NX11.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  IFlangeContainer : public virtual NXOpen::INXObject
            {
                public: virtual ~IFlangeContainer() {}
                /** Gets entities from flange. These can be meshes, elements, groups.  @return  Flange entities 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::TaggedObject *> GetFlangeEntities
                (
                    int flangeIndex /** flangeindex */ 
                ) = 0;
                /** Add entities to flange. Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void AddFlangeEntities
                (
                    int flangeIndex /** flangeindex */ ,
                    const std::vector<NXOpen::TaggedObject *> & entities /** Flange entities */
                ) = 0;
                /** Remove entities from flange. Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemoveFlangeEntities
                (
                    int flangeIndex /** flangeindex */ ,
                    const std::vector<NXOpen::TaggedObject *> & entities /** Flange entities */
                ) = 0;
                /**Returns  the number of flanges. When changing the number of flanges this is not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int NumberOfFlanges
                (
                ) = 0;
                /**Sets  the number of flanges. When changing the number of flanges this is not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetNumberOfFlanges
                (
                    int numberOfFlanges /** numberofflanges */ 
                ) = 0;
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
