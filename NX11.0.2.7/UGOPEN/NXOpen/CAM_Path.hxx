#ifndef NXOpen_CAM_PATH_HXX_INCLUDED
#define NXOpen_CAM_PATH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_Path.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_Path.hxx>
#include <NXOpen/CAM_PathData.hxx>
#include <NXOpen/CAM_PathEvent.hxx>
#include <NXOpen/CAM_PathLaserOptimizationData.hxx>
#include <NXOpen/CAM_Ude.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class Path;
    }
    namespace CAM
    {
        class PathCircularMotion;
    }
    namespace CAM
    {
        class PathEvent;
    }
    namespace CAM
    {
        class PathHelixMotion;
    }
    namespace CAM
    {
        class PathLaserOptimizationData;
    }
    namespace CAM
    {
        class PathLevelMarker;
    }
    namespace CAM
    {
        class PathLinearMotion;
    }
    namespace CAM
    {
        class Ude;
    }
    namespace CAM
    {
        class _PathBuilder;
        class PathImpl;
        /** Represets a Cam Tool Path  <br> This is a Subobject and cannot be publicly instantiated.  <br> 
         <br>  Created in NX9.0.3.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  Path : public NXOpen::TaggedObject
        {
            private: PathImpl * m_path_impl;
            private: friend class  _PathBuilder;
            protected: Path();
            public: ~Path();
            /** Constructs a new path linear motion object.  @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathLinearMotion * NewPathLinearMotion
            (
            );
            /** Constructs a new path circular motion object.  @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathCircularMotion * NewPathCircularMotion
            (
            );
            /** Constructs a new path helix motion object.  @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathHelixMotion * NewPathHelixMotion
            (
            );
            /**Returns   the tool axis type of the path 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CamPathToolAxisType ToolAxisType
            (
            );
            /**Returns  the number of tool path events 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: int NumberOfToolpathEvents
            (
            );
            /** Get the tool path event for a given index  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEvent * GetToolpathEvent
            (
                int eventNumber /** eventnumber */ 
            );
            /** Get the tool path event type  @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CamPathToolpathEventType GetToolpathEventType
            (
                int eventNumber /** eventnumber */ 
            );
            /** Get the tool path event type  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CamPathToolpathEventType GetToolpathEventType
            (
                NXOpen::CAM::PathEvent * pathEvent /** pathevent */ 
            );
            /** Move the event at index fromIndex to index toIndex. Events toIndex, toIndex+1, toIndex+2, ...
                        are shifted one position. I.e., toIndex i is shifted to toIndex i+1 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void MoveEvent
            (
                int fromIndex /** fromindex */ ,
                int toIndex /** toindex */ 
            );
            /** Move the event relative to the referenceEvent and the location. 
                        If location is end location(append) then reference event is not relevant 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void MoveEvent
            (
                NXOpen::CAM::PathEvent * eventToMove /** eventtomove */ ,
                NXOpen::CAM::CamPathToolpathEventLocation location /** location */ ,
                NXOpen::CAM::PathEvent * referenceEvent /** referenceevent */ 
            );
            /** Tell if the event is a motion. EventNumber is 1 through n  @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsToolpathEventAMotion
            (
                int eventNumber /** eventnumber */ ,
                NXOpen::CAM::CamPathMotionType* motionType /** motiontype */ ,
                NXOpen::CAM::CamPathMotionShapeType* motionShape /** motionshape */ 
            );
            /** Tell if the event is a motion  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsToolpathEventAMotion
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ ,
                NXOpen::CAM::CamPathMotionType* motionType /** motiontype */ ,
                NXOpen::CAM::CamPathMotionShapeType* motionShape /** motionshape */ 
            );
            /** Tell if the event is a ude  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsToolpathEventUde
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ ,
                NXString* udeName /** udename */ 
            );
            /** Get the data of the linear motion at the given index @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathLinearMotion * GetLinearMotion
            (
                int index /** index */ 
            );
            /** Updates the data of the linear motion event at the given index
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void SetLinearMotion
            (
                int index /** index */ ,
                NXOpen::CAM::PathLinearMotion * data /** data */ 
            );
            /** Append a linear move 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void AppendLinearMotion
            (
                NXOpen::CAM::PathLinearMotion * data /** data */ 
            );
            /** Insert a linear move before the specified index
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void InsertLinearMotionBefore
            (
                NXOpen::CAM::PathLinearMotion * data /** data */ ,
                int index /** index */ 
            );
            /** Insert a linear move after the specified index* 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void InsertLinearMotionAfter
            (
                NXOpen::CAM::PathLinearMotion * data /** data */ ,
                int index /** index */ 
            );
            /** Get the data of the linear motion @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathLinearMotion * GetLinearMotion
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ 
            );
            /** Updates the data of the linear motion event
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetLinearMotion
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ ,
                NXOpen::CAM::PathLinearMotion * data /** data */ 
            );
            /** Add a linear move at location, if location is end location(append) 
                        then the reference is not relevant @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEvent * AddLinearMotion
            (
                NXOpen::CAM::PathLinearMotion * data /** data */ ,
                NXOpen::CAM::CamPathToolpathEventLocation location /** location */ ,
                NXOpen::CAM::PathEvent * referenceEvent /** referenceevent */ 
            );
            /** Get the data of the circular motion at the given index @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathCircularMotion * GetCircularMotion
            (
                int index /** index */ 
            );
            /** Updates the data of the circular motion event at the given index
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCircularMotion
            (
                int index /** index */ ,
                NXOpen::CAM::PathCircularMotion * data /** data */ 
            );
            /** Append a circular move 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void AppendCircularMotion
            (
                NXOpen::CAM::PathCircularMotion * data /** data */ 
            );
            /** Insert Circular Motion before indicated index 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void InsertCircularMotionBefore
            (
                NXOpen::CAM::PathCircularMotion * data /** data */ ,
                int index /** index */ 
            );
            /** Insert Circular Motion after indicated index 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void InsertCircularMotionAfter
            (
                NXOpen::CAM::PathCircularMotion * data /** data */ ,
                int index /** index */ 
            );
            /** Get the data of the circular motion at the given index @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathCircularMotion * GetCircularMotion
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ 
            );
            /** Updates the data of the circular motion event
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetCircularMotion
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ ,
                NXOpen::CAM::PathCircularMotion * data /** data */ 
            );
            /** Add a circular move at location, if location is end location(append) 
                        then the reference is not relevant @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEvent * AddCircularMotion
            (
                NXOpen::CAM::PathCircularMotion * data /** data */ ,
                NXOpen::CAM::CamPathToolpathEventLocation location /** location */ ,
                NXOpen::CAM::PathEvent * referenceEvent /** referenceevent */ 
            );
            /** Get the data of the helix motion at the given index @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathHelixMotion * GetHelixMotion
            (
                int index /** index */ 
            );
            /** Updates the data of the helix motion event at the given index
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void SetHelixMotion
            (
                int index /** index */ ,
                NXOpen::CAM::PathHelixMotion * data /** data */ 
            );
            /** Append a helical move 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: void AppendHelixMotion
            (
                NXOpen::CAM::PathHelixMotion * data /** data */ 
            );
            /** Insert Helical Motion before indicated index 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: void InsertHelixMotionBefore
            (
                NXOpen::CAM::PathHelixMotion * data /** data */ ,
                int index /** index */ 
            );
            /** Insert Helical Motion after indicated index 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: void InsertHelixMotionAfter
            (
                NXOpen::CAM::PathHelixMotion * data /** data */ ,
                int index /** index */ 
            );
            /** Get the data of the helix motion event @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathHelixMotion * GetHelixMotion
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ 
            );
            /** Updates the data of the helix motion event
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetHelixMotion
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ ,
                NXOpen::CAM::PathHelixMotion * data /** data */ 
            );
            /** Add a helix move at location, if location is end location(append)
                        then the reference is not relevant @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEvent * AddHelixMotion
            (
                NXOpen::CAM::PathHelixMotion * data /** data */ ,
                NXOpen::CAM::CamPathToolpathEventLocation location /** location */ ,
                NXOpen::CAM::PathEvent * referenceEvent /** referenceevent */ 
            );
            /** Get the UDE event at the given index  @return  
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Ude * GetUde
            (
                int index /** index */ 
            );
            /** Set the UDE event at the given index; The CAM.Ude API object no longer is valid after this call
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void SetUde
            (
                int index /** index */ ,
                NXOpen::CAM::Ude * data /** data */ 
            );
            /** Append an ude of name with default values 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void AppendUde
            (
                const NXString & udeName /** ude name */ 
            );
            /** Append an ude of name with default values 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            void AppendUde
            (
                const char * udeName /** ude name */ 
            );
            /** Insert an ude of name with default values before the given index 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void InsertUdeBefore
            (
                const NXString & udeName /** ude name */ ,
                int index /** index */ 
            );
            /** Insert an ude of name with default values before the given index 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            void InsertUdeBefore
            (
                const char * udeName /** ude name */ ,
                int index /** index */ 
            );
            /** Insert an ude of name with default values after the given index 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: void InsertUdeAfter
            (
                const NXString & udeName /** ude name */ ,
                int index /** index */ 
            );
            /** Insert an ude of name with default values after the given index 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            void InsertUdeAfter
            (
                const char * udeName /** ude name */ ,
                int index /** index */ 
            );
            /** Get the data of the Ude event @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Ude * GetUde
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ 
            );
            /** Updates the data of the ude event
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetUde
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ ,
                NXOpen::CAM::Ude * data /** data */ 
            );
            /** Add a helix move at location, if location is end location(append) 
                        then the reference is not relevant @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEvent * AddUde
            (
                const NXString & udeName /** ude name */ ,
                NXOpen::CAM::CamPathToolpathEventLocation location /** location */ ,
                NXOpen::CAM::PathEvent * referenceEvent /** referenceevent */ 
            );
            /** Add a helix move at location, if location is end location(append) 
                        then the reference is not relevant @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            NXOpen::CAM::PathEvent * AddUde
            (
                const char * udeName /** ude name */ ,
                NXOpen::CAM::CamPathToolpathEventLocation location /** location */ ,
                NXOpen::CAM::PathEvent * referenceEvent /** referenceevent */ 
            );
            /** Empty the path by deleteing all events 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void EmptyPath
            (
            );
            /** Delete one event 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void DeleteOneEvent
            (
                int index /** index */ 
            );
            /** Delete one event 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void DeleteOneEvent
            (
                NXOpen::CAM::PathEvent * pathEvent /** pathevent */ 
            );
            /** Get the laser optimization data @return  
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathLaserOptimizationData * GetLaserOptimizationData
            (
            );
            /** Get the data of the level index at the given index @return  
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathLevelMarker * GetLevelMarker
            (
                int index /** index */ 
            );
            /** Updates the data of the level marker event at the given index
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void SetLevelMarker
            (
                int index /** index */ ,
                NXOpen::CAM::PathLevelMarker * data /** data */ 
            );
            /** Append a level marker 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void AppendLevelMarker
            (
                NXOpen::CAM::PathLevelMarker * data /** data */ 
            );
            /** Insert a level marker before the specified index
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void InsertLevelMarkerBefore
            (
                NXOpen::CAM::PathLevelMarker * data /** data */ ,
                int index /** index */ 
            );
            /** Insert a level marker after the specified index
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void InsertLevelMarkerAfter
            (
                NXOpen::CAM::PathLevelMarker * data /** data */ ,
                int index /** index */ 
            );
            /** Get the data of the level marker event @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathLevelMarker * GetLevelMarker
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ 
            );
            /** Updates the data of the level marker event
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetLevelMarker
            (
                NXOpen::CAM::PathEvent * eventOfInterest /** eventofinterest */ ,
                NXOpen::CAM::PathLevelMarker * data /** data */ 
            );
            /** Add a level marker event at location, if location is end location(append) 
                        then the reference is not relevant @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEvent * AddLevelMarker
            (
                NXOpen::CAM::PathLevelMarker * data /** data */ ,
                NXOpen::CAM::CamPathToolpathEventLocation location /** location */ ,
                NXOpen::CAM::PathEvent * referenceEvent /** referenceevent */ 
            );
            /** Ask for the first path event ** @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEvent * GetFirstEvent
            (
            );
            /** Ask for the last path event ** @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::PathEvent * GetLastEvent
            (
            );
            /** Clean up by deleting all Udes that have the specified name **
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void DeleteAllUdesOfName
            (
                const NXString & udeName /** udename */ 
            );
            /** Clean up by deleting all Udes that have the specified name **
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            void DeleteAllUdesOfName
            (
                const char * udeName /** udename */ 
            );
            /**Returns   the contact type of the path 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CamPathContactType ContactType
            (
            );
            /**Sets   the contact type of the path 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetContactType
            (
                NXOpen::CAM::CamPathContactType contactType /** contacttype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
