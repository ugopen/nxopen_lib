#ifndef NXOpen_TOOLING_ELECTRODECOPYBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_ELECTRODECOPYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ElectrodeCopyBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_ElectrodeCopyBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ElectrodeCopyBuilder;
    }
    class Builder;
    class SelectBodyList;
    class TaggedObject;
    namespace Tooling
    {
        class _ElectrodeCopyBuilderBuilder;
        class ElectrodeCopyBuilderImpl;
        /** The ElectrodeCopy builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::ElectrodeCopyCollection::CreateElectrodeCopyBuilder  NXOpen::Tooling::ElectrodeCopyCollection::CreateElectrodeCopyBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DefNum </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        SelType </td> <td> 
         
        Transform </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ElectrodeCopyBuilder : public NXOpen::Builder
        {
            /** Represents an index to copy type */
            public: enum Copy
            {
                CopyTransform/** the method is transform */,
                CopyMirror/** the method is mirror */
            };

            private: ElectrodeCopyBuilderImpl * m_electrodecopybuilder_impl;
            private: friend class  _ElectrodeCopyBuilderBuilder;
            protected: ElectrodeCopyBuilder();
            public: ~ElectrodeCopyBuilder();
            /**Returns  the copy type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ElectrodeCopyBuilder::Copy SelType
            (
            );
            /**Sets  the copy type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelType
            (
                NXOpen::Tooling::ElectrodeCopyBuilder::Copy selType /** seltype */ 
            );
            /**Returns  the selected electrode 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectElectrode
            (
            );
            /**Returns  the selected 'from' face 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectFromFace
            (
            );
            /**Returns  the selected 'to' face 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelToFace
            (
            );
            /**Returns  the mirror plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * MirrorPlane
            (
            );
            /**Returns  the number of transform 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int DefNum
            (
            );
            /**Sets  the number of transform 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefNum
            (
                int defNum /** defnum */ 
            );
            /**Returns  the setting indicates the copy is a new part or an instance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CopyInstance
            (
            );
            /**Sets  the setting indicates the copy is a new part or an instance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCopyInstance
            (
                bool copyInstance /** copyinstance */ 
            );
            /**Returns  the new electrode name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool Rename
            (
            );
            /**Sets  the new electrode name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRename
            (
                bool rename /** rename */ 
            );
            /**Returns  the electrode blank builder. 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * ElectrodeBlankBuilder
            (
            );
            /**Sets  the electrode blank builder. 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetElectrodeBlankBuilder
            (
                NXOpen::TaggedObject * builderTag /** electrode blank builder tag */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
