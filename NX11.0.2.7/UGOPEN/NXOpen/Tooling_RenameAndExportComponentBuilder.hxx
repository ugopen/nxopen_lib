#ifndef NXOpen_TOOLING_RENAMEANDEXPORTCOMPONENTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_RENAMEANDEXPORTCOMPONENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_RenameAndExportComponentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_RenameAndExportComponentBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class RenameAndExportComponentBuilder;
    }
    class Builder;
    class NXObject;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace Tooling
    {
        class _RenameAndExportComponentBuilderBuilder;
        class RenameAndExportComponentBuilderImpl;
        /** Creates rename and export component builder for progressive die. No entity is returned.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateRenameAndExportComponentBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateRenameAndExportComponentBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DefineBy </td> <td> 
         
        Selection </td> </tr> 

        <tr><td> 
         
        DeleteOldComponentsToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ExportDrawingFile </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ListChildrenComponents </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LoadOption </td> <td> 
         
        FromFolder </td> </tr> 

        <tr><td> 
         
        NewNameRule </td> <td> 
         
        None </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  RenameAndExportComponentBuilder : public NXOpen::Builder
        {
            /** naming rule */
            public: enum NamingRuleType
            {
                NamingRuleTypeNone/** none */ ,
                NamingRuleTypePrefix/** prefix */ ,
                NamingRuleTypeSuffix/** suffix */ ,
                NamingRuleTypeReplaceString/** replace string */ 
            };

            /** types */
            public: enum Types
            {
                TypesRenameCompoent/** rename compoent */ ,
                TypesExportAssembly/** export assembly */ 
            };

            /** definition type */
            public: enum DefinitionType
            {
                DefinitionTypeDirectory/** directory */ ,
                DefinitionTypeRootPart/** root part */ ,
                DefinitionTypeSelection/** selection */ 
            };

            /** load option type */
            public: enum LoadOptionType
            {
                LoadOptionTypeFromFolder/** from folder */ ,
                LoadOptionTypeFromSearchFolder/** from search folder */ 
            };

            private: RenameAndExportComponentBuilderImpl * m_renameandexportcomponentbuilder_impl;
            private: friend class  _RenameAndExportComponentBuilderBuilder;
            protected: RenameAndExportComponentBuilder();
            public: ~RenameAndExportComponentBuilder();
            /**Returns  the list children components 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ListChildrenComponents
            (
            );
            /**Sets  the list children components 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetListChildrenComponents
            (
                bool listChildrenComponents /** listchildrencomponents */ 
            );
            /**Returns  the select component to rename 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectComponentToRename
            (
            );
            /**Returns  the new name rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::RenameAndExportComponentBuilder::NamingRuleType NewNameRule
            (
            );
            /**Sets  the new name rule 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNewNameRule
            (
                NXOpen::Tooling::RenameAndExportComponentBuilder::NamingRuleType newNameRule /** newnamerule */ 
            );
            /**Returns  the prefix or suffix string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PrefixOrSuffixString
            (
            );
            /**Sets  the prefix or suffix string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPrefixOrSuffixString
            (
                const NXString & prefixOrSuffixString /** prefixorsuffixstring */ 
            );
            /**Sets  the prefix or suffix string 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetPrefixOrSuffixString
            (
                const char * prefixOrSuffixString /** prefixorsuffixstring */ 
            );
            /**Returns  the old string in name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OldStringInName
            (
            );
            /**Sets  the old string in name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOldStringInName
            (
                const NXString & oldStringInName /** oldstringinname */ 
            );
            /**Sets  the old string in name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetOldStringInName
            (
                const char * oldStringInName /** oldstringinname */ 
            );
            /**Returns  the new string in name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewStringInName
            (
            );
            /**Sets  the new string in name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNewStringInName
            (
                const NXString & newStringInName /** newstringinname */ 
            );
            /**Sets  the new string in name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetNewStringInName
            (
                const char * newStringInName /** newstringinname */ 
            );
            /**Returns  the define by 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::RenameAndExportComponentBuilder::DefinitionType DefineBy
            (
            );
            /**Sets  the define by 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDefineBy
            (
                NXOpen::Tooling::RenameAndExportComponentBuilder::DefinitionType defineBy /** defineby */ 
            );
            /**Returns  the select assembly to export 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectAssemblyToExport
            (
            );
            /**Returns  the select assembly in folder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectAssemblyInFolder
            (
            );
            /**Sets  the select assembly in folder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectAssemblyInFolder
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the select assembly in folder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetSelectAssemblyInFolder
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the output diretory 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputDiretory
            (
            );
            /**Sets  the output diretory 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOutputDiretory
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the output diretory 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetOutputDiretory
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the delete old components toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool DeleteOldComponentsToggle
            (
            );
            /**Sets  the delete old components toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDeleteOldComponentsToggle
            (
                bool deleteOldComponentsToggle /** deleteoldcomponentstoggle */ 
            );
            /**Returns  the export drawing file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExportDrawingFile
            (
            );
            /**Sets  the export drawing file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetExportDrawingFile
            (
                bool exportDrawingFile /** exportdrawingfile */ 
            );
            /**Returns  the load option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::RenameAndExportComponentBuilder::LoadOptionType LoadOption
            (
            );
            /**Sets  the load option 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetLoadOption
            (
                NXOpen::Tooling::RenameAndExportComponentBuilder::LoadOptionType loadOption /** loadoption */ 
            );
            /**Returns  the add folder to search 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AddFolderToSearch
            (
            );
            /**Sets  the add folder to search 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAddFolderToSearch
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the add folder to search 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetAddFolderToSearch
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::RenameAndExportComponentBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::RenameAndExportComponentBuilder::Types type /** type */ 
            );
            /**Returns  the wizard type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /** Rename components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void RenameComponents
            (
                NXOpen::NXObject * partTag /** parttag */ ,
                const NXString & dirName /** dirname */ ,
                const NXString & newPartName /** newpartname */ 
            );
            /** Rename components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void RenameComponents
            (
                NXOpen::NXObject * partTag /** parttag */ ,
                const char * dirName /** dirname */ ,
                const char * newPartName /** newpartname */ 
            );
            /** Set search folder list 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSearchFolderListForExportDrawingFiles
            (
                std::vector<NXString> & folderList /** folderlist */ 
            );
            /** Export components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ExportComponents
            (
                NXOpen::NXObject * partTag /** parttag */ ,
                const NXString & assemblyInFolderWithPath /** assemblyinfolderwithpath */ ,
                const NXString & outputDir /** outputdir */ 
            );
            /** Export components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void ExportComponents
            (
                NXOpen::NXObject * partTag /** parttag */ ,
                const char * assemblyInFolderWithPath /** assemblyinfolderwithpath */ ,
                const char * outputDir /** outputdir */ 
            );
            /** Export single component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ExportSingleComponent
            (
                const NXString & assemblyPartNameWithPath /** assemblypartnamewithpath */ ,
                const NXString & outputDir /** outputdir */ 
            );
            /** Export single component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void ExportSingleComponent
            (
                const char * assemblyPartNameWithPath /** assemblypartnamewithpath */ ,
                const char * outputDir /** outputdir */ 
            );
            /**Returns  the part directory 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartDirectory
            (
            );
            /**Sets  the part directory 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPartDirectory
            (
                const NXString & partDirectory /** partdirectory */ 
            );
            /**Sets  the part directory 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetPartDirectory
            (
                const char * partDirectory /** partdirectory */ 
            );
            /** Export components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void GetDrawingFilesInFolder
            (
                NXOpen::NXObject * assemblyPartToExport /** assemblyparttoexport */ ,
                const NXString & assemblyInFolderWithPath /** assemblyinfolderwithpath */ ,
                const NXString & outputDir /** outputdir */ ,
                bool onlyGetDrawingFilesNotExport /** onlygetdrawingfilesnotexport */ ,
                std::vector<NXString> & drawingFilesNeedExport /** drawingfilesneedexport */ 
            );
            /** Export components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void GetDrawingFilesInFolder
            (
                NXOpen::NXObject * assemblyPartToExport /** assemblyparttoexport */ ,
                const char * assemblyInFolderWithPath /** assemblyinfolderwithpath */ ,
                const char * outputDir /** outputdir */ ,
                bool onlyGetDrawingFilesNotExport /** onlygetdrawingfilesnotexport */ ,
                std::vector<NXString> & drawingFilesNeedExport /** drawingfilesneedexport */ 
            );
            /**Returns  the need change display part back toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool NeedChangeDisplayPartBack
            (
            );
            /**Sets  the need change display part back toggle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNeedChangeDisplayPartBack
            (
                bool needChangeDisplayPartBack /** needchangedisplaypartback */ 
            );
            /** Replace components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ReplaceComponent
            (
                NXOpen::NXObject * componentTag /** componenttag */ ,
                const NXString & newComponentNameWithPath /** newcomponentnamewithpath */ 
            );
            /** Replace components 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void ReplaceComponent
            (
                NXOpen::NXObject * componentTag /** componenttag */ ,
                const char * newComponentNameWithPath /** newcomponentnamewithpath */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
