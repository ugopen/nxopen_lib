#ifndef NXOpen_ROUTING_PORT_HXX_INCLUDED
#define NXOpen_ROUTING_PORT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Port.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/Routing_ICharacteristic.hxx>
#include <NXOpen/Routing_IRoutePosition.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class Port;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class DisplayableObject;
    class Expression;
    namespace Features
    {
        class WaveRouting;
    }
    class INXObject;
    class NXObject;
    class Point;
    namespace Positioning
    {
        class Constraint;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class FeaturePort;
    }
    namespace Routing
    {
        class ICharacteristic;
    }
    namespace Routing
    {
        class IRoutePosition;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class PortConnection;
    }
    namespace Routing
    {
        class Stock;
    }
    class SmartObject;
    namespace Routing
    {
        class _PortBuilder;
        class PortImpl;
        /** Routing Port Object is a parent class for FixturePort, ExtractPort, FittingPort,
                Multiport, StockPort and TerminalPort <br> Creator not available in KF.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  Port : public NXOpen::SmartObject, public virtual NXOpen::Routing::IRoutePosition
        {
            /** Specifies the port type*/
            public: enum PortType
            {
                PortTypeUnknownPort/** Unknown Port      */,
                PortTypeFittingPort/** Fitting Port      */,
                PortTypeFixturePort/** Fixture Port      */,
                PortTypeMultiPort/** Multi Port        */,
                PortTypeTerminalPort/** Terminal Port     */,
                PortTypeStockPort/** Stock Port        */,
                PortTypeStockOffsetPort/** Stock Offset Port */
            };

            /** Allowed types for flow direction */
            public: enum FlowDirectionType
            {
                FlowDirectionTypeRouteFlowEither/** route flow either */ ,
                FlowDirectionTypeRouteFlowIn/** route flow in */ ,
                FlowDirectionTypeRouteFlowOut/** route flow out */ ,
                FlowDirectionTypeFlowNone/** flow none */ 
            };

            /** Used by @link NXOpen::Routing::FittingPortCollection::CreateFromCsys NXOpen::Routing::FittingPortCollection::CreateFromCsys@endlink  and
                       @link Routing::FixturePortCollection::CreateFromCsys Routing::FixturePortCollection::CreateFromCsys@endlink  to determine if
                       the rotation vector on the port should be created. */
            public: enum CreateRotationVector
            {
                CreateRotationVectorNo/** Do not create the rotation vector on the port created from a coordinate system. */,
                CreateRotationVectorYes/** Create the rotation vector on the port created from a coordinate system. */
            };

            private: PortImpl * m_port_impl;
            private: friend class  _PortBuilder;
            protected: Port();
            public: ~Port();
            /** Get the type of Port  @return  Port Type 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Port::PortType GetPortType
            (
            );
            /** Retrieves the alignment vector of Port  @return  Vector direction in absolute co-ordinate system 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Vector3d GetAlignmentVector
            (
            );
            /** The clock angle increment value of @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink   @return  Clock increment value in degrees 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetClockIncrement
            (
            );
            /** The clock angle increment value of @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetClockIncrement
            (
                double increment /** Clock increment value in degrees */
            );
            /** Get the value of flow direction of @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Port::FlowDirectionType GetFlowDirection
            (
            );
            /** Set the flow direction value of @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetFlowDirection
            (
                NXOpen::Routing::Port::FlowDirectionType flowDirection /** flow direction */ 
            );
            /** Retrieves the rotation vector of Port  @return  Vector direction in absolute co-ordinate system 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Vector3d GetRotationVector
            (
            );
            /** Retrieves the object used to derive the rotation vector of Port  @return  Object used to derive the rotation vector 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::DisplayableObject * GetRotationObject
            (
            );
            /** Return the segment the port position and alignment are derived from
                        Returns NULL if the port is not derived from segment  @return  ISegment from which the port is derived 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ISegment * GetSegment
            (
            );
            /** Returns the forward extension value for a port i.e. the minimum length that
                      * a segment must remain straight coming out of a @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink   @return  Port extension 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetForwardExtension
            (
            );
            /** Returns the forward extension object for a port.  @return  Forward Extension Expression. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * GetForwardExtensionObject
            (
            );
            /**Returns  the backward extension value for a port (i.e. the minimum length that
                      * a segment must remain straight going into the back of a @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink ) 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double BackwardExtension
            (
            );
            /**Sets  the backward extension value for a port (i.e. the minimum length that
                      * a segment must remain straight going into the back of a @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink ) 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBackwardExtension
            (
                double extension /** Port extension */
            );
            /**Returns  the backward extension object for a port. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * BackwardExtensionObject
            (
            );
            /**Sets  the backward extension object for a port. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBackwardExtensionObject
            (
                NXOpen::Expression * backwardExtension /** Backward Extension Expression. */
            );
            /** Returns the engagement distance of a port, i.e. the distance
                      * behind the port that another fitting or stock may engage  @return  Engagement distance 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetEngagement
            (
            );
            /** Returns the position of the port taking into account the engagement distance.  @return  Location of engagement position in ABS coordinates 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Point3d GetEngagementPosition
            (
            );
            /** Returns the cutback length of a port, i.e. the length along the wire from
                      * the port where individual wires leave a bundle to attach to pins  @return  Cutback length 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetCutbackLength
            (
            );
            /** Searches for an integer characteristics on the port, then on the ports component
                        and prototype port if the port is an occurrence.    @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int FindPortIntegerCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Searches for an integer characteristics on the port, then on the ports component
                        and prototype port if the port is an occurrence.    @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            int FindPortIntegerCharacteristic
            (
                const char * name /** name */ 
            );
            /** Searches for a real characteristics on the port, then on the ports component
                        and prototype port if the port is an occurrence.    @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double FindPortRealCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Searches for a real characteristics on the port, then on the ports component
                        and prototype port if the port is an occurrence.    @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            double FindPortRealCharacteristic
            (
                const char * name /** name */ 
            );
            /** Searches for a string characteristics on the port, then on the ports component
                        and prototype port if the port is an occurrence.    @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString FindPortStringCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Searches for a string characteristics on the port, then on the ports component
                        and prototype port if the port is an occurrence.    @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXString FindPortStringCharacteristic
            (
                const char * name /** name */ 
            );
            /**Returns  the Allow Multiple Connections property for a @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink .
                        The property controls the number of connections that can be routed to this
                        @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink .  Although this can be specified in the
                        Mechanical application, the Electrical application is where this property is most
                        used.
                      
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool AllowMultipleConnections
            (
            );
            /**Sets  the Allow Multiple Connections property for a @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink .
                        The property controls the number of connections that can be routed to this
                        @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink .  Although this can be specified in the
                        Mechanical application, the Electrical application is where this property is most
                        used.
                      
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAllowMultipleConnections
            (
                bool allowMultipleConnections /** Should the multiport allow multiple connections? */
            );
            /** Gets a reference characteristic from the port.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString GetReferenceCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Gets a reference characteristic from the port.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            NXString GetReferenceCharacteristic
            (
                const char * name /** name */ 
            );
            /** Sets a reference characteristics on the port. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetReferenceCharacteristic
            (
                const NXString & name /** name */ ,
                const NXString & value /** value */ 
            );
            /** Sets a reference characteristics on the port. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetReferenceCharacteristic
            (
                const char * name /** name */ ,
                const char * value /** value */ 
            );
            /** Finds another @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  to connect this port to.  Builds a
                        @link NXOpen::Routing::PortConnection NXOpen::Routing::PortConnection@endlink  object if a connectable port is found.  See
                        @link Routing::PortConnectionCollection::CanPortsConnect Routing::PortConnectionCollection::CanPortsConnect@endlink . Does nothing if
                        this port already has a @link NXOpen::Routing::PortConnection NXOpen::Routing::PortConnection@endlink  object referencing it.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PortConnection * Connect
            (
            );
            /** Deletes any @link NXOpen::Routing::PortConnection NXOpen::Routing::PortConnection@endlink  objects that reference this port. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void Disconnect
            (
            );
            /**Locks the port engagement using dcm3 constraints @return  Newly created port constraints 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Positioning::Constraint *> LockEngagement
            (
                NXOpen::Routing::Port * portToLock /** porttolock */ 
            );
            /**Locks the port rotation vector using dcm3 constraints @return  Newly created port constraints 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Positioning::Constraint *> LockRotation
            (
                NXOpen::Routing::Port * portToLock /** porttolock */ 
            );
            /**Unlocks the port engagement
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UnlockEngagement
            (
                NXOpen::Routing::Port * portToUnlock /** porttounlock */ 
            );
            /**Unlocks the port rotation
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UnlockRotation
            (
                NXOpen::Routing::Port * portToUnlock /** porttounlock */ 
            );
            /**Checks if ports have their rotation vectors locked.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsRotationLocked
            (
                NXOpen::Routing::Port * portToCheck /** porttocheck */ 
            );
            /**Checks to see if ports are engaged. @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsEngagementLocked
            (
                NXOpen::Routing::Port * portToCheck /** porttocheck */ 
            );
            /**Returns  the clock angle increment expression of a
                       @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink , i.e. an expression
                       representing the minimum angle for clocking the
                       @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * ClockIncrementObject
            (
            );
            /**Sets  the clock angle increment expression of a
                       @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink , i.e. an expression
                       representing the minimum angle for clocking the
                       @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink . 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetClockIncrementObject
            (
                NXOpen::Expression * increment /** Clock increment expression */
            );
            /** Ask @link NXOpen::Routing::FeaturePort NXOpen::Routing::FeaturePort@endlink  object associated with
                       @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink . Returns NULL if the port was created
                       in preNX6 release and not converted to @link NXOpen::Routing::FeaturePort NXOpen::Routing::FeaturePort@endlink 
                       or the port is a WAVE-linked port.
                       To convert @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  object to @link NXOpen::Routing::FeaturePort NXOpen::Routing::FeaturePort@endlink  object
                       use @link Routing::PortCollection::ConvertToFeatures Routing::PortCollection::ConvertToFeatures@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::FeaturePort * AskFeature
            (
            );
            /** Ask @link NXOpen::Features::WaveRouting NXOpen::Features::WaveRouting@endlink  object associated with this
                       @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink . Returns NULL if the port is not
                       WAVE-linked.
                     @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Features::WaveRouting * AskWaveFeature
            (
            );
            /** Reorders the @link NXOpen::Routing::FeaturePort NXOpen::Routing::FeaturePort@endlink  object associated with
                       @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  after all of the features on which the
                       port feature depends. Does nothing if the port was created
                       in preNX6 release and not converted to @link NXOpen::Routing::FeaturePort NXOpen::Routing::FeaturePort@endlink .
                       To convert @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  object to @link NXOpen::Routing::FeaturePort NXOpen::Routing::FeaturePort@endlink  object
                       use @link Routing::PortCollection::ConvertToFeatures Routing::PortCollection::ConvertToFeatures@endlink . 
             <br>  Created in NX6.0.5.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ReorderFeature
            (
            );
            /** If this port is an occurrence, returns the component part to which it belongs.
                        Returns NULL otherwise.  @return  
             <br>  Created in NX8.0.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Assemblies::Component * GetComponent
            (
            );
            /** If port is connected to another port, returns both connected ports.
                        Returns NULL otherwise. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetConnectedPorts
            (
                NXOpen::Routing::Port ** connectedPort1 /** connectedport1 */ ,
                NXOpen::Routing::Port ** connectedPort2 /** connectedport2 */ 
            );
            /** If port is connected to another port, returns the Port Connection that links them.
                        Returns NULL otherwise.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PortConnection * GetPortConnection
            (
            );
            /** Returns the occurrence of the given port.

                        If the given port is a port extract, uses the port extract data to find the source
                        occurrence.  Only establishes an occurrence if the extract xform and the source
                        (prototype) port are loaded.  Returns a NULL otherwise.

                        Given any other port, tries to find an occurrence under the work occurrence.
                     @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::NXObject * GetOccurrence
            (
            );
            /** Returns the @link Routing::ControlPoint Routing::ControlPoint@endlink  to which this port is constrained, if any.
                        Returns NULL otherwise.  @return  
             <br>  Created in NX8.0.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * GetControlPoint
            (
            );
            /** For a @link Routing::StockPort Routing::StockPort@endlink , returns the @link Routing::Stock Routing::Stock@endlink 
                        to which this port is attached, if any. Returns NULL otherwise for all other types of ports.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Stock * GetStockOfPort
            (
            );
            /**Returns   the current location of the object in ABS coordinates.  This value is
                          overridden by the coordinates of the point associated with this object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXOpen::Point3d Position
            (
            );
            /**Sets   the current location of the object in ABS coordinates.  This value is
                          overridden by the coordinates of the point associated with this object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetPosition
            (
                const NXOpen::Point3d & position /** New location of object in ABS coordinates */
            );
            /**Returns  the @link NXOpen::Point NXOpen::Point@endlink  that specifies the location of the
                        @link NXOpen::Routing::IRoutePosition NXOpen::Routing::IRoutePosition@endlink  object.  A NULL object indicates that this
                        object is not associated to any point.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXOpen::Point * Point
            (
            );
            /**Sets  the @link NXOpen::Point NXOpen::Point@endlink  that specifies the location of the
                        @link NXOpen::Routing::IRoutePosition NXOpen::Routing::IRoutePosition@endlink  object.  A NULL object indicates that this
                        object is not associated to any point.  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetPoint
            (
                NXOpen::Point * point /** New location of object in ABS coordinates */
            );
            /** Get all of the characteristics values on the this object.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXOpen::Routing::CharacteristicList * GetCharacteristics
            (
            );
            /** Set all of the characteristics values on this object. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristics2 NXOpen::Routing::ICharacteristic::SetCharacteristics2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public:  NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Routing::ICharacteristic::SetCharacteristics2 instead.") virtual void SetCharacteristics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual int GetIntegerCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Get the value of an integer characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual int GetIntegerCharacteristic
            (
                const char * name /** name */ 
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public:  NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Routing::ICharacteristic::SetCharacteristic2 instead.") virtual void SetCharacteristic
            (
                const NXString & name /** name */ ,
                int value /** value */ 
            );
            /** Set the value of an integer characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to integer if it's 
                        type is not integer. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic
            (
                const char * name /** name */ ,
                int value /** value */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual double GetRealCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Get the value of a real characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual double GetRealCharacteristic
            (
                const char * name /** name */ 
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public:  NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Routing::ICharacteristic::SetCharacteristic2 instead.") virtual void SetCharacteristic
            (
                const NXString & name /** name */ ,
                double value /** value */ 
            );
            /** Set the value of an real characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to real if it's 
                        type is not real. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic
            (
                const char * name /** name */ ,
                double value /** value */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXString GetStringCharacteristic
            (
                const NXString & name /** name */ 
            );
            /** Get the value of a string characteristic associated with the input name.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual NXString GetStringCharacteristic
            (
                const char * name /** name */ 
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public:  NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Routing::ICharacteristic::SetCharacteristic2 instead.") virtual void SetCharacteristic
            (
                const NXString & name /** name */ ,
                const NXString & value /** value */ 
            );
            /** Set the value of an string characteristic associated with the input name,
                        adds a new characteristic to the list if one doesn't exist already. Converts
                        the type of an existing characteristic with the same name to string if it's 
                        type is not string. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Routing::ICharacteristic::SetCharacteristic2 NXOpen::Routing::ICharacteristic::SetCharacteristic2@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic
            (
                const char * name /** name */ ,
                const char * value /** value */ 
            );
            /** Removes the input list of characteristics from this object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void DeleteCharacterstics
            (
                NXOpen::Routing::CharacteristicList * values /** values */ 
            );
            /**   Returns the destination characteristics from the input object.
                          Retrieves the description of which destination characteristics to read
                          from the application view and then reads those destination 
                          characteristics from the object
                          <ul>
                              <li>Ports: Reads characteristics from the port.</li>
                              <li>RCPs: Attempts to find a port at the RCP, reads characteristics from
                                          the port if it exists, otherwise reads from the
                                          stock associated with the rcp.</li>
                              <li>Segments: Reads characteristics from the stock associated with the segment.</li>
                              <li>Components: Reads characteristics directly from the component.</li>
                              <li>Stock: Reads characteristics from the stock or from the stock's data.</li>
                          </ul>
                     @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual NXOpen::Routing::CharacteristicList * GetDestinationCharacteristics
            (
            );
            /** Sets or creates an integer type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic2
            (
                const NXString & title /** Unique title for the Attribute or Characteristic */,
                int value /** New Value to be set on the Attribute */
            );
            /** Sets or creates an integer type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic2
            (
                const char * title /** Unique title for the Attribute or Characteristic */,
                int value /** New Value to be set on the Attribute */
            );
            /** Sets or creates a double type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic2
            (
                const NXString & title /** Unique title for the Attribute or Characteristic */,
                double value /** New Value to be set on the Attribute */
            );
            /** Sets or creates a double type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic2
            (
                const char * title /** Unique title for the Attribute or Characteristic */,
                double value /** New Value to be set on the Attribute */
            );
            /** Sets or creates a string type type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristic2
            (
                const NXString & title /** Unique title for the Attribute or Characteristic */,
                const NXString & value /** New Value to be set on the Attribute */
            );
            /** Sets or creates a string type type attribute associated with the input title. 
                    creating a new attribute if one doesn't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit a part attribute on the stock part. For legacy parts 
                    where the attribute is on the stock component, the attribute will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit an attribute on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attribute will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create an attribute on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            virtual void SetCharacteristic2
            (
                const char * title /** Unique title for the Attribute or Characteristic */,
                const char * value /** New Value to be set on the Attribute */
            );
            /** Sets all attributes associated with the titles from the input list, 
                    creating new attributes for the ones that don't exist already. 

                    If the method is called on a stock @link Assemblies::Component Assemblies::Component@endlink , the 
                    method will create or edit part attributes on the stock part. For legacy parts 
                    where the attributes are on the stock component, the attributes will be moved 
                    to the stock part. 

                    If the method is called on a non-stock @link Assemblies::Component Assemblies::Component@endlink , 
                    the method will create or edit attributes on the corresponding instance. For 
                    legacy parts where the attribute is on the component, the attributes will be moved 
                    to the corresponding instance. 

                    If the method is called on any non-component object, the method will 
                    access or create attributes on the object itself. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: virtual void SetCharacteristics2
            (
                NXOpen::Routing::CharacteristicList * values /** @link NXOpen::Routing::CharacteristicList NXOpen::Routing::CharacteristicList@endlink  having the titles, types and values of Attributes to be set */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
