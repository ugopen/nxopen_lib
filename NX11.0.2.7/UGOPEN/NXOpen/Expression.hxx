#ifndef NXOpen_EXPRESSION_HXX_INCLUDED
#define NXOpen_EXPRESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Expression.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Expression;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class Unit;
    class _ExpressionBuilder;
    class ExpressionImpl;
    /** Represents an expression.  <br> To create a new instance of this class, use @link NXOpen::ExpressionCollection::CreateWithUnits  NXOpen::ExpressionCollection::CreateWithUnits @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Expression : public NXOpen::NXObject
    {
        /** Indicates the units to use when getting an expression's value. */
        public: enum UnitsOption
        {
            UnitsOptionBase/** Return expression value in base part units.  */,
            UnitsOptionExpression/** Return expression value in expression units. */
        };

        /** Status of the expression. */
        public: enum StatusOption
        {
            StatusOptionOutOfDate/** Expression is out of date. */,
            StatusOptionUpToDate/** Expression is up to date. */,
            StatusOptionLocked/** Expression status is locked. */,
            StatusOptionDelayed/** Expression status is delayed. */,
            StatusOptionBroken/** Expression link is broken. */,
            StatusOptionUnknown/** Expression status cannot be determined. */
        };

        private: ExpressionImpl * m_expression_impl;
        private: friend class  _ExpressionBuilder;
        protected: Expression();
        public: ~Expression();
        /**Returns  the equation of the expression in the form: name = right_hand_side.
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Equation
        (
        );
        /**Returns  the right hand side of the expression.
             <br> When setting the property, changes are not applied to the system until
                @link Update::DoUpdate Update::DoUpdate@endlink  is called  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXString RightHandSide
        (
        );
        /**Sets  the right hand side of the expression.
             <br> When setting the property, changes are not applied to the system until
                @link Update::DoUpdate Update::DoUpdate@endlink  is called  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRightHandSide
        (
            const NXString & rightHandSide /** right hand side */ 
        );
        /**Sets  the right hand side of the expression.
             <br> When setting the property, changes are not applied to the system until
                @link Update::DoUpdate Update::DoUpdate@endlink  is called  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetRightHandSide
        (
            const char * rightHandSide /** right hand side */ 
        );
        /**Returns  the value of the expression in base units.  This method must only be used on number expressions.
                When setting the value, any formula in the expression is replaced by a numeric value, even
                if the value is the same as the value that the formula evaluates to.  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: double Value
        (
        );
        /**Sets  the value of the expression in base units.  This method must only be used on number expressions.
                When setting the value, any formula in the expression is replaced by a numeric value, even
                if the value is the same as the value that the formula evaluates to.  
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : None */
        public: void SetValue
        (
            double expressionValue /** expressionvalue */ 
        );
        /** Get the value of the expression, in either base units or the expression's units. This method must only be used on number expressions. @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double GetValueUsingUnits
        (
            NXOpen::Expression::UnitsOption unitsOption /** use base units or expression units */
        );
        /**Returns  the string value of the expression. This must only be used on string expressions.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString StringValue
        (
        );
        /**Returns  the boolean value of the expression. This must only be used on boolean expressions.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool BooleanValue
        (
        );
        /**Returns  the integer value of the expression. This must only be used on integer expressions.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int IntegerValue
        (
        );
        /**Returns  the point value of the expression. This must only be used on point expressions.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d PointValue
        (
        );
        /**Returns  the vector value of the expression. This must only be used on vector expressions.
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Vector3d VectorValue
        (
        );
        /**Returns  whether the expression is user locked. If this property is false, 
                then the expression can be over-ridden from another part. (This
                is the default state for newly created expressions.) If this 
                property is true, you are not allowed to over-ride it.  This corresponds 
                to the interactive option RMB Toggle Interpart Override Lock.

                 <br> Note that if an expression is currently over-ridden, you cannot set
                its lock property.  In this instance, an exception will be thrown.  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsUserLocked
        (
        );
        /**Sets  whether the expression is user locked. If this property is false, 
                then the expression can be over-ridden from another part. (This
                is the default state for newly created expressions.) If this 
                property is true, you are not allowed to over-ride it.  This corresponds 
                to the interactive option RMB Toggle Interpart Override Lock.

                 <br> Note that if an expression is currently over-ridden, you cannot set
                its lock property.  In this instance, an exception will be thrown.  <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUserLocked
        (
            bool isLocked /** is locked */ 
        );
        /** Changes the comment. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void EditComment
        (
            const NXString & newComment /** comment */
        );
        /** Changes the comment. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        void EditComment
        (
            const char * newComment /** comment */
        );
        /**Returns  whether the expression is a geometric expression.  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsGeometricExpression
        (
        );
        /** Returns an array of the features that use the supplied expression.   @return  array of features, or empty array 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Features::Feature *> GetUsingFeatures
        (
        );
        /** Returns the feature that created the supplied expression.
             <br> This is the feature that created it during feature creation.  For example,
            the expression "p0 = x" is owned by feature "BLOCK(0)".  <br> 

             <br> This works with both normal expressions and expressions created by the
            geometric expression feature.  <br>    @return  owning feature or NULL 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Features::Feature * GetOwningFeature
        (
        );
        /** Returns the feature whose rpo_transform created the supplied positioning dimension expression.
             <br> This is the feature that created it during positioning the feature.  For example,
            the expression "p0 = x" is owned by the Transform of feature "Boss(2)".  <br> 
            
             <br> This works with expressions created by the feature with rpo.  <br>    @return  owning rpo feature or NULL 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Features::Feature * GetOwningRpoFeature
        (
        );
        /** Returns the descriptor for the expression, or NULL if there is no descriptor.  Currently, only feature
            expressions have descriptors.  @return  Expression descriptor. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetDescriptor
        (
        );
        /**Returns  the units for the expression.  This must only be used on number expressions.
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Unit * Units
        (
        );
        /**Sets  the units for the expression.  This must only be used on number expressions.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUnits
        (
            NXOpen::Unit * unitType /** unit type */ 
        );
        /**Returns  the type of the expression. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXString Type
        (
        );
        /**Returns  whether the expression is owned by a measurement.  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsMeasurementExpression
        (
        );
        /**Returns  the description of the expression. 
                This can be used to get the "A"::x formatted name for interpart expressions.
            
         <br>  Created in NX5.0.2.  <br>  
         <br> License requirements : None */
        public: NXString Description
        (
        );
        /** Returns all the referencing expressions of the expression  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::Expression *> GetReferencingExpressions
        (
        );
        /**Returns  whether the expression is edit locked.  If this property is false, 
                then the expression can be edited.  (This is the default state for 
                newly created expressions.)  If this property is true, 
                then the expression cannot be edited.  This corresponds 
                to the interactive option RMB Lock Formula/RMB Unlock Formula.
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool IsNoEdit
        (
        );
        /**Sets  whether the expression is edit locked.  If this property is false, 
                then the expression can be edited.  (This is the default state for 
                newly created expressions.)  If this property is true, 
                then the expression cannot be edited.  This corresponds 
                to the interactive option RMB Lock Formula/RMB Unlock Formula.
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetNoEdit
        (
            bool isNoEdit /** is no edit */ 
        );
        /**Returns  whether the expression is update locked.  If this property is false, 
                then the expression can update.  (This is the default state for 
                newly created expressions.)  If this property is true, 
                then the expression cannot update.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsNoUpdate
        (
        );
        /**Sets  whether the expression is update locked.  If this property is false, 
                then the expression can update.  (This is the default state for 
                newly created expressions.)  If this property is true, 
                then the expression cannot update.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNoUpdate
        (
            bool isNoUpdate /** is no update */ 
        );
        /**Returns  whether the expression is an interpart expression. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsInterpartExpression
        (
        );
        /** The source part name and source expression name of the interpart expression 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void GetInterpartExpressionNames
        (
            NXString* partName /** part name */ ,
            NXString* expName /** exp name */ 
        );
        /**Returns  whether the expression formula is locked from user edit.  This can be for a variety of
                reasons.  It can be locked by user,  locked by internal sub system,  part of a measure
                or geometric expression, or locked because of interpart relations. This corresponds
                to the set of expressions governed by the show locked formula expression toggle on the 
                expression dialog. 
            
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsRightHandSideLockedFromEdit
        (
        );
        /**Returns  the @link NXOpen::Expression::StatusOption NXOpen::Expression::StatusOption@endlink  of the expression. 
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression::StatusOption Status
        (
        );
        /** Make the expression constant. This removes any parents, interpart link information and changes the formula to be constant. 
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : None */
        public: void MakeConstant
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
