#ifndef NXOpen_TOOLING_FASTENERASSY_HXX_INCLUDED
#define NXOpen_TOOLING_FASTENERASSY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_FastenerAssy.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_AddReusablePart.hxx>
#include <NXOpen/Tooling_FastenerAssy.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class FastenerAssy;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class ComponentPatternBuilder;
    }
    class Builder;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class Sketch;
    namespace Tooling
    {
        class AddReusablePart;
    }
    namespace Tooling
    {
        class ReusablePocketBuilder;
    }
    namespace Tooling
    {
        class _FastenerAssyBuilder;
        class FastenerAssyImpl;
        /**
            Represents a @link NXOpen::Tooling::FastenerAssy NXOpen::Tooling::FastenerAssy@endlink 
             <br> To create a new instance of this class, use @link NXOpen::Tooling::FastenerAssyCollection::CreateBuilder  NXOpen::Tooling::FastenerAssyCollection::CreateBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.Value </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.XPathOption </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YDirectionOption </td> <td> 
         
        Section </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YPathOption </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.PitchDistance.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.SpanDistance.Value </td> <td> 
         
        100 (millimeters part), 10 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.NCopies.Value </td> <td> 
         
        12 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.PitchAngle.Value </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.PitchDistance.Value </td> <td> 
         
        10 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.SpanAngle.Value </td> <td> 
         
        360 (millimeters part), 360 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.UsePitchOption </td> <td> 
         
        Angle </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.CreateLastStaggered </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.HorizontalRef.RotationAngle.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.IncludeSeedToggle </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.RadialSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.StaggerType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.AnglePitch.Value </td> <td> 
         
        30 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.CountOfInstances.Value </td> <td> 
         
        6 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.DirectionType </td> <td> 
         
        Righthand </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.DistancePitch.Value </td> <td> 
         
        10 (millimeters part), 0.4 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.HelixPitch.Value </td> <td> 
         
        50 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.HelixSpan.Value </td> <td> 
         
        100 (millimeters part), 4 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.NumberOfTurns.Value </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.SizeOption </td> <td> 
         
        CountAngleDistance </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternFill.FillMargin.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternFill.FillOptions </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternFill.SimplifiedBoundaryToggle </td> <td> 
         
        False </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.AlongOrientationOption </td> <td> 
         
        NormalToPath </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.CircularOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.FollowFaceProjDirOption </td> <td> 
         
        PatternPlaneNormal </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.GeneralOrientationOption </td> <td> 
         
        Fixed </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.HelixOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.LinearOrientationOption </td> <td> 
         
        Fixed </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.MirrorOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.OrientationOption </td> <td> 
         
        Fixed </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.PolygonOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.SpiralOrientationOption </td> <td> 
         
        FollowPattern </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PatternType </td> <td> 
         
        Linear </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.NumberOfSides.Value </td> <td> 
         
        6 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSizeOption </td> <td> 
         
        Inscribed </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.NCopies.Value </td> <td> 
         
        4 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.PitchDistance.Value </td> <td> 
         
        25 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.SpaceType </td> <td> 
         
        Offset </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.SpanAngle.Value </td> <td> 
         
        360 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.PitchDistance.Value </td> <td> 
         
        25 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.SpanDistance.Value </td> <td> 
         
        100 (millimeters part), 4 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.CreateLastStaggered </td> <td> 
         
        true </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.SimplifiedLayoutType </td> <td> 
         
        Square </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.StaggerType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.XSpacing.NCopies.Value </td> <td> 
         
        2 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.YSpacing.NCopies.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.DirectionType </td> <td> 
         
        Lefthand </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.NumberOfTurns.Value </td> <td> 
         
        1 (millimeters part), 1 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.RadialPitch.Value </td> <td> 
         
        50 (millimeters part), 2 (inches part) </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.SizeSpiralType </td> <td> 
         
        NumberOfTurns </td> </tr> 

        <tr><td> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.TotalAngle.Value </td> <td> 
         
        360 (millimeters part), 360 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  FastenerAssy : public NXOpen::Builder
        {
            /** Represents adding and editing modes for the fastener assembly*/
            public: enum ModeMethod
            {
                ModeMethodAdd/** Add fastener assembly */ = 1,
                ModeMethodEdit/** Edit fastener assembly */
            };

            /** Represents screw_array type*/
            public: enum StackTypeMethod
            {
                StackTypeMethodScrew/** Screw type */,
                StackTypeMethodTopStack/** Top stack type */,
                StackTypeMethodBottomStack/** Bottom stack type */,
                StackTypeMethodRootNode/** Root node type */,
                StackTypeMethodTopNode/** Top node type */,
                StackTypeMethodBottomNode/** Bottom node type */
            };

            /** Represents the action on the hole menu of the fastener assembly.*/
            public: enum HoleOperation
            {
                HoleOperationAdd/** Click the add hole group menu */,
                HoleOperationRemove/** Click the remove menu */
            };

            /**Represents selection type for position and hole*/
            public: enum SelectionTypeMethod
            {
                SelectionTypeMethodHole/** Hole type */,
                SelectionTypeMethodPosition/** Position type */
            };

            /**Represents selection object type */
            public: enum SelectionObjectMethod
            {
                SelectionObjectMethodTop/** Top object */,
                SelectionObjectMethodBottom/** Bottom object */
            };

            private: FastenerAssyImpl * m_fastenerassy_impl;
            private: friend class  _FastenerAssyBuilder;
            protected: FastenerAssy();
            public: ~FastenerAssy();
            /** Adds top node for the fastener assembly @return  Output the instance of the parent node
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * AddTopNode
            (
                const NXOpen::Point3d & point /** The point of the fastener to assemble */,
                const NXOpen::Point3d & direction /** The direciton of the fastener to assemble */,
                NXOpen::NXObject * selObject /** The default cylindrical face of the hole data, selObject type should be FACE*/,
                int index /** The hole index in the fastener assembly */
            );
            /** Sets the diameter for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleDiameter
            (
                double diameter /** The diameter of the hole data */,
                int index /** The hole index in the fastener assembly*/
            );
            /** Sets the direction for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleDirection
            (
                const NXOpen::Point3d & direction /** The direcion of the hole data */,
                int index /** The hole index in the fastener assembly*/
            );
            /** Sets the side cylindrical faces for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleSideCylindricalFaces
            (
                NXOpen::NXObject * sideCylFace /** The side cylinderical Face of the hole data */,
                int index /** The hole index in the fastener assembly, sideCylFace type should be FACE */
            );
            /** Sets the flag to indicate whether to create pocket when adding the fastener
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCreatePocket
            (
                bool create /**Whether the fastener assembly is created pocket*/
            );
            /** Sets the faces for the hole in the fastener assembly 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleFaces
            (
                NXOpen::NXObject * holeFace /** The hole face of the hole data, holeFace type is FACE*/,
                int index /** The hole index in the fastener assembly */
            );
            /** Adds stack array
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddScrewArray
            (
                const NXString & krxFile /** The krx file of the stack */,
                const NXString & lengthMatch /** The length match from fastener data and given node */,
                const NXString & libPath /** Ask fastener library path */,
                const NXString & libName /** Ask fastener library name */,
                const NXString & fullPath /** Stack file full path */,
                int index /** The hole index in the fastener assembly */,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod type /** The stack type method*/
            );
            /** Adds stack array
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void AddScrewArray
            (
                const char * krxFile /** The krx file of the stack */,
                const char * lengthMatch /** The length match from fastener data and given node */,
                const char * libPath /** Ask fastener library path */,
                const char * libName /** Ask fastener library name */,
                const char * fullPath /** Stack file full path */,
                int index /** The hole index in the fastener assembly */,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod type /** The stack type method*/
            );
            /** Adds new part for the parent node
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddParentNewPart
            (
                const NXString & fileName /**New fastener assembly parent node name*/,
                int index /**The hole index in the fastener assembly*/,
                bool parentNode /**Whether the fastener assembly node is parent*/
            );
            /** Adds new part for the parent node
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void AddParentNewPart
            (
                const char * fileName /**New fastener assembly parent node name*/,
                int index /**The hole index in the fastener assembly*/,
                bool parentNode /**Whether the fastener assembly node is parent*/
            );
            /** Adds item description for the part
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetItemName
            (
                const NXString & partName /**The part name*/,
                const NXString & itemName /**Item name*/
            );
            /** Adds item description for the part
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetItemName
            (
                const char * partName /**The part name*/,
                const char * itemName /**Item name*/
            );
            /**Sets the position for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHolePosition
            (
                const NXOpen::Point3d & position /** The position of the hole data */,
                int index /** The hole index in the fastener assembly */
            );
            /**Sets the default cylindrical face for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleDefaultCylindricalFace
            (
                NXOpen::NXObject * defaultCylFaces /** The default cylindrical faces of the hole data, defaultCylFaces type should be FACE*/,
                int index /** The hole index in the fastener assembly */
            );
            /**Sets the origin position for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleOriginPosition
            (
                const NXOpen::Point3d & originposition /** The origin position of the hole data */,
                int index /** The hole index in the fastener assembly */
            );
            /**Sets the height for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleHeight
            (
                double height /** The height of the hole data */,
                int index /** The hole index in the fastener assembly */
            );
            /**Sets the origin height for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleOriginHeight
            (
                double originheight /** The origin height of the hole data */,
                int index /** The hole index in the fastener assembly */
            );
            /**Sets the extent length for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFastenerExtentLength
            (
                double extentLength /** The extent Length of the fastener assembly */
            );
            /**Sets the origin diameter for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHoleOriginDiameter
            (
                double originDiameter /** The origin diameter of the hole data */,
                int index /** The hole index in the fastener assembly */
            );
            /**Sets the selection type for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFastenerSelectionType
            (
                NXOpen::Tooling::FastenerAssy::SelectionTypeMethod selectionType /** The selection type to add the fastener assembly */
            );
            /**Gets the selection type for the hole in the fastener assembly @return  The selection type to add the fastener assembly 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::FastenerAssy::SelectionTypeMethod GetFastenerSelectionType
            (
            );
            /** Updates the fastener length
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateFastenerLength
            (
                bool adjustLength /** Whether to adjust length in the fastener assembly*/
            );
            /**Creates the same assembly data type
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateSameAssemblyData
            (
                int addedIndex /** find the the hole index with the same parameter and node type in the fastener assembly */,
                int index /** the hole index in the fastener assembly*/
            );
            /**Erases stack array
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void EraseStackArray
            (
                int parentIndex /** Parent index */,
                int inx /** Child index */,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod type /** The stack type method */
            );
            /**Erases fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void EraseFastenerAssembly
            (
                int parentInx /** parent index */,
                bool removeParent /** whether to remove parent instance*/,
                bool removeScrew /** whether to remove screw*/,
                bool removeStack /** whether to remove top stack and bottom stack*/,
                bool removeArray /** whether to remove component array*/,
                bool removeBuilder /** whether to remove builder*/,
                bool initscrewBuilder /** whether to initialize screw builder*/,
                bool initstackBuilder /** whether to initialize stack builder*/,
                bool removeData /** whether to remove data*/
            );
            /**Erases the data (hole and assembly data) in fastener assembly 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void EraseFastenerSetupData
            (
            );
            /**Creates fastener assembly constraint
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateFastenerConstraints
            (
                int index /** the hole index in the fastener assembly to create constraints*/
            );
            /**Removes fastener assembly constraint
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveFastenerConstraints
            (
                int index /** the hole index in the fastener assembly to delete constraints*/
            );
            /** Sets the side planar faces for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSidePlanarFaces
            (
                NXOpen::NXObject * sidePlanarFace /** The side planar face of the hole data, sidePlanarFace type should be FACE*/,
                int index /** The hole index in the fastener assembly*/
            );
            /** Sets the default planar face for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultPlanarFaces
            (
                NXOpen::NXObject * defaultPlanarFace /** The default planar face of the hole data, defaultPlanarFace type should be FACE */,
                int inx /** The hole index in the fastener assembly*/
            );
            /** Sets the instance feature face for the hole in the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInstanceFeatureFaces
            (
                NXOpen::NXObject * instanceFeature /** The instance feature face of the hole data, instanceFeature type should be FACE */,
                int inx /** The hole index in the fastener assembly*/
            );
            /** Adjusts the fastener assembly length
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AdjustFastenerLength
            (
                int parentIndex /** parent index */,
                int childIndex /** child index */,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod nodeType /** the stack type method */
            );
            /** Updates fastener stacks
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateFastenerStacks
            (
                int parentIndex /** parent index */,
                bool updateScrew /** whether to update screw*/,
                bool updatePocket /** whether to update pocket*/
            );
            /** Updates the hole data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateHoleData
            (
                int inx /** parent index */,
                double originheight /** origin height in hole data */,
                const NXOpen::Point3d & originPoint /** origin point in hole data */,
                bool threadhole /** whether the hole is thread hole*/,
                bool blindhole /** whether the hole is blind hole*/
            );
            /** Creates reusable pocket
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateReusablePocket
            (
                bool commit /** whether to create pocket*/
            );
            /** Deletes reusable pocket
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteReusablePocket
            (
            );
            /** Selects the screw size
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SelectScrewSize
            (
                int inx /** parent index */,
                double diameter /** diameter in hole data */,
                double origindiameter /** origin diameter in hole data */,
                bool selDiameter /** whether to select diameter*/
            );
            /** Creates new reusable builder @return  the new @link NXOpen::Tooling::AddReusablePart NXOpen::Tooling::AddReusablePart@endlink  instance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AddReusablePart * CreateReusableBuilder
            (
                int parentIndex /** parent node index in the fastener assembly */,
                int childIndex /** child node index in the fastener assembly */,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod nodeType /** the stack type method */
            );
            /** Substitutes fastener stack
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SubstituteFastenerStack
            (
                int parentIndex /** parent node index in the fastener assembly*/,
                int childIndex /** child node index in the fastener assembly*/,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod nodeType /** the stack type method */,
                const NXString & partFile /** part file */,
                const NXString & krxFile /** krx file */,
                const NXString & libName /** library name */,
                const NXString & pathInLib /** library path */,
                const NXString & lengthMatch /** the length match from fastener data and given node*/,
                const NXString & fullPath /** screw file full path */
            );
            /** Substitutes fastener stack
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SubstituteFastenerStack
            (
                int parentIndex /** parent node index in the fastener assembly*/,
                int childIndex /** child node index in the fastener assembly*/,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod nodeType /** the stack type method */,
                const char * partFile /** part file */,
                const char * krxFile /** krx file */,
                const char * libName /** library name */,
                const char * pathInLib /** library path */,
                const char * lengthMatch /** the length match from fastener data and given node*/,
                const char * fullPath /** screw file full path */
            );
            /** Saves UDO data for fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveUdoData
            (
            );
            /** Sets the fastener mode
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFastenerMode
            (
                NXOpen::Tooling::FastenerAssy::ModeMethod modeMethod /** mode method */ 
            );
            /** Gets the fastener mode @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::FastenerAssy::ModeMethod GetFastenerMode
            (
            );
            /**Erases the assembly data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void EraseAssemblyData
            (
                int parentIndex /** parent index */
            );
            /**Updates the hole positon for position method
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateHolePostion
            (
                int parentIndex /** parent node index */,
                const NXOpen::Point3d & dirOne /** direction in hole data */,
                const NXOpen::Point3d & tempPnt /** position in hole data */,
                const NXOpen::Point3d & pointOne /** origin position in hole data */,
                double height /** height in hole data */,
                double orignHeight /** origin height in hole data */,
                double offSetDistance /** offset distance in hole data */
            );
            /** Sets the reuse builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReuseBuilder
            (
                int index /** parent node index in fastener assembly*/,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod nodeType /** the stack type method */,
                int childIndex /** child hole index in fastener assembly*/,
                NXOpen::Assemblies::Component * partOcc /** new part occruance */
            );
            /** Renames the parent node
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RenameParentNode
            (
                int index /** parent node index in fastener assembly*/,
                const NXString & newname /** new name for the parent node */
            );
            /** Renames the parent node
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void RenameParentNode
            (
                int index /** parent node index in fastener assembly*/,
                const char * newname /** new name for the parent node */
            );
            /** Creates array hole data for the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateArrayHole
            (
                int index /** the hole index in the fastener assembly */
            );
            /** Deletes array hole data for the fastener assembly
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteArrayHole
            (
                int index /** the hole index in the fastener assembly */
            );
            /** Inits pocket builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void InitPocketBuilder
            (
            );
            /**Updates fastener assembly according to the new extends
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateTopBottomStacks
            (
                int index /** parent node index in fastener assembly*/,
                NXOpen::Tooling::FastenerAssy::SelectionObjectMethod type /** top object or bottom object type */,
                bool isSameFace /** whether the fastener assembly is same face*/,
                NXOpen::NXObject * face /** top or bottom face */
            );
            /**Reads fastener assembly configuration data from the hole data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ReadAssemblyConfigure
            (
                int holeNum /**hole num*/,
                NXOpen::Assemblies::Component * partOcc /**parent node part occurance*/
            );
            /**Sets the extent length for the fastener assembly data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssemblyExtentLength
            (
                int index /**hole index in fastener assembly*/,
                double extentLength /** The extent Length of the fastener assembly */
            );
            /**Updates default standard hole data for the fastener assembly configuration
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateDefaultStandard
            (
                int index /** The hole index in hole map data*/,
                const NXString & standard /** The default hole standard type in the assembly configuration */,
                const NXString & form /** The default hole form in the assembly configuration */,
                const NXString & type /** The default hole screw type in the assembly configuration */
            );
            /**Updates default standard hole data for the fastener assembly configuration
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void UpdateDefaultStandard
            (
                int index /** The hole index in hole map data*/,
                const char * standard /** The default hole standard type in the assembly configuration */,
                const char * form /** The default hole form in the assembly configuration */,
                const char * type /** The default hole screw type in the assembly configuration */
            );
            /**Removes the selected hole from the fastener setup data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveSelectedHole
            (
            );
            /**Add the removal hole index in the fastener setup data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddRemovalHoleIndex
            (
                int index /** The hole index in the fastener assembly to be removed*/
            );
            /**Updates the fastener assembly after changing stacks or changing stack properties
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateStackPosition
            (
                int parentIndex /**parent index */,
                int childIndex /**child index */,
                NXOpen::Tooling::FastenerAssy::StackTypeMethod nodeType /** node type */,
                double deltaLength /** the stack length to be changed*/
            );
            /** Sets the reusable pocket builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReusablePocketBuilder
            (
                NXOpen::Tooling::ReusablePocketBuilder * pocketTag /** The reusable component pocket builder*/
            );
            /** Gets the reusable pocket builder @return  The reusable component pocket builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ReusablePocketBuilder * GetReusablePocketBuilder
            (
            );
            /**Erases the fastener assembly data, including the hole data and assembly data in the fastener setup data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void EraseFastenerAssemblyData
            (
                int index /** The hole index in the fastener assembly to be removed*/
            );
            /** Sets the blind hole for the hole in the fastener assembly
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBlindHole
            (
                int inx /** parent index */,
                bool blindhole /** whether the hole is blind hole*/
            );
            /**Returns  the positioning feature that needed for fastener assembly 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Sketch * PositioningFeature
            (
            );
            /**Sets  the positioning feature that needed for fastener assembly 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPositioningFeature
            (
                NXOpen::Sketch * sketch /** Positioning feature */
            );
            /** Create the pattern component when the positioining pattern sketch feature is not exsit; edit pattern component when the positioining pattern feature is exsit
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePatternComponent
            (
                bool createPattern /** Flag to decide whether to create pattern component or edit, set flag as true to create and set flag false to edit */
            );
            /** Find the positioning feature set by pattern sketch  @return  Positioning feature set 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * FindPositioningFeatureSet
            (
            );
            /** Keep the first drop point position 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveDropPointPosition
            (
                const NXOpen::Point3d & tempPnt /** the first drop point position in hole data */
            );
            /**Sets  the current component pattern builder
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentPatternBuilder
            (
                NXOpen::Assemblies::ComponentPatternBuilder * patternComponentBuilderTag /** The reusable component pattern builder*/
            );
            /**Returns  the current component pattern builder
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentPatternBuilder * ComponentPatternBuilder
            (
            );
            /** Create positioning feature on the given position
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePositioningFeatureOnPoint
            (
                NXOpen::NXObject * selobj /** top or bottom face */,
                const NXOpen::Point3d & inputPosition /** The input position*/,
                bool centerFace /** whether to use face center as location*/
            );
            /** Offset the positioning feature
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void OffsetPositioningFeature
            (
                double offsetValue /** the offset distance of the positionging feature*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
