#ifndef NXOpen_CAE_POSTANNOTATIONBUILDER_HXX_INCLUDED
#define NXOpen_CAE_POSTANNOTATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostAnnotationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostAnnotation.hxx>
#include <NXOpen/CAE_PostAnnotationBuilder.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostAnnotationBuilder;
    }
    namespace CAE
    {
        class PostAnnotation;
    }
    namespace CAE
    {
        class PostAnnotationBuilderImpl;
        /**
                Builder to create @link NXOpen::CAE::PostAnnotation NXOpen::CAE::PostAnnotation@endlink  from @link NXOpen::CAE::Post NXOpen::CAE::Post@endlink 

                <br/>User can pass entities which are same as current postview location. The entities have to be passed in following manner
            <ul>
                <li>Elemental Result</li> - Use @link NXOpen::CAE::PostAnnotationBuilder::SetElements NXOpen::CAE::PostAnnotationBuilder::SetElements@endlink  only. 
                <li>Nodal Result</li> - Use @link NXOpen::CAE::PostAnnotationBuilder::SetNodes NXOpen::CAE::PostAnnotationBuilder::SetNodes@endlink  only. 
                <li>Element-Nodal Result</li> - Use @link NXOpen::CAE::PostAnnotationBuilder::SetElements NXOpen::CAE::PostAnnotationBuilder::SetElements@endlink  and @link NXOpen::CAE::PostAnnotationBuilder::SetNodes NXOpen::CAE::PostAnnotationBuilder::SetNodes@endlink . 
                Number of entities should be same for both.
                <li>Element-Face Result</li> - Use @link NXOpen::CAE::PostAnnotationBuilder::SetElements NXOpen::CAE::PostAnnotationBuilder::SetElements@endlink  and @link NXOpen::CAE::PostAnnotationBuilder::SetEdgeFace NXOpen::CAE::PostAnnotationBuilder::SetEdgeFace@endlink . 
                Number of entities should be same for both.
                <li>Element-Edge Result</li> - Use @link NXOpen::CAE::PostAnnotationBuilder::SetElements NXOpen::CAE::PostAnnotationBuilder::SetElements@endlink  and @link NXOpen::CAE::PostAnnotationBuilder::SetEdgeFace NXOpen::CAE::PostAnnotationBuilder::SetEdgeFace@endlink . 
                Number of entities should be same for both.
                <li>Element-Face-Node Result</li> - Use @link NXOpen::CAE::PostAnnotationBuilder::SetElements NXOpen::CAE::PostAnnotationBuilder::SetElements@endlink , @link NXOpen::CAE::PostAnnotationBuilder::SetNodes NXOpen::CAE::PostAnnotationBuilder::SetNodes@endlink  
                and @link NXOpen::CAE::PostAnnotationBuilder::SetEdgeFace NXOpen::CAE::PostAnnotationBuilder::SetEdgeFace@endlink . Number of entities should be same for all three.
                <li>Element-Edge-Node Result</li> - Use @link NXOpen::CAE::PostAnnotationBuilder::SetElements NXOpen::CAE::PostAnnotationBuilder::SetElements@endlink , @link NXOpen::CAE::PostAnnotationBuilder::SetNodes NXOpen::CAE::PostAnnotationBuilder::SetNodes@endlink  
                and @link NXOpen::CAE::PostAnnotationBuilder::SetEdgeFace NXOpen::CAE::PostAnnotationBuilder::SetEdgeFace@endlink . Number of entities should be same for all three.
            </ul>
                <br/>Though entities are being passed separately, they work as a set, so no of entities must be same for all.
            <br/>
            <ul>
            <li>Cylic-Symmetric Result</li> Number of Sectors should be same as Number of entities
            <li>Axis-Symmetric Result</li> Number of Angles should be same as number of entities.
            </ul>
             <br> To obtain an instance of this class use CAE::Post  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostAnnotationBuilder : public NXOpen::TransientObject
        {
            /** select option to define the annotation type */
            public: enum Type
            {
                TypeEntity/** entity */ ,
                TypeMin/** min */ ,
                TypeMax/** max */ ,
                TypeUserloc/** userloc */ 
            };

            private: PostAnnotationBuilderImpl * m_postannotationbuilder_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostAnnotationBuilder(void *ptr);
            /// \endcond 
            /** Set the annotation type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetAnnotationType
            (
                NXOpen::CAE::PostAnnotationBuilder::Type type /** type */ 
            );
            /** Set the annotation name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /** Set the annotation name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            void SetName
            (
                const char * name /** name */ 
            );
            /** Set the element ids for which annotation is defined 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetElements
            (
                const std::vector<int> & elementIds /** elementids */ 
            );
            /** Set the node ids for which annotation is defined 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetNodes
            (
                const std::vector<int> & nodeIds /** nodeids */ 
            );
            /** Set the edge or face id for which annotation is defined 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetEdgeFace
            (
                const std::vector<int> & subIds /** subids */ 
            );
            /** Set the sector ids for cyclic-symmetric model for which annotation is defined 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetSectors
            (
                const std::vector<int> & sectorIds /** sectorids */ 
            );
            /** Set the section angles for axis-symmetric model for which annotation is defined. The list of sections depend on current postview and 
                    how it is created using @link NXOpen::CAE::AxiSymmetricParameters NXOpen::CAE::AxiSymmetricParameters@endlink 
                     
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetSectionAngles
            (
                const std::vector<double> & sectionAngles /** sectionangles */ 
            );
            /** Set the number of min/max annotation for min/max type of annotation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetNumMinMax
            (
                int numMinMax /** numminmax */ 
            );
            /** Set weather entity is to be updated in case of result update for min/max annotation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetUpdateEntityOnResultChange
            (
                bool update /** update */ 
            );
            /** Set the coordinates for user annotation
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetCoordinate
            (
                double xcord /** xcord */ ,
                double ycord /** ycord */ 
            );
            /** Set the user text 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetUsertext
            (
                const std::vector<NXString> & usertext /** Additional text in each box*/
            );
            /** Commits the annotation to create annotation object  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostAnnotation * CommitAnnotation
            (
            );
            /** Frees the object from memory.  After this method is called,
                        it is illegal to use the object. In .NET, this method is automatically
                        called when the object is deleted by the garbage collector. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostAnnotationBuilder();
            /** Deletes the annotation builder. User must call @link TransientObject::Dispose TransientObject::Dispose@endlink  after calling this method. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void Delete
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
