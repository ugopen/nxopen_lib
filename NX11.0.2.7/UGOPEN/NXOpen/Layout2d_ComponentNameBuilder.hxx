#ifndef NXOpen_LAYOUT2D_COMPONENTNAMEBUILDER_HXX_INCLUDED
#define NXOpen_LAYOUT2D_COMPONENTNAMEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layout2d_ComponentNameBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Layout2d_ComponentNameBuilder.hxx>
#include <NXOpen/Layout2d_Types.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_layout2d_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Layout2d
    {
        class ComponentNameBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace PDM
    {
        class PartOperationCreateBuilder;
    }
    namespace Layout2d
    {
        class _ComponentNameBuilderBuilder;
        class ComponentNameBuilderImpl;
        /** This class is used to construct the component name and part file name block, if it is in
                manage mode, we also have item number, item revision and item name . 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_LAYOUT2DEXPORT  ComponentNameBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: ComponentNameBuilderImpl * m_componentnamebuilder_impl;
            private: friend class  _ComponentNameBuilderBuilder;
            protected: ComponentNameBuilder();
            public: ~ComponentNameBuilder();
            /**Returns  the JA method support for accessing and setting Component Name value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the JA method support for accessing and setting Component Name value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the JA method support for accessing and setting Component Name value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the JA method support for accessing and setting Component part file mame value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets  the JA method support for accessing and setting Component part file mame value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartName
            (
                const NXString & partName /** partname */ 
            );
            /**Sets  the JA method support for accessing and setting Component part file mame value,
                        NOTE: Client must free the returned TEXT_p_t* with TEXT_free 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetPartName
            (
                const char * partName /** partname */ 
            );
            /**Returns  the location type of the component indicating local, native or team center  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Layout2d::Layout2dDefinitionLocation Location
            (
            );
            /**Sets  the location type of the component indicating local, native or team center  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLocation
            (
                NXOpen::Layout2d::Layout2dDefinitionLocation location /** location */ 
            );
            /** Sets @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartOperationBuilder
            (
                NXOpen::PDM::PartOperationCreateBuilder * partOperationBuilder /** partoperationbuilder */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
