#ifndef NXOpen_FACET_FACETEDFACE_HXX_INCLUDED
#define NXOpen_FACET_FACETEDFACE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Facet_FacetedFace.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/IParameterizedSurface.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_facet_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Facet
    {
        class FacetedFace;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class DisplayableObject;
    namespace Facet
    {
        class FacetedBody;
    }
    namespace Facet
    {
        class FacetedEdge;
    }
    class INXObject;
    class IParameterizedSurface;
    namespace Facet
    {
        class _FacetedFaceBuilder;
        class FacetedFaceImpl;
        /** Represents a faceted face. Instances of this class may be
                generated when recording a journal, but they cannot be created
                directly. 
            
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FACETEXPORT  FacetedFace : public NXOpen::DisplayableObject, public virtual NXOpen::IParameterizedSurface
        {
            /** Facet Face type
             <br>  Created in NX8.5.1.  <br>  
            */
            public: enum FacetedfaceType
            {
                FacetedfaceTypeUndefined/** Undefined body type */,
                FacetedfaceTypePlanar/** Planar face */,
                FacetedfaceTypeCylindrical/** Cylindrical face */,
                FacetedfaceTypeConical/** Conical face */,
                FacetedfaceTypeSpherical/** Spherical face */,
                FacetedfaceTypeToroidal/** Face from toroid */,
                FacetedfaceTypeParametric/** Parametric face */
            };

            private: FacetedFaceImpl * m_facetedface_impl;
            private: friend class  _FacetedFaceBuilder;
            protected: FacetedFace();
            public: ~FacetedFace();
            /**Returns  the type of the face 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::FacetedFace::FacetedfaceType FaceType
            (
            );
            /** Returns the number of edges in the faceted face  @return  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: int GetNumberOfEdges
            (
            );
            /** Returns the edges connected to the face  @return  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Facet::FacetedEdge *> GetEdges
            (
            );
            /** Returns the facet body containing this facet face  @return  
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::FacetedBody * GetBody
            (
            );
            /** Returns the surface information for this face 
                   
                        tag_t    faceted_face     : The input edge tag for which face information is required.
                        PNT3_p_t position         : Plane: Position on Plane
                                                    Origin for other
                        PNT3_p_t dir              : Plane: Normal direction
                                                    Axis for others.
                        double   *radius          : Not applicable for planes
                                                    Cylinder: Radius of Cylinder, 
                                                    Sphere: Radius of Sphere
                                                    Cone: Radius of Circle on the cone and in the plane passing through the position.
                        double   *radius_or_angle : Cone: Half Angle. 
                        logical  *sense           : Indicates the sense of normal
                    
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: void GetSurfaceData
            (
                NXOpen::Point3d* position /** position */ ,
                NXOpen::Point3d* dir /** dir */ ,
                double* radius /** radius */ ,
                double* radiusOrAngle /** radius or angle */ ,
                bool* sense /** sense */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
