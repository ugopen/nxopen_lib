#ifndef NXOpen_DIE_ADDENDUMSECTIONBUILDER_HXX_INCLUDED
#define NXOpen_DIE_ADDENDUMSECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_AddendumSectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die_AddendumSectionBuilder.hxx>
#include <NXOpen/Die_DieAttributesBuilder.hxx>
#include <NXOpen/Die_DieLimitsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class AddendumSectionBuilder;
    }
    class Curve;
    namespace Die
    {
        class DieAttributesBuilder;
    }
    namespace Die
    {
        class DieLimitsBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveLengthData;
    }
    class Plane;
    class Point;
    class ScCollector;
    class Section;
    class SelectDisplayableObjectList;
    namespace Die
    {
        class _AddendumSectionBuilderBuilder;
        class AddendumSectionBuilderImpl;
        /**
            Represents a @link NXOpen::Die::AddendumSectionBuilder NXOpen::Die::AddendumSectionBuilder@endlink  which is used to create or edit an addendum section.
             <br> To create a new instance of this class, use @link NXOpen::Die::DieCollection::CreateAddendumSectionBuilder  NXOpen::Die::DieCollection::CreateAddendumSectionBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  AddendumSectionBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** The settings indicating the location of the section being created. */
            public: enum SectionLocationType
            {
                SectionLocationTypeAtPoint/** Create section at a point. */,
                SectionLocationTypeAtPlane/** Create section at a plane. */,
                SectionLocationTypeWithCurve/** Create section by approximating curves. */
            };

            /** The settings to indicate the section shape. */
            public: enum SectionShapeType
            {
                SectionShapeTypeBasic/** Section consists of all segments in a step like shape. */,
                SectionShapeTypeDrawBar/** Section consists of all segments in a draw bar shape. */,
                SectionShapeTypeSimple/** Section consists of trim ledge, punch radius, and second stretch wall segments. */,
                SectionShapeTypeChannel/** Section consists of all segments in a channel shape. */,
                SectionShapeTypeBlend/** Section consists of a single radius type segment to define the blend shape. */,
                SectionShapeTypeExtension/** Section consists of a plus segment only. */,
                SectionShapeTypeSystem/** Section shape determined by blending neighboring sections. */,
                SectionShapeTypeUserDefined/** Section shape is user defined. */,
                SectionShapeTypeReuse/** Section shape is read from reuse library. */,
                SectionShapeTypeBlank/** No section shape. */
            };

            /** The settings to indicate the section orientation. */
            public: enum SectionOrientationType
            {
                SectionOrientationTypeDefault/** Orient perpendicular to tangency curve. */,
                SectionOrientationTypeThreeDPerpendicular/** Orient 3D perpendicular to tangency curve */,
                SectionOrientationTypeConjugate/** Use conjugate orientation. */,
                SectionOrientationTypeIsoparametric/** Orient along isoparametric line of closest face. */,
                SectionOrientationTypeIncidentEdge/** Orient from incident edge. */,
                SectionOrientationTypeBlank/** No orientation. */
            };

            /** The settings to indicate the surface type. */
            public: enum SurfaceBuildType
            {
                SurfaceBuildTypeNoSurface/** Do not create a surface. */,
                SurfaceBuildTypeSectional/** Create sectional sweep surface. */,
                SurfaceBuildTypeCurveMesh/** Create curve mesh surface. */,
                SurfaceBuildTypeChannelTunnelCap/** Create channel tunnel cap surface. */,
                SurfaceBuildTypeMultipleFaceBlend/** Create multiple face blend surface. */,
                SurfaceBuildTypeWallsOnly/** Create walls only surface. */,
                SurfaceBuildTypeDiskFaceBlend/** Create disc blend surface. */,
                SurfaceBuildTypeSphereFaceBlend/** Create spherical blend surface. */
            };

            /** The settings to indicate the segment type to update. */
            public: enum SegmentType
            {
                SegmentTypePlus/** Update plus segment. */,
                SegmentTypePunch/** Update punch segment. */,
                SegmentTypeFirstStretchWall/** Update first stretch wall segment. */,
                SegmentTypeReverse/** Update reverse segment. */,
                SegmentTypeTrimLedge/** Update trim ledge segment. */,
                SegmentTypeDiePunch/** Update die punch segment. */,
                SegmentTypeSecondStretchWall/** Update second stretch wall segment. */,
                SegmentTypeDieReverse/** Update die reverse segment. */,
                SegmentTypeFlatToBead/** Update flat to bead segment. */
            };

            /** The settings to indicate which parameter of the segment to lock. */
            public: enum SegmentParameterType
            {
                SegmentParameterTypeLength/** The length parameter of a straight segment. */,
                SegmentParameterTypeAngle/** The angle parameter of a straight segment. */,
                SegmentParameterTypeRadius/** The radius parameter of an arc segment. */,
                SegmentParameterTypeArcLength/** The arc length parameter of an arc segment. */
            };

            private: AddendumSectionBuilderImpl * m_addendumsectionbuilder_impl;
            private: friend class  _AddendumSectionBuilderBuilder;
            protected: AddendumSectionBuilder();
            public: ~AddendumSectionBuilder();
            /**Returns  the location where the section will be created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::AddendumSectionBuilder::SectionLocationType LocationType
            (
            );
            /**Sets  the location where the section will be created. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetLocationType
            (
                NXOpen::Die::AddendumSectionBuilder::SectionLocationType locationType /** locationtype */ 
            );
            /**Returns  the section shape. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::AddendumSectionBuilder::SectionShapeType SectionShape
            (
            );
            /**Sets  the section shape. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSectionShape
            (
                NXOpen::Die::AddendumSectionBuilder::SectionShapeType sectionShape /** sectionshape */ 
            );
            /**Returns  the section orientation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::AddendumSectionBuilder::SectionOrientationType SectionOrientation
            (
            );
            /**Sets  the section orientation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSectionOrientation
            (
                NXOpen::Die::AddendumSectionBuilder::SectionOrientationType sectionOrientation /** sectionorientation */ 
            );
            /**Returns  the color and string attributes of the section. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieAttributesBuilder * Attributes
            (
            );
            /**Returns  the origin point where the section will be located. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * SectionPoint
            (
            );
            /**Sets  the origin point where the section will be located. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSectionPoint
            (
                NXOpen::Point * sectionPoint /** sectionpoint */ 
            );
            /**Returns  the constraint curve to extend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Curve * CurveToExtend
            (
            );
            /**Sets  the constraint curve to extend. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCurveToExtend
            (
                NXOpen::Curve * curve /** curve */ 
            );
            /**Returns  the edited constraint curve. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Curve * EditedConstraintCurve
            (
            );
            /**Sets  the edited constraint curve. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEditedConstraintCurve
            (
                NXOpen::Curve * curve /** curve */ 
            );
            /** Cuts section in order to be pasted at another location. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CutSection
            (
                NXOpen::Curve * section /** Section to cut. */,
                bool copyPlaneData /** Indicates whether to copy the orientation plane of the section. */
            );
            /** Trims or extends constraint curve. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void TrimExtendConstraintCurve
            (
                NXOpen::Section * constraintCurve /** Constraint curve to modify */
            );
            /** Deletes the @link NXOpen::Section NXOpen::Section@endlink  used for extended constraint curve.  @return  @link NXOpen::Section NXOpen::Section@endlink  to delete. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * DeleteExtendSection
            (
            );
            /** Copies addendum section in order to be pasted at another location. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CopySection
            (
                NXOpen::Curve * section /** Section to copy. */,
                bool copyPlaneData /** Indicates whether to copy the orientation plane of the section. */
            );
            /** Initializes environment to start editing parameters of a section.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void InitializeEditParameters
            (
                NXOpen::Curve * section /** Section to edit. */
            );
            /** Updates length or angle value of a segment.  @return  Computed flange length value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: double UpdateSegment
            (
                bool temporary /** Indicates that change to section is temporary in that @link NXOpen::Die::AddendumSectionBuilder::ResetSection NXOpen::Die::AddendumSectionBuilder::ResetSection@endlink  can be called to undo changes.  */,
                NXOpen::Curve * section /** Section to update. */,
                NXOpen::Die::AddendumSectionBuilder::SegmentType segment /** Segment to update. */,
                double lengthRadius /** Value for the new Length/Radius of the segment. */,
                double angle /** Value for the angle of the segment. */
            );
            /** Lock a segment parameter value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void LockSegment
            (
                NXOpen::Curve * section /** Section to update. */,
                NXOpen::Die::AddendumSectionBuilder::SegmentType segment /** Segment to update. */,
                NXOpen::Die::AddendumSectionBuilder::SegmentParameterType type /** Segment parameter to lock. */
            );
            /** Unlock a segment parameter value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UnlockSegment
            (
                NXOpen::Curve * section /** Section to update. */,
                NXOpen::Die::AddendumSectionBuilder::SegmentType segment /** Segment to update. */,
                NXOpen::Die::AddendumSectionBuilder::SegmentParameterType type /** Segment parameter to unlock. */
            );
            /** Resets the section to the last saved state. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ResetSection
            (
                NXOpen::Curve * section /** Section to reset. */
            );
            /** Edit radius value of blend section. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void EditBlendSection
            (
                NXOpen::Curve * section /** Blend section to edit. */,
                double radius /** New radius value. */
            );
            /** Replaces the current section with the edited one. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ReplaceSectionCurve
            (
                NXOpen::Curve * section /** Section to edit. */
            );
            /** Cleans up environment after editing parameters of a section.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void TerminateEditParameters
            (
                NXOpen::Curve * section /** Edited section. */
            );
            /** Updates section after editing segments via @link NXOpen::Die::AddendumSectionBuilder::UpdateSegment NXOpen::Die::AddendumSectionBuilder::UpdateSegment@endlink . 
                        This makes permanent the temporary changes so that any future calls to @link NXOpen::Die::AddendumSectionBuilder::ResetSection NXOpen::Die::AddendumSectionBuilder::ResetSection@endlink 
                        will reset the section to this state.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateSection
            (
                NXOpen::Curve * section /** Section being edited. */
            );
            /**Returns  the constraint curve to edit.  This function will read the objects using @link NXOpen::Die::AddendumSectionBuilder::ConstraintCurve NXOpen::Die::AddendumSectionBuilder::ConstraintCurve@endlink .
                        and if needed create a non-associative curve to be used by the edit curve functions.  The only case where it will
                        not create a curve is if there is only one non-associative spline on the selection.             
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Curve * ConstraintCurveToEdit
            (
            );
            /**Returns  the object used to extend the constraint curve which is accessed via @link NXOpen::Die::AddendumSectionBuilder::ConstraintCurve NXOpen::Die::AddendumSectionBuilder::ConstraintCurve@endlink . 
                        Need to call function @link NXOpen::Die::AddendumSectionBuilder::CreateExtendSection NXOpen::Die::AddendumSectionBuilder::CreateExtendSection@endlink  before calling this function.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::GeometricUtilities::CurveLengthData * ExtendData
            (
            );
            /**Returns  the distance to extend the start of the constraint curve. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * ExtendStartDistance
            (
            );
            /**Returns  the distance to extend the end of the constraint curve. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * ExtendEndDistance
            (
            );
            /** Creates a @link NXOpen::Section NXOpen::Section@endlink  object containing the extended constraint curve.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * CreateExtendSection
            (
            );
            /** Replaces the constraint curve with an edited curve. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ReplaceConstraintCurve
            (
                NXOpen::Curve * editedCurve /** New edited curve to replace existing constraint curve. */
            );
            /** Moves addendum section to a new location. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void MoveSectionOrigin
            (
                NXOpen::Curve * section /** Section to move. */,
                const NXOpen::Point3d & newOrigin /** Point Coordinates of new origin. */,
                int useSectionPlane /** Non-zero value indicates that the orientation plane of the section is to be kept when the section is moved. */
            );
            /** Changes the section orientation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ChangeSectionPlane
            (
                NXOpen::Curve * section /** Section to edit. */,
                NXOpen::Direction * plane /** New section orientation plane. */
            );
            /** Updates the section attributes. You must call @link NXOpen::Die::AddendumSectionBuilder::Attributes NXOpen::Die::AddendumSectionBuilder::Attributes@endlink  
                        first in order to set the attributes to be updated.
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateSectionAttributes
            (
                NXOpen::Curve * section /** Section to edit. */
            );
            /** Creates a section by reading the section parameters from the input curve and pasting at 
                        the location specified by @link NXOpen::Die::AddendumSectionBuilder::SectionPoint NXOpen::Die::AddendumSectionBuilder::SectionPoint@endlink 
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void PasteSectionFromCurve
            (
                NXOpen::Curve * curve /** Section to edit. */
            );
            /** Creates a section using the information stored in the reuse library. 
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateSectionFromReuse
            (
                const NXString & fileName /** name of reuse library containing addendum section information */
            );
            /** Creates a section using the information stored in the reuse library. 
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void CreateSectionFromReuse
            (
                const char * fileName /** name of reuse library containing addendum section information */
            );
            /** Called to update the section when constraint curve or constraint surface is changed. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateSectionsAfterConstraintChange
            (
            );
            /** Mirror sections using plane from @link NXOpen::Die::AddendumSectionBuilder::MirrorPlane NXOpen::Die::AddendumSectionBuilder::MirrorPlane@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void MirrorSections
            (
            );
            /** Delete addendum sections from @link NXOpen::Die::AddendumSectionBuilder::Sections NXOpen::Die::AddendumSectionBuilder::Sections@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DeleteSections
            (
            );
            /** Create addendum section using previously supplied parameters. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateSection
            (
            );
            /** Re-create all existing sections because of a change in the draw direction or product faces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void RecreateSections
            (
            );
            /** Paste section. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void PasteSection
            (
            );
            /** Reinitialize the environment after changes to input data such as draw vector or product faces 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void Reinitialize
            (
            );
            /**Returns  the section plane. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * SectionPlane
            (
            );
            /**Sets  the section plane. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSectionPlane
            (
                NXOpen::Plane * sectionPlane /** sectionplane */ 
            );
            /**Returns  the curves used to approximate an addendum section. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * ByCurves
            (
            );
            /**Returns  the addendum sections to edit. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * Sections
            (
            );
            /**Returns  the mirror plane. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * MirrorPlane
            (
            );
            /**Sets  the mirror plane. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMirrorPlane
            (
                NXOpen::Plane * mirrorPlane /** mirrorplane */ 
            );
            /**Returns  the draw direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DrawDirection
            (
            );
            /**Sets  the draw direction. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDrawDirection
            (
                NXOpen::Direction * punchDirection /** punchdirection */ 
            );
            /** Create default draw vector based upon the input product faces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DefaultDraw
            (
            );
            /**Returns  the constraint curve. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ConstraintCurve
            (
            );
            /**Returns  the product faces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * Product
            (
            );
            /**Returns  the constraint faces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ConstraintFaces
            (
            );
            /**Returns  the smoothing radius for the constraint curve used by @link NXOpen::Die::AddendumSectionBuilder::SmoothCurve NXOpen::Die::AddendumSectionBuilder::SmoothCurve@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SmoothRadius
            (
            );
            /** Translate the constraint curve in the direction of the last wall segment of the addendum section using the 
                        distance supplied by @link NXOpen::Die::AddendumSectionBuilder::TranslateDistance NXOpen::Die::AddendumSectionBuilder::TranslateDistance@endlink .
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void TranslateWall
            (
            );
            /** Smooth the constraint curve using the radius supplied by @link NXOpen::Die::AddendumSectionBuilder::SmoothRadius NXOpen::Die::AddendumSectionBuilder::SmoothRadius@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SmoothCurve
            (
            );
            /**Returns  the translate distance used by @link NXOpen::Die::AddendumSectionBuilder::TranslateWall NXOpen::Die::AddendumSectionBuilder::TranslateWall@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TranslateDistance
            (
            );
            /**Returns  the neutral curve. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * NeutralCurve
            (
            );
            /**Returns  the addendum surface build method. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::AddendumSectionBuilder::SurfaceBuildType SurfaceBuildMethod
            (
            );
            /**Sets  the addendum surface build method. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSurfaceBuildMethod
            (
                NXOpen::Die::AddendumSectionBuilder::SurfaceBuildType surfaceBuildMethod /** surfacebuildmethod */ 
            );
            /**Returns  the minimum plus length. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PlusLength
            (
            );
            /**Returns  the minimum trim ledge. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumTrimLedge
            (
            );
            /**Returns  the minimum radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumRadius
            (
            );
            /**Returns  the minimum draft angle. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumDraftAngle
            (
            );
            /**Returns  the maximum positive trim angle. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumPositive
            (
            );
            /**Returns  the minimum negative trim angle. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumNegative
            (
            );
            /**Returns  the facet density. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double FacetDensity
            (
            );
            /**Sets  the facet density. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFacetDensity
            (
                double facetDensity /** facetdensity */ 
            );
            /**Returns  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the limits to control the span of the preview surface 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLimitsBuilder * Limits
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
