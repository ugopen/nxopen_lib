#ifndef NXOpen_TOOLING_LSDYNAKFILEGENERATORBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_LSDYNAKFILEGENERATORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_LsdynaKfileGeneratorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_LsdynaKfileGeneratorBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class LsdynaKfileGeneratorBuilder;
    }
    class Builder;
    namespace Tooling
    {
        class _LsdynaKfileGeneratorBuilderBuilder;
        class LsdynaKfileGeneratorBuilderImpl;
        /** Represents LS-Dyna K file builder - K file generator builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::AutoDieCollection::CreateLsdynaKfileGeneratorBuilder  NXOpen::Tooling::AutoDieCollection::CreateLsdynaKfileGeneratorBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ElementType </td> <td> 
         
        Triangle </td> </tr> 

        <tr><td> 
         
        MaximumAngle </td> <td> 
         
        20.0 </td> </tr> 

        <tr><td> 
         
        MaximumDeviation </td> <td> 
         
        0.15 </td> </tr> 

        <tr><td> 
         
        MaximumElementSize </td> <td> 
         
        24.0 </td> </tr> 

        <tr><td> 
         
        MinimumElementSize </td> <td> 
         
        1.0 </td> </tr> 

        <tr><td> 
         
        OutputState </td> <td> 
         
        15 </td> </tr> 

        </table>  

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  LsdynaKfileGeneratorBuilder : public NXOpen::Builder
        {
            /** Types of operation. */
            public: enum OperTypes
            {
                OperTypesMesh/** Meshes the forming object */,
                OperTypesRunsolver/** Runs LS-DYNA solver */
            };

            /** Types of mesh element type. */
            public: enum MeshElementType
            {
                MeshElementTypeTriangle/** Triangle element */,
                MeshElementTypeMixed/** Mixed element of triangle and quadrangle */
            };

            /** Types of data format. */
            public: enum MeshDataType
            {
                MeshDataTypeLongBit/** 64 bit format */,
                MeshDataTypeShortBit/** 32 bit IEEE format */
            };

            private: LsdynaKfileGeneratorBuilderImpl * m_lsdynakfilegeneratorbuilder_impl;
            private: friend class  _LsdynaKfileGeneratorBuilderBuilder;
            protected: LsdynaKfileGeneratorBuilder();
            public: ~LsdynaKfileGeneratorBuilder();
            /**Returns  the type of operation to be run. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LsdynaKfileGeneratorBuilder::OperTypes Type
            (
            );
            /**Sets  the type of operation to be run. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::LsdynaKfileGeneratorBuilder::OperTypes type /** type */ 
            );
            /** Meshes the part. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void MeshObject
            (
            );
            /** Calculates the default mesh settings values. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CalculateMeshValue
            (
            );
            /** Creates LS-DYNA K file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateLSDynaKFile
            (
                const NXString & kFile /** kfile */ 
            );
            /** Creates LS-DYNA K file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void CreateLSDynaKFile
            (
                const char * kFile /** kfile */ 
            );
            /** Analyzes the formability based on the input K file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AnalyzeFormability
            (
                const NXString & kFile /** kfile */ 
            );
            /** Analyzes the formability based on the input K file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void AnalyzeFormability
            (
                const char * kFile /** kfile */ 
            );
            /**Returns  the element type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LsdynaKfileGeneratorBuilder::MeshElementType ElementType
            (
            );
            /**Sets  the element type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetElementType
            (
                NXOpen::Tooling::LsdynaKfileGeneratorBuilder::MeshElementType elementType /** elementtype */ 
            );
            /**Returns  the maximum element size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumElementSize
            (
            );
            /**Sets  the maximum element size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaximumElementSize
            (
                double maximumElementSize /** maximumelementsize */ 
            );
            /**Returns  the minimum element size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumElementSize
            (
            );
            /**Sets  the minimum element size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMinimumElementSize
            (
                double minimumElementSize /** minimumelementsize */ 
            );
            /**Returns  the maximum deviation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumDeviation
            (
            );
            /**Sets  the maximum deviation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaximumDeviation
            (
                double maximumDeviation /** maximumdeviation */ 
            );
            /**Returns  the maximum angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumAngle
            (
            );
            /**Sets  the maximum angle 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaximumAngle
            (
                double maximumAngle /** maximumangle */ 
            );
            /**Returns  the data type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::LsdynaKfileGeneratorBuilder::MeshDataType DataType
            (
            );
            /**Sets  the data type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDataType
            (
                NXOpen::Tooling::LsdynaKfileGeneratorBuilder::MeshDataType dataType /** datatype */ 
            );
            /**Returns  the output state which will be used to control the result display. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int OutputState
            (
            );
            /**Sets  the output state which will be used to control the result display. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOutputState
            (
                int outputState /** outputstate */ 
            );
            /**Returns  the input dyna file 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString InputDynaFile
            (
            );
            /** Sets the input dyna file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInputDynaFile
            (
                const NXString & fileName /** filename */ 
            );
            /** Sets the input dyna file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetInputDynaFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns  the output file 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputFile
            (
            );
            /** Sets the output file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOutputFile
            (
                const NXString & outputFile /** outputfile */ 
            );
            /** Sets the output file. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetOutputFile
            (
                const char * outputFile /** outputfile */ 
            );
            /**Returns  the output path 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputPath
            (
            );
            /** Sets the output path. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOutputPath
            (
                const NXString & outputPath /** outputpath */ 
            );
            /** Sets the output path. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetOutputPath
            (
                const char * outputPath /** outputpath */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
