#ifndef NXOpen_CAM_PATHDATA_HXX_INCLUDED
#define NXOpen_CAM_PATHDATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_PathData.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        /** Tool Path event types*/
        enum CamPathToolpathEventType
        {
            CamPathToolpathEventTypeMotion/** motion */ ,
            CamPathToolpathEventTypeUde/** ude */ ,
            CamPathToolpathEventTypeSystem/** system */ ,
            CamPathToolpathEventTypeLevelMarker/** level marker */ 
        };

        /** Motion types*/
        enum CamPathMotionType
        {
            CamPathMotionTypeUndefined/** undefined */ ,
            CamPathMotionTypeRapid/** rapid */ ,
            CamPathMotionTypeEngage/** engage */ ,
            CamPathMotionTypeCut/** cut */ ,
            CamPathMotionTypeRetract/** retract */ ,
            CamPathMotionTypeFirstCut/** first cut */ ,
            CamPathMotionTypeApproach/** approach */ ,
            CamPathMotionTypeStepover/** stepover */ ,
            CamPathMotionTypeDeparture/** departure */ ,
            CamPathMotionTypeReturn/** return */ ,
            CamPathMotionTypeTraversal/** traversal */ ,
            CamPathMotionTypeSideCut/** side cut */ ,
            CamPathMotionTypeFrom/** from */ ,
            CamPathMotionTypeGohome/** gohome */ ,
            CamPathMotionTypeCycle/** cycle */ ,
            CamPathMotionTypeInternalLift/** internal lift */ 
        };

        /** Motion shapes*/
        enum CamPathMotionShapeType
        {
            CamPathMotionShapeTypeUndefined/** undefined */ ,
            CamPathMotionShapeTypeLinear/** linear */ ,
            CamPathMotionShapeTypeCircular/** circular */ ,
            CamPathMotionShapeTypeHelical/** helical */ ,
            CamPathMotionShapeTypeNurbs/** nurbs */ 
        };

        /** Contact Motion shapes*/
        enum CamPathContactMotionShapeType
        {
            CamPathContactMotionShapeTypeUndefined/** undefined */ ,
            CamPathContactMotionShapeTypeLinear/** linear */ ,
            CamPathContactMotionShapeTypeCircular/** circular */ 
        };

        /** Motion direction for circular and helix motions */
        enum CamPathDir
        {
            CamPathDirClockwise/** clockwise */ ,
            CamPathDirCounterclockwise/** counterclockwise */ 
        };

        /** Feedrate units*/
        enum CamPathFeedUnitType
        {
            CamPathFeedUnitTypePerMinute/** per minute */ ,
            CamPathFeedUnitTypePerRevolution/** per revolution */ ,
            CamPathFeedUnitTypeNone/** none */ 
        };

        /** Tool axis type of the Path */
        enum CamPathToolAxisType
        {
            CamPathToolAxisTypeThree/** three */ ,
            CamPathToolAxisTypeFive/** five */ 
        };

        /** The location where a path event has to be added into the path */
        enum CamPathToolpathEventLocation
        {
            CamPathToolpathEventLocationBefore/** before */ ,
            CamPathToolpathEventLocationAfter/** after */ ,
            CamPathToolpathEventLocationEnd/** end */ 
        };

        /** Contact type of the Path */
        enum CamPathContactType
        {
            CamPathContactTypeNone/** none */ ,
            CamPathContactTypeTwoDimensional/** two dimensional */ ,
            CamPathContactTypeThreeDimensional/** three dimensional */ 
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
