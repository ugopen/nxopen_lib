#ifndef NXOpen_AME_PORTSMANAGERBUILDER_HXX_INCLUDED
#define NXOpen_AME_PORTSMANAGERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PortsManagerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_PortsManagerBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PortsManagerBuilder;
    }
    class Builder;
    class NXObject;
    namespace AME
    {
        class _PortsManagerBuilderBuilder;
        class PortsManagerBuilderImpl;
        /** Provides journal methods for the ports manager dialog.  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePortsManagerBuilder  NXOpen::AME::AMEManager::CreatePortsManagerBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PortsManagerBuilder : public NXOpen::Builder
        {
            private: PortsManagerBuilderImpl * m_portsmanagerbuilder_impl;
            private: friend class  _PortsManagerBuilderBuilder;
            protected: PortsManagerBuilder();
            public: ~PortsManagerBuilder();
            /** Disconnects port 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void Disconnect
            (
                NXOpen::NXObject * port /** port */ 
            );
            /** Updates the IPortsContainer selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateSelection
            (
                NXOpen::NXObject * port /** port */ 
            );
            /** Sets the dynamic connection expression
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExpression
            (
                NXOpen::NXObject * exp /** exp */ 
            );
            /** Gets the dynamic connection expression @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * GetExpression
            (
            );
            /** Creates the connections  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::NXObject *> CreateConnections
            (
                NXOpen::NXObject * source /** source */ 
            );
            /** Sets the source port of the connection
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPort
            (
                NXOpen::NXObject * exp /** exp */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
