#ifndef NXOpen_REPORT_REPORTPREFERENCE_HXX_INCLUDED
#define NXOpen_REPORT_REPORTPREFERENCE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Report_ReportPreference.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Report_ReportPreference.hxx>
#include <NXOpen/libnxopencpp_report_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Report
    {
        class ReportPreference;
    }
    namespace Report
    {
        class _ReportPreferenceBuilder;
        class ReportPreferenceImpl;
        /** Manages the preference data.  <br> Not support KF.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_REPORTEXPORT  ReportPreference : public NXOpen::TaggedObject
        {
            private: ReportPreferenceImpl * m_reportpreference_impl;
            private: friend class  _ReportPreferenceBuilder;
            protected: ReportPreference();
            public: ~ReportPreference();
            /**Returns  the option indicates whether to open report document after exporting report 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool OpenReportDocumentAfterExport
            (
            );
            /**Sets  the option indicates whether to open report document after exporting report 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOpenReportDocumentAfterExport
            (
                bool openReportAfterExportSetting /** openreportafterexportsetting */ 
            );
            /**Returns  the option indicates whether to view image after snopshotting  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ViewImageAfterSnapshotting
            (
            );
            /**Sets  the option indicates whether to view image after snopshotting  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetViewImageAfterSnapshotting
            (
                bool viewImageAfterSnapshotSetting /** viewimageaftersnapshotsetting */ 
            );
            /**Returns  the option indicates whether to use site template directory as start to choose a report template file  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool SearchTemplateFromSiteDirectory
            (
            );
            /**Sets  the option indicates whether to use site template directory as start to choose a report template file  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSearchTemplateFromSiteDirectory
            (
                bool searchTemplateFromSiteDirectorySetting /** searchtemplatefromsitedirectorysetting */ 
            );
            /**Returns  the option indicates whehter to use part direcotry as default report document location  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePartDirectoryAsDefaultExportLocation
            (
            );
            /**Sets  the option indicates whehter to use part direcotry as default report document location  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUsePartDirectoryAsDefaultExportLocation
            (
                bool usePartDirAsDefaultExportLocationSetting /** usepartdirasdefaultexportlocationsetting */ 
            );
            /**Returns  the maximum count of the recent report documents which could be viewed 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int MaximumRecentReportDocumentCount
            (
            );
            /**Sets  the maximum count of the recent report documents which could be viewed 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumRecentReportDocumentCount
            (
                int maxRecentReportDoc /** Maximum recent report document */
            );
            /** Saves preference settings to memory file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveMemoryFile
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
