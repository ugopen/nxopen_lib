#ifndef NXOpen_MOTION_SIGNALCHARTLISTITEM_HXX_INCLUDED
#define NXOpen_MOTION_SIGNALCHARTLISTITEM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_SignalChartListItem.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_SignalChartListItem.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class SignalChartListItem;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Motion
    {
        class MotionSensor;
    }
    namespace Motion
    {
        class _SignalChartListItemBuilder;
        class SignalChartListItemImpl;
        /** 
            Represents a SignalChartListItem,
            List Item inside a SignalChartBuilder 
             <br> To create a new instance of this class, use @link NXOpen::Motion::SignalChartCollection::CreateSignalChartListItem  NXOpen::Motion::SignalChartCollection::CreateSignalChartListItem @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  SignalChartListItem : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** time sensor  */
            public: enum Timer
            {
                TimerTimer/** Timer */,
                TimerAbsoluteTime/** Absolute time */,
                TimerUndefined/** Undefined, undefined timer for the sensor signal */
            };

            /** signal chart list item condition  */
            public: enum Condition
            {
                ConditionLessThan/** Less than */,
                ConditionGreaterThan/** Greater than */
            };

            private: SignalChartListItemImpl * m_signalchartlistitem_impl;
            private: friend class  _SignalChartListItemBuilder;
            protected: SignalChartListItem();
            public: ~SignalChartListItem();
            /**Returns  the sensor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: NXOpen::Motion::MotionSensor * Sensor
            (
            );
            /**Sets  the sensor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: void SetSensor
            (
                NXOpen::Motion::MotionSensor * sensor /** sensor */ 
            );
            /**Returns  the time sensor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: NXOpen::Motion::SignalChartListItem::Timer TimeSensor
            (
            );
            /**Sets  the time sensor 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: void SetTimeSensor
            (
                NXOpen::Motion::SignalChartListItem::Timer timeSensor /** timesensor */ 
            );
            /**Returns  the event condition 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: NXOpen::Motion::SignalChartListItem::Condition EventCondition
            (
            );
            /**Sets  the event condition 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: void SetEventCondition
            (
                NXOpen::Motion::SignalChartListItem::Condition condition /** condition */ 
            );
            /**Returns  the threshold 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link Motion::SignalChartListItem::ThresholdExpression Motion::SignalChartListItem::ThresholdExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using Motion::SignalChartListItem::ThresholdExpression to query or edit it.") double Threshold
            (
            );
            /**Sets  the threshold 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link Motion::SignalChartListItem::ThresholdExpression Motion::SignalChartListItem::ThresholdExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using Motion::SignalChartListItem::ThresholdExpression to query or edit it.") void SetThreshold
            (
                double threshold /** threshold */ 
            );
            /**Returns  the delay time 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link Motion::SignalChartListItem::DelayTimeExpression Motion::SignalChartListItem::DelayTimeExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using Motion::SignalChartListItem::DelayTimeExpression to query or edit it.") double DelayTime
            (
            );
            /**Sets  the delay time 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link Motion::SignalChartListItem::DelayTimeExpression Motion::SignalChartListItem::DelayTimeExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using Motion::SignalChartListItem::DelayTimeExpression to query or edit it.") void SetDelayTime
            (
                double delayTime /** delaytime */ 
            );
            /**Returns  the siganl 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link Motion::SignalChartListItem::SignalExpression Motion::SignalChartListItem::SignalExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using Motion::SignalChartListItem::SignalExpression to query or edit it.") double Signal
            (
            );
            /**Sets  the siganl 
             <br>  @deprecated Deprecated in NX8.5.0.  Obtain the expression using @link Motion::SignalChartListItem::SignalExpression Motion::SignalChartListItem::SignalExpression@endlink  to query or edit it. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Obtain the expression using Motion::SignalChartListItem::SignalExpression to query or edit it.") void SetSignal
            (
                double signal /** signal */ 
            );
            /**Returns  the always evaluated 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: bool AlwaysEvaluated
            (
            );
            /**Sets  the always evaluated 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: void SetAlwaysEvaluated
            (
                bool alwaysEvaluated /** alwaysevaluated */ 
            );
            /**Returns  the threshold expression
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: NXOpen::Expression * ThresholdExpression
            (
            );
            /**Returns  the threshold expression
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: NXOpen::Expression * DelayTimeExpression
            (
            );
            /**Returns  the threshold expression
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_motion_motor ("NX Motion Motor") */
            public: NXOpen::Expression * SignalExpression
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
