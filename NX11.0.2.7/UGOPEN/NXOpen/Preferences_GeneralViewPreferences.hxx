#ifndef NXOpen_PREFERENCES_GENERALVIEWPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_GENERALVIEWPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_GeneralViewPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_IGeneralViewPreferences.hxx>
#include <NXOpen/Preferences_ViewStylePreferencesData.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class GeneralViewPreferences;
    }
    namespace Preferences
    {
        class ViewPreferences;
    }
    namespace Preferences
    {
        class IGeneralViewPreferences;
    }
    namespace Preferences
    {
        class GeneralViewPreferencesImpl;
        /** Represents set of General View Preferencess applicable to drafting views. 
                These settings apply to any newly created base view.
              <br> To obtain an instance of this class use @link Preferences::ViewPreferences::General Preferences::ViewPreferences::General@endlink   <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  GeneralViewPreferences: public virtual NXOpen::Preferences::IGeneralViewPreferences
        {
            private: GeneralViewPreferencesImpl * m_generalviewpreferences_impl;
            private: NXOpen::Preferences::ViewPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit GeneralViewPreferences(NXOpen::Preferences::ViewPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~GeneralViewPreferences();
            /**Returns  the status of silhouettes curves, if true silhouettes for 
                        selected drawing member views are added else silhouettes are removed 
                        from the selected member views. 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Silhouettes
            (
            );
            /**Sets  the status of silhouettes curves, if true silhouettes for 
                        selected drawing member views are added else silhouettes are removed 
                        from the selected member views. 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSilhouettes
            (
                bool silhouettes /** silhouettes */ 
            );
            /**Returns  the status of reference.A view can have a status of either Active or Reference. 
                        So if the status is True the view is considered a reference view else considered 
                        as an Active view.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Reference
            (
            );
            /**Sets  the status of reference.A view can have a status of either Active or Reference. 
                        So if the status is True the view is considered a reference view else considered 
                        as an Active view.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetReference
            (
                bool reference /** reference */ 
            );
            /**Returns  the status of UV grid. If true, grid curves for selected drawing
                        member views are added else the grid curves are removed from 
                        the selected member views.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool UvGrid
            (
            );
            /**Sets  the status of UV grid. If true, grid curves for selected drawing
                        member views are added else the grid curves are removed from 
                        the selected member views.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUvGrid
            (
                bool uvGrid /** uv grid */ 
            );
            /**Returns  the status of Automatic Update. if true, then position, 
                        hidden lines, silhouettes, view bounds, section views and 
                        section view details are updated after a model change else 
                        above items are not updated after a model change. 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticUpdate
            (
            );
            /**Sets  the status of Automatic Update. if true, then position, 
                        hidden lines, silhouettes, view bounds, section views and 
                        section view details are updated after a model change else 
                        above items are not updated after a model change. 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAutomaticUpdate
            (
                bool automaticUpdate /** automatic update */ 
            );
            /**Returns  the status of Automatic anchor point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticAnchorPoint
            (
            );
            /**Sets  the status of Automatic anchor point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAutomaticAnchorPoint
            (
                bool automaticAnchorPoint /** automatic anchor point */ 
            );
            /**Sets  the boundary status. This option determines whether or not a view's out-of-date status 
                        includes its boundary. If True, the system checks the view boundary and marks it out of 
                        date if changes to non-solid geometry would cause the view's boundary to change when updated, 
                        else the system does not perform view boundary checks.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBoundaryStatus
            (
                bool boundaryStatus /** boundary status */ 
            );
            /**Returns  the boundary status. This option determines whether or not a view's out-of-date status 
                        includes its boundary. If True, the system checks the view boundary and marks it out of 
                        date if changes to non-solid geometry would cause the view's boundary to change when updated, 
                        else the system does not perform view boundary checks.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool BoundaryStatus
            (
            );
            /**Sets  the status of center line. If true it automatically creates 
                        linear, cylindrical, and bolt circle centerlines (with a 
                        circular instance set) for views where the hole or pin axis
                        is perpendicular or parallel to the plane of the drawing view.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCenterlines
            (
                bool centerlines /** centerlines */ 
            );
            /**Returns  the status of center line. If true it automatically creates 
                        linear, cylindrical, and bolt circle centerlines (with a 
                        circular instance set) for views where the hole or pin axis
                        is perpendicular or parallel to the plane of the drawing view.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool Centerlines
            (
            );
            /**Returns  the view representation enum on the GENERAL tab of the View Style Dialog 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::GeneralViewRepresentationOption ViewRepresentation
            (
            );
            /**Sets  the view representation enum on the GENERAL tab of the View Style Dialog 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewRepresentation
            (
                NXOpen::Preferences::GeneralViewRepresentationOption viewRepresentation /** Sets a view representation option on the general sub-builder */
            );
            /**Returns  the view quality that provides alternative ways to display
                        geometry in a drawing member view.
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::GeneralViewQualityOption ViewQuality
            (
            );
            /**Sets  the view quality that provides alternative ways to display
                        geometry in a drawing member view.
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetViewQuality
            (
                NXOpen::Preferences::GeneralViewQualityOption viewQualityOption /** view quality option */ 
            );
            /**Returns  the leagcy view toggle on the GENERAL tab of the View Style Dialog 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool LegacyView
            (
            );
            /**Sets  the leagcy view toggle on the GENERAL tab of the View Style Dialog 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLegacyView
            (
                bool legacyView /** Sets a legacy view toggle value on the general sub-builder */
            );
            /**Returns  the view representation enum on the GENERAL tab of the View Style Dialog 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool LightweightView
            (
            );
            /**Sets  the view representation enum on the GENERAL tab of the View Style Dialog 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLightweightView
            (
                bool lightweightView /** Sets a view representation option on the general sub-builder */
            );
            /**Returns  the snapshot toggle on the GENERAL tab of the View Style Dialog 
             <br>  @deprecated Deprecated in NX11.0.1.  Use @link NXOpen::Preferences::GeneralViewPreferences::LockmethodView() NXOpen::Preferences::GeneralViewPreferences::LockmethodView()@endlink  instead(the value is NXOpen.Preferences.GeneralViewPreferences.GeneralViewLockmethodOptionSnapshot). <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX11.0.1.  Use NXOpen::Preferences::GeneralViewPreferences::LockmethodView() instead(the value is NXOpen.Preferences.GeneralViewPreferences.GeneralViewLockmethodOptionSnapshot).") bool SnapshotView
            (
            );
            /**Sets  the snapshot toggle on the GENERAL tab of the View Style Dialog 
             <br>  @deprecated Deprecated in NX11.0.1.  Use @link NXOpen::Preferences::GeneralViewPreferences::LockmethodView() NXOpen::Preferences::GeneralViewPreferences::LockmethodView()@endlink  instead(the value is NXOpen.Preferences.GeneralViewPreferences.GeneralViewLockmethodOptionSnapshot). <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public:  NX_DEPRECATED("Deprecated in NX11.0.1.  Use NXOpen::Preferences::GeneralViewPreferences::LockmethodView() instead(the value is NXOpen.Preferences.GeneralViewPreferences.GeneralViewLockmethodOptionSnapshot).") void SetSnapshotView
            (
                bool snapshotView /** Sets a snapshot view toggle value on the general sub-builder */
            );
            /**Returns  the lockmethod setting on the GENERAL tab of the View Style Dialog 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::GeneralViewLockmethodOption LockmethodView
            (
            );
            /**Sets  the lockmethod setting on the GENERAL tab of the View Style Dialog 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLockmethodView
            (
                NXOpen::Preferences::GeneralViewLockmethodOption lockmethodView /** Sets a lockmethod view toggle value on the general sub-builder */
            );
            /**Returns  the value of tolerance that specifies a chord height tolerance
                        value for silhouette and hidden line generation in a given 
                        drawing view.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the value of tolerance that specifies a chord height tolerance
                        value for silhouette and hidden line generation in a given 
                        drawing view.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the extracted edge that provides an alternative way to display
                        model geometry in a drawing view.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::GeneralExtractedEdgesOption ExtractedEdges
            (
            );
            /**Sets  the extracted edge that provides an alternative way to display
                        model geometry in a drawing view.
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetExtractedEdges
            (
                NXOpen::Preferences::GeneralExtractedEdgesOption edgesOption /** edges option */ 
            );
            /**Returns  the source of the wireframe color for a member view.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::GeneralWireframeColorSourceOption WireframeColorSource
            (
            );
            /**Sets  the source of the wireframe color for a member view.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetWireframeColorSource
            (
                NXOpen::Preferences::GeneralWireframeColorSourceOption edgesOption /** edges option */ 
            );
            /**Returns  the display identifier option for a member view.
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::GeneralDisplayIdOption DisplayId
            (
            );
            /**Sets  the display identifier option for a member view.
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayId
            (
                NXOpen::Preferences::GeneralDisplayIdOption option /** option */ 
            );
            /**Returns  the status of horizontal framebar. If true it automatically creates 
                        horizontal framebar for views when ship axis matches with view axis
                        for horizontal framebar.
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool FramebarHorizontal
            (
            );
            /**Sets  the status of horizontal framebar. If true it automatically creates 
                        horizontal framebar for views when ship axis matches with view axis
                        for horizontal framebar.
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFramebarHorizontal
            (
                bool horizontal /** horizontal */ 
            );
            /**Returns  the status of vertical framebar. If true it automatically creates 
                        vertical framebar for views when ship axis matches with view axis
                        for vertical framebar.
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool FramebarVertical
            (
            );
            /**Sets  the status of vertical framebar. If true it automatically creates 
                        vertical framebar for views when ship axis matches with view axis
                        for vertical framebar.
                     
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFramebarVertical
            (
                bool vertical /** vertical */ 
            );
            /**Returns  the precision to use for view angle display. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int AnglePrecision
            (
            );
            /**Sets  the precision to use for view angle display. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAnglePrecision
            (
                int precision /** precision */ 
            );
            /**Returns  the format to use for view angle display. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::AngleFormat AngleFormat
            (
            );
            /**Sets  the format to use for view angle display. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngleFormat
            (
                NXOpen::Preferences::AngleFormat format /** format */ 
            );
            /**Returns  the status of leading zeros display in view angle. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowAngleLeadingZeros
            (
            );
            /**Sets  the status of leading zeros display in view angle. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowAngleLeadingZeros
            (
                bool show /** show */ 
            );
            /**Returns  the status of trailing zeros display in view angle. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowAngleTrailingZeros
            (
            );
            /**Sets  the status of trailing zeros display in view angle. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowAngleTrailingZeros
            (
                bool show /** show */ 
            );
            /**Returns  the decimal point character to use for view angle display. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::DecimalPointCharacter AngleDecimalPointFormat
            (
            );
            /**Sets  the decimal point character to use for view angle display. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngleDecimalPointFormat
            (
                NXOpen::Preferences::DecimalPointCharacter format /** format */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
