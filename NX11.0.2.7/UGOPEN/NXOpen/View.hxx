#ifndef NXOpen_VIEW_HXX_INCLUDED
#define NXOpen_VIEW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     View.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class View;
    class DisplayableObject;
    class IFitTo;
    class NXObject;
    namespace Preferences
    {
        class ViewVisualizationSpecialEffects;
    }
    namespace Preferences
    {
        class ViewVisualizationVisual;
    }
    class ViewDependentDisplayManager;
    class _ViewBuilder;
    class ViewImpl;
    /**
     Represents a view. View can be obtained either from @link NXOpen::ViewCollection NXOpen::ViewCollection@endlink  or from @link NXOpen::ModelingViewCollection NXOpen::ModelingViewCollection@endlink .
     <br> This class is not created directly by the user.  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  View : public NXOpen::NXObject
    {
        /** Describes a simplified indexing scheme for accessing canned views 
            with interfaces that use this enum as a parameter. */
        public: enum Canned
        {
            CannedTop/** top */ ,
            CannedFront/** front */ ,
            CannedRight/** right */ ,
            CannedBack/** back */ ,
            CannedBottom/** bottom */ ,
            CannedLeft/** left */ ,
            CannedIsometric/** isometric */ ,
            CannedTrimetric/** trimetric */ 
        };

        /** Describes the relative scales to which a view can be set */
        public: enum ScaleFactor
        {
            ScaleFactorHalfScale/** half scale */ ,
            ScaleFactorDoubleScale/** double scale */ ,
            ScaleFactorReduceScale/** Reduce scale by 10% */,
            ScaleFactorIncreaseScale/** Increase scale by 10% */
        };

        /**  Describes simple, predefined adjustments that may be applied to a 
            view's scale while another operation is performed, in conjunction, on the view. 
            For more details, refer to those interfaces that use this enum as a parameter. */
        public: enum ScaleAdjustment
        {
            ScaleAdjustmentFit/** fit */ ,
            ScaleAdjustmentCurrent/** current */ ,
            ScaleAdjustmentSaved/** saved */ 
        };

        /**  Describes the rendering style for geometry displayed in the view.  */
        public: enum RenderingStyleType
        {
            RenderingStyleTypeShadedWithEdges/** shaded with edges */ ,
            RenderingStyleTypeShadedWithBodyColorEdges/** shaded with body color edges */ ,
            RenderingStyleTypeShaded/** shaded */ ,
            RenderingStyleTypeWireframeWithDimEdges/** wireframe with dim edges */ ,
            RenderingStyleTypeWireframeWithHiddenEdges/** wireframe with hidden edges */ ,
            RenderingStyleTypeWireframeWithDashedEdges/** wireframe with dashed edges */ ,
            RenderingStyleTypeStudio/** studio */ ,
            RenderingStyleTypeFaceAnalysis/** face analysis */ ,
            RenderingStyleTypePartiallyShaded/** partially shaded */ ,
            RenderingStyleTypeStaticWireframe/** static wireframe */ 
        };

        /** Specifies whether a show or hide operation, or both, has just been done */
        public: enum ShowOrHideType
        {
            ShowOrHideTypeShowOnly/** show only */ ,
            ShowOrHideTypeHideOnly/** hide only */ ,
            ShowOrHideTypeBothShowAndHide/** both show and hide */ ,
            ShowOrHideTypeInvertShownAndHidden/** invert shown and hidden */ 
        };

        private: ViewImpl * m_view_impl;
        private: friend class  _ViewBuilder;
        protected: View();
        public: ~View();
        /** Concatenates the given translation with the previous viewing transformation
            of the specified view.  The translation is defined in view space.
             <br>  In batch mode, the translation of the view is modified, but no
            display occurs  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Concatenate
        (
            const NXOpen::Point3d & translation /** Point in view space to put at the center of the view */
        );
        /** Concatenates the given scale with the previous viewing transformation
            of the specified view.  The scale is applied to the view using the current view origin. 
             <br>  In batch mode, the scale of the view is modified, but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Concatenate
        (
            double scale /** Relative scale factor */
        );
        /** Concatenates the given translation and scale with the previous viewing
            transformation of the specified view.   The translation is defined in
            view space, and conceptually occurs first.  Then, the scale is applied
            to the view using the new view origin.  Although this is logically a
            two step process, only the final result appears in the graphics window. 
             <br>  In batch mode, the translation and scale of the view are modified,
            but no display occurs.  <br> 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Concatenate
        (
            const NXOpen::Point3d & translation /** Point in view space to put at the center of the view */,
            double scale /** Relative scale factor */
        );
        /** Concatenates the given rotation with the previous viewing transformation
            of the specified view.  First, if a center of rotation is given, a translation occurs
            to move the center of the view to the center of rotation.  Then, the
            rotation occurs about the center of rotation.  Finally, if a center of rotation
            is being used, the view is translated back to the origin it had upon entering
            the function.  Although this is logically a three step process, only the final
            result appears in the graphics window. 
             <br>  In batch mode, the rotation of the view is modified, but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Concatenate
        (
            const NXOpen::Point3d & centerOfRotation /** If not NULL, this specifies a point in view
                                                          space about which the view is to be rotated */,
            const NXOpen::Vector3d & rotationAxis /** The axis to rotate about */,
            double angle /** Rotation angle in radians */
        );
        /** Concatenates the given translation and rotation with the previous viewing
            transformation of the specified view. The translation is defined in view space,
            and conceptually occurs first. Then, if a center of rotation is given, a translation
            occurs to move the center of the view to the center of rotation.  Third, the
            rotation occurs about the center of rotation.  Finally, if a center of rotation
            is being used, the view is translated back to the origin it had after the
            translation.  Although this is logically a four step process, only the final
            result appears in the graphics window.
             <br>  In batch mode, the translation and rotation of the view are modified,
            but no display occurs.  <br> 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Concatenate
        (
            const NXOpen::Point3d & translation /** Point in view space to put at the center of the view */,
            const NXOpen::Point3d & centerOfRotation /** If not NULL, this specifies a point in view
                                                          space about which the view is to be rotated */,
            const NXOpen::Vector3d & rotationAxis /** The axis to rotate about */,
            double angle /** Rotation angle in radians */
        );
        /** Concatenates the given scale and rotation with the previous viewing
            transformation of the specified view. First, the scale is applied
            to the view using the current view origin.  Then, if a center of rotation
            is given, a translation occurs to move the center of the view to the center
            of rotation.  Third, the rotation occurs about the center of rotation.  Finally,
            if a center of rotation is being used, the view is translated back to the origin
            it had upon entering the function.  Although this is logically a four step process,
            only the final result appears in the graphics window.
             <br>  In batch mode, the scale and rotation of the view are modified,
            but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Concatenate
        (
            double scale /** Relative scale factor */,
            const NXOpen::Point3d & centerOfRotation /** If not NULL, this specifies a point in view
                                                          space about which the view is to be rotated */,
            const NXOpen::Vector3d & rotationAxis /** The axis to rotate about */,
            double angle /** Rotation angle in radians */
        );
        /** Concatenates the given translation, scale and rotation with the previous
            viewing transformation of the specified view.  The translation
            is defined in view space, and conceptually occurs first.  Then the scale
            is applied to the view using the newly defined center.  Third, a translation occurs
            to move the center of the view to the center of rotation (if any).  Fourth, the
            rotation occurs about the center of rotation.  Finally, if a center of rotation
            is being used, the view is translated back to its origin as specified by the
            first argument.  Although this is logically a five step process, only the final
            result appears in the graphics window.
             <br>  In batch mode, the translation, scale and rotation of the view are modified,
            but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Concatenate
        (
            const NXOpen::Point3d & translation /** Point in view space to put at the center of the view */,
            double scale /** Relative scale factor */,
            const NXOpen::Point3d & centerOfRotation /** If not NULL, this specifies a point in view
                                                          space about which the view is to be rotated */,
            const NXOpen::Vector3d & rotationAxis /** The axis to rotate about */,
            double angle /** Rotation angle in radians */
        );
        /** Expands the specified view to fill as much of the layout which contains
            the view as possible, without changing the aspect ratio of the view.
            Other views in the layout are no longer displayed. The view becomes the
            work view.  A view that is not displayed cannot be expanded. 
             <br>  In batch mode, the data for the view is changed to reflect that
            the view is expanded, but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Expand
        (
        );
        /** Adjusts the bounds of a given view so that it fully encompasses 
            the extents of the model geometry. If the view is displayed, the
            changes will appear in the display of that view, and,
            if enabled, the change in the bounds of the view is animated.
             <br>  In batch mode, the data for the bounds of the view are changed
            to the adjusted bounds, but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Fit
        (
        );
        /** Adjusts the bounds of a given view conditionally so that it fully encompasses 
            the extents of the model geometry. This method is intended to be used only immediately
            after a show or hide operation has been done.  The fit operation is performed only
            if the "Fit on Show or Hide" option is enabled by
            @link NXOpen::Preferences::SessionVisualizationScreen::DoFitOnHideOrShow NXOpen::Preferences::SessionVisualizationScreen::DoFitOnHideOrShow@endlink ,
            and if the work view is not a drawing view.  If only a hide operation has been done and
            a fit would cause the view scale to decrease, the fit will not be done.  If the view is displayed, the changes will appear in
            the display of that view, and, if enabled, the change in the bounds of the view is animated.
             <br>  In batch mode, the data for the bounds of the view may be changed to the adjusted
            bounds, if the "Fit on Show or Hide" option is enabled and the other conditions are met,
            but no display occurs.  <br>  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void FitAfterShowOrHide
        (
            NXOpen::View::ShowOrHideType type /** Whether a Show or Hide or both has been done */
        );
        /** Adjusts the bounds of a given view so that it fully encompasses 
            the extents of the given objects. If the view is displayed, the
            changes will appear in the display of that view and,
            if enabled, the change in the bounds of the view is animated.
             <br>  In batch mode, the data for the bounds of the view are changed
            to the adjusted bounds, but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void FitToObjects
        (
            const std::vector<NXOpen::IFitTo *> & objects /** The objects
                           whose display is to be included in the displayed bounds of the view */
        );
        /**Returns  the view matrix.  This 3x3 orthonormal matrix specifies the rotation
            from model space to untranslated view space. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Matrix3x3 Matrix
        (
        );
        /**Returns  the view origin.  This is the negation of the position in "untranslated view space",
            which is the coordinate space obtained by multiplying positions in absolute space by the matrix
            from @link NXOpen::View::Matrix NXOpen::View::Matrix@endlink .  Note that the origin in this method is not in
            the same space as the origin passed to @link NXOpen::View::Origin NXOpen::View::Origin @endlink and @link NXOpen::View::SetOrigin NXOpen::View::SetOrigin @endlink , where
            the input origin is in absolute space.
             <br> 
            The position given to this property is the same as the translation used in
            @link NXOpen::View::Concatenate NXOpen::View::Concatenate@endlink  and in the other similar concatenate methods.
             <br> 
             <br> 
            If you want to get the view origin in absolute space, use 
            @link NXOpen::View::AbsoluteOrigin NXOpen::View::AbsoluteOrigin@endlink 
             <br> 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d Origin
        (
        );
        /**Returns  the view origin in absolute space.
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d AbsoluteOrigin
        (
        );
        /**Returns  the view scale
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: double Scale
        (
        );
        /** Returns one of the view axes.  These are the components of the 3x3
            matrix which is the rotation of absolute space which results in view space.  @return  The X, Y or Z axis of the view 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Vector3d GetAxis
        (
            NXOpen::XYZAxis xYZAxis /** Whether to return the X, Y or Z axis */
        );
        /** Makes the given view the work view.  The view must be currently
            displayed.  As there must be exactly one work view at any time, the
            previous work view is no longer the work view.
             <br>  In batch mode, the given view becomes the work view internally,
            but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void MakeWork
        (
        );
        /** Changes the view orientation relative to the specified absolute coordinate system.
            If enabled, the change in orientation of the view is animated.
            A view that is not displayed cannot be oriented.
             <br>  In batch mode, the orientation of given view is changed internally,
            but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Orient
        (
            const NXOpen::Matrix3x3 & matrix /** Orientation relative to the absolute coordinate system.
                                               Must be orthonormal. */
        );
        /** Changes the view orientation to a specified canned view.
            If enabled, the change in orientation of the view is animated.
            A view that is not displayed cannot be oriented.
             <br>  In batch mode, the orientation of given view is changed internally,
            but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Orient
        (
            NXOpen::View::Canned viewName /** Canned view name*/,
            NXOpen::View::ScaleAdjustment viewScale /** Desired view scale */
        );
        /** Changes the view orientation to a specified view.
            If enabled, the change in orientation of the view is animated.
            A view that is not displayed cannot be oriented.
             <br>  In batch mode, the orientation of given view is changed internally,
            but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Orient
        (
            const NXString & viewName /** Custom view name */,
            NXOpen::View::ScaleAdjustment viewScale /** Desired view scale*/
        );
        /** Changes the view orientation to a specified view.
            If enabled, the change in orientation of the view is animated.
            A view that is not displayed cannot be oriented.
             <br>  In batch mode, the orientation of given view is changed internally,
            but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void Orient
        (
            const char * viewName /** Custom view name */,
            NXOpen::View::ScaleAdjustment viewScale /** Desired view scale*/
        );
        /** Regenerates the display of given view.  The current scale of the
            view is used to determine the tessalation of curves, facets and
            software line fonts.  The view must be already displayed.
             <br>  In batch mode, internal state information is reset as if
            the display were regenerated, but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Regenerate
        (
        );
        /** Restores a view to its last remembered rotation, scale and translation.
            A view that is not displayed cannot be restored.
            If enabled, the restoration of the view is animated.
             <br>  In batch mode, internal state information is restored,
            but no display occurs.  <br>   @return  Status of restore operation 
                                                           <br>  False - Restore successful  <br> 
                                                           <br>  True - No Restore data available  <br> 
                                                         
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: bool Restore
        (
        );
        /** Rotates the view by concatenating the given matrix to the existing rotation
            matrix of the view.  A view that is not displayed cannot be rotated. 
             <br>  In batch mode, the rotation of the view is modified, but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Rotate
        (
            const NXOpen::Matrix3x3 & matrix /**  Matrix relative to the absolute coordinate system. 
                                             Must be orthonormal. */
        );
        /** Rotates the specified view using the specified origin of rotation 
            and about the specified axis. The origin and the axis are specified 
            in absolute coordinates. A view that is not displayed cannot be rotated. 
             <br>  In batch mode, the rotation of the view is modified, but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Rotate
        (
            const NXOpen::Point3d & origin /** Origin in absolute space */,
            const NXOpen::Vector3d & vector /** X,Y,Z components in absolute space */,
            double angle /** Angle in degrees */
        );
        /** Moves the given position to the center of the view.  The position is
            given in absolute coordinates.  The scale and rotation of the view are
            unchanged.
             <br>  In batch mode, the origin of the view is changed internally, but
            no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOrigin
        (
            const NXOpen::Point3d & origin /** The new view origin */
        );
        /** Sets the scale of the specified view to the desired scale factor.
             <br>  In batch mode, the scale of the view is modified, but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void SetScale
        (
            double scale /** Absolute scale factor */
        );
        /** Sets the rotation, translation and scale of the specified view.  The rotation
            is applied first, about the absolute origin.  Then the translation of the "look at"
            point to the view center is done, then the view is scaled about the view center.
             <br>  In batch mode, the rotation, translation and scale of the view are modified,
            but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRotationTranslationScale
        (
            const NXOpen::Matrix3x3 & rotMatrix /** 3x3 rotation matrix to use for the view - replaces
                                                   *  the existing view rotation matrix (is not
                                                   *  concatenated with it */,
            const NXOpen::Point3d & translation /** Point in view space to put at the center of the view */,
            double scale /** Absolute scale factor */
        );
        /** Changes the orientation of the given view to the orientation of the canned
            view whose orientation is the closest to that of the given view.
            A view that is not displayed cannot be snapped.
            If enabled, the change in the orientation of the view is animated.
             <br>  In batch mode, the orientation of the view is changed internally,
            but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SnapToClosestCannedOrientation
        (
        );
        /** Similar to @link NXOpen::View::SnapToClosestCannedOrientation NXOpen::View::SnapToClosestCannedOrientation@endlink  except it 
            changes the orientation of the given view to the orientation of 
            some canned view "variant" based on I-deas's 'snapview' logic whose 
            orientation is the closest to one of the six orthographic and eight flavors 
            of trimetric views. 
             <br>  In batch mode, the orientation of the view is changed internally,
            but no display occurs.  <br>  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: void SnapToVariantCannedOrientation
        (
        );
        /** Updates the display of given view, as needed.  The current scale of the
            view is used to determine the tessalation of curves, facets and
            software line fonts.  The view must be already displayed.
             <br>  In batch mode, internal state information is updated, but no
            display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateDisplay
        (
        );
        /** Scales the specified view to a desired relative scale. The "reduce" and 
            "increase" scale options are fixed at 10%. All the scale options provided by 
            @link NXOpen::View::ScaleFactor NXOpen::View::ScaleFactor@endlink  have an internal limiting factor. This scale can't be 
            increased or decreased indefinitely.  The change in view scale is not animated.
             <br>  In batch mode, the scale of the view is modified, but no display occurs.  <br>  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Zoom
        (
            NXOpen::View::ScaleFactor scaleFactor /** Relative scale factor */
        );
        /** Scales the specified view such that the given scale_about_point does not move.
            If the specified scale is extremely small or extremely large, a minimum or maximum scale
            will be used.  These are the same minimum and maximum values as used interactively.
            The relative_scale will be concatenated to the current scale of the view, so that
            1.0 means no change of scale and 2.0 means that the scale of the view will be doubled.
            The scale_about_point and current_view_center are given in View Space.
            The view must already be displayed.
             <br>  In batch mode, the scale and translation of the view are modified,
            but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void ZoomAboutPoint
        (
            double relativeScale /** Relative scale [1.0 = no change] */,
            const NXOpen::Point3d & scaleAboutPoint /** The point to remain stationary, in View Space */,
            const NXOpen::Point3d & viewCenter /** The point to be considered as the view center,
                                                          in View Space.  This may be NULL, in which case the
                                                          current view center is used. */
        );
        /** Scales the specified view such that the specified rectangle is as large
            as possible while being fully contained within the viewport.  If the rectangle
            and the viewport do not have the same aspect ratio, the viewport will contain
            some of the view not within the rectangle.  If the rectangle is extremely
            small or extremely large, a minimum or maximum scale will be used.  These are
            the same minimum and maximum values as used interactively.  The two opposite
            corners of the rectangle are given in View Space.  The view must already be displayed.
            If enabled, the change in the bounds of the view is animated.
             <br>  In batch mode, the scale and translation of the view are modified,
            but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void ZoomByRectangle
        (
            const NXOpen::Point3d & corner1 /** One corner of the rectangle, in View Space */,
            const NXOpen::Point3d & corner2 /** The opposite corner of the rectangle, in View Space */
        );
        /** Changes a view from an orthographic view to a perspective view, or from a perspective
                 view to an orthographic view.  A request to change an already perspective view to
                 a perspective view is ignored, as is a request to change an already orthographic
                 view to an orthographic view.  If the view is a drawing view or a member view on
                 a drawing, the request is ignored.
             
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ChangePerspective
        (
            bool changeViewToPerspective /** changeviewtoperspective */ 
        );
        /**Returns  the rendering style of the view. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::View::RenderingStyleType RenderingStyle
        (
        );
        /**Sets  the rendering style of the view. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRenderingStyle
        (
            NXOpen::View::RenderingStyleType renderingStyle /** rendering style */ 
        );
        /** Returns an array of objects visible in a view  @return  The array of visible objects 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::DisplayableObject *> AskVisibleObjects
        (
        );
        /** Updates custom symbol in a drawing member view or drawing sheet
         <br>  Created in NX8.0.1.  <br>  
         <br> License requirements : None */
        public: void UpdateCustomSymbols
        (
        );
        /**Returns  the "Lock Rotations" toggle state of a view. 
                If there is no error, the current toggle state is returned 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: bool LockRotations
        (
        );
        /**Sets  the "Lock Rotations" toggle state of a view. 
                If there is no error, the current toggle state is returned 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLockRotations
        (
            bool newToggleState /** Sets new toggle state
                                                         <br>  True -  Sets toggle ON  <br> 
                                                         <br>  False - Sets toggle OFF  <br> 
                                                        */
        );
        /**Returns  the "Synchronized Views" toggle state of a view.
                If there is no error, the current toggle state is returned 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: bool SyncViews
        (
        );
        /**Sets  the "Synchronized Views" toggle state of a view.
                If there is no error, the current toggle state is returned 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSyncViews
        (
            bool newToggleState /** Sets new toggle state
                                                         <br>  True -  Sets toggle ON  <br> 
                                                         <br>  False - Sets toggle OFF  <br> 
                                                        */
        );
        /**Returns  the visibility of the WCS in the view. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool WcsVisibility
        (
        );
        /**Sets  the visibility of the WCS in the view. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetWcsVisibility
        (
            bool isVisible /** is visible */ 
        );
        /**Returns  the visibility of the view triad in the view. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: bool TriadVisibility
        (
        );
        /**Sets  the visibility of the view triad in the view. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTriadVisibility
        (
            bool triadVisibility /** triad visibility */ 
        );
        /**Returns  the Disclosure Purpose. 
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: NXString DisclosurePurpose
        (
        );
        /**Sets  the Disclosure Purpose. 
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: void SetDisclosurePurpose
        (
            const NXString & disclosurePurpose /**  <br>  True  - Disclosure Purpose string  <br> 
                                                                   <br>  False - Disclosure Purpose string remains the same  <br>  */
        );
        /**Sets  the Disclosure Purpose. 
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        void SetDisclosurePurpose
        (
            const char * disclosurePurpose /**  <br>  True  - Disclosure Purpose string  <br> 
                                                                   <br>  False - Disclosure Purpose string remains the same  <br>  */
        );
        /** Returns whether or not the given view has a preview.  @return   <br>  True  - Model View Preview exists  <br> 
                                                                  <br>  False - Model View Preview does not exist  <br>  
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: bool HasPreview
        (
        );


        /** Returns an object to perform all visualization related preferences settings 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Preferences::ViewVisualizationVisual *VisualizationVisualPreferences();
        /** Returns an object to perform all visualization Special Effects related preferences settings 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::Preferences::ViewVisualizationSpecialEffects *VisualizationSpecialEffectsPreferences();
        /** Returns an object to perform all view dependent display operations 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ViewDependentDisplayManager *DependentDisplay();
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
