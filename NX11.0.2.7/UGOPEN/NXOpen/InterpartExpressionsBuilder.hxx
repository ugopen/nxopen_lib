#ifndef NXOpen_INTERPARTEXPRESSIONSBUILDER_HXX_INCLUDED
#define NXOpen_INTERPARTEXPRESSIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     InterpartExpressionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/InterpartExpressionsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class InterpartExpressionsBuilder;
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    class Expression;
    class _InterpartExpressionsBuilderBuilder;
    class InterpartExpressionsBuilderImpl;
    /**
        This class creates interpart expressions from the source part to the current work part via the naming rule defined.
     <br> To create a new instance of this class, use @link NXOpen::ExpressionCollection::CreateInterpartExpressionsBuilder  NXOpen::ExpressionCollection::CreateInterpartExpressionsBuilder @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    NamingRule </td> <td> 
     
    AddPrefix </td> </tr> 

    </table>  

     <br>  Created in NX8.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  InterpartExpressionsBuilder : public NXOpen::Builder
    {
        /**
                This defines the naming rule used for the name of the expression created in 
                the current work part.  For example, if expression "x" is selected from source 
                part "A" then you will get these expressions below created in the current work 
                part for the following naming rules:
                
                    yx="A"::x for AddPrifix with BaseString "y" 
                    xy="A"::x for AddSuffix with BaseString "y"
                    zz="A"::x for Replace with BaseString "x" and ReplaceString "zz"
                    y0="A"::x for RenameWithIndex with BaseString "y"

                Empty strings are also supported for the BaseString and ReplaceString.

                Errors will be issued whenever a generated left hand side expression name has incorrect syntax, 
                already exists in the current work part or the source expression is from the current work part.
            */
        public: enum NamingRules
        {
            NamingRulesAddPrefix/** add prefix */ ,
            NamingRulesAddSuffix/** add suffix */ ,
            NamingRulesReplace/** replace */ ,
            NamingRulesRenameWithIndex/** rename with index */ 
        };

        private: InterpartExpressionsBuilderImpl * m_interpartexpressionsbuilder_impl;
        private: friend class  _InterpartExpressionsBuilderBuilder;
        protected: InterpartExpressionsBuilder();
        public: ~InterpartExpressionsBuilder();
        /**Returns  the naming rule.  This determines how the name of the expression in the current work part is constructed. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::InterpartExpressionsBuilder::NamingRules NamingRule
        (
        );
        /**Sets  the naming rule.  This determines how the name of the expression in the current work part is constructed. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetNamingRule
        (
            NXOpen::InterpartExpressionsBuilder::NamingRules namingRule /** namingrule */ 
        );
        /**Returns  the base string.  This string is used as the prefix for AddPrefix, the suffix for AddSuffix, the replaced string for Replace and the rename string for RenameWithIndex. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString BaseString
        (
        );
        /**Sets  the base string.  This string is used as the prefix for AddPrefix, the suffix for AddSuffix, the replaced string for Replace and the rename string for RenameWithIndex. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetBaseString
        (
            const NXString & baseString /** basestring */ 
        );
        /**Sets  the base string.  This string is used as the prefix for AddPrefix, the suffix for AddSuffix, the replaced string for Replace and the rename string for RenameWithIndex. 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetBaseString
        (
            const char * baseString /** basestring */ 
        );
        /**Returns  the replace string.  This string replaces the BaseString for the Replace.
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXString ReplaceString
        (
        );
        /**Sets  the replace string.  This string replaces the BaseString for the Replace.
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetReplaceString
        (
            const NXString & replaceString /** replacestring */ 
        );
        /**Sets  the replace string.  This string replaces the BaseString for the Replace.
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        void SetReplaceString
        (
            const char * replaceString /** replacestring */ 
        );
        /** Get an array of source expressions.  These are the source expressions to be referenced by the current work part. 
                The destination names can be used to override the naming rule for a given source expression.  This is a parallel 
                array.  Each source expression has an entry in this array for its destination name.  If the associated destination 
                name is the empty string then the naming rule will be used to generate the destination name for a given source 
                expression otherwise the destination name itself will be used to name the new expression in the current work part.  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void GetExpressions
        (
            std::vector<NXOpen::Expression *> & sourceExpressions /** array of source expressions */,
            std::vector<NXString> & destinationNames /** array of destination names */
        );
        /** Set an array of source expressions.  These are the source expressions to be referenced by the current work part. 
                The destination names can be used to override the naming rule for a given source expression.  This is a parallel 
                array.  Each source expression has an entry in this array for its destination name.  If the associated destination 
                name is the empty string then the naming rule will be used to generate the destination name for a given source 
                expression otherwise the destination name itself will be used to name the new expression in the current work part.  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetExpressions
        (
            const std::vector<NXOpen::Expression *> & sourceExpressions /** array of source expressions */,
            const std::vector<NXString> & destinationNames /** array of destination names */
        );
        /** Interface for 4gd  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExpressionsFor4gd
        (
            NXOpen::Assemblies::Component * targetPartOcc /** Target part occurrence */,
            NXOpen::Assemblies::Component * sourcePartOcc /** Source part occurrence */,
            const std::vector<NXOpen::Expression *> & sourceExpressions /** array of source expressions */,
            const std::vector<NXString> & destinationNames /** array of destination names */
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
