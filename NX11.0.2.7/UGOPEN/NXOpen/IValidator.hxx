#ifndef NXOpen_IVALIDATOR_HXX_INCLUDED
#define NXOpen_IVALIDATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     IValidator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class IValidator;
    /** validator version */

    /// \cond NX_NO_DOC 
    enum ValidatorVersion
    {
        ValidatorVersionZero/** version zero. */,
        ValidatorVersionOne/** version one. */,
        ValidatorVersionTwo/** version two. */,
        ValidatorVersionThree/** version three. */,
        ValidatorVersionFour/** version four. */
    };


    /// \endcond 
    /** print level. */

    /// \cond NX_NO_DOC 
    enum ValidatorPrintLevel
    {
        ValidatorPrintLevelLight/** light validation. */,
        ValidatorPrintLevelHeavy/** heavy validation. */
    };


    /// \endcond 

    /// \cond NX_NO_DOC 
    /** Provides utilities to validate feature collection in an automated test  <br> This is an abstract class, and cannot be instantiated.  <br> 
     <br>  Created in NX7.5.0.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  IValidator
    {
        virtual void EnsureVtableExists() {}
        public: virtual ~IValidator() {}
        /**Returns  the algorithm to use for validation. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: virtual NXOpen::ValidatorVersion ValidatorVersion
        (
        ) = 0;
        /**Sets  the algorithm to use for validation. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: virtual void SetValidatorVersion
        (
            NXOpen::ValidatorVersion version /** version */ 
        ) = 0;
        /**Returns  the print level for validation. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: virtual NXOpen::ValidatorPrintLevel ValidatorPrintLevel
        (
        ) = 0;
        /**Sets  the print level for validation. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: virtual void SetValidatorPrintLevel
        (
            NXOpen::ValidatorPrintLevel level /** level */ 
        ) = 0;
        /** Deletes the validator. 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: virtual void Destroy
        (
        ) = 0;
        /** Set the ood status of features. 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: virtual void SetValidatorPrintOodStatus
        (
            bool status /** status */ 
        ) = 0;
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
