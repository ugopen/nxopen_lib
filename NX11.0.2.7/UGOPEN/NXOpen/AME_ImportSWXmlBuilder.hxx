#ifndef NXOpen_AME_IMPORTSWXMLBUILDER_HXX_INCLUDED
#define NXOpen_AME_IMPORTSWXMLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ImportSWXmlBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_ImportSWXmlBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ImportSWXmlBuilder;
    }
    namespace AME
    {
        class SWStatusItem;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    class Builder;
    namespace AME
    {
        class _ImportSWXmlBuilderBuilder;
        class ImportSWXmlBuilderImpl;
        /** Journaling class for ImportSWXml  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateImportSwxmlBuilder  NXOpen::AME::AMEManager::CreateImportSwxmlBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ImportSWXmlBuilder : public NXOpen::Builder
        {
            private: ImportSWXmlBuilderImpl * m_importswxmlbuilder_impl;
            private: friend class  _ImportSWXmlBuilderBuilder;
            protected: ImportSWXmlBuilder();
            public: ~ImportSWXmlBuilder();
            /**Returns  the selected controller target 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * SelectedTarget
            (
            );
            /** Append software block files
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AppendSelectedBlockFiles
            (
                const std::vector<NXString> & selectedBlockFiles /** selectedblockfiles */ 
            );
            /** Remove an added software block
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveSelectedBlockByIndex
            (
                int index /** index */ 
            );
            /** Get the status the builder data
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void GetStatusItems
            (
                std::vector<NXOpen::AME::SWStatusItem *> & statusItems /** statusitems */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
