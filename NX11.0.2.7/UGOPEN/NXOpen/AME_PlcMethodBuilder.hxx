#ifndef NXOpen_AME_PLCMETHODBUILDER_HXX_INCLUDED
#define NXOpen_AME_PLCMETHODBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcMethodBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_PlcBlock.hxx>
#include <NXOpen/AME_PlcMethod.hxx>
#include <NXOpen/AME_PlcMethodBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PlcMethodBuilder;
    }
    namespace AME
    {
        class PlcBlock;
    }
    namespace AME
    {
        class PlcMethod;
    }
    class Builder;
    class NXObject;
    namespace AME
    {
        class _PlcMethodBuilderBuilder;
        class PlcMethodBuilderImpl;
        /** The Journalling class for PlcMethodBuilder <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePlcMethodBuilder  NXOpen::AME::AMEManager::CreatePlcMethodBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PlcMethodBuilder : public NXOpen::Builder
        {
            private: PlcMethodBuilderImpl * m_plcmethodbuilder_impl;
            private: friend class  _PlcMethodBuilderBuilder;
            protected: PlcMethodBuilder();
            public: ~PlcMethodBuilder();
            /**Returns  the code/data block name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString MethodName
            (
            );
            /**Sets  the code/data block name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMethodName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the code/data block name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetMethodName
            (
                const char * name /** name */ 
            );
            /**Returns  the method
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PlcMethod * Method
            (
            );
            /** Delete Parameter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteParameter
            (
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Set new name to a parameter  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int SetNewParameterName
            (
                NXOpen::NXObject * obj /** obj */ ,
                const NXString & newName /** newname */ 
            );
            /** Set new name to a parameter  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            int SetNewParameterName
            (
                NXOpen::NXObject * obj /** obj */ ,
                const char * newName /** newname */ 
            );
            /** Set new data type to a parameter  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int SetNewParameterDataType
            (
                NXOpen::NXObject * obj /** obj */ ,
                const NXString & newDataType /** newdatatype */ 
            );
            /** Set new data type to a parameter  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            int SetNewParameterDataType
            (
                NXOpen::NXObject * obj /** obj */ ,
                const char * newDataType /** newdatatype */ 
            );
            /** Gets all existing parameter  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::NXObject *> GetALLParameters
            (
            );
            /** Clear the number of statments and networks which are saved to creating a method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ClearCompileUnitIndexCountAndStatementIndexCount
            (
            );
            /** Add a index of network that will be in a method
                    with this function is possible to add several network  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddCompileUnitIndex
            (
                int idx /** idx */ 
            );
            /** Add a index of start statment in a network and index of end of statment 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddStatementIndexes
            (
                int compileUnitIndex /** compileunitindex */ ,
                int startStatementIndex /** startstatementindex */ ,
                int endStatementIndex /** endstatementindex */ 
            );
            /** Set selected PlcCodeBlock 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPlcCodeBlock
            (
                NXOpen::AME::PlcBlock * plcBlock /** plcblock */ 
            );
            /** To find out that the given for method name already exist or not  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int DoesMethodNameAlreadyExist
            (
                const NXString & methodName /** methodname */ 
            );
            /** To find out that the given for method name already exist or not  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            int DoesMethodNameAlreadyExist
            (
                const char * methodName /** methodname */ 
            );
            /** Add a parameter  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * CreateParameter
            (
            );
            /** To Create Method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CreateMethod
            (
            );
            /** To Delete Method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeletePlcMethod
            (
            );
            /** Get selected compileUnitIndex size  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int GetSelectedCompileUnitIndexCount
            (
            );
            /** Assign parameter to operand  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int AssignOperandToParameter
            (
                int compileUnitIndex /** compileunitindex */ ,
                int statementIndex /** statementindex */ ,
                int operandIndex /** operandindex */ ,
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Assign parameter to operand  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: int AssignCallParameterToParameter
            (
                int compileUnitIndex /** compileunitindex */ ,
                int statementIndex /** statementindex */ ,
                int callParameterIndex /** callparameterindex */ ,
                NXOpen::NXObject * obj /** obj */ 
            );
            /** Delete a position 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeletePosition
            (
                NXOpen::NXObject * position /** position */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
