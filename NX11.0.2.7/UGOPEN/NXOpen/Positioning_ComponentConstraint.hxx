#ifndef NXOpen_POSITIONING_COMPONENTCONSTRAINT_HXX_INCLUDED
#define NXOpen_POSITIONING_COMPONENTCONSTRAINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Positioning_ComponentConstraint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Positioning_Constraint.hxx>
#include <NXOpen/libnxopencpp_positioning_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Positioning
    {
        class ComponentConstraint;
    }
    namespace Assemblies
    {
        class Arrangement;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Positioning
    {
        class Constraint;
    }
    namespace Positioning
    {
        class _ComponentConstraintBuilder;
        class ComponentConstraintImpl;
        /**
            Constraint for use in positioning assembly objects in NX.
            

         <br>  Created in NX5.0.1.  <br>  
        */
        class NXOPENCPP_POSITIONINGEXPORT  ComponentConstraint : public NXOpen::Positioning::Constraint
        {
            /** Specifies how a constraint affects the positioning of a component.
                */
            public: enum DirectionToFixed
            {
                DirectionToFixedUnknown/** No information available */ = -1,
                DirectionToFixedToward/** Toward fixed geometry */,
                DirectionToFixedAwayFrom/** Away from fixed geometry */,
                DirectionToFixedNothingFixed/** The network does not contain any fixed geometry */,
                DirectionToFixedFix/** The constraint is a @link NXOpen::Positioning::Constraint::TypeFix NXOpen::Positioning::Constraint::TypeFix@endlink  */,
                DirectionToFixedSuppressed/** The constraint is suppressed */,
                DirectionToFixedIgnoredInArrangement/** The current arrangement ignores all constraints */
            };

            private: ComponentConstraintImpl * m_componentconstraint_impl;
            private: friend class  _ComponentConstraintBuilder;
            protected: ComponentConstraint();
            public: ~ComponentConstraint();
            /**
                    Remembers the constraint in the prototype part of a referenced component
                    for reuse in other occurrences of the part. Fix and Bond constraints are
                    never remembered.  If the constraint does not reference geometry in the
                    component, it is not remembered.
                
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RememberOnComponent
            (
                NXOpen::Assemblies::Component * component /** The @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  on which the constraint is remembered */
            );
            /**Returns 
                    the arrangement specific state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  in the 
                    @link NXOpen::Positioning::ComponentPositioner::PrimaryArrangement NXOpen::Positioning::ComponentPositioner::PrimaryArrangement @endlink and @link NXOpen::Positioning::ComponentPositioner::SetPrimaryArrangement NXOpen::Positioning::ComponentPositioner::SetPrimaryArrangement @endlink .  Constraints can
                    never be arrangement specific in piece parts.
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool ArrangementSpecific
            (
            );
            /**Sets 
                    the arrangement specific state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  in the 
                    @link NXOpen::Positioning::ComponentPositioner::PrimaryArrangement NXOpen::Positioning::ComponentPositioner::PrimaryArrangement @endlink and @link NXOpen::Positioning::ComponentPositioner::SetPrimaryArrangement NXOpen::Positioning::ComponentPositioner::SetPrimaryArrangement @endlink .  Constraints can
                    never be arrangement specific in piece parts.
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetArrangementSpecific
            (
                bool arrangementSpecific /**  The arrangement specific state */
            );
            /**
                    Get the arrangement specific state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  in the 
                    specified @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink .
                 @return   The arrangement specific state. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetSpecificInArrangement
            (
                NXOpen::Assemblies::Arrangement * arrangement /**  The @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  in which the arrangement specific state is being enquired. */
            );
            /**
                    Set the arrangement specific state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  in the 
                    specified @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink .
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSpecificInArrangement
            (
                NXOpen::Assemblies::Arrangement * arrangement /**  The @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  in which the arrangement specific state is being set. */,
                bool arrangementSpecific /**  The arrangement specific state. */
            );
            /**
                    Get the suppression state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  in the 
                    specified @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink .  If the constraint is not arrangement
                    specific in this arrangement then the shared suppression state, used across all 
                    arrangements where the constraint is not arrangement specific, is used.
                 @return   The suppression state. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetSuppressedInArrangement
            (
                NXOpen::Assemblies::Arrangement * arrangement /**  The @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  in which the suppression state is being enquired. */
            );
            /**
                    Set the suppression state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  in the 
                    specified @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink .  If the constraint is not arrangement
                    specific in this arrangement then the shared suppression state, used across all 
                    arrangements where the constraint is not arrangement specific, is set.
                
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSuppressedInArrangement
            (
                NXOpen::Assemblies::Arrangement * arrangement /**  The @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  in which the suppression state is being set. */,
                bool suppressed /**  The suppression state. */
            );
            /**
                    Get the shared suppression state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  used across all 
                    arrangements where the constraint is not arrangement specific.
                 @return   The suppression state. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetSharedSuppressed
            (
            );
            /**
                    Set the shared suppression state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  used across all 
                    arrangements where the constraint is not arrangement specific.
                
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSharedSuppressed
            (
                bool suppressed /**  The suppression state. */
            );
            /**
                    Get whether this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  is 
                    an inherited constraint. An inherited constraint is created by the system 
                    to support Positioning Overrides. 
                 @return  The inherited state of this @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool GetInherited
            (
            );
            /**
                    Get the @link NXOpen::Positioning::ComponentConstraint::DirectionToFixed NXOpen::Positioning::ComponentConstraint::DirectionToFixed@endlink  value of the @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink 
                    given a component and an arrangement.
                    This value specifies how a constraint affects the positioning of a component.
                    If the arrangement is null, the "direction to fixed" value will be evaluated based on the default arrangement.
                 @return  The @link NXOpen::Positioning::ComponentConstraint::DirectionToFixed NXOpen::Positioning::ComponentConstraint::DirectionToFixed@endlink  value. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ComponentConstraint::DirectionToFixed GetDirectionToFixed
            (
                NXOpen::Assemblies::Component * component /** The component constrained to the specified constraint. */,
                NXOpen::Assemblies::Arrangement * arrangement /** The @link NXOpen::Assemblies::Arrangement NXOpen::Assemblies::Arrangement@endlink  in which the constraint state is being evaluated. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
