#ifndef NXOpen_PID_EQUIPMENT_HXX_INCLUDED
#define NXOpen_PID_EQUIPMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_Equipment.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PDM_LogicalElementRevision.hxx>
#include <NXOpen/PDM_LogicalElementRevision.hxx>
#include <NXOpen/PDM_PortArtifact.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class Equipment;
    }
    namespace PDM
    {
        class LogicalElementRevision;
    }
    namespace PID
    {
        class Port;
    }
    namespace PID
    {
        class _EquipmentBuilder;
        class EquipmentImpl;

        /// \cond NX_NO_DOC 
        /** Represents the equipment class.  <br> To create or edit an instance of this class, use @link NXOpen::PID::EquipmentBuilder  NXOpen::PID::EquipmentBuilder @endlink  <br> 
         <br>  Created in NX11.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  Equipment : public NXOpen::PDM::LogicalElementRevision
        {
            private: EquipmentImpl * m_equipment_impl;
            private: friend class  _EquipmentBuilder;
            protected: Equipment();
            public: ~Equipment();
            /** Get ports of the equipment.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetPorts
            (
                std::vector<NXOpen::PID::Port *> & ports /** ports */ 
            );
            /** Get one port of the equipment by port ID. @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::Port * GetPort
            (
                const NXString & portId /** portid */ 
            );
            /** Get one port of the equipment by port ID. @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            NXOpen::PID::Port * GetPort
            (
                const char * portId /** portid */ 
            );
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
