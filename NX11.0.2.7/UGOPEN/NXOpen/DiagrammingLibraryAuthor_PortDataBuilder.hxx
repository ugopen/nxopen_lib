#ifndef NXOpen_DIAGRAMMINGLIBRARYAUTHOR_PORTDATABUILDER_HXX_INCLUDED
#define NXOpen_DIAGRAMMINGLIBRARYAUTHOR_PORTDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DiagrammingLibraryAuthor_PortDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_PortDataBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_diagramminglibraryauthor_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace DiagrammingLibraryAuthor
    {
        class PortDataBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class AttributeHolder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class _PortDataBuilderBuilder;
        class PortDataBuilderImpl;
        /**  @brief  Represents a PortDataBuilder.  

          
         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_DIAGRAMMINGLIBRARYAUTHOREXPORT  PortDataBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: PortDataBuilderImpl * m_portdatabuilder_impl;
            private: friend class  _PortDataBuilderBuilder;
            protected: PortDataBuilder();
            public: ~PortDataBuilder();
            /** Gets the port objects which have user attributes of the port. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void GetPortObjects
            (
                std::vector<NXOpen::DiagrammingLibraryAuthor::AttributeHolder *> & portObjects /** the port objects */
            );
            /**Returns  the nozzle in the top edge 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool NozzleTop
            (
            );
            /**Sets  the nozzle in the top edge 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetNozzleTop
            (
                bool nozzleTop /** nozzletop */ 
            );
            /**Returns  the nozzle in the bottom edge. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool NozzleBottom
            (
            );
            /**Sets  the nozzle in the bottom edge. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetNozzleBottom
            (
                bool nozzleBottom /** nozzlebottom */ 
            );
            /**Returns  the nozzle in the left edge. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool NozzleLeft
            (
            );
            /**Sets  the nozzle in the left edge. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetNozzleLeft
            (
                bool nozzleLeft /** nozzleleft */ 
            );
            /**Returns  the nozzle in the right edge. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool NozzleRight
            (
            );
            /**Sets  the nozzle in the right edge. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetNozzleRight
            (
                bool nozzleRight /** nozzleright */ 
            );
            /** Gets the port location  @return  the port location 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d GetPointLocation
            (
                NXOpen::DiagrammingLibraryAuthor::AttributeHolder * portObject /** the port object,
                                only accept the object which is got by @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::GetPortObjects NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::GetPortObjects@endlink  or @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort@endlink  */
            );
            /** Sets the port location 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetPointLocation
            (
                NXOpen::DiagrammingLibraryAuthor::AttributeHolder * portObject /** the port object,
                                only accept the object which is by @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::GetPortObjects NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::GetPortObjects@endlink  or @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort@endlink  */,
                const NXOpen::Point2d & portLocation /** the port location */
            );
            /** Gets the connection direction  @return  the connection direction 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d GetConnectionDirection
            (
                NXOpen::DiagrammingLibraryAuthor::AttributeHolder * portObject /** the port object,
                                only accept the object which is got by @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::GetPortObjects NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::GetPortObjects@endlink  or @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort@endlink  */
            );
            /** Sets the connection direction  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetConnectionDirection
            (
                NXOpen::DiagrammingLibraryAuthor::AttributeHolder * portObject /** the port object,
                                only accept the object which is got by @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::GetPortObjects NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::GetPortObjects@endlink  or @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort@endlink  */,
                const NXOpen::Point2d & connectionDirection /** the connection direction */
            );
            /** Creates a new port  @return  the port object 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::DiagrammingLibraryAuthor::AttributeHolder * CreatePort
            (
            );
            /** Deletes the port which is new created 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void DeletePort
            (
                NXOpen::DiagrammingLibraryAuthor::AttributeHolder * portObject /** the port object,
                                only accept the object which is got by @link NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort NXOpen::DiagrammingLibraryAuthor::PortDataBuilder::CreatePort@endlink  */
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
