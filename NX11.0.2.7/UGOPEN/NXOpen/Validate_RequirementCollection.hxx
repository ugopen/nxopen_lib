#ifndef NXOpen_VALIDATE_REQUIREMENTCOLLECTION_HXX_INCLUDED
#define NXOpen_VALIDATE_REQUIREMENTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_RequirementCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Validate_Requirement.hxx>
#include <NXOpen/Validate_RequirementBuilder.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class RequirementCollection;
    }
    class BasePart;
    namespace Validate
    {
        class Requirement;
    }
    namespace Validate
    {
        class RequirementBuilder;
    }
    namespace Validate
    {
        class RequirementCollectionImpl;
        /**
             Represents an NX @link NXOpen::Validate::RequirementCollection NXOpen::Validate::RequirementCollection@endlink  object.
             <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  RequirementCollection : public NXOpen::TaggedObjectCollection
        {
            /** This enum represents the type of external source where requirement is defined */
            public: enum SourceTypeOptions
            {
                SourceTypeOptionsLocalFile/** local file */ ,
                SourceTypeOptionsTeamcenterFile/** teamcenter file */ ,
                SourceTypeOptionsTeamcenter/** teamcenter */ 
            };

            private: RequirementCollectionImpl * m_requirementcollection_impl;
            private: NXOpen::BasePart* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RequirementCollection(NXOpen::BasePart *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RequirementCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Validate::RequirementCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Validate::Requirement *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Validate::RequirementCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_VALIDATEEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_VALIDATEEXPORT  void next();
                NXOpen::Validate::RequirementCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a @link NXOpen::Validate::RequirementBuilder NXOpen::Validate::RequirementBuilder@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::RequirementBuilder * CreateRequirementBuilder
            (
                NXOpen::Validate::Requirement * requirement /** requirement */ 
            );
            /** Finds the @link NXOpen::Validate::Requirement NXOpen::Validate::Requirement@endlink  with the given identifier.
                        An exception will be thrown if no object can be found with given identifier.  @return  @link NXOpen::Validate::Requirement NXOpen::Validate::Requirement@endlink  with the identifier 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::Requirement * FindObject
            (
                const NXString & id /** The identifier of the @link NXOpen::Validate::Requirement NXOpen::Validate::Requirement@endlink  */
            );
            /** Finds the @link NXOpen::Validate::Requirement NXOpen::Validate::Requirement@endlink  with the given identifier.
                        An exception will be thrown if no object can be found with given identifier.  @return  @link NXOpen::Validate::Requirement NXOpen::Validate::Requirement@endlink  with the identifier 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::Validate::Requirement * FindObject
            (
                const char * id /** The identifier of the @link NXOpen::Validate::Requirement NXOpen::Validate::Requirement@endlink  */
            );
            /**  Loads @link NXOpen::Validate::Requirement NXOpen::Validate::Requirement@endlink  from external source.
                         The source can be local file, Teamcenter requirement item or item revision, and Teamcenter spreadsheet dataset
                         for which the input sourceType is LocalFile, Teamcenter and TeamcenterFile respectively.
                     <br/>

                         Example inputs when sourceType is LocalFile
                     <ol>
                     <li>source: "C:\requirement.xml" or "C:\requirement_spreadsheet.xls"</li>
                     <li>revision: empty string</li>
                     <li>project: "category_A" It's a project node name in the source XML file or a sheet name in the source spreadsheet file.</li>
                     </ol>
                     <br/>

                         Example inputs when sourceType is Teamcenter
                     
                         If source is item revision 000084/A:
                     <ol>
                     <li>source: "000084"</li>
                     <li>revision: "A"</li>
                     <li>project: empty string</li>
                     </ol>
                     
                         If source is item 000084:
                     <ol>
                     <li>source: "000084"</li>
                     <li>revision:empty string</li>
                     <li>project: empty string</li>
                     </ol>
                     <br/>
                         Example inputs when sourceType is TeamcenterFile
                     
                         If source is a spreadsheet dataset in an item revision 000085/A:
                     <ol>
                     <li>source: 000085</li>
                     <li>revision: A</li>
                     <li>project: "category_A" It's a sheet name in the source spreadsheet.</li>
                     </ol>
                     
                         If source is a spreadsheet dataset in item 000085:
                     <ol>
                     <li>source: "000085"</li>
                     <li>revision: empty string</li>
                     <li>project: "category_A" It's a sheet name in the source spreadsheet.</li>
                     </ol>
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void LoadFromExternalSource
            (
                NXOpen::Validate::RequirementCollection::SourceTypeOptions sourceType /** Type of the external source */,
                const NXString & source /** File full path if sourceType is LocalFile; Item id if sourceType is Teamcenter or TeamcenterFile. */,
                const NXString & revision /** Only needed if sourceType is Teamcenter or TeamcenterFile. Revision id if source is an item revision. Null if source is an item. */,
                const NXString & project /** Required if sourceType is LocalFile or TeamcenterFile.
                                                                                            Project name if the source is a XML file; Sheet name if source is a spreadsheet file. */
            );
            /**  Loads @link NXOpen::Validate::Requirement NXOpen::Validate::Requirement@endlink  from external source.
                         The source can be local file, Teamcenter requirement item or item revision, and Teamcenter spreadsheet dataset
                         for which the input sourceType is LocalFile, Teamcenter and TeamcenterFile respectively.
                     <br/>

                         Example inputs when sourceType is LocalFile
                     <ol>
                     <li>source: "C:\requirement.xml" or "C:\requirement_spreadsheet.xls"</li>
                     <li>revision: empty string</li>
                     <li>project: "category_A" It's a project node name in the source XML file or a sheet name in the source spreadsheet file.</li>
                     </ol>
                     <br/>

                         Example inputs when sourceType is Teamcenter
                     
                         If source is item revision 000084/A:
                     <ol>
                     <li>source: "000084"</li>
                     <li>revision: "A"</li>
                     <li>project: empty string</li>
                     </ol>
                     
                         If source is item 000084:
                     <ol>
                     <li>source: "000084"</li>
                     <li>revision:empty string</li>
                     <li>project: empty string</li>
                     </ol>
                     <br/>
                         Example inputs when sourceType is TeamcenterFile
                     
                         If source is a spreadsheet dataset in an item revision 000085/A:
                     <ol>
                     <li>source: 000085</li>
                     <li>revision: A</li>
                     <li>project: "category_A" It's a sheet name in the source spreadsheet.</li>
                     </ol>
                     
                         If source is a spreadsheet dataset in item 000085:
                     <ol>
                     <li>source: "000085"</li>
                     <li>revision: empty string</li>
                     <li>project: "category_A" It's a sheet name in the source spreadsheet.</li>
                     </ol>
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void LoadFromExternalSource
            (
                NXOpen::Validate::RequirementCollection::SourceTypeOptions sourceType /** Type of the external source */,
                const char * source /** File full path if sourceType is LocalFile; Item id if sourceType is Teamcenter or TeamcenterFile. */,
                const char * revision /** Only needed if sourceType is Teamcenter or TeamcenterFile. Revision id if source is an item revision. Null if source is an item. */,
                const char * project /** Required if sourceType is LocalFile or TeamcenterFile.
                                                                                            Project name if the source is a XML file; Sheet name if source is a spreadsheet file. */
            );
            /**Returns  the revision rule for requirement from Teamcenter 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString RevisionRule
            (
            );
            /**Sets  the revision rule for requirement from Teamcenter 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRevisionRule
            (
                const NXString & rule /** rule */ 
            );
            /**Sets  the revision rule for requirement from Teamcenter 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void SetRevisionRule
            (
                const char * rule /** rule */ 
            );
            /** Refreshes the requirements from external source. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void RefreshFromExternalSource
            (
                const std::vector<NXOpen::Validate::Requirement *> & requirementTags /** requirementtags */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
