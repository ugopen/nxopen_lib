#ifndef NXOpen_CAE_CYCLICSYMMETRICPARAMETERS_HXX_INCLUDED
#define NXOpen_CAE_CYCLICSYMMETRICPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CyclicSymmetricParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CyclicSymmetricParameters;
    }
    namespace CAE
    {
        class _CyclicSymmetricParametersBuilder;
        class CyclicSymmetricParametersImpl;
        /** Implementation of axi-symmetry utility  <br> To obtain an instance of this class use.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CyclicSymmetricParameters : public NXOpen::TaggedObject
        {
            /** Cyclic Symmetric result type */
            public: enum GetResult
            {
                GetResultOnOriginalModel/** on original model */ ,
                GetResultRevolvedAll/** revolved all */ ,
                GetResultRevolvedSelectedSectors/** revolved selected sectors */ 
            };

            /** Cyclic Symmetric original model result type */
            public: enum OriginalResult
            {
                OriginalResultBySector/** by sector */ ,
                OriginalResultEnvelopeAcrossSectors/** envelope across sectors */ 
            };

            /** Select sector by value or index */
            public: enum SectorCriteria
            {
                SectorCriteriaIndex/** index */ ,
                SectorCriteriaValue/** value */ 
            };

            /** Selection value of sector */
            public: enum Value
            {
                ValueMaximum/** maximum */ ,
                ValueMinimum/** minimum */ ,
                ValueAbsoluteMaximum/** absolute maximum */ ,
                ValueAbsoluteMinimum/** absolute minimum */ 
            };

            /** Selection envelope value of sector */
            public: enum EnvelopeValue
            {
                EnvelopeValueMaximum/** maximum */ ,
                EnvelopeValueMinimum/** minimum */ ,
                EnvelopeValueAbsoluteMaximum/** absolute maximum */ ,
                EnvelopeValueAbsoluteMinimum/** absolute minimum */ ,
                EnvelopeValueAverage/** average */ ,
                EnvelopeValueSum/** sum */ 
            };

            private: CyclicSymmetricParametersImpl * m_cyclicsymmetricparameters_impl;
            private: friend class  _CyclicSymmetricParametersBuilder;
            protected: CyclicSymmetricParameters();
            public: ~CyclicSymmetricParameters();
            /**Returns  the result option enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CyclicSymmetricParameters::GetResult ResultOption
            (
            );
            /**Sets  the result option enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetResultOption
            (
                NXOpen::CAE::CyclicSymmetricParameters::GetResult enumOption /** enumoption */ 
            );
            /**Returns  the original result option enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CyclicSymmetricParameters::OriginalResult OriginalResultOption
            (
            );
            /**Sets  the original result option enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetOriginalResultOption
            (
                NXOpen::CAE::CyclicSymmetricParameters::OriginalResult enumOption /** enumoption */ 
            );
            /**Returns  the sector criteria enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CyclicSymmetricParameters::SectorCriteria SectCriteria
            (
            );
            /**Sets  the sector criteria enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetSectCriteria
            (
                NXOpen::CAE::CyclicSymmetricParameters::SectorCriteria enumCriteria /** enumcriteria */ 
            );
            /**Returns  the sector value enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CyclicSymmetricParameters::Value SectorValue
            (
            );
            /**Sets  the sector value enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetSectorValue
            (
                NXOpen::CAE::CyclicSymmetricParameters::Value enumValue /** enumvalue */ 
            );
            /**Returns  the sector envelope value enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::CyclicSymmetricParameters::EnvelopeValue EnvValue
            (
            );
            /**Sets  the sector envelope value enum 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetEnvValue
            (
                NXOpen::CAE::CyclicSymmetricParameters::EnvelopeValue enumEnvVal /** enumenvval */ 
            );
            /**Returns  the selected index 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int SectorIndex
            (
            );
            /**Sets  the selected index 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetSectorIndex
            (
                int sectorIndex /** sectorindex */ 
            );
            /** Get the selected indices 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void GetSectorIndices
            (
                std::vector<int> & sectors /** the sectors array */
            );
            /** Set the selected indices 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetSectorIndices
            (
                const std::vector<int> & sectors /** sectors */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
