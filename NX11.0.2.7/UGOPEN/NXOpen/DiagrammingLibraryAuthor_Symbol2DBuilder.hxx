#ifndef NXOpen_DIAGRAMMINGLIBRARYAUTHOR_SYMBOL2DBUILDER_HXX_INCLUDED
#define NXOpen_DIAGRAMMINGLIBRARYAUTHOR_SYMBOL2DBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DiagrammingLibraryAuthor_Symbol2DBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_PortDataBuilder.hxx>
#include <NXOpen/DiagrammingLibraryAuthor_Symbol2DBuilder.hxx>
#include <NXOpen/Gateway_ImageCaptureBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_diagramminglibraryauthor_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace DiagrammingLibraryAuthor
    {
        class Symbol2DBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class PortDataBuilder;
    }
    namespace Gateway
    {
        class ImageCaptureBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace DiagrammingLibraryAuthor
    {
        class _Symbol2DBuilderBuilder;
        class Symbol2DBuilderImpl;
        /**  @brief  Represents a Symbol2DBuilder.  

          
         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_DIAGRAMMINGLIBRARYAUTHOREXPORT  Symbol2DBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: Symbol2DBuilderImpl * m_symbol2dbuilder_impl;
            private: friend class  _Symbol2DBuilderBuilder;
            protected: Symbol2DBuilder();
            public: ~Symbol2DBuilder();
            /**Returns  the port data sub-builder. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::DiagrammingLibraryAuthor::PortDataBuilder * PortData
            (
            );
            /**Returns  the inline 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsInline
            (
            );
            /**Sets  the inline 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetInline
            (
                bool isInline /** isinline */ 
            );
            /**Returns  the scaling 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool EnableScale
            (
            );
            /**Sets  the scaling 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetEnableScale
            (
                bool enableScale /** enablescale */ 
            );
            /**Returns  the tag location 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d TagLocation
            (
            );
            /**Sets  the tag location 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetTagLocation
            (
                const NXOpen::Point2d & tagLocation /** taglocation */ 
            );
            /**Returns  the anchor point 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d AnchorPoint
            (
            );
            /**Sets  the anchor point 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetAnchorPoint
            (
                const NXOpen::Point2d & anchorPoint /** anchorpoint */ 
            );
            /**Returns  the drafting symbol object 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString DraftingSymbol
            (
            );
            /**Sets  the drafting symbol object 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetDraftingSymbol
            (
                const NXString & draftingSymbol /** draftingsymbol */ 
            );
            /**Sets  the drafting symbol object 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetDraftingSymbol
            (
                const char * draftingSymbol /** draftingsymbol */ 
            );
            /** Creates a new symbol from another symbol 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void CreateFromSymbol
            (
                const NXString & symbolId /** symbolid */ 
            );
            /** Creates a new symbol from another symbol 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void CreateFromSymbol
            (
                const char * symbolId /** symbolid */ 
            );
            /**Returns  the image capture builder 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Gateway::ImageCaptureBuilder * Image
            (
            );
            /**Sets  the image capture builder 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetImage
            (
                NXOpen::Gateway::ImageCaptureBuilder * imageCaptureBuilder /** imagecapturebuilder */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
