#ifndef NXOpen_TOOLDESIGNER_DBNODEMANAGER_HXX_INCLUDED
#define NXOpen_TOOLDESIGNER_DBNODEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ToolDesigner_DBNodeManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ToolDesigner_DBGunTipsNode.hxx>
#include <NXOpen/ToolDesigner_DBNodeContainer.hxx>
#include <NXOpen/ToolDesigner_DBStudyNode.hxx>
#include <NXOpen/ToolDesigner_DBWorksetNode.hxx>
#include <NXOpen/libtooldesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace ToolDesigner
    {
        class DBNodeManager;
    }
    class Session;
    class Part;
    namespace ToolDesigner
    {
        class DBGunTipsNode;
    }
    namespace ToolDesigner
    {
        class DBNodeContainer;
    }
    namespace ToolDesigner
    {
        class DBStudyNode;
    }
    namespace ToolDesigner
    {
        class DBWorksetNode;
    }
    namespace ToolDesigner
    {
        class DBNodeManagerImpl;
        /** Represents a manager of tool designer db nodes  <br> Use the static method in this class to obtain an instance.  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class TOOLDESIGNEROPENCPPEXPORT  DBNodeManager
        {
            private: DBNodeManagerImpl * m_dbnodemanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit DBNodeManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static DBNodeManager* theDBNodeManager;
            /** Returns the DBNodeManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static DBNodeManager* GetDBNodeManager(NXOpen::Session *owner);
            public: ~DBNodeManager();
            /** Creates a DB workset Node  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ToolDesigner::DBWorksetNode * CreateDBWorksetNode
            (
                NXOpen::Part * part /** part */ 
            );
            /** Gets a DB workset Node  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ToolDesigner::DBWorksetNode * GetDbworksetnode
            (
                NXOpen::Part * part /** part */ ,
                bool create /** create */ 
            );
            /** Creates a DB study Node  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ToolDesigner::DBStudyNode * CreateDBStudyNode
            (
                NXOpen::Part * part /** part */ 
            );
            /** Gets a DB study Node  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ToolDesigner::DBStudyNode * GetDbstudynode
            (
                NXOpen::Part * part /** part */ ,
                bool create /** create */ 
            );
            /** Creates a DB Node Container  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ToolDesigner::DBNodeContainer * CreateDBNodeContainer
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a DB Node tips  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ToolDesigner::DBGunTipsNode * CreateDBGunTipsNode
            (
                NXOpen::Part * part /** part */ 
            );
            /** Gets a gun tips Node  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ToolDesigner::DBGunTipsNode * GetGuntipsnode
            (
                NXOpen::Part * part /** part */ ,
                bool create /** create */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
