#ifndef NXOpen_DISPLAYMANAGER_HXX_INCLUDED
#define NXOpen_DISPLAYMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DisplayManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayModification.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class DisplayManager;
    class Session;
    class DisplayModification;
    class DisplayableObject;
    class DisplayManagerImpl;
    /** Represents an object to manage display settings. Input to this class can be PSM facet objects.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  DisplayManager
    {
        /** Facet cache memory level.
                See @link NXOpen::DisplayManager::FacetCacheMemoryLevel NXOpen::DisplayManager::FacetCacheMemoryLevel @endlink and @link NXOpen::DisplayManager::SetFacetCacheMemoryLevel NXOpen::DisplayManager::SetFacetCacheMemoryLevel @endlink  
            */
        public: enum FacetCacheMemoryLevelType
        {
            FacetCacheMemoryLevelTypeNone/** none */ ,
            FacetCacheMemoryLevelTypeOne/** one */ ,
            FacetCacheMemoryLevelTypeTwo/** two */ ,
            FacetCacheMemoryLevelTypeThree/** three */ 
        };

         /** 3d interface color definition */
        public:
        struct  J3dColor
        {
            public: /** red value in the range 0.0 to 1.0 */double Red;
            public: /** blue color value */double Green;
            public: /** green color value */double Blue;
            public: J3dColor() :
                Red(),
                Green(),
                Blue()
            {
            }
            /** Constructor for the J3dColor struct. */ 
            public: J3dColor(double redInitial /** red value in the range 0.0 to 1.0 */, 
                    double greenInitial /** blue color value */, 
                    double blueInitial /** green color value */) :
                Red(redInitial),
                Green(greenInitial),
                Blue(blueInitial)
            {
            }
        };

         /** 3d interface material definition */
        public:
        struct  J3dMaterial
        {
            public: /** object color */NXOpen::DisplayManager::J3dColor Color;
            public: /** object highlight color */NXOpen::DisplayManager::J3dColor HighlightColor;
            public: /** surface roughness parameter */double Roughness;
            public: /** specular reflection coeficient */double SpecularFactor;
            public: /** diffuse reflection coeficient */double DiffuseFactor;
            public: /** ambient light coeficient */double AmbientFactor;
            public: /** 0.0 is opaque, 1.0 is totally transparent */double Transparency;
            public: J3dMaterial() :
                Color(),
                HighlightColor(),
                Roughness(),
                SpecularFactor(),
                DiffuseFactor(),
                AmbientFactor(),
                Transparency()
            {
            }
            /** Constructor for the J3dMaterial struct. */ 
            public: J3dMaterial(const NXOpen::DisplayManager::J3dColor &colorInitial /** object color */, 
                    const NXOpen::DisplayManager::J3dColor &highlightColorInitial /** object highlight color */, 
                    double roughnessInitial /** surface roughness parameter */, 
                    double specularFactorInitial /** specular reflection coeficient */, 
                    double diffuseFactorInitial /** diffuse reflection coeficient */, 
                    double ambientFactorInitial /** ambient light coeficient */, 
                    double transparencyInitial /** 0.0 is opaque, 1.0 is totally transparent */) :
                Color(colorInitial),
                HighlightColor(highlightColorInitial),
                Roughness(roughnessInitial),
                SpecularFactor(specularFactorInitial),
                DiffuseFactor(diffuseFactorInitial),
                AmbientFactor(ambientFactorInitial),
                Transparency(transparencyInitial)
            {
            }
        };

         /** 3d interface structure */
        public:
        struct  J3dData
        {
            public: /** NX identifier for this shape */NXOpen::DisplayableObject * Eid;
            public: /** true if an assembly transform is used */bool HasTransform;
            public: /** true if this is a sheet body */bool Sheet;
            public: /** entity name */NXString Name;
            public: /** material properties */NXOpen::DisplayManager::J3dMaterial Material;
            public: J3dData() :
                Eid(),
                HasTransform(),
                Sheet(),
                Name(),
                Material()
            {
            }
            /** Constructor for the J3dData struct. */ 
            public: J3dData(NXOpen::DisplayableObject * eidInitial /** NX identifier for this shape */, 
                    bool hasTransformInitial /** true if an assembly transform is used */, 
                    bool sheetInitial /** true if this is a sheet body */, 
                    const NXString &nameInitial /** entity name */, 
                    const NXOpen::DisplayManager::J3dMaterial &materialInitial /** material properties */) :
                Eid(eidInitial),
                HasTransform(hasTransformInitial),
                Sheet(sheetInitial),
                Name(nameInitial),
                Material(materialInitial)
            {
            }
        };

        /** Controls the type of object to show or hide. See @link ShowByType ShowByType@endlink  
                and @link HideByType HideByType@endlink  */
        public: enum ShowHideType
        {
            ShowHideTypeAll/** Show or hide all of the following objects */,
            ShowHideTypeGeometry/** Show or hide all geometry objects. This 
                                                                    includes all bodies, components, and datums */,
            ShowHideTypeBodies/** Show or hide all bodies.
                                                                  This includes solid, sheet, and facetted bodies */,
            ShowHideTypeComponents/** Show or hide components */,
            ShowHideTypeSolidBodies/** Show or hide solid bodies */,
            ShowHideTypeSheetBodies/** Show or hide sheet bodies */,
            ShowHideTypeFacetedBodies/** Show or hide faceted bodies */,
            ShowHideTypePolygonBodies/** Show or hide polygon bodies */,
            ShowHideTypeSheetPolygonBodies/** Show or hide sheet polygon bodies */,
            ShowHideTypeSolidPolygonBodies/** Show or hide solid polygon bodies */,
            ShowHideTypeMidsurfacePolygonBodies/** Show or hide midsurface polygon bodies */,
            ShowHideTypeFromMeshPolygonBodies/** Show or hide from mesh polygon bodies */,
            ShowHideTypeFlowPolygonBodies/** Show or hide flow polygon bodies */,
            ShowHideTypeDatums/** Show or hide Datums i.e Coordinate Systems
                                                                  Datum Axes, Datum Planes, Datum Plane Grids,
                                                                  Points */,
            ShowHideTypePoints/** Show or hide points */,
            ShowHideTypeDatumAxes/** Show or hide datum axes */,
            ShowHideTypeDatumPlanes/** Show or hide datum planes */,
            ShowHideTypeDatumPlaneGrids/** Show or hide datum plane grids */,
            ShowHideTypeEntitySelectionPlanes/** Show or hide entity selection planes */,
            ShowHideTypeCsys/** Show or hide coordinate systems */,
            ShowHideTypeSketches/** Show or hide sketches */,
            ShowHideTypeCurves/** Show or hide curves */,
            ShowHideTypeInfiniteLines/** Show or hide infinite lines */,
            ShowHideTypeDraftingAnnotations/** Show or hide all drafting types.
                                                                                This includes drafting notes, dimensions, symbols and gdt */,
            ShowHideTypeDraftingDimensions/** Show or hide drafting dimensions */,
            ShowHideTypeDraftingNotes/** Show or hide drafting notes */,
            ShowHideTypeDraftingSymbols/** Show or hide drafting symbols */,
            ShowHideTypeDraftingGdt/** Show or hide drafting gdt */,
            ShowHideTypePmi/** Show or hide all pmi types.
                                                                    This includes pmi notes, dimensions, symbols and gdt */,
            ShowHideTypePmiDimensions/** Show or hide pmi dimensions */,
            ShowHideTypePmiNotes/** Show or hide pmi notes */,
            ShowHideTypePmiSymbols/** Show or hide pmi symbols */,
            ShowHideTypePmiGdt/** Show or hide pmi gdt */,
            ShowHideTypeAssemblyConstraints/** Show or hide assembly constraints */,
            ShowHideTypePmiGeometry/** Show or hide pmi geometry */,
            ShowHideTypeCaeEntities/** Show or hide all CAE entities */,
            ShowHideTypeMeshes/** Show or hide all mesh types */,
            ShowHideTypeMesh0d/** Show or hide all 0d meshes  */,
            ShowHideTypeMesh0dConcentratedMass/** Show or hide all 0d concentrated mass meshes  */,
            ShowHideTypeMesh0dDistributedMass/** Show or hide all 0d distributed mass meshes  */,
            ShowHideTypeMesh0dHeatBody/** Show or hide all 0d heat body meshes  */,
            ShowHideTypeMesh0dNodeToGround/** Show or hide all 0d node to ground meshes  */,
            ShowHideTypeMesh1d/** Show or hide all 1d mesh types  */,
            ShowHideTypeMesh1dBar/** Show or hide all 1d bar mesh types  */,
            ShowHideTypeMesh1dBeam/** Show or hide all 1d beam mesh types  */,
            ShowHideTypeMesh1dRod/** Show or hide all 1d rod mesh types  */,
            ShowHideTypeMesh1dBearing/** Show or hide all 1d bearing mesh types  */,
            ShowHideTypeMesh1dRigidLink/** Show or hide all 1d rigid link mesh types  */,
            ShowHideTypeMesh1dInterpolation/** Show or hide all 1d interpolation mesh types  */,
            ShowHideTypeMesh1dSpring/** Show or hide all 1d spring mesh types  */,
            ShowHideTypeMesh1dEdgeContact/** Show or hide all 1d edge contact mesh types  */,
            ShowHideTypeMesh1dFaceContact/** Show or hide all 1d face contact mesh types  */,
            ShowHideTypeMesh1dWeld/** Show or hide all 1d weld mesh types  */,
            ShowHideTypeMesh1dEdgeFaceConnection/** Show or hide all 1d edge face connection mesh types  */,
            ShowHideTypeMesh1dPlotel/** Show or hide all 1d PLOTEL mesh types  */,
            ShowHideTypeMesh1dMass/** Show or hide all 1d massmesh types  */,
            ShowHideTypeMesh2d/** Show or hide all 2d meshes  */,
            ShowHideTypeMesh2dTri3/** Show or hide all 2d meshes with triangular 3 node elements  */,
            ShowHideTypeMesh2dTri6/** Show or hide all 2d meshes with triangular 6 node elements  */,
            ShowHideTypeMesh2dQuad4/** Show or hide all 2d meshes with quadrilateral 4 node elements  */,
            ShowHideTypeMesh2dQuad8/** Show or hide all 2d meshes with quadrilateral 8 node elements  */,
            ShowHideTypeMesh3d/** Show or hide all 3d meshes  */,
            ShowHideTypeMesh3dTet4/** Show or hide all 3d meshes with tetrahedral 4 node elements  */,
            ShowHideTypeMesh3dTet10/** Show or hide all 3d meshes with tetrahedral 10 node elements  */,
            ShowHideTypeMesh3dTetMixed/** Show or hide all 3d meshes with tetrahedral elements with dropped mid-nodes */,
            ShowHideTypeMesh3dHex8/** Show or hide all 3d meshes with hexahedral elements with 8 nodes */,
            ShowHideTypeMesh3dHex20/** Show or hide all 3d meshes with hexahedral elements with 20 nodes  */,
            ShowHideTypeMesh3dHexcohes8/** Show or hide all 3d meshes with hexahedral cohesive elements with 8 nodes */,
            ShowHideTypeMesh3dHexcohes20/** Show or hide all 3d meshes with hexahedral cohesive elements with 20 nodes  */,
            ShowHideTypeMesh3dWedge6/** Show or hide all 3d meshes with wedge elements with 6 nodes  */,
            ShowHideTypeMesh3dWedge15/** Show or hide all 3d meshes with wedge elements with 15 nodes  */,
            ShowHideTypeMesh3dWdgcohes6/** Show or hide all 3d meshes with wedge cohesive elements with 6 nodes  */,
            ShowHideTypeMesh3dWdgcohes15/** Show or hide all 3d meshes with wedge cohesive elements with 15 nodes  */,
            ShowHideTypeMesh3dPyramid5/** Show or hide all 3d meshes with pyramid elements with 5 nodes  */,
            ShowHideTypeMesh3dPyramid13/** Show or hide all 3d meshes with pyramid elements with 13 nodes  */,
            ShowHideTypeMesh3dPyramidMixed/** Show or hide all 3d meshes with pyramid elements with dropped mid-nodes  */,
            ShowHideTypeDrawingObjects/** Show or hide all drafting types.
                                                                                          This includes drafting dimensions, Annotations,
                                                                                          Custom Symbols, Tables and Images. */,
            ShowHideTypeDrawingDimensions/** Show or hide all drafting dimensions. */,
            ShowHideTypeDrawingAnnotation/** Show or hide all drafting annotations.
                                                                                          This includes drafting Notes, Feature Control Frames,
                                                                                          Datum Feature Symbols, Datum Targets, Balloons,
                                                                                          Surface Finish Symbol, Weld Symbol, Target Point Symbol,
                                                                                          Intersection Symbol, Crosshatch, Area Fill and Centerlines. */,
            ShowHideTypeDrawingNotes/** Show or hide all drafting Notes. */,
            ShowHideTypeDrawingFeatureControlFrame/** Show or hide all drafting Feature Control Frames. */,
            ShowHideTypeDrawingDatumFeatureSymbols/** Show or hide all drafting Datum Feature Symbols. */,
            ShowHideTypeDrawingDatumTargets/** Show or hide all drafting Datum Targets. */,
            ShowHideTypeDrawingBalloons/** Show or hide all drafting Balloons. */,
            ShowHideTypeDrawingSurfaceFinishSymbols/** Show or hide all drafting Surface Finish Symbols. */,
            ShowHideTypeDrawingWeldSymbols/** Show or hide all drafting Weld Symbols. */,
            ShowHideTypeDrawingTargetPointSymbols/** Show or hide all drafting Target Point Symbols. */,
            ShowHideTypeDrawingIntersectionSymbols/** Show or hide all drafting Intersection Symbols. */,
            ShowHideTypeDrawingCrosshatch/** Show or hide all drafting Crosshatch. */,
            ShowHideTypeDrawingAreaFill/** Show or hide all drafting Area Fill. */,
            ShowHideTypeDrawingCenterlines/** Show or hide all drafting Centerlines. */,
            ShowHideTypeDrawingCustomSymbols/** Show or hide all all drafting Custom Symbols. */,
            ShowHideTypeDrawingTables/** Show or hide all drafting tables.
                                                                                          This includes Tabular Notes, Parts Lists and Title Blocks. */,
            ShowHideTypeDrawingTabularNotes/** Show or hide all Tabular Notes. */,
            ShowHideTypeDrawingPartsLists/** Show or hide all Parts Lists. */,
            ShowHideTypeDrawingTitleBlocks/** Show or hide all Title Blocks. */,
            ShowHideTypeDrawingHoleTables/** Show or hide all Hole Tables. */,
            ShowHideTypeDrawingImages/** Show or hide all Images. */,
            ShowHideTypePmiObject/** Show or hide all pmi objects*/,
            ShowHideTypePmiObjectDimensions/** Show or hide all pmi dimensions. */,
            ShowHideTypePmiAnnotations/** Show or hide all pmi annotations. */,
            ShowHideTypePmiObjectNotes/** Show or hide all pmi notes. */,
            ShowHideTypePmiFeatureControlFrames/** Show or hide all pmi feature control frames. */,
            ShowHideTypePmiDatumFeatureSymbols/** Show or hide all pmi datum feature symbols. */,
            ShowHideTypePmiDatumTargets/** Show or hide all pmi datum targets. */,
            ShowHideTypePmiBalloons/** Show or hide all pmi balloons. */,
            ShowHideTypePmiSurfaceFinishSymbols/** Show or hide all pmi surface finish symbols. */,
            ShowHideTypePmiWeldSymbols/** Show or hide all pmi weld symbols. */,
            ShowHideTypePmiCenterlines/** Show or hide all pmi centerlines. */,
            ShowHideTypePmiRegions/** Show or hide all pmi regions. */,
            ShowHideTypePmiCustomSymbols/** Show or hide all pmi custom symbols. */,
            ShowHideTypeComponents2d/** Show or hide 2d components */,
            ShowHideTypeImages/** Show or hide all images.
                                                                                           This includes raster images. */,
            ShowHideTypeRasterImage/** Show or hide raster images */,
            ShowHideTypeAoAll/** Show or hide all analysis objects. */,
            ShowHideTypeAoDeviationGauge/** Show or hide deviation gauge analysis objects. */,
            ShowHideTypeAoSectionAnalysis/** Show or hide section analysis objects. */,
            ShowHideTypeAoGridAnalysis/** Show or hide grid analysis objects. */,
            ShowHideTypeAoHighlightLines/** Show or hide highlight lines analysis objects. */,
            ShowHideTypeAoSurfaceContinuity/** Show or hide surface continuity analysis objects. */,
            ShowHideTypeAoGapFlushness/** Show or hide gap and flushness analysis objects. */,
            ShowHideTypeAoCurveContinuity/** Show or hide curve continuity analysis objects. */,
            ShowHideTypeAoCurveCurvature/** Show or hide curve analysis objects. */,
            ShowHideTypeAoSurfaceIntersection/** Show or hide surface intersection analysis objects. */,
            ShowHideTypeAoDraftAnalysis/** Show or hide draft analysis objects. */,
            ShowHideTypeAoTrimAngleCheck/** Show or hide trim angle check analysis objects. */,
            ShowHideTypeAoMoldFlow/** Show or hide mold flow analysis objects. */,
            ShowHideTypeAoLocalRadius/** Show or hide local radius analysis objects. */,
            ShowHideTypeAoFaceCurvature/** Show or hide face curvature analysis objects. */,
            ShowHideTypeAoFaceAnalysis/** Show or hide face analysis objects. */,
            ShowHideTypeMeshControls/** Show or hide all mesh controls. */,
            ShowHideTypeMeshControlsEdgeDensity/** Show or hide all mesh controls - edge density. */,
            ShowHideTypeMeshControlsMappedEdgeDensity/** Show or hide all mesh controls - mapped edge density. */,
            ShowHideTypeMeshControlsFaceDensity/** Show or hide all mesh controls - face density. */,
            ShowHideTypeMeshControlsMappedHoleDensity/** Show or hide all mesh controls - mapped hole density. */,
            ShowHideTypeMeshControlsWeldRowDensity/** Show or hide all mesh controls - weld row density. */,
            ShowHideTypeMeshControlsFilletDensity/** Show or hide all mesh controls - fillet density. */,
            ShowHideTypeMeshControlsCylinderDensity/** Show or hide all mesh controls - cylinder density. */,
            ShowHideTypeMeshControlsBoundaryLayer/** Show or hide all mesh controls - boundary layer. */,
            ShowHideTypeMmc/** Show or hide all mesh mating conditions. */,
            ShowHideTypeMeshedPolygonBodies/** Show or hide meshed polygon bodies */,
            ShowHideTypeUnmeshedPolygonBodies/** Show or hide unmeshed polygon bodies */,
            ShowHideTypeMeshPoints/** Show or hide mesh points */,
            ShowHideTypePmiSketchDimensions/** Show or hide all pmi sketch dimensions */,
            ShowHideTypeCaeBoundingVolumes/** Show or hide all CAE bounding volumes. */
        };

        /** Controls the scope for the show hide operation. See @link ShowByType ShowByType@endlink  
                and @link HideByType HideByType@endlink  */
        public: enum ShowHideScope
        {
            ShowHideScopeAnyInAssembly/** Show and hide objects from the entire displayed part */,
            ShowHideScopeWorkPartAndOccurrence/** Show and hide objects only from the work part and its children */
        };

        /** Represents the layer settings when the objects to show are in invisible layers */
        public: enum LayerSetting
        {
            LayerSettingMoveObjectsToWorkLayer/** Move the objects to work layer if they are in invisible layer */,
            LayerSettingChangeLayerToSelectable/** Change the layer to selectable if it is invisible */,
            LayerSettingInvalid/** Last value, should not be used. */
        };

        private: DisplayManagerImpl * m_displaymanager_impl;
        private: NXOpen::Session* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit DisplayManager(NXOpen::Session *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~DisplayManager();
        /** 
              Constructs a new @link NXOpen::DisplayModification NXOpen::DisplayModification@endlink  object.
              @return  The new DisplayModification instance 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DisplayModification * NewDisplayModification
        (
        );
        /** Blank a set of displayable objects.  You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink 
                after using this method.
                Some displayable objects are not valid for this method and, if found in the objects input, will be ignored.
                These include face and edge objects of solid bodies.
                
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void BlankObjects
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
        );
        /** Unblank a set of displayable objects.  You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink 
                after using this method.
                Some displayable objects are not valid for this method and, if found in the objects input, will be ignored.
                These include face and edge objects of solid bodies.
                
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void UnblankObjects
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
        );
        /** Shows a set of objects by type.  You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink 
                after using this method.  @return  The number of objects shown 
         <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::DisplayManager::ShowByType NXOpen::DisplayManager::ShowByType@endlink  that takes a string type instead. <br>  

         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::DisplayManager::ShowByType that takes a string type instead.") int ShowByType
        (
            NXOpen::DisplayManager::ShowHideType type /** The type of object to show */,
            NXOpen::DisplayManager::ShowHideScope scope /** The scope for the show hide operation */
        );
        /** Shows a set of objects by type.  You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink 
                after using this method.  @return  The number of objects shown 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: int ShowByType
        (
            const NXString & type /** The type of object to show */,
            NXOpen::DisplayManager::ShowHideScope scope /** The scope for the show hide operation */
        );
        /** Shows a set of objects by type.  You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink 
                after using this method.  @return  The number of objects shown 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        int ShowByType
        (
            const char * type /** The type of object to show */,
            NXOpen::DisplayManager::ShowHideScope scope /** The scope for the show hide operation */
        );
        /** Hides a set of objects by type.  You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink 
                after using this method.  @return  The number of objects hidden 
         <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::DisplayManager::HideByType NXOpen::DisplayManager::HideByType@endlink  that takes a string type instead. To find all registered ShowHideType string use @link NXOpen::DisplayManager::GetShowableHideableTypes NXOpen::DisplayManager::GetShowableHideableTypes@endlink  <br>  

         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::DisplayManager::HideByType that takes a string type instead. To find all registered ShowHideType string use NXOpen::DisplayManager::GetShowableHideableTypes") int HideByType
        (
            NXOpen::DisplayManager::ShowHideType type /** The type of object to hide */,
            NXOpen::DisplayManager::ShowHideScope scope /** The scope for the show hide operation */
        );
        /** Hides a set of objects by type.  You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink 
                after using this method.  @return  The number of objects hidden 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: int HideByType
        (
            const NXString & type /** The type of object to hide */,
            NXOpen::DisplayManager::ShowHideScope scope /** The scope for the show hide operation */
        );
        /** Hides a set of objects by type.  You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink 
                after using this method.  @return  The number of objects hidden 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        int HideByType
        (
            const char * type /** The type of object to hide */,
            NXOpen::DisplayManager::ShowHideScope scope /** The scope for the show hide operation */
        );
        /** Show a set of displayable objects. The objects selectable are:
            @link NXOpen::Curve NXOpen::Curve@endlink , @link NXOpen::Point NXOpen::Point@endlink , @link NXOpen::CAE::MeshPoint NXOpen::CAE::MeshPoint@endlink ,
            CSYS, @link NXOpen::Plane NXOpen::Plane@endlink , Mesh, @link NXOpen::CAE::CAEBody NXOpen::CAE::CAEBody@endlink ,
            @link NXOpen::CAE::CAEFace NXOpen::CAE::CAEFace@endlink , Load, Constraint and Simulation Object.
             You may want to use @link NXOpen::View::FitAfterShowOrHide NXOpen::View::FitAfterShowOrHide@endlink  after using this method.
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
        public: void ShowOnly
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
        );
        /** Display objects adjacent to a set of displayable objects(@link NXOpen::CAE::CAEFace NXOpen::CAE::CAEFace@endlink ,
            @link NXOpen::CAE::CAEEdge NXOpen::CAE::CAEEdge@endlink ). 
            If @link NXOpen::CAE::CAEFace NXOpen::CAE::CAEFace@endlink  selected, display all it's neighbouring faces and associated edges.
            If @link NXOpen::CAE::CAEEdge NXOpen::CAE::CAEEdge@endlink  selected, display it's associated faces and their associated edges.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
        public: void ShowAdjacent
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ 
        );
        /** Display all nodes related to displayed elements.  This function will do nothing if 
                @link NXOpen::CAE::ModelDisplayBuilder NXOpen::CAE::ModelDisplayBuilder@endlink  has the node display mode set to 
                @link NXOpen::CAE::ModelDisplayBuilder::NodeDisplayModeTypeImplicit NXOpen::CAE::ModelDisplayBuilder::NodeDisplayModeTypeImplicit@endlink 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
        public: void ShowNodesRelatedToDisplayedElements
        (
            bool includeInteriorNodes /** includeinteriornodes */ 
        );
        /** Ensures that previously invoked display operations are complete.  Called only by
                NXOpen applications that directly invoke Windows, MFC, or Motif
                functions to display dialogs.  This function is not needed when
                NXOpen dialogs are used.
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void MakeUpToDate
        (
        );
        /** Returns the list of displayable entities along with display information for 
                each entity in the displayed part.  @return  Array of entities and display data 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::DisplayManager::J3dData> GetJ3dData
        (
        );
        /** Returns polygon/vector information for an entity  @return  true if vector data produced 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetJ3dGeometry
        (
            NXOpen::DisplayableObject * eid /** entity to tesselate */,
            double tolerance /** adjustment factor for tesselation tolerance */,
            bool wireframe /** if true generates wireframe solids */,
            std::vector<double> & points /** polygon/vector points */,
            std::vector<double> & normals /** polygon normals */,
            std::vector<int> & pointsPerStrip /** points for each triangle strip */
        );
        /** Unblank a set of displayable objects considering the following layer settings if the objects are in invisible layers. 
             <ol>
             <li>@link NXOpen::DisplayManager::LayerSettingMoveObjectsToWorkLayer NXOpen::DisplayManager::LayerSettingMoveObjectsToWorkLayer@endlink  - The objects will be moved to work layer before unblanking the objects if they are in invisible layer.</li>
             <li>@link NXOpen::DisplayManager::LayerSettingChangeLayerToSelectable NXOpen::DisplayManager::LayerSettingChangeLayerToSelectable@endlink  - The objects layer will be changed to selectable if the layer is invisible </li>
             </ol>
         <br>  Created in NX5.0.2.  <br>  
         <br> License requirements : None */
        public: void ShowObjects
        (
            const std::vector<NXOpen::DisplayableObject *> & objects /** objects */ ,
            NXOpen::DisplayManager::LayerSetting layerSetting /** Layer setting option */
        );
        /** Returns an array of all Registered ShowHideType strings.  @return  Registered ShowHideType strings. 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetShowableHideableTypes
        (
        );
        /**Returns  the memory level of the display facet cache system. 
                <br>  Facet cache memory level is used to manage the memory footprint
               of the display facet cache. Higher memory level implies higher memory
               footprint.
                <br> 
                <br> 
               Facet caching can be turned off by setting the memory level to
               @link NXOpen::DisplayManager::FacetCacheMemoryLevelTypeNone NXOpen::DisplayManager::FacetCacheMemoryLevelTypeNone@endlink .
               For all other memory levels, the display system will attempt to perform
               periodic cleanup if it detects that NX is experiencing memory pressure.
               The extent of cleanup depends on the memory level. Lower memory level
               indicates that more cleanup is desired to keep loweer memory footprint. 
               Note that low memory level can slow down rendering performance due to 
               absence of facet data in the facet cache.
                <br> 
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DisplayManager::FacetCacheMemoryLevelType FacetCacheMemoryLevel
        (
        );
        /**Sets  the memory level of the display facet cache system. 
                <br>  Facet cache memory level is used to manage the memory footprint
               of the display facet cache. Higher memory level implies higher memory
               footprint.
                <br> 
                <br> 
               Facet caching can be turned off by setting the memory level to
               @link NXOpen::DisplayManager::FacetCacheMemoryLevelTypeNone NXOpen::DisplayManager::FacetCacheMemoryLevelTypeNone@endlink .
               For all other memory levels, the display system will attempt to perform
               periodic cleanup if it detects that NX is experiencing memory pressure.
               The extent of cleanup depends on the memory level. Lower memory level
               indicates that more cleanup is desired to keep loweer memory footprint. 
               Note that low memory level can slow down rendering performance due to 
               absence of facet data in the facet cache.
                <br> 
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFacetCacheMemoryLevel
        (
            NXOpen::DisplayManager::FacetCacheMemoryLevelType memoryLevel /** memorylevel */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
