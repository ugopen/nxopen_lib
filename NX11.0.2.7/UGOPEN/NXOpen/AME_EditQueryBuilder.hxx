#ifndef NXOpen_AME_EDITQUERYBUILDER_HXX_INCLUDED
#define NXOpen_AME_EDITQUERYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_EditQueryBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_EditQueryBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class EditQueryBuilder;
    }
    namespace AME
    {
        class AMEQuery;
    }
    class Builder;
    namespace AME
    {
        class _EditQueryBuilderBuilder;
        class EditQueryBuilderImpl;
        /** Edit Query Builder  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateEditQueryBuilder  NXOpen::AME::AMEManager::CreateEditQueryBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  EditQueryBuilder : public NXOpen::Builder
        {
            private: EditQueryBuilderImpl * m_editquerybuilder_impl;
            private: friend class  _EditQueryBuilderBuilder;
            protected: EditQueryBuilder();
            public: ~EditQueryBuilder();
            /**Returns  the query name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Source
            (
            );
            /**Sets  the query name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSource
            (
                const NXString & source /** source */ 
            );
            /**Sets  the query name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetSource
            (
                const char * source /** source */ 
            );
            /**Returns  the description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Description
            (
            );
            /**Sets  the description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /** Remove clause from table editor 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveClause
            (
                NXOpen::AME::AMEQuery * queryObject /** queryobject */ ,
                const std::vector<int> & removedClauses /** removedclauses */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
