#ifndef NXOpen_DRAWINGS_BROKENVIEWBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_BROKENVIEWBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_BrokenViewBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_HatchFillSettingsBuilder.hxx>
#include <NXOpen/Drawings_BrokenViewBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class BrokenViewBuilder;
    }
    namespace Annotations
    {
        class HatchFillSettingsBuilder;
    }
    class Builder;
    class Direction;
    namespace Drawings
    {
        class SelectDraftingView;
    }
    class Expression;
    class NXColor;
    class Point;
    class ScCollector;
    namespace Drawings
    {
        class _BrokenViewBuilderBuilder;
        class BrokenViewBuilderImpl;
        /** This class is used to construct the broken view Builder  <br> To create a new instance of this class, use @link NXOpen::Drawings::DraftingViewCollection::CreateBrokenViewBuilder  NXOpen::Drawings::DraftingViewCollection::CreateBrokenViewBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Amplitude.Value </td> <td> 
         
        5 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        BreakLine1Offset.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        BreakLine2Offset.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        BreakLineType </td> <td> 
         
        Simple </td> </tr> 

        <tr><td> 
         
        BreakType </td> <td> 
         
        Regular </td> </tr> 

        <tr><td> 
         
        DirectionType </td> <td> 
         
        Vector </td> </tr> 

        <tr><td> 
         
        Extension1.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        Extension2.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        Gap.Value </td> <td> 
         
        10 (millimeters part), 0.25 (inches part) </td> </tr> 

        <tr><td> 
         
        IsBreakLine1Associative </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IsBreakLine2Associative </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Repetition </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Width </td> <td> 
         
        Medium </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  BrokenViewBuilder : public NXOpen::Builder
        {
            /** Specifies whether the break is two-sided (regular) or one-sided. */
            public: enum TypeBreak
            {
                TypeBreakRegular/** Regular Break */,
                TypeBreakSingleSided/** SingleSiled Break */
            };

            /** Direction Enum */
            public: enum TypeDirection
            {
                TypeDirectionParallel/** Parallel */,
                TypeDirectionPerpendicular/** Perpendicular */,
                TypeDirectionVector/** Specified by Vector */
            };

            /** Which side to remove in case of horizontal single-sided break.*/
            public: enum VerticalBreakSide
            {
                VerticalBreakSideTopEnd/** Hide Top side */,
                VerticalBreakSideBottomEnd/** Hide Bottom side */
            };

            /** Which side to remove in case of vertical single-sided break.*/
            public: enum HorizontalBreakSide
            {
                HorizontalBreakSideLeftEnd/** Hide Left side */,
                HorizontalBreakSideRightEnd/** Hide Right side */
            };

            /** Break Line Type */
            public: enum BreakLineStyle
            {
                BreakLineStyleSimple/** Simple */,
                BreakLineStyleStraight/** Straight */,
                BreakLineStyleSawtooth/** Sawtooth */,
                BreakLineStyleLongBreak/** LongBreak */,
                BreakLineStyleTubular/** Tubular */,
                BreakLineStyleSolidTubular/** Solid Tubular */,
                BreakLineStyleSolidRod/** Solid Rod */,
                BreakLineStyleJigsaw/** Jigsaw */,
                BreakLineStyleWood/** Wood */,
                BreakLineStyleCopyCurve/** Copy of the existing curve */,
                BreakLineStyleTemplateCurve/** Template, based on the existing curve */
            };

            /** Line Width */
            public: enum LineWidth
            {
                LineWidthThin/** Thin */,
                LineWidthMedium/** Medium */,
                LineWidthThick/** Thick */,
                LineWidthWidthOne/** Width One */ = 5,
                LineWidthWidthTwo/** Width Two */,
                LineWidthWidthThree/** Width Three */,
                LineWidthWidthFour/** Width Four */,
                LineWidthWidthFive/** Width Five */,
                LineWidthWidthSix/** Width Six */,
                LineWidthWidthSeven/** Width Seven */,
                LineWidthWidthEight/** Width Eight */,
                LineWidthWidthNine/** Width Nine */
            };

            private: BrokenViewBuilderImpl * m_brokenviewbuilder_impl;
            private: friend class  _BrokenViewBuilderBuilder;
            protected: BrokenViewBuilder();
            public: ~BrokenViewBuilder();
            /**Returns  the break type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::BrokenViewBuilder::TypeBreak BreakType
            (
            );
            /**Sets  the break type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakType
            (
                NXOpen::Drawings::BrokenViewBuilder::TypeBreak breakType /** breaktype */ 
            );
            /**Returns  the master view 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SelectDraftingView * MasterView
            (
            );
            /**Returns  the direction type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::BrokenViewBuilder::TypeDirection DirectionType
            (
            );
            /**Sets  the direction type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDirectionType
            (
                NXOpen::Drawings::BrokenViewBuilder::TypeDirection directionType /** directiontype */ 
            );
            /**Returns  the direction vector. For @link Drawings::BrokenViewBuilder::TypeDirectionVector Drawings::BrokenViewBuilder::TypeDirectionVector@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DirectionVector
            (
            );
            /**Sets  the direction vector. For @link Drawings::BrokenViewBuilder::TypeDirectionVector Drawings::BrokenViewBuilder::TypeDirectionVector@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDirectionVector
            (
                NXOpen::Direction * directionVector /** directionvector */ 
            );
            /**Returns  the gap on the sheet between the two break lines 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Gap
            (
            );
            /**Returns  the associative positionning of the first break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsBreakLine1Associative
            (
            );
            /**Sets  the associative positionning of the first break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLine1Associative
            (
                bool isBreakLine1Associative /** isbreakline1associative */ 
            );
            /**Returns  the object specifying the position of the first break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * BreakLine1Anchor
            (
            );
            /**Sets  the object specifying the position of the first break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLine1Anchor
            (
                NXOpen::Point * anchor1 /** anchor1 */ 
            );
            /**Returns  the object specifying the position of the first break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * BreakLine1ModelAnchor
            (
            );
            /**Sets  the object specifying the position of the first break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLine1ModelAnchor
            (
                NXOpen::Point * anchor1 /** anchor1 */ 
            );
            /**Returns  the offset from the object locating the first break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BreakLine1Offset
            (
            );
            /**Returns  the associative positionning of the second break line. For  
                    @link Drawings::BrokenViewBuilder::TypeBreakRegular Drawings::BrokenViewBuilder::TypeBreakRegular@endlink  only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IsBreakLine2Associative
            (
            );
            /**Sets  the associative positionning of the second break line. For  
                    @link Drawings::BrokenViewBuilder::TypeBreakRegular Drawings::BrokenViewBuilder::TypeBreakRegular@endlink  only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLine2Associative
            (
                bool isBreakLine2Associative /** isbreakline2associative */ 
            );
            /**Returns  the object specifying the position of the second break line. For @link Drawings::BrokenViewBuilder::TypeBreakRegular Drawings::BrokenViewBuilder::TypeBreakRegular@endlink  only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * BreakLine2Anchor
            (
            );
            /**Sets  the object specifying the position of the second break line. For @link Drawings::BrokenViewBuilder::TypeBreakRegular Drawings::BrokenViewBuilder::TypeBreakRegular@endlink  only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLine2ModelAnchor
            (
                NXOpen::Point * anchor2 /** anchor2 */ 
            );
            /**Returns  the object specifying the position of the second break line. For @link Drawings::BrokenViewBuilder::TypeBreakRegular Drawings::BrokenViewBuilder::TypeBreakRegular@endlink  only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * BreakLine2ModelAnchor
            (
            );
            /**Sets  the object specifying the position of the second break line. For @link Drawings::BrokenViewBuilder::TypeBreakRegular Drawings::BrokenViewBuilder::TypeBreakRegular@endlink  only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLine2Anchor
            (
                NXOpen::Point * anchor2 /** anchor2 */ 
            );
            /**Returns  the offset from the object locating the second break line. For @link Drawings::BrokenViewBuilder::TypeBreakRegular Drawings::BrokenViewBuilder::TypeBreakRegular@endlink  only 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BreakLine2Offset
            (
            );
            /**Returns  the break line type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::BrokenViewBuilder::BreakLineStyle BreakLineType
            (
            );
            /**Sets  the break line type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakLineType
            (
                NXOpen::Drawings::BrokenViewBuilder::BreakLineStyle lineType /** linetype */ 
            );
            /**Returns  the curve to use as existing curve 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ExistingCurve
            (
            );
            /**Returns  the break line amplitude 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Amplitude
            (
            );
            /**Returns  the repetition of the break line pattern 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int Repetition
            (
            );
            /**Sets  the repetition of the break line pattern 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRepetition
            (
                int repetition /** repetition */ 
            );
            /**Returns  the break line extension (top/right) beyond geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Extension1
            (
            );
            /**Returns  the break line extension (bottom/left) beyond geometry 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Extension2
            (
            );
            /**Returns  the break line color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * Color
            (
            );
            /**Sets  the break line color 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetColor
            (
                NXOpen::NXColor * color /** color */ 
            );
            /**Returns  the curve width of the break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::BrokenViewBuilder::LineWidth Width
            (
            );
            /**Sets  the curve width of the break line 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWidth
            (
                NXOpen::Drawings::BrokenViewBuilder::LineWidth width /** width */ 
            );
            /**Returns  the HatchFillSetting 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HatchFillSettingsBuilder * CrossHatch
            (
            );
            /**Returns  the view break suppress status 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool Suppress
            (
            );
            /**Sets  the view break suppress status 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSuppress
            (
                bool suppress /** suppress */ 
            );
            /**Returns  the view break visibilitity 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool BreakVisibility
            (
            );
            /**Sets  the view break visibilitity 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBreakVisibility
            (
                bool visibilitity /** visibilitity */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
