#ifndef NXOpen_SIM_IMPORTMACHINEKITBUILDER_HXX_INCLUDED
#define NXOpen_SIM_IMPORTMACHINEKITBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SIM_ImportMachineKitBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SIM_ImportMachineKitBuilder.hxx>
#include <NXOpen/libnxopencpp_sim_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SIM
    {
        class ImportMachineKitBuilder;
    }
    class Builder;
    namespace SIM
    {
        class _ImportMachineKitBuilderBuilder;
        class ImportMachineKitBuilderImpl;
        /** This class is used for the Import Machine Kit Dialog.
            Calling @link Builder::Commit Builder::Commit@endlink  on this
            builder will start the import machine kit process
            and return NULL.
             <br> Use the @link Part Part@endlink  class to import a Machine Kit object.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_SIMEXPORT  ImportMachineKitBuilder : public NXOpen::Builder
        {
            private: ImportMachineKitBuilderImpl * m_importmachinekitbuilder_impl;
            private: friend class  _ImportMachineKitBuilderBuilder;
            protected: ImportMachineKitBuilder();
            public: ~ImportMachineKitBuilder();
            /**Returns  the machine kit output directory specify where the finished machine folder will be stored.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: NXString OutputDirectory
            (
            );
            /**Sets  the machine kit output directory specify where the finished machine folder will be stored.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetOutputDirectory
            (
                const NXString & outputDirectory /** machine output directory */
            );
            /**Sets  the machine kit output directory specify where the finished machine folder will be stored.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            void SetOutputDirectory
            (
                const char * outputDirectory /** machine output directory */
            );
            /**Returns  the machine print report flat that specifies if a report will be plotted while import the machine or not. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: bool PrintReport
            (
            );
            /**Sets  the machine print report flat that specifies if a report will be plotted while import the machine or not. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_isv_full ("Full functionality for Integrated Simulation and Verification") OR nx_isv_mtb ("Machine Tool Builder") */
            public: void SetPrintReport
            (
                bool onOff /** print report flag */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
