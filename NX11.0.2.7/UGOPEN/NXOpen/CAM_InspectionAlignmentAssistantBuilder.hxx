#ifndef NXOpen_CAM_INSPECTIONALIGNMENTASSISTANTBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONALIGNMENTASSISTANTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionAlignmentAssistantBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionAlignmentAssistantBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionAlignmentAssistantBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class NXObject;
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionAlignmentAssistantBuilderBuilder;
        class InspectionAlignmentAssistantBuilderImpl;
        /** Represents a CMM Inspection Alignment Assistant Builder,
            this builder's Commit can produce more than one object,
            the GetCommittedObjects can be used to get the objects 
            and the order of GetCommittedObject's output array is not stable.  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionAlignmentAssistantBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionAlignmentAssistantBuilder @endlink  <br> 
         <br>  Created in NX10.0.3.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionAlignmentAssistantBuilder : public NXOpen::CAM::OperationBuilder
        {
            /** Alignment type */
            public: enum AlignType
            {
                AlignTypePlanePlanePlane/** Plane, Plane, Plane alignment type */,
                AlignTypePlaneLinePoint/** Plane, Line, Point alignment type */,
                AlignTypePlaneCylinderCylinder/** Plane, Cylinder, Cylinder alignment type */,
                AlignTypePlaneBoltHoleCircle/** Plane, Bolt Hole Circle alignment type */,
                AlignTypeCylinderPlanePlane/** Cylinder, Plane, Plane alignment type */,
                AlignTypeCylinderPlanePoint/** Cylinder, Plane, Point alignment type */,
                AlignTypeCylinderPlaneCylinder/** Cylinder, Plane, Cylinder alignment type */,
                AlignTypeSixPointNest/** Six Point Nest alignment type */,
                AlignTypeSPFTolerance/** SPF Tolerance alignment type */,
                AlignTypeLsq/** Least Squares Best Fit alignment type */,
                AlignTypeRps/** RPS alignment type */
            };

            /** Alignment feature type */
            public: enum FeatureType
            {
                FeatureTypePlane/** Plane alignment feature type */,
                FeatureTypeBestFitPlane/** Best Fit Plane alignment feature type */,
                FeatureTypeOffsetPlane/** Offset Plane alignment feature type */,
                FeatureTypeMidPlane/** Mid Plane alignment feature type */,
                FeatureTypeCylinder/** Cylinder alignment feature type */,
                FeatureTypeBestFitCylinder/** Best Fit Cylinder alignment feature type */,
                FeatureTypeLine/** Line alignment feature type */,
                FeatureTypeBestFitLine/** Best Fit Line alignment feature type */,
                FeatureTypeIntersectLine/** Intersect Line alignment feature type */,
                FeatureTypeCircle/** Circle alignment feature type */,
                FeatureTypeBestFitCircle/** Best Fit Circle alignment feature type */,
                FeatureTypePoint/** Point alignment feature type */,
                FeatureTypeBestFitPoint/** Best Fot Point alignment feature type */
            };

            /** Alignment feature state */
            public: enum State
            {
                StateActual/** Actual feature state */,
                StateNominal/** Nominal feature state */
            };

            /** Alignment direction */
            public: enum Direction
            {
                DirectionNone/** Alignment direction none */,
                DirectionPxdir/** Positive X alignment direction */,
                DirectionPydir/** Positive Y alignment direction */,
                DirectionPzdir/** Positive Z alignment direction */,
                DirectionMxdir/** Negative X alignment direction */,
                DirectionMydir/** Negative Y alignment direction */,
                DirectionMzdir/** Negative Z alignment direction */
            };

            /** Iterative Alignment type */
            public: enum IterativeTypes
            {
                IterativeTypesAbsolute/** Absolute Iterative Alignment type */,
                IterativeTypesIncremental/** Incremental Iterative Alignment type */
            };

            private: InspectionAlignmentAssistantBuilderImpl * m_inspectionalignmentassistantbuilder_impl;
            private: friend class  _InspectionAlignmentAssistantBuilderBuilder;
            protected: InspectionAlignmentAssistantBuilder();
            public: ~InspectionAlignmentAssistantBuilder();
            /**Returns  the alignment type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::AlignType AlignmentType
            (
            );
            /**Sets  the alignment type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignmentType
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::AlignType alignmentType /** alignmenttype */ 
            );
            /**Returns  the primary feature type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::FeatureType PrimaryType
            (
            );
            /**Sets  the primary feature type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPrimaryType
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::FeatureType primaryType /** primarytype */ 
            );
            /**Returns  the primary selection 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * PrimarySelection
            (
            );
            /**Returns  the primary offset geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * PrimaryOffsetGeometry
            (
            );
            /**Sets  the primary offset geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPrimaryOffsetGeometry
            (
                NXOpen::NXObject * primaryOffset /** primaryoffset */ 
            );
            /**Returns  the primary state 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::State PrimaryState
            (
            );
            /**Sets  the primary state 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPrimaryState
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::State primaryState /** primarystate */ 
            );
            /**Returns  the primary direction 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::Direction PrimaryDirection
            (
            );
            /**Sets  the primary direction 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPrimaryDirection
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::Direction primaryDirection /** primarydirection */ 
            );
            /**Returns  the secondary feature type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::FeatureType SecondaryType
            (
            );
            /**Sets  the secondary feature type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecondaryType
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::FeatureType secondaryType /** secondarytype */ 
            );
            /**Returns  the secondary selection 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SecondarySelection
            (
            );
            /**Returns  the secondary offset geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * SecondaryOffsetGeometry
            (
            );
            /**Sets  the secondary offset geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecondaryOffsetGeometry
            (
                NXOpen::NXObject * secondaryOffset /** secondaryoffset */ 
            );
            /**Returns  the secondary state 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::State SecondaryState
            (
            );
            /**Sets  the secondary state 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecondaryState
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::State secondaryState /** secondarystate */ 
            );
            /**Returns  the secondary direction 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::Direction SecondaryDirection
            (
            );
            /**Sets  the secondary direction 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSecondaryDirection
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::Direction secondaryDirection /** secondarydirection */ 
            );
            /**Returns  the tertiary feature type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::FeatureType TertiaryType
            (
            );
            /**Sets  the tertiary feature type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTertiaryType
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::FeatureType tertiaryType /** tertiarytype */ 
            );
            /**Returns  the tertiary selection 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * TertiarySelection
            (
            );
            /**Returns  the tertiary offset geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * TertiaryOffsetGeometry
            (
            );
            /**Sets  the tertiary offset geometry 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTertiaryOffsetGeometry
            (
                NXOpen::NXObject * tertiaryOffset /** tertiaryoffset */ 
            );
            /**Returns  the tertiary state 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::State TertiaryState
            (
            );
            /**Sets  the tertiary state 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTertiaryState
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::State tertiaryState /** tertiarystate */ 
            );
            /**Returns  the tertiary direction 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::Direction TertiaryDirection
            (
            );
            /**Sets  the tertiary direction 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTertiaryDirection
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::Direction tertiaryDirection /** tertiarydirection */ 
            );
            /**Returns  the flag indicating whether an iterative alignment will be created 
             <br>  @deprecated Deprecated in NX11.0.1.  Use @link CreateIterativeAlignment CreateIterativeAlignment@endlink  instead to get iterative flag. <br>  

             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX11.0.1.  Use CreateIterativeAlignment instead to get iterative flag.") bool IterativeToggle
            (
            );
            /**Sets  the flag indicating whether an iterative alignment will be created 
             <br>  @deprecated Deprecated in NX11.0.1.  Use @link SetCreateIterativeAlignment SetCreateIterativeAlignment@endlink  instead to set iterative flag. <br>  

             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public:  NX_DEPRECATED("Deprecated in NX11.0.1.  Use SetCreateIterativeAlignment instead to set iterative flag.") void SetIterativeToggle
            (
                bool iterativeToggle /** iterativetoggle */ 
            );
            /**Returns  the flag indicating whether an iterative alignment will be created 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool CreateIterativeAlignment
            (
            );
            /**Sets  the flag indicating whether an iterative alignment will be created 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCreateIterativeAlignment
            (
                bool createIterativeAlignment /** createiterativealignment */ 
            );
            /**Returns  the maximum number of iterations
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: int IterativeMax
            (
            );
            /**Sets  the maximum number of iterations
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterativeMax
            (
                int iterativeMax /** iterativemax */ 
            );
            /**Returns  the iterative translation convergence value
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double IterativeTranslation
            (
            );
            /**Sets  the iterative translation convergence value
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterativeTranslation
            (
                double iterativeTranslation /** iterativetranslation */ 
            );
            /**Returns  the iterative rotation convergence value
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double IterativeRotation
            (
            );
            /**Sets  the iterative rotation convergence value
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterativeRotation
            (
                double iterativeRotation /** iterativerotation */ 
            );
            /**Returns  the iterative alignment type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionAlignmentAssistantBuilder::IterativeTypes IterativeType
            (
            );
            /**Sets  the iterative alignment type 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetIterativeType
            (
                NXOpen::CAM::InspectionAlignmentAssistantBuilder::IterativeTypes iterativeType /** iterativetype */ 
            );
            /**Returns  the alignment assistant operation name 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXString OperationName
            (
            );
            /**Sets  the alignment assistant operation name 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetOperationName
            (
                const NXString & operationName /** operationname */ 
            );
            /**Sets  the alignment assistant operation name 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetOperationName
            (
                const char * operationName /** operationname */ 
            );
            /**Returns  the locate selection 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * LocateSelection
            (
            );
            /**Returns  the RPS X selection 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * RPSXSelection
            (
            );
            /**Returns  the RPS Y selection 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * RPSYSelection
            (
            );
            /**Returns  the RPS Z selection 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * RPSZSelection
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
