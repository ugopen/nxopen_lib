#ifndef NXOpen_ANNOTATIONS_BASESURFACEFINISH_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASESURFACEFINISH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseSurfaceFinish.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_LinearTolerance.hxx>
#include <NXOpen/Annotations_UnitsFormatPreferences.hxx>
#include <NXOpen/Annotations_ILinearTolerance.hxx>
#include <NXOpen/Annotations_PmiAttribute.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BaseSurfaceFinish;
    }
    namespace Annotations
    {
        class ILinearTolerance;
    }
    namespace Annotations
    {
        class LinearTolerance;
    }
    namespace Annotations
    {
        class PmiAttribute;
    }
    namespace Annotations
    {
        class UnitsFormatPreferences;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    namespace Annotations
    {
        class _BaseSurfaceFinishBuilder;
        class BaseSurfaceFinishImpl;
        /** Represents a Base Surface Finish  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BaseSurfaceFinish : public NXOpen::Annotations::PmiAttribute, public virtual NXOpen::Annotations::ILinearTolerance
        {
            private: BaseSurfaceFinishImpl * m_basesurfacefinish_impl;
            private: friend class  _BaseSurfaceFinishBuilder;
            protected: BaseSurfaceFinish();
            public: ~BaseSurfaceFinish();
            /** Returns the unit format preferences  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::UnitsFormatPreferences * GetUnitsFormatPrefs
            (
            );
            /** Sets the unit format preferences.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUnitsFormatPrefs
            (
                NXOpen::Annotations::UnitsFormatPreferences * unitsFormat /** unitsformat */ 
            );
            /** Return the invert symbol flag for symbol having flag type leader  @return  
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool GetInvertSymbol
            (
            );
            /** Set the invert symbol flag for symbol having flag type leader.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInvertSymbol
            (
                bool invertSymbol /** invertsymbol */ 
            );
            /** Returns the tolerance  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Annotations::LinearTolerance * GetTolerance
            (
            );
            /** Sets the tolerance.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: virtual void SetTolerance
            (
                NXOpen::Annotations::LinearTolerance * tolerance /** tolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
