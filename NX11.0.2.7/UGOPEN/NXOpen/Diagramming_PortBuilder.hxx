#ifndef NXOpen_DIAGRAMMING_PORTBUILDER_HXX_INCLUDED
#define NXOpen_DIAGRAMMING_PORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Diagramming_PortBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_ConnectableElement.hxx>
#include <NXOpen/Diagramming_Connection.hxx>
#include <NXOpen/Diagramming_DataType.hxx>
#include <NXOpen/Diagramming_Port.hxx>
#include <NXOpen/Diagramming_PortBuilder.hxx>
#include <NXOpen/Diagramming_SheetElementBuilder.hxx>
#include <NXOpen/libnxopencpp_diagramming_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Diagramming
    {
        class PortBuilder;
    }
    namespace Diagramming
    {
        class ConnectableElement;
    }
    namespace Diagramming
    {
        class Connection;
    }
    namespace Diagramming
    {
        class Port;
    }
    namespace Diagramming
    {
        class SheetElementBuilder;
    }
    namespace Diagramming
    {
        class _PortBuilderBuilder;
        class PortBuilderImpl;
        /**
            Represents a PortBuilder.
             <br> To create a new instance of this class, use @link NXOpen::Diagramming::PortCollection::CreatePortBuilder  NXOpen::Diagramming::PortCollection::CreatePortBuilder @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_DIAGRAMMINGEXPORT  PortBuilder : public NXOpen::Diagramming::SheetElementBuilder
        {
            private: PortBuilderImpl * m_portbuilder_impl;
            private: friend class  _PortBuilderBuilder;
            protected: PortBuilder();
            public: ~PortBuilder();
            /**Returns  the direction of the port. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Direction Direction
            (
            );
            /**Sets  the direction of the port. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDirection
            (
                NXOpen::Diagramming::Direction direction /** direction */ 
            );
            /**Returns  the maximum number of allowed connections the port may reference. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberAllowedConnections
            (
            );
            /**Sets  the maximum number of allowed connections the port may reference. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumberAllowedConnections
            (
                int numberAllowedConnections /** numberallowedconnections */ 
            );
            /**Returns  the flag that indicates the port is pinned. If true the port is pinned and cannot be moved. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool Pinned
            (
            );
            /**Sets  the flag that indicates the port is pinned. If true the port is pinned and cannot be moved. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPinned
            (
                bool isPinned /** ispinned */ 
            );
            /**Returns  the proxy port for the port inside the super node. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Port * Proxy
            (
            );
            /**Sets  the proxy port for the port inside the super node. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProxy
            (
                NXOpen::Diagramming::Port * proxy /** proxy */ 
            );
            /** Get allowed parent sides. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAllowedParentSides
            (
                bool* isAllowedLeftSide /** isallowedleftside */ ,
                bool* isAllowedRightSide /** isallowedrightside */ ,
                bool* isAllowedUpSide /** isallowedupside */ ,
                bool* isAllowedDownSide /** isalloweddownside */ 
            );
            /** Get whether another connection can be added or not.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CanAnotherConnectionBeAdded
            (
            );
            /** Get if the number of connections to reference is infinite. If true it is infinite.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsNumberOfConnectionInfinite
            (
            );
            /** Get the owner connectable element.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::ConnectableElement * GetOwningConnectableElement
            (
            );
            /** Get associated connections.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Diagramming::Connection *> GetConnections
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
