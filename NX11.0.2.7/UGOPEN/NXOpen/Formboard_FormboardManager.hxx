#ifndef NXOpen_FORMBOARD_FORMBOARDMANAGER_HXX_INCLUDED
#define NXOpen_FORMBOARD_FORMBOARDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Formboard_FormboardManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_formboard_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Formboard
    {
        class FormboardManager;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Annotations
    {
        class Annotation;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Formboard
    {
        class FaceAnnotationBuilder;
    }
    namespace Formboard
    {
        class FlipComponentBuilder;
    }
    namespace Formboard
    {
        class FormboardLayoutBuilder;
    }
    namespace Formboard
    {
        class ObjectAttributeReferenceBuilder;
    }
    namespace Formboard
    {
        class OrientBranchBuilder;
    }
    namespace Formboard
    {
        class PathLengthAnnotationBuilder;
    }
    namespace Formboard
    {
        class ShapeSegmentBuilder;
    }
    namespace Formboard
    {
        class UpdateFormboardBuilder;
    }
    class NXObject;
    class Part;
    namespace Positioning
    {
        class ComponentConstraint;
    }
    namespace Routing
    {
        namespace Electrical
        {
            class HarnessDevice;
        }
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Formboard
    {
        class FormboardManagerImpl;
        /**  Contains information about flattened harness drawing and drafting data for
                 harness manufacturing drawings (Formboard Drawings).
              <br> To obtain an instance of this class, refer to @link NXOpen::Routing::RouteManager  NXOpen::Routing::RouteManager @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_FORMBOARDEXPORT  FormboardManager
        {
            /** Used by @link FormboardManager::CalculateLegacyComponentClocking FormboardManager::CalculateLegacyComponentClocking@endlink  to
                        display extra information you can use to see how the clocking calculation is made.
                    */
            public: enum LegacyComponentOrientationDisplayStyle
            {
                LegacyComponentOrientationDisplayStyleNoDisplay/** No extra display. */,
                LegacyComponentOrientationDisplayStyleDisplayCurveNormals/** Display the normal of each curve in the path. */,
                LegacyComponentOrientationDisplayStyleDisplaySurface/** Display the surface swept along the curves in the path. */,
                LegacyComponentOrientationDisplayStyleDisplayAll/** Display both the curve normals and surface. */
            };

            /** Returned from @link FormboardManager::CalculateLegacyComponentClocking FormboardManager::CalculateLegacyComponentClocking@endlink 
                        as a measure of the confidence in the calculated clocking.
                    */
            public: enum LegacyComponentOrientationConfidenceLevel
            {
                LegacyComponentOrientationConfidenceLevelHigh/** High confidence indicates no branches and no severe curvature in the path between the components. */,
                LegacyComponentOrientationConfidenceLevelMedium/** Medium confidence indicates one branch or one curve with severe curvature. */,
                LegacyComponentOrientationConfidenceLevelLow/** Low confidenceindicates more than on branch or more than on curve with severe curvature. */
            };

            private: FormboardManagerImpl * m_formboardmanager_impl;
            private: NXOpen::Routing::RouteManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit FormboardManager(NXOpen::Routing::RouteManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~FormboardManager();
            /** Returns whether or not the part containing this @link NXOpen::Formboard::FormboardManager NXOpen::Formboard::FormboardManager@endlink  is
                      actually a Formboard Drawing part file.   @return  whether or not the part is a formboard. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: bool IsFormboard
            (
            );
            /** Examines the input list of harnesses and stores information from the harnesses into the part containing
                     this @link NXOpen::Formboard::FormboardManager NXOpen::Formboard::FormboardManager@endlink .   The harnesses must from a sub-component of
                     this part.  The harnesses must form a fully-connected set of geometry.   This method does not actually
                     flatten or copy the harness geometry. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void StoreHarnessesToFlatten
            (
                const std::vector<NXOpen::Routing::Electrical::HarnessDevice *> & harnesses /** Harnesses to flatten into this part. */
            );
            /** Sets the input part as the part containing the potential harnesses to flatten.
                       This method will add the input part as a new component of this assembly if there
                       is not already an instance of the input part in the work part assembly.  This
                       method is only necessary if the reference between the formboard and it's parent
                       3D harness assembly has been removed.

                       Passing in NULL for the harness part will sever the link between
                       the formboard and it's current 3D harness part file.
                       
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void AddPartAs3dHarness
            (
                NXOpen::Part * harnessPart /** Part containing the harnesses to flatten into this part. */
            );
            /** Creates a @link NXOpen::Formboard::FormboardLayoutBuilder NXOpen::Formboard::FormboardLayoutBuilder@endlink  that can flatten and layout
                        new formboard geometry, or modify the layout of existing formboard geometry.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::FormboardLayoutBuilder * CreateLayoutBuilder
            (
            );
            /** Creates a @link NXOpen::Formboard::OrientBranchBuilder NXOpen::Formboard::OrientBranchBuilder@endlink  object for rotating
                        branches in formboard about Z axis.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::OrientBranchBuilder * CreateOrientBranchBuilder
            (
            );
            /** Creates a @link NXOpen::Formboard::FlipComponentBuilder NXOpen::Formboard::FlipComponentBuilder@endlink  object for
                        flipping of formboard component about an axis orthogonal to Z axis to ensure that
                        after flipping component lies in XY plane.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::FlipComponentBuilder * CreateFlipComponentBuilder
            (
            );
            /** Creates a @link NXOpen::Formboard::ShapeSegmentBuilder NXOpen::Formboard::ShapeSegmentBuilder@endlink  that can shape formboard segments.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::ShapeSegmentBuilder * CreateShapeSegmentBuilder
            (
                NXOpen::Routing::ISegment * segment /** The routing segment to shape. */
            );
            /** Creates a @link NXOpen::Formboard::FaceAnnotationBuilder NXOpen::Formboard::FaceAnnotationBuilder@endlink  object for importing
                        CGM or Pattern file geometry and placing it on a drawing sheet or model view.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::FaceAnnotationBuilder * CreateFaceAnnotationBuilder
            (
            );
            /** Creates a @link NXOpen::Formboard::ObjectAttributeReferenceBuilder NXOpen::Formboard::ObjectAttributeReferenceBuilder@endlink  that creates a tabular note
                        object which reads values from the single object selected by the user. It also creates leader for the
                        annotation associated with the object selected by user.
                     @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::ObjectAttributeReferenceBuilder * CreateObjectAttributeReferenceBuilder
            (
            );
            /** Creates a @link NXOpen::Formboard::PathLengthAnnotationBuilder NXOpen::Formboard::PathLengthAnnotationBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::PathLengthAnnotationBuilder * CreatePathLengthAnnotationBuilder
            (
                NXOpen::Annotations::Annotation * annotation /** The Formboard Path Length annotation. */
            );
            /** Creates a @link NXOpen::Formboard::UpdateFormboardBuilder NXOpen::Formboard::UpdateFormboardBuilder@endlink  that compares and
                        updates formboard geometry to match a modified master 3D harness.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Formboard::UpdateFormboardBuilder * CreateUpdateFormboardBuilder
            (
            );
            /** Gets @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  which are associated to the formboard plane.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void GetFmbdPlaneConstraints
            (
                NXOpen::NXObject * fmbdPlane /** fmbdplane */ ,
                std::vector<NXOpen::Positioning::ComponentConstraint *> & constraints /** constraints */ 
            );
            /** Shows all of the hidden formboard constraints. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void ShowFormboardConstraints
            (
            );
            /** Hides the formboard constraints. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void HideFormboardConstraints
            (
            );
            /** Calculates the clocking or twist between the two components along their connecting path.

                        The @link FormboardManager::CalculateLegacyComponentClocking FormboardManager::CalculateLegacyComponentClocking@endlink  method uses
                        an algorithm similar to the V1 formboard clocking calculated automatically when Routing
                        created a formboard to find the clocking angle between two components.

                        First, it finds a vector representing the "up" direction on the first component.

                        The "up" direction is the multiport's rotate vector. If the multiport has no rotate
                        vector, it uses the Z direction of the multiport's part.

                        Then, it sweeps this vector along the segments in the path connecting the two components.

                        Finally, it measures the angle between the swept vector and the second component's "up"
                        vector. This angle is the clocking angle.

                        Throws an error if the component has no multiport or there is no path connecting
                        the two components.
                    
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void CalculateLegacyComponentClocking
            (
                NXOpen::Assemblies::Component * component1 /** The first component. The clocking of the second component is always relative to the rotation vector of the first component. */,
                NXOpen::Assemblies::Component * component2 /** The second component. The clocking of the second component is always relative to  the rotation vector of the first component. */,
                NXOpen::Formboard::FormboardManager::LegacyComponentOrientationDisplayStyle displayStyle /** Various options for displaying the curve normals, surfaces, etc. Useful for debugging or explaining the results. */,
                NXOpen::Vector3d* rotationVector /** The rotation vector normal to the curve at the location of the second component's multiport. */,
                double* clockingAngle /** The relative angle between the rotation vector and the second component's multiport's rotate vector. */,
                NXOpen::Formboard::FormboardManager::LegacyComponentOrientationConfidenceLevel* confidenceLevel /** High, medium, or low confidence reflecting how many branches the path traversed or whether or not the swept surfaces had problems. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
