#ifndef NXOpen_REPORT_BASEARGUMENT_HXX_INCLUDED
#define NXOpen_REPORT_BASEARGUMENT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Report_BaseArgument.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Report_BaseArgument.hxx>
#include <NXOpen/libnxopencpp_report_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Report
    {
        class BaseArgument;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    namespace Report
    {
        class _BaseArgumentBuilder;
        class BaseArgumentImpl;
        /** Represents an abstract command argument.  <br> Not support KF.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_REPORTEXPORT  BaseArgument : public NXOpen::TaggedObject, public virtual NXOpen::INXObject
        {
            /** Represents the argument type. */
            public: enum Type
            {
                TypeInteger/** Argument for integer data */,
                TypeDouble/** Argument for double data */,
                TypeString/** Argument for string data */,
                TypeEnumeration/** Argument for enumeration data */
            };

            private: BaseArgumentImpl * m_baseargument_impl;
            private: friend class  _BaseArgumentBuilder;
            protected: BaseArgument();
            public: ~BaseArgument();
            /**Returns  the argument display name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DisplayName
            (
            );
            /**Sets  the argument display name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayName
            (
                const NXString & displayName /** displayname */ 
            );
            /**Sets  the argument display name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetDisplayName
            (
                const char * displayName /** displayname */ 
            );
            /**Returns  the argument hint. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Hint
            (
            );
            /**Sets  the argument hint. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHint
            (
                const NXString & argumentHint /** argumenthint */ 
            );
            /**Sets  the argument hint. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetHint
            (
                const char * argumentHint /** argumenthint */ 
            );
            /**Returns   @brief  a value that indicates whether this argument is optional or not.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Optional
            (
            );
            /**Sets   @brief  a value that indicates whether this argument is optional or not.  

              
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOptional
            (
                bool isOptional /** isoptional */ 
            );
            /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given identifier as recorded in a journal. 
                An object may not return the same value as its JournalIdentifier in different versions of 
                the software. However newer versions of the software should find the same object when 
                FindObject is passed older versions of its journal identifier. In general, this method 
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::INXObject * FindObject
            (
                const NXString & journalIdentifier /** Journal identifier of the object */
            );
            /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given identifier as recorded in a journal. 
                An object may not return the same value as its JournalIdentifier in different versions of 
                the software. However newer versions of the software should find the same object when 
                FindObject is passed older versions of its journal identifier. In general, this method 
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::INXObject * FindObject
            (
                const char * journalIdentifier /** Journal identifier of the object */
            );
            /**Returns  the identifier that would be recorded in a journal for this object. 
                This may not be the same across different releases of the software. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString JournalIdentifier
            (
            );
            /**Returns  whether this object is an occurrence or not. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual bool IsOccurrence
            (
            );
            /**Returns  the prototype of this object if it is an occurrence. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::INXObject * Prototype
            (
            );
            /**Returns  the owning component, if this object is an occurrence. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Assemblies::Component * OwningComponent
            (
            );
            /**Returns  the owning part of this object 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::BasePart * OwningPart
            (
            );
            /** Prints a representation of this object to the system log file.
                 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void Print
            (
            );
            /**Returns  the custom name of the object.  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString Name
            (
            );
            /** Sets the custom name of the object.
                    NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                          If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetName
            (
                const NXString & name /** name */ 
            );
            /** Sets the custom name of the object.
                    NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                          If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            virtual void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
