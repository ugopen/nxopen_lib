#ifndef NXOpen_ANNOTATIONS_BILLOFMATERIALBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BILLOFMATERIALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BillOfMaterialBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_BillOfMaterialBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BillOfMaterialBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _BillOfMaterialBuilderBuilder;
        class BillOfMaterialBuilderImpl;
        /** Builder for Bill of Material functionality used in Routing. 
                This class queries and sets settings specific to Routing Bill of Material.
            
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BillOfMaterialBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** The options specify the detail level type. */
            public: enum DetailLevelType
            {
                DetailLevelTypeSummary/** summary */ ,
                DetailLevelTypeItemized/** itemized */ 
            };

            /** The options specify the fabrication numbering type. */
            public: enum FabricationNumberingType
            {
                FabricationNumberingTypeSequential/** sequential */ ,
                FabricationNumberingTypeOriginal/** original */ 
            };

            /** The options specify the stock length type. */
            public: enum StockLengthType
            {
                StockLengthTypeSingleSum/** single sum */ ,
                StockLengthTypeListEach/** list each */ 
            };

            private: BillOfMaterialBuilderImpl * m_billofmaterialbuilder_impl;
            private: friend class  _BillOfMaterialBuilderBuilder;
            protected: BillOfMaterialBuilder();
            public: ~BillOfMaterialBuilder();
            /**Returns  the value that specifies the detail level type. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BillOfMaterialBuilder::DetailLevelType DetailLevel
            (
            );
            /**Sets  the value that specifies the detail level type. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDetailLevel
            (
                NXOpen::Annotations::BillOfMaterialBuilder::DetailLevelType detailLevel /** detaillevel */ 
            );
            /**Returns  the value that specifies the fabrication numbering. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BillOfMaterialBuilder::FabricationNumberingType FabricationNumbering
            (
            );
            /**Sets  the value that specifies the fabrication numbering. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetFabricationNumbering
            (
                NXOpen::Annotations::BillOfMaterialBuilder::FabricationNumberingType fabricationNumbering /** fabricationnumbering */ 
            );
            /**Returns  the value that specifies whether include components. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeComponents
            (
            );
            /**Sets  the value that specifies whether include components. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetIncludeComponents
            (
                bool includeComponents /** includecomponents */ 
            );
            /**Returns  the value that specifies whether include gask, nut and bolts. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeGaskNutBolts
            (
            );
            /**Sets  the value that specifies whether include gask, nut and bolts. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetIncludeGaskNutBolts
            (
                bool includeGaskNutBolts /** includegasknutbolts */ 
            );
            /**Returns  the value that specifies whether include report cout of stock pieces. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool StockPieceCount
            (
            );
            /**Sets  the value that specifies whether include report cout of stock pieces. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockPieceCount
            (
                bool stockPieceCount /** stockpiececount */ 
            );
            /**Returns  the value that specifies whether to include stock. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeStock
            (
            );
            /**Sets  the value that specifies whether to include stock. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetIncludeStock
            (
                bool includeStock /** includestock */ 
            );
            /**Returns  the value that specifies whether include overstock. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeOverStock
            (
            );
            /**Sets  the value that specifies whether include overstock. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetIncludeOverStock
            (
                bool includeOverStock /** includeoverstock */ 
            );
            /**Returns  the value that specifies whether include wire stock. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeWireStock
            (
            );
            /**Sets  the value that specifies whether include wire stock. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetIncludeWireStock
            (
                bool includeWireStock /** includewirestock */ 
            );
            /**Returns  the value that specifies the stock length type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BillOfMaterialBuilder::StockLengthType StockLength
            (
            );
            /**Sets  the value that specifies the stock length type.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockLength
            (
                NXOpen::Annotations::BillOfMaterialBuilder::StockLengthType stockLength /** stocklength */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
