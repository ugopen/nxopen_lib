#ifndef NXOpen_ANNOTATIONS_APPENDEDTEXTBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_APPENDEDTEXTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_AppendedTextBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_AppendedTextBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class AppendedTextBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _AppendedTextBuilderBuilder;
        class AppendedTextBuilderImpl;
        /** This class is used to set/access the appended text of a dimension  <br> This is a sub-builder class and cannot be directly instantiated  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  AppendedTextBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: AppendedTextBuilderImpl * m_appendedtextbuilder_impl;
            private: friend class  _AppendedTextBuilderBuilder;
            protected: AppendedTextBuilder();
            public: ~AppendedTextBuilder();
            /** Gets the appended text above the annotation  @return  List of lines 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetAbove
            (
            );
            /** Sets the appended text above the annotation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetAbove
            (
                std::vector<NXString> & lines /** List of new lines */
            );
            /** Gets the appended text after the annotation  @return  List of lines 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetAfter
            (
            );
            /** Sets the appended text after the annotation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetAfter
            (
                std::vector<NXString> & lines /** List of new lines */
            );
            /** Gets the appended text below the annotation  @return  List of lines 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBelow
            (
            );
            /** Sets the appended text below the annotation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetBelow
            (
                std::vector<NXString> & lines /** List of new lines */
            );
            /** Gets the appended text before the annotation  @return  List of lines 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetBefore
            (
            );
            /** Sets the appended text before the annotation 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetBefore
            (
                std::vector<NXString> & lines /** List of new lines */
            );
            /**Sets  the scale for user defined symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUserDefinedSymbolScale
            (
                double scale /** scale */ 
            );
            /**Sets  the aspect ratio for user defined symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUserDefinedSymbolAspectRatio
            (
                double aspectRatio /** aspectratio */ 
            );
            /**Sets  the length for user defined symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUserDefinedSymbolLength
            (
                double length /** length */ 
            );
            /**Sets  the height for user defined symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") OR geometric_tol ("GDT") */
            public: void SetUserDefinedSymbolHeight
            (
                double height /** height */ 
            );
            /**Returns  the scale for user defined symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double UserDefinedSymbolScale
            (
            );
            /**Returns  the aspect ratio for user defined symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double UserDefinedSymbolAspectRatio
            (
            );
            /**Returns  the length for user defined symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double UserDefinedSymbolLength
            (
            );
            /**Returns  the height for user defined symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double UserDefinedSymbolHeight
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
