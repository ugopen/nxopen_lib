#ifndef NXOpen_CAM_BLANKIPW_HXX_INCLUDED
#define NXOpen_CAM_BLANKIPW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_BlankIpw.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_BlankIpw.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class BlankIpw;
    }
    namespace CAM
    {
        class CAMObject;
    }
    class NXObject;
    namespace CAM
    {
        class _BlankIpwBuilder;
        class BlankIpwImpl;
        /** Represents the blank ipw builder for blank definition  <br> To obtain an instance of this class use the @link NXOpen::CAM::GeometryGroup NXOpen::CAM::GeometryGroup@endlink   <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  BlankIpw : public NXOpen::TaggedObject
        {
            /** the blank IPW status types */
            public: enum StatusTypes
            {
                StatusTypesUpToDate/** blank ipw status up to date*/,
                StatusTypesOutOfDate/** blank ipw status out of date */,
                StatusTypesUnableToUpdate/** blank ipw status unable to update */,
                StatusTypesNone/** blank ipw status none */,
                StatusTypesUnknown/** blank ipw status unknown */
            };

            private: BlankIpwImpl * m_blankipw_impl;
            private: friend class  _BlankIpwBuilder;
            protected: BlankIpw();
            public: ~BlankIpw();
            /** Set the blank ipw source 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetSource
            (
                const NXString & sourcePartName /** the part name where the blank IPW source exists */,
                const NXString & sourceName /** the name of the blank IPW source */
            );
            /** Set the blank ipw source 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetSource
            (
                const char * sourcePartName /** the part name where the blank IPW source exists */,
                const char * sourceName /** the name of the blank IPW source */
            );
            /** Get the blank ipw source  @return  the blank IPW source 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CAMObject * GetSource
            (
                NXOpen::NXObject ** sourcePart /** the part where the blank IPW source exists */
            );
            /** Get the blank IPW status  @return  the blank ipw status 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BlankIpw::StatusTypes GetStatus
            (
            );
            /** Update the blank ipw  @return  the blank ipw status 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::BlankIpw::StatusTypes Update
            (
            );
            /** Decide if the input object can be a valid source  @return  indicate if the input object is valid or not 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: bool IsValidSource
            (
                NXOpen::CAM::CAMObject * object /** the object to be checked*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
