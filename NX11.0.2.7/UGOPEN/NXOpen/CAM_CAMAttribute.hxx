#ifndef NXOpen_CAM_CAMATTRIBUTE_HXX_INCLUDED
#define NXOpen_CAM_CAMATTRIBUTE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CAMAttribute.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_CAMAttribute.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class CAMAttribute;
    }
    class NXObject;
    namespace CAM
    {
        class _CAMAttributeBuilder;
        class CAMAttributeImpl;
        /** Represents a CAM Feature Attribute  <br> To obtain an instance of this class use @link NXOpen::CAM::CAMFeature NXOpen::CAM::CAMFeature@endlink   <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  CAMAttribute : public NXOpen::NXObject
        {
            /** Attribute types */
            public: enum ValueType
            {
                ValueTypeInteger/** integer */ ,
                ValueTypeDouble/** double */ ,
                ValueTypeString/** string */ ,
                ValueTypeBool/** bool */ ,
                ValueTypePoint3/** point3 */ ,
                ValueTypeVector3/** vector3 */ 
            };

            private: CAMAttributeImpl * m_camattribute_impl;
            private: friend class  _CAMAttributeBuilder;
            protected: CAMAttribute();
            public: ~CAMAttribute();
            /**Returns  the name of the attribute 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Returns  the name of the attribute 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DisplayName
            (
            );
            /**Sets  the name of the attribute 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDisplayName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the attribute 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetDisplayName
            (
                const char * name /** name */ 
            );
            /**Returns  the feature attribute type 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CAMAttribute::ValueType Type
            (
            );
            /** Get the feature attribute integer value for an integer type attribute @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int GetIntegerValue
            (
            );
            /** Set the feature attribute integer value for an integer type attribute
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE"), cam_base ("CAM BASE") */
            public: void SetIntegerValue
            (
                int attributeValue /** attributevalue */ 
            );
            /** Get the feature attribute double value for a double type attribute @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double GetDoubleValue
            (
            );
            /** Set the feature attribute double value for a double type attribute
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE"), cam_base ("CAM BASE") */
            public: void SetDoubleValue
            (
                double attributeValue /** attributevalue */ 
            );
            /** Get the feature attribute boolean value for a boolean type attribute @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetBoolValue
            (
            );
            /** Set the feature attribute boolean value for a boolean type attribute
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE"), cam_base ("CAM BASE") */
            public: void SetBoolValue
            (
                bool attributeValue /** attributevalue */ 
            );
            /** Set the feature attribute string value for a string type attribute @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetStringValue
            (
            );
            /** Get the feature attribute string value for a string type attribute
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE"), cam_base ("CAM BASE") */
            public: void SetStringValue
            (
                const NXString & name /** name */ 
            );
            /** Get the feature attribute string value for a string type attribute
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE"), cam_base ("CAM BASE") */
            void SetStringValue
            (
                const char * name /** name */ 
            );
            /** Get the feature attribute point3 value for a point3 type attribute @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d GetPoint3Value
            (
            );
            /** Set the feature attribute point3 value for a point3 type attribute
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE"), cam_base ("CAM BASE") */
            public: void SetPoint3Value
            (
                const NXOpen::Point3d & attributeValue /** attributevalue */ 
            );
            /** Get the feature attribute vector3 value for a vector3 type attribute @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vector3d GetVector3Value
            (
            );
            /** Set the feature attribute vector3 value for a vector3 type attribute
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE"), cam_base ("CAM BASE") */
            public: void SetVector3Value
            (
                const NXOpen::Vector3d & attributeValue /** attributevalue */ 
            );
            /**Returns   the flag that indicates if the attribute is overridden  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsOverridden
            (
            );
            /** Sets the attribute value to undefined 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveValue
            (
            );
            /** Sets the overridden attribute value to undefined 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void RemoveOverriddenValue
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
