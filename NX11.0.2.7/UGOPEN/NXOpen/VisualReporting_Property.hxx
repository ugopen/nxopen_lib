#ifndef NXOpen_VISUALREPORTING_PROPERTY_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_PROPERTY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_Property.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/VisualReporting_Property.hxx>
#include <NXOpen/libnxopencpp_visualreporting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace VisualReporting
    {
        class Property;
    }
    class NXObject;
    namespace VisualReporting
    {
        class _PropertyBuilder;
        class PropertyImpl;
        /** A property within either a @link NXOpen::VisualReporting::Rule NXOpen::VisualReporting::Rule@endlink  or a
                @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink , or used as referenced property 
                information for the report.
            
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_VISUALREPORTINGEXPORT  Property : public NXOpen::NXObject
        {
            /** Represents the possible @link NXOpen::VisualReporting::Property::PropertyType NXOpen::VisualReporting::Property::PropertyType@endlink  options
                        for a property
                    */
            public: enum TypeOption
            {
                TypeOptionArrangementSpecificPositionProperty/** Arrengement specific positioning */,
                TypeOptionAttributeProperty/** Part attribute property */,
                TypeOptionComponentGroupProperty/** Component group name */,
                TypeOptionComponentNameProperty/** Component name */,
                TypeOptionDescriptivePartNameProperty/** Descriptive part name */,
                TypeOptionLoadStateProperty/** The load-state of the component */,
                TypeOptionMassKgProperty/** The mass of the component in pounds */,
                TypeOptionMassLbProperty/** The mass of the component in kilograms */,
                TypeOptionModifiedProperty/** Whether the component is modified */,
                TypeOptionMultiCadProperty/** Parts mastered in a CAD system other than NX */,
                TypeOptionPartNameProperty/** Part name */,
                TypeOptionPartUnitsProperty/** Part units */,
                TypeOptionPiecePartProperty/** Piece part */,
                TypeOptionPositionProperty/** The position of the component */,
                TypeOptionPositionControlProperty/** The position control of the component */,
                TypeOptionReadOnlyProperty/** Whether the component is read-only */,
                TypeOptionReferenceSetProperty/** The reference-set used by the component */,
                TypeOptionRootPartProperty/** Root part occurrence */,
                TypeOptionSuppressionControlProperty/** The suppression control of the component */,
                TypeOptionWeightStatusProperty/** The weight status of the component */,
                TypeOptionTeamcenterProperty/** Teamcenter property */,
                TypeOptionServerProperty/** Server Property defined in server side report */,
                TypeOptionDegreesOfFreedomProperty/** The freedom degree of the component */,
                TypeOptionRuleEvaluationResultProperty/** Rule Evaluation for results in part */,
                TypeOptionCheckMateResultProperty/** Check-Mate result*/,
                TypeOptionLastModifiedDateProperty/** last modify date property */,
                TypeOptionRequirementsValidationStatusProperty/** Requirement validate result*/,
                TypeOptionRepresentationProperty/** Representation Status*/,
                TypeOptionLastModifiedUserProperty/** last modify user property */,
                TypeOptionComponentProperty/** Assembly Navigator column property */,
                TypeOptionMassGmProperty/** The mass of the component in grams */,
                TypeOptionPartFamilyMemberProperty/** Part family member */,
                TypeOptionLinkedPartProperty/** Linked part */,
                TypeOptionProductTemplateProperty/** Product Template */,
                TypeOptionBodyDensityProperty/** Body density property */,
                TypeOptionBodyMassProperty/** Body mass property */,
                TypeOptionBodyRadiusGyrationProperty/** Body radius gyration property */,
                TypeOptionBodySurfaceAreaProperty/** Body surface area property */,
                TypeOptionBodyTypeProperty/** Body type property */,
                TypeOptionBodyVolumeProperty/** Body volume property */,
                TypeOptionBodyWeightProperty/** Body weight property */,
                TypeOptionFaceAreaProperty/** Face area property */,
                TypeOptionFaceTypeProperty/** Face type property */,
                TypeOptionFaceMinRadiusProperty/** Face minimum radius property */,
                TypeOptionFacePerimeterProperty/** Face perimeter property */,
                TypeOptionFacePMIFCFProperty/** Face PMI FCF property */,
                TypeOptionFacePMIFCFCharacteristicsProperty/** Face PMI FCF characteristics property */,
                TypeOptionFacePMIFCFCharFormTolProperty/** Face PMI FCF form characteristics property */,
                TypeOptionFacePMIFCFCharLocationTolProperty/** Face PMI FCF location characteristics property */,
                TypeOptionFacePMIFCFCharOrientationTolProperty/** Face PMI FCF orientation characteristics property */,
                TypeOptionFacePMIFCFCharProfileTolProperty/** Face PMI FCF profile characteristics property */,
                TypeOptionFacePMIFCFCharRunoutTolProperty/** Face PMI FCF runout characteristics property */,
                TypeOptionFacePMIDatumFeatureProperty/** Face PMI datum feature property */,
                TypeOptionFacePMIDatumTargetProperty/** Face PMI datum target property */,
                TypeOptionObjectAttributeProperty/** Sub-part object attribute property */,
                TypeOptionObjectCreatedByUserProperty/** Sub-part object created by user property */,
                TypeOptionObjectCreatedDateProperty/** Sub-part object created date property */,
                TypeOptionObjectCreatedVersionProperty/** Sub-part object created version property */,
                TypeOptionObjectRefByWaveLinkProperty/** Sub-part object referenced by Wave link property */,
                TypeOptionObjectWaveLinkedProperty/** Sub-part object Wave linked property */,
                TypeOptionObjectModifiedByUserProperty/** Sub-part object modified by user property */,
                TypeOptionObjectModifiedDateProperty/** Sub-part object modified date property */,
                TypeOptionObjectModifiedVersionProperty/** Sub-part object modified version property */,
                TypeOptionPartitionMembershipProperty/** Partition Membership property */,
                TypeOptionComponentAddedDateProperty/** Component Added Date */,
                TypeOptionTeamcenterObjectProperty/** Teamcenter Object property */,
                TypeOptionComponentPatternTypeProperty/** Component Pattern Type property */
            };

            /** Represents the possible @link NXOpen::VisualReporting::Property::SystemDatatype NXOpen::VisualReporting::Property::SystemDatatype@endlink  options
                        for a property.
                    */
            public: enum DatatypeOption
            {
                DatatypeOptionString/** String datatype */,
                DatatypeOptionInteger/** Integer datatype */,
                DatatypeOptionReal/** Floating-point datatype */,
                DatatypeOptionBoolean/** Boolean datatype */,
                DatatypeOptionUnknown/** The datatype is unknown */,
                DatatypeOptionNull/** Null data type*/,
                DatatypeOptionDate/** Date datatype */
            };

            private: PropertyImpl * m_property_impl;
            private: friend class  _PropertyBuilder;
            protected: Property();
            public: ~Property();
            /**Returns  the @link NXOpen::VisualReporting::Property::TypeOption NXOpen::VisualReporting::Property::TypeOption@endlink  of this @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink .

                        Note that this @link NXOpen::VisualReporting::Property::PropertyType NXOpen::VisualReporting::Property::PropertyType@endlink  cannot be modified. 
                        Instead it is specified when creating this @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  by using the appropriate function:
                         - @link NXOpen::VisualReporting::VisualReportBuilder::CreateProperty NXOpen::VisualReporting::VisualReportBuilder::CreateProperty@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Property::TypeOption PropertyType
            (
            );
            /**Returns  the preferred @link NXOpen::VisualReporting::Property::DatatypeOption NXOpen::VisualReporting::Property::DatatypeOption@endlink  that should be used for the
                        owning @link NXOpen::VisualReporting::Condition NXOpen::VisualReporting::Condition@endlink  or @link NXOpen::VisualReporting::Classifier NXOpen::VisualReporting::Classifier@endlink .

                        This function will return a data type of 
                        @link NXOpen::VisualReporting::Property::DatatypeOptionUnknown NXOpen::VisualReporting::Property::DatatypeOptionUnknown@endlink 
                        for properies whose @link NXOpen::VisualReporting::Property::PropertyType NXOpen::VisualReporting::Property::PropertyType@endlink  is
                        @link NXOpen::VisualReporting::Property::TypeOptionTeamcenterProperty NXOpen::VisualReporting::Property::TypeOptionTeamcenterProperty@endlink , 
                        @link NXOpen::VisualReporting::Property::TypeOptionServerProperty NXOpen::VisualReporting::Property::TypeOptionServerProperty@endlink , 
                        or @link NXOpen::VisualReporting::Property::TypeOptionAttributeProperty NXOpen::VisualReporting::Property::TypeOptionAttributeProperty@endlink 
                        where the preferred datatype cannot be determined.

                        Note that this @link NXOpen::VisualReporting::Property::SystemDatatype NXOpen::VisualReporting::Property::SystemDatatype@endlink  cannot be modified. 
                        Instead it is determined when creating this @link NXOpen::VisualReporting::Property NXOpen::VisualReporting::Property@endlink  by using the appropriate function:
                         - @link NXOpen::VisualReporting::VisualReportBuilder::CreateProperty NXOpen::VisualReporting::VisualReportBuilder::CreateProperty@endlink 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::Property::DatatypeOption SystemDatatype
            (
            );
            /**Returns  the bitmap name of this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BitmapName
            (
            );
            /**Sets  the bitmap name of this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetBitmapName
            (
                const NXString & bitmapName /** bitmapname */ 
            );
            /**Sets  the bitmap name of this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void SetBitmapName
            (
                const char * bitmapName /** bitmapname */ 
            );
            /**Returns  the custom message of this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CustomMessage
            (
            );
            /**Sets  the custom message of this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void SetCustomMessage
            (
                const NXString & customMessage /** custommessage */ 
            );
            /**Sets  the custom message of this property.
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void SetCustomMessage
            (
                const char * customMessage /** custommessage */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
