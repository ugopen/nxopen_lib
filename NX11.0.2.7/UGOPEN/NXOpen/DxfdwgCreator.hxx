#ifndef NXOpen_DXFDWGCREATOR_HXX_INCLUDED
#define NXOpen_DXFDWGCREATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     DxfdwgCreator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DxfdwgCreator.hxx>
#include <NXOpen/DexBuilder.hxx>
#include <NXOpen/ObjectSelector.hxx>
#include <NXOpen/ObjectTypeSelector.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class DxfdwgCreator;
    class DexBuilder;
    class ObjectSelector;
    class ObjectTypeSelector;
    class _DxfdwgCreatorBuilder;
    class DxfdwgCreatorImpl;
    /**
        Represents a @link NXOpen::DxfdwgCreator NXOpen::DxfdwgCreator@endlink  to be used when exporting the DXF/DWG Data
        This class is created using @link NXOpen::DexManager NXOpen::DexManager@endlink .
        NULL object will be returned from Commit().
        The workpart should be present in the session before calling commit().  <br> To create a new instance of this class, use @link NXOpen::DexManager::CreateDxfdwgCreator  NXOpen::DexManager::CreateDxfdwgCreator @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    AutoCADRevision </td> <td> 
     
    R2007 </td> </tr> 

    <tr><td> 
     
    ExportAs </td> <td> 
     
    TwoD </td> </tr> 

    <tr><td> 
     
    ExportFacesAs </td> <td> 
     
    Facets </td> </tr> 

    <tr><td> 
     
    ExportFrom </td> <td> 
     
    DisplayPart </td> </tr> 

    <tr><td> 
     
    ExportSplinesAs </td> <td> 
     
    Spline </td> </tr> 

    <tr><td> 
     
    FlattenAssembly </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    OutputFileType </td> <td> 
     
    Dxf </td> </tr> 

    <tr><td> 
     
    OutputTo </td> <td> 
     
    Modeling </td> </tr> 

    <tr><td> 
     
    OverlappingEntities </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    ProcessHoldFlag </td> <td> 
     
    0 </td> </tr> 

    <tr><td> 
     
    SurfaceDesignU </td> <td> 
     
    8 </td> </tr> 

    <tr><td> 
     
    SurfaceDesignV </td> <td> 
     
    8 </td> </tr> 

    <tr><td> 
     
    ViewEditMode </td> <td> 
     
    0 </td> </tr> 

    </table>  

     <br>  Created in NX6.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  DxfdwgCreator : public NXOpen::DexBuilder
    {
        /** Exprot From option */
        public: enum ExportFromOption
        {
            ExportFromOptionDisplayPart/**  export data from displayed part */,
            ExportFromOptionExistingPart/**  export data from existing part which is on disk */
        };

        /** Output File Type option */
        public: enum OutputFileTypeOption
        {
            OutputFileTypeOptionDxf/** export data to DXF format */,
            OutputFileTypeOptionDwg/** export data to DWG format */
        };

        /** Exprot As option */
        public: enum ExportAsOption
        {
            ExportAsOptionTwoD/**  export as 2d data  */,
            ExportAsOptionThreeD/**  export as3d data */,
            ExportAsOptionCgm/** export as cgm */
        };

        /** Output To Option */
        public: enum OutputToOption
        {
            OutputToOptionModeling/** output to modeling */,
            OutputToOptionDrafting/** output to drafting */
        };

        /** Exprot Data option */
        public: enum ExportDataOption
        {
            ExportDataOptionModeling/**  export model data  */,
            ExportDataOptionDrawing/**  export drawing data */
        };

        /** AutoCad Revision option */
        public: enum AutoCADRevisionOptions
        {
            AutoCADRevisionOptionsR12/** output autocad version R12 */,
            AutoCADRevisionOptionsR13/** output autocad version R13 */,
            AutoCADRevisionOptionsR14/** output autocad version R14 */,
            AutoCADRevisionOptionsR2000/** output autocad version 2000 */,
            AutoCADRevisionOptionsR2004/** output autocad version 2004 */,
            AutoCADRevisionOptionsR2005/** output autocad version 2005 */,
            AutoCADRevisionOptionsR2007/** output autocad version 2007 */,
            AutoCADRevisionOptionsR2010/** output autocad version 2010 */,
            AutoCADRevisionOptionsR2013/** output autocad version 2013 */
        };

        /** Export Scale option */
        public: enum ExportScaleOptions
        {
            ExportScaleOptionsDefault/** Default scale(1:1) */,
            ExportScaleOptionsBaseView/** Base View Scale */,
            ExportScaleOptionsUserSpecified/** User specified Scale*/
        };

        /** AutoCad widthfactor calculation options */
        public: enum WidthfactorMethodOptions
        {
            WidthfactorMethodOptionsAutomaticCalculation/** automatic calculation */ ,
            WidthfactorMethodOptionsUseSameAsNXAspectratio/** use same as nxaspectratio */ ,
            WidthfactorMethodOptionsUseValueSpecifiedInMappingFile/** use value specified in mapping file */ ,
            WidthfactorMethodOptionsScaleNXAspectratioWithSpecifiedValue/** scale nxaspectratio with specified value */ 
        };

        /** Export Faces As option */
        public: enum ExportFacesAsOptions
        {
            ExportFacesAsOptionsFacets/** export faces as facets */,
            ExportFacesAsOptionsPolylineMesh/** export faces as polyline mesh */
        };

        /** Export Faces As option */
        public: enum ExportSplinesAsOptions
        {
            ExportSplinesAsOptionsSpline/** spline */ ,
            ExportSplinesAsOptionsPolyline2D/** export faces as facets */,
            ExportSplinesAsOptionsPolyline3D/** export faces as polyline mesh */
        };

        private: DxfdwgCreatorImpl * m_dxfdwgcreator_impl;
        private: friend class  _DxfdwgCreatorBuilder;
        protected: DxfdwgCreator();
        public: ~DxfdwgCreator();
        /** Saves the save settings - this will save the settings to a file sepcified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /** filename */ 
        );
        /** Saves the save settings - this will save the settings to a file sepcified 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SaveSettings
        (
            const char * filename /** filename */ 
        );
        /**Returns  the export from - this option will determine if data from display part or existing part is exported 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::ExportFromOption ExportFrom
        (
        );
        /**Sets  the export from - this option will determine if data from display part or existing part is exported 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExportFrom
        (
            NXOpen::DxfdwgCreator::ExportFromOption exportFrom /** exportfrom */ 
        );
        /**Returns  the export as - this option will determine if data needs to be proprocessed as 2d or cgm before exporting to DXF/DWG 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::ExportAsOption ExportAs
        (
        );
        /**Sets  the export as - this option will determine if data needs to be proprocessed as 2d or cgm before exporting to DXF/DWG 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetExportAs
        (
            NXOpen::DxfdwgCreator::ExportAsOption exportAs /** exportas */ 
        );
        /**Returns  the export data  option will determine if model data data or drawing data needs to be exported
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::ExportDataOption ExportData
        (
        );
        /**Sets  the export data  option will determine if model data data or drawing data needs to be exported
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetExportData
        (
            NXOpen::DxfdwgCreator::ExportDataOption exportData /** exportdata */ 
        );
        /**Returns  the output file type - this option determines the format of output file, It can either be dxf or dwg. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::OutputFileTypeOption OutputFileType
        (
        );
        /**Sets  the output file type - this option determines the format of output file, It can either be dxf or dwg. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputFileType
        (
            NXOpen::DxfdwgCreator::OutputFileTypeOption outputFileType /** outputfiletype */ 
        );
        /**Returns  the input file - name of file which is being exported. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString InputFile
        (
        );
        /**Sets  the input file - name of file which is being exported. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetInputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the input file - name of file which is being exported. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetInputFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the output file - the name of dxf/dwg file where output is being written 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString OutputFile
        (
        );
        /**Sets  the output file - the name of dxf/dwg file where output is being written 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the output file - the name of dxf/dwg file where output is being written 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetOutputFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the output to - where to put data in model world or layout
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::OutputToOption OutputTo
        (
        );
        /**Sets  the output to - where to put data in model world or layout
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputTo
        (
            NXOpen::DxfdwgCreator::OutputToOption outputTo /** outputto */ 
        );
        /**Returns  the settings file - The definition file to read default options 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  the settings file - The definition file to read default options 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the settings file - The definition file to read default options 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetSettingsFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the TextFontMappingFile command - definition file for text font mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString TextFontMappingFile
        (
        );
        /**Sets  the TextFontMappingFile command - definition file for text font mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTextFontMappingFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the TextFontMappingFile command - definition file for text font mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetTextFontMappingFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the autocad widthfactor calculation method - this will decide the acad widthfactor method to be used. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::WidthfactorMethodOptions WidthFactorMode
        (
        );
        /**Sets  the autocad widthfactor calculation method - this will decide the acad widthfactor method to be used. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetWidthFactorMode
        (
            NXOpen::DxfdwgCreator::WidthfactorMethodOptions widthFactorMode /** widthfactormode */ 
        );
        /**Returns  the CrossHatchMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString CrossHatchMappingFile
        (
        );
        /**Sets  the CrossHatchMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCrossHatchMappingFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the CrossHatchMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetCrossHatchMappingFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the LineFontMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString LineFontMappingFile
        (
        );
        /**Sets  the LineFontMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLineFontMappingFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the LineFontMappingFile command - definition file for cross hatch mapping
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetLineFontMappingFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the view list - comma separated list of views to export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ViewList
        (
        );
        /**Sets  the view list - comma separated list of views to export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetViewList
        (
            const NXString & viewList /** viewlist */ 
        );
        /**Sets  the view list - comma separated list of views to export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetViewList
        (
            const char * viewList /** viewlist */ 
        );
        /**Returns  the drawing list - comma separated list of drawings to export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString DrawingList
        (
        );
        /**Sets  the drawing list - comma separated list of drawings to export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDrawingList
        (
            const NXString & drawingList /** drawinglist */ 
        );
        /**Sets  the drawing list - comma separated list of drawings to export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetDrawingList
        (
            const char * drawingList /** drawinglist */ 
        );
        /**Returns  the export selection block - the object selection will be done by this block. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ObjectSelector * ExportSelectionBlock
        (
        );
        /**Returns  the objectTypes - this is subcomponent being used to set object types filters. This
                    will be used to filter objects based on the types 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ObjectTypeSelector * ObjectTypes
        (
        );
        /**Returns  the layerMask - You can limit the data you export by only specifying the layers that 
                  contain the appropriate information. You can enter layer numbers or layers ranges 
                  separated by commas. For example, 1, 5, 88-109,190-199, 201, 206-210 is a legal specification.
                  The default setting for Layers to Export is 1-256. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXString LayerMask
        (
        );
        /**Sets  the layerMask - You can limit the data you export by only specifying the layers that 
                  contain the appropriate information. You can enter layer numbers or layers ranges 
                  separated by commas. For example, 1, 5, 88-109,190-199, 201, 206-210 is a legal specification.
                  The default setting for Layers to Export is 1-256. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLayerMask
        (
            const NXString & layerMask /** layermask */ 
        );
        /**Sets  the layerMask - You can limit the data you export by only specifying the layers that 
                  contain the appropriate information. You can enter layer numbers or layers ranges 
                  separated by commas. For example, 1, 5, 88-109,190-199, 201, 206-210 is a legal specification.
                  The default setting for Layers to Export is 1-256. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        void SetLayerMask
        (
            const char * layerMask /** layermask */ 
        );
        /**Returns  the autocad revision - this will decide the revision of resultant autocad file. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::AutoCADRevisionOptions AutoCADRevision
        (
        );
        /**Sets  the autocad revision - this will decide the revision of resultant autocad file. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAutoCADRevision
        (
            NXOpen::DxfdwgCreator::AutoCADRevisionOptions autoCADRevision /** autocadrevision */ 
        );
        /**Returns  the view edit mode - if set to true this will include view modified/view erase data in the
                    resultant autocad file. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool ViewEditMode
        (
        );
        /**Sets  the view edit mode - if set to true this will include view modified/view erase data in the
                    resultant autocad file. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetViewEditMode
        (
            bool viewEditMode /** vieweditmode */ 
        );
        /**Returns  the flatten assembly - if set to true then assembly structure will not be retained 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool FlattenAssembly
        (
        );
        /**Sets  the flatten assembly - if set to true then assembly structure will not be retained 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFlattenAssembly
        (
            bool flattenAssembly /** flattenassembly */ 
        );
        /**Returns  the overlapping entities - if set to true the overlapping entities will be removed before exporting 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool OverlappingEntities
        (
        );
        /**Sets  the overlapping entities - if set to true the overlapping entities will be removed before exporting 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetOverlappingEntities
        (
            bool overlappingEntities /** overlappingentities */ 
        );
        /**Returns  the export faces as - this will determine if the faces should be exported as facets or polyline mesh 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::ExportFacesAsOptions ExportFacesAs
        (
        );
        /**Sets  the export faces as - this will determine if the faces should be exported as facets or polyline mesh 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExportFacesAs
        (
            NXOpen::DxfdwgCreator::ExportFacesAsOptions exportFacesAs /** exportfacesas */ 
        );
        /**Returns  the export Spline as - this will determine if the spline should be exported as spline, 2D ployline or 3D polyline 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::ExportSplinesAsOptions ExportSplinesAs
        (
        );
        /**Sets  the export Spline as - this will determine if the spline should be exported as spline, 2D ployline or 3D polyline 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void SetExportSplinesAs
        (
            NXOpen::DxfdwgCreator::ExportSplinesAsOptions exportSplinesAs /** exportsplinesas */ 
        );
        /**Returns  the export scale Options - this will determine if the scale should be used from Default, Base View or User specified
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DxfdwgCreator::ExportScaleOptions ExportScaleOption
        (
        );
        /**Sets  the export scale Options - this will determine if the scale should be used from Default, Base View or User specified
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExportScaleOption
        (
            NXOpen::DxfdwgCreator::ExportScaleOptions exportScaleOption /** exportscaleoption */ 
        );
        /**Returns the scale value - this Scale is used during Model space data export
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ExportScaleValue
        (
        );
        /**Sets the scale value - this Scale is used during Model space data export
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetExportScaleValue
        (
            const NXString & exportScaleValue /** exportscalevalue */ 
        );
        /**Sets the scale value - this Scale is used during Model space data export
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        void SetExportScaleValue
        (
            const char * exportScaleValue /** exportscalevalue */ 
        );
        /**Returns  the surface design u - this will set the surface density along U direction. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int SurfaceDesignU
        (
        );
        /**Sets  the surface design u - this will set the surface density along U direction. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSurfaceDesignU
        (
            int surfaceDesignU /** surfacedesignu */ 
        );
        /**Returns  the surface design V - this will set the surface density along V direction. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: int SurfaceDesignV
        (
        );
        /**Sets  the surface design V - this will set the surface density along V direction. 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSurfaceDesignV
        (
            int surfaceDesignV /** surfacedesignv */ 
        );
        /**Returns  the file save flag - this should be set to false if doing File Export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool FileSaveFlag
        (
        );
        /**Sets  the file save flag - this should be set to false if doing File Export 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFileSaveFlag
        (
            bool doingFileSave /** doingfilesave */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
