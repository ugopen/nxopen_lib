#ifndef NXOpen_CAE_POSTSCENARIOVARIANT_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIOVARIANT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioVariant.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostScenarioTypes.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioVariant;
    }
    namespace CAE
    {
    }
    namespace CAE
    {
        class PostScenarioVariantImpl;
        /**  @brief  A dynamically typed scalar value.  

         
                A Variant is a scalar value whose type is determined at
                runtime based on the previously assigned value. For example,
                once an integer number is assigned to a variant, that
                Variant now represents an integer.
                Variants are needed to read and assign values in a generic
                way, and it permits arbitrary PostScenarios (@link NXOpen::CAE::PostScenarioBuilder NXOpen::CAE::PostScenarioBuilder@endlink ) and arbitrary
                Data Sources to work together to provide a seamless
                post processing experience.
                Variant instances need to be disposed of after they are
                no longer needed.
              <br> To create a new instance of this class, use @link NXOpen::CAE::PostScenarioSelectionParameters::NewVariant  NXOpen::CAE::PostScenarioSelectionParameters::NewVariant @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioVariant : public NXOpen::TransientObject
        {
            private: PostScenarioVariantImpl * m_postscenariovariant_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostScenarioVariant(void *ptr);
            /// \endcond 
            /** Read the typed value.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetValueAsBoolean
            (
            );
            /** Read the typed value.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int GetValueAsInteger
            (
            );
            /** Read the typed value.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double GetValueAsDouble
            (
            );
            /** Read the typed value.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::Complex GetValueAsComplex
            (
            );
            /** Read the typed value.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetValueAsString
            (
            );
            /** Read the typed value.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetValueAsUnicodeString
            (
            );
            /** Read the type.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioVariantType GetDataType
            (
            );
            /** Dispose of this instance. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostScenarioVariant();
            /** Set a typed value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsBoolean
            (
                bool value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsInteger
            (
                int value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsDouble
            (
                double value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsComplex
            (
                const NXOpen::CAE::Complex & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsString
            (
                const NXString & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetValueAsString
            (
                const char * value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetValueAsUnicodeString
            (
                const NXString & value /** value */ 
            );
            /** Set a typed value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetValueAsUnicodeString
            (
                const char * value /** value */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
