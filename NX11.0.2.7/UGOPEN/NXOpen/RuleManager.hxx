#ifndef NXOpen_RULEMANAGER_HXX_INCLUDED
#define NXOpen_RULEMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RuleManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class RuleManager;
    class BasePart;
    class NXObject;
    class RuleManagerImpl;
    /** Provides methods for manipulating the Knowledge Fusion rules in a part.  <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  RuleManager
    {
        /** Indicates the data type of a rule. */
        public: enum RuleType
        {
            RuleTypeBoolean/** boolean */ ,
            RuleTypeFrame/** frame */ ,
            RuleTypeInteger/** integer */ ,
            RuleTypeList/** list */ ,
            RuleTypeName/** name */ ,
            RuleTypeNumber/** number */ ,
            RuleTypePoint/** point */ ,
            RuleTypeString/** string */ ,
            RuleTypeVector/** vector */ ,
            RuleTypeInstance/** instance */ ,
            RuleTypeAny/** any */ ,
            RuleTypeHostPointer/** host pointer */ 
        };

         /** Used to specify parameter values for child rule creation or modification. */
        public:
        struct  ParameterRule
        {
            public: /** name of the parameter */NXString Name;
            public: /** new rule text for this parameter */NXString Rule;
            public: ParameterRule() :
                Name(),
                Rule()
            {
            }
            /** Constructor for the ParameterRule struct. */ 
            public: ParameterRule(const NXString &nameInitial /** name of the parameter */, 
                    const NXString &ruleInitial /** new rule text for this parameter */) :
                Name(nameInitial),
                Rule(ruleInitial)
            {
            }
        };

         /** Used to return information about a function. */
        public:
        struct  FunctionInformation
        {
            public: /** Return type of function*/NXString ReturnType;
            public: /** Number of arguments */int NumArguments;
            public: /** Brief description of function */NXString BriefDescription;
            public: /** Full description of function */NXString FullDescription;
            public: /** Full description of return value */NXString ReturnDescription;
            public: /** TRUE for dynamic methods */bool IsDynamic;
            public: /** TRUE if usable in Design Logic */bool DesignLogic;
            public: /** Other related functions, comma-separated list */NXString SeeAlso;
            public: FunctionInformation() :
                ReturnType(),
                NumArguments(),
                BriefDescription(),
                FullDescription(),
                ReturnDescription(),
                IsDynamic(),
                DesignLogic(),
                SeeAlso()
            {
            }
            /** Constructor for the FunctionInformation struct. */ 
            public: FunctionInformation(const NXString &returnTypeInitial /** Return type of function*/, 
                    int numArgumentsInitial /** Number of arguments */, 
                    const NXString &briefDescriptionInitial /** Brief description of function */, 
                    const NXString &fullDescriptionInitial /** Full description of function */, 
                    const NXString &returnDescriptionInitial /** Full description of return value */, 
                    bool isDynamicInitial /** TRUE for dynamic methods */, 
                    bool designLogicInitial /** TRUE if usable in Design Logic */, 
                    const NXString &seeAlsoInitial /** Other related functions, comma-separated list */) :
                ReturnType(returnTypeInitial),
                NumArguments(numArgumentsInitial),
                BriefDescription(briefDescriptionInitial),
                FullDescription(fullDescriptionInitial),
                ReturnDescription(returnDescriptionInitial),
                IsDynamic(isDynamicInitial),
                DesignLogic(designLogicInitial),
                SeeAlso(seeAlsoInitial)
            {
            }
        };

         /** Used to return information about the arguments for a function. */
        public:
        struct  FunctionArgumentsInformation
        {
            public: /** Argument name */NXString ArgumentName;
            public: /** Type of argument */NXString ArgumentType;
            public: /** Style of argument, Required or Optional */NXString ArgumentStyle;
            public: /** Default for optional argument */NXString ArgumentDefault;
            public: /** argument dimensionality */NXString ArgumentDimensionality;
            public: /** Description of argument */NXString ArgumentDescription;
            public: /** Selection object types for argument, comma-separated list */NXString ArgumentSelectionTypes;
            public: FunctionArgumentsInformation() :
                ArgumentName(),
                ArgumentType(),
                ArgumentStyle(),
                ArgumentDefault(),
                ArgumentDimensionality(),
                ArgumentDescription(),
                ArgumentSelectionTypes()
            {
            }
            /** Constructor for the FunctionArgumentsInformation struct. */ 
            public: FunctionArgumentsInformation(const NXString &argumentNameInitial /** Argument name */, 
                    const NXString &argumentTypeInitial /** Type of argument */, 
                    const NXString &argumentStyleInitial /** Style of argument, Required or Optional */, 
                    const NXString &argumentDefaultInitial /** Default for optional argument */, 
                    const NXString &argumentDimensionalityInitial /** argument dimensionality */, 
                    const NXString &argumentDescriptionInitial /** Description of argument */, 
                    const NXString &argumentSelectionTypesInitial /** Selection object types for argument, comma-separated list */) :
                ArgumentName(argumentNameInitial),
                ArgumentType(argumentTypeInitial),
                ArgumentStyle(argumentStyleInitial),
                ArgumentDefault(argumentDefaultInitial),
                ArgumentDimensionality(argumentDimensionalityInitial),
                ArgumentDescription(argumentDescriptionInitial),
                ArgumentSelectionTypes(argumentSelectionTypesInitial)
            {
            }
        };

         /** Used to return adoptable object types. */
        public:
        struct  AdoptableTypes
        {
            public: /** object type */ int ObjectType;
            public: /** object subtype */ int ObjectSubtype;
            public: /** feature type */ int FeatureType;
            public: AdoptableTypes() :
                ObjectType(),
                ObjectSubtype(),
                FeatureType()
            {
            }
            /** Constructor for the AdoptableTypes struct. */ 
            public: AdoptableTypes(int objectTypeInitial /** object type */ , 
                    int objectSubtypeInitial /** object subtype */ , 
                    int featureTypeInitial /** feature type */ ) :
                ObjectType(objectTypeInitial),
                ObjectSubtype(objectSubtypeInitial),
                FeatureType(featureTypeInitial)
            {
            }
        };

        /** Indicates the license type to be used. */
        public: enum LicenseType
        {
            LicenseTypeNoLicense/** no license */ ,
            LicenseTypeAuthor/** author */ ,
            LicenseTypeExecute/** execute */ ,
            LicenseTypePipeline/** pipeline */ ,
            LicenseTypeKfFeature/** kf feature */ ,
            LicenseTypeKfInterop/** kf interop */ ,
            LicenseTypeKfNewGeom/** kf new geom */ ,
            LicenseTypeKfChecking/** kf checking */ 
        };

        /** Indicates the status from initializing RuleManager. */
        public: enum InitializationStatusType
        {
            InitializationStatusTypeSuccess/** Initialization succeeded */,
            InitializationStatusTypeFailure/** Initialization failed    */,
            InitializationStatusTypeUnavailable/** Intent not available     */,
            InitializationStatusTypeUnableToObtainLicense/** Cannot obtain license    */,
            InitializationStatusTypeCloseFailure/** Close failed             */
        };

        /** The filter option for asking for classes. */
        public: enum Filter
        {
            FilterUser/** User classes only */,
            FilterSystem/** System classes only */,
            FilterBoth/** Both user and system classes */,
            FilterUserPlus/** User and application classes */,
            FilterUserLoaded/** User classes that are loaded */,
            FilterSystemLoaded/** System classes that are loaded */,
            FilterBothLoaded/** System and user classes that are loaded */,
            FilterUserPlusLoaded/** User and application classes that are loaded */
        };

         /** Used to return debug update information for instances. */
        public:
        struct  DebugInstance
        {
            public: /** part of instance  */NXString PartName;
            public: /** name of instance  */NXString RefChain;
            public: /** nha of instance   */NXString NhaChain;
            public: /** number of rules   */int NRules;
            public: /** index of rules[0] */int Rules0;
            public: DebugInstance() :
                PartName(),
                RefChain(),
                NhaChain(),
                NRules(),
                Rules0()
            {
            }
            /** Constructor for the DebugInstance struct. */ 
            public: DebugInstance(const NXString &partNameInitial /** part of instance  */, 
                    const NXString &refChainInitial /** name of instance  */, 
                    const NXString &nhaChainInitial /** nha of instance   */, 
                    int nRulesInitial /** number of rules   */, 
                    int rules0Initial /** index of rules[0] */) :
                PartName(partNameInitial),
                RefChain(refChainInitial),
                NhaChain(nhaChainInitial),
                NRules(nRulesInitial),
                Rules0(rules0Initial)
            {
            }
        };

         /** Used to return debug update information for rules. */
        public:
        struct  DebugRule
        {
            public: /** unit of rule    */NXString Unit;
            public: /** name of rule    */NXString Name;
            public: /** formula of rule */NXString Formula;
            public: /** type of value   */NXString Type;
            public: /** value of rule   */NXString Value;
            public: DebugRule() :
                Unit(),
                Name(),
                Formula(),
                Type(),
                Value()
            {
            }
            /** Constructor for the DebugRule struct. */ 
            public: DebugRule(const NXString &unitInitial /** unit of rule    */, 
                    const NXString &nameInitial /** name of rule    */, 
                    const NXString &formulaInitial /** formula of rule */, 
                    const NXString &typeInitial /** type of value   */, 
                    const NXString &valueInitial /** value of rule   */) :
                Unit(unitInitial),
                Name(nameInitial),
                Formula(formulaInitial),
                Type(typeInitial),
                Value(valueInitial)
            {
            }
        };

        private: RuleManagerImpl * m_rulemanager_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit RuleManager(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~RuleManager();
        /** Initialize the RuleManager.  @return  Status from initializing RuleManager 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::RuleManager::InitializationStatusType Initialize
        (
            NXOpen::RuleManager::LicenseType licenseToTake /** Which license to take */,
            int* intentStatus /** Status from initializing subsystem */
        );
        /** Create or modify a dynamic rule. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void CreateDynamicRule
        (
            const NXString & referenceChain /** Reference chain for instance in which to create the dynamic rule */,
            const NXString & ruleName /** Name of rule to create */,
            NXOpen::RuleManager::RuleType ruleType /** Data type for the new rule */,
            const NXString & ruleText /** Value for the new rule as a string */
        );
        /** Create or modify a dynamic rule. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void CreateDynamicRule
        (
            const char * referenceChain /** Reference chain for instance in which to create the dynamic rule */,
            const char * ruleName /** Name of rule to create */,
            NXOpen::RuleManager::RuleType ruleType /** Data type for the new rule */,
            const char * ruleText /** Value for the new rule as a string */
        );
        /** Create or modify a dynamic rule. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void CreateDynamicRule
        (
            const NXString & referenceChain /** Reference chain for instance in which to create the dynamic rule */,
            const NXString & ruleName /** Name of rule to create */,
            const NXString & behaviors /** Behaviors for the new rule, for example, "Number Modifiable" */,
            const NXString & ruleUnits /** Unit for the new rule, for example, "mm" */,
            const NXString & ruleText /** Value for the new rule as a string */,
            const NXString & leadingComment /** Leading comment of the form "#+ #-" for rule.  This can be NULL */
        );
        /** Create or modify a dynamic rule. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void CreateDynamicRule
        (
            const char * referenceChain /** Reference chain for instance in which to create the dynamic rule */,
            const char * ruleName /** Name of rule to create */,
            const char * behaviors /** Behaviors for the new rule, for example, "Number Modifiable" */,
            const char * ruleUnits /** Unit for the new rule, for example, "mm" */,
            const char * ruleText /** Value for the new rule as a string */,
            const char * leadingComment /** Leading comment of the form "#+ #-" for rule.  This can be NULL */
        );
        /** Create or modify a dynamic rule. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void CreateDynamicRule
        (
            const NXString & referenceChain /** Reference chain for instance in which to create the dynamic rule */,
            const NXString & ruleName /** Name of rule to create */,
            const NXString & behaviors /** Behaviors for the new rule, for example, "Number Modifiable" */,
            const NXString & ruleText /** Value for the new rule as a string */,
            const NXString & leadingComment /** Leading comment of the form "#+ #-" for rule.  This can be NULL */
        );
        /** Create or modify a dynamic rule. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void CreateDynamicRule
        (
            const char * referenceChain /** Reference chain for instance in which to create the dynamic rule */,
            const char * ruleName /** Name of rule to create */,
            const char * behaviors /** Behaviors for the new rule, for example, "Number Modifiable" */,
            const char * ruleText /** Value for the new rule as a string */,
            const char * leadingComment /** Leading comment of the form "#+ #-" for rule.  This can be NULL */
        );
        /** Performs an KF update. This ensures that all KF objects will be properly updated 
                when created through dynamic rules.   
                 <br> 
                Note:  This method does the same thing as, @link Update::DoUpdate Update::DoUpdate@endlink 
                except that it does some addition updating to make sure CAE objects are complete.    
                 <br> 
              @return  The number of errors in the update module's error list.
                                       If errors occurred during update they will be added to that
                                       error list.  To obtain a list of these errors, use
                                       @link Update::ErrorList Update::ErrorList@endlink  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: int DoKfUpdate
        (
            NXOpen::Session::UndoMarkId undoMark /** If any update error occurs, the system 
                                                                  will roll back to this
                                                                  undo mark. */
        );
        /** Delete an existing dynamic rule. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void DeleteDynamicRule
        (
            const NXString & referenceChain /** Reference chain for instance from which to delete the dynamic rule */,
            const NXString & ruleName /** Name of rule to delete */
        );
        /** Delete an existing dynamic rule. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void DeleteDynamicRule
        (
            const char * referenceChain /** Reference chain for instance from which to delete the dynamic rule */,
            const char * ruleName /** Name of rule to delete */
        );
        /** Create a child rule and the root for this rule manager's part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void CreateChildRule
        (
            const NXString & ruleName /** Name of child rule to create */,
            const NXString & className /** Class to instantiate as this child */,
            const std::vector<NXOpen::RuleManager::ParameterRule> & parameters /** Input parameters for this class */
        );
        /** Create a child rule and the root for this rule manager's part. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void CreateChildRule
        (
            const char * ruleName /** Name of child rule to create */,
            const char * className /** Class to instantiate as this child */,
            const std::vector<NXOpen::RuleManager::ParameterRule> & parameters /** Input parameters for this class */
        );
        /** Delete a child rule from this rule manager. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void DeleteChildRule
        (
            const NXString & ruleName /** Name of child to delete */
        );
        /** Delete a child rule from this rule manager. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void DeleteChildRule
        (
            const char * ruleName /** Name of child to delete */
        );
        /** Remove a dynamic child or attribute rule, but leave the geometry. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveRuleOnly
        (
            const NXString & referenceChain /** Reference chain for rule to remove */
        );
        /** Remove a dynamic child or attribute rule, but leave the geometry. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void RemoveRuleOnly
        (
            const char * referenceChain /** Reference chain for rule to remove */
        );
        /** Determine whether a class is a user class.  @return  True if the class is a user class 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsUserClass
        (
            const NXString & className /** Class name */
        );
        /** Determine whether a class is a user class.  @return  True if the class is a user class 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsUserClass
        (
            const char * className /** Class name */
        );
        /** Get the names of all the rules defined in a class.  @return  Array of names of rules in the class 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetRulesOfClass
        (
            const NXString & className /** Class name */
        );
        /** Get the names of all the rules defined in a class.  @return  Array of names of rules in the class 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        std::vector<NXString> GetRulesOfClass
        (
            const char * className /** Class name */
        );
        /** Get the names of all dynamic rules defined on a child rule (or Root:).  @return  Array of dynamic rule names in the child 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetDynamicRules
        (
            const NXString & childRuleName /** reference chain of child rule */
        );
        /** Get the names of all dynamic rules defined on a child rule (or Root:).  @return  Array of dynamic rule names in the child 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        std::vector<NXString> GetDynamicRules
        (
            const char * childRuleName /** reference chain of child rule */
        );
        /** Get the parameters that have been specified on a dynamic child rule.  @return  Array of names of parameters specified 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetSpecifiedParameters
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Get the parameters that have been specified on a dynamic child rule.  @return  Array of names of parameters specified 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        std::vector<NXString> GetSpecifiedParameters
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Get the formula for a parameter that has been specified on a dynamic child rule.  @return  Formula for the specified parameter 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetParameterFormula
        (
            const NXString & referenceChain /** Reference chain for rule */,
            const NXString & parameterName /** Parameter name */
        );
        /** Get the formula for a parameter that has been specified on a dynamic child rule.  @return  Formula for the specified parameter 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString GetParameterFormula
        (
            const char * referenceChain /** Reference chain for rule */,
            const char * parameterName /** Parameter name */
        );
        /** Rename a dynamic child or attribute rule. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void Rename
        (
            const NXString & referenceChain /** Reference chain for rule to rename */,
            const NXString & newName /** New leaf name */
        );
        /** Rename a dynamic child or attribute rule. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void Rename
        (
            const char * referenceChain /** Reference chain for rule to rename */,
            const char * newName /** New leaf name */
        );
        /** Copy a dynamic child or attribute rule. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void Copy
        (
            const NXString & oldNameChain /** Name chain for rule to copy */,
            const NXString & oldLeafName /** Leaf name of rule to copy */,
            const NXString & newNameChain /** Name chain for copied rule */,
            const NXString & newLeafName /** Leaf name for copied rule */
        );
        /** Copy a dynamic child or attribute rule. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void Copy
        (
            const char * oldNameChain /** Name chain for rule to copy */,
            const char * oldLeafName /** Leaf name of rule to copy */,
            const char * newNameChain /** Name chain for copied rule */,
            const char * newLeafName /** Leaf name for copied rule */
        );
        /** Get the class of a dynamic rule.  @return  Class of rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetClass
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Get the class of a dynamic rule.  @return  Class of rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString GetClass
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Get the classes for the members of a child list rule.  @return  Classes for members of child list 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetClassesOfChildList
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Get the classes for the members of a child list rule.  @return  Classes for members of child list 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        std::vector<NXString> GetClassesOfChildList
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Get the rules that depend on the specified dynamic rule.  @return  Reference chains for dependent rules 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetDependents
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Get the rules that depend on the specified dynamic rule.  @return  Reference chains for dependent rules 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        std::vector<NXString> GetDependents
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Get the rules that the specified dynamic rule depends on.  @return  Reference chains for rules depending on the specified rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetDependencies
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Get the rules that the specified dynamic rule depends on.  @return  Reference chains for rules depending on the specified rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        std::vector<NXString> GetDependencies
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Get the type of a rule within a class.  @return  Data type required for this rule 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::RuleManager::RuleType GetRuleType
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Get the type of a rule within a class.  @return  Data type required for this rule 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXOpen::RuleManager::RuleType GetRuleType
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Get the data type of a dynamic rule.  @return  Data type of the rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::RuleManager::RuleType GetRuleType
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Get the data type of a dynamic rule.  @return  Data type of the rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXOpen::RuleManager::RuleType GetRuleType
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Get the type of a parameter in a dynamic child rule.  @return  Data type required for this rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::RuleManager::RuleType GetParameterType
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Get the type of a parameter in a dynamic child rule.  @return  Data type required for this rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXOpen::RuleManager::RuleType GetParameterType
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Returns whether a rule in a class is a child rule.  @return  True if the rule is a child rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsChildRule
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule in a class is a child rule.  @return  True if the rule is a child rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsChildRule
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a dynamic rule is a child rule.  @return  True if the rule is a child rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsChildRule
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Returns whether a dynamic rule is a child rule.  @return  True if the rule is a child rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsChildRule
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Returns whether a rule within a class is a child list rule.  @return  True if the rule is a child list rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsChildList
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is a child list rule.  @return  True if the rule is a child list rule 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsChildList
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a dynamic rule is a child list.  @return  True if the rule is a child list 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsChildList
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Returns whether a dynamic rule is a child list.  @return  True if the rule is a child list 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsChildList
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Returns whether a rule within a class is uncached.  @return  True if the rule is uncached 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsUncached
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is uncached.  @return  True if the rule is uncached 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsUncached
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a dynamic rule is uncached.  @return  True if the rule is uncached 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsUncached
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Returns whether a dynamic rule is uncached.  @return  True if the rule is uncached 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsUncached
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Returns whether a rule within a class is hidden.  @return  True if the rule is hidden 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsHidden
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is hidden.  @return  True if the rule is hidden 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsHidden
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a dynamic rule is hidden.  @return  True if the rule is hidden 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsHidden
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Returns whether a dynamic rule is hidden.  @return  True if the rule is hidden 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsHidden
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Returns whether a rule within a class is local to that class.  @return  True if the rule is local to the class 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsLocal
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is local to that class.  @return  True if the rule is local to the class 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsLocal
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is a parameter of that class.  @return  True if the rule is a parameter of the class 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsParameter
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is a parameter of that class.  @return  True if the rule is a parameter of the class 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsParameter
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is canonical.  @return  True if the rule is canonical 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsCanonical
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is canonical.  @return  True if the rule is canonical 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsCanonical
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is modifiable.  @return  True if the rule is modifiable 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsModifiable
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is modifiable.  @return  True if the rule is modifiable 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsModifiable
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a dynamic rule is modifiable.  @return  True if the rule is modifiable 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsModifiable
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Returns whether a dynamic rule is modifiable.  @return  True if the rule is modifiable 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsModifiable
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Returns whether a rule within a class is a method.  @return  True if the rule is a method 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsMethod
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether a rule within a class is a method.  @return  True if the rule is a method 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsMethod
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns whether a dynamic rule is a method.  @return  True if the rule is a method 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsMethod
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Returns whether a dynamic rule is a method.  @return  True if the rule is a method 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsMethod
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Returns whether a dynamic rule's value has been computed yet.  @return  True if the rule's value has been computed 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsComputed
        (
            const NXString & referenceChain /** Reference chain for rule */
        );
        /** Returns whether a dynamic rule's value has been computed yet.  @return  True if the rule's value has been computed 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsComputed
        (
            const char * referenceChain /** Reference chain for rule */
        );
        /** Rebuilds the KF Navigator tree and any Part Inspector trees that are being shown. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RebuildTrees
        (
        );
        /** Returns whether the rule is defined in the specified class.  @return  True if the rule is defined in the class 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsRuleInClass
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns whether the rule is defined in the specified class.  @return  True if the rule is defined in the class 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsRuleInClass
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Returns the default formula for a rule within a class . @return  The default formula for the rule 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetDefaultFormula
        (
            const NXString & className /** Class name */,
            const NXString & ruleName /** Rule name within the class */
        );
        /** Returns the default formula for a rule within a class . @return  The default formula for the rule 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString GetDefaultFormula
        (
            const char * className /** Class name */,
            const char * ruleName /** Rule name within the class */
        );
        /** Evaluate a rule and return its value as a string.  @return  Value of the rule formatted as a string 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString EvaluateAsString
        (
            const NXString & referenceChain /** Reference chain for the rule to evaluate */
        );
        /** Evaluate a rule and return its value as a string.  @return  Value of the rule formatted as a string 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString EvaluateAsString
        (
            const char * referenceChain /** Reference chain for the rule to evaluate */
        );
        /** Evaluate a rule and return its value as a string.  @return  Value of the rule formatted as a string 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString EvaluateAnyAsString
        (
            const NXString & referenceChain /** Reference chain for the rule to evaluate */
        );
        /** Evaluate a rule and return its value as a string.  @return  Value of the rule formatted as a string 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString EvaluateAnyAsString
        (
            const char * referenceChain /** Reference chain for the rule to evaluate */
        );
        /** Returns the name chain  @return  full name chain of the object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetNameChain
        (
            NXOpen::NXObject * ugObject /** object to find name chain  */
        );
        /** Regenerate all rules. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RegenerateAll
        (
        );
        /** Run the syntax check on a dfa file. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SyntaxCheck
        (
            const NXString & fileName /** dfa file to check */
        );
        /** Run the syntax check on a dfa file. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void SyntaxCheck
        (
            const char * fileName /** dfa file to check */
        );
        /** Get the ancestor classes for a given class.  @return  names of ancestor classes 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetAncestorClasses
        (
            const NXString & className /** class name for which to get component classes */
        );
        /** Get the ancestor classes for a given class.  @return  names of ancestor classes 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        std::vector<NXString> GetAncestorClasses
        (
            const char * className /** class name for which to get component classes */
        );
        /** Reload all classes and functions. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void Reload
        (
            bool refreshUserClassDir /** flag for whether to refresh search dirs after load */
        );
        /** Reload a single class. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void ReloadSingleClass
        (
            const NXString & className /** class name to reload */
        );
        /** Reload a single class. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void ReloadSingleClass
        (
            const char * className /** class name to reload */
        );
        /** Reload specified classes and functions. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void ReloadClassesAndFunctions
        (
            std::vector<NXString> & classes /** names of classes to reload */,
            std::vector<NXString> & functions /** names of functions to reload */
        );
        /** Get strings that describe the rule types.  @return  strings for rule types 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetRuleTypes
        (
        );
        /** Get class names that match the specified filter.  @return  class names 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetClasses
        (
            NXOpen::RuleManager::Filter filter /** filter for classes */
        );
        /** Get functions that match the specified filter.  @return  function names 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetFunctions
        (
            NXOpen::RuleManager::Filter filter /** filter for functions */,
            bool doSort /** TRUE to get the functions sorted alphabetically */
        );
        /** Remove all rules in the part. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveAllRules
        (
        );
        /** Read a dfa file and return its contents as a string.  @return  Contents of the file formatted as a string 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString ReadDfaFile
        (
            const NXString & fileName /** File name to read */
        );
        /** Read a dfa file and return its contents as a string.  @return  Contents of the file formatted as a string 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString ReadDfaFile
        (
            const char * fileName /** File name to read */
        );
        /** Write a string out to a dfa file. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void WriteDfaFile
        (
            const NXString & fileName /** File name to write */,
            const NXString & fileString /** String to write to file */,
            bool replace /** if TRUE, replace the file if it exists */
        );
        /** Write a string out to a dfa file. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        void WriteDfaFile
        (
            const char * fileName /** File name to write */,
            const char * fileString /** String to write to file */,
            bool replace /** if TRUE, replace the file if it exists */
        );
        /** Get the name of the dfa file that contains the specified class.  @return  File name that contains the class 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetClassDfaFile
        (
            const NXString & className /** Class name */
        );
        /** Get the name of the dfa file that contains the specified class.  @return  File name that contains the class 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString GetClassDfaFile
        (
            const char * className /** Class name */
        );
        /** Get messages for the most recent error.  @return  lines for error messages 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXString> GetLastError
        (
        );
        /** Get the text to use when referencing the specified ug object in a rule.  Note 
                that the rule text may reference the container object rather than the given 
                object.  For example, the rule text may reference the owning CSYS feature 
                rather than the given datum plane or datum axis.  If the rule text of the
                given object is desired then call @link RuleManager::GetObjectText RuleManager::GetObjectText@endlink .  @return  Reference text, either reference_chain or hostpointer text 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetReferenceText
        (
            NXOpen::NXObject * ugObject /** object to find reference text for */
        );
        /** Get the text to use when referencing the specified ug object in a rule.  @return  Object text, either reference_chain or hostpointer text 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetObjectText
        (
            NXOpen::NXObject * ugObject /** object to find object text for */
        );
        /** Adopt the specified ug objects.  @return  TRUE if update needs to be called 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool AdoptObjects
        (
            const std::vector<NXOpen::NXObject *> & ugObjects /** objects to adopt */
        );
        /** The list of object types which can be adopted.  @return  Object type data 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXOpen::RuleManager::AdoptableTypes> GetAdoptableTypes
        (
        );
        /** Adoption text for the specified ug objects.  @return  Output text for the objects 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetRulesForObjects
        (
            const std::vector<NXOpen::NXObject *> & ugObjects /** objects to adopt */
        );
        /** Get information about a function.  @return  Information about the function 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::RuleManager::FunctionInformation GetFunctionInformation
        (
            const NXString & functionName /** Function name */,
            const NXString & instanceOrClassName /** Instance or class name (used only for a method otherwise null or Nothing */,
            bool isInstance /** TRUE if instance name passed, FALSE otherwise */,
            bool briefOnly /** TRUE if returning brief information only */
        );
        /** Get information about a function.  @return  Information about the function 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXOpen::RuleManager::FunctionInformation GetFunctionInformation
        (
            const char * functionName /** Function name */,
            const char * instanceOrClassName /** Instance or class name (used only for a method otherwise null or Nothing */,
            bool isInstance /** TRUE if instance name passed, FALSE otherwise */,
            bool briefOnly /** TRUE if returning brief information only */
        );
        /** Get information about the arguments for a function.  @return  Information about the function arguments 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: std::vector<NXOpen::RuleManager::FunctionArgumentsInformation> GetFunctionArgumentsInformation
        (
            const NXString & functionName /** Function name */,
            const NXString & instanceOrClassName /** Instance or class name (used only for a method) */,
            bool isInstance /** TRUE if instance name passed, FALSE otherwise */,
            bool briefOnly /** TRUE if returning brief information only */
        );
        /** Get information about the arguments for a function.  @return  Information about the function arguments 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        std::vector<NXOpen::RuleManager::FunctionArgumentsInformation> GetFunctionArgumentsInformation
        (
            const char * functionName /** Function name */,
            const char * instanceOrClassName /** Instance or class name (used only for a method) */,
            bool isInstance /** TRUE if instance name passed, FALSE otherwise */,
            bool briefOnly /** TRUE if returning brief information only */
        );
        /** Get the file that contains the definitions for a function.  @return  File where the function is defined 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetFunctionFile
        (
            const NXString & functionName /** Function name */
        );
        /** Get the file that contains the definitions for a function.  @return  File where the function is defined 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString GetFunctionFile
        (
            const char * functionName /** Function name */
        );
        /** Determine whether a function is one defined by the user.  @return  True if the class is a user function 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsUserFunction
        (
            const NXString & functionName /** Function name */
        );
        /** Determine whether a function is one defined by the user.  @return  True if the class is a user function 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsUserFunction
        (
            const char * functionName /** Function name */
        );
        /** Determine whether a root level dynamic rule is mapped to an NX expression.  @return  True if the rule is an NX expression
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: bool IsExpressionRule
        (
            const NXString & ruleName /** Dynamic rule name */
        );
        /** Determine whether a root level dynamic rule is mapped to an NX expression.  @return  True if the rule is an NX expression
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        bool IsExpressionRule
        (
            const char * ruleName /** Dynamic rule name */
        );
        /** Returns the rule text for a dynamic rule . @return  The text of the rule 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXString GetDynamicRuleText
        (
            const NXString & referenceChain /** name chain for a dynamic rule */
        );
        /** Returns the rule text for a dynamic rule . @return  The text of the rule 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXString GetDynamicRuleText
        (
            const char * referenceChain /** name chain for a dynamic rule */
        );
        /**Returns  the debug update flag. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool DebugFlag
        (
        );
        /**Sets  the debug update flag. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SetDebugFlag
        (
            bool debugFlag /** debug flag */ 
        );
        /** Get the debug update instances. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void GetDebugInstances
        (
            std::vector<NXOpen::RuleManager::DebugInstance> & instances /** Array of instances */,
            std::vector<NXOpen::RuleManager::DebugRule> & rules /** Array of rules     */
        );
        /**Returns  the create mode flag. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: bool CreateMode
        (
        );
        /** Get the parse error start location.  @return  starting character pointer 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: int GetErrorStart
        (
        );
        /** Get the parse error end location.  @return  ending character pointer 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: int GetErrorEnd
        (
        );
        /** Get object of instance  @return  object of instance   
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::NXObject * GetObjectOfInstance
        (
            const NXString & nameChain /** Name chain of instance */
        );
        /** Get object of instance  @return  object of instance   
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        NXOpen::NXObject * GetObjectOfInstance
        (
            const char * nameChain /** Name chain of instance */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
