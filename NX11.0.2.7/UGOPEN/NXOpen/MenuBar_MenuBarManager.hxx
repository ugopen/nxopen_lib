#ifndef NXOpen_MENUBAR_MENUBARMANAGER_HXX_INCLUDED
#define NXOpen_MENUBAR_MENUBARMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MenuBar_MenuBarManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MenuBar_MenuButton.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopenuicpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MenuBar
    {
        class MenuBarManager;
    }
    class UI;
    namespace MenuBar
    {
        class ContextMenu;
    }
    namespace MenuBar
    {
        class ContextMenuProperties;
    }
    namespace MenuBar
    {
        class MenuButton;
    }
    namespace MenuBar
    {
        class MenuButtonEvent;
    }
    namespace MenuBar
    {
        class MenuBarManagerImpl;
        /** Interface for the MenuBarManager object  <br> To obtain an instance of this class, refer to @link NXOpen::UI  NXOpen::UI @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENUICPPEXPORT  MenuBarManager
        {
            /** Return values for action callbacks */
            public: enum CallbackStatus
            {
                CallbackStatusContinue/** Continue performing the menu item's actions. */,
                CallbackStatusCancel/** User interaction requested inhibiting the 
                                                                               menu item's actions. */,
                CallbackStatusOverrideStandard/** Inhibit further actions because a pre 
                                                                                          action took the place of the standard 
                                                                                          action for a standard NX menu item. */,
                CallbackStatusWarning/** Inhibit further actions because a 
                                                                                warning condition was raised. */,
                CallbackStatusError/** Inhibit further actions because a 
                                                                              error condition was raised. */
            };

            public: /** Prototype for the action callbacks 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback1<NXOpen::MenuBar::MenuBarManager::CallbackStatus, NXOpen::MenuBar::MenuButtonEvent *> ActionCallback;
            public: /** Prototype for application initialization callback 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> InitializeMenuApplication;
            public: /** Prototype for callback called whenever the application is entered 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> EnterMenuApplication;
            public: /** Prototype for callback called whenever the application is exited 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<int> ExitMenuApplication;
            public: /** Prototype for the callback used to configure a context menu. 
                    
                        Return 0 to indicate successful processing of the menu. Any other value will
                        be treated as an error condition.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<int, NXOpen::MenuBar::ContextMenu *, NXOpen::MenuBar::ContextMenuProperties *> ConfigureContextMenu;
            private: MenuBarManagerImpl * m_menubarmanager_impl;
            private: NXOpen::UI* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit MenuBarManager(NXOpen::UI *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~MenuBarManager();
            /** 
                      Adds the action callback.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void AddMenuAction
            (
                const NXString & name /** The name of the action.  This name must match the string used in the .men file. */,
                const NXOpen::MenuBar::MenuBarManager::ActionCallback&  actionCallback /** The method to execute for this action */
            );
            /** 
                      Adds the action callback.
                     
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void AddMenuAction
            (
                const char * name /** The name of the action.  This name must match the string used in the .men file. */,
                const NXOpen::MenuBar::MenuBarManager::ActionCallback&  actionCallback /** The method to execute for this action */
            );
            /** Finds the MenuButton associated with the given name  @return  The button associated with the given name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::MenuBar::MenuButton * GetButtonFromName
            (
                const NXString & name /** The name of the button.  This name must match the button name used in the .men file. */
            );
            /** Finds the MenuButton associated with the given name  @return  The button associated with the given name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::MenuBar::MenuButton * GetButtonFromName
            (
                const char * name /** The name of the button.  This name must match the button name used in the .men file. */
            );
            /** 
                      Registers the application
                      @return  Unique identifier for the registered application 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int RegisterApplication
            (
                const NXString & name /** The name of the application.  This name must match the string used in the .men file. */,
                const NXOpen::MenuBar::MenuBarManager::InitializeMenuApplication&  initializeCallback /** The method used to initialize the application */,
                const NXOpen::MenuBar::MenuBarManager::EnterMenuApplication&  enterCallback /** The method called when entering the application */,
                const NXOpen::MenuBar::MenuBarManager::ExitMenuApplication&  exitCallback /** The method called when exiting the application */,
                bool supportsDrawings /** Does this application support drawings? */,
                bool supportsDesignInContext /** Does this application support design in context? */,
                bool supportsUndo /** Does this application support undo? */
            );
            /** 
                      Registers the application
                      @return  Unique identifier for the registered application 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            int RegisterApplication
            (
                const char * name /** The name of the application.  This name must match the string used in the .men file. */,
                const NXOpen::MenuBar::MenuBarManager::InitializeMenuApplication&  initializeCallback /** The method used to initialize the application */,
                const NXOpen::MenuBar::MenuBarManager::EnterMenuApplication&  enterCallback /** The method called when entering the application */,
                const NXOpen::MenuBar::MenuBarManager::ExitMenuApplication&  exitCallback /** The method called when exiting the application */,
                bool supportsDrawings /** Does this application support drawings? */,
                bool supportsDesignInContext /** Does this application support design in context? */,
                bool supportsUndo /** Does this application support undo? */
            );
            /** Registers a request to switch to specified application and open the corresponding user environment.
                        When the running journal or program finishes, the system will attempt to switch into the target application.
                        The current application does not change immediately. The argument is an application button name as specified
                        and registered in the ug_main.men file. For example specify UG_APP_MODELING to try to enter the modeling application.
                        Button names registered for custom application as described in "Adding Custom Applications to NX" chapter of the NX Open
                        Programmer's Guide can also be used.
                    
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Session::ApplicationSwitchImmediate NXOpen::Session::ApplicationSwitchImmediate@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public:  NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Session::ApplicationSwitchImmediate instead.") void ApplicationSwitchRequest
            (
                const NXString & applicationName /** Button name of requested application */
            );
            /** Registers a request to switch to specified application and open the corresponding user environment.
                        When the running journal or program finishes, the system will attempt to switch into the target application.
                        The current application does not change immediately. The argument is an application button name as specified
                        and registered in the ug_main.men file. For example specify UG_APP_MODELING to try to enter the modeling application.
                        Button names registered for custom application as described in "Adding Custom Applications to NX" chapter of the NX Open
                        Programmer's Guide can also be used.
                    
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Session::ApplicationSwitchImmediate NXOpen::Session::ApplicationSwitchImmediate@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void ApplicationSwitchRequest
            (
                const char * applicationName /** Button name of requested application */
            );
            /** Registers a callback that is called whenever a customizable context
                        menu is about to be displayed. 

                        Each callback is registered with a short name and a longer
                        description which is used to identify the callback for debugging
                        purposes.
                     @return  Identifier of registered callback 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int RegisterConfigureContextMenuCallback
            (
                const NXString & name /** A short string identifying the callback */,
                const NXString & description /** A longer string describing the operation of the callback */,
                const NXOpen::MenuBar::MenuBarManager::ConfigureContextMenu&  configurePopupMenu /** Callback to register */
            );
            /** Registers a callback that is called whenever a customizable context
                        menu is about to be displayed. 

                        Each callback is registered with a short name and a longer
                        description which is used to identify the callback for debugging
                        purposes.
                     @return  Identifier of registered callback 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            int RegisterConfigureContextMenuCallback
            (
                const char * name /** A short string identifying the callback */,
                const char * description /** A longer string describing the operation of the callback */,
                const NXOpen::MenuBar::MenuBarManager::ConfigureContextMenu&  configurePopupMenu /** Callback to register */
            );
            /** Unregisters a callback for customizing context menus.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void UnregisterConfigureContextMenuCallback
            (
                int id /** Identifier for callback to unregister */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
