#ifndef NXOpen_ANNOTATIONS_BASESURFACEFINISHBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASESURFACEFINISHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseSurfaceFinishBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_PmiAttributeBuilder.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BaseSurfaceFinishBuilder;
    }
    namespace Annotations
    {
        class PmiAttributeBuilder;
    }
    namespace Annotations
    {
        class _BaseSurfaceFinishBuilderBuilder;
        class BaseSurfaceFinishBuilderImpl;
        /** Represents a @link NXOpen::Annotations::BaseSurfaceFinish NXOpen::Annotations::BaseSurfaceFinish@endlink  builder  <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BaseSurfaceFinishBuilder : public NXOpen::Annotations::PmiAttributeBuilder
        {
            /** the valid surface finish tolerance types */
            public: enum ToleranceOption
            {
                ToleranceOptionNone/** No tolerance */,
                ToleranceOptionEqualBilateral/** Equal bilateral */,
                ToleranceOptionBilateral/** Bilateral */,
                ToleranceOptionUnilateralPlus/** Unilateral plus */,
                ToleranceOptionUnilateralMinus/** Unilateral minus */,
                ToleranceOptionPlusLimitTwoLines/** Plus limit two lines */,
                ToleranceOptionMinusLimitTwoLines/** Minus limit two lines*/,
                ToleranceOptionPlusLimitOneLine/** Plus limit one line*/,
                ToleranceOptionMinusLimitOneLine/** Minus limit one line*/
            };

            /** the valid parantheses types. This enum is deprecated. 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link NXOpen::Annotations::BaseSurfaceFinishBuilder::ParenthesesType NXOpen::Annotations::BaseSurfaceFinishBuilder::ParenthesesType@endlink  instead. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX8.0.0.  Use NXOpen::Annotations::BaseSurfaceFinishBuilder::ParenthesesType instead.")  ParanthesesType
            {
                ParanthesesTypeNone/** None */,
                ParanthesesTypeLeft/** Left */,
                ParanthesesTypeRight/** Right */,
                ParanthesesTypeBoth/** Both */
            };

            /** the valid parentheses types */
            public: enum ParenthesesType
            {
                ParenthesesTypeNone/** None */,
                ParenthesesTypeLeft/** Left */,
                ParenthesesTypeRight/** Right */,
                ParenthesesTypeBoth/** Both */
            };

            private: BaseSurfaceFinishBuilderImpl * m_basesurfacefinishbuilder_impl;
            private: friend class  _BaseSurfaceFinishBuilderBuilder;
            protected: BaseSurfaceFinishBuilder();
            public: ~BaseSurfaceFinishBuilder();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
