#ifndef NXOpen_MOTION_TIREPROPERTYCDBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_TIREPROPERTYCDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_TirePropertyCdBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion_TirePropertyCdBuilder.hxx>
#include <NXOpen/Motion_TirePropertyBuilder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class TirePropertyCdBuilder;
    }
    class Expression;
    namespace Motion
    {
        class MotionFunction;
    }
    namespace Motion
    {
        class TirePropertyBuilder;
    }
    namespace Motion
    {
        class _TirePropertyCdBuilderBuilder;
        class TirePropertyCdBuilderImpl;
        /** Represents a @link Motion::TirePropertyCd Motion::TirePropertyCd@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Motion::TirePropertyCdCollection::CreateTirePropertyCdBuilder  NXOpen::Motion::TirePropertyCdCollection::CreateTirePropertyCdBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AmbientTempTypeSelection </td> <td> 
         
        TireParameterFile </td> </tr> 

        <tr><td> 
         
        AmbientTempValue.Value </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ContactLengthWidth </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ContactPointGlobal </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ContactPointRoadRef </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        CorrectorIter.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        EnergyLoss </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Inclination </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        InflationPressureTypeSelection </td> <td> 
         
        TireParameterFile </td> </tr> 

        <tr><td> 
         
        InflationPressureValue.Value </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        ModelTypeSelection </td> <td> 
         
        Cdt30 </td> </tr> 

        <tr><td> 
         
        RimRoadGlobal </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RimRoadTydexW </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RimTydexCH </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RoadGlobal </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SolverResults </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StaticHold </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        StaticRadius.Value </td> <td> 
         
        0.1 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        StaticVerticalStiffness.Value </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        <tr><td> 
         
        TimeStatistics </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WheelGlobal </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WheelRoadRef </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  TirePropertyCdBuilder : public NXOpen::Motion::TirePropertyBuilder
        {
            /** The Model type. 
                       See detailed documentation about each model type. */
            public: enum ModelType
            {
                ModelTypeCdt30/** cdt30 */ ,
                ModelTypeCdt30Hps/** cdt30hps */ ,
                ModelTypeCdt40/** cdt40 */ ,
                ModelTypeCdt50/** cdt50 */ 
            };

            /** The Inflation Pressure type.
                       Specifies how the tire pressure will be defined. 
                       If the TireParameterFile is selected, then the tire pressure is set in the selected tire parameter file.
                       If Constant is set, then the constant pressure is defined in the CD Tire dialog.
                       If Variable is selected, then the pressure is defined by a curve.
                       The pressure curve defines tire pressure as a function of simulation time.*/
            public: enum InflationPressureType
            {
                InflationPressureTypeTireParameterFile/** tire parameter file */ ,
                InflationPressureTypeConstant/** constant */ ,
                InflationPressureTypeFunction/** function */ 
            };

            /** The Ambient Temp type.
                       Specifies how the ambient temperature will be defined.
                       If TireParameterFile is selected, then the ambient temperature is set in the selected tire parameter file.
                       If Constant is set, then the ambient temperature is defined in the CD Tire dialog.
                       If Variable is selected, then the ambient temperature is defined by a curve.
                       The pressure curve defines ambient temperature as a function of simulation time.*/
            public: enum AmbientTempType
            {
                AmbientTempTypeTireParameterFile/** tire parameter file */ ,
                AmbientTempTypeConstant/** constant */ ,
                AmbientTempTypeFunction/** function */ 
            };

            private: TirePropertyCdBuilderImpl * m_tirepropertycdbuilder_impl;
            private: friend class  _TirePropertyCdBuilderBuilder;
            protected: TirePropertyCdBuilder();
            public: ~TirePropertyCdBuilder();
            /**Returns  the corrector iter 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CorrectorIter
            (
            );
            /**Returns  the model type selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::TirePropertyCdBuilder::ModelType ModelTypeSelection
            (
            );
            /**Sets  the model type selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetModelTypeSelection
            (
                NXOpen::Motion::TirePropertyCdBuilder::ModelType modelTypeSelection /** modeltypeselection */ 
            );
            /**Returns  the primary param file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PrimaryParamFile
            (
            );
            /**Sets  the primary param file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPrimaryParamFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the primary param file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetPrimaryParamFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the tire control file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TireControlFile
            (
            );
            /**Sets  the tire control file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTireControlFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the tire control file 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetTireControlFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the static radius 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticRadius
            (
            );
            /**Returns  the static vertical stiffness 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticVerticalStiffness
            (
            );
            /**Returns  the static hold 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool StaticHold
            (
            );
            /**Sets  the static hold 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticHold
            (
                bool staticHold /** statichold */ 
            );
            /**Returns  the inflation pressure type selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::TirePropertyCdBuilder::InflationPressureType InflationPressureTypeSelection
            (
            );
            /**Sets  the inflation pressure type selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInflationPressureTypeSelection
            (
                NXOpen::Motion::TirePropertyCdBuilder::InflationPressureType inflationPressureTypeSelection /** inflationpressuretypeselection */ 
            );
            /**Returns  the inflation value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InflationPressureValue
            (
            );
            /**Returns  the inflation pressure function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionFunction * InflationPressureFunction
            (
            );
            /**Sets  the inflation pressure function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInflationPressureFunction
            (
                NXOpen::Motion::MotionFunction * inflationPressureFunction /** inflationpressurefunction */ 
            );
            /**Returns  the ambient temp type selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::TirePropertyCdBuilder::AmbientTempType AmbientTempTypeSelection
            (
            );
            /**Sets  the ambient temp type selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAmbientTempTypeSelection
            (
                NXOpen::Motion::TirePropertyCdBuilder::AmbientTempType ambientTempTypeSelection /** ambienttemptypeselection */ 
            );
            /**Returns  the ambient temp value 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * AmbientTempValue
            (
            );
            /**Returns  the ambient temp function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::MotionFunction * AmbientTempFunction
            (
            );
            /**Sets  the ambient temp function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAmbientTempFunction
            (
                NXOpen::Motion::MotionFunction * ambientTempFunction /** ambienttempfunction */ 
            );
            /**Returns  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the rim road global 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RimRoadGlobal
            (
            );
            /**Sets  the rim road global 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRimRoadGlobal
            (
                bool rimRoadGlobal /** rimroadglobal */ 
            );
            /**Returns  the rim road tydex w 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RimRoadTydexW
            (
            );
            /**Sets  the rim road tydex w 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRimRoadTydexW
            (
                bool rimRoadTydexW /** rimroadtydexw */ 
            );
            /**Returns  the rim tydex ch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RimTydexCH
            (
            );
            /**Sets  the rim tydex ch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRimTydexCH
            (
                bool rimTydexCH /** rimtydexch */ 
            );
            /**Returns  the wheel global 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool WheelGlobal
            (
            );
            /**Sets  the wheel global 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetWheelGlobal
            (
                bool wheelGlobal /** wheelglobal */ 
            );
            /**Returns  the road global 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RoadGlobal
            (
            );
            /**Sets  the road global 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRoadGlobal
            (
                bool roadGlobal /** roadglobal */ 
            );
            /**Returns  the wheel road ref 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool WheelRoadRef
            (
            );
            /**Sets  the wheel road ref 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetWheelRoadRef
            (
                bool wheelRoadRef /** wheelroadref */ 
            );
            /**Returns  the contact point road ref 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContactPointRoadRef
            (
            );
            /**Sets  the contact point road ref 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactPointRoadRef
            (
                bool contactPointRoadRef /** contactpointroadref */ 
            );
            /**Returns  the contact point global 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContactPointGlobal
            (
            );
            /**Sets  the contact point global 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactPointGlobal
            (
                bool contactPointGlobal /** contactpointglobal */ 
            );
            /**Returns  the inclination 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Inclination
            (
            );
            /**Sets  the inclination 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInclination
            (
                bool inclination /** inclination */ 
            );
            /**Returns  the contact length width 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContactLengthWidth
            (
            );
            /**Sets  the contact length width 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactLengthWidth
            (
                bool contactLengthWidth /** contactlengthwidth */ 
            );
            /**Returns  the energy loss 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnergyLoss
            (
            );
            /**Sets  the energy loss 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnergyLoss
            (
                bool energyLoss /** energyloss */ 
            );
            /**Returns  the time statistics 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool TimeStatistics
            (
            );
            /**Sets  the time statistics 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetTimeStatistics
            (
                bool timeStatistics /** timestatistics */ 
            );
            /**Returns  the solver results 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool SolverResults
            (
            );
            /**Sets  the solver results 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSolverResults
            (
                bool solverResults /** solverresults */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
