#ifndef NXOpen_DRAWINGS_MARKASTEMPLATEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_MARKASTEMPLATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_MarkAsTemplateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_MarkAsTemplateBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class MarkAsTemplateBuilder;
    }
    class Builder;
    namespace Drawings
    {
        class _MarkAsTemplateBuilderBuilder;
        class MarkAsTemplateBuilderImpl;
        /**
            Represents a @link NXOpen::Drawings::MarkAsTemplateBuilder NXOpen::Drawings::MarkAsTemplateBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::DraftingManager::CreateMarkAsTemplateBuilder  NXOpen::DraftingManager::CreateMarkAsTemplateBuilder @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  MarkAsTemplateBuilder : public NXOpen::Builder
        {
            /** the template type enum. */
            public: enum TemplateTypeEnum
            {
                TemplateTypeEnumSheet/** sheet */ ,
                TemplateTypeEnumReferenceExistingPart/** reference existing part */ ,
                TemplateTypeEnumStandalone/** standalone */ 
            };

            /** the relation type enum. */
            public: enum RelationTypeEnum
            {
                RelationTypeEnumMaster/** master */ ,
                RelationTypeEnumSpecification/** specification */ ,
                RelationTypeEnumManifestation/** manifestation */ 
            };

            /** the item type enum. */
            public: enum ItemTypeEnum
            {
                ItemTypeEnumAny/** any */ ,
                ItemTypeEnumNXPart/** nxpart */ ,
                ItemTypeEnumNXDrawing/** nxdrawing */ 
            };

            /** the action type enum. */
            public: enum ActionTypeEnum
            {
                ActionTypeEnumTemplateOnly/** template only */ ,
                ActionTypeEnumTemplateAndPax/** template and pax */ 
            };

            private: MarkAsTemplateBuilderImpl * m_markastemplatebuilder_impl;
            private: friend class  _MarkAsTemplateBuilderBuilder;
            protected: MarkAsTemplateBuilder();
            public: ~MarkAsTemplateBuilder();
            /**Returns  the presentation name of the template that will be displayed in the File->New dialog.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PresentationName
            (
            );
            /**Sets  the presentation name of the template that will be displayed in the File->New dialog.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPresentationName
            (
                const NXString & presentationName /** presentationname */ 
            );
            /**Sets  the presentation name of the template that will be displayed in the File->New dialog.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetPresentationName
            (
                const char * presentationName /** presentationname */ 
            );
            /**Returns  the detailed description for each template. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );
            /**Sets  the detailed description for each template. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDescription
            (
                const NXString & description /** description */ 
            );
            /**Sets  the detailed description for each template. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetDescription
            (
                const char * description /** description */ 
            );
            /**Returns  the template Type will be one of the following:
                        Sheet
                        To save it as Sheet template. When using Sheet templates, NX adds drawing sheets based on the template to the current work part. 
                        Master Model Drawing
                        To save it as Master Model Drawing template. When using Master Model Drawing templates, NX create a new master model drawing from the current part. NX creates a new drawing part from the template and includes the current model as a component.
                        2D-Drawing
                        To save it as 2D Drawing template. These are the templates used for 2D-drawings. These templates do not require a master model
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::MarkAsTemplateBuilder::TemplateTypeEnum TemplateType
            (
            );
            /**Sets  the template Type will be one of the following:
                        Sheet
                        To save it as Sheet template. When using Sheet templates, NX adds drawing sheets based on the template to the current work part. 
                        Master Model Drawing
                        To save it as Master Model Drawing template. When using Master Model Drawing templates, NX create a new master model drawing from the current part. NX creates a new drawing part from the template and includes the current model as a component.
                        2D-Drawing
                        To save it as 2D Drawing template. These are the templates used for 2D-drawings. These templates do not require a master model
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTemplateType
            (
                NXOpen::Drawings::MarkAsTemplateBuilder::TemplateTypeEnum templateType /** templatetype */ 
            );
            /**Returns  the relation type is required only for the managed mode. The available options are
                        Master
                        Specification
                        Manifestation
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::MarkAsTemplateBuilder::RelationTypeEnum RelationType
            (
            );
            /**Sets  the relation type is required only for the managed mode. The available options are
                        Master
                        Specification
                        Manifestation
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetRelationType
            (
                NXOpen::Drawings::MarkAsTemplateBuilder::RelationTypeEnum relationType /** relationtype */ 
            );
            /**Returns  the item type of the part.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::MarkAsTemplateBuilder::ItemTypeEnum ItemType
            (
            );
            /**Sets  the item type of the part.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetItemType
            (
                NXOpen::Drawings::MarkAsTemplateBuilder::ItemTypeEnum itemType /** itemtype */ 
            );
            /**Returns  the PAX file to be updated or created if it does not exist. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PaxFileName
            (
            );
            /**Sets  the PAX file to be updated or created if it does not exist. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPaxFileName
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the PAX file to be updated or created if it does not exist. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetPaxFileName
            (
                const char * filename /** filename */ 
            );
            /**Returns  the action type of the part.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::MarkAsTemplateBuilder::ActionTypeEnum ActionType
            (
            );
            /**Sets  the action type of the part.
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetActionType
            (
                NXOpen::Drawings::MarkAsTemplateBuilder::ActionTypeEnum actionType /** actiontype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
