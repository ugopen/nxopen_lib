#ifndef NXOpen_DIE_HOLEPARENTBUILDER_HXX_INCLUDED
#define NXOpen_DIE_HOLEPARENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_HoleParentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Die.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class HoleParentBuilder;
    }
    namespace Die
    {
        class HoleChildBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Die
    {
        class _HoleParentBuilderBuilder;
        class HoleParentBuilderImpl;
        /** Represents a Die Hole Parent sub feature.  <br> This sub feature is created via the main feature builder.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  HoleParentBuilder : public NXOpen::Features::FeatureBuilder
        {
            private: HoleParentBuilderImpl * m_holeparentbuilder_impl;
            private: friend class  _HoleParentBuilderBuilder;
            protected: HoleParentBuilder();
            public: ~HoleParentBuilder();
            /**Sets  the diameter of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the diameter of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double Diameter
            (
            );
            /**Sets  the depth of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDepth
            (
                double depth /** depth */ 
            );
            /**Returns  the depth of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double Depth
            (
            );
            /**Sets  the counter bore diameter of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCounterBoreDiameter
            (
                double counterBoreDiameter /** counter bore diameter */ 
            );
            /**Returns  the counter bore diameter of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double CounterBoreDiameter
            (
            );
            /**Sets  the drop thru diameter of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDropThruDiameter
            (
                double dropThruDiameter /** drop thru diameter */ 
            );
            /**Returns  the drop thru diameter of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double DropThruDiameter
            (
            );
            /**Sets  the pad diameter of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPadDiameter
            (
                double padDiameter /** pad diameter */ 
            );
            /**Returns  the pad diameter of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double PadDiameter
            (
            );
            /**Sets  the pad height of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPadHeight
            (
                double padHeight /** pad height */ 
            );
            /**Returns  the pad height of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double PadHeight
            (
            );
            /**Sets  the plane offset of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPlaneOffset
            (
                double planeOffset /** plane offset */ 
            );
            /**Returns  the plane offset of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: double PlaneOffset
            (
            );
            /**Returns  the create with pad switch of die holes, if true a pad will be created around the holes, if false the pad will not be created. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool CreateWithPad
            (
            );
            /**Sets  the create with pad switch of die holes, if true a pad will be created around the holes, if false the pad will not be created. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetCreateWithPad
            (
                bool createWithPad /** create with pad */ 
            );
            /**Returns  the display holes switch of die holes, if true the holes will be built into the model, if false they will not. 
                    Note that this setting has the same affect as design status, unless the create with pad switch is true. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayHoles
            (
            );
            /**Sets  the display holes switch of die holes, if true the holes will be built into the model, if false they will not. 
                    Note that this setting has the same affect as design status, unless the create with pad switch is true. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayHoles
            (
                bool displayHoles /** display holes */ 
            );
            /** Gets the hole attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void GetHoleAttributes
            (
                NXString* title /** Title for attribute. */,
                NXString* value /** Value of attribute. */,
                int* color /** Color of hole faces. */,
                NXString* diameterTitle /** Title for diameter attribute. */,
                NXString* depthTitle /** Title for depth attribute. */,
                NXString* counterBoreDiameterTitle /** Title for counter bore diameter attribute. */
            );
            /** Sets the hole attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetHoleAttributes
            (
                const NXString & title /** Title for attribute. */,
                const NXString & value /** Value of attribute. */,
                int color /** Color of hole faces. */,
                const NXString & diameterTitle /** Title for diameter attribute. */,
                const NXString & depthTitle /** Title for depth attribute. */,
                const NXString & counterBoreDiameterTitle /** Title for counter bore diameter attribute. */
            );
            /** Sets the hole attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            void SetHoleAttributes
            (
                const char * title /** Title for attribute. */,
                const char * value /** Value of attribute. */,
                int color /** Color of hole faces. */,
                const char * diameterTitle /** Title for diameter attribute. */,
                const char * depthTitle /** Title for depth attribute. */,
                const char * counterBoreDiameterTitle /** Title for counter bore diameter attribute. */
            );
            /** Gets the pad attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void GetPadAttributes
            (
                NXString* title /** Title for attribute. */,
                NXString* value /** Value of attribute. */,
                int* color /** Color of pad faces. */
            );
            /** Sets the pad attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetPadAttributes
            (
                const NXString & title /** Title for attribute. */,
                const NXString & value /** Value of attribute. */,
                int color /** Color of pad faces. */
            );
            /** Sets the pad attributes, note existance of attributes depends on usage in
                    main feature. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            void SetPadAttributes
            (
                const char * title /** Title for attribute. */,
                const char * value /** Value of attribute. */,
                int color /** Color of pad faces. */
            );
            /**Sets  the design status of die holes, if true the holes will be built into the model, if false they will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDesignStatus
            (
                bool designStatus /** design status */ 
            );
            /**Returns  the design status of die holes, if true the holes will be built into the model, if false they will not. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool DesignStatus
            (
            );
            /**Returns  the build status of die holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBuildStatusOption BuildStatus
            (
            );
            /**Sets  the display status of die holes, if true input data to the holes will be displayed, 
                    if false the input data will not be displayed. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void SetDisplayStatus
            (
                bool displayStatus /** display status */ 
            );
            /**Returns  the display status of die holes, if true input data to the holes will be displayed, 
                    if false the input data will not be displayed. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: bool DisplayStatus
            (
            );
            /** Creates a child hole.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::HoleChildBuilder * CreateChild
            (
            );
            /** Deletes a child hole. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: void DeleteChild
            (
                NXOpen::Die::HoleChildBuilder * dieholechild /** dieholechild */ 
            );
            /** Outputs the child holes.  @return  The child holes. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: std::vector<NXOpen::Die::HoleChildBuilder *> GetChildren
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
