#ifndef NXOpen_FACET_FACETEDBODYCOLLECTION_HXX_INCLUDED
#define NXOpen_FACET_FACETEDBODYCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Facet_FacetedBodyCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Facet_BestFitAlignBuilder.hxx>
#include <NXOpen/Facet_BridgeFacetBodyBuilder.hxx>
#include <NXOpen/Facet_CurvatureBuilder.hxx>
#include <NXOpen/Facet_DecimateFacetBodyBuilder.hxx>
#include <NXOpen/Facet_ExtrudeFacetBodyBuilder.hxx>
#include <NXOpen/Facet_ExtrudeProfileBuilder.hxx>
#include <NXOpen/Facet_FeatureExtractionBuilder.hxx>
#include <NXOpen/Facet_FillHoleBuilder.hxx>
#include <NXOpen/Facet_MergeFacetBodyBuilder.hxx>
#include <NXOpen/Facet_MultiPatchAlignmentBuilder.hxx>
#include <NXOpen/Facet_STLImportBuilder.hxx>
#include <NXOpen/Facet_SewFacetBodyBuilder.hxx>
#include <NXOpen/Facet_SmoothFacetBodyBuilder.hxx>
#include <NXOpen/Facet_SnipFacetBodyBuilder.hxx>
#include <NXOpen/Facet_SubdivideFacetBodyBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_facet_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Facet
    {
        class FacetedBodyCollection;
    }
    class Part;
    namespace Facet
    {
        class FacetedBody;
    }
    class Body;
    class Face;
    namespace Facet
    {
        class BestFitAlignBuilder;
    }
    namespace Facet
    {
        class BridgeFacetBodyBuilder;
    }
    namespace Facet
    {
        class CurvatureBuilder;
    }
    namespace Facet
    {
        class DecimateFacetBodyBuilder;
    }
    namespace Facet
    {
        class ExtrudeFacetBodyBuilder;
    }
    namespace Facet
    {
        class ExtrudeProfileBuilder;
    }
    namespace Facet
    {
        class FacetModelingCollection;
    }
    namespace Facet
    {
        class FeatureExtractionBuilder;
    }
    namespace Facet
    {
        class FillHoleBuilder;
    }
    namespace Facet
    {
        class MergeFacetBodyBuilder;
    }
    namespace Facet
    {
        class MultiPatchAlignmentBuilder;
    }
    namespace Facet
    {
        class STLImportBuilder;
    }
    namespace Facet
    {
        class SewFacetBodyBuilder;
    }
    namespace Facet
    {
        class SmoothFacetBodyBuilder;
    }
    namespace Facet
    {
        class SnipFacetBodyBuilder;
    }
    namespace Facet
    {
        class SubdivideFacetBodyBuilder;
    }
    namespace Facet
    {
         /** The structure of JA faceting parameters */

        struct  FacetingParameters
        {
            public: /** The maximum number of edges allowed
                                                           in the facets that are to be generated 
                                                           (this does not apply to JT).
                                                        */int MaximumFacetEdges;
            public: /** If this value is true, then
                                                           values must be specified for
                                                           surfaceDistanceTolerance
                                                           and surfaceAngularTolerance. If
                                                           this value is false then values for
                                                           surfaceDistanceTolerance and
                                                           surfaceAngularTolerance will be
                                                           determined by the system based on the
                                                           body box or face box of the solid entity
                                                           being faceted.
                                                        */bool SpecifySurfaceTolerance;
            public: /** This is the maximum distance from
                                                           the surface to the facet.
                                                        */double SurfaceDistanceTolerance;
            public: /** This is the maximum angular variation
                                                           in radians of the surface normal
                                                           over the facet. A value of zero
                                                           indicates no constraint.
                                                        */double SurfaceAngularTolerance;
            public: /** This indicates that values are to be
                                                           specified for curveDistanceTolerance
                                                           and curveAngularTolerance and
                                                           curve_max_length.  If this value is false
                                                           then values for curveDistanceTolerance
                                                           and curveAngularTolerance will be
                                                           determined by the system based on the
                                                           body box or face box of the solid
                                                           entity being faceted, and no restriction
                                                           will be placed on the maximum length
                                                           of curve that can be represented
                                                           by a single facet edge.
                                                        */bool SpecifyCurveTolerance;
            public: /** This is the maximum distance between
                                                           the facet edge and the curve segment
                                                           represented by the facet edge. This
                                                           applies only to those facet edges lying
                                                           along solid edges.
                                                        */double CurveDistanceTolerance;
            public: /** This is the maximum angular variation
                                                           in radians of the curve tangent along
                                                           the curve segment represented by the
                                                           facet edge. This applies only to those
                                                           facet edges lying along solid edges.
                                                           A value of zero indicates no constraint.
                                                        */double CurveAngularTolerance;
            public: /** The maximum length of a curve, default is 1000.0 */double CurveMaximumLength;
            public: /** This indicates that the facets
                                                           generated by the faceter should all be
                                                           convex (this does not apply to JT).
                                                        */bool SpecifyConvexFacets;
            public: /** This indicates that a maximum width of
                                                           facet is to be specified using
                                                           maximumFacetSize. If this field is false
                                                           then no maximum facet size is imposed.
                                                        */bool SpecifyMaximumFacetSize;
            public: /** This is the maximum width of a facet.
                                                           This is only used if
                                                           specifyMaximumFacetSize is true.
                                                        */double MaximumFacetSize;
            public: /** This indicates that the model will be
                                                           created with the parametric information
                                                           for each vertex.  Should parameters at
                                                           the vertices be obtained for the facets
                                                           of the model (this does not apply to JT).
                                                        */bool SpecifyParameters;
            public: /** This indicates whether the real
                                                           numbers for facet vertices and facet
                                                           normals should be stored as floats
                                                           (UF_FACET_TYPE_FLOAT) or as doubles
                                                           (UF_FACET_TYPE_DOUBLE). Note that this
                                                           option applies only when a faceted model
                                                           is being created, and is ignored when the
                                                           model is updated. This option is not applicable
                                                           to JT creation or update.
                                                        */int NumberStorageType;
            public: /** Should we use a viewing direction
                                                           for denser faceting around
                                                           silhouettes.  The denser faceting will
                                                           honor the tolerance specified by
                                                           silhouetteChordTolerance in the silhouette
                                                           with respect to the view direction
                                                           specified by silhouetteViewDirection vector.
                                                           If this is false, there is no special
                                                           consideration for any silhouette area
                                                           (this does not apply to JT).
                                                        */bool SpecifyViewDirection;
            public: /** If specifyViewDirection is specified,
                                                           then this is the view direction to use
                                                           (this does not apply to JT).
                                                        */NXOpen::Vector3d SilhouetteViewDirection;
            public: /** If specifyViewDirection is specified
                                                           then this is the tolerance which will be
                                                           used as a tighter surface tolerance
                                                           in the silhouette area specified
                                                           by the view direction (this does not apply to JT).
                                                        */double SilhouetteChordTolerance;
            public: /** Should this FACET body record face tags or not 
                                                           (this does not apply to JT). 
                                                        */bool StoreFaceTag;
            public: /** When creating a JT facet body whether to create LODs or not 
                                                           (this does not apply to NX). 
                                                        */bool WithLODS;
            public: FacetingParameters() :
                MaximumFacetEdges(),
                SpecifySurfaceTolerance(),
                SurfaceDistanceTolerance(),
                SurfaceAngularTolerance(),
                SpecifyCurveTolerance(),
                CurveDistanceTolerance(),
                CurveAngularTolerance(),
                CurveMaximumLength(),
                SpecifyConvexFacets(),
                SpecifyMaximumFacetSize(),
                MaximumFacetSize(),
                SpecifyParameters(),
                NumberStorageType(),
                SpecifyViewDirection(),
                SilhouetteViewDirection(),
                SilhouetteChordTolerance(),
                StoreFaceTag(),
                WithLODS()
            {
            }
            /** Constructor for the FacetingParameters struct. */ 
            public: FacetingParameters(int maximumFacetEdgesInitial /** The maximum number of edges allowed
                                                                   in the facets that are to be generated 
                                                                   (this does not apply to JT).
                                                                */, 
                    bool specifySurfaceToleranceInitial /** If this value is true, then
                                                                   values must be specified for
                                                                   surfaceDistanceTolerance
                                                                   and surfaceAngularTolerance. If
                                                                   this value is false then values for
                                                                   surfaceDistanceTolerance and
                                                                   surfaceAngularTolerance will be
                                                                   determined by the system based on the
                                                                   body box or face box of the solid entity
                                                                   being faceted.
                                                                */, 
                    double surfaceDistanceToleranceInitial /** This is the maximum distance from
                                                                   the surface to the facet.
                                                                */, 
                    double surfaceAngularToleranceInitial /** This is the maximum angular variation
                                                                   in radians of the surface normal
                                                                   over the facet. A value of zero
                                                                   indicates no constraint.
                                                                */, 
                    bool specifyCurveToleranceInitial /** This indicates that values are to be
                                                                   specified for curveDistanceTolerance
                                                                   and curveAngularTolerance and
                                                                   curve_max_length.  If this value is false
                                                                   then values for curveDistanceTolerance
                                                                   and curveAngularTolerance will be
                                                                   determined by the system based on the
                                                                   body box or face box of the solid
                                                                   entity being faceted, and no restriction
                                                                   will be placed on the maximum length
                                                                   of curve that can be represented
                                                                   by a single facet edge.
                                                                */, 
                    double curveDistanceToleranceInitial /** This is the maximum distance between
                                                                   the facet edge and the curve segment
                                                                   represented by the facet edge. This
                                                                   applies only to those facet edges lying
                                                                   along solid edges.
                                                                */, 
                    double curveAngularToleranceInitial /** This is the maximum angular variation
                                                                   in radians of the curve tangent along
                                                                   the curve segment represented by the
                                                                   facet edge. This applies only to those
                                                                   facet edges lying along solid edges.
                                                                   A value of zero indicates no constraint.
                                                                */, 
                    double curveMaximumLengthInitial /** The maximum length of a curve, default is 1000.0 */, 
                    bool specifyConvexFacetsInitial /** This indicates that the facets
                                                                   generated by the faceter should all be
                                                                   convex (this does not apply to JT).
                                                                */, 
                    bool specifyMaximumFacetSizeInitial /** This indicates that a maximum width of
                                                                   facet is to be specified using
                                                                   maximumFacetSize. If this field is false
                                                                   then no maximum facet size is imposed.
                                                                */, 
                    double maximumFacetSizeInitial /** This is the maximum width of a facet.
                                                                   This is only used if
                                                                   specifyMaximumFacetSize is true.
                                                                */, 
                    bool specifyParametersInitial /** This indicates that the model will be
                                                                   created with the parametric information
                                                                   for each vertex.  Should parameters at
                                                                   the vertices be obtained for the facets
                                                                   of the model (this does not apply to JT).
                                                                */, 
                    int numberStorageTypeInitial /** This indicates whether the real
                                                                   numbers for facet vertices and facet
                                                                   normals should be stored as floats
                                                                   (UF_FACET_TYPE_FLOAT) or as doubles
                                                                   (UF_FACET_TYPE_DOUBLE). Note that this
                                                                   option applies only when a faceted model
                                                                   is being created, and is ignored when the
                                                                   model is updated. This option is not applicable
                                                                   to JT creation or update.
                                                                */, 
                    bool specifyViewDirectionInitial /** Should we use a viewing direction
                                                                   for denser faceting around
                                                                   silhouettes.  The denser faceting will
                                                                   honor the tolerance specified by
                                                                   silhouetteChordTolerance in the silhouette
                                                                   with respect to the view direction
                                                                   specified by silhouetteViewDirection vector.
                                                                   If this is false, there is no special
                                                                   consideration for any silhouette area
                                                                   (this does not apply to JT).
                                                                */, 
                    const NXOpen::Vector3d &silhouetteViewDirectionInitial /** If specifyViewDirection is specified,
                                                                   then this is the view direction to use
                                                                   (this does not apply to JT).
                                                                */, 
                    double silhouetteChordToleranceInitial /** If specifyViewDirection is specified
                                                                   then this is the tolerance which will be
                                                                   used as a tighter surface tolerance
                                                                   in the silhouette area specified
                                                                   by the view direction (this does not apply to JT).
                                                                */, 
                    bool storeFaceTagInitial /** Should this FACET body record face tags or not 
                                                                   (this does not apply to JT). 
                                                                */, 
                    bool withLODSInitial /** When creating a JT facet body whether to create LODs or not 
                                                                   (this does not apply to NX). 
                                                                */) :
                MaximumFacetEdges(maximumFacetEdgesInitial),
                SpecifySurfaceTolerance(specifySurfaceToleranceInitial),
                SurfaceDistanceTolerance(surfaceDistanceToleranceInitial),
                SurfaceAngularTolerance(surfaceAngularToleranceInitial),
                SpecifyCurveTolerance(specifyCurveToleranceInitial),
                CurveDistanceTolerance(curveDistanceToleranceInitial),
                CurveAngularTolerance(curveAngularToleranceInitial),
                CurveMaximumLength(curveMaximumLengthInitial),
                SpecifyConvexFacets(specifyConvexFacetsInitial),
                SpecifyMaximumFacetSize(specifyMaximumFacetSizeInitial),
                MaximumFacetSize(maximumFacetSizeInitial),
                SpecifyParameters(specifyParametersInitial),
                NumberStorageType(numberStorageTypeInitial),
                SpecifyViewDirection(specifyViewDirectionInitial),
                SilhouetteViewDirection(silhouetteViewDirectionInitial),
                SilhouetteChordTolerance(silhouetteChordToleranceInitial),
                StoreFaceTag(storeFaceTagInitial),
                WithLODS(withLODSInitial)
            {
            }
        };

    }
    namespace Facet
    {
        class FacetedBodyCollectionImpl;
        /** Represents a collection of faceted bodies in a part  <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FACETEXPORT  FacetedBodyCollection : public NXOpen::TaggedObjectCollection
        {
            /** Specifies the type of facets created when copying or converting faceted bodies */
            public: enum Type
            {
                TypeNx/** NX facet */,
                TypeJt/** JT facet */
            };

            private: FacetedBodyCollectionImpl * m_facetedbodycollection_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit FacetedBodyCollection(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~FacetedBodyCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Facet::FacetedBodyCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Facet::FacetedBody *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Facet::FacetedBodyCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_FACETEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_FACETEXPORT  void next();
                NXOpen::Facet::FacetedBodyCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link  NXOpen::Facet::FacetedBody   NXOpen::Facet::FacetedBody @endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.

                        An exception will be thrown if no object can be found with the given journal identifier.  @return  Faceted body with this identifier 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::FacetedBody * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the faceted body you want */
            );
            /** Finds the @link  NXOpen::Facet::FacetedBody   NXOpen::Facet::FacetedBody @endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.

                        An exception will be thrown if no object can be found with the given journal identifier.  @return  Faceted body with this identifier 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Facet::FacetedBody * FindObject
            (
                const char * journalIdentifier /** Identifier of the faceted body you want */
            );
            /** Create a @link NXOpen::Facet::CurvatureBuilder NXOpen::Facet::CurvatureBuilder@endlink  object.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::CurvatureBuilder * CreateFacetCurvatureBuilder
            (
            );
            /** Create a @link NXOpen::Facet::FeatureExtractionBuilder NXOpen::Facet::FeatureExtractionBuilder@endlink  object.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Facet::FeatureExtractionBuilder * CreateFacetFeatureExtractionBuilder
            (
            );
            /** Converts the internal representation of this faceted body to the specified type. This does not create a new body 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void Convert
            (
                NXOpen::Facet::FacetedBody * fromBody /** The faceted body to convert */,
                NXOpen::Facet::FacetedBodyCollection::Type toFacetType /** To facet type */
            );
            /** Copies a faceted body and optionally changes the internal representation to the given type
                         (This is only valid for JT to NX copy) 
                      @return  New body 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::FacetedBody * Copy
            (
                NXOpen::Facet::FacetedBody * fromBody /** The faceted body to copy */,
                NXOpen::Part * toPart /** Part to create the copy in */,
                NXOpen::Facet::FacetedBodyCollection::Type toFacetType /** To facet type */
            );
            /** Returns the loaded solid bodies associated with the argument faceted body.
                        Also returns the number of unloaded associated faceted bodies.
                     @return  Array of loaded associated faceted bodies 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Facet::FacetedBody *> GetAssociatedFacetedBodies
            (
                NXOpen::Body * solidBody /** The body for which to get associated faceted bodies */,
                int* numberOfUnloadedFacetedBodies /** The number of unloaded associated faceted bodies for this solids body */
            );
            /** Delete any temporary faces and edges on faceted bodies that may have been created 
                        in the specified part.  Please note that this call will invoke an Update operation.
                    
             <br>  Created in NX5.0.2.  <br>  
             <br> License requirements : None */
            public: void DeleteTemporaryFacesAndEdges
            (
            );
            /** Creates a @link NXOpen::Facet::BestFitAlignBuilder NXOpen::Facet::BestFitAlignBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Facet::BestFitAlignBuilder * CreateBestFitAlignBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::FillHoleBuilder NXOpen::Facet::FillHoleBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::FillHoleBuilder * CreateFillHoleBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::STLImportBuilder NXOpen::Facet::STLImportBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Facet::STLImportBuilder * CreateSTLImportBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::DecimateFacetBodyBuilder NXOpen::Facet::DecimateFacetBodyBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Facet::DecimateFacetBodyBuilder * CreateDecimateFacetBodyBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::MultiPatchAlignmentBuilder NXOpen::Facet::MultiPatchAlignmentBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Facet::MultiPatchAlignmentBuilder * CreateMultiPatchAlignmentBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::SubdivideFacetBodyBuilder NXOpen::Facet::SubdivideFacetBodyBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Facet::SubdivideFacetBodyBuilder * CreateSubdivideFacetBodyBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::SmoothFacetBodyBuilder NXOpen::Facet::SmoothFacetBodyBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Facet::SmoothFacetBodyBuilder * CreateSmoothFacetBodyBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::SnipFacetBodyBuilder NXOpen::Facet::SnipFacetBodyBuilder@endlink   @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::SnipFacetBodyBuilder * CreateSnipFacetBodyBuilder
            (
            );
            /** Creates a JT @link NXOpen::Facet::FacetedBody NXOpen::Facet::FacetedBody@endlink  using the default faceting tolerances. 
                        The output facetBodies and errorTable arrays are the same size as the input nSolidBodies. 
                        The errorTable array provides information about any errors encountered when faceting bodies. 
                        Note that it is possible that faceted bodies with 0 facets are created (and returned in the facetBodies parameter). 
                        For this case, the errorTable will contain the UF_FACET_err_zero_facets_produced error. 
                        If there is an existing facet body it will get refaceted with the previous tolerance used to tessellate it .
                        See @link NXOpen::Body::GetFacetedBody NXOpen::Body::GetFacetedBody@endlink  for ways to check for this situation.
                    
             <br>  Created in NX7.5.5.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void CreateFacetBody
            (
                const std::vector<NXOpen::Body *> & solidBodies /** solidbodies */ ,
                std::vector<NXOpen::Facet::FacetedBody *> & facetBodies /** facetbodies */ ,
                std::vector<int> & errorTable /** errortable */ 
            );
            /** Creates a JT @link NXOpen::Facet::FacetedBody NXOpen::Facet::FacetedBody@endlink  using the default faceting tolerances. 
                        The output facetBodies and errorTable arrays are the same size as the input nSolidFaces. 
                        The errorTable array provides information about any errors encountered when faceting bodies. 
                        Note that it is possible that faceted bodies with 0 facets are created (and returned in the facetBodies parameter). 
                        For this case, the errorTable will contain the UF_FACET_err_zero_facets_produced error. 
                        If there is an existing facet body it will get refaceted with the previous tolerance used to tessellate it .
                        See @link NXOpen::Body::GetFacetedBody NXOpen::Body::GetFacetedBody@endlink  for ways to check for this situation.
                    
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: void CreateFacetBodyFromFaces
            (
                const std::vector<NXOpen::Face *> & solidFaces /** solidfaces */ ,
                std::vector<NXOpen::Facet::FacetedBody *> & facetBodies /** facetbodies */ ,
                std::vector<int> & errorTable /** errortable */ 
            );
            /** Creates a @link NXOpen::Facet::ExtrudeFacetBodyBuilder NXOpen::Facet::ExtrudeFacetBodyBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") OR die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Facet::ExtrudeFacetBodyBuilder * CreateExtrudeFacetBodyBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::ExtrudeProfileBuilder NXOpen::Facet::ExtrudeProfileBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") OR die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Facet::ExtrudeProfileBuilder * CreateExtrudeProfileBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::MergeFacetBodyBuilder NXOpen::Facet::MergeFacetBodyBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") OR die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Facet::MergeFacetBodyBuilder * CreateMergeFacetBodyBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::BridgeFacetBodyBuilder NXOpen::Facet::BridgeFacetBodyBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") OR die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Facet::BridgeFacetBodyBuilder * CreateBridgeFacetBodyBuilder
            (
            );
            /** Creates a @link NXOpen::Facet::SewFacetBodyBuilder NXOpen::Facet::SewFacetBodyBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") OR die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Facet::SewFacetBodyBuilder * CreateSewFacetBodyBuilder
            (
            );


            /** Returns the FacetModelingCollection instance belonging to this part 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::Facet::FacetModelingCollection *FacetModelingCollection();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
