#ifndef NXOpen_ANNOTATIONS_REPLACESYMBOLBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_REPLACESYMBOLBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_ReplaceSymbolBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_ReplaceSymbolBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class ReplaceSymbolBuilder;
    }
    namespace Annotations
    {
        class SelectBaseCustomSymbolList;
    }
    class Builder;
    namespace Annotations
    {
        class _ReplaceSymbolBuilderBuilder;
        class ReplaceSymbolBuilderImpl;
        /** Represents a Builder for Replace Custom Symbol functionality  <br> To create a new instance of this class, use @link NXOpen::Annotations::CustomSymbolCollection::CreateReplaceSymbolBuilder  NXOpen::Annotations::CustomSymbolCollection::CreateReplaceSymbolBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ReplaceAll </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.1.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  ReplaceSymbolBuilder : public NXOpen::Builder
        {
            private: ReplaceSymbolBuilderImpl * m_replacesymbolbuilder_impl;
            private: friend class  _ReplaceSymbolBuilderBuilder;
            protected: ReplaceSymbolBuilder();
            public: ~ReplaceSymbolBuilder();
            /**Returns  the symbol 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::SelectBaseCustomSymbolList * Symbol
            (
            );
            /**Returns  the flag indicating whether to replace all instances of selected symbols 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool ReplaceAll
            (
            );
            /**Sets  the flag indicating whether to replace all instances of selected symbols 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetReplaceAll
            (
                bool replaceAll /** replaceall */ 
            );
            /**Returns  the symbol path 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXString SymbolPath
            (
            );
            /**Sets  the symbol path 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSymbolPath
            (
                const NXString & symbolPath /** symbolpath */ 
            );
            /**Sets  the symbol path 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetSymbolPath
            (
                const char * symbolPath /** symbolpath */ 
            );
            /**Returns  the symbol name 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXString SymbolName
            (
            );
            /**Sets  the symbol name 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSymbolName
            (
                const NXString & symbolName /** symbolname */ 
            );
            /**Sets  the symbol name 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetSymbolName
            (
                const char * symbolName /** symbolname */ 
            );
            /**Returns  the flag indicating whether the selected symbol is part symbol 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsPartSymbol
            (
            );
            /**Sets  the flag indicating whether the selected symbol is part symbol 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPartSymbol
            (
                bool isPartSymbol /** ispartsymbol */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
