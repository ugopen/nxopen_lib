#ifndef NXOpen_CAE_MODELCHECK_DUPLICATENODESCHECKBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELCHECK_DUPLICATENODESCHECKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelCheck_DuplicateNodesCheckBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ModelCheckDataTypes.hxx>
#include <NXOpen/CAE_ModelCheck_DuplicateNodesCheckBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/CAE_ModelCheck_ISelectionBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace ModelCheck
        {
            class DuplicateNodesCheckBuilder;
        }
    }
    class Builder;
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        namespace ModelCheck
        {
            class ISelectionBuilder;
        }
    }
    namespace CAE
    {
        class SelectFENodeList;
    }
    class Expression;
    class NXColor;
    class SelectTaggedObjectList;
    namespace CAE
    {
        namespace ModelCheck
        {
            class _DuplicateNodesCheckBuilderBuilder;
            class DuplicateNodesCheckBuilderImpl;
            /** Represents a @link NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder@endlink 
                        to check for duplicate nodes within the candidate nodes.
                         <br> 
                        Duplicate nodes are nodes which distance between each other is less than
                        specific tolerance value and at least one duplicate node can be merged away.
                         <br> 
                        The general workflow is:
                        <ol>
                        <li> Set the candidate nodes </li>
                        <li> Set the check settings and display settings data </li>
                        <li> Identify the duplicate nodes </li>
                        <li> Set the preference option </li>
                        <li> Merge duplicate nodes </li>
                        </ol>
                        You can merge duplicate nodes through @link Builder::Commit Builder::Commit@endlink  or
                        @link NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::MergeDuplicateNodes NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::MergeDuplicateNodes@endlink .
                        Commits the builder to merge duplicate nodes and update the mesh in graphic window.
                     <br> To create a new instance of this class, use @link NXOpen::CAE::ModelCheckManager::CreateDuplicateNodesCheckBuilder  NXOpen::CAE::ModelCheckManager::CreateDuplicateNodesCheckBuilder @endlink  <br> 
             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  DuplicateNodesCheckBuilder : public NXOpen::Builder, public virtual NXOpen::CAE::ModelCheck::ISelectionBuilder
            {
                /** Represents the duplicate nodes merging preference */
                public: enum MergePreference
                {
                    MergePreferenceNone/** No preference */,
                    MergePreferenceKeepHighLabel/** Keep the nodes with higher labels */,
                    MergePreferenceKeepLowLabel/** Keep the nodes with lower labels */,
                    MergePreferenceKeepSelected/** Keep the nodes specified in the node list
                                                                                                             @link NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::SelectPreferenceNodesList NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::SelectPreferenceNodesList@endlink  */,
                    MergePreferenceRemoveSelected/** Merge the nodes specified in the node list
                                                                                                             @link NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::SelectPreferenceNodesList NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::SelectPreferenceNodesList@endlink  */
                };

                /** Represents the duplicate nodes merging preference */
                public: enum ListOption
                {
                    ListOptionAll/** List all duplicate node pairs found */,
                    ListOptionMergeable/** List the duplicate node pairs mergeable */,
                    ListOptionUnmergeable/** List the duplicate node pairs unmergeable */
                };

                 /** Represents the display settings data */
                public:
                struct  DisplaySettings
                {
                    public: /** Whether to show duplicate nodes */bool ShowDuplicateNodes;
                    public: /** Whether to show merged node labels */bool ShowMergedNodeLabels;
                    public: /** Whether to show retained node labels */bool ShowRetainedNodeLabels;
                    public: /** The kept nodes display color */NXColor* KeepNodesColor;
                    public: /** The merged nodes display color */NXColor* MergeNodesColor;
                    public: /** unabletomergenodescolor */ NXColor* UnableToMergeNodesColor;
                    public: DisplaySettings() :
                        ShowDuplicateNodes(),
                        ShowMergedNodeLabels(),
                        ShowRetainedNodeLabels(),
                        KeepNodesColor(),
                        MergeNodesColor(),
                        UnableToMergeNodesColor()
                    {
                    }
                    /** Constructor for the DisplaySettings struct. */ 
                    public: DisplaySettings(bool showDuplicateNodesInitial /** Whether to show duplicate nodes */, 
                            bool showMergedNodeLabelsInitial /** Whether to show merged node labels */, 
                            bool showRetainedNodeLabelsInitial /** Whether to show retained node labels */, 
                            NXColor* keepNodesColorInitial /** The kept nodes display color */, 
                            NXColor* mergeNodesColorInitial /** The merged nodes display color */, 
                            NXColor* unableToMergeNodesColorInitial /** unabletomergenodescolor */ ) :
                        ShowDuplicateNodes(showDuplicateNodesInitial),
                        ShowMergedNodeLabels(showMergedNodeLabelsInitial),
                        ShowRetainedNodeLabels(showRetainedNodeLabelsInitial),
                        KeepNodesColor(keepNodesColorInitial),
                        MergeNodesColor(mergeNodesColorInitial),
                        UnableToMergeNodesColor(unableToMergeNodesColorInitial)
                    {
                    }
                };

                private: DuplicateNodesCheckBuilderImpl * m_duplicatenodescheckbuilder_impl;
                private: friend class  _DuplicateNodesCheckBuilderBuilder;
                protected: DuplicateNodesCheckBuilder();
                public: ~DuplicateNodesCheckBuilder();
                /**Returns  the selected objects for checking. The objects must be @link NXOpen::CAE::Mesh NXOpen::CAE::Mesh@endlink  or
                                @link NXOpen::CAE::FENode NXOpen::CAE::FENode@endlink  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObjectList * SelectionList
                (
                );
                /**Returns  the tolerance used to determine if the nodes are duplicates of each other 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Tolerance
                (
                );
                /**Returns  a value indicating whether to ignore nodes in same mesh 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool IgnoreNodesInSameMesh
                (
                );
                /**Sets  a value indicating whether to ignore nodes in same mesh 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetIgnoreNodesInSameMesh
                (
                    bool ignoreSameMeshNodes /** ignoresamemeshnodes */ 
                );
                /**Returns  a value indicating whether to ignore nodes connected to tiny edges 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool IgnoreNodesConnectedToTinyEdges
                (
                );
                /**Sets  a value indicating whether to ignore nodes connected to tiny edges 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetIgnoreNodesConnectedToTinyEdges
                (
                    bool ignoreTinyEdgeNodes /** ignoretinyedgenodes */ 
                );
                /**Returns  a value indicating whether to merge occurrence nodes in afem context 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool MergeOccurrenceNodes
                (
                );
                /**Sets  a value indicating whether to merge occurrence nodes in afem context 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetMergeOccurrenceNodes
                (
                    bool mergeOccurrenceNodes /** mergeoccurrencenodes */ 
                );
                /**Returns  an option indicating what information to be listed 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::ListOption ListingType
                (
                );
                /**Sets  an option indicating what information to be listed 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetListingType
                (
                    NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::ListOption listOption /** listoption */ 
                );
                /**Returns  the display settings for duplicate nodes 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::DisplaySettings DisplaySettingsData
                (
                );
                /**Sets  the display settings for duplicate nodes 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void SetDisplaySettingsData
                (
                    const NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::DisplaySettings & displaySettings /** Display settings data */
                );
                /** Calculates to find the duplicate nodes and display them in
                                @link NXOpen::CAE::ModelCheck::DuplicateElementsCheckBuilder::DisplaySettings NXOpen::CAE::ModelCheck::DuplicateElementsCheckBuilder::DisplaySettings@endlink .
                                The detected duplicate nodes are cached, to access the cached calculation result, you could use
                                @link NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::DuplicateNodeGroupsCount NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::DuplicateNodeGroupsCount@endlink  and
                                @link NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::GetDuplicateNodes NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::GetDuplicateNodes@endlink . The previous
                                cached data will be cleaned automatically when you start a new identification. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: void IdentifyDuplicateNodes
                (
                );
                /**Returns  the duplicate nodes group count, each group contains nodes that are
                                duplicates of each other and each group contains at least two duplicate nodes 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: int DuplicateNodeGroupsCount
                (
                );
                /** Returns the duplicate nodes of specified group index  @return  
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
                public: std::vector<NXOpen::CAE::FENode *> GetDuplicateNodes
                (
                    int groupIndex /** groupindex */ 
                );
                /**Returns  the duplicate nodes merging preference 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::MergePreference Preference
                (
                );
                /**Sets  the duplicate nodes merging preference 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void SetPreference
                (
                    NXOpen::CAE::ModelCheck::DuplicateNodesCheckBuilder::MergePreference mergePreference /** Merge nodes preference */
                );
                /**Returns  the preference nodes select list for keep selected and remove selected options 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: NXOpen::CAE::SelectFENodeList * SelectPreferenceNodesList
                (
                );
                /** Merges the duplicate nodes and clear all cached duplicate nodes in this builder.
                                The method @link Builder::Commit Builder::Commit@endlink  will also do the same thing. Duplicate nodes
                                can only be merged when the context part of this builder is a @link NXOpen::CAE::BaseFemPart NXOpen::CAE::BaseFemPart@endlink . 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: void MergeDuplicateNodes
                (
                );
                /**Returns  the check scope setting 
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::ModelCheck::CheckScope CheckScopeOption
                (
                );
                /**Sets  the check scope setting 
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: virtual void SetCheckScopeOption
                (
                    NXOpen::CAE::ModelCheck::CheckScope scope /** scope */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
