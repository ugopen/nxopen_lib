#ifndef NXOpen_CAM_INSPECTIONMEASDATABUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONMEASDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionMeasDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionMeasDataBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionMeasDataBuilder;
    }
    class Builder;
    class NXObject;
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionMeasDataBuilderBuilder;
        class InspectionMeasDataBuilderImpl;
        /** Inspection Measured Data dialog builder  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionMeasDataBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionMeasDataBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionMeasDataBuilder : public NXOpen::Builder
        {
            /** Transform Display Types */
            public: enum DisplayTransformTypes
            {
                DisplayTransformTypesDesignDRF/** Design DRF */,
                DisplayTransformTypesActualDRF/** Actual DRF */,
                DisplayTransformTypesOuterProfile/** Outer Profile */,
                DisplayTransformTypesInnerProfile/** Inner Profile */
            };

            /** Measured Data Input File Format Types */
            public: enum InputFormatType
            {
                InputFormatTypeMea/** Measured data format */,
                InputFormatTypeDml/** Dimensional Markup Language */,
                InputFormatTypeCsv/** Comma separated */,
                InputFormatTypePoints/** NX points */
            };

            /** Hole/Pin Matching Mode */
            public: enum BoundingType
            {
                BoundingTypeBounded/** bounded */ ,
                BoundingTypeUnbounded/** unbounded */ 
            };

            private: InspectionMeasDataBuilderImpl * m_inspectionmeasdatabuilder_impl;
            private: friend class  _InspectionMeasDataBuilderBuilder;
            protected: InspectionMeasDataBuilder();
            public: ~InspectionMeasDataBuilder();
            /**Returns  the measured data file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString MeaFile
            (
            );
            /**Sets  the measured data file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMeaFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the measured data file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetMeaFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the name of the PCS to use when transforming data being loaded 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString PcsName
            (
            );
            /**Sets  the name of the PCS to use when transforming data being loaded 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPcsName
            (
                const NXString & pcsName /** pcsname */ 
            );
            /**Sets  the name of the PCS to use when transforming data being loaded 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetPcsName
            (
                const char * pcsName /** pcsname */ 
            );
            /** Load measured data file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void LoadMea
            (
            );
            /** Unload measured data file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UnloadMea
            (
            );
            /**Returns  the option to highlight nominal faces for a feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FeatHighlightNominal
            (
            );
            /**Sets  the option to highlight nominal faces for a feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatHighlightNominal
            (
                bool featHighlightNominal /** feathighlightnominal */ 
            );
            /**Returns  the option to display design points for a feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FeatDisplayDesPoints
            (
            );
            /**Sets  the option to display design points for a feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatDisplayDesPoints
            (
                bool featDisplayDesPoints /** featdisplaydespoints */ 
            );
            /**Returns  the option to display measured points for a feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FeatDisplayMeaPoints
            (
            );
            /**Sets  the option to display measured points for a feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatDisplayMeaPoints
            (
                bool featDisplayMeaPoints /** featdisplaymeapoints */ 
            );
            /**Returns  the option to display the reconstructed feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FeatDisplayReconstruct
            (
            );
            /**Sets  the option to display the reconstructed feature 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatDisplayReconstruct
            (
                bool featDisplayReconstruct /** featdisplayreconstruct */ 
            );
            /**Returns  the option to highlight nominal faces for a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TolHighlightNominal
            (
            );
            /**Sets  the option to highlight nominal faces for a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolHighlightNominal
            (
                bool tolHighlightNominal /** tolhighlightnominal */ 
            );
            /**Returns  the option to display design points for the features of a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TolDisplayDesPoints
            (
            );
            /**Sets  the option to display design points for the features of a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolDisplayDesPoints
            (
                bool tolDisplayDesPoints /** toldisplaydespoints */ 
            );
            /**Returns  the option to display measured points for the features of a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TolDisplayMeaPoints
            (
            );
            /**Sets  the option to display measured points for the features of a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolDisplayMeaPoints
            (
                bool tolDisplayMeaPoints /** toldisplaymeapoints */ 
            );
            /**Returns  the option to display the reconstructed features of a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TolDisplayReconstruct
            (
            );
            /**Sets  the option to display the reconstructed features of a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolDisplayReconstruct
            (
                bool tolDisplayReconstruct /** toldisplayreconstruct */ 
            );
            /**Returns  the option to display the gauge in position for a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TolDisplayGauge
            (
            );
            /**Sets  the option to display the gauge in position for a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolDisplayGauge
            (
                bool tolDisplayGauge /** toldisplaygauge */ 
            );
            /**Returns  the option to display points in position for a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TolDisplayPoints
            (
            );
            /**Sets  the option to display points in position for a tolerance 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolDisplayPoints
            (
                bool tolDisplayPoints /** toldisplaypoints */ 
            );
            /**Returns  the option to display tolerance deviation needles 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool TolDisplayNeedles
            (
            );
            /**Sets  the option to display tolerance deviation needles 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolDisplayNeedles
            (
                bool tolDisplayNeedles /** toldisplayneedles */ 
            );
            /**Returns  the needles scale factor 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double NeedleScale
            (
            );
            /**Sets  the needles scale factor 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNeedleScale
            (
                double needleScale /** needlescale */ 
            );
            /**Returns  the option to display the tolerance design DRF (datum reference frame) 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool TolDisplayDesDRF
            (
            );
            /**Sets  the option to display the tolerance design DRF (datum reference frame) 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolDisplayDesDRF
            (
                bool tolDisplayDRF /** toldisplaydrf */ 
            );
            /**Returns  the option to display the tolerance actual DRF (datum reference frame) 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: bool TolDisplayActDRF
            (
            );
            /**Sets  the option to display the tolerance actual DRF (datum reference frame) 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolDisplayActDRF
            (
                bool tolDisplayDRF /** toldisplaydrf */ 
            );
            /**Returns  the display transform 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMeasDataBuilder::DisplayTransformTypes DisplayTransform
            (
            );
            /**Sets  the display transform 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDisplayTransform
            (
                NXOpen::CAM::InspectionMeasDataBuilder::DisplayTransformTypes displayTransform /** displaytransform */ 
            );
            /**Returns  the measured data input file format 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMeasDataBuilder::InputFormatType InputFormat
            (
            );
            /**Sets  the measured data input file format 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInputFormat
            (
                NXOpen::CAM::InspectionMeasDataBuilder::InputFormatType inputFormat /** inputformat */ 
            );
            /**Returns  the projection limit when adding measured data 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double ProjectLimit
            (
            );
            /**Sets  the projection limit when adding measured data 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: void SetProjectLimit
            (
                double projectLimit /** projectlimit */ 
            );
            /**Returns  the offset distance when adding measured data 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double OffsetDist
            (
            );
            /**Sets  the offset distance when adding measured data 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: void SetOffsetDist
            (
                double offsetDist /** offsetdist */ 
            );
            /**Returns  the hole pin matching mode when adding measured data 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMeasDataBuilder::BoundingType HolePinMatching
            (
            );
            /**Sets  the hole pin matching mode when adding measured data 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: void SetHolePinMatching
            (
                NXOpen::CAM::InspectionMeasDataBuilder::BoundingType holePinMatching /** holepinmatching */ 
            );
            /**Returns  the layer to save results to 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: int Layer
            (
            );
            /**Sets  the layer to save results to 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLayer
            (
                int layer /** layer */ 
            );
            /** Save results to layer 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SaveToLayer
            (
            );
            /**Returns  the selected external points 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectedPoints
            (
            );
            /** Add external points to measured data  @return  the number of points added 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: int AppendExternalPoints
            (
                const std::vector<NXOpen::NXObject *> & pointTags /** the candidate points array */
            );
            /** Remove external points from measured data  @return  the number of points removed 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: int RemoveExternalPoints
            (
                const std::vector<NXOpen::NXObject *> & pointTags /** the candidate points array */
            );
            /** Accept and reject points as measured data 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void AcceptRejectExternalPoints
            (
                int* acceptedPointCount /** the number of points accepted */,
                int* rejectedPointCount /** the number of points rejected */
            );
            /**Returns  the measured part name 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString MeasuredPartName
            (
            );
            /**Sets  the measured part name 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMeasuredPartName
            (
                const NXString & partName /** partname */ 
            );
            /**Sets  the measured part name 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetMeasuredPartName
            (
                const char * partName /** partname */ 
            );
            /**Returns  the inspection date 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString InspectionDate
            (
            );
            /**Sets  the inspection date 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetInspectionDate
            (
                const NXString & inspectionDate /** inspectiondate */ 
            );
            /**Sets  the inspection date 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetInspectionDate
            (
                const char * inspectionDate /** inspectiondate */ 
            );
            /**Returns  the run number 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString RunNumber
            (
            );
            /**Sets  the run number 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetRunNumber
            (
                const NXString & runNumber /** runnumber */ 
            );
            /**Sets  the run number 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetRunNumber
            (
                const char * runNumber /** runnumber */ 
            );
            /**Returns  the option to specify the point distance tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool SpecifyPointDistance
            (
            );
            /**Sets  the option to specify the point distance tolerance 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSpecifyPointDistance
            (
                bool specifyDistance /** specifydistance */ 
            );
            /**Returns  the distance tolerance when adding points as measured data 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double PointDistanceTolerance
            (
            );
            /**Sets  the distance tolerance when adding points as measured data 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetPointDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
