#ifndef NXOpen_FEATURES_LATTICEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_LATTICEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_LatticeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_LatticeBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class LatticeBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class SelectBodyList;
    class SelectFaceList;
    namespace Features
    {
        class _LatticeBuilderBuilder;
        class LatticeBuilderImpl;
        /**Represents a Features.Lattice builder <br> To create a new instance of this class, use @link NXOpen::Features::LatticeFeatureCollection::CreateLatticeBuilder  NXOpen::Features::LatticeFeatureCollection::CreateLatticeBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CellTypeName </td> <td> 
         
        Octapeak </td> </tr> 

        <tr><td> 
         
        EdgeLength.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        IsRandom </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsUniformCube </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        LatticeType </td> <td> 
         
        UnitGraph </td> </tr> 

        <tr><td> 
         
        MaxDeviation.Value </td> <td> 
         
        0.5 (millimeters part), 0.02 (inches part) </td> </tr> 

        <tr><td> 
         
        MaxEdgeLength.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        RodDiameter.Value </td> <td> 
         
        1 (millimeters part), 0.05 (inches part) </td> </tr> 

        <tr><td> 
         
        SizeX.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        SizeY.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        SizeZ.Value </td> <td> 
         
        10 (millimeters part), 0.5 (inches part) </td> </tr> 

        <tr><td> 
         
        TessellationFactor </td> <td> 
         
        0.4 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.2.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  LatticeBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** This enum represents all the lattice types that're supported in NX*/

            /// \cond NX_NO_DOC 
            public: enum LatticeTypes
            {
                LatticeTypesUnitGraph/** unit graph */ ,
                LatticeTypesSurfaceGraph/** surface graph */ ,
                LatticeTypesTetrahedronGraph/** tetrahedron graph */ 
            };


            /// \endcond 
            private: LatticeBuilderImpl * m_latticebuilder_impl;
            private: friend class  _LatticeBuilderBuilder;
            protected: LatticeBuilder();
            public: ~LatticeBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the lattice type: surface graph, tetrahedron graph or unit graph 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::LatticeBuilder::LatticeTypes LatticeType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the lattice type: surface graph, tetrahedron graph or unit graph 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetLatticeType
            (
                NXOpen::Features::LatticeBuilder::LatticeTypes latticeType /** latticetype */ 
            );

            /// \endcond 
            /**Returns the faces that the user selects to define the boundary
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * BaseFace
            (
            );
            /**Returns the solid bodies that the user selects to define the boundary
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * BoundaryBody
            (
            );
            /**Returns  @brief the name of the unit cell type that the user selects. 

              
                       
                       Currently there are 15 valid unit cells that are 
                       supported in NX. Their name strings are: 
                       <ul>
                       <li>BiTriangle</li> 
                       <li>Cubeplex</li>
                       <li>Dodecahedron</li>
                       <li>HexStar</li>
                       <li>HexVase</li>
                       <li>HexVaseMod</li>
                       <li>Octapeak</li> 
                       <li>Octahedroid</li> 
                       <li>PseudoSierpinski</li>
                       <li>QuadDiametral</li>
                       <li>QuadDiametralCross</li>
                       <li>QuadDiametralLine</li>
                       <li>Star</li> 
                       <li>TriDiametral</li>
                       <li>TriDiametralChevron</li>
                       </ul>
                       
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXString CellTypeName
            (
            );
            /**Sets  @brief the name of the unit cell type that the user selects. 

              
                       
                       Currently there are 15 valid unit cells that are 
                       supported in NX. Their name strings are: 
                       <ul>
                       <li>BiTriangle</li> 
                       <li>Cubeplex</li>
                       <li>Dodecahedron</li>
                       <li>HexStar</li>
                       <li>HexVase</li>
                       <li>HexVaseMod</li>
                       <li>Octapeak</li> 
                       <li>Octahedroid</li> 
                       <li>PseudoSierpinski</li>
                       <li>QuadDiametral</li>
                       <li>QuadDiametralCross</li>
                       <li>QuadDiametralLine</li>
                       <li>Star</li> 
                       <li>TriDiametral</li>
                       <li>TriDiametralChevron</li>
                       </ul>
                       
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetCellTypeName
            (
                const NXString & cellTypeName /** celltypename */ 
            );
            /**Sets  @brief the name of the unit cell type that the user selects. 

              
                       
                       Currently there are 15 valid unit cells that are 
                       supported in NX. Their name strings are: 
                       <ul>
                       <li>BiTriangle</li> 
                       <li>Cubeplex</li>
                       <li>Dodecahedron</li>
                       <li>HexStar</li>
                       <li>HexVase</li>
                       <li>HexVaseMod</li>
                       <li>Octapeak</li> 
                       <li>Octahedroid</li> 
                       <li>PseudoSierpinski</li>
                       <li>QuadDiametral</li>
                       <li>QuadDiametralCross</li>
                       <li>QuadDiametralLine</li>
                       <li>Star</li> 
                       <li>TriDiametral</li>
                       <li>TriDiametralChevron</li>
                       </ul>
                       
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            void SetCellTypeName
            (
                const char * cellTypeName /** celltypename */ 
            );
            /**Returns whether the unit cell bounding box is a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsUniformCube
            (
            );
            /**Sets whether the unit cell bounding box is a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetUniformCube
            (
                bool uniformCube /** uniformcube */ 
            );
            /**Returns  the edge length of the unit cell bounding box, 
                         and only effective only when the bounding box is a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EdgeLength
            (
            );
            /**Returns the size of the unit cell bounding box in x axis, 
                         and only effective only when the bounding box is not a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeX
            (
            );
            /**Returns the size of the unit cell bounding box in y axis, 
                         and only effective only when the bounding box is not a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeY
            (
            );
            /**Returns  the size of the unit cell bounding box in z axis, 
                         and only effective only when the bounding box is not a uniform cube
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SizeZ
            (
            );

            /// \cond NX_NO_DOC 
            /**Returns the maximum edge length is used for re-meshing, and it determines how redefined the input triangle mesh is
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxEdgeLength
            (
            );

            /// \endcond 
            /**Returns   @brief whether to randomize graph vertices within a specified range and generate 
                                 some bumps for the lattice body.  

             
                        
                        The range over which the vertices are randomized is determined by property @link Features::LatticeBuilder::MaxDeviation Features::LatticeBuilder::MaxDeviation @endlink and @link Features::LatticeBuilder::SetMaxDeviation Features::LatticeBuilder::SetMaxDeviation @endlink .
                        
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsRandom
            (
            );
            /**Sets   @brief whether to randomize graph vertices within a specified range and generate 
                                 some bumps for the lattice body.  

             
                        
                        The range over which the vertices are randomized is determined by property @link Features::LatticeBuilder::MaxDeviation Features::LatticeBuilder::MaxDeviation @endlink and @link Features::LatticeBuilder::SetMaxDeviation Features::LatticeBuilder::SetMaxDeviation @endlink .
                        
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetRandom
            (
                bool random /** random */ 
            );
            /**Returns   @brief the maximum deviation that the vertices of the lattice graph will have. 

             
                         
                        The bigger the value of this property is, the more obvious bumps the lattice body will generate.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxDeviation
            (
            );
            /**Returns  the diameter/thickness of the rods in the lattice graph
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RodDiameter
            (
            );
            /**Returns   @brief the tessellation factor of the lattice creation. 

              
                         
                        A tessellation tolerance specifies the maximum deviation between the ideal rod and their final tessellated 
                        representation of the lattice body. Since the result heavily depends on the relation between rod diameter 
                        and tessellation tolerance the user specifies only a unitless tessellation factor. 
                        The actual tessellation tolerance will determined by 
                        (@link Features::LatticeBuilder::TessellationFactor Features::LatticeBuilder::TessellationFactor @endlink and @link Features::LatticeBuilder::SetTessellationFactor Features::LatticeBuilder::SetTessellationFactor @endlink ) X (@link Features::LatticeBuilder::RodDiameter Features::LatticeBuilder::RodDiameter @endlink and @link Features::LatticeBuilder::SetRodDiameter Features::LatticeBuilder::SetRodDiameter @endlink )  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: double TessellationFactor
            (
            );
            /**Sets   @brief the tessellation factor of the lattice creation. 

              
                         
                        A tessellation tolerance specifies the maximum deviation between the ideal rod and their final tessellated 
                        representation of the lattice body. Since the result heavily depends on the relation between rod diameter 
                        and tessellation tolerance the user specifies only a unitless tessellation factor. 
                        The actual tessellation tolerance will determined by 
                        (@link Features::LatticeBuilder::TessellationFactor Features::LatticeBuilder::TessellationFactor @endlink and @link Features::LatticeBuilder::SetTessellationFactor Features::LatticeBuilder::SetTessellationFactor @endlink ) X (@link Features::LatticeBuilder::RodDiameter Features::LatticeBuilder::RodDiameter @endlink and @link Features::LatticeBuilder::SetRodDiameter Features::LatticeBuilder::SetRodDiameter @endlink )  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetTessellationFactor
            (
                double factor /** factor */ 
            );
            /**Returns  the origin where the unit cell patterning starts in the lattice creation
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d Origin
            (
            );
            /**Sets  the origin where the unit cell patterning starts in the lattice creation
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOrigin
            (
                const NXOpen::Point3d & origin /** origin */ 
            );
            /**Returns   @brief the orientation matrix of unit cell patterning in the lattice creation.  

              
                        
                        The orientation matrix is defined relative to the WCS. 
                        
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 Orientation
            (
            );
            /**Sets   @brief the orientation matrix of unit cell patterning in the lattice creation.  

              
                        
                        The orientation matrix is defined relative to the WCS. 
                        
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_lattice_base (" NX Lattice Base") */
            public: void SetOrientation
            (
                const NXOpen::Matrix3x3 & orientMtx /** orientmtx */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
