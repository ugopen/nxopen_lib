#ifndef NXOpen_SECTION_HXX_INCLUDED
#define NXOpen_SECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Section.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/SectionData.hxx>
#include <NXOpen/SelectionIntentRule.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class Section;
    class DisplayableObject;
    class ICurve;
    class NXObject;
    class Point;
    class SectionData;
    class SelectionIntentRule;
    class TaggedObject;
    class _SectionBuilder;
    class SectionImpl;
    /** Represents a section
     <br> 
    Section consists of "chained_entity", a chain  or a single entity of edge or curve.
    The entire chain(or a single entity) may be used by the section or only a portion of the chain 
    (or single entity) might be used. The portion of the chain (or single entity) that is used is
    defined by the "start_connector" and "end_connector". 
     <br> 
     <br> 
    start_connector: It represents the start of the portion of the chain (or single entity) that is used. 
    If "start_connector" is null (Nothing), then the start point of the chained_entity along its "natural" 
    direction is used.
     <br> 
     <br> 
    start_connector_intersection_point: The point of intersection of the "chained_entity" and the 
    "start_connector". This is used to determine what portion of the chain to use in case the 
    "start_connector" intersects the "chained_entity" in multiple locations.
     <br> 
     <br> 
    end_connector: It represents the end of the portion of the chain (or single entity) that is used.
     <br> 
     <br> 
    end_connector_intersection_point: The point of intersection of the "chained_entity" and the 
    "end_connector". This is used to determine what portion of the chain to use in case the "end_connector" 
    intersects the "chained_entity" in multiple locations.
     <br> 
     <br> To create a new instance of this class, use @link NXOpen::SectionCollection::CreateSection  NXOpen::SectionCollection::CreateSection @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  Section : public NXOpen::DisplayableObject
    {
        /** Defines mode with respect to feature create or edit mode.
             */
        public: enum Mode
        {
            ModeCreate/** Feature is being created */,
            ModeEdit/** Feature is being edited */
        };

        /** Defines entity types allowed.
             */
        public: enum AllowTypes
        {
            AllowTypesUninitialized/** This is uninitialized state. Do not use this.*/,
            AllowTypesOnlyCurves/** Allow only curves in section*/,
            AllowTypesOnlyPoints/** Allow only points in section*/,
            AllowTypesCurvesAndPoints/** Allow both points and curves in section*/
        };

        /** Defines type of deselect option.
             */
        public: enum DeselectOption
        {
            DeselectOptionSectionBetweenIntersection/** Potion of the loop between intersections will be deselected this may contain multiple chains */,
            DeselectOptionCurveBetweenIntersection/**Portion of curve between intersection*/
        };

        private: SectionImpl * m_section_impl;
        private: friend class  _SectionBuilder;
        protected: Section();
        public: ~Section();
        /**Sets  the chaining tolerance 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SetChainingTolerance
        (
            double chainingTolerance /** chaining tolerance*/
        );
        /**Sets  the distance tolerance 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SetDistanceTolerance
        (
            double distanceTolerance /** distance tolerance*/
        );
        /**Sets  the angle tolerance 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SetAngleTolerance
        (
            double angleTolerance /** angle tolerance*/
        );
        /**Returns  the chaining tolerance 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: double ChainingTolerance
        (
        );
        /**Returns  the distance tolerance 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: double DistanceTolerance
        (
        );
        /**Returns  the angle tolerance 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: double AngleTolerance
        (
        );
        /** Adds selection intent rules to the section.
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void AddToSection
        (
            const std::vector<NXOpen::SelectionIntentRule *> & rules /** Selection intent rules. To create selection intent rules see
                                             documentation of @link ScRuleFactory ScRuleFactory@endlink 
                                             for more details. */,
            NXOpen::NXObject * seed /** Seed curve, edge or face*/,
            NXOpen::NXObject * startConnector /** It represents the start of the portion of the chain 
                                                                         (or single entity) that is used. If "start_connector" 
                                                                         is null (Nothing), then the start point of the 
                                                                         chained_entity along its "natural" direction is used. 
                                                                         It can be point, curve or edge */,
            NXOpen::NXObject * endConnector /** It represents the end of the portion of the chain (or single entity) that is used.
                                                                       It can be point, curve or edge */,
            const NXOpen::Point3d & helpPoint /** When ambiguity in multiple solutions is encountered, help_point is used
                                                     to determine which portion of the chain to use for creating section.
                                                     It is most useful when used with non-NULL connectors or with Region Boundary Curves rule. */,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Adds selection intent rules to the section with the option of restricting
                chaining and limit discovery to a single feature.
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void AddToSection
        (
            const std::vector<NXOpen::SelectionIntentRule *> & rules /** Selection intent rules. To create selection intent rules see
                                             documentation of @link ScRuleFactory ScRuleFactory@endlink 
                                             for more details. */,
            NXOpen::NXObject * seed /** Seed curve, edge or face*/,
            NXOpen::NXObject * startConnector /** It represents the start of the portion of the chain 
                                                                         (or single entity) that is used. If "start_connector" 
                                                                         is null (Nothing), then the start point of the 
                                                                         chained_entity along its "natural" direction is used. 
                                                                         It can be point, curve or edge */,
            NXOpen::NXObject * endConnector /** It represents the end of the portion of the chain (or single entity) that is used.
                                                                       It can be point, curve or edge */,
            const NXOpen::Point3d & helpPoint /** When ambiguity in multiple solutions is encountered, help_point is used
                                                     to determine which portion of the chain to use for creating section.
                                                     It is most useful when used with non-NULL connectors or with Region Boundary Curves rule. */,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/,
            bool chainWithinFeature /** True if chaining and discovery of intersection limits is to be restricted 
                                                             to the feature of the seed. This is effective only when the seed belongs
                                                             to a curve feature. */
        );
        /** Removes selection intent rules from the section.
             <br>  
            To get selection intent rules of the section 
            see documentation for @link Section::GetSectionData Section::GetSectionData@endlink  and
            @link SectionData::GetRules  SectionData::GetRules @endlink  for more details. 
             <br> 
            
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveRules
        (
            const std::vector<NXOpen::SelectionIntentRule *> & rules /** Selection intent rules.*/,
            NXOpen::NXObject * startConnector /** It represents the start of the portion of 
                                                                         the chain (or single entity) that is used. 
                                                                         If "start_connector" is null (Nothing), 
                                                                         then the start point of the chained_entity 
                                                                         along its "natural" direction is used. 
                                                                         It can be be point, curve or edge */,
            NXOpen::NXObject * endConnector /** It represents the end of the portion of 
                                                                       the chain (or single entity) that is used. 
                                                                       It can be be point, curve or edge */,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode*/
        );
        /** Removes one section element curve.
             <br>  
            To get selection element
            see documentation for @link Section::GetSectionData Section::GetSectionData@endlink  and
            @link SectionData::GetSectionElementsData  SectionData::GetSectionElementsData @endlink  for more details.
             <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveSingleSectionElement
        (
            NXOpen::ICurve * sectionElement /** The element that constructs the section */,
            NXOpen::NXObject * startConnector /** The element that is connected to the 
                                       section_element near its start_point*/,
            NXOpen::NXObject * endConnector /** The element that is connected to the 
                                       section_element near its end_point*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode*/
        );
        /** Removes one section element that is a point.
             <br>  
            To get selection element
            see documentation for @link Section::GetSectionData Section::GetSectionData@endlink  and
            @link SectionData::GetSectionElementsData  SectionData::GetSectionElementsData @endlink  for more details.
             <br> 
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveSingleSectionElement
        (
            NXOpen::Point * sectionElement /** The point that constructs the section */,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode*/
        );
        /** Removes all the selection intent rules related to the section element.
             <br>  
            To get selection elements of the section, see documentation for @link Section::GetSectionData Section::GetSectionData@endlink  and
            @link SectionData::GetSectionElementsData  SectionData::GetSectionElementsData @endlink  for more details.
             <br> 
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveRules
        (
            NXOpen::ICurve * sectionElement /** The element that constructs the section */,
            NXOpen::NXObject * startConnector /** The element that is connected to the 
                                       section_element near its start_point*/,
            NXOpen::NXObject * endConnector /** The element that is connected to the 
                                       section_element near its end_point */,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Removes all the selection intent rules related to the chain on which the given point lies.
             <br>  
            This method should be used in place of @link Section::RemoveRules  Section::RemoveRules @endlink  when
            the part containing the section element is not loaded.
             <br> 
            
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveUnderlyingChain
        (
            const NXOpen::Point3d & pointSpecifyingChain /** The point should lie on the chain that is to be removed.*/,
            double tolerance /** Tolerance for specifying point on chain.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Sets the start element and the direction of the section. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SetStartAndDirection
        (
            NXOpen::ICurve * startElement /** The element, curve or edge, specifying
                                                        the starting of the section.
                                                        If the section is a loop, then the loop is started
                                                        by start_element and the direction is 
                                                        followed the input direction. 
                                                        If the section is not a loop, then the section can be started 
                                                        by other element, but the direction of the section is defined by
                                                        the start_element and 
                                                        direction. */,
            const NXOpen::Point3d & startPoint /** The origin of the vector that defines the direction of
                                                         the section. This point has to be on the start_element. */,
            const NXOpen::Vector3d & direction /** The direction of the vector defines the direction of
                                                        the section. */
        );
        /** Gets the start element and the direction of the section. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void GetStartAndDirection
        (
            NXOpen::ICurve ** startElement /** The element, curve or edge, specifying
                                                        the starting of the section. If start element is point 
                                                        then this function will return error.
                                                        If the section is a loop, then the loop is started
                                                        by start_element and the direction is 
                                                        followed the input direction. 
                                                        If the section is not a loop, then the section can be started 
                                                        by other element, but the direction of the section is defined by
                                                        the  start_element and direction. */,
            NXOpen::Point3d* startPoint /** The origin of the vector that defines the direction of
                                                         the section. This point has to be on the start_element. */,
            NXOpen::Vector3d* direction /** The direction of the vector defines the direction of
                                                        the section. */
        );
        /** Gets the start point and the direction of a specified single loop of the section. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void GetStartAndDirectionOfLoop
        (
            int index /** The index of the loop of the section for which start point
                                                   and direction are being queried. */,
            NXOpen::Point3d* startPoint /** The origin of the vector that defines the direction of
                                                   the loop of the section specified by the index. */,
            NXOpen::Vector3d* direction /** The direction of the vector defines the direction of the loop
                                                   of the section specified by the index. */
        );
        /** Gets the section data 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void GetSectionData
        (
            std::vector<NXOpen::SectionData *> & sectionData /** Section data consists of selection intent rules,
                                                       section elements, start and end connector. */
        );
        /** Destroy the section object 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void Destroy
        (
        );
        /** Reverse the section direction 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void ReverseDirection
        (
        );
        /** Reverse the direction of of a specified single loop of the section. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void ReverseDirectionOfLoop
        (
            int index /** The index of the loop of the section that is to be reversed. */
        );
        /** Set the curve on which the specified point lies as the start curve 
                of a specified single loop of the section. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SetStartCurveOfClosedLoop
        (
            int index /** Index of the loop for which the start curve is to be set. */,
            const NXOpen::Point3d & pointOnStartCurve /** Any point on a curve that is to be set as the start curve. */
        );
        /** Reverse the loop direction of a closed loop while keeping the start curve same.
                This API can only be used closed loops. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void ReverseDirectionOfClosedLoop
        (
            int index /** Index of the closed loop for which the direction is to be reversed. */
        );
        /** Add smart point into section.
             <br> 
            This API is now deprecated.
            Please use @link ScRuleFactory::CreateRuleCurveDumb ScRuleFactory::CreateRuleCurveDumb@endlink  and @link Section::AddToSection Section::AddToSection@endlink  instead.
             <br> 
            
         <br>  @deprecated Deprecated in NX7.5.0.  Please use @link ScRuleFactory::CreateRuleCurveDumb ScRuleFactory::CreateRuleCurveDumb@endlink  followed by @link Section::AddToSection Section::AddToSection@endlink  instead. <br>  

         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public:  NX_DEPRECATED("Deprecated in NX7.5.0.  Please use ScRuleFactory::CreateRuleCurveDumb followed by Section::AddToSection instead.") void AddSmartPoint
        (
            NXOpen::Point * smartPt /** Smart point tobe added into section. */,
            double tol /** Tolerance. */
        );
        /** Allow self intersecting section or not. By default self intersection is allowed. 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void AllowSelfIntersection
        (
            bool allowSelfIntersection /** True if self-intersecting section is allowed else false*/
        );
        /** Clear the section of all its constituents  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void Clear
        (
        );
        /** Returns the index of the section loop conatining the section element.
                If the section element does not exist in the section or is part of
                more than one loops, this method will return an error.  @return  loop Index
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: int GetLoopIndex
        (
            NXOpen::NXObject * sectionElement /** an element that constructs the section*/
        );
        /** Returns the index of the loop on which the given point lies.  @return  loop Index
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: int GetLoopIndex
        (
            const NXOpen::Point3d & pointSpecifyingLoop /** a point lying on the loop for which
                                                                  the loop index is being queried*/,
            double tolerance /** Tolerance for specifying point on loop.*/
        );
        /** Set the direction of a single loop of the section along the given vector. 
         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void AlignDirectionOfLoop
        (
            const NXOpen::Point3d & point /** Any point on a the desired loop. */,
            const NXOpen::Vector3d & direction /** Desired tangent direction of the loop at the point. */
        );
        /** Set inter-part state of section and make it empty.
             <br> 
            This function sets the value of interpart flag on Section. Error will be raised while setting this option on Section in following conditions:
            (1) Multi-component option is already set on Section.
             <br> 
            
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetInterpart
        (
            bool interpart /** True to set section interpart */
        );
        /** Removes multiple section elements that are either curves/edges.
             <br> 
            This API is now deprecated.
            Please use @link Section::RemoveMultipleElements Section::RemoveMultipleElements@endlink  instead.
             <br> 
            
         <br>  @deprecated Deprecated in NX8.5.0.  Please use @link Section::RemoveMultipleElements Section::RemoveMultipleElements@endlink  instead. <br>  

         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Please use Section::RemoveMultipleElements instead.") void RemoveMultipleCurves
        (
            const std::vector<NXOpen::ICurve *> & wfs /** The elements (curves/edges) that construct the section.*/,
            const std::vector<NXOpen::NXObject *> & startConnector /** The element that is connected to the 
                                                                                                  curve/edge near its start point.*/,
            const std::vector<NXOpen::NXObject *> & endConnector /** The element that is connected to the 
                                                                                                  curve/edge near its end point.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Removes multiple section elements that are points.
             <br> 
            This API is now deprecated.
            Please use @link Section::RemoveMultipleElements Section::RemoveMultipleElements@endlink  instead.
             <br> 
            
         <br>  @deprecated Deprecated in NX8.5.0.  Please use @link Section::RemoveMultipleElements Section::RemoveMultipleElements@endlink  instead. <br>  

         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public:  NX_DEPRECATED("Deprecated in NX8.5.0.  Please use Section::RemoveMultipleElements instead.") void RemoveMultiplePoints
        (
            const std::vector<NXOpen::Point *> & points /** The points that construct the section.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Removes the single curve which is within tolerance to the given point, from the section.
             <br>  
            This method should be used in place of @link Section::RemoveSingleSectionElement  Section::RemoveSingleSectionElement @endlink  in any of 
            the conditions: when the part containing the section element is not loaded, when the combination of input 
            curve, start connector and end connector maps to multiple section element, or when underlying parent is invalid.
             <br> 
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveUnderlyingCurve
        (
            const NXOpen::Point3d & pointSpecifyingCurve /** The point should lie on the curve that is to be removed.*/,
            double tolerance /** Tolerance for specifying point on curve.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Removes multiple section elements.
             <br> 
            This method should be used to remove the multiple section elements from section when elements to be removed contains points, and some or all curves that 
            can not be uniquely mapped with wireframe , start connector and end connector. For Such curves point laying on the curve should be specified
             <br> 
            
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void RemoveMultipleElements
        (
            const std::vector<NXOpen::ICurve *> & wfs /** The elements (curves/edges) that construct the section.*/,
            const std::vector<NXOpen::NXObject *> & startConnectors /** The element that is connected to the curve/edge near its start point.*/,
            const std::vector<NXOpen::NXObject *> & endConnectors /** The element that is connected to the curve/edge near its end point.*/,
            const std::vector<bool> & isCombinationsResultIntoOnlyOneCurvePerCombination /** Whether the combination of input curve/edge, Start Connector end Connector produces unique combination (i.e. they map to single section element) or not.*/,
            const std::vector<NXOpen::Point3d> & pointsOnCurvesToBeRemoved /**If Combination can not define curve to be deselected uniquely, then point which lies on the curve to be removed should be provided, otherwise point must be given as (0, 0, 0) for corresponding combination*/,
            const std::vector<NXOpen::Point *> & points /** The points that are part of section and to be removed from the section.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/
        );
        /** Clone section.  @return  the cloned section
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Section * CloneSection
        (
        );
        /**Prepares Mapping Data
             <br> 
            This method should be used to create mapping data if mapping is to be done
             <br> 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void PrepareMappingData
        (
        );
        /**Cleans Mapping Data
             <br> 
            This method should be used to clean mapping data after mapping is done
             <br> 
            
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void CleanMappingData
        (
        );
        /** Get the Allowed Entity Types. 
             <br> 
            Works only for UF_SC_CURVE_dumb_data_s and UF_SC_CURVE_feature_data_s
             <br> 
             @return  allowed entity types
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: NXOpen::Section::AllowTypes GetAllowedEntityTypes
        (
        );
        /** Set the Allowed Entity Types. 
             <br> 
            Works only for UF_SC_CURVE_dumb_data_s and UF_SC_CURVE_feature_data_s
             <br> 
            
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SetAllowedEntityTypes
        (
            NXOpen::Section::AllowTypes allowedEntityTypes /** Allowed entity types. */
        );
        /** Maps old section curves to new section curves  
             <br> 
            This method should be used to map old section curves to new section curves when some or all curves from section are removed and 
            some or all new curves are added.    
             <br> 
             <br> 
            To find old section curves see documentation for @link Section::GetOldOutputCurves Section::GetOldOutputCurves@endlink  and to find current section curves see documentation for
            @link Section::GetOutputCurves Section::GetOutputCurves@endlink       
             <br> 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void MapSectionElements
        (
            NXOpen::NXObject * oldWf /**  The old section curve which was removed and hence needs to be mapped.*/,
            NXOpen::NXObject * newWf /** The new section curve that would be mapped to the old section curve.*/
        );
        /**  Gives the output curves of the section.
             <br> 
            This method returns an array of existing section curves. They are created internally and are different from the parent curves used to build the section.
            These curves should not be modified or deleted, doing so may result in part corruption and session may become unstable.
             <br> 
            
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void GetOutputCurves
        (
            std::vector<NXOpen::NXObject *> & outputs /**The array of section elements.*/
        );
        /**  Gives the old output curves of the section.
             <br> 
            This method returns an array of old section curves. They were created internally and are different from the parent curves used to build the section.
            These curves should not be modified or deleted, doing so may result in part corruption and session may become unstable.
             <br> 
            
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void GetOldOutputCurves
        (
            std::vector<NXOpen::NXObject *> & oldOutputs /** The array of old section elements.*/
        );
        /** Deselects Portion of the section depending on the option provided.
             <br> 
            This method should be used to deselect portion of the section.
             <br> 
            
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void DeselectPortion
        (
            const NXOpen::Point3d & seedPoint /** The seed point of deselection*/,
            NXOpen::NXObject * startLimit /** The element that is connected to the curve/edge near its start point.*/,
            NXOpen::NXObject * endLimit /** The element that is connected to the curve/edge near its end point.*/,
            NXOpen::Section::DeselectOption deselectionType /** The deselection type*/
        );
        /** Adds a chain between given two intersection points to the section.
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void AddChainBetweenIntersectionPoints
        (
            const std::vector<NXOpen::SelectionIntentRule *> & rules /** Selection intent rules. To create selection intent rules see
                                                                         documentation of @link ScRuleFactory ScRuleFactory@endlink 
                                                                         for more details. */,
            NXOpen::NXObject * startConnector /** It represents the start of the portion of the chain 
                                                                         (or single entity) that is used. If "startConnector" 
                                                                         is NULL, then the start point of the 
                                                                         chained entity along its "natural" direction is used. 
                                                                         It can be point, curve or edge */,
            const NXOpen::Point3d & startIntersectionPoint /** The point where the start connector intersects with the chain.*/,
            NXOpen::NXObject * endConnector /** Represents the end of the portion of the chain (or single entity) that is used.
                                                                         It can be point, curve or edge */,
            const NXOpen::Point3d & endIntersectionPoint /** The point where the end connector intersects with the chain.*/,
            NXOpen::NXObject * seed /** Seed curve, edge or face*/,
            const NXOpen::Point3d & helpPoint /** The point which is used to determine which portion 
                                                                         of the chain to use for creating section.*/,
            NXOpen::Section::Mode featureMode /** Feature create or edit mode.*/,
            bool chainWithinFeature /** True if chaining and discovery of intersection limits is to be restricted 
                                                                         to the feature of the seed. This is effective only when the seed belongs
                                                                         to a curve feature. */
        );
        /** Sets the option to skip sorting the section loops or not.
             <br> 
            This method should be used rare scenarios. In normal situation this method should never be used.
            If sort option is set to true then it should be set to false after required operation is done.
            If sort option is set to true then section loops are not sorted and output will not be in order.
             <br> 
            
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void SkipSorting
        (
            bool skipSorting /** True to skip sorting of section loops else false*/
        );
        /** Recalculates section collection.
             <br> 
            This is JA API for recalculating the section collection and to get the section collection after recalculation.
             <br> 
            
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : gateway ("UG GATEWAY") */
        public: void EvaluateAndAskOutputEntities
        (
            std::vector<NXOpen::NXObject *> & refs /**The array of section elements.*/
        );
        /** Gets the option set on Section for collection from multiple components.
             <br> 
            A multi-component Section can have collection from multiple components i.e., multiple parts or multiple instances of same part or both.
             <br>  
             @return  Multi-component option set on Section 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetMultiComponent
        (
        );
        /** Sets the true option on Section for collection from multiple components.
             <br> 
            A multi-component Section can have collection from multiple components i.e., multiple parts or multiple instances of same part or both.
            This method should be used only if such collection is desired.
            Error will be raised while setting this option on Section in following conditions:
            (1) Inter-part option is already set on Section.
             <br>  
            
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMultiComponent
        (
        );
        /** Gets the option set on Section for collection in non-feature mode.
             <br> 
            A Section in non-feature mode does not reference the feature data of the part from which the collection is done.
             <br> 
             @return  Non-feature mode set on Section 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetNonFeatureMode
        (
        );
        /** Sets the true option on Section for collection in non-feature mode.
             <br> 
            A Section in non-feature mode does not reference the feature data of the part from which the collection is done.
            The option should be set on an empty Section only.
            For a non-empty Section, setting this option will raise error in following conditions:
            (1) Section is referencing feature data and non-feature mode is set true.
            (2) Section is not referencing feature data and non-feature mode is set false.
             <br> 
            
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void SetNonFeatureMode
        (
        );
        /** Sets to the section whether to allow reference curves or not.
             <br> 
            This is JA API for setting to the section whether to allow reference curves or not.
             <br> 
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAllowRefCrvs
        (
            bool allowRefCrvs /** allowrefcrvs */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
