#ifndef NXOpen_TOOLING_QUICKQUOTATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_QUICKQUOTATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_QuickQuotationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_QuickQuotationBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class QuickQuotationBuilder;
    }
    class Builder;
    class NXColor;
    class Section;
    class SelectBodyList;
    namespace Tooling
    {
        class _QuickQuotationBuilderBuilder;
        class QuickQuotationBuilderImpl;
        /** Progressive Die Wizard  builder to create quick quotation.  <br> To create a new instance of this class, use @link NXOpen::Tooling::QuickQuotationCollection::CreateQuickQuotationBuilder  NXOpen::Tooling::QuickQuotationCollection::CreateQuickQuotationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BendingColor </td> <td> 
         
        120 </td> </tr> 

        <tr><td> 
         
        BurringColor </td> <td> 
         
        29 </td> </tr> 

        <tr><td> 
         
        CamunitColor </td> <td> 
         
        58 </td> </tr> 

        <tr><td> 
         
        CompFactor </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        FormingColor </td> <td> 
         
        152 </td> </tr> 

        <tr><td> 
         
        InsertGroupMaterial </td> <td> 
         
        Cr12 </td> </tr> 

        <tr><td> 
         
        ManageTemporaryObjectsType </td> <td> 
         
        Hide </td> </tr> 

        <tr><td> 
         
        ObjectType </td> <td> 
         
        Piercing </td> </tr> 

        <tr><td> 
         
        OutlineEnlargeTimes </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        PartNo </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PartsAmout </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PiercingColor </td> <td> 
         
        97 </td> </tr> 

        <tr><td> 
         
        Pitch </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StationsNo </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StripLength </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StripThickness </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Width </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WorkAreaLength </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WorkAreaWidth </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  QuickQuotationBuilder : public NXOpen::Builder
        {
            /** Specify the operation type. */
            public: enum Types
            {
                TypesJobInformation/**job information type*/,
                TypesProjectDefinition/**project definition type*/,
                TypesConceptDesign/**concept design type*/,
                TypesGrouping/**grouping type*/,
                TypesQuoting/**quoting type*/
            };

            /**Specify the design type. */
            public: enum DesignTypes
            {
                DesignTypesNewDesign/**the design is a new design*/,
                DesignTypesChangeover/**the design is a changeover*/,
                DesignTypesAdditionalDie/**The design is a additional die*/
            };

            /** Specify the concept sheet body type. */
            public: enum ObjectTypes
            {
                ObjectTypesPiercing/**sheet body type is piercing*/,
                ObjectTypesBending/**sheet body type is piercing*/,
                ObjectTypesForming/**sheet body is forming*/,
                ObjectTypesBurring/**sheet body is burring*/,
                ObjectTypesCam/**sheet body is camunits.*/
            };

            /**Specify the insert group material. */
            public: enum InsertGroupMaterials
            {
                InsertGroupMaterialsCr12/**insert group material is Cr12*/,
                InsertGroupMaterialsCr12MoV/**insert group material is Cr12MoV*/
            };

            /** Specify the management type for the temporary objects. */
            public: enum ManageTemporaryObjectsTypes
            {
                ManageTemporaryObjectsTypesHide/** hide */ ,
                ManageTemporaryObjectsTypesDisplay/** display */ ,
                ManageTemporaryObjectsTypesDelete/** delete */ 
            };

            private: QuickQuotationBuilderImpl * m_quickquotationbuilder_impl;
            private: friend class  _QuickQuotationBuilderBuilder;
            protected: QuickQuotationBuilder();
            public: ~QuickQuotationBuilder();
            /**Returns  the operation type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::QuickQuotationBuilder::Types Type
            (
            );
            /**Sets  the operation type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::QuickQuotationBuilder::Types type /** type */ 
            );
            /**Returns  the quote no. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString QuoteNo
            (
            );
            /**Sets  the quote no. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetQuoteNo
            (
                const NXString & quoteNo /** quoteno */ 
            );
            /**Sets  the quote no. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetQuoteNo
            (
                const char * quoteNo /** quoteno */ 
            );
            /**Returns  the quote date. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString QuoteDate
            (
            );
            /**Sets  the quote date. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetQuoteDate
            (
                const NXString & quoteDate /** quotedate */ 
            );
            /**Sets  the quote date. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetQuoteDate
            (
                const char * quoteDate /** quotedate */ 
            );
            /**Returns  the quoter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Quoter
            (
            );
            /**Sets  the quoter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetQuoter
            (
                const NXString & quoter /** quoter */ 
            );
            /**Sets  the quoter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetQuoter
            (
                const char * quoter /** quoter */ 
            );
            /**Returns  the customer. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Customer
            (
            );
            /**Sets  the customer. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetCustomer
            (
                const NXString & customer /** customer */ 
            );
            /**Sets  the customer. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetCustomer
            (
                const char * customer /** customer */ 
            );
            /**Returns  the part no. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int PartNo
            (
            );
            /**Sets  the part no. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetPartNo
            (
                int partNo /** partno */ 
            );
            /**Returns  the blank size.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double BlankSize
            (
            );
            /**Sets  the blank size.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetBlankSize
            (
                double blankSize /** blanksize */ 
            );
            /**Returns  the stations no. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int StationsNo
            (
            );
            /**Sets  the stations no. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetStationsNo
            (
                int stationsNo /** stationsno */ 
            );
            /**Returns  the pitch. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Pitch
            (
            );
            /**Sets  the pitch. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetPitch
            (
                double pitch /** pitch */ 
            );
            /**Returns  the width. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double Width
            (
            );
            /**Sets  the width. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetWidth
            (
                double width /** width */ 
            );
            /**Returns  the strip length. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double StripLength
            (
            );
            /**Sets  the strip length. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetStripLength
            (
                double stripLength /** striplength */ 
            );
            /**Returns  the strip thickness.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double StripThickness
            (
            );
            /**Sets  the strip thickness.  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetStripThickness
            (
                double stripThickness /** stripthickness */ 
            );
            /**Returns  the strip material. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StripMaterial
            (
            );
            /**Sets  the strip material. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetStripMaterial
            (
                const NXString & stripMaterial /** stripmaterial */ 
            );
            /**Sets  the strip material. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetStripMaterial
            (
                const char * stripMaterial /** stripmaterial */ 
            );
            /**Returns  the material utilization. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MaterialUtil
            (
            );
            /**Sets  the material utilization. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetMaterialUtil
            (
                const NXString & materialUtil /** materialutil */ 
            );
            /**Sets  the material utilization. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            void SetMaterialUtil
            (
                const char * materialUtil /** materialutil */ 
            );
            /**Returns  the parts amount. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int PartsAmout
            (
            );
            /**Sets  the parts amount. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetPartsAmout
            (
                int partsAmout /** partsamout */ 
            );
            /**Returns  the complexity factor. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double CompFactor
            (
            );
            /**Sets  the complexity factor. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetCompFactor
            (
                double compFactor /** compfactor */ 
            );
            /** Create a datum plane. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DatumPlane
            (
            );
            /**Returns  the selected outline. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SelOutline
            (
            );
            /**Returns  the work area length. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double WorkAreaLength
            (
            );
            /**Sets  the work area length. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetWorkAreaLength
            (
                double workAreaLength /** workarealength */ 
            );
            /**Returns  the work area width. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double WorkAreaWidth
            (
            );
            /**Sets  the work area width. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetWorkAreaWidth
            (
                double workAreaWidth /** workareawidth */ 
            );
            /**Returns  the design hours. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DesignHours
            (
            );
            /**Sets  the design hours. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDesignHours
            (
                double designHours /** designhours */ 
            );
            /**Returns  the work area width. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DesignPrice
            (
            );
            /**Sets  the work area width. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDesignPrice
            (
                double designPrice /** designprice */ 
            );
            /**Returns  the selected sheet body. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelSheetBody
            (
            );
            /**Returns  the piercing color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * PiercingColor
            (
            );
            /**Sets  the piercing color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetPiercingColor
            (
                NXOpen::NXColor * specifyColor /** specifycolor */ 
            );
            /**Returns  the bending color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BendingColor
            (
            );
            /**Sets  the bending color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetBendingColor
            (
                NXOpen::NXColor * specifyColor /** specifycolor */ 
            );
            /**Returns  the forming color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * FormingColor
            (
            );
            /**Sets  the forming color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetFormingColor
            (
                NXOpen::NXColor * specifyColor /** specifycolor */ 
            );
            /**Returns  the burring color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BurringColor
            (
            );
            /**Sets  the burring color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetBurringColor
            (
                NXOpen::NXColor * specifyColor /** specifycolor */ 
            );
            /**Returns  the cam unit color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CamunitColor
            (
            );
            /**Sets  the cam unit color. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetCamunitColor
            (
                NXOpen::NXColor * specifyColor /** specifycolor */ 
            );
            /**Returns  the object type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::QuickQuotationBuilder::ObjectTypes ObjectType
            (
            );
            /**Sets  the object type. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetObjectType
            (
                NXOpen::Tooling::QuickQuotationBuilder::ObjectTypes objectType /** objecttype */ 
            );
            /**Returns  the outline enlarge times. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double OutlineEnlargeTimes
            (
            );
            /**Sets  the outline enlarge times. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetOutlineEnlargeTimes
            (
                double outlineEnlargeTimes /** outlineenlargetimes */ 
            );
            /**Returns  the distance between sub die base and die base edge in X direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceX
            (
            );
            /**Sets  the distance between sub die base and die base edge in X direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDistanceX
            (
                double distanceX /** distancex */ 
            );
            /**Returns  the distance between sub die base and die base edge in Y direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceY
            (
            );
            /**Sets  the distance between sub die base and die base edge in Y direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetDistanceY
            (
                double distanceY /** distancey */ 
            );
            /**Returns  the insert group material. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::QuickQuotationBuilder::InsertGroupMaterials InsertGroupMaterial
            (
            );
            /**Sets  the insert group material. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetInsertGroupMaterial
            (
                NXOpen::Tooling::QuickQuotationBuilder::InsertGroupMaterials insertGroupMaterial /** insertgroupmaterial */ 
            );
            /** The template configuration. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void TemplateConfig
            (
            );
            /**Returns  the management type for temporary objects. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::QuickQuotationBuilder::ManageTemporaryObjectsTypes ManageTemporaryObjectsType
            (
            );
            /**Sets  the management type for temporary objects. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") */
            public: void SetManageTemporaryObjectsType
            (
                NXOpen::Tooling::QuickQuotationBuilder::ManageTemporaryObjectsTypes manageTemporaryObjectsType /** managetemporaryobjectstype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
