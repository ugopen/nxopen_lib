<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NXOpenUI</name>
    </assembly>
    <members>
        <member name="T:NXOpen.BlockStyler.AngularDimension">
            <summary>  Represents a Angular Dimension block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.AngularDimension.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout member   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.AdaptiveScaleLimits">
            <summary>  Returns or sets the AdaptiveScaleLimits. </summary>  
             <remarks>  
                    If true, indicates that the scale should be adaptive. Only available when WithScale is set to true. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.ExpressionObject">
            <summary>  Returns or sets  the ExpressionObject 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.Formula">
            <summary>  Returns or sets  the Formula 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.HandleFixedSizeFlag">
            <summary>  Returns or sets  the HandleFixedSizeFlag 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.HandleOrigin">
            <summary>  Returns or sets  the HandleOrigin 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.HandleRadius">
            <summary>  Returns or sets  the HandleRadius 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.HandleRadiusOffset">
            <summary>  Returns or sets  the HandleRadiusOffset 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.HandleXAxis">
            <summary>  Returns or sets  the HandleXAxis 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.HandleZAxis">
            <summary>  Returns or sets  the HandleZAxis 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.LineIncrement">
            <summary>  Returns or sets the LineIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the arrow keys on the keyboard. 
                    Only available when WithScale is set to true. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.MaxInclusive">
            <summary>  Returns or sets  the MaxInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.MaximumValue">
            <summary>  Returns or sets  the MaximumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.MinInclusive">
            <summary>  Returns or sets  the MinInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.MinRadius">
            <summary>  Returns or sets  the MinRadius 
             </summary>  
             <remarks> <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.MinimumValue">
            <summary>  Returns or sets  the MinimumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.PageIncrement">
            <summary>  Returns or sets the PageIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the Page Up or Page Down keys on the keyboard. 
                    Only available when WithScale is set to true. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.ShowFocusHandle">
            <summary>  Returns or sets  the ShowFocusHandle 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.ShowHandle">
            <summary>  Returns or sets  the ShowHandle 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX9.0.0.  This call can be safely removed as this is now a no-op.</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.Units">
            <summary>  Returns or sets  the Units 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.Value">
            <summary>  Returns or sets  the Value. </summary>  
             <remarks>  
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.AngularDimension.WithScale">
            <summary>  Returns or sets  the WithScale 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog">
            <summary>  Represents a Dialog  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.DialogMode">
            <summary>  Datatype containing options for showing the dialog  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.BlockDialog.DialogMode.Create">
            <summary>  When the user presses Ok or Apply on the 
                        dialog, the user's inputs are saved in dialog memory and the next time that the dialog 
                        is shown in Create mode, the dialog is initialized using the user's previous 
                        inputs.   </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.BlockDialog.DialogMode.Edit">
            <summary>  The Apply button is not shown.   
                        The user's inputs are not saved in dialog memory and the dialog is not initialized  
                        with the user's previous inputs.  </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Update">
            <summary>  Update callback 
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="stylerItem"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.EnableOKButton">
            <summary>  Callback to enable OK and Apply buttons of the dialog. </summary>  
             <remarks>   
                    Return True or False to enable or disable the buttons respectively. 
            <para> Created in NX7.5.3 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Filter">
            <summary> Filter callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="selectionBlock"> Selection Block</param>  
            <param name="selectedObject"> Tagged Objects</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Ok">
            <summary>  Ok callback 
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Apply">
            <summary> Apply callback 
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Cancel">
            <summary>  Cancel callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Close">
            <summary>  Close callback  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.Initialize">
            <summary>  Initialize callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.DialogShown">
            <summary>  Dialog Shown callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.FocusNotify">
             <summary>Focus notify callback. This is invoked when any selection block on the dialog receives focus.</summary>   
             <remarks>  
            <para> Created in NX6.0.2 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="focusBlock">Selection block receiving or going out of focus</param>  
            <param name="isFocus">Flag representing the focus state of the block. True means that block has recieved the focus, and False suggests that block is going out of focus.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify">
             <summary>Keyboard focus notify callback. This is invoked when any block having keyboard input such as Integer block receives focus.</summary>   
             <remarks>   
                   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="block">Block which recieves focus</param>  
            <param name="isFocus"> Flag representing the focus state of the block. True means that block has recieved the focus, and False suggests that block is going out of focus.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddUpdateHandler(NXOpen.BlockStyler.BlockDialog.Update)">
            <summary>  Adds Update callback handler to the dialog. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddEnableOKButtonHandler(NXOpen.BlockStyler.BlockDialog.EnableOKButton)">
            <summary>  Adds enable-ok-button callback handler to the dialog. </summary>  
             <remarks>   
            <para> Created in NX7.5.3 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddFilterHandler(NXOpen.BlockStyler.BlockDialog.Filter)">
            <summary>  Adds Filter callback handler to the dialog. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddOkHandler(NXOpen.BlockStyler.BlockDialog.Ok)">
            <summary> Adds Ok callback handler to the dialog. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="okCb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddApplyHandler(NXOpen.BlockStyler.BlockDialog.Apply)">
            <summary> Adds Apply callback handler to the dialog. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="applyCb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddCancelHandler(NXOpen.BlockStyler.BlockDialog.Cancel)">
            <summary> Adds Cancel callback handler to the dialog. </summary>  
             <remarks>  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cancelCb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddCloseHandler(NXOpen.BlockStyler.BlockDialog.Close)">
            <summary> Adds Close callback handler to the dialog. </summary>  
             <remarks>  
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="closeCb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddInitializeHandler(NXOpen.BlockStyler.BlockDialog.Initialize)">
            <summary>  Adds Initialize callback handler to the dialog. </summary>  
             <remarks>  The callback function is called while the dialog is being initialized.  The callback is called before applying any user inputs saved in dialog memory. 
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddDialogShownHandler(NXOpen.BlockStyler.BlockDialog.DialogShown)">
            <summary>  Adds Dialog Shown callback handler to the dialog. </summary>  
             <remarks>  The callback function is called before the dialog is shown.  The callback can be used to overwrite  
                    changes that are made during dialog initialization when user inputs saved in dialog memory are applied to the dialog. 
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.Show">
            <summary>  Shows the dialog in <see cref="F:NXOpen.BlockStyler.BlockDialog.DialogMode.Create"> BlockStyler.BlockDialog.DialogMode.Create </see> mode. </summary>  
             <remarks>   This method will not return until the dialog is closed,  
                which typically is when the dialog's OK or Cancel button is pressed. 
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.Show(NXOpen.BlockStyler.BlockDialog.DialogMode)">
            <summary>  Shows the dialog based upon the mode specified in  
                <see cref="T:NXOpen.BlockStyler.BlockDialog.DialogMode"> BlockStyler.BlockDialog.DialogMode </see>. </summary>  
             <remarks>  
                This method will not return until the dialog is closed, which typically is when the dialog's OK or Cancel button is pressed.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="dialogMode">Dialog mode as Create or Edit. <see cref="T:NXOpen.BlockStyler.BlockDialog.DialogMode"> BlockStyler.BlockDialog.DialogMode  </see> </param>  
            <returns>Returns 1: When Back is pressed. 2: When Cancel is pressed. 3: When Ok or Apply is pressed.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.PerformApply">
            <summary>  Performs an Apply and restarts the dialog. </summary>  
             <remarks>  This invokes the apply callback on the dialog.  This method is meant to be called 
                when the dialog is shown and while inside the update callback. 
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.PerformOK">
            <summary>  Performs an OK and closes the dialog. </summary>  
             <remarks>  This invokes the OK callback on the dialog. This method  
                must be called after the <see cref="M:NXOpen.BlockStyler.BlockDialog.Show"> NXOpen.BlockStyler.BlockDialog.Show </see>.  This method will throw an exception if the  
                dialog is not being shown.  
                 
                This method is meant to be called in secondary thread from where the <see cref="M:NXOpen.BlockStyler.BlockDialog.Show"> NXOpen.BlockStyler.BlockDialog.Show </see> is called. 
                The example PerformOk supplied in the ugopen kit walks through how to utilize this method. 
             
                This method cannot be called after <see cref="M:NXOpen.BlockStyler.BlockDialog.Show"> NXOpen.BlockStyler.BlockDialog.Show </see> returns as this may put NX in deadlocked state. 
                 
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.PerformCancel">
            <summary>  Performs a Cancel and closes the dialog. </summary>  
             <remarks>  This invokes the cancel callback on the dialog.  This method  
                must be called after the <see cref="M:NXOpen.BlockStyler.BlockDialog.Show"> NXOpen.BlockStyler.BlockDialog.Show </see>.  This method will throw an exception if the  
                dialog is not being shown.   
                 
                This method is meant to be called in secondary thread from where the <see cref="M:NXOpen.BlockStyler.BlockDialog.Show"> NXOpen.BlockStyler.BlockDialog.Show </see> is called. 
                The example PerformOk supplied in the ugopen kit walks through how to utilize this method. 
             
                This method cannot be called after <see cref="M:NXOpen.BlockStyler.BlockDialog.Show"> NXOpen.BlockStyler.BlockDialog.Show </see> returns as this may put NX in deadlocked state. 
                 
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                     
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddFocusNotifyHandler(NXOpen.BlockStyler.BlockDialog.FocusNotify)">
            <summary>  Adds focus notify callback handler to the dialog. </summary>  
             <remarks>   
            <para> Created in NX6.0.2 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.AddKeyboardFocusNotifyHandler(NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify)">
            <summary>  Adds keyboard focus notify callback handler to the dialog. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.RegisterUserDefinedUIBlock(NXOpen.BlockStyler.BlockDialog,System.String)">
            <summary>  Registers the reusable block with the dialog  
             </summary>  
             <remarks> <para> Created in NX8.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="blockDialog"> Dialog which contains the reusable block  </param>  
            <param name="blockId"> "Block ID" of reusable block </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BlockDialog.GetBlockProperties(System.String)">
            <summary>  Gets the properties of a block  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="blockName">BlockID of the block</param>  
            <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.BlockDialog.TopBlock">
            <summary>  Returns  a composite block that contains all the blocks in the dialog  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.BodyCollector">
            <summary>  Represents a Body Collector block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout member   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.GetSelectModeMembers">
            <summary>  Gets the SelectMode members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.GetDefaultBodyRulesMembers">
            <summary>  Gets the DefaultBodyRules members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.SetCollectorObjectOfBodyCollector(NXOpen.ScCollector)">
            <summary>  Sets the collector object 
             </summary>  
             <remarks> <para> Created in NX1872.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="collectorObject"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.BodyCollector.GetCollectorObjectOfBodyCollector">
            <summary>  Get the collector object 
             </summary>  
             <remarks> <para> Created in NX1872.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.AllowConvergentObject">
            <summary>  Returns or sets  the AllowConvergentObject 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.BlendVirtualCurveOverlay">
            <summary>  Returns or sets  the BlendVirtualCurveOverlay 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.BodyRules">
            <summary>  Returns or sets  the BodyRules 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.DefaultBodyRulesAsString">
            <summary>  Returns or sets  the DefaultBodyRules as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.EntityType">
            <summary>  Returns or sets  the EntityType 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.IncludeSheetBodies">
            <summary>  Returns or sets  the IncludeSheetBodies 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.MaximumScopeAsString">
            <summary>  Returns or sets  the MaximumScope 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.PopupMenuEnabled">
            <summary>  Returns or sets  the PopupMenuEnabled. </summary>  
             <remarks>  
                    If true, displays the popup menu for the body. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.SelectModeAsString">
            <summary>  Returns or sets  the SelectMode as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.BodyCollector.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Button">
            <summary>  Represents a button 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.Button.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout member   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get for given name. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.Button.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Button.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Button.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Button.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Button.HighQualityBitmap">
            <summary>  Returns or sets  the HighQualityBitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Button.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Button.Tooltip">
            <summary>  Returns or sets  the Tooltip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.ChooseExpression">
            <summary>  Represents Choose Expression block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.ChooseExpression.GetExpressionSortTypeMembers">
            <summary>  Gets the ExpressionSortType members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.ChooseExpression.GetExpressionTypeIndexMembers">
            <summary>  Gets the ExpressionTypeIndex members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.ChooseExpression.ExpressionSortTypeAsString">
            <summary>  Returns or sets  the ExpressionSortType as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ChooseExpression.ExpressionTypeIndexAsString">
            <summary>  Returns or sets  the ExpressionTypeIndex as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ChooseExpression.SelectedExpression">
            <summary>  Returns or sets  the SelectedExpression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.CompositeBlock">
            <summary>  A composite block is a block that contains other blocks  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.CompositeBlock.FindBlock(System.String)">
            <summary>  Finds a block contained in the composite block. </summary>  
             <remarks>  Throws an exception if block not present  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="blockName"> Block name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CompositeBlock.GetBlocks">
            <summary>  Gets all the blocks available in the composite block   
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CompositeBlock.GetDialogSizingMembers">
            <summary>  Gets the Dialog Sizing members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CompositeBlock.GetNavigationStyleMembers">
            <summary>  Gets the Navigation Style members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.CompositeBlock.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CompositeBlock.DialogSizing">
            <summary>  Returns or sets  the Dialog Sizing 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CompositeBlock.DialogSizingAsString">
            <summary>  Returns or sets  the Dialog Sizing as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CompositeBlock.LastUpdated">
            <summary>  Returns  the block contained in the composite block that was last updated. </summary>  
             <remarks>  
                For example, if the CompositeBlock is an item contained in a SetList and 
                your update handler is notified that the CompositeBlock has been updated, 
                this method returns which block inside the CompositeBlock has been updated.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CompositeBlock.NavigationStyle">
            <summary>  Returns  the Navigation Style 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CompositeBlock.NavigationStyleAsString">
            <summary>  Returns  the Navigation Style as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.CurveCollector">
            <summary>  Represents a Curve Collector 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.GetSelectModeMembers">
            <summary>  Gets the SelectMode members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.GetDefaultCurveRulesMembers">
            <summary>  Gets the DefaultCurveRules members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.SetCollectorObjectOfCurveCollector(NXOpen.ScCollector)">
            <summary>  Set collector object 
             </summary>  
             <remarks> <para> Created in NX1872.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="collectorObject"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.CurveCollector.GetCollectorObjectOfCurveCollector">
            <summary>  Get the collector object 
             </summary>  
             <remarks> <para> Created in NX1872.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.AllowConvergentObject">
            <summary>  Returns or sets  the AllowConvergentObject 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.AllowInferredCurveSelection">
            <summary>  Returns or sets  the AllowInferredCurveSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.BlendVirtualCurveOverlay">
            <summary>  Returns or sets  the BlendVirtualCurveOverlay 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.CurveRules">
            <summary>  Returns or sets  the CurveRules 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.DefaultCurveRulesAsString">
            <summary>  Returns or sets  the DefaultCurveRules as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.EntityType">
            <summary>  Returns or sets  the EntityType 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.InferredCurveSelection">
            <summary>  Returns or sets  the InferredCurveSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.MaximumScopeAsString">
            <summary>  Returns or sets  the MaximumScope 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.PopupMenuEnabled">
            <summary>  Returns or sets  the PopupMenuEnabled 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.SelectModeAsString">
            <summary>  Returns or sets  the SelectMode as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.CurveCollector.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.DoubleBlock">
            <summary>  Represents a Double block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleBlock.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout member   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the proprty. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleBlock.GetComboOptions">
            <summary>  Gets the ComboOptions 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleBlock.SetComboOptions(System.Double[])">
            <summary>  Sets the ComboOptions 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="optionValue"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleBlock.GetPresentationStyleMembers">
            <summary>  Gets the PresentationStyle members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get for the property. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.AdaptiveScaleLimits">
            <summary>  Returns or sets  the AdaptiveScaleLimits 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.Increment">
            <summary>  Returns or sets  the Increment 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.LineIncrement">
            <summary>  Returns or sets  the LineIncrement 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.MaxInclusive">
            <summary>  Returns or sets  the MaxInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.MaximumValue">
            <summary>  Returns or sets  the MaximumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.MinInclusive">
            <summary>  Returns or sets  the MinInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.MinimumValue">
            <summary>  Returns or sets  the MinimumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.PageIncrement">
            <summary>  Returns or sets  the PageIncrement 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.PresentationStyleAsString">
            <summary>  Returns or sets  the PresentationStyle as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.ReadOnlyValue">
            <summary>  Returns or sets  the ReadOnlyValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.RetainValue">
            <summary>  Returns or sets  the RetainValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.ScaleLimits">
            <summary>  Returns or sets  the ScaleLimits 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.ScaleMaxLimitLabel">
            <summary>  Returns or sets  the ScaleMaxLimitLabel 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.ScaleMinLimitLabel">
            <summary>  Returns or sets  the ScaleMinLimitLabel 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.ShowScaleValue">
            <summary>  Returns or sets  the ShowScaleValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.TitleVisibility">
            <summary>  Returns or sets  the TitleVisibility 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.Value">
            <summary>  Returns or sets  the Value 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleBlock.WrapSpin">
            <summary>  Returns or sets  the WrapSpin 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.DoubleTable">
            <summary>  Represents a Double Table block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.GetMaximumValues(System.Int32@,System.Int32@)">
            <summary>  Gets the MaximumValues  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.SetMaximumValues(System.Int32,System.Int32,System.Double[])">
            <summary>  Sets the MaximumValues 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set to the property </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.GetMinimumValues(System.Int32@,System.Int32@)">
            <summary>  Gets the MinimumValues  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get from the property </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.SetMinimumValues(System.Int32,System.Int32,System.Double[])">
            <summary>  Sets the MinimumValues 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for given property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.GetValues(System.Int32@,System.Int32@)">
            <summary>  Gets the Values in table  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.SetValues(System.Int32,System.Int32,System.Double[])">
            <summary>  Sets the Values in table 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for the property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.GetRowTitles">
            <summary>  Gets the titles of rows in table  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.SetRowTitles(System.String[])">
            <summary>  Sets the titles of rows in table 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="rowTitle">Value to set for the property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.GetColumnTitles">
            <summary>  Gets the Column Tiltles  
             </summary>  
             <remarks> <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Column Title values to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.DoubleTable.SetColumnTitles(System.String[])">
            <summary>  Sets the Column Titles 
             </summary>  
             <remarks> <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnTitles">Column Title values to set for the property. </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleTable.CellWidth">
            <summary>  Returns or sets  the CellWidth 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleTable.ColumnTitles">
            <summary>  Returns or sets  the ColumnTitles 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX1847.0.0.  Use <see cref="M:NXOpen.BlockStyler.DoubleTable.JA_BLOCK_STYLER_DOUBLE_TABLE_get_column_titles(System.IntPtr,System.IntPtr@)"> NXOpen.BlockStyler.DoubleTable.JA_BLOCK_STYLER_DOUBLE_TABLE_get_column_titles </see> instead.</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleTable.Increment">
            <summary>  Returns or sets  the Increment. </summary>  
             <remarks>  Use this property only when Spin is true 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleTable.RetainValue">
            <summary>  Returns or sets  the RetainValue. </summary>  
             <remarks>  If true, indicates that the values in the block would be stored in dialog memory upon OK, Apply or Close.  
            <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleTable.Spin">
            <summary>  Returns or sets  the Spin 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DoubleTable.WrapSpin">
            <summary>  Returns or sets  the WrapSpin. </summary>  
             <remarks>  Use this property only when Spin is true 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.DrawingArea">
            <summary>  Represents a Drawing Area block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DrawingArea.Height">
            <summary>  Returns or sets  the Height 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DrawingArea.Image">
            <summary>  Returns or sets  the Image 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.DrawingArea.Width">
            <summary>  Returns or sets  the Width 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Enumeration">
            <summary>  Represents an Enumeration block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetBalloonTooltipImages">
            <summary>  Gets the BalloonTooltipImages 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.SetBalloonTooltipImages(System.String[])">
            <summary>  Sets the BalloonTooltipImages 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="imageStrings"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetBalloonTooltipTexts">
            <summary>  Gets the BalloonTooltipTexts  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.SetBalloonTooltipTexts(System.String[])">
            <summary>  Sets the BalloonTooltipTexts 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tooltipTextArray">Value to set for the property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetBitmaps">
            <summary>  Gets the Bitmaps  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get for the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.SetBitmaps(System.String[])">
            <summary>  Sets the Bitmaps 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmapsStrings">Value to set for the property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetEnumSensitivity">
            <summary>  Gets EnumSensitivity  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Array of integers with the value 0 or 1. If 1 then the corresponding enum member is sensitive otherwise it is insensitive. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.SetEnumSensitivity(System.Int32[])">
            <summary>  Sets EnumSensitivity 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valueVector"> Array of integers with the value 0 or 1. If 1 then the corresponding enum member is sensitive otherwise it is insensitive. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetEnumVisibility">
            <summary>  Gets EnumVisibility  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Array of integers with the value 0 or 1. If 1 then the corresponding enum member is visible otherwise it is hidden. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.SetEnumVisibility(System.Int32[])">
            <summary>  Sets EnumVisibility 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valueVector"> Array of integers with the value 0 or 1. If 1 then the corresponding enum member is visible otherwise it is hidden. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetInitialShortcuts">
            <summary>  Gets InitialShortcuts. </summary>  
             <remarks>  
                    Specifies the set of shortcuts that are displayed when the dialog is initially shown. Valid only if AllowShortcuts property is true.   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Array of integers with length between 0 and N-1, where N is the number of enumeration options </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.SetInitialShortcuts(System.Int32[])">
            <summary>  Sets InitialShortcuts. </summary>  
             <remarks>  
                    Specifies the set of shortcuts that are displayed when the dialog is initially shown. Valid only if AllowShortcuts property is true. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valueVector"> Array of integers with length between 0 and N-1, where N is the number of enumeration options </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetLayoutMembers">
            <summary>  Gets the Layout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetPresentationStyleMembers">
            <summary>  Gets the PresentationStyle members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.GetEnumMembers">
            <summary> Gets the Enum members. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Array of member names</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Enumeration.SetEnumMembers(System.String[])">
            <summary> Sets the Enum members. </summary>  
             <remarks>  
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="memberStrings">Array of member names</param> 
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.AllowShortcuts">
            <summary>  Returns or sets  the AllowShortcuts. </summary>  
             <remarks>  
                    If true, the 'Show Shortcuts' option is available. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX1872.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.BorderVisibility">
            <summary>  Returns or sets  the BorderVisibility 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.HighQualityBitmap">
            <summary>  Returns or sets  the HighQualityBitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.IconsOnly">
            <summary>  Returns or sets  the IconsOnly. </summary>  
             <remarks>  
                    If true, the enumeration options are shown as bitmaps only  
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.LabelVisibility">
            <summary>  Returns or sets  the LabelVisibility 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.LayoutAsString">
            <summary>  Returns or sets  the Layout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.Localize">
            <summary>  Returns or sets  the Localize. </summary>  
             <remarks>  
                    If true, the Label is translated to current locale language. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.NumberOfColumns">
            <summary>  Returns or sets  the NumberOfColumns 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.PackedColumns">
            <summary>  Returns or sets  the PackedColumns. </summary>  
             <remarks>  
                    If true, each column takes up as much space as required for labels in that column. If false, 
                    the longest label amongst all options dictates the width of all columns. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.PresentationStyleAsString">
            <summary>  Returns or sets  the PresentationStyle as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.RetainValue">
            <summary>  Returns or sets  the RetainValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Enumeration.ValueAsString">
            <summary>  Returns or sets  the Value as string. </summary>  
             <remarks>  
                    Represents the currently selected option of enum. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Explorer">
            <summary>  Represents an Explorer block. </summary>  
             <remarks>   The Explorer block allows for collecting a large number of inputs into a single dialog. 
                The inputs are organized into nodes and sub-nodes on a tree to allow for quick and easy navigation.  The Explorer 
                block provides the ability to have up to 3 levels of nodes in the Navigation Tree.  Each node contains groups and 
                individual inputs that are laid out like standard NX dialogs.  When selecting level 1 and level 2 nodes that do not 
                contain any groups and only contain sub-nodes the first sub-node containing groups is highlighted and its content shown. 
              
            <para> Created in NX9.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Explorer.NotifyNodeSelectedPreCallback">
            <summary>  The NotifyNodeSelectedPre callback notifies a client before navigating to the next node 
                    in the Explorer. </summary>  
             <remarks>   The nextNode parameter for the callback is zero based and represents 
                    the nodes in the Explorer.  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="explorer"> </param>  
            <param name="nextNode"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Explorer.NotifyNodeSelectedPostCallback">
            <summary>  The NotifyNodeSelectedPost callback notifies a client after navigating to the next node 
                    in the Explorer. </summary>  
             <remarks>   The nextNode parameter for the callback is zero based and represents 
                    the nodes in the Explorer.  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="explorer"> </param>  
            <param name="nextNode">  </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Explorer.SetChildMembers(NXOpen.BlockStyler.UIBlock,NXOpen.BlockStyler.UIBlock[])">
            <summary>  Sets the parent member for the child members in the Explorer Navigation Tree. </summary>  
             <remarks>   The maximum 
                    Navigation Tree depth is 3 levels.  An exception is thrown if the parent member depth is 
                    already at the maximum allowed depth.  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="parentMember"> Parent member for the child members. </param>  
            <param name="childMembers"> Child members for the parent member. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Explorer.SetNotifyNodeSelectedPreHandler(NXOpen.BlockStyler.Explorer.NotifyNodeSelectedPreCallback)">
            <summary>  Sets the NotifyNodeSelectedPre handler. </summary>  
             <remarks>   
            <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Explorer.SetNotifyNodeSelectedPostHandler(NXOpen.BlockStyler.Explorer.NotifyNodeSelectedPostCallback)">
            <summary>  Sets the NotifyNodeSelectedPost handler. </summary>  
             <remarks>   
            <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.Explorer.CurrentNode">
            <summary>  Returns or sets  the CurrentNode selected in the Navigation Tree. </summary>  
             <remarks>   
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Explorer.Localize">
            <summary>  Returns or sets  the localization of the block label. </summary>  
             <remarks>  If the label matches an English string in the NX string 
                    localization databse and the Localize property is set to true, then the Label is translated 
                    to the current locale language.  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Explorer.Members">
            <summary>  Returns  the members. </summary>  
             <remarks>   
            <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Explorer.TreeWidth">
            <summary>  Returns or sets  the TreeWidth for the Navigation Tree. </summary>  
             <remarks>   
            <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.ExpressionBlock">
            <summary>  Represents an Expression block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.ExpressionBlock.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.ExpressionBlock.GetDimensionalityMembers">
            <summary> Gets the members of Dimensionality enum. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.AdaptiveScaleLimits">
            <summary>  Returns or sets the AdaptiveScaleLimits. </summary>  
             <remarks>  
                    If true, indicates that the scale should be adaptive. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.DimensionalityAsString">
            <summary>  Returns or sets  the  Dimensionality as string. </summary>  
             <remarks>  It specifies the type of quantity that the expression represents. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.ExpressionObject">
            <summary>  Returns or sets  the ExpressionObject 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.Formula">
            <summary>  Returns or sets  the Formula for the expression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.HasUnitsMenu">
            <summary>  Returns or sets  the HasUnitsMenu. </summary>  
             <remarks>  If true, indicates that a menu will be displayed allowing the user to change units. 
                    This property is relevant only when the Dimensionality property is set to a value that is not without units. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.LineIncrement">
            <summary>  Returns or sets the LineIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the arrow keys on the keyboard. 
                    Only available when PresentationStyle  is set to Scale or ScaleKeyin. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.MaxInclusive">
            <summary>  Returns or sets  the MaxInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.MaximumValue">
            <summary>  Returns or sets  the MaximumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.MinInclusive">
            <summary>  Returns or sets  the MinInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.MinimumValue">
            <summary>  Returns or sets  the MinimumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.PageIncrement">
            <summary>  Returns or sets the PageIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the Page Up or Page Down keys on the keyboard. 
                    Only available when PresentationStyle  is set to Scale or ScaleKeyin. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.RetainValue">
            <summary>  Returns or sets  the RetainValue. </summary>  
             <remarks>  If true, indicates that the values in the block would be stored in dialog memory upon OK, Apply or Close.  
            <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.Units">
            <summary>  Returns or sets  the Units for the expression  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.Value">
            <summary>  Returns or sets  the Value. </summary>  
             <remarks>  
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ExpressionBlock.WithScale">
            <summary>  Returns or sets  the WithScale. </summary>  
             <remarks>  If true, the slider bar is shown. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.FaceCollector">
            <summary>  Represents a Face Collector 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.GetSelectModeMembers">
            <summary>  Gets the SelectMode members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.GetDefaultFaceRulesMembers">
            <summary>  Gets the DefaultFaceRules members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.SetCollectorObjectOfFaceCollector(NXOpen.ScCollector)">
            <summary>  Set collector objects 
             </summary>  
             <remarks> <para> Created in NX1872.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="collectorObject"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.FaceCollector.GetCollectorObjectOfFaceCollector">
            <summary>  Get collector objects 
             </summary>  
             <remarks> <para> Created in NX1872.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.AllowConvergentObject">
            <summary>  Returns or sets  the AllowConvergentObject 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression. </summary>  
             <remarks>  If true, focus automatically progresses to the next selection block. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.BlendVirtualCurveOverlay">
            <summary>  Returns or sets  the BlendVirtualCurveOverlay 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.DefaultFaceRulesAsString">
            <summary>  Returns or sets  the DefaultFaceRules as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.EntityType">
            <summary>  Returns or sets  the EntityType 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.FaceRules">
            <summary>  Returns or sets  the FaceRules 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.MaximumScopeAsString">
            <summary>  Returns or sets  the MaximumScope 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.PopupMenuEnabled">
            <summary>  Returns or sets  the PopupMenuEnabled 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.SelectModeAsString">
            <summary>  Returns or sets  the SelectMode as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FaceCollector.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.FileSelection">
            <summary>  Represents File Selection With Browse block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FileSelection.Filter">
            <summary>  Returns or sets  the Filter 
                    Format of the filter string, for a group of related filter extensions will be "Group 1(*. </summary>  
             <remarks> xxx;*.yyy;*.zzz),Group 2(*.aaa;*.bbb)" e.g."EPLAN files(*.emp;*.ema;*.ems),Simulation Files(*.sim;*.fem)". 
                    For the individual filter extensions ".xxx,.yyy,.zzz" e.g. ".prt,.fem,.sim" will appear as "prt File (*.prt)","sim File (*.sim)" and "fem File (*.fem)" respectively in the "Files of type" of file open dialog. 
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FileSelection.Path">
            <summary>  Returns or sets  the Path 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FileSelection.RetainStringValue">
            <summary>  Returns or sets  the RetainStringValue 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.FolderSelection">
            <summary>  Represents Folder Selection With Browse block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FolderSelection.Path">
            <summary>  Returns or sets  the Path 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.FolderSelection.RetainStringValue">
            <summary>  Returns or sets  the RetainStringValue 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Group">
            <summary>  Represents a Group Block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Group.Column">
            <summary>  Returns or sets  the Column 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Group.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Group.Members">
            <summary>  Returns  the Members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.IntegerBlock">
            <summary>  Represents a Integer block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerBlock.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerBlock.GetComboOptions">
            <summary>  Gets the ComboOptions 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerBlock.SetComboOptions(System.Int32[])">
            <summary>  Sets the ComboOptions 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="optionValue"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerBlock.GetPresentationStyleMembers">
            <summary>  Gets the PresentationStyle member   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get for the property. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.AdaptiveScaleLimits">
            <summary>  Returns or sets  the AdaptiveScaleLimits 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.Increment">
            <summary>  Returns or sets  the Increment 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.LineIncrement">
            <summary>  Returns or sets  the LineIncrement 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.MaxInclusive">
            <summary>  Returns or sets  the MaxInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.MaximumValue">
            <summary>  Returns or sets  the MaximumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.MinInclusive">
            <summary>  Returns or sets  the MinInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.MinimumValue">
            <summary>  Returns or sets  the MinimumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.PageIncrement">
            <summary>  Returns or sets  the PageIncrement 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.PresentationStyleAsString">
            <summary>  Returns or sets  the PresentationStyle as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.ReadOnlyValue">
            <summary>  Returns or sets  the ReadOnlyValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.RetainValue">
            <summary>  Returns or sets  the RetainValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.ScaleLimits">
            <summary>  Returns or sets  the ScaleLimits 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.ScaleMaxLimitLabel">
            <summary>  Returns or sets  the ScaleMaxLimitLabel 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.ScaleMinLimitLabel">
            <summary>  Returns or sets  the ScaleMinLimitLabel 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.ShowScaleValue">
            <summary>  Returns or sets  the ShowScaleValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.TitleVisibility">
            <summary>  Returns or sets  the TitleVisibility 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.Value">
            <summary>  Returns or sets  the Value 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerBlock.WrapSpin">
            <summary>  Returns or sets  the WrapSpin 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.IntegerTable">
            <summary>  Represents a Integer Table block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.GetMaximumValues(System.Int32@,System.Int32@)">
            <summary>  Gets the MaximumValues  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Values to get from the property </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.SetMaximumValues(System.Int32,System.Int32,System.Int32[])">
            <summary>  Sets the MaximumValues 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for given property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.GetMinimumValues(System.Int32@,System.Int32@)">
            <summary>  Gets the MinimumValues  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.SetMinimumValues(System.Int32,System.Int32,System.Int32[])">
            <summary>  Sets the MinimumValues 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for given property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.GetValues(System.Int32@,System.Int32@)">
            <summary>  Gets the Values  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Values to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.SetValues(System.Int32,System.Int32,System.Int32[])">
            <summary>  Sets the Values 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Values to set for the property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.GetRowTitles">
            <summary>  Gets the RowTitles  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.SetRowTitles(System.String[])">
            <summary>  Sets the RowTitles 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="rowTitle">Value to set for the property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.GetColumnTitles">
            <summary>  Gets the Column Tiltles  
             </summary>  
             <remarks> <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Column Title values to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.IntegerTable.SetColumnTitles(System.String[])">
            <summary>  Sets the Column Titles 
             </summary>  
             <remarks> <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnTitles">Column Title values to set for the property. </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerTable.ColumnTitles">
            <summary>  Returns or sets  the ColumnTitles 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX1847.0.0.  Use <see cref="M:NXOpen.BlockStyler.IntegerTable.JA_BLOCK_STYLER_INTEGER_TABLE_get_column_titles(System.IntPtr,System.IntPtr@)"> NXOpen.BlockStyler.IntegerTable.JA_BLOCK_STYLER_INTEGER_TABLE_get_column_titles </see> instead.</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerTable.Increment">
            <summary>  Returns or sets  the Increment. </summary>  
             <remarks>  Use this property only when Spin is true 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerTable.RetainValue">
            <summary>  Returns or sets  the RetainValue. </summary>  
             <remarks>  If true, indicates that the values in the block would be stored in dialog memory upon OK, Apply or Close.  
            <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerTable.Spin">
            <summary>  Returns or sets  the Spin 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.IntegerTable.WrapSpin">
            <summary>  Returns or sets  the WrapSpin. </summary>  
             <remarks>  Use this property only when Spin is true 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Label">
            <summary>  Represents a Label 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.Label.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.Label.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Label.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Label.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Label.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Label.DisplayBitmapLabel">
            <summary>  Returns or sets  the DisplayBitmapLabel 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Label.HighQualityBitmap">
            <summary>  Returns or sets  the HighQualityBitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Label.Localize">
            <summary>  Returns or sets  the Localize. </summary>  
             <remarks>  If true, translates the Label string into the current locale language. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Label.Tooltip">
            <summary>  Returns or sets  the Tooltip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Label.WordWrap">
            <summary>  Returns or sets  the WordWrap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.LayerBlock">
            <summary>  Represents a Layer block 
             </summary>  
             <remarks> <para> Created in NX10.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LayerBlock.LayerOption">
            <summary>  Returns or sets  the Layer Option 
             </summary>  
             <remarks> <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LayerBlock.LayerValue">
            <summary>  Returns or sets  the Layer Value 
             </summary>  
             <remarks> <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LayerBlock.ShowMaintainLayerOption">
            <summary>  Returns or sets  the Show Maintain Layer Option 
                    If set to true, Maintain option is displayed in layer options 
             </summary>  
             <remarks> <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LayerBlock.ShowOriginalLayerOption">
            <summary>  Returns or sets  the Show Original Layer Option 
                    If set to true, Original option is displayed in layer options 
             </summary>  
             <remarks> <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LayerBlock.ShowUserDefinedLayerOption">
            <summary>  Returns or sets  the Show User Defined Layer Option 
                    If set to true, User Defined option is displayed in layer options 
             </summary>  
             <remarks> <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LayerBlock.ShowWorkLayerOption">
            <summary>  Returns or sets  the Show Work Layer Option 
                    If set to true, Work option is displayed in layer options 
             </summary>  
             <remarks> <para> Created in NX10.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.LinearDimension">
            <summary>  Represents a Linear Dimension block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.LinearDimension.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.AdaptiveScaleLimits">
            <summary>  Returns or sets the AdaptiveScaleLimits. </summary>  
             <remarks>  
                    If true, indicates that the scale should be adaptive. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.AutoReverseDuringDrag">
            <summary>  Returns or sets  the AutoReverseDuringDrag. </summary>  
             <remarks>  If true, the linear dimension handle reverses its direction when it is dragged through the 0 value. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.ExpressionObject">
            <summary>  Returns or sets  the ExpressionObject 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.Formula">
            <summary>  Returns or sets  the Formula 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.HandleOrientation">
            <summary>  Returns or sets  the HandleOrientation 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.HandleOrigin">
            <summary>  Returns or sets  the HandleOrigin 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.LineIncrement">
            <summary>  Returns or sets the LineIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the arrow keys on the keyboard. 
                    Only available when PresentationStyle  is set to Scale or ScaleKeyin. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.MaxInclusive">
            <summary>  Returns or sets  the MaxInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.MaximumValue">
            <summary>  Returns or sets  the MaximumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.MinInclusive">
            <summary>  Returns or sets  the MinInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.MinimumValue">
            <summary>  Returns or sets  the MinimumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.PageIncrement">
            <summary>  Returns or sets the PageIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the Page Up or Page Down keys on the keyboard. 
                    Only available when PresentationStyle  is set to Scale or ScaleKeyin. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.ShowFocusHandle">
            <summary>  Returns or sets  the ShowFocusHandle 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.ShowHandle">
            <summary>  Returns or sets  the ShowHandle. </summary>  
             <remarks>  If true, linear dimension handle is visible 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX9.0.0.  This call can be safely removed as this is now a no-op.</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.Units">
            <summary>  Returns or sets  the Units 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.Value">
            <summary>  Returns or sets  the Value. </summary>  
             <remarks>  
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LinearDimension.WithScale">
            <summary>  Returns or sets  the WithScale. </summary>  
             <remarks>  If true, the slider bar is shown. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.LineColorFontWidth">
            <summary>  Represents a Line Width block 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.LineColorFontWidth.GetColorValue">
            <summary>  Gets line color values  
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>color values to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.LineColorFontWidth.SetColorValue(System.Int32[])">
            <summary>  Sets line color values 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="colorValueVector">color values to set for the property. </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.HideSubBlocksAsString">
            <summary>  Returns or sets  the hide sub block. </summary>  
             <remarks>  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.LabelString">
            <summary>  Returns or sets  the Label String in horizontal layout. </summary>  
             <remarks>  
            <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.LayoutAsString">
            <summary>  Returns or sets  the layout. </summary>  
             <remarks>  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.LineFontAvailableOptions">
            <summary>  Returns or sets  the Line Font Available Options 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.LineFontValueAsString">
            <summary>  Returns or sets  the Line Font Value. </summary>  
             <remarks>  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.LineWidthShowDefault">
            <summary>  Returns or sets  the Line width Show Default 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.LineWidthShowDefaultAsOriginal">
            <summary>  Returns or sets  the Line Width Show Default as Original 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.LineWidthShowNoChange">
            <summary>  Returns or sets  the Line Width Show No Change 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.LineWidthUseWideLines">
            <summary>  Returns or sets  the Line Width Use Wide Lines 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineColorFontWidth.ShowLabel">
            <summary>  Returns or sets  the Show Label flag. </summary>  
             <remarks>  
                    If true, the block label is shown in horizontal layout. 
            <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.LineFont">
            <summary>  Represents a Line Width block 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineFont.AvailableOptions">
            <summary>  Returns or sets  the Available Options 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineFont.ShowOptionLabels">
            <summary>  Returns or sets  the show option labels 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineFont.ValueAsString">
            <summary>  Returns or sets  the value 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.LineWidth">
            <summary>  Represents a Line Width block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineWidth.AllowDefaultWidth">
            <summary>  Returns  the AllowDefaultWidth 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineWidth.AllowNoChangeWidth">
            <summary>  Returns  the AllowNoChangeWidth. </summary>  
             <remarks>  If true, no change in width is allowed. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineWidth.LabelVisibility">
            <summary>  Returns or sets  the LabelVisibility 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineWidth.LineWidthValue">
            <summary>  Returns or sets  the LineWidthValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.LineWidth.ShowDefaultAsOriginal">
            <summary>  Returns  the ShowDefaultAsOriginal. </summary>  
             <remarks>  If true, default entry is shown as original. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.ListBox">
            <summary>  Represents a ListBox block  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.ListBox.AddCallback">
            <summary>  Add callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.ListBox.DeleteCallback">
            <summary>  Delete callback. </summary>  
             <remarks>   Return a non-zero value in order to veto the deletion.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.SetAddHandler(NXOpen.BlockStyler.ListBox.AddCallback)">
            <summary>  Sets the Add handler. </summary>  
             <remarks>   This handler is called when the Add button is pressed. 
                The handler is responsible for adding an item to the list.  Nothing will be added to the list unless the handler 
                adds it.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.SetDeleteHandler(NXOpen.BlockStyler.ListBox.DeleteCallback)">
            <summary>  Sets the Delete handler. </summary>  
             <remarks>   If you set this handler, the handler will be 
                called when the Delete button is pressed.  The handler does not need to implement code 
                to delete the item.  The list will delete the selected items if and only if the handler returns 0.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.GetListItems">
            <summary>  Gets the ListItems 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.SetListItems(System.String[])">
            <summary>  Sets the ListItems 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="items"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.GetSelectedItems">
            <summary>  Gets SelectedItems  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> selected items</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.SetSelectedItems(System.Int32[])">
            <summary>  Sets SelectedItems 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="selectedItems"> selected items</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.GetSelectedItemStrings">
            <summary>  Gets the SelectedItemStrings 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.SetSelectedItemStrings(System.String[])">
            <summary>  Sets the SelectedItemStrings. </summary>  
             <remarks>  Selects the list items based on input array of strings. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strings"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.GetSelectedItemBooleans">
            <summary>  Gets the SelectedItemBooleans. </summary>  
             <remarks>  This method returns an integer array of boolen values populated with 0 and 1 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.ListBox.SetSelectedItemBooleans(System.Int32[])">
            <summary>  Sets the SelectedItemStrings. </summary>  
             <remarks>  Selects the list items based on input boolean array. Item is deselcted if value is 0 and selected otherwise. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="items"></param> 
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.AllowDeselectForSingleSelect">
            <summary>  Returns or sets  the AllowDeselectForSingleSelect. </summary>  
             <remarks>  Allows deselection of item using Ctrl+MB1 when single select is true. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.Height">
            <summary>  Returns or sets  the Height 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.IsAddButtonSensitive">
            <summary>  Returns or sets  the IsAddButtonSensitive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.IsDeleteButtonSensitive">
            <summary>  Returns or sets  the IsDeleteButtonSensitive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.Localize">
            <summary>  Returns or sets  the Localize. </summary>  
             <remarks>  If true, translates the Label string into the language of the current locale. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.MaximumHeight">
            <summary>  Returns or sets  the MaximumHeight 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.MaximumStringLength">
            <summary>  Returns or sets  the MaximumStringLength 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.MinimumHeight">
            <summary>  Returns or sets  the MinimumHeight 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.ResizeHeightWithDialog">
            <summary>  Returns or sets  the ResizeHeightWithDialog 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.SelectedItemIndex">
            <summary>  Returns or sets  the SelectedItemIndex. </summary>  
             <remarks>  Valid only if SingleSelect is true. Otherwise -1 is returned. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.SelectedItemString">
            <summary>  Returns or sets  the SelectedItemString. </summary>  
             <remarks>  Valid only if SingleSelect is true. Otherwise empty string is returned. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.ShowAddButton">
            <summary>  Returns or sets  the ShowAddButton. </summary>  
             <remarks>  If true, Add button is shown. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.ShowDeleteButton">
            <summary>  Returns or sets  the ShowDeleteButton. </summary>  
             <remarks>  If true, Delete button is shown. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.ShowMoveUpDownButtons">
            <summary>  Returns or sets  the ShowMoveUpDownButtons. </summary>  
             <remarks>  If true, MoveUp and MoveDown buttons are shown. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ListBox.SingleSelect">
            <summary>  Returns or sets  the SingleSelect. </summary>  
             <remarks>  If true, only single item can be selected. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Microposition">
            <summary>  Represents a Microposition block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.MultilineString">
            <summary>  Represents a Multiline String block  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.MultilineString.GetValue">
            <summary>  Gets the Value 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.MultilineString.SetValue(System.String[])">
            <summary>  Sets the Value 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valueString"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.MultilineString.GetUncommittedValue">
            <summary>  The Uncommitted Value. </summary>  
             <remarks>  Represents the actual value user inputs in.  
            <para> Created in NX1872.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.Height">
            <summary>  Returns or sets  the Height 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.Localize">
            <summary>  Returns or sets  the Localize. </summary>  
             <remarks>  If true, the Label is translated to current locale language 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.MaximumCharactersAccepted">
            <summary>  Returns or sets  the MaximumCharactersAccepted 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.MaximumHeight">
            <summary>  Returns or sets  the MaximumHeight 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.MinimumHeight">
            <summary>  Returns or sets  the MinimumHeight 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.ResizeHeightWithDialog">
            <summary>  Returns or sets  the ResizeHeightWithDialog. </summary>  
             <remarks>  If true, height of block will dynamically change when the dialog is resized. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.RetainValue">
            <summary>  Returns or sets  the RetainValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.ValuesConcatenated">
            <summary>  Returns or sets  the ValuesConcatenated. </summary>  
             <remarks>  Represents single string with values in block concatenated with new-line characters. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.MultilineString.Width">
            <summary>  Returns or sets  the Width 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node">
            <summary> Represents the node created and utilized by <see cref="T:NXOpen.BlockStyler.Tree"> BlockStyler.Tree </see>. </summary>  
             <remarks>  
                The node represents the single row of the tree. 
            <para> Created in NX7.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node.ExpandOption">
            <summary> Represents the Expand/Collapse option </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.ExpandOption.Collapse">
            <summary> Use this option to collapse the node. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.ExpandOption.Expand">
            <summary> Use this option to expand the node. The child node state is unaltered. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.ExpandOption.Toggle">
            <summary> Use this option to collapse the expanded node or expand the collapsed node. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node.Scroll">
            <summary> Represents the scroll position to be applied on node. </summary>  
             <remarks>   
                    Use one of these options to make the node appear in tree window. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.Scroll.Center">
            <summary> Scrolls the tree to bring the node at the center of the tree window </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.Scroll.LeastScroll">
            <summary> Scrolls the tree to minimal to make the node appear in tree window </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.Scroll.MostScroll">
            <summary> Scrolls the tree to maximum to make the node appear in tree window </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node.DragType">
            <summary> Represents the drag type </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DragType.None">
            <summary> No drag </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DragType.All">
            <summary> Drag allowed to any level in the same tree </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Node.DropType">
            <summary> Represents the drop type </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.None">
            <summary> Drop not permitted </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.On">
            <summary> Drop permitted on the target node </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.Before">
            <summary> Drop permitted before the target node </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.After">
            <summary> Drop permitted after the target node </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Node.DropType.BeforeAndAfter">
            <summary> Drop permitted before and after the target node </summary>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.Node.ScrollTo(System.Int32,NXOpen.BlockStyler.Node.Scroll)">
            <summary> Scrolls horizontally and vertically to make the specific column of  
                    node appear on the tree window. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">ColumnId of the column to which tree window scrolls horizontally.</param>  
            <param name="visibleOption">Option to scroll the tree window vertically.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.Expand(NXOpen.BlockStyler.Node.ExpandOption)">
            <summary> Expands/collapses the node 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="expandOption">Expand option</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.GetState">
            <summary> Gets the node state associated with node state icon. </summary>  
             <remarks>  Node state is an iconic  
                   representation, e.g., checked/unchecked icons for corresponding state. Node state  
                   value 1 and 2 represents the standard checked and unchecked state respectively.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Node state</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.SetState(System.Int32)">
            <summary> Sets the node state which is associated with node state icon. </summary>  
             <remarks>  Node state is an iconic  
                   representation, e.g., checked/unchecked state. Setting node state to value other  
                   than 1 and 2 calls BlockStyler.Tree.StateIconName callback to fetch 
                   the icon name. Node state can be set only after the node has been added to TreeList. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="state">Node state</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.GetColumnDisplayText(System.Int32)">
            <summary> Gets the column text for the given columnId. </summary>  
             <remarks>   
                   The text is interpreted as icon if the column display type is   
                   <see cref="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Icon"> BlockStyler.Tree.ColumnDisplay.Icon </see>.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column id of the column.</param>  
            <returns>Text associated with column.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.SetColumnDisplayText(System.Int32,System.String)">
            <summary> Sets the text in the column which corresponds to given columnId. </summary>  
             <remarks>   
                   The text is interpreted as icon if the column display type is   
                   <see cref="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Icon"> BlockStyler.Tree.ColumnDisplay.Icon </see>. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique coulmn id of the column.</param>  
            <param name="columnDisplayText">Text associated with column</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Node.GetNodeData">
             <summary> Gets node data which contains the data in the form of unique name-value pairs.  
                    In this context unique name is termed as property name. There  
                    could me more than one such property name - value pair, but the property name of the primary data  
                    should be named "Data" (case-sensitive). For instance, if a <see cref="T:NXOpen.BlockStyler.Node"> BlockStyler.Node </see> represents a  
                    feature object then property name should be "Data" and the value should be feature object. The primary data is used by NX  
                    for some operations such cross selection.</summary>   
             <remarks>  
                    <para> 
                    Initialy the container or list is empty and it is expected that data  
                    would be added to it. Additional property name - value pair can be added to the container or list, but it should be made sure that 
                    there is no dublicate property name exists in the container or list. The additional data can be seen as  
                    book keeping information for node. At any point the node data can be fetched and value can be extracted 
                    using the corresponding property name. Refer to <see cref="T:NXOpen.DataContainer"> NXOpen.DataContainer </see> on how property name-value pair is added 
                    to the container or list. 
                    </para> 
                     
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Node data which is list of property name - value pair. New property name - value pair can be added to it and existing value can be fetched using corresponding property name.</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.Node.CrossSelection">
            <summary>  Returns or sets the flag indicating whether cross section is allowed. </summary>  
             <remarks>   
                   It is useful when the node contains <see cref="T:NXOpen.DisplayableObject"> NXOpen.DisplayableObject </see> as  
                   data. If the flag is true then the <see cref="T:NXOpen.DisplayableObject"> NXOpen.DisplayableObject </see> is  
                   highlighted, else not. The default value is True 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.DisplayIcon">
            <summary>  Returns or sets the display icon. </summary>  
             <remarks>  This is normal icon positioned before the node text and is  
                   displayed when the node is in unselected state. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.DisplayText">
            <summary>  Returns or sets  the display text of node. </summary>  
             <remarks>  This is same as 0th column text of this node.  
                   Use <see cref="M:NXOpen.BlockStyler.Node.SetColumnDisplayText(System.Int32,System.String)"> BlockStyler.Node.SetColumnDisplayText </see> to fetch the text of other column of the same node.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.FirstChildNode">
            <summary>  Returns the first child node. </summary>  
             <remarks>  Returns a null reference (Nothing in Visual Basic) if child node is not present. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.ForegroundColor">
            <summary>  Returns or sets the text color of the node. </summary>  
             <remarks>  The color is applicable for whole row. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.IsExpanded">
            <summary>  Returns  the flag indicating whether the node is in expanded state 
             </summary>  
             <remarks> <para> Created in NX7.5.3 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.IsInserted">
            <summary>  Returns  the flag indicating whether the node is inserted in <see cref="T:NXOpen.BlockStyler.Tree"> BlockStyler.Tree </see> 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.IsSelected">
            <summary>  Returns  the flag indicating whether the node is in selected state 
             </summary>  
             <remarks> <para> Created in NX7.5.3 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.NextNode">
            <summary>  Returns the next node which might not belong to the same hierarchy. </summary>  
             <remarks>   
                   The next node either is a sibling node or belongs to other root node.  
                   Returns a null reference (Nothing in Visual Basic) if next node is not present 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.NextSelectedNode">
            <summary>  Returns the next selected node in the whole tree hierarchy. </summary>  
             <remarks>  The node on which this method is called does not have to be selected. Returns a null reference (Nothing in Visual Basic) if none of the next nodes are selected. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.NextSiblingNode">
            <summary>  Returns  the next node which belongs to the same hierarchy. </summary>  
             <remarks>   
                   Returns a null reference (Nothing in Visual Basic) null if next sibling node is not present. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.ParentNode">
            <summary>  Returns the parent node. </summary>  
             <remarks>  Returns a null reference (Nothing in Visual Basic) if parent node is not present 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.PreviousNode">
            <summary>  Returns the previous node which might not belong to the same hierarchy. </summary>  
             <remarks>   
                   Returns a null reference (Nothing in Visual Basic) null if previous node is not present 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.PreviousSelectedNode">
            <summary>  Returns the previous selected node in the whole tree hierarchy. </summary>  
             <remarks>  The node on which this method is called does not have to be selected. 
                   Returns a null reference (Nothing in Visual Basic) if none of the previous nodes are selected. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.PreviousSiblingNode">
            <summary>  Returns the previous node which belongs to the same hierarchy. </summary>  
             <remarks>   
                   Returns a null reference (Nothing in Visual Basic) if previous sibling node is not present. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Node.SelectedIcon">
            <summary>  Returns or sets the selected icon. </summary>  
             <remarks>  This icon appears on node selection and is positioned before the node text 
                   replacing the <see cref="P:NXOpen.BlockStyler.Node.DisplayIcon"> BlockStyler.Node.DisplayIcon </see>. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.ObjectColorPicker">
            <summary>  Represents an Object Color Picker Block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.ObjectColorPicker.GetBalloonTooltipLayoutMembers">
            <summary>  Gets theBalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.ObjectColorPicker.GetValue">
            <summary>  Gets the Value  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.ObjectColorPicker.SetValue(System.Int32[])">
            <summary>  Sets the Value 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valueVector">Values to set for the property. </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.ObjectColorPicker.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ObjectColorPicker.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ObjectColorPicker.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ObjectColorPicker.Localize">
            <summary>  Returns or sets  the Localize. </summary>  
             <remarks>  If true, translates the Label string into the language of the current locale. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ObjectColorPicker.NumberSelectable">
            <summary>  Returns or sets  the NumberSelectable. </summary>  
             <remarks>  Represents number of colors that can be selected 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ObjectColorPicker.RetainValue">
            <summary>  Returns or sets  the RetainValue. </summary>  
             <remarks>  If true, block's value will be stored in dialog memory upon OK, Apply or Close. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.OnPathDimension">
            <summary>  Represents a On Path Dimension block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.OnPathDimension.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.OnPathDimension.GetLocationOptionMembers">
            <summary>  Gets the LocationOption members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Values to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.AdaptiveScaleLimits">
            <summary>  Returns or sets the AdaptiveScaleLimits. </summary>  
             <remarks>  
                    If true, indicates that the scale should be adaptive. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.ExpressionObject">
            <summary>  Returns or sets  the ExpressionObject 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.Formula">
            <summary>  Returns or sets  the Formula 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.LineIncrement">
            <summary>  Returns or sets the LineIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the arrow keys on the keyboard. 
                    Only available when PresentationStyle  is set to Scale or ScaleKeyin. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.LocationOptionAsString">
            <summary>  Returns or sets  the LocationOption as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.MaxInclusive">
            <summary>  Returns or sets  the MaxInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.MaximumValue">
            <summary>  Returns or sets  the MaximumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.MinInclusive">
            <summary>  Returns or sets  the MinInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.MinimumValue">
            <summary>  Returns or sets  the MinimumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.OptionMask">
            <summary>  Returns or sets  the OptionMask 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.OptionMenuTitle">
            <summary>  Returns or sets  the OptionMenuTitle 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.PageIncrement">
            <summary>  Returns or sets the PageIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the Page Up or Page Down keys on the keyboard. 
                    Only available when PresentationStyle  is set to Scale or ScaleKeyin. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.Path">
            <summary>  Returns or sets  the Path 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.ShowFocusHandle">
            <summary>  Returns or sets  the ShowFocusHandle 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX9.0.0.  This call can be safely removed as this is now a no-op.</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.Units">
            <summary>  Returns or sets  the Units 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.Value">
            <summary>  Returns or sets  the Value. </summary>  
             <remarks>  
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OnPathDimension.WithScale">
            <summary>  Returns or sets  the WithScale. </summary>  
             <remarks>  If true,the slider bar is shown. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.OrientXpress">
            <summary>  Represents OrientXpress Block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.OrientXpress.GetDirectionMembers">
            <summary>  Gets Direction members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.OrientXpress.GetPlaneMembers">
            <summary>  Gets Plane members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.OrientXpress.GetReferenceMembers">
            <summary>  Gets Reference members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.DirectionAsString">
            <summary>  Returns or sets  the Direction as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.PlaneAsString">
            <summary>  Returns or sets  the Plane as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ReferenceAsString">
            <summary>  Returns or sets  the Reference as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ReferenceCsys">
            <summary>  Returns or sets  the ReferenceCsys 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowAxisSubBlock">
            <summary>  Returns or sets  the ShowAxisSubBlock 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowPlaneSubBlock">
            <summary>  Returns or sets  the ShowPlaneSubBlock 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowReferenceSubBlock">
            <summary>  Returns or sets  the ShowReferenceSubBlock 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowSceneControl">
            <summary>  Returns or sets  the ShowSceneControl 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowXAxis">
            <summary>  Returns or sets  the ShowXAxis 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowXYPlane">
            <summary>  Returns or sets  the ShowXYPlane 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowXZPlane">
            <summary>  Returns or sets  the ShowXZPlane 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowYAxis">
            <summary>  Returns or sets  the ShowYAxis 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowYZPlane">
            <summary>  Returns or sets  the ShowYZPlane 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.OrientXpress.ShowZAxis">
            <summary>  Returns or sets  the ShowZAxis 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.PropertyList">
            <summary>  Represents a list of properties  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.PropertyList.PropertyType">
            <summary>  Represents the property types. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.String">
            <summary> String </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Double">
            <summary> Double </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Logical">
            <summary> Logical </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Integer">
            <summary> Integer </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Enum">
            <summary> Enum </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Strings">
            <summary> Strings </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.UIBlock">
            <summary> UIBlock </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Point">
            <summary> Point </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Vector">
            <summary> Vector </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Bits">
            <summary> Bits </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.TaggedObject">
            <summary> Tagged Object </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Array">
            <summary> Array </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.IntegerMatrix2d">
            <summary> Integer 2d-Matrix </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.DoubleMatrix2d">
            <summary> Double 2d-Matrix </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.TaggedObjectMatrix2d">
            <summary> Tagged Object 2d-Matrix </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.IntegerVector">
            <summary> Integer Vector </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.DoubleVector">
            <summary> Double Vector </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.TaggedObjectVector">
            <summary> Tagged Object Vector </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.File">
            <summary> File </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.SelectionFilter">
            <summary> Selection Filter </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.PropertyType.Undefined">
            <summary> Undefined  </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.PropertyList.ListMode">
            <summary>  Indicates whether the properties in the list are named. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.ListMode.Indexed">
            <summary>  The properties are not named and 
                           must be indexed through an integer index  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.PropertyList.ListMode.Named">
            <summary>  The properties are named  </summary>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                        it is illegal to use the object.  In .NET, this method is automatically 
                        called when the object is deleted by the garbage collector.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPropertyNames">
            <summary>  Returns a list of all the property names   
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Property names </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPropertyType(System.String)">
            <summary>  Returns the property type for given property name   
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Property type. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPropertyType(System.Int32)">
            <summary>  Returns the property type for the Indexed property list. </summary>  
             <remarks>  Don't use this method on Named property list   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index</param>  
            <returns>Property type. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetInteger(System.String,System.Int32)">
            <summary>  Sets the integer value for the given property name. </summary>  
             <remarks>   
                        Exception will be raised if invalid property name is used. 
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="value"> Value to set for given property name</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetInteger(System.String)">
            <summary>  Gets the integer value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetInteger(System.Int32)">
            <summary>  Gets the integer value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index</param>  
            <returns>Value to get for given index </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetLogical(System.String,System.Boolean)">
            <summary> Sets the logical value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetLogical(System.String)">
            <summary>  Gets the logical value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetLogical(System.Int32)">
            <summary>  Gets the logical value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetDouble(System.String,System.Double)">
            <summary> Sets the double value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="value">Value to set for given property name.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDouble(System.String)">
            <summary>  Gets the double value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDouble(System.Int32)">
            <summary>  Gets the double value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index</param>  
            <returns>Value to get for given index.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetString(System.String,System.String)">
            <summary> Sets the string value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetString(System.String)">
            <summary>  Gets the string value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetString(System.Int32)">
            <summary>  Gets the string value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index</param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetEnumAsString(System.String,System.String)">
            <summary>  Sets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnumAsString(System.String)">
            <summary> Gets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnumAsString(System.Int32)">
            <summary> Gets the value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetEnum(System.String,System.Int32)">
            <summary> Sets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnum(System.String)">
            <summary> Gets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnum(System.Int32)">
            <summary> Gets the value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetEnumMembers(System.String,System.String[])">
            <summary> Sets the enum members for the given property of type enum. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="stringArray">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnumMembers(System.String)">
            <summary> Gets the enum members for the given property of type enum. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetEnumMembers(System.Int32)">
            <summary> Gets the enum members for the given property index. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given property index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetStrings(System.String,System.String[])">
            <summary> Sets the strings value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="stringArray">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetStrings(System.String)">
            <summary> Gets the strings value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetStrings(System.Int32)">
            <summary> Gets the strings value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetUIBlock(System.String)">
            <summary> Gets the UI Block for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetUIBlock(System.Int32)">
            <summary> Gets the UI Block for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetPoint(System.String,NXOpen.Point3d)">
            <summary> Sets the point value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="pointSc">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPoint(System.String)">
            <summary> Gets the point value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetPoint(System.Int32)">
            <summary> Gets the point value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetVector(System.String,NXOpen.Vector3d)">
            <summary> Sets the vector value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property</param>  
            <param name="vector">Value to set for given property name.  </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetVector(System.String)">
            <summary> Gets the vector value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetVector(System.Int32)">
            <summary> Gets the vector value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetBits(System.String,System.Int32)">
            <summary> Sets the bits value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="bitsSc">Value to set for given property name.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetBits(System.String)">
            <summary>  Gets the bits value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name.  </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetBits(System.Int32)">
            <summary>  Gets the bits value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">index </param>  
            <returns>Value to get for given index.  </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetTaggedObject(System.String,NXOpen.TaggedObject)">
            <summary> Sets the tagged object for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="taggedSc">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObject(System.String)">
            <summary> Gets the tagged object for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObject(System.Int32)">
            <summary> Gets the tagged object for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index</param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetIntegerVector(System.String)">
            <summary> Gets the integer vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetIntegerVector(System.String,System.Int32[])">
            <summary> Sets the integer vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="intVector">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetIntegerVector(System.Int32)">
            <summary> Gets the integer vector for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex">Index</param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDoubleVector(System.String)">
            <summary> Gets the double vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetDoubleVector(System.String,System.Double[])">
            <summary> Sets the double vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX7.5.3 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="doubleVector">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDoubleVector(System.Int32)">
            <summary> Gets the double vector for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index</param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObjectVector(System.String)">
            <summary> Gets the tagged object vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetTaggedObjectVector(System.String,NXOpen.TaggedObject[])">
            <summary> Sets the tagged object vector for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="tagVector">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetTaggedObjectVector(System.Int32)">
            <summary> Gets the tagged object vector for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index</param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetIntegerMatrix(System.String,System.Int32@,System.Int32@)">
            <summary> Gets the integer matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                      This is a two dimensional array encoded into a single array.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetIntegerMatrix(System.String,System.Int32,System.Int32,System.Int32[])">
            <summary> Sets the integer matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                      This is a two dimensional array encoded into a single array.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetIntegerMatrix(System.Int32,System.Int32@,System.Int32@)">
            <summary> Gets the integer matrix for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used. 
                      This is a two dimensional array encoded into a single array.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDoubleMatrix(System.String,System.Int32@,System.Int32@)">
            <summary> Gets the double matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                        This is a two dimensional array encoded into a single array.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetDoubleMatrix(System.String,System.Int32,System.Int32,System.Double[])">
            <summary> Sets the double matrix for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used. 
                      This is a two dimensional array encoded into a single array.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <param name="matrixValue">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetDoubleMatrix(System.Int32,System.Int32@,System.Int32@)">
            <summary> Gets the double matrix for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used. 
                        This is a two dimensional array encoded into a single array.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <param name="nRows"> Number of Rows in the 2D matrix </param>  
            <param name="nColumns"> Number of Columns in the 2D matrix </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetFile(System.String)">
            <summary> Gets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetFile(System.String,System.String)">
            <summary> Sets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName"> Name of the property </param>  
            <param name="value">Value to set for given property name. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetFile(System.Int32)">
            <summary> Gets the value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetArray(System.String)">
            <summary> Gets the value for the given property name. </summary>  
             <remarks>  Exception will be raised if invalid property name is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <returns>Value to get for given property name. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.GetArray(System.Int32)">
            <summary> Gets the value for the given index. </summary>  
             <remarks>  Exception will be raised if invalid index is used.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyIndex"> Index </param>  
            <returns>Value to get for given index. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.PropertyList.SetSelectionFilter(System.String,NXOpen.Selection.SelectionAction,NXOpen.Selection.MaskTriple[])">
            <summary> Sets the filter for the given property name. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="propertyName">Name of the property </param>  
            <param name="maskAction"> Mask action </param>  
            <param name="maskTriples"> Mask triples </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.PropertyList.Length">
            <summary>  Returns  the length of the list  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.PropertyList.Mode">
            <summary>  Returns  the mode of the list. </summary>  
             <remarks>  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.RadiusDimension">
            <summary>  Represents a Radius Dimension block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.RadiusDimension.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout member   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.AdaptiveScaleLimits">
            <summary>  Returns or sets the AdaptiveScaleLimits. </summary>  
             <remarks>  
                    If true, indicates that the scale should be adaptive. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.ExpressionObject">
            <summary>  Returns or sets  the ExpressionObject 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.Formula">
            <summary>  Returns or sets  the Formula 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.HandleOrientation">
            <summary>  Returns or sets  the HandleOrientation 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.HandleOrigin">
            <summary>  Returns or sets  the HandleOrigin 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.LineIncrement">
            <summary>  Returns or sets the LineIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the arrow keys on the keyboard. 
                    Only available when PresentationStyle  is set to Scale or ScaleKeyin. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.MaxInclusive">
            <summary>  Returns or sets  the MaxInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.MaximumValue">
            <summary>  Returns or sets  the MaximumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.MinInclusive">
            <summary>  Returns or sets  the MinInclusive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.MinimumValue">
            <summary>  Returns or sets  the MinimumValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.PageIncrement">
            <summary>  Returns or sets the PageIncrement value. </summary>  
             <remarks>  
                    Specifies the increment/decrement when the user presses the Page Up or Page Down keys on the keyboard. 
                    Only available when PresentationStyle  is set to Scale or ScaleKeyin. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.ShowFocusHandle">
            <summary>  Returns or sets  the ShowFocusHandle 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.ShowHandle">
            <summary>  Returns or sets  the ShowHandle 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX9.0.0.  This call can be safely removed as this is now a no-op.</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.Units">
            <summary>  Returns or sets  the Units 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.Value">
            <summary>  Returns or sets  the Value. </summary>  
             <remarks>  
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RadiusDimension.WithScale">
            <summary>  Returns or sets  the WithScale 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.ReverseDirection">
            <summary>  Represents Reverse Direction block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ReverseDirection.Direction">
            <summary>  Returns or sets  the Direction. </summary>  
             <remarks>  It specifies the orientation of direction handle. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ReverseDirection.Flip">
            <summary>  Returns or sets  the Flip. </summary>  
             <remarks>  If true, the handle is flipped opposite of the direction. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ReverseDirection.Origin">
            <summary>  Returns or sets  the Origin. </summary>  
             <remarks>  It specifies the origin of direction handle. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.RGBColorPicker">
            <summary>  Represents a RGB Color Picker block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.RGBColorPicker.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout member   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.RGBColorPicker.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RGBColorPicker.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RGBColorPicker.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RGBColorPicker.Localize">
            <summary>  Returns or sets  the Localize. </summary>  
             <remarks>  If true, the Label is translated to current locale language. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RGBColorPicker.RetainValue">
            <summary>  Returns or sets  the RetainValue. </summary>  
             <remarks>  If true, the block's value will be saved in dialog memory upon OK, Apply or Close. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.RGBColorPicker.Value">
            <summary>  Returns or sets  the Value 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.ScrolledWindow">
            <summary>  Represents a Scrolled Window block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ScrolledWindow.Height">
            <summary>  Returns or sets  the Height 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ScrolledWindow.Members">
            <summary>  Returns  the Members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ScrolledWindow.ResizeHeightWithDialog">
            <summary>  Returns or sets  the ResizeHeightWithDialog. </summary>  
             <remarks>  If true, the height of block will dynamically change when the dialog is resized. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.ScrolledWindow.Width">
            <summary>  Returns or sets  the Width 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SectionBuilder">
            <summary>  Represents a Section Builder 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SectionBuilder.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SectionBuilder.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SectionBuilder.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SectionBuilder.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SectionBuilder.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SectionBuilder.GetDefaultCurveRulesMembers">
            <summary>  Gets the DefaultCurveRules members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.AllowConvergentObject">
            <summary>  Returns or sets  the AllowConvergentObject 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.AllowInferredCurveSelection">
            <summary>  Returns or sets  the AllowInferredCurveSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.AllowStopAtIntersectionFollowFillet">
            <summary>  Returns or sets  the AllowStopAtIntersectionFollowFillet 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.AngularTolerance">
            <summary>  Returns or sets  the AngularTolerance 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression. </summary>  
             <remarks>  If true, focus automatically progresses to the next selection block. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.BlendVirtualCurveOverlay">
            <summary>  Returns or sets  the BlendVirtualCurveOverlay 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.ChainWithinFeature">
            <summary>  Returns or sets  the ChainWithinFeature 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.CurveRules">
            <summary>  Returns or sets  the CurveRules 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.DefaultCurveRulesAsString">
            <summary>  Returns or sets  the DefaultCurveRules as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.EntityType">
            <summary>  Returns or sets  the EntityType 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.FollowFillet">
            <summary>  Returns or sets  the FollowFillet 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.InferredCurveSelection">
            <summary>  Returns or sets  the InferredCurveSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.PointOverlay">
            <summary>  Returns or sets  the PointOverlay 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.ShowFlowDirectionAndOriginCurve">
            <summary>  Returns or sets  the ShowFlowDirectionAndOriginCurve 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.SmartUpdateOptionAsString">
            <summary>  Returns or sets  the update option for points created by the point overlay. </summary>  
             <remarks>  
                    <para> 
                    Acceptable values are: 
                    <list type="bullet">  
             
                    <item>  
             <description> <b>Within Modeling</b> The smart object updates within Modeling in time stamp order. For example, if the smart object is referenced by Feature(i), the smart object will update after Feature (i-1) and right before Feature(i).</description>  
             </item> 
                    <item>  
             <description> <b>After Modeling</b> The smart object updates after Modeling. Use for Drafting dimensions and other objects outside Modeling.</description>  
             </item> 
                    <item>  
             <description> <b>After Parent Body</b> The smart object will always update after the last feature on the parent body.</description>  
             </item> 
                    <item>  
             <description> <b>Mixed</b> The smart object will update after the last feature on the parent body when the parent body is in a different part; updates within Modeling in time-stamp order for parents in the same part.</description>  
             </item> 
                    </list> 
                    </para> 
                     
            <para> Created in NX8.5.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.SnapPointTypesEnabled">
            <summary>  Returns or sets  the SnapPointTypesEnabled 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.StopAtIntersection">
            <summary>  Returns or sets  the StopAtIntersection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SectionBuilder.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SelectElement">
            <summary>  Represents a Select Elements block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SelectElement.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectElement.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectElement.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectElement.GetSelectedObjectsSubIDs">
            <summary>  Gets the SelectedObjectSubIDs  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectElement.SetSelectedObjectsSubIDs(System.Int32[])">
            <summary>  Sets the SelectedObjectSubIDs 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="idVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectElement.GetSelectModeMembers">
            <summary>  Gets the SelectMode members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectElement.GetSelectSubTypeMembers">
            <summary>  Gets the SelectSubType members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SelectElement.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression. </summary>  
             <remarks>  If true, focus automatically progresses to next selection block. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectElement.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectElement.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectElement.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectElement.SelectModeAsString">
            <summary>  Returns or sets  the SelectMode as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectElement.SelectSubTypeAsString">
            <summary>  Returns or sets  the SelectSubType as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectElement.ShowSelection">
            <summary>  Returns or sets  the Show Selection. </summary>  
             <remarks>  If true, the graphical selection part of this block is shown. 
            <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX11.0.0.  no replacement for this api</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectElement.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SelectFacetRegion">
            <summary>  Represents a Select Region Selection block 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFacetRegion.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFacetRegion.GetSelectedObjects">
            <summary>  Gets the SelectedFacetRegions  
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFacetRegion.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedFacetRegions 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFacetRegion.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFacetRegion.GetLastDeselectedObjects">
            <summary>  Gets the LastDeselectedFacetRegions  
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFacetRegion.GetLastSelectedObjects">
            <summary>  Gets the LastSelectedFacetRegions  
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.EnabledFacetCollectionRules">
             <summary> Returns or sets  
                    these are the selection intent rules enabled for the facet selection region block  
                    </summary>   
             <remarks>  
                     
                    It returns the following bit values, 
                    <list type="number">  
             
                    <item>  
             <description> 0x1 if only Single Facet rule is enabled,</description>  
             </item> 
                    <item>  
             <description> 0x2 if only Face Facets rule is enabled,</description>  
             </item> 
                    <item>  
             <description> 0x3 if only Flood Fill rule is enabled,</description>  
             </item> 
                    <item>  
             <description> 0x4 if only Color Region rule is enabled</description>  
             </item> 
                    </list> 
                     
                     
            <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.FacetCollector">
             <summary> Returns or sets  
                    the owning facet collector is an object of class <see cref="P:NXOpen.BlockStyler.SelectFacetRegion.FacetCollector"> FacetCollector </see> that holds collected facets of the block 
                    </summary>   
             <remarks>  
                     
            <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.SelectedFacetCollectionRule">
            <summary>  Returns or sets  the active facet collection rule 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.SupportedFacetTypes">
             <summary> Returns or sets  
                    these are type of facets enabled in filters for select facet region block  
                    </summary>   
             <remarks>  
                     
                    It returns following bits, 
                    <list type="number">  
             
                    <item>  
             <description> 0x1 if only convergent facets are enabled,</description>  
             </item> 
                    <item>  
             <description> 0x2 if only NX facets are enabled,</description>  
             </item> 
                    <item>  
             <description> 0x3 if both convergent as well as NX facets are enabled.</description>  
             </item> 
                    </list> 
                     
                     
            <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFacetRegion.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SelectFeature">
            <summary>  Represents a Select Feature block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFeature.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFeature.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFeature.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFeature.GetSelectModeMembers">
            <summary>  Gets the SelectMode members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectFeature.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.BlendVirtualCurveOverlay">
            <summary>  Returns or sets  the BlendVirtualCurveOverlay. </summary>  
             <remarks>  If true, virtual curve is displayed during pre-selection. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.SelectModeAsString">
            <summary>  Returns or sets  the SelectMode as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectFeature.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SelectNode">
            <summary>  Represents a Select Node block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SelectNode.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectNode.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectNode.GetSelectModeMembers">
            <summary>  Gets the SelectMode members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectNode.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SelectNode.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectNode.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectNode.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectNode.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectNode.SelectModeAsString">
            <summary>  Returns or sets  the SelectMode as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectNode.ShowSelection">
            <summary>  Returns or sets  the Show Selection. </summary>  
             <remarks>  If true,the graphical selection part of this block is shown. 
            <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX11.0.0.  no replacement for this api</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectNode.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SelectObject">
            <summary>  Represents a Select Object block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SelectObject.FilterType">
            <summary> Indicates the general filter type for selection. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SelectObject.FilterType.Features">
            <summary>  Filter to select all feature types  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SelectObject.FilterType.Faces">
            <summary>  Filter to select all face types  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SelectObject.FilterType.Edges">
            <summary>  Filter to select all edge types  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SelectObject.FilterType.CurvesAndEdges">
            <summary>  Filter to select all curve and edge types  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SelectObject.FilterType.Components">
            <summary>  Filter to select all components  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SelectObject.FilterType.SolidBodies">
            <summary>  Filter to select all solid bodies  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SelectObject.FilterType.SheetBodies">
            <summary>  Filter to select all sheet bodies  </summary>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.GetSelectModeMembers">
            <summary>  Gets the SelectMode members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.GetLastDeselectedObjects">
            <summary>  Gets the LastDeselectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.GetLastSelectedObjects">
            <summary>  Gets the LastSelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.GetMaximumScopeMembers">
            <summary>  Gets the MaximumScope members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.SetSelectionFilter(NXOpen.Selection.SelectionAction,NXOpen.Selection.MaskTriple[])">
            <summary>  Sets the SelectionFilter 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="maskAction"> Mask action </param>  
            <param name="maskTriples"> Mask triples </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.AddFilter(System.Int32)">
             <summary> 
                    Adds the filters for select object block 
                    </summary>   
             <remarks>  
                     
                    This method takes the integer value of the desired enum values from  
                    <see cref="T:NXOpen.BlockStyler.SelectObject.FilterType"> NXOpen.BlockStyler.SelectObject.FilterType </see>. 
                     
                      
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="filterTypes">Values from <see cref="T:NXOpen.BlockStyler.SelectObject.FilterType"> SelectObject.FilterType </see> for specifying filters </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.AddFilter(NXOpen.BlockStyler.SelectObject.FilterType)">
             <summary> 
                    Adds the filters for select object block  
                    </summary>   
             <remarks>  
                     
                    This method takes the desired enumeration value from 
                    <see cref="T:NXOpen.BlockStyler.SelectObject.FilterType"> NXOpen.BlockStyler.SelectObject.FilterType </see>. 
                     
                     
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="filterTypes">Values from <see cref="T:NXOpen.BlockStyler.SelectObject.FilterType"> SelectObject.FilterType </see> for specifying filters </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.AddFilter(System.Int32,System.Int32,System.Int32)">
            <summary> Adds the filter for select object block using type, subtype and solidBodyType  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="type"> Object type. This can be one of the object types that are listed in  
                                                    uf_object_types.h. For example, for point,  
                                                    use UF_point_type in C++ and 
                                                    NXOpen.UF.UFConstants.UF_point_type in .NET. </param>  
            <param name="subType"> Object subtype. This can either be -1 (UF_all_subtype) for any subtype, or a 
                                                    subtype of the selected type. 
                                                    The subtypes are listed in uf_object_types.h. </param>  
            <param name="solidBodyType"> Solid body subtype. This is only meaningful when the type is  
                                                     UF_solid_type.  In that case, this should be set to 
                                                     one of the solid type constants listed in uf_ui_types.h  
                                                     under "Constants for selection solid_type".  
                                                     When this is used, subtype does not matter. 
                                                     For example, to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and  
                                                     NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectObject.ResetFilter">
            <summary> Resets the filter for select object block  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.AllowConvergentObject">
            <summary>  Returns or sets  the AllowConvergentObject 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.BlendVirtualCurveOverlay">
            <summary>  Returns or sets  the BlendVirtualCurveOverlay. </summary>  
             <remarks>  If true, virtual curve is displayed during preselection. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.MaximumScopeAsString">
            <summary>  Returns or sets  the MaximumScope as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.PickPoint">
            <summary>  Returns  the PickPoint 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.PointOverlay">
            <summary>  Returns or sets  the PointOverlay. </summary>  
             <remarks>  If true,on the fly point creation is allowed. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.SelectModeAsString">
            <summary>  Returns or sets  the SelectMode as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.SmartUpdateOptionAsString">
            <summary>  Returns or sets  the update option for points created by the point overlay. </summary>  
             <remarks>  
                    <para> 
                    Acceptable values are: 
                    <list type="bullet">  
             
                    <item>  
             <description> <b>Within Modeling</b> The smart object updates within Modeling in time stamp order. For example, if the smart object is referenced by Feature(i), the smart object will update after Feature (i-1) and right before Feature(i).</description>  
             </item> 
                    <item>  
             <description> <b>After Modeling</b> The smart object updates after Modeling. Use for Drafting dimensions and other objects outside Modeling.</description>  
             </item> 
                    <item>  
             <description> <b>After Parent Body</b> The smart object will always update after the last feature on the parent body.</description>  
             </item> 
                    <item>  
             <description> <b>Mixed</b> The smart object will update after the last feature on the parent body when the parent body is in a different part; updates within Modeling in time-stamp order for parents in the same part.</description>  
             </item> 
                    </list> 
                    </para> 
                     
            <para> Created in NX8.5.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.SnapPointTypesEnabled">
            <summary>  Returns or sets  the SnapPointTypesEnabled 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SelectObject.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SelectPartFromList">
            <summary>  Represents a Select Part From List block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SelectPartFromList.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SelectPartFromList.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Separator">
            <summary>  Represents a Separator block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SetList">
            <summary>  Represents a SetList block  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SetList.InsertionLocation">
            <summary>  During Insert, indicates whether component should be 
                inserted before or after the insertion location  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SetList.InsertionLocation.Before">
            <summary>   </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.SetList.InsertionLocation.After">
            <summary>   </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SetList.AddCallback">
            <summary>  Add callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.SetList.DeleteCallback">
            <summary>  Delete callback. </summary>  
             <remarks>   Return a non-zero value in order to veto the deletion.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param>  
            <param name="blockToDelete"> The block that is targeted for deletion </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.SetList.ReorderCallback">
            <summary>  Reorder callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="list"> </param>  
            <param name="reorderedBlock"> The block that is moved </param>  
            <param name="oldPosition"> Old position in the list </param>  
            <param name="newPosition"> New position in the list </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetSeed(System.String)">
            <summary>  Sets the seed using a dlx file. </summary>  
             <remarks>   The seed must be set during initialization. 
                Setting the seed will also reset any Add and Delete handlers that has been registered, 
                so SetSeed should be called prior to calling SetAddHandler or SetDeleteHandler.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="dlxFile"> The dlx file used to create the seed </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetAddHandler(NXOpen.BlockStyler.SetList.AddCallback)">
            <summary>  Sets the AddNewSet handler. </summary>  
             <remarks>   If you set this handler, the handler will be 
                called when the Add New Set button is pressed, and the handler will be responsible 
                for adding an item to the list.  Nothing will be added to the list unless the handler 
                adds it.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetDeleteHandler(NXOpen.BlockStyler.SetList.DeleteCallback)">
            <summary>  Sets the Delete handler. </summary>  
             <remarks>   If you set this handler, the handler will be 
                called when the Delete button is pressed.  The handler does not need to implement code 
                to delete the item.  The list will delete the item if and only if the handler returns 0.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetReorderObserver(NXOpen.BlockStyler.SetList.ReorderCallback)">
            <summary>  Sets the Reorder observer. </summary>  
             <remarks>   If you set this observer, the observer will 
                be called after an item is moved by pressing the Move Up and Down buttons. 
                The observer does not need to implement the move up and down behavior and is called 
                after the item has already been moved.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.AddNewSet(System.Boolean)">
            <summary>  Adds an item to the end of the list   
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="copyPropertiesAndSelect"> Indicates whether to copy properties from the  
                            currently selected component and set focus to the new set </param>  
            <returns> The added item </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.Delete(NXOpen.BlockStyler.UIBlock)">
            <summary>  Deletes an item from the list  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="uicomp"> Item to delete </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.Swap(NXOpen.BlockStyler.UIBlock,NXOpen.BlockStyler.UIBlock)">
            <summary>  Swaps the location of two items  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="uicomp1"> Item to swap </param>  
            <param name="uicomp2"> Item to swap </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.InsertNewSet(NXOpen.BlockStyler.UIBlock,NXOpen.BlockStyler.SetList.InsertionLocation,System.Boolean)">
            <summary>  Inserts an item before or after a specified item   
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="location"> Location to insert the new item </param>  
            <param name="insertBeforeOrAfter"> Indicates whether to insert the new item before or after the specified location </param>  
            <param name="copyPropertiesAndSelect"> Indicates whether to copy properties from the  
                            currently selected component and set focus to the new set </param>  
            <returns> The inserted item </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetItemText(NXOpen.BlockStyler.UIBlock,System.String[])">
            <summary>  Sets the text for the specified item. </summary>  
             <remarks>  
                    If the list has a title column, the title column is not included in the item text.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="item"> </param>  
            <param name="strings"> The text.  The text may only contain characters in the locale character set </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetItemText(NXOpen.BlockStyler.UIBlock)">
            <summary>  Gets the text for the specified item. </summary>  
             <remarks>  
                    If the list has a title column, the title column is not included in the item text.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="item"> </param>  
            <returns> The text </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.FindUpdated">
            <summary>  When an update event occurs on the list, this method finds the 
                item in the list that was updated  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetSelected">
            <summary>  Gets the selected items  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetSelected(NXOpen.BlockStyler.UIBlock[])">
            <summary>  Sets the selected items. </summary>  
             <remarks>   If the "Multiple Edit" property is false, 
                no more than one item can be selected  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="items"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetItems">
            <summary>  Gets all the items in the list  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetColumnLabels">
            <summary>  Gets the ColumnLabels  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Values to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetColumnLabels(System.String[])">
            <summary>  Sets the ColumnLabels 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="labels"> Values to set to the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetColumnWidths">
            <summary>  Gets the ColumnWidths  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Values to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.SetColumnWidths(System.Int32[])">
            <summary>  Sets the ColumnWidths 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="width"> Values to set to the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SetList.GetLayoutMembers">
            <summary>  Gets the Layout members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.AddNewSetLabel">
            <summary>  Returns or sets  the AddNewSetLabel. </summary>  
             <remarks>  Specifies the label for AddNewSet button. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.DefaultColumnWidth">
            <summary>  Returns or sets  the DefaultColumnWidth 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.IsAddButtonSensitive">
            <summary>  Returns or sets  the IsAddButtonSensitive 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.LayoutAsString">
            <summary>  Returns or sets  the Layout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.ListExpanded">
            <summary>  Returns or sets  the ListExpanded. </summary>  
             <remarks>  If true, the list is expanded. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.ListHideGroup">
            <summary>  Returns or sets  the ListHideGroup 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.MaximumHeight">
            <summary>  Returns or sets  the MaximumHeight 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.MinimumHeight">
            <summary>  Returns or sets  the MinimumHeight 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.MultipleEdit">
            <summary>  Returns or sets  the MultipleEdit 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.NumberColumnString">
            <summary>  Returns or sets  the NumberColumnString as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.NumberOfColumns">
            <summary>  Returns or sets  the NumberOfColumns 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.ResizeHeightWithDialog">
            <summary>  Returns or sets  the ResizeHeightWithDialog. </summary>  
             <remarks>  If true, height of the block changes dynamically with dialog. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.SeedDlxFile">
            <summary>  Returns or sets  the SeedDlxFile as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.ShowAddNewSet">
            <summary>  Returns or sets  the ShowAddNewSet. </summary>  
             <remarks>  If true, "Add New Set" button is shown. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.ShowColumnHeadings">
            <summary>  Returns or sets  the ShowColumnHeadings 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.ShowRemove">
            <summary>  Returns or sets  the ShowRemove. </summary>  
             <remarks>  If true, "Remove" button is shown. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SetList.ShowReorderControls">
            <summary>  Returns or sets  the ShowReorderControls 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SnapBlockDialog">
            <summary>  Represents a Snap Dialog  
             </summary>  
             <remarks> <para> Created in NX8.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SnapBlockDialog.Add(System.String,System.String,System.String)">
            <summary>  Adds items to the snap dialog  
             </summary>  
             <remarks> <para> Created in NX8.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemType"></param>  
            <param name="itemTitle"></param>  
            <param name="itemValue"></param>  
            <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SnapBlockDialog.AddItem(System.String,System.String)">
            <summary>  Adds block items to the snap dialog  
             </summary>  
             <remarks> <para> Created in NX8.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemType"></param>  
            <param name="itemID"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SnapBlockDialog.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                     
            <para> Created in NX8.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SpecifyAxis">
            <summary>  Represents a Specify Axis block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyAxis.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyAxis.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyAxis.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyAxis.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyAxis.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyAxis.BalloonTooltipPointImage">
            <summary>  Returns or sets  the BalloonTooltipPointImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyAxis.BalloonTooltipPointText">
            <summary>  Returns or sets  the BalloonTooltipPointText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyAxis.BalloonTooltipVectorImage">
            <summary>  Returns or sets  the BalloonTooltipVectorImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyAxis.BalloonTooltipVectorText">
            <summary>  Returns or sets  the BalloonTooltipVectorText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyAxis.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SpecifyCSYS">
            <summary>  Represents a Specify CSYS block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyCSYS.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyCSYS.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyCSYS.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyCSYS.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyCSYS.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyCSYS.GetOutputTypeMembers">
            <summary>  Gets the OutputType members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyCSYS.GetSmartUpdteOptionMembers">
            <summary>  Gets the SmartUpdateOption members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX9.0.1.  Use <see cref="M:NXOpen.BlockStyler.SpecifyCSYS.GetSmartUpdateOptionMembers"> BlockStyler.SpecifyCSYS.GetSmartUpdateOptionMembers </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyCSYS.GetSmartUpdateOptionMembers">
            <summary>  Gets the SmartUpdateOption members  
             </summary>  
             <remarks> <para> Created in NX9.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.OutputTypeAsString">
            <summary>  Returns or sets  the OutputType as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.ShowShortcuts">
            <summary>  Returns or sets  the ShowShortcuts 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.SmartUpdateOptionAsString">
            <summary>  Returns or sets  the SmartUpdateOption as string 
             </summary>  
             <remarks> <para> Created in NX9.0.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.SmartUpdteOptionAsString">
            <summary>  Returns or sets  the SmartUpdateOption as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX9.0.1.  Use <see cref="P:NXOpen.BlockStyler.SpecifyCSYS.SmartUpdateOptionAsString"> BlockStyler.SpecifyCSYS.SmartUpdateOptionAsString </see> instead</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyCSYS.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SpecifyLocation">
            <summary>  Represents a Specify Location block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyLocation.ResetCursorLocation">
            <summary>  Reset the cursor location 
             </summary>  
             <remarks> <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyLocation.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyLocation.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyLocation.CursorLocation">
            <summary>  Returns or sets  the CursorLocation 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyLocation.DisplayTemporaryPoint">
            <summary>  Returns or sets  the DisplayTemporaryPoint 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyLocation.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyLocation.LocationSpecified">
            <summary>  Returns  whether the cursor location has been set or not. </summary>  
             <remarks>  Initially, this will return false,  
                        but will return true after the user has specified a location interactively,  
                        or if  <see cref="P:NXOpen.BlockStyler.SpecifyLocation.CursorLocation"> CursorLocation </see> is set programmatically.  
                        Calling <see cref="M:NXOpen.BlockStyler.SpecifyLocation.ResetCursorLocation"> ResetCursorLocation </see> will also reset this property back to false.  
                        If this property is false, then the value of <see cref="P:NXOpen.BlockStyler.SpecifyLocation.CursorLocation"> CursorLocation </see> is meaningless 
            <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyLocation.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SpecifyOrientation">
            <summary>  Represents Specify Orientation block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyOrientation.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.EnableDoubleClickFlip">
            <summary>  Returns or sets  the EnableDoubleClickFlip. </summary>  
             <remarks>  If true, flipping is allowed when direction handle is double clicked. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.EnableFacetSelection">
            <summary>  Returns or sets  the EnableFacetSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.HasOriginGwif">
            <summary>  Returns or sets  the HasOriginGwif 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.IsOriginSpecified">
            <summary>  Returns or sets  the IsOriginSpecified 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.IsWCSCoordinates">
            <summary>  Returns or sets  the IsWCSCoordinates 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.Origin">
            <summary>  Returns or sets  the Origin 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.VisibleManipulatorHandles">
            <summary>  Returns or sets  the VisibleManipulatorHandles. </summary>  
             <remarks>  It specifies the options to display the handles available on triad. The translation, rotation and origin handles are available. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.XAxis">
            <summary>  Returns or sets  the XAxis 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyOrientation.YAxis">
            <summary>  Returns or sets  the YAxis 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SpecifyPlane">
            <summary>  Represents a Specify Plane block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPlane.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPlane.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPlane.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPlane.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPlane.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.CurrentStepStatusAsString">
            <summary>  Returns  the string specifying current StepStatus  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.ShowShortcuts">
            <summary>  Returns or sets  the ShowShortcuts 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPlane.StepStatusAsString">
            <summary>  Returns or sets  the string specifying the default StepStatus  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SpecifyPoint">
            <summary>  Represents a Specify Point block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPoint.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPoint.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPoint.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPoint.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyPoint.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.EnableFacetSelection">
            <summary>  Returns or sets  the EnableFacetSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.Point">
            <summary>  Returns or sets  the Point 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.SelectionView">
            <summary>  Returns  the SelectionView 
             </summary>  
             <remarks> <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.ShowShortcuts">
            <summary>  Returns or sets  the ShowShortcuts 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.SnapPointTypesEnabled">
            <summary>  Returns or sets  the SnapPointTypesEnabled 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyPoint.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SpecifyVector">
            <summary>  Represents Specify Vector block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyVector.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyVector.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyVector.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyVector.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SpecifyVector.GetStepStatusMembers">
            <summary>  Gets the StepStatus  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.DoubleSide">
            <summary>  Returns or sets  the DoubleSide 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.EnableFacetSelection">
            <summary>  Returns or sets  the EnableFacetSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.EnableReverseDirection">
            <summary>  Returns or sets  the EnableReverseDirection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.Is2DMode">
            <summary>  Returns or sets  the Is2DMode. </summary>  
             <remarks>  If true, vector is created in 2D space. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.Point">
            <summary>  Returns or sets  the Point 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.ShowShortcuts">
            <summary>  Returns or sets  the ShowShortcuts 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SpecifyVector.Vector">
            <summary>  Returns or sets  the Vector 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.StringBlock">
            <summary>  Represents a String block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.StringBlock.KeystrokeCallback">
            <summary>  The keystroke callback that is registered by calling <see cref="M:NXOpen.BlockStyler.StringBlock.SetKeystrokeCallback(NXOpen.BlockStyler.StringBlock.KeystrokeCallback)"> SetKeystrokeCallback </see>. </summary>  
             <remarks>   
                    It will get called for each key stroke the user makes in the String Block input field.  
            <para> Created in NX12.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="stringBlock">String Block object for which keystroke event is invoked</param>  
            <param name="uncommittedValue">The text being typed in the string block at runtime</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.GetBalloonTooltipImages">
            <summary>  Gets the BalloonTooltipImages 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.SetBalloonTooltipImages(System.String[])">
            <summary>  Sets the BalloonTooltipImages 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="imageStrings"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.GetBalloonTooltipTexts">
            <summary>  Gets the BalloonTooltipTexts  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.SetBalloonTooltipTexts(System.String[])">
            <summary>  Sets the BalloonTooltipTexts 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tooltipTextArray">Value to set for the property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.GetListItems">
            <summary>  Gets the ListItems  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.SetListItems(System.String[])">
            <summary>  Sets the ListItems 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemStrings">Value to set to the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.GetPresentationStyleMembers">
            <summary>  Gets the PresentationStyle members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.GetWidthMembers">
            <summary>  Gets the Width members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Values to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.StringBlock.SetKeystrokeCallback(NXOpen.BlockStyler.StringBlock.KeystrokeCallback)">
            <summary>  Sets the keystroke callback for Block Styler String Block. </summary>  
             <remarks>   
            <para> Created in NX12.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback function for keystroke event. </param> 
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.AllowInternationalTextInput">
            <summary>  Returns or sets  the AllowInternationalTextInput 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX12.0.0.  Not required from NX10 onwards. Internationalization is available by default.</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.IsPassword">
            <summary>  Returns or sets  the IsPassword. </summary>  
             <remarks>  If true, characters will not be readable. They will be displayed as *. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.MaxTextLength">
            <summary>  Returns or sets  the MaxTextLength 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.PresentationStyleAsString">
            <summary>  Returns or sets  the PresentationStyle as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.ReadOnlyString">
            <summary>  Returns or sets  the ReadOnlyString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.RetainValue">
            <summary>  Returns or sets  the RetainValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.Tooltip">
            <summary>  Returns or sets  the Tooltip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.Value">
            <summary>  Returns or sets  the Value 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.WideValue">
            <summary>  Returns or sets  the WideValue. </summary>  
             <remarks>  Specifies the International text. This property accepts international characters supported by NX. 
            <para> Created in NX8.5.0 </para>  
             
            <para> Deprecated in NX12.0.0.  Use 'Value' instead which supports Internationalization.</para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.StringBlock.WidthAsString">
            <summary>  Returns or sets  the Width as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SuperPoint">
            <summary>  Represents a Super Point block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SuperPoint.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperPoint.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperPoint.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperPoint.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperPoint.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperPoint.GetDefaultCurveRulesMembers">
            <summary>  Gets the DefaultCurveRules members  
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.AllowConvergentObject">
            <summary>  Returns or sets  the AllowConvergentObject 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.BlendVirtualCurveOverlay">
            <summary>  Returns or sets  the BlendVirtualCurveOverlay. </summary>  
             <remarks>  If true, virtual curve is displayed during preselection. 
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.CurveRules">
            <summary>  Returns or sets  the CurveRules 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.DefaultCurveRulesAsString">
            <summary>  Returns or sets  the DefaultCurveRules as string 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.EntityType">
            <summary>  Returns or sets  the EntityType 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.PointOverlay">
            <summary>  Returns or sets  the PointOverlay 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.ShowFlowDirectionAndOriginCurve">
            <summary>  Returns or sets  the ShowFlowDirectionAndOriginCurve 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.SketchOnPath">
            <summary>  Returns or sets  the SketchOnPath 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.SnapPointTypesEnabled">
            <summary>  Returns or sets  the SnapPointTypesEnabled 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperPoint.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.SuperSection">
            <summary>  Represents a Super Section block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.SuperSection.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout members   
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperSection.GetInterpartSelectionMembers">
            <summary>  Gets the InterpartSelection members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperSection.GetSelectedObjects">
            <summary>  Gets the SelectedObjects  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperSection.SetSelectedObjects(NXOpen.TaggedObject[])">
            <summary>  Sets the SelectedObjects 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="objectVector">Value to set for the property</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperSection.GetStepStatusMembers">
            <summary>  Gets the StepStatus members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.SuperSection.GetDefaultCurveRulesMembers">
            <summary>  Gets the DefaultCurveRules members  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.AllowConvergentObject">
            <summary>  Returns or sets  the AllowConvergentObject 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.AllowInferredCurveSelection">
            <summary>  Returns or sets  the AllowInferredCurveSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.AllowStopAtIntersectionFollowFillet">
            <summary>  Returns or sets  the AllowStopAtIntersectionFollowFillet 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.AngularTolerance">
            <summary>  Returns or sets  the AngularTolerance 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.AutomaticProgression">
            <summary>  Returns or sets  the AutomaticProgression 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.BalloonTooltipImage">
            <summary>  Returns or sets  the BalloonTooltipImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.BalloonTooltipText">
            <summary>  Returns or sets  the BalloonTooltipText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.BlendVirtualCurveOverlay">
            <summary>  Returns or sets  the BlendVirtualCurveOverlay. </summary>  
             <remarks>  If true, virtual curve is displayed during preselection. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.ChainWithinFeature">
            <summary>  Returns or sets  the ChainWithinFeature 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.CreateInterpartLink">
            <summary>  Returns or sets  the CreateInterpartLink 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.Cue">
            <summary>  Returns or sets  the Cue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.CurveRules">
            <summary>  Returns or sets  the CurveRules 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.DefaultCurveRulesAsString">
            <summary>  Returns or sets  the DefaultCurveRules as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.EntityType">
            <summary>  Returns or sets  the EntityType 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.FollowFillet">
            <summary>  Returns or sets  the FollowFillet 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.InferredCurveSelection">
            <summary>  Returns or sets  the InferredCurveSelection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.InterpartSelectionAsString">
            <summary>  Returns or sets  the InterpartSelection as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.LabelString">
            <summary>  Returns or sets  the LabelString 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.PointOverlay">
            <summary>  Returns or sets  the PointOverlay 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.ShowFlowDirectionAndOriginCurve">
            <summary>  Returns or sets  the ShowFlowDirectionAndOriginCurve 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.SketchOnPath">
            <summary>  Returns or sets  the SketchOnPath 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.SmartUpdateOptionAsString">
            <summary>  Returns or sets  the update option for points created by the point overlay. </summary>  
             <remarks>  
                    <para> 
                    Acceptable values are: 
                    <list type="bullet">  
             
                    <item>  
             <description> <b>Within Modeling</b> The smart object updates within Modeling in time stamp order. For example, if the smart object is referenced by Feature(i), the smart object will update after Feature (i-1) and right before Feature(i).</description>  
             </item> 
                    <item>  
             <description> <b>After Modeling</b> The smart object updates after Modeling. Use for Drafting dimensions and other objects outside Modeling.</description>  
             </item> 
                    <item>  
             <description> <b>After Parent Body</b> The smart object will always update after the last feature on the parent body.</description>  
             </item> 
                    <item>  
             <description> <b>Mixed</b> The smart object will update after the last feature on the parent body when the parent body is in a different part; updates within Modeling in time-stamp order for parents in the same part.</description>  
             </item> 
                    </list> 
                    </para> 
                     
            <para> Created in NX8.5.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.SnapPointTypesEnabled">
            <summary>  Returns or sets  the SnapPointTypesEnabled 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.SnapPointTypesOnByDefault">
            <summary>  Returns or sets  the SnapPointTypesOnByDefault 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.StepStatusAsString">
            <summary>  Returns or sets  the StepStatus as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.StopAtIntersection">
            <summary>  Returns or sets  the StopAtIntersection 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.SuperSection.ToolTip">
            <summary>  Returns or sets  the ToolTip 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.TabControl">
            <summary>  Represents a Tab Control layout 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TabControl.GetHiddenTabPages">
            <summary>  Gets the HiddenTabPages. </summary>  
             <remarks>  This method returns an integer array of the HiddenTabPages. 
                    If the number of Tab Pages defined is 5 for a Tab Control, they will be indexed 0 to 4. If the first 
                    and third Tab Pages are hidden, the result returned will be [ 0, -1, 2, -1, -1 ]. Any negative integer 
                    value will show the Tab Page, using -1 simply to demonstrate. 
            <para> Created in NX10.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TabControl.SetHiddenTabPages(System.Int32[])">
            <summary>  Sets the HiddenTabPages entered. </summary>  
             <remarks>  If the number of Tab Pages defined is 5 for a Tab Control, 
                    they will be indexed 0 to 4. Entering an array of [ 0, -1, 2, -1, -1 ] will result in the first and third 
                    Tab Pages being hidden. Any negative integer value will show the Tab Page, using -1 simply to demonstrate. 
            <para> Created in NX10.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="hiddenTabs">Array of Tab Pages defined. To hide a Tab Page, value entered has to map directly to the index being set.</param> 
        </member>
        <member name="P:NXOpen.BlockStyler.TabControl.ActivePage">
            <summary>  Returns or sets  the ActivePage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TabControl.HighQualityBitmap">
            <summary>  Returns or sets  the HighQualityBitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TabControl.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TabControl.Members">
            <summary>  Returns  the Members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TabControl.RetainValue">
            <summary>  Returns or sets  the RetainValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TabControl.TabsPerRow">
            <summary>  Returns or sets  the TabsPerRow 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Table">
            <summary>  Represents a Table layout 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Table.HasColumnLabels">
            <summary>  Returns or sets  the HasColumnLabels 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Table.HighQualityBitmap">
            <summary>  Returns or sets  the HighQualityBitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Table.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Table.Members">
            <summary>  Returns  the Members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Table.NumberOfColumns">
            <summary>  Returns or sets  the NumberOfColumns 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Table.RetainValue">
            <summary>  Returns or sets  the RetainValue. </summary>  
             <remarks> If true, the block's value will be saved in dialog memory upon OK, Apply or Close. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.TextColorFontWidth">
            <summary>  Represents a Line Width block 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TextColorFontWidth.GetColorValue">
            <summary>  Gets text color values  
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>color values to get from the property</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TextColorFontWidth.SetColorValue(System.Int32[])">
            <summary>  Sets text color values 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="colorValueVector">color values to set for the property. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TextColorFontWidth.IsNxFont">
            <summary>  Returns the whether selected font is nx font or standard font. </summary>  
             <remarks>  
            <para> Created in NX12.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.TextColorFontWidth.AvailableFontTypesAsString">
            <summary>  Returns or sets  the available font types. </summary>  
             <remarks>  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TextColorFontWidth.FontValue">
            <summary>  Returns or sets  the font value 
             </summary>  
             <remarks> <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TextColorFontWidth.LayoutAsString">
            <summary>  Returns or sets  the layout. </summary>  
             <remarks>  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TextColorFontWidth.StandardFontStyle">
            <summary>  Returns or sets  the standard font style. </summary>  
             <remarks>  
            <para> Created in NX12.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.TextColorFontWidth.WidthValueAsString">
            <summary>  Returns or sets  the width value. </summary>  
             <remarks>  
            <para> Created in NX9.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Toggle">
            <summary>  Represents a Toggle block 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.Toggle.GetBalloonTooltipLayoutMembers">
            <summary>  Gets the BalloonTooltipLayout member  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property. </returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.BalloonTooltipLayoutAsString">
            <summary>  Returns or sets  the BalloonTooltipLayout as string 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.BalloonTooltipOffImage">
            <summary>  Returns or sets  the BalloonTooltipOffImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.BalloonTooltipOffText">
            <summary>  Returns or sets  the BalloonTooltipOffText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.BalloonTooltipOnImage">
            <summary>  Returns or sets  the BalloonTooltipOnImage 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.BalloonTooltipOnText">
            <summary>  Returns or sets  the BalloonTooltipOnText 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.Bitmap">
            <summary>  Returns or sets  the Bitmap 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.BitmapOnly">
            <summary>  Returns or sets  the BitmapOnly 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.RetainValue">
            <summary>  Returns or sets  the RetainValue 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Toggle.Value">
            <summary>  Returns or sets  the Value 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree">
            <summary> Represents the Tree block in block styler automation. </summary>  
             <remarks>  To start utilizing the tree use 
               methods such as <see cref="M:NXOpen.BlockStyler.Tree.InsertColumn(System.Int32,System.String,System.Int32)"> BlockStyler.Tree.InsertColumn </see>, <see cref="M:NXOpen.BlockStyler.Tree.CreateNode(System.String)"> BlockStyler.Tree.CreateNode </see>, <see cref="M:NXOpen.BlockStyler.Tree.InsertNode(NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Tree.NodeInsertOption)"> BlockStyler.Tree.InsertNode </see> etc. 
               It is must to insert the column on the tree before inserting any node. Node can be created but cannot be inserted without the column available on the tree.  
               Note that some of the methods of this class such as <see cref="M:NXOpen.BlockStyler.Tree.InsertColumn(System.Int32,System.String,System.Int32)"> BlockStyler.Tree.InsertColumn </see> must be used in or after the BlockStyler.BlockDialog.DialogShown callback after  
               which tree is fully constructed and ready for use. 
            <para> Created in NX7.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.NodeInsertOption">
            <summary> Represents the node insert option which is used while inserting the node in tree. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.First">
            <summary> Node is placed first in the hierarchy in which it is inserted. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.Last">
            <summary> Node is placed last in the hierarchy in which it is inserted. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.Sort">
            <summary> Node is sorted according to display text and placed accordingly in the hierarchy in which it is inserted </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.AlwaysFirst">
            <summary> Node is placed first in the hierarchy in which it is inserted. This is same as  
                                                            <see cref="F:NXOpen.BlockStyler.Tree.NodeInsertOption.First"> BlockStyler.Tree.NodeInsertOption.First </see>, except that it  
                                                            remains first after a column sort. If there is more than one node beneath a single parent  
                                                            with this option then they will be sorted relative to each other. 
                                                             </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.NodeInsertOption.AlwaysLast">
            <summary> Node is placed last in the hierarchy in which it is inserted. This is same as  
                                                            <see cref="F:NXOpen.BlockStyler.Tree.NodeInsertOption.Last"> BlockStyler.Tree.NodeInsertOption.Last </see>, except that it  
                                                            remains last after a column sort. If there is more than one node beneath a single parent  
                                                            with this option then they will be sorted relative to each other. 
                                                             </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ColumnSortOption">
            <summary> Represents the column sort option. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnSortOption.Unsorted">
            <summary> Unsorted </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnSortOption.Ascending">
            <summary> Ascending </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnSortOption.Descending">
            <summary> Descending </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ColumnResizePolicy">
            <summary> Represents column resize policy. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnResizePolicy.ConstantWidth">
            <summary>  Constant width </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnResizePolicy.ResizeWithContents">
            <summary> Width resized with contents. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnResizePolicy.ResizeWithTree">
            <summary> Width resize with tree window resize. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ColumnDisplay">
            <summary> Represents the column display type. </summary>  
             <remarks>  If the type is <see cref="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Icon"> BlockStyler.Tree.ColumnDisplay.Icon  </see> 
                  then the provided text is interpreted as icon. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Text">
            <summary> Text </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Icon">
            <summary> Icon </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.BeginLabelEditState">
            <summary> Represents the state to allow/disallow the node label edit. </summary>  
             <remarks>  Use these options in callback BlockStyler.Tree.OnBeginLabelEditCallback. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.BeginLabelEditState.Allow">
            <summary> Use this option to allow label edit. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.BeginLabelEditState.Disallow">
            <summary> Use this option to disallow label edit. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.EndLabelEditState">
            <summary> Represents the state to accept/reject the edited label of node. </summary>  
             <remarks>  Use these options in callback BlockStyler.Tree.OnEndLabelEditCallback. </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.EndLabelEditState.AcceptText">
            <summary> Use this option to accept the edited text. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.EndLabelEditState.RejectText">
            <summary> Use this option to reject the edited text and retain the previous one. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.EditControlOption">
            <summary> Represents the options to accept or reject the changed value. </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.EditControlOption.Accept">
            <summary> Use this option to allow edit. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.EditControlOption.Reject">
            <summary> Use this option to disallow edit. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ControlType">
            <summary> Represents the type of edit options. </summary>  
             <remarks>  Use these options in edit control callback </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ControlType.None">
            <summary> None </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ControlType.ComboBox">
            <summary> Combo box. </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Tree.ControlType.ListBox">
            <summary> List box. </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnExpandCallback">
            <summary> Represents the callback which gets called when the node is expanded. </summary>  
             <remarks>  This is called only once. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnInsertColumnCallback">
             <summary> 
                    Represents the callback which gets called for each node when the column is inserted using  
                    <see cref="M:NXOpen.BlockStyler.Tree.InsertColumn(System.Int32,System.String,System.Int32)"> BlockStyler.Tree.InsertColumn </see>. This callback in not invoked if no node is  
                    available on the tree.  
                   </summary>   
             <remarks>  
                   In this callback it is expected to provide column text for individual node. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="columnID">Column id of the newly inserted column.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.StateIconNameCallback">
            <summary> Represents the callback which gets called when the node state is set  
                   by <see cref="M:NXOpen.BlockStyler.Node.SetState(System.Int32)"> BlockStyler.Node.SetState </see> and the corresponding  
                   state icon of node state is not known. </summary>  
             <remarks>  This callback is expected to provide  
                   the icon name for the node state used in the application. This callback is  
                   called only once for any given node state. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="state">Node state for which callback is expected to return state icon name.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnInsertNodeCallback">
            <summary> Represents the callback which gets called when the node is inserted. </summary>  
             <remarks>  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Newly inserted node</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnPreSelectCallback">
            <summary> Represents the callback which gets called when pre selection is attempted on node. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="columnID">Column id of the column on which pre-selection is attempted.</param>  
            <param name="selected">Select/Deselect flag.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnDeleteNodeCallback">
             <summary>Represents the callback which gets called when the node is deleted from tree. 
                  It is expected to perform only clean-up operation related to the deleted node such as clean-up of Node Data. 
                  </summary>   
             <remarks>  
                  Avoid operations such as node insert, node delete etc, and avoid calling any methods of tree. This is  
                  particularly severe when dialog is closed (through Ok, dialog-reset etc) because by then tree is unavailable and any usage of tree 
                  method would raise exception. As the callback is called for each node, the exception would be raised number of times equaling number of nodes available on tree. 
                   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree</param>  
            <param name="node">Deleted node.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnSelectCallback">
            <summary> Represents the callback which gets called when the node is selected. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="columnID">Column Id of the column on which selection is made.</param>  
            <param name="selected">Select/Deselect flag.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnStateChangeCallback">
            <summary> Represents the callback which gets called when the state icon is clicked. </summary>  
             <remarks>   
                   This callback does not get called when state is changed using the method  
                   <see cref="M:NXOpen.BlockStyler.Node.SetState(System.Int32)"> BlockStyler.Node.SetState </see>. The node state can be  
                   changed in this callback using <see cref="M:NXOpen.BlockStyler.Node.SetState(System.Int32)"> BlockStyler.Node.SetState </see>,  
                   e.g., node can be changed from checked state to unchecked state and vice-versa. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node.</param>  
            <param name="state">Current node state.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ToolTipTextCallback">
            <summary> Represents the callback which gets called when tree seeks the tooltip. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node for which tooltip is sought.</param>  
            <param name="columnID">Column Id of the column for which tooltip is sought.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.ColumnSortCallback">
             <summary>Represents the callback which gets called when column sort is attempted. The possible return values are 0, positive and 
                    negative value, suggesting respectively that both nodes are same, first node greater than second, and first node smaller than second. 
                   </summary>   
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="columnID">Column Id of the column on which sort is attempted.</param>  
            <param name="node1">First Node for comparision.</param>  
            <param name="node2">Second Node for comparision.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback">
            <summary> Represents the callback which gets called when label edit is attempted on any column. </summary>  
             <remarks>  The label edit is allowed/disallowed  
                   based on return value of this callback. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being edited.</param>  
            <param name="columnID">Column Id of the column on which label edit is performed.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnEndLabelEditCallback">
            <summary> Represents the callback which gets called when label edit is completed on any column. </summary>  
             <remarks>   
                   The edited label is accepted/rejected based on return value of this callback. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being edited.</param>  
            <param name="columnID">Column Id of the column on which label edit is performed.</param>  
            <param name="editedText">Text after edit.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.AskEditControlCallback">
             <summary>Represents the callback which gets called when edit is attempted on any cell. Edit-control is  
                   made available on the cell based on control type returned by this callback. 
                   </summary>   
             <remarks>  
                   Use <see cref="M:NXOpen.BlockStyler.Tree.SetEditOptions(System.String[],System.Int32)"> BlockStyler.Tree.SetEditOptions </see> in this callback to show the options in the  
                   edit-control. Further BlockStyler.Tree.OnEditOptionSelectedCallback is called when option is selected. 
                   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being edited.</param>  
            <param name="columnID">Column Id of the column on which edit is performed.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback">
            <summary> Represents the callback which gets called when user selects an option in edit-control set by  
                   BlockStyler. </summary>  
             <remarks> Tree.AskEditControlCallback. If returned <see cref="F:NXOpen.BlockStyler.Tree.EditControlOption.Accept"> BlockStyler.Tree.EditControlOption.Accept </see>  
                   then the edited option/text is accepted else it is rejected and old option/text remains.     
                   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being edited.</param>  
            <param name="columnID">Column Id of the column on which edit is performed.</param>  
            <param name="selectedOptionID">Index of the selected option. -1 value suggests that edited text is not among the available options in edit-control;  
                    particularly useful when edit-control type is <see cref="F:NXOpen.BlockStyler.Tree.ControlType.ListBox"> BlockStyler.Tree.ControlType.ListBox </see>.</param>  
            <param name="selectedOptionText">The text being edited.</param>  
            <param name="type">Edit-control type </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnMenuCallback">
            <summary> Represents the callback which gets called when MB3 or right click is attempted on node or tree. </summary>  
             <remarks>  Value of Node parameter is a null reference (Nothing in Visual Basic) if  
                   MB3 is attempted on area other than node. This distinction allows to have separate menu for node and tree. 
                   <para> 
                   The menu can be made available using two methods <see cref="M:NXOpen.BlockStyler.Tree.CreateMenu"> BlockStyler.Tree.CreateMenu </see> and  
                   <see cref="M:NXOpen.BlockStyler.Tree.SetMenu(NXOpen.BlockStyler.TreeListMenu)"> BlockStyler.Tree.SetMenu </see>. Subsequently BlockStyler.Tree.OnMenuSelectionCallback 
                   is invoked after the menu item is selected.      
                   </para> 
                   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node on which MB3 is attempted or menu is invoked. a null reference (Nothing in Visual Basic) if MB3 is attempted on area other than node.</param>  
            <param name="columnID">Column Id of the column on which MB3 is attempted</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnMenuSelectionCallback">
            <summary> Represents the callback which gets called when one of the menu option is selected. </summary>  
             <remarks>   
                   Refer to callback BlockStyler.Tree.OnMenuCallback to make available the menu. 
                    
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node on which MB3 is attempted or menu is invoked. a null reference (Nothing in Visual Basic) if MB3 is attempted on area other than node.</param>  
            <param name="menuItemID">Menu item Id representing the selected menu item. This menu Id corresponds to the menu item added to the <see cref="T:NXOpen.BlockStyler.TreeListMenu"> BlockStyler.TreeListMenu </see> using <see cref="M:NXOpen.BlockStyler.TreeListMenu.AddMenuItem(System.Int32,System.String)"> BlockStyler.TreeListMenu.AddMenuItem </see>.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.IsDragAllowedCallback">
            <summary> Represents the callback which gets called when node is dragged. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being dragged.</param>  
            <param name="columnID">Column Id of the column where drag is attempted.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.IsDropAllowedCallback">
             <summary> 
                   Represents the callback which gets called when an attempt is made to drop the node on any target node. If multiple nodes  
                   are selected and dragged then this callback is invoked for each of the selected nodes.  
                   </summary>   
             <remarks>  
                   If node is dragged using MB3 then the callback BlockStyler.Tree.OnDropMenuCallback  
                   is invoked which is expected to provide and show the menu. Subsequently, BlockStyler.Tree.OnDropCallback 
                   might get invoked. 
                   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node being dragged and dropped on target node.</param>  
            <param name="columnID">Column Id of the column from where node is dragged.</param>  
            <param name="targetNode">Target node on which node is dropped.</param>  
            <param name="targetColumnID">Column Id of the column where node is dropped.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnDropCallback">
            <summary> Represents the callback which gets called when nodes are dropped on any target node. </summary>  
             <remarks>  This callback is invoked irrespective of case  
                   whether nodes are dragged using MB1 or MB3. If nodes are dragged using MB3 then BlockStyler.Tree.OnDropMenuCallback is called 
                   prior to the invocation of this callback. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Nodes dropped on any target node. The number of nodes might not be same as number of selected nodes as some of the selected node might disallow to drop itself on target node.</param>  
            <param name="columnID">Column Id of the column from where nodes are dragged.</param>  
            <param name="targetNode">Target node on which dragged nodes are dropped.</param>  
            <param name="targetColumnID">Column Id of the column where nodes are dropped.</param>  
            <param name="dropType">Indicates whether the nodes are dropped On, Before or After target node</param>  
            <param name="dropMenuItemId">Menu item Id representing the selected menu item. This menu Id corresponds to the menu item added  
                                                 to the <see cref="T:NXOpen.BlockStyler.TreeListMenu"> BlockStyler.TreeListMenu </see> using <see cref="M:NXOpen.BlockStyler.TreeListMenu.AddMenuItem(System.Int32,System.String)"> BlockStyler.TreeListMenu.AddMenuItem </see>.  
                                                 Refer to callback BlockStyler.Tree.OnDropMenuCallback to make available the menu while node drop.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnDropMenuCallback">
            <summary> Represents the callback to show the menu when nodes are dragged using MB3 or right mouse click, and dropped on any target node. </summary>  
             <remarks>   
                   
                  <para> 
                   The menu can be made available using two methods <see cref="M:NXOpen.BlockStyler.Tree.CreateMenu"> BlockStyler.Tree.CreateMenu </see> and  
                   <see cref="M:NXOpen.BlockStyler.Tree.SetMenu(NXOpen.BlockStyler.TreeListMenu)"> BlockStyler.Tree.SetMenu </see>. Subsequently, menu is shown and selected menu option is passed as paremeter in  
                   the callback BlockStyler.Tree.OnDropCallback        
                  </para>        
                    
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node on which drag initiated.</param>  
            <param name="columnID">Column Id of the column from where drag initiated</param>  
            <param name="targetNode">Target node on which dragged node is dropped.</param>  
            <param name="targetColumnID">Column Id of the column where nodes are dropped.</param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Tree.OnDefaultActionCallback">
            <summary> Represents the callback which gets called when double clicked is performed on the node. </summary>  
             <remarks>  
            <para> Created in NX7.5.2 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="tree">Tree.</param>  
            <param name="node">Node on which Double Click is performed.</param>  
            <param name="columnID">Column Id of the column on which double click is performed.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.CreateNode(System.String)">
            <summary> Creates the node but does not insert it. </summary>  
             <remarks>  Use <see cref="M:NXOpen.BlockStyler.Tree.InsertNode(NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Tree.NodeInsertOption)"> BlockStyler.Tree.InsertNode </see> to insert  
                    the node.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="displayText">Specifies the display text of the node.</param>  
            <returns>Node</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.InsertNode(NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Node,NXOpen.BlockStyler.Tree.NodeInsertOption)">
            <summary> Inserts the node. </summary>  
             <remarks>  Subsequently BlockStyler.Tree.OnInsertNodeCallback is called.  
                   Reinserting the node in same or different tree is not allowed. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="newNode">New Node.</param>  
            <param name="parentNode">Parent node under which new node is supposed to be placed. To add the first node, pass as NXOpen.BlockStyler.Node.Null </param>  
            <param name="afterNode">New node placed after this node. If there is mismatch between parent-node and after-node then former is honoured. To add the first node, pass as NXOpen.BlockStyler.Node.Null</param>  
            <param name="nodeInsertOption">Node insert option. Provide the value if after node is a null reference (Nothing in Visual Basic).  
                                                                        This value is not considered if a valid after-node is supplied.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.DeleteNode(NXOpen.BlockStyler.Node)">
            <summary> Deletes the node from tree. </summary>  
             <remarks>  Further usage of deleted node is illegal. The last place where node can be used is in  
                  BlockStyler.Tree.OnDeleteNodeCallaback callback which gets called when node is deleted. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="node">Node to delete</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SelectNode(NXOpen.BlockStyler.Node,System.Boolean,System.Boolean)">
            <summary> Selects the provided node. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="node">Node to be selected</param>  
            <param name="isSelect">Select/Deselect flag. If true, the provided node is selected, else deselected.</param>  
            <param name="isOtherNodeAffected">Flag indicating whether selection of other nodes is affected. If true,  
                                                          all the previous selected nodes are deselected, else unaffected.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SelectNodes(NXOpen.BlockStyler.Node[],System.Boolean,System.Boolean)">
            <summary> Selects the provided nodes. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="node">Nodes to be selected</param>  
            <param name="isSelect">Select/Deselect flag. If true, the provided nodes are selected, else deselected.</param>  
            <param name="isOtherNodeAffected">Flag indicating whether selection of other nodes is affected. If true,  
                                                          all the previous selected nodes are deselected, else remain so.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.InsertColumn(System.Int32,System.String,System.Int32)">
            <summary>  Inserts a column. </summary>  
             <remarks>  
                    
                   Inserts a column with following defaults:  
                   <list type="bullet">  
             
                   <item>  
             <description><see cref="T:NXOpen.BlockStyler.Tree.ColumnSortOption"> BlockStyler.Tree.ColumnSortOption </see> as <see cref="F:NXOpen.BlockStyler.Tree.ColumnSortOption.Ascending"> BlockStyler.Tree.ColumnSortOption.Ascending </see></description>  
             </item> 
                   <item>  
             <description>Column sortable as True</description>  
             </item> 
                   <item>  
             <description>Column visible as True</description>  
             </item> 
                   <item>  
             <description><see cref="T:NXOpen.BlockStyler.Tree.ColumnDisplay"> BlockStyler.Tree.ColumnDisplay </see> as <see cref="F:NXOpen.BlockStyler.Tree.ColumnDisplay.Text"> BlockStyler.Tree.ColumnDisplay.Text </see></description>  
             </item> 
                   <item>  
             <description><see cref="T:NXOpen.BlockStyler.Tree.ColumnResizePolicy"> BlockStyler.Tree.ColumnResizePolicy </see> as <see cref="F:NXOpen.BlockStyler.Tree.ColumnResizePolicy.ConstantWidth"> BlockStyler.Tree.ColumnResizePolicy.ConstantWidth </see></description>  
             </item> 
                   </list> 
                   The new column is placed after the last available column. If no column is available then the inserted one becomes the first column of the tree. 
                  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column. Any further interaction with the column is done with this column Id.</param>  
            <param name="columnTitle">Column header title.</param>  
            <param name="columnWidth">Providing value less than zero will set the default width of 0 for the column.</param>  
            <returns>Absolute column position.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnTitle(System.Int32)">
            <summary> Gets the column title. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Column header title.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnTitle(System.Int32,System.String)">
            <summary> Sets the column title. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="columnHeaderTitle">Column header title.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnId(System.Int32)">
            <summary> Gets the column Id for the provided column position. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnPosition">Column position.</param>  
            <returns>Unique column Id associated with the column.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnPosition(System.Int32)">
            <summary> Gets column position. </summary>  
             <remarks>  Returns -1 if no column is associated with the provided column Id.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Column position.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnWidth(System.Int32)">
            <summary> Gets column width  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Column width.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnWidth(System.Int32,System.Int32)">
            <summary> Sets the column width 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="columnWidth">Column width.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnSortOption(System.Int32)">
            <summary> Gets the column sort option. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Column sort option.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnSortOption(System.Int32,NXOpen.BlockStyler.Tree.ColumnSortOption)">
            <summary> Sets the column sort option. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="sortOption">Column sort option.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnSortable(System.Int32)">
            <summary> Gets the flag indicating whether the column is sortable. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Flag indicating whether the column is sortable.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnSortable(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the column is sortable. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="isSortable">Flag indicating whether the column is sortable.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnVisible(System.Int32)">
            <summary> Gets the flag indicating whether the column is visible. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Flag indicating whether the column is visible.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnVisible(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the column is visible 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column</param>  
            <param name="isVisible">Flag indicating whether the column is visible</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnDisplayType(System.Int32)">
            <summary> Gets the display type of the column. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Display type.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnDisplayType(System.Int32,NXOpen.BlockStyler.Tree.ColumnDisplay)">
            <summary> Sets the display type of the column. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <param name="displayType">Display type.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetColumnResizePolicy(System.Int32)">
            <summary> Gets the column resize policy. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column.</param>  
            <returns>Resize policy.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnResizePolicy(System.Int32,NXOpen.BlockStyler.Tree.ColumnResizePolicy)">
            <summary> Sets the column resize policy. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="columnID">Unique column Id associated with the column</param>  
            <param name="resizePolicy">Resize policy</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetPreSelectionTimeOut(System.Double)">
            <summary> Sets the pre selection time out. </summary>  
             <remarks>  BlockStyler.Tree.OnPreSelectCallback is called based on this value. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="timeOut">Time in millisecond</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetSelectedNodes">
            <summary> Gets the selected nodes. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Selected nodes.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.Redraw(System.Boolean)">
            <summary> Freezes the tree if the value is set to False which implies that no changes would occur  
                   in the tree after this point. </summary>  
             <remarks>  The tree remains in that state until the value is set to True,  
                   after which the tree completely updates itself with the changes performed on it in between  
                   the two calls. Use this method to efficiently utilize the tree when it is subjected to enourmous changes. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="redraw">Flag corresponds to freeze/unfreeze of tree changes.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnExpandHandler(NXOpen.BlockStyler.Tree.OnExpandCallback)">
            <summary> Sets the on expand callback to the tree. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnInsertColumnHandler(NXOpen.BlockStyler.Tree.OnInsertColumnCallback)">
            <summary> Sets the on insert column callback to the tree. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetStateIconNameHandler(NXOpen.BlockStyler.Tree.StateIconNameCallback)">
            <summary> Sets the state icon name callback. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnInsertNodeHandler(NXOpen.BlockStyler.Tree.OnInsertNodeCallback)">
            <summary>  Sets the on insert node callback. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnPreSelectHandler(NXOpen.BlockStyler.Tree.OnPreSelectCallback)">
            <summary>  Sets on pre select callback  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnDeleteNodeHandler(NXOpen.BlockStyler.Tree.OnDeleteNodeCallback)">
            <summary>  Sets on delete node callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnSelectHandler(NXOpen.BlockStyler.Tree.OnSelectCallback)">
            <summary>  Sets the on select node callback  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnStateChangeHandler(NXOpen.BlockStyler.Tree.OnStateChangeCallback)">
            <summary> Sets the on state change callback. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetToolTipTextHandler(NXOpen.BlockStyler.Tree.ToolTipTextCallback)">
            <summary> Sets the tool tip callback. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetColumnSortHandler(NXOpen.BlockStyler.Tree.ColumnSortCallback)">
            <summary> Sets the column sort callback. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnBeginLabelEditHandler(NXOpen.BlockStyler.Tree.OnBeginLabelEditCallback)">
            <summary> Sets the on-begin-label-edit callback 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnEndLabelEditHandler(NXOpen.BlockStyler.Tree.OnEndLabelEditCallback)">
            <summary> Sets the on-end-label-edit callback 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetAskEditControlHandler(NXOpen.BlockStyler.Tree.AskEditControlCallback)">
            <summary> Sets the node-edit-control callback 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetEditOptions(System.String[],System.Int32)">
             <summary>Sets the options in edit-control. This method must be used 
                   in BlockStyler.Tree.AskEditControlCallback to make available the options in edit-control. 
                   </summary>   
             <remarks>  
                   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="stringArray">Options to be made availabe in edit-control</param>  
            <param name="defaultIndex"> Index for default selection. This is zero based, for instance if it is set to 1 then 2nd option is selected by default during edit operation.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnEditOptionSelectedHandler(NXOpen.BlockStyler.Tree.OnEditOptionSelectedCallback)">
            <summary> Sets the on-end-label-edit callback 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnMenuHandler(NXOpen.BlockStyler.Tree.OnMenuCallback)">
            <summary>  Sets the on menu callback  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnMenuSelectionHandler(NXOpen.BlockStyler.Tree.OnMenuSelectionCallback)">
            <summary>  Sets the on menu selection callback  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetIsDragAllowedHandler(NXOpen.BlockStyler.Tree.IsDragAllowedCallback)">
            <summary> Sets the callback handler for node drag 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetIsDropAllowedHandler(NXOpen.BlockStyler.Tree.IsDropAllowedCallback)">
            <summary> Sets the callback handler for node drop 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnDropHandler(NXOpen.BlockStyler.Tree.OnDropCallback)">
            <summary> Sets the callback handler for node drop 
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnDropMenuHandler(NXOpen.BlockStyler.Tree.OnDropMenuCallback)">
            <summary> Sets the callback handler for on drop menu. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetOnDefaultActionHandler(NXOpen.BlockStyler.Tree.OnDefaultActionCallback)">
            <summary>  Sets the on select node callback  
             </summary>  
             <remarks> <para> Created in NX7.5.2 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb">Callback.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.CreateMenu">
            <summary>  Creates the menu. </summary>  
             <remarks>  Use <see cref="M:NXOpen.BlockStyler.Tree.SetMenu(NXOpen.BlockStyler.TreeListMenu)"> BlockStyler.Tree.SetMenu </see> to set the created menu.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.SetMenu(NXOpen.BlockStyler.TreeListMenu)">
            <summary>  Sets the menu, resulting the menu to appear on the screen. </summary>  
             <remarks>  This method must be used in callback which is intended to create 
                    menu, such as BlockStyler.Tree.OnMenuCallback 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menu">Menu.</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.CopyNode(NXOpen.BlockStyler.Node)">
            <summary> Copies the existing <see cref="T:NXOpen.BlockStyler.Node"> BlockStyler.Node </see>. </summary>  
             <remarks>  The tree can copy either its own node or the node of another tree.  
                   The copied node can only be inserted into the tree which has copied that node. The column texts are not passed to the copied node.  
                  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="sourceNode">Source node. Can be node of other tree.</param>  
            <returns>Copied node.</returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Tree.GetSelectionModeMembers">
            <summary>  Gets the SelectionMode  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Value to get from the property</returns> 
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.CanStretchHeight">
            <summary>  Returns or sets  the CanStretchHeight. </summary>  
             <remarks>  If true, height of list box will change. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.CanStretchWidth">
            <summary>  Returns or sets  the CanStretchWidth. </summary>  
             <remarks>  If true, width of TreeList block will change. 
            <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.FirstSelectedNode">
            <summary>  Returns  the first selected node among the available selected nodes. </summary>  
             <remarks>   
                   Returns a null reference (Nothing in Visual Basic) if no node is selected. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.Height">
            <summary>  Returns or sets  the Height 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.Localize">
            <summary>  Returns or sets  the Localize 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.MaximumHeight">
            <summary>  Returns or sets  the MaximumHeight 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.MaximumWidth">
            <summary>  Returns or sets  the MaximumWidth 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.MinimumHeight">
            <summary>  Returns or sets  the MinimumHeight 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.MinimumWidth">
            <summary>  Returns or sets  the MinimumWidth 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.NumberOfColumns">
            <summary>  Returns  the number of column inserted in the tree. </summary>  
             <remarks>  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.RootNode">
            <summary>  Returns  the root node. </summary>  
             <remarks>  If more than one root node is available in top hierarchy  
                  then the first root node is returned. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.ScrollFrozenColumn">
            <summary>  Returns or sets  the ScrollFrozenColumn. </summary>  
             <remarks>  It specifies the number of columns to freeze while scrolling. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.ScrollLineNumber">
            <summary>  Returns or sets  the ScrollLineNumber. </summary>  
             <remarks>  It specifies the number of lines to scroll when the mouse wheel rotates. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.SelectionModeAsString">
            <summary>  Returns or sets  the SelectionMode 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.ShowExpandCollapseMarker">
            <summary>  Returns or sets  the ShowExpandCollapseMarker. </summary>  
             <remarks>  If true, displays a sign as a marker alongside first node of the tree indicating if it is expanded or collapsed. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.ShowHeader">
            <summary>  Returns or sets  the ShowHeader 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.ShowMultipleColumns">
            <summary>  Returns or sets  the ShowMultipleColumns 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.ShowToolTips">
            <summary>  Returns or sets  the ShowToolTips 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.SortRootNodes">
            <summary>  Returns or sets  the SortRootNodes. </summary>  
             <remarks>  If true, sorting of root nodes is allowed. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Tree.Width">
            <summary>  Returns or sets  the Width 
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.TreeListMenu">
            <summary>  Represents a menu class utilized by <see cref="T:NXOpen.BlockStyler.Tree"> BlockStyler.Tree </see>. </summary>  
             <remarks>  
            Refer to <see cref="M:NXOpen.BlockStyler.Tree.CreateMenu"> BlockStyler.Tree.CreateMenu </see> to create the menu. 
             
            <para> Created in NX7.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.AddMenuItem(System.Int32,System.String)">
            <summary>  Adds single menu item  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Unique identifier for the menu item being added </param>  
            <param name="menuItemText"> Display text for menu item being added</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.AddMenuItem(System.Int32,System.String,System.String)">
            <summary>  Adds single menu item  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Unique identifier for the menu item being added </param>  
            <param name="menuItemText"> Display text for menu item being added</param>  
            <param name="icon"> Icon for menu item being added</param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.AddSeperator">
            <summary>  Adds a separator  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
             
            <para> Deprecated in NX11.0.0.  Use <see cref="M:NXOpen.BlockStyler.TreeListMenu.AddSeparator"> BlockStyler.TreeListMenu.AddSeparator </see> instead.</para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.AddSeparator">
            <summary>  Adds a separator  
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetSubMenu(System.Int32,NXOpen.BlockStyler.TreeListMenu)">
            <summary>  Sets a submenu. </summary>  
             <remarks>   
                    Submenu can be created using <see cref="M:NXOpen.BlockStyler.Tree.CreateMenu"> BlockStyler.Tree.CreateMenu </see> method 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu Item ID of menu item on which submenu is supposed to be set.</param>  
            <param name="subMenu"> Menu to be added as submenu </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                    it is illegal to use the object. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemChecked(System.Int32)">
            <summary> Gets the checked status for given menu item   
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemChecked(System.Int32,System.Boolean)">
            <summary> Sets the checked status for given menu item  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="checkedStatusStatus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemDisable(System.Int32)">
            <summary> Gets the flag indicating whether the given menu item is disabled   
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemDisable(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the given menu item is disabled  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="disableStatus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemDefault(System.Int32)">
            <summary> Gets the flag indicating whether the given menu item is default   
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemDefault(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the given menu item is default  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="defaultStatus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemHidden(System.Int32)">
            <summary> Gets the flag indicating whether the given menu item is hidden   
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemHidden(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the given menu item is hidden  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="hiddenStatus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemDialogLaunching(System.Int32)">
            <summary> Gets the flag indicating whether the given menu item is dialog lanching   
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <returns> Status </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemDialogLaunching(System.Int32,System.Boolean)">
            <summary> Sets the flag indicating whether the given menu item is dialog lanching  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID  </param>  
            <param name="dialogLaunchingStaus"> Status </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemIcon(System.Int32)">
            <summary>  Gets the icon for given menu item   
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID </param>  
            <returns> Display text </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemIcon(System.Int32,System.String)">
            <summary>  Sets the icon for given menu item  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID </param>  
            <param name="icon"> Display text </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.GetItemText(System.Int32)">
            <summary>  Gets the display text for given menu item   
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID </param>  
            <returns> Display text </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.TreeListMenu.SetItemText(System.Int32,System.String)">
            <summary>  Sets the display text for given menu item  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemID"> Menu-item ID </param>  
            <param name="text"> Display text </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.UIBlock">
            <summary>  Represents a UI Block 
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.BlockStyler.UIBlock.GetProperties">
            <summary>  Returns the properties of the block  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.UIBlock.Focus">
            <summary> Focuses on the block. </summary>  
             <remarks>  Use this method for both focus and keyboard focus. 
            <para> Created in NX6.0.2 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Enable">
            <summary>  Returns or sets  the Enable. </summary>  
             <remarks>  If true, the block is sensitive. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Expanded">
            <summary>  Returns or sets  the Expanded 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Group">
            <summary>  Returns or sets  the Group 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Label">
            <summary>  Returns or sets  the Label 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Name">
            <summary>  Returns  the name of the block or BlockID 
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Show">
            <summary>  Returns or sets  the Visibility of block. </summary>  
             <remarks>  If true, the block is visible. Otherwise invisible. 
                This is readonly property for dialog and will be always true for dialog. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.UIBlock.Type">
            <summary>  Returns  the type of block  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard">
            <summary>  Represents a Wizard block  
             </summary>  
             <remarks> <para> Created in NX7.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.TaskNavigatorItem">
            <summary>  Specifies an item in the Task Navigator. </summary>  
             <remarks>    </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.TaskNavigatorItem.Step">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.TaskNavigatorItem.SubNode">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.TaskNavigatorItem.Background">
            <summary>    </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.SubNodeAction">
            <summary>  Specifies the type of action performed on a sub-node in the Wizard Task Navigator. </summary>  
             <remarks>  
                    The action is passed into the callback BlockStyler.Wizard.OnSubNodeCallback.  </remarks>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.SubNodeAction.Select">
            <summary>  Sub-node has been selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.SubNodeAction.Deselect">
            <summary>  Sub-node has been deselected.  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.SubNodeAction.Check">
            <summary>  Sub-node has been checked if a checkbox was specified.  </summary>  
              
        </member>
        <member name="F:NXOpen.BlockStyler.Wizard.SubNodeAction.Uncheck">
            <summary>  Sub-node has been unchecked if a checkbox was specified.  </summary>  
              
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.StepNotifyPreCallback">
            <summary>  The StepNotifyPre callback notifies a client before navigating to the next step  
                    in the Wizard. </summary>  
             <remarks>   The nextStep parameter for the callback is zero based and represents 
                    the steps in the Wizard.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="nextStep"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.StepNotifyPostCallback">
            <summary>  The StepNotifyPost callback notifies a client after navigating to the next step  
                    in the Wizard. </summary>  
             <remarks>   The nextStep parameter for the callback is zero based and represents 
                    the steps in the Wizard.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="nextStep">  </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.IsStepOkayCallback">
            <summary>  The IsStepOkay callback allows the client to notify the Wizard that the step is okay 
                    or not. </summary>  
             <remarks>   Returns true if the step is okay and false otherwise. The step parameter for the 
                    callback is zero based and represents the steps in the Wizard. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="step"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.OnSubNodeCallback">
            <summary>  The OnSubNode callback notifies a client of an action performed 
                    on a sub-node in the Wizard Task Navigator. </summary>  
             <remarks>   The step 
                    parameter for the callback is zero based and represents the steps in the Wizard. 
                    The subNodeId parameter is the unique id returned by <see cref="M:NXOpen.BlockStyler.Wizard.CreateStepSubNode(System.Int32,System.String,System.String,System.Boolean,System.Boolean)"> BlockStyler.Wizard.CreateStepSubNode </see>.   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="step"> </param>  
            <param name="subNodeId"> Unique id for the sub-node. </param>  
            <param name="action"> Action being performed on the sub-node. </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.OnMenuCallback">
            <summary>  The OnMenu callback notifies a client prior to creating the popup menu in the Task 
                    Navigator. </summary>  
             <remarks>   The item parameter specifies the popup menu was activated on a step, 
                    sub-node or the background. The step parameter for the callback is zero based and 
                    represents the steps in the Wizard.  The subNodeId parameter is the unique id returned 
                    by <see cref="M:NXOpen.BlockStyler.Wizard.CreateStepSubNode(System.Int32,System.String,System.String,System.Boolean,System.Boolean)"> BlockStyler.Wizard.CreateStepSubNode </see>. 
                    If the popup menu is invoked on the background of the Task Navigator the step and 
                    subNodeId parameters will be -1.   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="item"> </param>  
            <param name="step"> </param>  
            <param name="subNodeId"> </param> 
        </member>
        <member name="T:NXOpen.BlockStyler.Wizard.OnMenuSelectionCallback">
            <summary>  The OnMenuSelection callback notifies a client of the menu item selection on the popup menu 
                    in the Task Navigator. </summary>  
             <remarks>   The item parameter specifies the popup menu was activated on a step, 
                    sub-node or the background. The step parameter for the callback is zero based and 
                    represents the steps in the Wizard.  The subNodeId parameter is the unique id returned 
                    by <see cref="M:NXOpen.BlockStyler.Wizard.CreateStepSubNode(System.Int32,System.String,System.String,System.Boolean,System.Boolean)"> BlockStyler.Wizard.CreateStepSubNode </see>.  The menuItemIndex parameter will 
                    be the unique id specified when creating menu items for the BlockStyler.TreeListMenu. 
                    If the popup menu is invoked on the background of the Task Navigator the step and 
                    subNodeId parameters will be -1.   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="wizard"> </param>  
            <param name="item"> </param>  
            <param name="step"> </param>  
            <param name="subNodeId"> </param>  
            <param name="menuItemIndex">  </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.CreateStepSubNode(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>  Create a sub-node for a step in the Task Navigator. </summary>  
             <remarks>    
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="step"> The step to add a sub-node. </param>  
            <param name="text"> Text for the sub-node. </param>  
            <param name="bitmap"> Optional bitmap for the sub-node. </param>  
            <param name="showCheckBox"> Associate an optional check box with the sub-node </param>  
            <param name="checkBoxChecked"> The initial state of the check box. </param>  
            <returns> Unique id for the sub-node. </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.RemoveStepSubNode(System.Int32)">
            <summary>  Remove a sub-node in the Task Navigator. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subNodeId"> The sub-node id. </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.CreateMenu">
            <summary>  Creates a popup menu. </summary>  
             <remarks>  Use <see cref="M:NXOpen.BlockStyler.Wizard.SetMenu(NXOpen.BlockStyler.TreeListMenu)"> BlockStyler.Wizard.SetMenu </see> to set 
                     the created menu.  See the <see cref="T:NXOpen.BlockStyler.TreeListMenu"> BlockStyler.TreeListMenu </see> for 
                     information on creating a menu.    
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetMenu(NXOpen.BlockStyler.TreeListMenu)">
            <summary>  Set the menu items for the popup menu for a step, sub-node or the background 
                    in the Task Navigator. </summary>  
             <remarks>   See the <see cref="T:NXOpen.BlockStyler.TreeListMenu"> BlockStyler.TreeListMenu </see> for 
                    information on creating a menu. 
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menu"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetStepNotifyPreHandler(NXOpen.BlockStyler.Wizard.StepNotifyPreCallback)">
            <summary>  Sets the StepNotifyPre handler. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetStepNotifyPostHandler(NXOpen.BlockStyler.Wizard.StepNotifyPostCallback)">
            <summary>  Sets the StepNotifyPost handler. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetIsStepOkayHandler(NXOpen.BlockStyler.Wizard.IsStepOkayCallback)">
            <summary>  Sets the IsStepOkay handler. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetOnSubNodeHandler(NXOpen.BlockStyler.Wizard.OnSubNodeCallback)">
            <summary>  Sets the OnSubNode handler. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetOnMenuHandler(NXOpen.BlockStyler.Wizard.OnMenuCallback)">
            <summary>  Sets the OnMenu handler. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetOnMenuSelectionHandler(NXOpen.BlockStyler.Wizard.OnMenuSelectionCallback)">
            <summary>  Sets the OnMenuSelection handler. </summary>  
             <remarks>   
            <para> Created in NX7.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cb"> </param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.GetStepBannerBitmaps">
            <summary>  Gets the StepBannerBitmaps. </summary>  
             <remarks>  Gets the list of bitmaps for the step bitmaps in the banner area. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetStepBannerBitmaps(System.String[])">
            <summary>  Sets the StepBannerBitmaps. </summary>  
             <remarks>  Sets the list of bitmaps for the step bitmaps in the banner area. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmaps"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.GetStepBitmaps">
            <summary>  Gets the StepBitmaps. </summary>  
             <remarks>  Gets the list of bitmaps for the node bitmaps in the Task Navigator. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetStepBitmaps(System.String[])">
            <summary>  Sets the StepBitmaps. </summary>  
             <remarks>  Sets the list of bitmaps for the node bitmaps in the Task Navigator. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmaps"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.GetStepCues">
            <summary>  Gets the StepCues. </summary>  
             <remarks>  Gets the list of cue lines for the wizard steps. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetStepCues(System.String[])">
            <summary>  Sets the StepCues. </summary>  
             <remarks>  Sets the list of cue lines for the wizard steps. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cues"></param> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.GetStepText">
            <summary>  Gets the StepText. </summary>  
             <remarks>  Gets the list of step descriptions for the banner area. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.BlockStyler.Wizard.SetStepText(System.String[])">
            <summary>  Sets the StepText. </summary>  
             <remarks>  Sets the list of step descriptions for the banner area. 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="text"></param> 
        </member>
        <member name="P:NXOpen.BlockStyler.Wizard.CurrentStep">
            <summary>  Returns or sets  the CurrentStep. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Wizard.HighQualityBitmap">
            <summary>  Returns or sets  the HighQualityBitmap. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Wizard.Localize">
            <summary>  Returns or sets  the Localize. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Wizard.Members">
            <summary>  Returns  the Members 
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.BlockStyler.Wizard.ShowTaskNavigator">
            <summary>  Returns or sets  the ShowTaskNavigator. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenu">
            <summary>  Represents Custom Popup Menu Item class  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenu.AddMenuItem(System.Int32,System.String)">
            <summary>  Adds and returns a menu item to this menu   
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemId"> Id of the menu item </param>  
            <param name="menuItemName"> name of the menu item </param>  
            <returns> menu item </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenu.AddMenu(System.Int32,System.String)">
            <summary>  Adds and returns a menu to this menu   
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuId"> Id of the menu </param>  
            <param name="menuName"> name of the menu </param>  
            <returns> menu </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenu.AddMenuSeparator">
            <summary>  Adds a separator in the submenu  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenu.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                  
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenuHandler">
            <summary>  Represents Custom Popup Menu Handler class  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenuHandler.AddCustomPopupMenuCallback">
            <summary> This callback will be invoked by NX application when a RMB click is performed on  
                   NX Tc Navigator application. </summary>  
             <remarks>  Customer can query the selected object(s) and set  
                   the cascading custom popup menu to be appended to the existing COTS (Commercial, off-the-shelf) 
                   RMB popup menu. 
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenuHandler.CustomPopupMenuInvokedCallback">
            <summary> This callback will be invoked by NX when user clicks on a custom menu item. </summary>  
             <remarks>  The picked menu 
                   and object(s) selected can be queried from within this callback.The custom implementation can  
                   perform appropriate action associated with this menu pick.  
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.RegisterAddCustomPopupMenuCallback(NXOpen.CustomPopupMenuHandler.AddCustomPopupMenuCallback)">
            <summary> Registers the add_custom_popup_menu_callback callback method with the popup menu 
                   handler object. </summary>  
             <remarks>  
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="popupCb"> </param> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.RegisterCustomPopupMenuInvokedCallback(NXOpen.CustomPopupMenuHandler.CustomPopupMenuInvokedCallback)">
            <summary> Registers the add_custom_popup_menu_callback callback method with the popup menu 
                   handler object. </summary>  
             <remarks>  
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="popupCb"> </param> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.GetSelectedNodes(NXOpen.TreeListNode[]@)">
            <summary>  Returns a list of node(s) selected during a RMB click. </summary>  
             <remarks>  Customer can call this query API 
                     inside the implementation of <see cref="T:NXOpen.CustomPopupMenuHandler.AddCustomPopupMenuCallback"> NXOpen.CustomPopupMenuHandler.AddCustomPopupMenuCallback </see> or  
                     <see cref="T:NXOpen.CustomPopupMenuHandler.CustomPopupMenuInvokedCallback"> NXOpen.CustomPopupMenuHandler.CustomPopupMenuInvokedCallback </see> to obtain additional information  
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="selectedNodes"> Selected Nodes </param> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.GetInvokedCommand">
            <summary> Returns the menu item for the command invoked   
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> menu item </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                  
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.AddMenu(System.Int32,System.String)">
            <summary>  Adds and returns a menu to the COTS (Commercial, off-the-shelf) RMB menu  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuId"> Id of the menu </param>  
            <param name="menuName"> name of the menu </param>  
            <returns> menu </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.AddMenuItem(System.Int32,System.String)">
            <summary>  Adds and returns a menu item to the COTS (Commercial, off-the-shelf) RMB menu  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menuItemId"> Id of the menu item </param>  
            <param name="menuItemName"> name of the menu item </param>  
            <returns> menu item </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuHandler.AddMenuSeparator">
            <summary>  Adds a separator to the COTS (Commercial, off-the-shelf) RMB menu 
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.CustomPopupMenuItem">
            <summary>  Represents Custom Popup Menu Item class  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenuItem.GetId">
            <summary>  Returns Id of the menu item. </summary>  
             <remarks>    
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Id of the menu</returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuItem.GetName">
            <summary>  Returns name of the menu item. </summary>  
             <remarks>    
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Name of the menu item </returns> 
        </member>
        <member name="M:NXOpen.CustomPopupMenuItem.SetDisabled">
            <summary>  Sets the menu disabled  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.CustomPopupMenuItem.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                     it is illegal to use the object.  In .NET, this method is automatically 
                     called when the object is deleted by the garbage collector.  
                  
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Gateway.ImageExportBuilder">
             <summary> 
                    Captures the image in the active graphics window (or in a rectangular region of the active 
                    graphics window), and then exports/saves the image in a file of a specified format. 
                </summary>   
             <remarks>  
                 
                    This class can be used to export an image file that contains the contents of the 
                    active graphics window.  The image may be limited to a rectangular region of the display 
                    via <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see>. 
                    <see cref="T:NXOpen.Gateway.ImageExportBuilder.FileFormats"> Gateway.ImageExportBuilder.FileFormats </see> enumerates 
                    the file formats exported images may be saved in. 
                    The background of the exported image may be changed to any 
                    of the options available in 
                    <see cref="T:NXOpen.Gateway.ImageExportBuilder.BackgroundOptions"> Gateway.ImageExportBuilder.BackgroundOptions </see>. 
                    After configuring the image export, an image file is saved by calling the Commit 
                    method. 
                 
                <para>To create a new instance of this class, use <see cref="M:NXOpen.UI.CreateImageExportBuilder"> NXOpen.UI.CreateImageExportBuilder  </see></para> 
            Default values. 
            <list type="table">  
              
            <listheader><term>  
            Property</term>  <description>  
            Value</description> </listheader> 
            <item><term>  
              
            BackgroundOption </term> <description>  
              
            Original </description> </item>  
             
            <item><term>  
              
            FileFormat </term> <description>  
              
            Png </description> </item>  
             
            </list>  
             
            <para> Created in NX12.0.1 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.Gateway.ImageExportBuilder.FileFormats">
             <summary> 
                        The format of the exported image file. 
                    </summary>   
             <remarks>  
                     </remarks>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.FileFormats.Png">
            <summary>  PNG File Format  </summary>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.FileFormats.Jpg">
            <summary>  JPG File Format  </summary>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.FileFormats.Gif">
            <summary>  GIF File Format  </summary>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.FileFormats.Tiff">
            <summary>  Compressed TIFF File Format </summary>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.FileFormats.Bmp">
            <summary>  BMP File Format (Windows Only)  </summary>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.FileFormats.Xwd">
            <summary>  XWD File Format (Unix Only)  </summary>  
              
        </member>
        <member name="T:NXOpen.Gateway.ImageExportBuilder.BackgroundOptions">
             <summary> 
                        The background style of the captured image. 
                    </summary>   
             <remarks>  
                     </remarks>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.BackgroundOptions.Original">
            <summary>  Use the currently displayed background  </summary>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.BackgroundOptions.CustomColor">
            <summary>  Use the solid color set by <see cref="M:NXOpen.Gateway.ImageExportBuilder.SetCustomBackgroundColor(System.Double[])"> Gateway.ImageExportBuilder.SetCustomBackgroundColor </see>  </summary>  
              
        </member>
        <member name="F:NXOpen.Gateway.ImageExportBuilder.BackgroundOptions.Transparent">
            <summary>  Use a transparent background (only available in PNG and TIFF file formats)  </summary>  
              
        </member>
        <member name="M:NXOpen.Gateway.ImageExportBuilder.GetRegionTopLeftPoint">
             <summary> 
                        Returns the top left point of the region of the graphics window that will be captured if 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see> is true. 
                    </summary>   
             <remarks>  
                     
                        This value is a window coordinate.  See 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see> for more information on capturing 
                        a region of the graphics window. 
                     
                      
            <para> Created in NX12.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Array of 2 int values representing the x and y window coordinate of the top left point of the captured region </returns> 
        </member>
        <member name="M:NXOpen.Gateway.ImageExportBuilder.SetRegionTopLeftPoint(System.Int32[])">
             <summary> 
                        Sets the top left point of the region of the graphics window that will be captured if 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see> is true. 
                    </summary>   
             <remarks>  
                     
                        This value is a window coordinate.  See 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see> for more information on capturing 
                        a region of the graphics window. 
                     
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="regionTopLeftPoint"> Array of 2 int values representing the x and y window coordinate of the top left point of the captured region </param> 
        </member>
        <member name="M:NXOpen.Gateway.ImageExportBuilder.GetCustomBackgroundColor">
             <summary> 
                        Returns the background color the image will be captured with if 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.BackgroundOption"> Gateway.ImageExportBuilder.BackgroundOption </see> is set to Custom Color. 
                    </summary>   
             <remarks>  
                     
                         
                     
                      
            <para> Created in NX12.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Array of 3 RGB values, each between 0 and 1 </returns> 
        </member>
        <member name="M:NXOpen.Gateway.ImageExportBuilder.SetCustomBackgroundColor(System.Double[])">
             <summary> 
                        Sets the background color the image will be captured with if 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.BackgroundOption"> Gateway.ImageExportBuilder.BackgroundOption </see> is set to Custom Color. 
                    </summary>   
             <remarks>  
                     
                         
                     
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="customBackgroundColor"> Array of 3 RGB values, each between 0 and 1 </param> 
        </member>
        <member name="P:NXOpen.Gateway.ImageExportBuilder.BackgroundOption">
             <summary> Returns or sets  
                        the background style used when capturing the image. 
                    </summary>   
             <remarks>  
                     
                        The image may be captured with any of the background styles enumerated in 
                        <see cref="T:NXOpen.Gateway.ImageExportBuilder.BackgroundOptions"> Gateway.ImageExportBuilder.BackgroundOptions </see>.  If the Custom Color background 
                        option is used, the background color may be specified with 
                        <see cref="M:NXOpen.Gateway.ImageExportBuilder.SetCustomBackgroundColor(System.Double[])"> Gateway.ImageExportBuilder.SetCustomBackgroundColor </see>. 
                     
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Gateway.ImageExportBuilder.EnhanceEdges">
             <summary> Returns or sets  
                        a boolean value that, if true, indicates the image will be captured with antialiasing disabled and edge emphasis enabled. 
                    </summary>   
             <remarks>  
                     
                        When capturing an image with many edges, such as a wireframe view of a part, antialiasing may cause thin edges to blur with the 
                        background of the image.  This effect may be particularly noticeable when using a transparent background.  Disabling antialiasing 
                        and enabling edge emphasis helps to eliminate this blurring at the cost of a more pixelated image. 
                         
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Gateway.ImageExportBuilder.FileFormat">
             <summary> Returns or sets  
                        the file format of the exported image file. 
                    </summary>   
             <remarks>  
                     
                        The exported image may be stored in any of the file formats enumerated in 
                        <see cref="T:NXOpen.Gateway.ImageExportBuilder.FileFormats"> Gateway.ImageExportBuilder.FileFormats </see>.  Please note that transparency is only 
                        available in TIFF and PNG formats. 
                     
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Gateway.ImageExportBuilder.FileName">
             <summary> Returns or sets  
                        the full path of the exported image file. 
                    </summary>   
             <remarks>  
                     
                        This value should be set to the desired destination of the exported image file. 
                     
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Gateway.ImageExportBuilder.RegionHeight">
             <summary> Returns or sets  
                        the height of the region of the graphics window that will be captured if 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see> is true. 
                    </summary>   
             <remarks>  
                     
                        See <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see> for 
                        more information on capturing a region of the graphics window. 
                     
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Gateway.ImageExportBuilder.RegionMode">
             <summary> Returns or sets  
                        a boolean value that, if true, indicates that a rectangular region of the graphics window will be captured, rather than the entire graphics window. 
                    </summary>   
             <remarks>  
                     
                        The region used to generate the image file is defined using <see cref="M:NXOpen.Gateway.ImageExportBuilder.SetRegionTopLeftPoint(System.Int32[])"> Gateway.ImageExportBuilder.SetRegionTopLeftPoint </see>, 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionWidth"> Gateway.ImageExportBuilder.RegionWidth </see> and <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionHeight"> Gateway.ImageExportBuilder.RegionHeight </see>. 
                     
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Gateway.ImageExportBuilder.RegionWidth">
             <summary> Returns or sets  
                        the width of the region of the graphics window that will be captured if 
                        <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see> is true. 
                    </summary>   
             <remarks>  
                     
                        See <see cref="P:NXOpen.Gateway.ImageExportBuilder.RegionMode"> Gateway.ImageExportBuilder.RegionMode </see> for 
                        more information on capturing a region of the graphics window. 
                     
                     
            <para> Created in NX12.0.1 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.ApplicationProperties">
            <summary>  Implements the properties for the Menu Applications  
             </summary>  
             <remarks> <para> Created in NX1847.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.ApplicationProperties.SupportsDrawings(System.Boolean)">
            <summary>  This application supports drawings. </summary>  
             <remarks>   
            <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="supportsDrawings"> This application support drawings </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ApplicationProperties.SupportsUndoWithinApplication(System.Boolean)">
            <summary>  This application supports undo within in the application. </summary>  
             <remarks>   
            <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="supportsUndo"> This application support undo within in the application </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ApplicationProperties.AllowsMultipleWindowDesigns(System.Boolean)">
            <summary>  This application allows the display of multiple different parts in separate graphics windows at the same time. </summary>  
             <remarks>   
            <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="allowsMultipleWindowDesigns"> This application allows multiple different parts </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ApplicationProperties.AllowsMultipleWindowViews(System.Boolean)">
            <summary>  This application allows more than one graphics window of the same displayed part (as in Windows->New Window). </summary>  
             <remarks>   
            <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="allowsMultipleWindowViews"> This application allows multiple window views </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ApplicationProperties.AllowsUndoOverApplicationChange(System.Boolean)">
            <summary>  This application allows undo over an application. </summary>  
             <remarks>   
            <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="allowsUndoOverApplicationChange"> This application allows an undo over application change </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ApplicationProperties.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is 
                    called, it is illegal to use the object.  In .NET and Java, 
                    his method is automatically called when the object is 
                    deleted by the garbage collector.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.ContextMenu">
            <summary>  Represents a Context Menu  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.GetEntry(System.Int32)">
            <summary>  Returns the <see cref="T:NXOpen.MenuBar.ContextMenuEntry"> MenuBar.ContextMenuEntry </see> at the specified index in the menu. </summary>  
             <remarks>    
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="index"> index of menu entry to return </param>  
            <returns> the menu entry at this position </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.GetSubmenu(System.Int32)">
            <summary>  Returns the submenu for the entry at the specified index in the menu. </summary>  
             <remarks>   
                        The menu entry at this index must be of type  
                        <see cref="F:NXOpen.MenuBar.ContextMenuEntry.Type.Submenu"> MenuBar.ContextMenuEntry.Type.Submenu </see>. 
                       
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="index"> index of submenu to return </param>  
            <returns> the submenu at this position </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.HasEntryWithName(System.String)">
            <summary>  Indicates whether or not this menu contains a  
                        <see cref="T:NXOpen.MenuBar.ContextMenuEntry"> MenuBar.ContextMenuEntry </see> which  
                        has the given name. </summary>  
             <remarks>  
                      
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="name"> name of menu entry to search for </param>  
            <returns> the menu entry with this name </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.GetEntryWithName(System.String)">
            <summary>  Given the name of a menu entry, returns the first 
                        <see cref="T:NXOpen.MenuBar.ContextMenuEntry"> MenuBar.ContextMenuEntry </see> in this menu which 
                        matches. </summary>  
             <remarks>   
                      
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="name"> name of menu entry to search for </param>  
            <returns> the menu entry with this name </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.GetIndexOfEntry(NXOpen.MenuBar.ContextMenuEntry)">
            <summary>  Returns the index of the <see cref="T:NXOpen.MenuBar.ContextMenuEntry"> MenuBar.ContextMenuEntry </see> 
                        object within this menu. </summary>  
             <remarks>  
                      
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="entry"> an entry in the menu </param>  
            <returns> the index for that menu entry </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.AddMenuButton(NXOpen.MenuBar.MenuButton,System.Int32)">
            <summary>  Adds a menu bar button to the context menu. </summary>  
             <remarks>  Use  
                        <see cref="M:NXOpen.MenuBar.MenuBarManager.GetButtonFromName(System.String)"> MenuBar.MenuBarManager.GetButtonFromName </see>  
                        to find the button to add to the menu. 
                      
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="button"> the menu bar button to add to the menu </param>  
            <param name="index"> position at which to create the new button. Use -1 to add the button to the end of the menu. </param>  
            <returns> the new menu entry </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.AddSeparator(System.Int32)">
            <summary>  Adds a separator to the context menu. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="index"> position at which to create the separator. Use -1 to add the separator to the end of the menu. </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.AddMenuLabel(System.String,System.Int32)">
            <summary>  Adds a label to the context menu. </summary>  
             <remarks>    
            <para> Created in NX10.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="label"> label for the label entry </param>  
            <param name="index"> position at which to create the label entry. Use -1 to add the label to the end of the menu. </param>  
            <returns> the new menu entry </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.AddSubmenu(System.String,System.Int32)">
            <summary>  Adds a submenu to the context menu. </summary>  
             <remarks>    
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="label"> label for the cascade menu </param>  
            <param name="index"> position at which to create the sub-menu. Use -1 to add the sub-menu to the end of the menu. </param>  
            <returns> the new submenu </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.SetDefaultEntry(NXOpen.MenuBar.ContextMenuEntry)">
            <summary>  Makes a specified menu entry the default for the menu. </summary>  
             <remarks>   
                     
                        This entry will be displayed in bold text on the menu. It will be the action 
                        that is performed in response to a double-click event in the UI. 
                         
                        The menu entry must have a type of <see cref="F:NXOpen.MenuBar.ContextMenuEntry.Type.PushButton"> MenuBar.ContextMenuEntry.Type.PushButton </see> 
                        or <see cref="F:NXOpen.MenuBar.ContextMenuEntry.Type.ToggleButton"> MenuBar.ContextMenuEntry.Type.ToggleButton </see>.  
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="entry"> the menu entry to become the default for the menu </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.HideEntry(NXOpen.MenuBar.ContextMenuEntry)">
            <summary>  Prevents the indicated menu entry from being shown on the menu. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="entry"> the menu entry to hide </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.MoveEntry(NXOpen.MenuBar.ContextMenuEntry,System.Int32)">
            <summary>  Reorders the menu to move a menu entry to a new position in the list. </summary>  
             <remarks>   
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="entry"> the menu entry to be moved </param>  
            <param name="index"> the new position </param> 
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenu.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                        it is illegal to use the object.  In .NET, this method is automatically 
                        called when the object is deleted by the garbage collector.  
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenu.NumberOfEntries">
            <summary>  Returns  the number of <see cref="T:NXOpen.MenuBar.ContextMenuEntry"> MenuBar.ContextMenuEntry </see> objects in this menu. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.ContextMenuEntry">
            <summary>  Represents an entry on a context menu. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.ContextMenuEntry.Type">
            <summary>  Specifies the type of the menu entry. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.ContextMenuEntry.Type.Submenu">
            <summary>  Has an attached menu structure containing more entries.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.ContextMenuEntry.Type.PushButton">
            <summary>  Has a command that is run when this entry is activated.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.ContextMenuEntry.Type.ToggleButton">
            <summary>  Displays an On/Off state.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.ContextMenuEntry.Type.Separator">
            <summary>  A visual divider between sections of the menu.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.ContextMenuEntry.Type.Label">
            <summary>  A label often used to divide and provide context to sub-groups of commands.  </summary>  
              
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenuEntry.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                        it is illegal to use the object.  In .NET, this method is automatically 
                        called when the object is deleted by the garbage collector.  
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenuEntry.EntryType">
            <summary>  Returns  the type of this menu entry. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenuEntry.IsDefault">
            <summary>  Returns  true if this entry is the default action for the menu. </summary>  
             <remarks>  A menu entry is marked as 
                        the default for the menu when it corresponds to the double-click  
                        action. 
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenuEntry.IsHidden">
            <summary>  Returns  true if this entry is hidden on the menu. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenuEntry.IsSensitive">
            <summary>  Returns  true if the command corresponding to this entry can be run. </summary>  
             <remarks>   
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenuEntry.Label">
            <summary>  Returns  the label of this menu entry. </summary>  
             <remarks>   
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenuEntry.Name">
            <summary>  Returns  the name of this menu entry. </summary>  
             <remarks>   
                     
                        Some entries on the context menu may correspond to buttons on the menu bar. 
                        For these entries, the name that is returned is the name of that  
                        <see cref="T:NXOpen.MenuBar.MenuButton"> MenuBar.MenuButton </see> object. 
                         
                        For all other entries which do not correspond to a menu bar button, the 
                        name that is returned has no specific meaning. However, for any individual  
                        action within any specific context menu, the name that is assigned to 
                        that action will not change. 
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.ContextMenuProperties">
            <summary>  Provides information about the MenuBar. </summary>  
             <remarks> ContextMenu object being customized.  
            <para> Created in NX8.5.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.ContextMenuProperties.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is called, 
                        it is illegal to use the object.  In .NET, this method is automatically 
                        called when the object is deleted by the garbage collector.  
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenuProperties.Context">
            <summary>  Returns  a description for the context for which the menu was created  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.ContextMenuProperties.Location">
            <summary>  Returns  the location where the context menu will be displayed  
             </summary>  
             <remarks> <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager">
            <summary>  Interface for the MenuBarManager object  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.CallbackStatus">
            <summary>  Return values for action callbacks  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.Continue">
            <summary>  Continue performing the menu item's actions.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.Cancel">
            <summary>  User interaction requested inhibiting the  
                                                                           menu item's actions.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.OverrideStandard">
            <summary>  Inhibit further actions because a pre  
                                                                                      action took the place of the standard  
                                                                                      action for a standard NX menu item.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.Warning">
            <summary>  Inhibit further actions because a  
                                                                            warning condition was raised.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuBarManager.CallbackStatus.Error">
            <summary>  Inhibit further actions because a  
                                                                          error condition was raised.  </summary>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.ActionCallback">
            <summary>  Prototype for the action callbacks  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="buttonEvent"> The reason for executing the callback </param> 
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.InitializeMenuApplication">
            <summary>  Prototype for application initialization callback  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.EnterMenuApplication">
            <summary>  Prototype for callback called whenever the application is entered  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.ExitMenuApplication">
            <summary>  Prototype for callback called whenever the application is exited  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuBarManager.ConfigureContextMenu">
            <summary>  Prototype for the callback used to configure a context menu. </summary>  
             <remarks>   
                     
                        Return 0 to indicate successful processing of the menu. Any other value will 
                        be treated as an error condition. 
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="menu"> The menu </param>  
            <param name="props"> The properties of this menu </param> 
        </member>
        <member name="P:NXOpen.MenuBar.MenuBarManager.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.AddMenuAction(System.String,NXOpen.MenuBar.MenuBarManager.ActionCallback)">
            <summary>   
                      Adds the action callback. </summary>  
             <remarks>  
                      
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="name"> The name of the action.  This name must match the string used in the .men file. </param>  
            <param name="actionCallback"> The method to execute for this action </param> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.GetButtonFromName(System.String)">
            <summary>  Finds the MenuButton associated with the given name   
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="name"> The name of the button.  This name must match the button name used in the .men file. </param>  
            <returns> The button associated with the given name </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.RegisterApplication(System.String,NXOpen.MenuBar.MenuBarManager.InitializeMenuApplication,NXOpen.MenuBar.MenuBarManager.EnterMenuApplication,NXOpen.MenuBar.MenuBarManager.ExitMenuApplication,System.Boolean,System.Boolean,System.Boolean)">
            <summary>   
                      Registers the application 
                       
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="name"> The name of the application.  This name must match the string used in the .men file. </param>  
            <param name="initializeCallback"> The method used to initialize the application </param>  
            <param name="enterCallback"> The method called when entering the application </param>  
            <param name="exitCallback"> The method called when exiting the application </param>  
            <param name="supportsDrawings"> Does this application support drawings? </param>  
            <param name="supportsDesignInContext"> Does this application support design in context? </param>  
            <param name="supportsUndo"> Does this application support undo? </param>  
            <returns> Unique identifier for the registered application </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.RegisterApplication(System.String,NXOpen.MenuBar.MenuBarManager.InitializeMenuApplication,NXOpen.MenuBar.MenuBarManager.EnterMenuApplication,NXOpen.MenuBar.MenuBarManager.ExitMenuApplication,NXOpen.MenuBar.ApplicationProperties)">
            <summary>   
                      Registers the application 
                       
             </summary>  
             <remarks> <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="name"> The name of the application.  This name must match the string used in the .men file. </param>  
            <param name="initializeCallback"> The method used to initialize the application </param>  
            <param name="enterCallback"> The method called when entering the application </param>  
            <param name="exitCallback"> The method called when exiting the application </param>  
            <param name="application"> The application properties  </param>  
            <returns> Unique identifier for the registered application </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.RegisterConfigureContextMenuCallback(System.String,System.String,NXOpen.MenuBar.MenuBarManager.ConfigureContextMenu)">
            <summary>  Registers a callback that is called whenever a customizable context 
                        menu is about to be displayed. </summary>  
             <remarks>   
             
                        Each callback is registered with a short name and a longer 
                        description which is used to identify the callback for debugging 
                        purposes. 
                      
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="name"> A short string identifying the callback </param>  
            <param name="description"> A longer string describing the operation of the callback </param>  
            <param name="configurePopupMenu"> Callback to register </param>  
            <returns> Identifier of registered callback </returns> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.UnregisterConfigureContextMenuCallback(System.Int32)">
            <summary>  Unregisters a callback for customizing context menus. </summary>  
             <remarks>  
                     
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="id"> Identifier for callback to unregister </param> 
        </member>
        <member name="M:NXOpen.MenuBar.MenuBarManager.NewApplicationProperties">
            <summary>  Constructs a new ApplicationProperties object. </summary>  
             <remarks>    
            <para> Created in NX1847.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="T:NXOpen.MenuBar.MenuButton">
            <summary>  Implements the Object for Menu Buttons  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButton.Type">
            <summary>  Available button types  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.CascadeButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.PushButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.ToggleButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.Separator">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.ApplicationButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Type.NullButton">
            <summary>    </summary>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButton.SensitivityStatus">
            <summary>  Sensitivity Status  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.SensitivityStatus.Sensitive">
            <summary>  The button is sensitive.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.SensitivityStatus.Insensitive">
            <summary>  The button is insensitive.  </summary>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButton.Toggle">
            <summary>  Toggle Status  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Toggle.On">
            <summary>  The toggle is on.  </summary>  
              
        </member>
        <member name="F:NXOpen.MenuBar.MenuButton.Toggle.Off">
            <summary>  The toggle is off.  </summary>  
              
        </member>
        <member name="M:NXOpen.MenuBar.MenuButton.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is 
                        called, it is illegal to use the object.  In .NET and Java, 
                        his method is automatically called when the object is 
                        deleted by the garbage collector.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonId">
            <summary>  Returns  the identifier of the button. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonName">
            <summary>  Returns  the name of the button. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonSensitivity">
            <summary>  Returns or sets  the sensitivity of the button. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonType">
            <summary>  Returns  the type of the button. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ButtonTypeName">
            <summary>  Returns  the type name of the button. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButton.ToggleStatus">
            <summary>  Returns or sets  the toggle status of the button. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MenuBar.MenuButtonEvent">
            <summary>  Implements the Event Object for Menu Buttons  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.MenuButtonEvent.FreeResource">
            <summary>  Frees the object from memory. </summary>  
             <remarks>   After this method is 
                        called, it is illegal to use the object.  In .NET and Java, 
                        his method is automatically called when the object is 
                        deleted by the garbage collector.   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MenuBar.MenuButtonEvent.GetMenuAncestors">
            <summary>  Get the ancestors of the active button. </summary>  
             <remarks>    
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> The ancestors that caused the event to fire </returns> 
        </member>
        <member name="P:NXOpen.MenuBar.MenuButtonEvent.ActiveButton">
            <summary>  Returns  the activated MenuButton. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButtonEvent.ApplicationId">
            <summary>  Returns  the activated MenuButton's owning application identifier. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MenuBar.MenuButtonEvent.MenuBarName">
            <summary>  Returns  the name of the menu bar. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.MovieManager">
            <summary>  Represents a <see cref="T:NXOpen.MovieManager"> MovieManager </see> class. This class is used  
                for recording movies. 
             </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieManager.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.MovieManager.CreateMovieSettingsBuilder">
            <summary>  Creates a <see cref="T:NXOpen.MovieSettingsBuilder"> MovieSettingsBuilder </see>  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.MovieManager.Start(System.String,System.Boolean)">
            <summary>  Starts movie recording  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="filename"> Filename of the movie to be createed </param>  
            <param name="userFrames"> If true, user will provide frames through <see cref="M:NXOpen.MovieManager.CaptureFrame"> MovieManager.CaptureFrame </see>. If false, system generates frames </param> 
        </member>
        <member name="M:NXOpen.MovieManager.Pause">
            <summary>  Pauses movie recording  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MovieManager.Resume">
            <summary>  Resumes movie recording  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MovieManager.End">
            <summary>  Stops movie recording  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MovieManager.CaptureFrame">
            <summary>  Use this method to capture a frame at a specified point. </summary>  
             <remarks>  This is used when the 
                    movie recording was started with true as the second parameter of <see cref="M:NXOpen.MovieManager.Start(System.String,System.Boolean)"> MovieManager.Start </see> 
                 
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.MovieManager.SetPlaybackSpeed(System.Int32)">
            <summary>  Sets the movie playback speed. </summary>  
             <remarks>  Movie may not play appropriately at a very high rate (few hundreds). 
                In such cases a lower value could be set. Recommendation is to use a value less than 100 fps. 
                 
            <para> Created in NX8.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="fps"> Specifies the playback speed of the movie in frames per second.</param> 
        </member>
        <member name="T:NXOpen.MovieSettingsBuilder">
            <summary>  This class is the builder for the Movie Settings. </summary>  
             <remarks>  <para>To create a new instance of this class, use <see cref="M:NXOpen.MovieManager.CreateMovieSettingsBuilder"> NXOpen.MovieManager.CreateMovieSettingsBuilder  </see></para> 
            Default values. 
            <list type="table">  
              
            <listheader><term>  
            Property</term>  <description>  
            Value</description> </listheader> 
            <item><term>  
              
            CaptureArea </term> <description>  
              
            Graphics </description> </item>  
             
            <item><term>  
              
            FramesPerSecond </term> <description>  
              
            10 </description> </item>  
             
            <item><term>  
              
            PlaybackSpeed </term> <description>  
              
            AsRecorded </description> </item>  
             
            </list>  
             
            <para> Created in NX6.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.MovieSettingsBuilder.CaptureAreaChoices">
            <summary>  Indicates the are being recorded in the movie. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.CaptureAreaChoices.Graphics">
            <summary>  Specifies that the NX graphics contents are to be recorded  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.CaptureAreaChoices.NxWindow">
            <summary>  Specifies that the NX window contents are to be recorded  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.CaptureAreaChoices.Desktop">
            <summary>  Specifies that the Desktop contents are to be recorded  </summary>  
              
        </member>
        <member name="T:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices">
            <summary>  Indicates the playback speed of the movie. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.VerySlow">
            <summary>  Specifies very slow playback speed (quarter of record speed)  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.Slow">
            <summary>  Specifies slow playback speed (half of record speed)  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.AsRecorded">
            <summary>  Specifies playback speed same as record speed  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.Fast">
            <summary>  Specifies fast playback speed (twice record speed)  </summary>  
              
        </member>
        <member name="F:NXOpen.MovieSettingsBuilder.PlaybackSpeedChoices.VeryFast">
            <summary>  Specifies very fast playback speed (four times record speed)  </summary>  
              
        </member>
        <member name="P:NXOpen.MovieSettingsBuilder.CaptureArea">
            <summary>  Returns or sets  the area captured for movie creation. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieSettingsBuilder.CodecFourcc">
            <summary>  Returns or sets  the Codec that is used to create the movie. </summary>  
             <remarks>   
                 
            <para> Created in NX6.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieSettingsBuilder.FramesPerSecond">
            <summary>  Returns or sets  the frames per second for the movie. </summary>  
             <remarks>  This setting dictates the quality of the movie that is created. 
                    A smaller value would create a coarse movie with small file size, whereas, a bigger  
                    value would create a smooth movie with a big file size 
                     
            <para> Created in NX6.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.MovieSettingsBuilder.PlaybackSpeed">
            <summary>  Returns or sets  the speed at which the recorded movie is played back. </summary>  
             <remarks>   
            <para> Created in NX6.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.NXMessageBox">
            <summary>  Displays message box. </summary>  
             <remarks>   
            Note: The number of lines displayed in the message box can vary based on Operating System and 
                  Screen Resolution <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.NXMessageBox.DialogType">
            <summary>  Describes type of message box. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.NXMessageBox.DialogType.Error">
            <summary>  Error  </summary>  
              
        </member>
        <member name="F:NXOpen.NXMessageBox.DialogType.Warning">
            <summary>  Warning  </summary>  
              
        </member>
        <member name="F:NXOpen.NXMessageBox.DialogType.Information">
            <summary>  Informattion  </summary>  
              
        </member>
        <member name="F:NXOpen.NXMessageBox.DialogType.Question">
            <summary>  Question  </summary>  
              
        </member>
        <member name="P:NXOpen.NXMessageBox.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.NXMessageBox.Show(System.String,NXOpen.NXMessageBox.DialogType,System.String)">
            <summary>  Show message box. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="title"> Title </param>  
            <param name="msgboxType"> Message box type </param>  
            <param name="message"> Message </param>  
            <returns> Return value from Message Box.  If of type <see cref="F:NXOpen.NXMessageBox.DialogType.Question"> NXMessageBox.DialogType.Question </see>  
                then the value will be 1 for yes or 2 for no.  Otherwise the returned value will be -2.  </returns> 
        </member>
        <member name="M:NXOpen.NXMessageBox.Show(System.String,NXOpen.NXMessageBox.DialogType,System.String[])">
            <summary>  Show message box. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="title"> Title </param>  
            <param name="msgboxType"> Message box type </param>  
            <param name="messages"> Multi-line message </param>  
            <returns>  Return value from Message Box.  If of type <see cref="F:NXOpen.NXMessageBox.DialogType.Question"> NXMessageBox.DialogType.Question </see>  
                then the value will be 1 for yes or 2 for no.  Otherwise the returned value will be -2.  </returns> 
        </member>
        <member name="T:NXOpen.PDM.PdmNavigatorNode">
            <summary>  Represents a PdmNavigatorNode  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.PDM.PdmNavigatorNode.GetUid">
            <summary>  Returns the unique identifier of the PdmNavigatorNode in PDM   
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.PDM.PdmNavigatorNode.GetNodeType">
            <summary>  Returns the type of the PdmNavigatorNode in PDM   
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="T:NXOpen.Preferences.ObjectPreferences">
            <summary>  Captures the UI based calls required for Object Preferences  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.ObjectPreferences.Translucency">
            <summary>  Describes whether the translucency is enabled or disabled  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.ObjectPreferences.Translucency.Disabled">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.ObjectPreferences.Translucency.Enabled">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.ObjectPreferences.Translucency.TemporarilyEnabled">
            <summary>    </summary>  
              
        </member>
        <member name="P:NXOpen.Preferences.ObjectPreferences.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.Preferences.ObjectPreferences.ResetSessionTranslucency(System.Boolean,NXOpen.Preferences.ObjectPreferences.Translucency@)">
            <summary>  Resets the session translucency  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="option"> User can set TRUE or FALSE </param>  
            <param name="sessionTranslucency"> Return Value </param> 
        </member>
        <member name="M:NXOpen.Preferences.ObjectPreferences.SetSessionTranslucency(NXOpen.Preferences.ObjectPreferences.Translucency,NXOpen.Preferences.ObjectPreferences.Translucency@)">
            <summary>  Sets the session translucency  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="option">  </param>  
            <param name="sessionTranslucency"> Return Value </param> 
        </member>
        <member name="T:NXOpen.Preferences.SessionUserInterfaceUI">
            <summary>  Represents all UI based session user interface preferneces. </summary>  
             <remarks>  Other User Interface settings are  
            available with <see cref="T:NXOpen.Preferences.SessionUserInterface"> NXOpen.Preferences.SessionUserInterface </see> for settings applicable to session and  
            with <see cref="T:NXOpen.Preferences.PartUserInterface"> NXOpen.Preferences.PartUserInterface </see> for User Interface Preferences applicable 
            to part <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionUserInterfaceUI.DisplayResourceBar">
            <summary>  Describes whether the resource bar is displayed on left or right of window  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionUserInterfaceUI.DisplayResourceBar.Left">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.Preferences.SessionUserInterfaceUI.DisplayResourceBar.Right">
            <summary>    </summary>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.Preferences.SessionUserInterfaceUI.ResetDialogBoxSettings">
            <summary>  Resets all dialog box settings  
             </summary>  
             <remarks> <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.ConfirmUndo">
            <summary>  Returns or sets  the confirm undo flag  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DialogBarDecimalPlaces">
            <summary>  Returns or sets  the dialog box decimal places  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DialogBarTracking">
            <summary>  Returns or sets  the dialog bar tracking flag  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayAlertsOnInformation">
            <summary>  Returns or sets  the option "Display Alerts on Information" gives choice, whether the 
                 user wants the Diagnostic alerts appear when  
                 features contain information messages during feature  
                 creation, edit, and update. </summary>  
             <remarks>  
                 if the option is true then the diagnostic alerts will appear. 
                 if the option is false then diagnostic alerts will not appear. 
                 Use <see cref="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayAlertsOnWarnings"> DisplayAlertsOnWarnings </see> for display of 
                 alerts on warnings. Alerts are 
                 always displayed for errors and display of alerts on errors can not be 
                 changed.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayAlertsOnWarnings">
            <summary>  Returns or sets  the option "Display Alerts on Warnings" gives choice, whether the 
                 user wants the Diagnostic alerts appear when  
                 features contain warnings during feature  
                 creation, edit, and update. </summary>  
             <remarks>  
                 if the option is true then the diagnostic alerts will appear. 
                 if the option is false then diagnostic alerts will not appear. 
                 Use <see cref="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayAlertsOnInformation"> DisplayAlertsOnInformation </see> for display of 
                 alerts on information messages. Alerts are 
                 always displayed for errors and display of alerts on errors can not be 
                 changed.  
            <para> Created in NX7.5.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayDialogsInPlayback">
            <summary>  Returns or sets  the display dialogs in playback flag  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.DisplayResourceBarOption">
            <summary>  Returns or sets  the display resource bar option  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.HomePageURL">
            <summary>  Returns or sets  the home page URL  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.InitialDialogDisplay">
            <summary>  Returns or sets  the initial dialog display flag  
             </summary>  
             <remarks> <para> Created in NX4.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.ListingDecimalPlaces">
            <summary>  Returns or sets  the listing decimal places 
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.PagesAutomaticallyFlyOut">
            <summary>  Returns or sets  the pages automatically fly outflag  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.PauseDuration">
            <summary>  Returns or sets  the pause duration  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.RecordAllTransform">
            <summary>  Returns or sets  the record all transform flag  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.SaveLayoutAtExit">
            <summary>  Returns or sets  the save layout at exit flag. </summary>  
             <remarks>   
            <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionUserInterfaceUI.UseSystemPrecision">
            <summary>  Returns or sets  the use system precision flag. </summary>  
             <remarks>  True uses the system precision  
            <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionVisualizationShade">
            <summary>  Represents the UI related Visualization Shade preferences. </summary>  
             <remarks>  These preferences are maintained at 
            UI level and applicable to entire session <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.Preferences.SessionVisualizationShade.RegenerateStudioAnalysisViewsFromTolChange(System.Boolean)">
            <summary>  Regenerates Studio Analysis Views. </summary>  
             <remarks>  Updates all objects based on their surfacing tolerance.  
            <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX12.0.0.  Use <see cref="M:NXOpen.Preferences.PartVisualizationShade.RegenerateStudioAnalysisViewsFromToleranceChange(System.Boolean)"> NXOpen.Preferences.PartVisualizationShade.RegenerateStudioAnalysisViewsFromToleranceChange </see> instead.</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="updateEnvOption"> Send TRUE if env cube updation is required. Else send FALSE </param> 
        </member>
        <member name="M:NXOpen.Preferences.SessionVisualizationShade.RegenerateShadedViewsFromToleranceChange">
            <summary>  Regenerates Shaded Views. </summary>  
             <remarks>  Updates all objects based on their surfacing tolerance.  
            <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX12.0.0.  Use <see cref="M:NXOpen.Preferences.PartVisualizationShade.RegenerateShadedViewsFromToleranceChange"> NXOpen.Preferences.PartVisualizationShade.RegenerateShadedViewsFromToleranceChange </see> instead.</para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.EdgesEmphasis">
            <summary>  Returns or sets  the edge emphasis flag. </summary>  
             <remarks> Alters how edges are displayed when Shaded Face Edges is flag is true.  
            <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.LwrtStudioDisplay">
            <summary>  Returns or sets  the lwrt studio display flag. </summary>  
             <remarks> Alters how studio are displayed.  
            <para> Created in NX4.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationShade.ShowFacetEdges">
            <summary>  Returns or sets  the show facet edge flag. </summary>  
             <remarks>  Toggles the display of facet edges. If this flag is true it can help  
                when trying to evaluate or interpret faceted edges.  
            <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.SessionVisualizationVisual">
            <summary>  Represents all UI based session Visualization visual preferences  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.Preferences.SessionVisualizationVisual.GetViewFromPoint(System.Int32,System.Int32,NXOpen.View@,NXOpen.Point3d@)">
            \cond NX_NO_DOC 
            <exclude/>
            <summary>  If specified screen coordinates are contained in a displayed view, 
                    returns the view and the corresponding view coordinates. </summary>  
             <remarks>  Otherwise, 
                    returns a null reference (Nothing in Visual Basic). Supported for Windows systems only.  
            <para> Created in NX12.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="screenX"></param>  
            <param name="screenY"></param>  
            <param name="view"></param>  
            <param name="viewPoint"></param> 
            \endcond 
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.FullSceneAntialiasing">
            <summary>  Returns or sets  the scene antialiasing flag. </summary>  
             <remarks>   
            <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.LineAntialiasing">
            <summary>  Returns or sets  the line antialiasing flag. </summary>  
             <remarks>  True value specifies that lines, curves, and edges are drawn more smoothly  
            <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.ReduceEdgeBleedThrough">
            <summary>  Returns or sets  the reduce edge bleed-through flag. </summary>  
             <remarks>  
                    True indicates that Show Line Widths, Edge Emphasis, and Line Antialising settings 
                    are overriden so as to minimize the effects of edges bleeding through surfaces.  
            <para> Created in NX1847.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.SessionVisualizationVisual.Translucency">
            <summary>  Returns or sets  the translucency flag. </summary>  
             <remarks>  True value specifies that each shaded object is drawn with the translucency setting  
                specified with Edit-&gt;Object Display. False value specify that all objects in Fully Shaded or Partially Shaded  
                views appear opaque, regardless of their individual translucency settings.   
            <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Preferences.VisualizationLine">
            <summary>  This class is for UI related preferences changes  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.VisualizationLine.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.Preferences.VisualizationLine.RegenerateFromToleranceChange(System.Boolean,System.Boolean)">
            <summary>  Regenerates after changing tolerance  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX12.0.0.  Use <see cref="M:NXOpen.Preferences.PartVisualizationLine.RegenerateFromToleranceChange(System.Boolean,System.Boolean)"> NXOpen.Preferences.PartVisualizationLine.RegenerateFromToleranceChange </see> instead.</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="updateModeChange"> whether update_mode has changed </param>  
            <param name="studio"> studio or non studio </param> 
        </member>
        <member name="M:NXOpen.Preferences.VisualizationLine.UpdateLineFontObjects(System.Boolean)">
            <summary>  Updates the UI after line font is changed  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX12.0.0.  Use <see cref="M:NXOpen.Preferences.PartVisualizationLine.UpdateLineFontObjects(System.Boolean)"> NXOpen.Preferences.PartVisualizationLine.UpdateLineFontObjects </see> instead.</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="doSoftwareUpdate"> The do_software_update flag should be set to TRUE when changing 
                                                                from software fonts to hardware fonts or when changing dash </param> 
        </member>
        <member name="P:NXOpen.Preferences.VisualizationLine.DepthSortedWireframe">
            <summary>  Returns or sets  the depth sorted wireframe. </summary>  
             <remarks>  Specifies whether the graphics driver should sort objects by depth in wireframe views.  
            <para> Created in NX3.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.Preferences.VisualizationLine.WireframeContrast">
            <summary>  Returns or sets  whether colors applied to wireframe geometry are automatically adjusted as necessary to produce a minimum contrast relative to the view background. </summary>  
             <remarks>   
                    The option affects onscreen displays only, so it affects interactive displays and raster images captured from interactive displays. It does not affect vector output produced by Plot, Print, CGM Export and similar functions.  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.Selection">
            <summary>  Defines an interface object for executing selection operations  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.Selection.SelectionScope">
            <summary>  
                    Indicates the scope for selecting objects. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.UseDefault">
            <summary>  Use the default selection scope  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.WorkPart">
            <summary>  Use the work part  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.AnyInAssembly">
            <summary>  Use any occurrence in the assembly  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.WorkPartAndOccurrence">
            <summary>  Use the work part or any occurrence  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionScope.WorkPartAndWorkPartOccurrence">
            <summary>  Use the work part or any occurrence of the work part   </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.SelectionAction">
            <summary>  
                    Indicates the type of action to perform when an object is selected. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.EnableAll">
            <summary>  Include objects in selection  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.EnableSpecific">
            <summary>  Include selected objects in selection  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.DisableSpecific">
            <summary>  Remove selected objects from selection  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.ClearAndEnableSpecific">
            <summary>  Clear selection and include selected objects  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionAction.AllAndDisableSpecific">
            <summary>  Select all objects except for selected objects  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.SelectionType">
            <summary>  
                    Indicates the general class of object to filter selection. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.All">
            <summary>  Filter to select all object types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.Features">
            <summary>  Filter to select all feature types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.Curves">
            <summary>  Filter to select all curve types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.Faces">
            <summary>  Filter to select all face types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.Edges">
            <summary>  Filter to select all edge types  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionType.CurvesAndEdges">
            <summary>  Filter to select all curve and edge types  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.Response">
            <summary>  
                    Specify the user response for the selection operation. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.Back">
            <summary>  User selected Back  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.Cancel">
            <summary>  User selected Cancel  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.Ok">
            <summary>  User selected Ok  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.ObjectSelectedByName">
            <summary>  User selected object by name  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.Response.ObjectSelected">
            <summary>  User selected an object  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.DialogResponse">
            <summary>  
                    Specify the user response for general dialogs. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.None">
            <summary>  No Response  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Pick">
            <summary>  User picked object on screen  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Ok">
            <summary>  User selected Ok  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Cancel">
            <summary>  User selected Cancel  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Back">
            <summary>  User selected Back (if applicable)  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Apply">
            <summary>  User selected Apply  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.DialogResponse.Help">
            <summary>  User selected Help  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.SelectionFeatureType">
            <summary>   
                    Specify the type of features to select. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionFeatureType.Browsable">
            <summary>  Select all browsable features  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionFeatureType.NoBooleanUdf">
            <summary>  Select all features except boolean and udf features  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.UistylerSelectionType">
            <summary>  
                    Indicates the general class of object to filter selection. </summary>  
             <remarks>  
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.InactiveSelection">
            <summary>  sets selection inactive until 
            this function is called again  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.SingleSelection">
            <summary>  allows 
            single select  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.SingleDeselection">
            <summary>  single deselect  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.RobustSelection">
            <summary>  reselect last  </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.SinglePosition">
            <summary>  the position is returned if no object is selected with the 
            single select gesture   </summary>  
              
        </member>
        <member name="F:NXOpen.Selection.UistylerSelectionType.RectanglePosition">
            <summary>  the position is returned if no object is selected with the 
            single select gesture  </summary>  
              
        </member>
        <member name="T:NXOpen.Selection.MaskTriple">
            <summary>   Used in selection methods to set the types of objects that are selectable. </summary>  
             <remarks>  
             
                Commonly used: 
                <code> 
            For C++: 
            in order to select...       set... 
            any edge                    type=UF_solid_type, subtype=UF_all_subtype, solid_body_subtype=UF_UI_SEL_FEATURE_ANY_EDGE 
            any face                    type=UF_solid_type, subtype=UF_all_subtype, solid_body_subtype=UF_UI_SEL_FEATURE_ANY_FACE 
             
            For .NET: 
            in order to select...       set... 
            any edge                    type=NXOpen.UF.UFConstants.UF_solid_type, subtype=0, solid_body_subtype=NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE 
            any face                    type=NXOpen.UF.UFConstants.UF_solid_type, subtype=0, solid_body_subtype=NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE 
                </code> 
             
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.MaskTriple.Type">
            <summary>  Object type. </summary>  
             <remarks>  This can be one of the object types that are listed in  
                                  uf_object_types.h. For example, for point,  
                                  use UF_point_type in C++ and 
                                  NXOpen.UF.UFConstants.UF_point_type in .NET.  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.MaskTriple.Subtype">
            <summary>  Object subtype. </summary>  
             <remarks>  This can either be 0 (UF_all_subtype) for any subtype, or a 
                                    subtype of the selected type. 
                                    The subtypes are listed in uf_object_types.h. 
                                     </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.MaskTriple.SolidBodySubtype">
            <summary>  Solid body subtype. </summary>  
             <remarks>  This is only meaningful when the type is  
                                   UF_solid_type.  In that case, this should be set to 
                                   one of the solid type constants listed in uf_ui_types.h  
                                   under "Constants for selection solid_type". For example, 
                                   to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and  
                                   NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET  </remarks>  
              
        </member>
        <member name="M:NXOpen.Selection.MaskTriple.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>  Constructor for the MaskTriple struct. </summary>  
             <remarks>   </remarks>  
              
            <param name="Type"> Object type. This can be one of the object types that are listed in  
                                  uf_object_types.h. For example, for point,  
                                  use UF_point_type in C++ and 
                                  NXOpen.UF.UFConstants.UF_point_type in .NET. </param>  
            <param name="Subtype"> Object subtype. This can either be 0 (UF_all_subtype) for any subtype, or a 
                                    subtype of the selected type. 
                                    The subtypes are listed in uf_object_types.h. 
                                    </param>  
            <param name="SolidBodySubtype"> Solid body subtype. This is only meaningful when the type is  
                                   UF_solid_type.  In that case, this should be set to 
                                   one of the solid type constants listed in uf_ui_types.h  
                                   under "Constants for selection solid_type". For example, 
                                   to select any face, use UF_UI_SEL_FEATURE_ANY_FACE in C++ and  
                                   NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_FACE in .NET </param>  
        </member>
        <member name="T:NXOpen.Selection.SelectionDescriptor">
            <summary>  For a rectangle deselection, the fields <b> Deselection </b>,  
                <b> MultipleSelection </b>, <b> Rectangle </b>  
                bits would be set. </summary>  
             <remarks>   
                For a name selection which selected one object, the fields <b> SelectionDescriptor.Selection </b>,  
                <b> SingleSelection </b>, and <b> NameSelection </b> 
                bits would be set. 
                If a reselect was done (an object is selected and the previous object selected is deselected),  
                only the field <b> SelectionDescriptor.Reselection </b> bit is set. 
                The fields <b> SingleSelection </b> and <b> MultipleSelection </b>  
                bits are not set for position. 
                The field <b> Rectangle </b> bit is set for rectangle selection,  
                rectangle deselection, and rectangle position. 
                This function can be used with UIStyler dialogs and can be called from either the selection 
                filter procedure or the selection callback. 
                 </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.Selection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.Deselection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.Reselection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.SingleSelection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.MultipleSelection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.SinglePosition">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.RectanglePosition">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.NameSelection">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.Selection.SelectionDescriptor.Rectangle">
            <summary>   </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="T:NXOpen.Selection.FilterTaggedObjectCallback">
            <summary>  It is an optional callback which the user can provide to perform 
                application specific filtering when selecting tagged objects. </summary>  
             <remarks>   
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="entity"> Candidate object </param>  
            <param name="entityMask"> Object type, object subtype, solid type </param>  
            <param name="selectHandle"> Selection handle </param> 
        </member>
        <member name="T:NXOpen.Selection.FilterCallback">
            <summary>  It is an optional callback which the user can provide to perform 
                application specific filtering when selecting objects. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="T:NXOpen.Selection.FilterTaggedObjectCallback"> NXOpen.Selection.FilterTaggedObjectCallback </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="entity"> Candidate object </param>  
            <param name="entityMask"> Object type, object subtype, solid type </param>  
            <param name="selectHandle"> Selection handle </param> 
        </member>
        <member name="T:NXOpen.Selection.TaggedObjectSelectionCallback">
            <summary>  It is an optional callback which the user can provide to customize his selection of tagged objects  
             </summary>  
             <remarks> <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="selectedObjects"> Selected objects </param>  
            <param name="deselectedObjects"> Deselected objects </param>  
            <param name="selectHandle"> Selection handle </param> 
        </member>
        <member name="T:NXOpen.Selection.SelectionCallback">
            <summary>  It is an optional callback which the user can provide to customize his selection  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="T:NXOpen.Selection.TaggedObjectSelectionCallback"> NXOpen.Selection.TaggedObjectSelectionCallback </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="selectedObjects"> Selected objects </param>  
            <param name="deselectedObjects"> Deselected objects </param>  
            <param name="selectHandle"> Selection handle </param> 
        </member>
        <member name="P:NXOpen.Selection.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject[]@)">
            <summary>  Select objects. </summary>  
             <remarks>  
             
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>. 
                    
                   
            <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.SelectTaggedObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.TaggedObject[]@)"> Selection.SelectTaggedObjects </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectTaggedObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.TaggedObject[]@)">
            <summary>  Select tagged objects. </summary>  
             <remarks>  
             
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>. 
                    
                   
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,NXOpen.Selection.SelectionAction,System.Boolean,System.Boolean,NXOpen.Selection.MaskTriple[],NXOpen.NXObject[]@)">
            <summary>  Select objects using filter defined by mask triples. </summary>  
             <remarks>  
                 
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>. 
                 
                   
            <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.SelectTaggedObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.TaggedObject@,NXOpen.Point3d@)"> Selection.SelectTaggedObject </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="action"> Indicates how the mask array will modify the selection filter </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="maskArray"> Modifies the list of object types that can be selected. 
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectTaggedObjects(System.String,System.String,NXOpen.Selection.SelectionScope,NXOpen.Selection.SelectionAction,System.Boolean,System.Boolean,NXOpen.Selection.MaskTriple[],NXOpen.TaggedObject[]@)">
            <summary>  Select tagged objects using filter defined by mask triples. </summary>  
             <remarks>  
                 
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>. 
                 
                   
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="action"> Indicates how the mask array will modify the selection filter </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="maskArray"> Modifies the list of object types that can be selected. 
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,NXOpen.Selection.SelectionType[],NXOpen.NXObject[]@)">
            <summary>  Select objects using filter defined by selection type. </summary>  
             <remarks>  
                 
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>.  
                 
                   
            <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.SelectTaggedObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.TaggedObject@,NXOpen.Point3d@)"> Selection.SelectTaggedObject </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="typeArray"> The types that can be selected </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectTaggedObjects(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,NXOpen.Selection.SelectionType[],NXOpen.TaggedObject[]@)">
            <summary>  Select tagged objects using filter defined by selection type. </summary>  
             <remarks>  
                 
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>.  
                 
                   
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="typeArray"> The types that can be selected </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="objectArray"> The selected objects </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.NXObject@,NXOpen.Point3d@)">
            <summary>  Select single object. </summary>  
             <remarks>  
                 
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>.  
                 
                   
            <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.SelectTaggedObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.TaggedObject@,NXOpen.Point3d@)"> Selection.SelectTaggedObject </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectTaggedObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.TaggedObject@,NXOpen.Point3d@)">
            <summary>  Select single tagged object. </summary>  
             <remarks>  
                 
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>.  
                 
                   
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObject(System.String,System.String,NXOpen.Selection.SelectionScope,NXOpen.Selection.SelectionAction,System.Boolean,System.Boolean,NXOpen.Selection.MaskTriple[],NXOpen.NXObject@,NXOpen.Point3d@)">
            <summary>  Select single object using filter defined by mask triples. </summary>  
             <remarks>  
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>.  
                 
                   
            <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.SelectTaggedObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.TaggedObject@,NXOpen.Point3d@)"> Selection.SelectTaggedObject </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="action"> Indicates how the mask array will modify the selection filter </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="maskArray"> Modifies the list of object types that can be selected. 
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectTaggedObject(System.String,System.String,NXOpen.Selection.SelectionScope,NXOpen.Selection.SelectionAction,System.Boolean,System.Boolean,NXOpen.Selection.MaskTriple[],NXOpen.TaggedObject@,NXOpen.Point3d@)">
            <summary>  Select single tagged object using filter defined by mask triples. </summary>  
             <remarks>  
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>.  
                 
                   
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="action"> Indicates how the mask array will modify the selection filter </param>  
            <param name="includeFeatures"> Whether to allow the selection of features </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="maskArray"> Modifies the list of object types that can be selected. 
                                                                                                How it modifies the list of object types is determined by the SelectionAction parameter. </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,NXOpen.Selection.SelectionType[],NXOpen.NXObject@,NXOpen.Point3d@)">
            <summary>  Select single object using filter defined by selection type. </summary>  
             <remarks>  
                 
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>.  
                   
            <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.SelectTaggedObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,System.Boolean,NXOpen.TaggedObject@,NXOpen.Point3d@)"> Selection.SelectTaggedObject </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="typeArray"> The types of objects that can be selected </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectTaggedObject(System.String,System.String,NXOpen.Selection.SelectionScope,System.Boolean,NXOpen.Selection.SelectionType[],NXOpen.TaggedObject@,NXOpen.Point3d@)">
            <summary>  Select single tagged object using filter defined by selection type. </summary>  
             <remarks>  
                 
                To enable selection of objects within drawing member views, use SetCursorView API available on 
                <see href="../ugopen_doc/uf_ui/index.html"> UFUi</see>.  
                   
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="title"> Dialog title </param>  
            <param name="scope"> Selection scope </param>  
            <param name="keepHighlighted"> Whether to keep the selection highlighted after it has been selected </param>  
            <param name="typeArray"> The types of objects that can be selected </param>  
            <returns> Ok, Back, Cancel, ObjectSelected, or ObjectSelectedByName </returns>  
            <param name="object"> The selected object </param>  
            <param name="cursor"> Absolute coordinates of cursor position. This is 
                                                undefined if object is selected by name </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectFeatures(System.String,NXOpen.Selection.SelectionFeatureType,NXOpen.Features.Feature[]@)">
            <summary>  Select features   
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <param name="featType"> The types of features that are selectable </param>  
            <returns> Ok, Back, or Cancel </returns>  
            <param name="featureArray"> The selected features </param> 
        </member>
        <member name="M:NXOpen.Selection.SelectScreenPosition(System.String,NXOpen.View@,NXOpen.Point3d@)">
            <summary>  Select screen position on graphics display   
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="message"> Cue line message to display </param>  
            <returns> Pick, Back, or Cancel </returns>  
            <param name="object"> View of selected screen location </param>  
            <param name="screenPosition"> Selected screen position </param> 
        </member>
        <member name="M:NXOpen.Selection.GetNumSelectedObjects">
            <summary>  Returns the number of objects currently selected   
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> The number of objects currently selected </returns> 
        </member>
        <member name="M:NXOpen.Selection.GetSelectedObject(System.Int32)">
            <summary>  Returns the n'th object on the selection list      
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.GetSelectedTaggedObject(System.Int32)"> Selection.GetSelectedTaggedObject </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="index"> The index. Should be between 0 and <see cref="M:NXOpen.Selection.GetNumSelectedObjects"> GetNumSelectedObjects </see> </param>  
            <returns> The object at the given position on the selection list. Returns a null reference (Nothing in Visual Basic) if the index parameter 
                                                    is greater than the length of the list </returns> 
        </member>
        <member name="M:NXOpen.Selection.GetSelectedTaggedObject(System.Int32)">
            <summary>  Returns the n'th tagged object on the selection list      
             </summary>  
             <remarks> <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="index"> The index. Should be between 0 and <see cref="M:NXOpen.Selection.GetNumSelectedObjects"> GetNumSelectedObjects </see> </param>  
            <returns> The object at the given position on the selection list. Returns a null reference (Nothing in Visual Basic) if the index parameter 
                                                    is greater than the length of the list </returns> 
        </member>
        <member name="M:NXOpen.Selection.IsGlobalSelectionActive">
            <summary>  Inquires whether or not Global Selection is active (no active dialog)    
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> True if Global Selection is active (no active dialog) </returns> 
        </member>
        <member name="M:NXOpen.Selection.ClearGlobalSelectionList">
            <summary>  Clears the Global Selection list  
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.Selection.RequestSelections(NXOpen.TaggedObject[])">
            <summary>  Submit a request to the current selection owner to select the given objects. </summary>  
             <remarks>  Note that the 
                    selection owner may not allow some objects to be selected.  
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="selectList"></param> 
        </member>
        <member name="M:NXOpen.Selection.RequestDeselections(NXOpen.TaggedObject[])">
            <summary>  Submit a request to the current selection owner to deselect the given objects. </summary>  
             <remarks>  Note that the 
                    selection owner may not allow some objects to be deselected.  
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="deselectList"></param> 
        </member>
        <member name="M:NXOpen.Selection.SetSelectionMask(NXOpen.SelectionHandle,NXOpen.Selection.SelectionAction,NXOpen.Selection.MaskTriple[])">
            <summary>  Sets the types of objects that are selectable. </summary>  
             <remarks>  If this function is not 
                    called to set the mask, then the default mask is all standard types. 
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="action"> Mask action </param>  
            <param name="maskArray"> Mask triples </param> 
        </member>
        <member name="M:NXOpen.Selection.SetSelectType(NXOpen.SelectionHandle,NXOpen.Selection.UistylerSelectionType)">
            <summary>  Sets the selection type. </summary>  
             <remarks>  It can be called from a callback to change  
                the type of selection associated with the dialog.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="type"> Selection type </param> 
        </member>
        <member name="M:NXOpen.Selection.SetSelectionCallbacks(NXOpen.SelectionHandle,NXOpen.Selection.FilterCallback,NXOpen.Selection.SelectionCallback)">
            <summary>  Specify selection filter callback for additional filtering based on 
                    application specific criteria, and/or selection callback to perform 
                    application specific processing for each selection gesture processed. </summary>  
             <remarks>   
                    Both the filter callback and the selection callback are passed object  
                    to <see cref="T:NXOpen.SelectionHandle">  SelectionHandle  </see> which can be used to inquire  
                    other selection data or modify selection. This selection handle object  
                    is no longer valid after the filter callback or selection callback is exited. 
                 
            <para> Created in NX5.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.SetTaggedObjectSelectionCallbacks(NXOpen.SelectionHandle,NXOpen.Selection.FilterTaggedObjectCallback,NXOpen.Selection.TaggedObjectSelectionCallback)"> NXOpen.Selection.SetTaggedObjectSelectionCallbacks </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="filterproc"> Filter callback for additional user specific 
            filtering. </param>  
            <param name="selcb"> Selection callback for application specific 
            processing. </param> 
        </member>
        <member name="M:NXOpen.Selection.SetTaggedObjectSelectionCallbacks(NXOpen.SelectionHandle,NXOpen.Selection.FilterTaggedObjectCallback,NXOpen.Selection.TaggedObjectSelectionCallback)">
            <summary>  Specify selection filter callback for additional filtering of tagged objects based on 
                    application specific criteria, and/or selection callback to perform 
                    application specific processing for each selection gesture processed. </summary>  
             <remarks>   
                    Both the filter callback and the selection callback are passed object  
                    to <see cref="T:NXOpen.SelectionHandle">  SelectionHandle  </see> which can be used to inquire  
                    other selection data or modify selection. This selection handle tagged object  
                    is no longer valid after the filter callback or selection callback is exited. 
                 
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="filterproc"> Filter callback for additional user specific 
            filtering. </param>  
            <param name="selcb"> Selection callback for application specific 
            processing. </param> 
        </member>
        <member name="M:NXOpen.Selection.GetSelectionStatusOfUserDefinedClass(NXOpen.UserDefinedObjects.UserDefinedClass)">
            <summary>  Gets whether or not the user defined class is available for selection. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="udoClass"> The UserDefinedClass in question </param>  
            <returns> Allow the selection of this UserDefinedClass </returns> 
        </member>
        <member name="M:NXOpen.Selection.SetSelectionStatusOfUserDefinedClass(NXOpen.UserDefinedObjects.UserDefinedClass,System.Boolean)">
            <summary>  Sets whether or not the user defined class is available for selection. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="udoClass"> The UserDefinedClass in question </param>  
            <param name="selectionStatus"> Allow the selection of this UserDefinedClass </param> 
        </member>
        <member name="M:NXOpen.Selection.RemoveFromSelectionList(NXOpen.SelectionHandle,NXOpen.NXObject[],System.Boolean)">
            <summary>  Removes objects from the selection list. </summary>  
             <remarks>  
                Use this function with UIStyler dialogs. It can be called from the selection callback.  
                It cannot be called from the selection filter procedure. 
                 
                If any of the objects are not in the list, an error is returned and NO 
                objects are removed from the list. 
                 
                It could be called by the selection callback to remove 
                objects from the selection list. For example, based on objects just 
                deselected, the application may need to remove other associated 
                objects from the selection list. 
                 
            <para> Created in NX5.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.RemoveTaggedObjectsFromSelectionList(NXOpen.SelectionHandle,NXOpen.TaggedObject[],System.Boolean)"> Selection.RemoveTaggedObjectsFromSelectionList </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objs"> Array of object </param>  
            <param name="unhighlight"> If true, unhighlight objects </param> 
        </member>
        <member name="M:NXOpen.Selection.RemoveTaggedObjectsFromSelectionList(NXOpen.SelectionHandle,NXOpen.TaggedObject[],System.Boolean)">
            <summary>  Removes tagged objects from the selection list. </summary>  
             <remarks>  
                Use this function with UIStyler dialogs. It can be called from the selection callback.  
                It cannot be called from the selection filter procedure. 
                 
                If any of the objects are not in the list, an error is returned and NO 
                objects are removed from the list. 
                 
                It could be called by the selection callback to remove 
                objects from the selection list. For example, based on objects just 
                deselected, the application may need to remove other associated 
                objects from the selection list. 
                 
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objs"> Array of object </param>  
            <param name="unhighlight"> If true, unhighlight objects </param> 
        </member>
        <member name="M:NXOpen.Selection.RemoveAllFromSelectionList(NXOpen.SelectionHandle,System.Boolean)">
            <summary>  Removes all the objects from the selection list and optionally unhighlights them. </summary>  
             <remarks>  
                Use this function with UIStyler dialogs. 
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="unhighlight"> If true, unhighlight objects </param> 
        </member>
        <member name="M:NXOpen.Selection.IsObjectInSelectionList(NXOpen.SelectionHandle,NXOpen.TaggedObject)">
            <summary>  Inquires if object is selected. </summary>  
             <remarks>  
                Use this function with UIStyler dialogs. 
                  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="object"> Object </param>  
            <returns> If true, object is in the selection list, else false. </returns> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionListCount(NXOpen.SelectionHandle)">
            <summary>  Returns the number of objects currently selected. </summary>  
             <remarks>  
                Use this function with UIStyler dialogs. 
                  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <returns> Count of objects selected </returns> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionObjectList(NXOpen.SelectionHandle,NXOpen.NXObject[]@)">
            <summary>  Returns the number of objects selected and a pointer to an array of 
                tags of the objects selected. </summary>  
             <remarks>  Use this function with UIStyler dialogs. 
            <para> Created in NX5.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.AskSelectionTaggedObjectList(NXOpen.SelectionHandle,NXOpen.TaggedObject[]@)"> Selection.AskSelectionTaggedObjectList </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objects"> Selected objects. </param> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionTaggedObjectList(NXOpen.SelectionHandle,NXOpen.TaggedObject[]@)">
            <summary>  Returns the number of tagged objects selected and a pointer to an array of 
                tags of the objects selected. </summary>  
             <remarks>  Use this function with UIStyler dialogs. 
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objects"> Selected objects. </param> 
        </member>
        <member name="M:NXOpen.Selection.AddToSelectionList(NXOpen.SelectionHandle,NXOpen.NXObject[],System.Boolean)">
            <summary>  Add objects to the selection list. </summary>  
             <remarks>  
                Any objects already in the selection list are ignored. Use this function with UIStyler dialogs.  
                You can call this from the constructor callback/selection initialization procedure to begin  
                the dialog with objects already selected.  
                 The user can then review these objects, and if desired, deselect them. 
                 
                The application selection callback can also call this function to add other objects  
                to the selection list based on the objects(s) just selected. The selection filter  
                procedure cannot call this function. Based on the object(s) just selected, other  
                objects may need to be selected. For example, all edges of the selected face  
                or all faces tangent to the selected face. 
                 
            <para> Created in NX5.0.0 </para>  
             
            <para> Deprecated in NX8.0.0.  Use <see cref="M:NXOpen.Selection.AddToTaggedObjectsSelectionList(NXOpen.SelectionHandle,NXOpen.TaggedObject[],System.Boolean)"> Selection.AddToTaggedObjectsSelectionList </see> instead</para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objs"> Objects to be added in the selection list </param>  
            <param name="highlightFlag"> If true, highlight objects </param> 
        </member>
        <member name="M:NXOpen.Selection.AddToTaggedObjectsSelectionList(NXOpen.SelectionHandle,NXOpen.TaggedObject[],System.Boolean)">
            <summary>  Add objects to the selection list. </summary>  
             <remarks>  
                Any objects already in the selection list are ignored. Use this function with UIStyler dialogs.  
                You can call this from the constructor callback/selection initialization procedure to begin  
                the dialog with objects already selected.  
                 The user can then review these objects, and if desired, deselect them. 
                 
                The application selection callback can also call this function to add other objects  
                to the selection list based on the objects(s) just selected. The selection filter  
                procedure cannot call this function. Based on the object(s) just selected, other  
                objects may need to be selected. For example, all edges of the selected face  
                or all faces tangent to the selected face. 
                 
            <para> Created in NX7.5.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="objs"> Objects to be added in the selection list </param>  
            <param name="highlightFlag"> If true, highlight objects </param> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionDescriptor(NXOpen.SelectionHandle)">
            <summary>  Returns the information in <see cref="T:NXOpen.Selection.SelectionDescriptor">  Selection.SelectionDescriptor  </see>  
                describing the selection that was just performed. </summary>  
             <remarks>  
                  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionCursorPosition(NXOpen.SelectionHandle,NXOpen.View@)">
            <summary>  Returns the view and absolute coordinates of the cursor position for the associated selection. </summary>  
             <remarks>   
                    If an object was selected, the view returned is the view in which the object was selected.  
                    For single position, the view is the view of the cursor. If the object was selected by name,  
                    view = a null reference (Nothing in Visual Basic) and the cursor position is undefined. 
                  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="view"> </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.Selection.AskSelectionRectanglePosition(NXOpen.SelectionHandle,NXOpen.Point3d@,NXOpen.Point3d@,NXOpen.Point3d@,NXOpen.Point3d@)">
            <summary>  Returns the absolute coordinates of the rectangle cursor positions. </summary>  
             <remarks>  
                The view that returns is the view of the button down position. 
                 
                button down position - is the position where you press and hold mouse button 1. 
                button up position -   is the position where you release mouse button 1. 
                 
                Pos1 and Pos2 are the absolute coordinates of the button down and 
                button up positions respectively. Pos3 is the absolute coordinates of 
                the rectangle corner which, as viewed on the screen, is horizontal with 
                pos1. Pos4 is the absolute coordinates of the rectangle corner which, 
                as viewed on the screen, is horizontal with pos2. 
                Returns an error if the last gesture was not rectangle. 
                  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select"> Selection handle </param>  
            <param name="position1"> Absolute coordinates of the button down position </param>  
            <param name="position2"> Absolute coordinates of the button up position </param>  
            <param name="position3"> Absolute coordinates of corner of screen rectangle 
                                           which is horizontal with button down position</param>  
            <param name="position4"> Absolute coordinates of corner of screen rectangle 
                                           which is horizontal with button up position </param>  
            <returns> View of button down position </returns> 
        </member>
        <member name="M:NXOpen.Selection.CreateSelectionSubscriber">
            <summary>  Creates a Selection Subscriber  
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="T:NXOpen.SelectionHandle">
            <summary>  Represents a SelectionHandle for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.SelectionHandle.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.SelectionSubscriber">
            <summary>  
            Defines a <see cref="T:NXOpen.SelectionSubscriber"> SelectionSubscriber </see> for managing selection events 
             </summary>  
             <remarks> <para>To create a new instance of this class, use <see cref="M:NXOpen.Selection.CreateSelectionSubscriber"> NXOpen.Selection.CreateSelectionSubscriber  </see></para> 
            <para> Created in NX11.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.SelectionSubscriber.OnSelectionChangeCallback">
            <summary>  Prototype for a callback which is called at the end of a series of changes to the set of 
                    selected objects. </summary>  
             <remarks>   The series of changes are all of the changes which occur as part  
                    of the response to a single user action.  
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="clearAll"> If true, all previously selected objects are no longer selected.  
                                                          In this case, the Deselected Objects list will be empty, and the 
                                                          Selected Objects list is the set of objects that are currently selected. </param>  
            <param name="deselectedObjects"> Objects deselected by the user action. </param>  
            <param name="selectedObjects"> Objects selected by the user action. </param> 
        </member>
        <member name="M:NXOpen.SelectionSubscriber.Activate">
            <summary>  Activate the subscriber so that it will receive selection change notifications. </summary>  
             <remarks>   
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.SelectionSubscriber.Deactivate">
            <summary>  Deactivate the subscriber so that it will not receive selection change notifications. </summary>  
             <remarks>   
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.SelectionSubscriber.IsActive">
            <summary>  Is the subscriber active?  
             </summary>  
             <remarks> <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.SelectionSubscriber.RegisterOnSelectionChangeCallback(NXOpen.SelectionSubscriber.OnSelectionChangeCallback)">
            <summary>  Register a callback which is called at the end of a series of changes to the set of 
                    selected objects. </summary>  
             <remarks>   The series of changes are all of the changes which occur as part  
                    of the response to a single user action.  
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="callbackToRegister"> Callback </param> 
        </member>
        <member name="M:NXOpen.SelectionSubscriber.FreeResource">
            <summary>  Releases resources allocated by the selection subscriber. </summary>  
             <remarks>  Call this method when you are done with your selection operations.  
            <para> Created in NX11.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.TreeListNode">
            <summary>  Represents a TreeList Node Object  
             </summary>  
             <remarks> <para> Created in NX6.0.4 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UI">
            <summary>  This class contains the various elements that represent the NX User Interface. </summary>  
             <remarks>  There is 
                a single instance of this class per session. To obtain a reference to the current UI,  
                call the static method <see cref="M:NXOpen.UI.GetUI"> UI.GetUI </see>. 
             
                For Java, use <code>SessionFactory::get("UI")</code> to obtain the reference of the current UI. 
             
                For language bindings that support remoting, the server must export it for this  
                class to be obtained by a client. 
             
            <para>Use the static method in this class to obtain an instance. </para> 
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UI.Status">
            <summary>  Indicates the Lock, Unlock status of NX functions. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.UI.Status.Lock">
            <summary>  Lock status  </summary>  
              
        </member>
        <member name="F:NXOpen.UI.Status.Unlock">
            <summary>  Unlock status  </summary>  
              
        </member>
        <member name="T:NXOpen.UI.UtilityFunctionVisibilityHandler">
            <summary>  User defined method is called whenever an NX utility function state changes. </summary>  
             <remarks>   An 
                    example of a NX utility function is the Preferences - User Interface dialog. 
                     
                    <para> 
                    The input parameter, visible is true when the function becomes 
                    visible and false when the function is no longer visible. 
                    </para> 
                     
                    <para> 
                    NX utility functions can be nested. The following scenario describes when this method 
                    is called for a function call in the middle of another function and 
                    then exiting both functions: 
                    </para> 
                     
                    <code> 
                    First utility function call 
                    UtilityFunctionVisibilityHandler - visible == true 
                     
                      Second utility function call while the first utility function is still visible 
                      UtilityFunctionVisibilityHandler - visible == true 
                       
                      Second utility function exit 
                      UtilityFunctionVisibilityHandler - visible == false 
                       
                    First utility function exit 
                    UtilityFunctionVisibilityHandler - visible == false 
                    </code> 
                         
                      
            <para> Created in NX5.0.5 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="visible"> </param> 
        </member>
        <member name="P:NXOpen.UI.NXMessageBox">
            <summary>  the Uistyler for the current session. </summary>  
             <remarks>   
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.Styler">
            <summary>  the Uistyler for the current session. </summary>  
             <remarks>   
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.SelectionManager">
            <summary>  the SelectionManager for the current session. </summary>  
             <remarks>   
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.ObjectPreferences">
            <summary>  the UI based Object Preferences in the current session. </summary>  
             <remarks>  
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.UserInterfacePreferences">
            <summary>  the UI based User Interface Preferences in the current session  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.VisualizationVisualPreferences">
            <summary>  the UI based Visualization Preferences under Visual Tab in the current session  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.VisualizationLinePreferences">
            <summary>  the UI based Visualization Preferences under Line Tab in the current session  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.VisualizationShadingPreferences">
            <summary>  the UI based Visualization Preferences under Shading Tab in the current session   
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.MenuBarManager">
            <summary>  Returns the <see cref="T:NXOpen.MenuBar.MenuBarManager"> NXOpen.MenuBar.MenuBarManager </see> belonging to the current session  
             </summary>  
             <remarks> <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.MovieManager">
            <summary>  the Movie Manager class. </summary>  
             <remarks>   
            <para> Created in NX3.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UI.ViewUIManager">
            <summary>  Returns the <see cref="P:NXOpen.UI.ViewUIManager"> ViewUIManager </see>  
             </summary>  
             <remarks> <para> Created in NX11.0.1 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.UI.LockAccess">
            <summary>  Locks access to the NX User Interface. </summary>  
             <remarks>  This method may be used for a custom dialog 
                    that requires the session to remain in a known state. When this method is called, 
                    all menu items that would allow the user to edit the model are grayed out. 
                    <para> 
                    Note that until <see cref="M:NXOpen.UI.UnlockAccess"> UnlockAccess </see> is called, the user will not 
                    be able to interact with the session. You must ensure that the UI is unlocked when 
                    the custom dialog terminates. 
                    </para> 
                    <para> 
                    This method will throw an exception if the UI cannot be locked. Note that if the UI has already been  
                    locked, then it is safe to call this method again. 
                    </para> 
                     
            <para> Created in NX3.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UI.UnlockAccess">
            <summary>  Unlocks access for a UI that has been locked by a call to <see cref="M:NXOpen.UI.LockAccess"> LockAccess </see>. </summary>  
             <remarks>  If the UI 
                    is already unlocked, this method has no effect. 
                  
            <para> Created in NX3.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UI.JournalPause">
            <summary>  Pauses execution of a journal. </summary>  
             <remarks>   
            <para> Created in NX4.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UI.AskLockStatus">
            <summary>  Query NX lock status. </summary>  
             <remarks>  
                This function is useful when dismissing a custom dialog and you want 
                to determine whether or not a lock has been set. Returns <see cref="F:NXOpen.UI.Status.Lock"> NXOpen.UI.Status.Lock </see>,  
                when NX is in lock status. Returns <see cref="F:NXOpen.UI.Status.Unlock"> NXOpen.UI.Status.Unlock </see>,  
                when NX is in unlock status. 
                  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UI.CreateDialog(System.String)">
            <summary>  Creates a block dialog. </summary>  
             <remarks>   
                Use <code>#undef CreateDialog</code> in C++ programs to avoid confusion with Windows API  
            <para> Created in NX6.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="dialogName"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UI.AddUtilityFunctionVisibilityHandler(NXOpen.UI.UtilityFunctionVisibilityHandler)">
            <summary>  Registers a user defined method that is called whenever an utility function state changes. </summary>  
             <remarks>    
            <para> Created in NX5.0.5 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="utilityFunctionVisibilityHandler"> </param>  
            <returns> identifier of registered method (used to unregister the method) </returns> 
        </member>
        <member name="M:NXOpen.UI.RemoveUtilityFunctionVisibilityHandler(System.Int32)">
            <summary>  Unregisters a user defined method that is called whenever an utility function state changes. </summary>  
             <remarks>   
            <para> Created in NX5.0.5 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="id"> identifier for method to unregister </param> 
        </member>
        <member name="M:NXOpen.UI.CreateCustomPopupMenuHandler">
            <summary>  Create a custom menu. </summary>  
             <remarks>    
            <para> Created in NX6.0.4 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UI.CreateSnapDialog(System.String)">
            <summary>  Creates a snap dialog. </summary>  
             <remarks>    
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="dialogName"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UI.CreateImageExportBuilder">
            <summary>  Creates a <see cref="T:NXOpen.Gateway.ImageExportBuilder"> NXOpen.Gateway.ImageExportBuilder </see>  
             </summary>  
             <remarks> <para> Created in NX12.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.UI.CanOpenPart">
            <summary>  Returns a flag indicating whether the NX user interface is in a state 
                where opening a part and making it the display part is supported. </summary>  
             <remarks>   
                For example if certain dialogs are displayed or  
                the system is in a task environment it is not supported       
                 
            <para> Created in NX8.5.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="T:NXOpen.UIStyler.Attachment">
            <summary>  Represents an Attachment for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Attachment.AttachType">
            <summary>  Represents alignment option for Styler Item  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.Dialog">
            <summary>  Dialog type  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.Default">
            <summary>  Default type   </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.None">
            <summary>  None type  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.NoChange">
            <summary>  No change type  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Attachment.AttachType.Item">
            <summary>  Item type  </summary>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>   
                 After this method is called, it is illegal to use the object.   
                 In .NET or Java, this method is automatically called when  
                 the object is deleted by the garbage collector.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetCenter(System.Boolean)">
            <summary>  Sets whether the dialog item is at the center 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="isCenter"> center</param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetAttachTypeTop(NXOpen.UIStyler.Attachment.AttachType)">
            <summary>  Sets the attach type top 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="attachTypeTop"> attach_type_top </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetAttachTypeLeft(NXOpen.UIStyler.Attachment.AttachType)">
            <summary>  Sets the attach type left 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="attachTypeLeft"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetAttachTypeRight(NXOpen.UIStyler.Attachment.AttachType)">
            <summary>  Sets the attach type right 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="attachTypeRight"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetTopOffset(System.Int32)">
            <summary>  Sets the top offset 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="offsetTop"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetLeftOffset(System.Int32)">
            <summary>  Sets the left offset 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="offsetLeft"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetRightOffset(System.Int32)">
            <summary>  Sets the right offset 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="offsetRight"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetTopDialogItem(System.String)">
            <summary>  Sets the top dialog item 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="topItemIdentifire"> Top item identifier </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetLeftDialogItem(System.String)">
            <summary>  Sets the left dialog item 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="leftItemIdentifire"> Left item identifier </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Attachment.SetRightDialogItem(System.String)">
            <summary>  Sets the right dialog item 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="rightItemIdentifire"> Right item identifier </param> 
        </member>
        <member name="T:NXOpen.UIStyler.BitMap">
            <summary>  Represents a Bit Map for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.BitMap.SetBitmap(System.String)">
            <summary>  Sets the bitmap filename. </summary>  
             <remarks>  The filename extension must be: .UBM, .XPM, or .BMP. 
                The bitmap can be of any size. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmap"> filename with .ubm, .xpm, or .bmp extension that contains bitmap definition </param> 
        </member>
        <member name="T:NXOpen.UIStyler.ButtonLayout">
            <summary>  Represents a Button Layout for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ButtonLayout.Activate">
            <summary> Called when a dialog user clicks on a push button or presses the spacebar when a push  
                button has keyboard focus. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.AddActivateHandler(NXOpen.UIStyler.ButtonLayout.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Callback for activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Sets the sensitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> If the entire dialog item should change to the new sensitivity state,  
                    set this field to UF_STYLER_NO_SUB_INDEX. If only one subitem should change to the new sensitivity  
                    state, set this field to its zero-based index. </param>  
            <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.GetSensitivity">
            <summary>  Gets the sensitivity   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.GetSelectedIndexValue">
            <summary>  Gets selected index   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.ButtonLayout.SetDefaultAction">
            <summary>  Sets default action  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ButtonLayout.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.CollapsibleGroup">
            <summary>  Represents a Collapsible Group for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.CollapsibleGroup.SetLabel(System.String)">
            <summary> Sets label of collapsible group 
             </summary>  
             <remarks> <para> Created in NX6.0.5 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text to be set as label </param> 
        </member>
        <member name="P:NXOpen.UIStyler.CollapsibleGroup.CollapseState">
            <summary>  Returns or sets the collapse-state 
             </summary>  
             <remarks> <para> Created in NX6.0.5 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.CollapsibleGroup.Visibility">
            <summary>  Returns or sets the visibility 
             </summary>  
             <remarks> <para> Created in NX6.0.5 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ColorTool">
            <summary>  Represents a ColorTool for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ColorTool.ValueChanged">
            <summary> Called when a dialog user enters a valid color value. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ColorTool.AddValueChangedHandler(NXOpen.UIStyler.ColorTool.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Callback for value changed event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="P:NXOpen.UIStyler.ColorTool.ItemValue">
            <summary>  Returns or sets  the item value  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ColorTool.Sensitivity">
            <summary>  Returns or sets  the sensitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ColorTool.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogResponse">
            <summary>  Represents dialog response  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.PickResponse">
            <summary>  User response was a selection of objects. </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Ok">
            <summary>  OK button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Cancel">
            <summary>  Cancel button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Back">
            <summary>  Back button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Apply">
            <summary>  Apply button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.Help">
            <summary>  Help button was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.ObjectSelected">
            <summary>  Object was selected.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.ObjectSelectedByName">
            <summary>  Object was selected by name.  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogResponse.CbTerminate">
            <summary>  Callback routine has terminated.  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogIndex">
            <summary>  Represents indexes  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogIndex.NoSubIndex">
            <summary>  All sub items are selected. </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Dialog">
            <summary>  Represents a DialogItem for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Dialog.ItemType">
            <summary>  Represents dialog item type  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.PushButton">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.DialogItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.RadioBox">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.RealItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.RealScale">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.Bitmap">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.RowColumn">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.ButtonLayout">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.ScrolledWindow">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.ColorTool">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.SelectionBox">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.Separator">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.SingleSelectList">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.StringItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.GroupBox">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.IntegerItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.IntegerScale">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.MultiSelectList">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.LabelItem">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.MultiTextBox">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.TabControl">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.OptionMenu">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.Toggle">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.OptionToggle">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.ToolPalette">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.WideString">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.PropertyPage">
            <summary>    </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.Dialog.ItemType.CollapsibleGroup">
            <summary>    </summary>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetDialogIndex(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetPushButton(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetBitmap(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetButtonLayout(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetColorTool(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetGroupBox(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetIntegerItem(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetIntegerScale(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetMultiSelectList(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetMultiTextBox(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetOptionMenu(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetOptionToggle(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetPropertyPage(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetRadioBox(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetRealItem(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetRealScale(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetRowColumn(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetScrolledWindow(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetSelectionBox(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetSeparator(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetSingleSelectList(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetStringItem(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetTabControl(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetToggle(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetToolPalette(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetLabelItem(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetCollapsibleGroup(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetWideString(System.String)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetStylerItem(System.String,NXOpen.UIStyler.Dialog.ItemType)">
            <summary>  Gets the dialog item with specified item identifier   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemIdentifier"> Dialog name </param>  
            <param name="type"> </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.GetDialogItemUsingSelectionHandle(NXOpen.SelectionHandle)">
            <summary>  Gets the dialog item for a selection handle   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="select">Selection handle </param>  
            <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.Show">
            <summary>  Displays an NX (UIStyler generated) "bottom" dialog. </summary>  
             <remarks>   This dialog  
                    is displayed to NX. Show Method can only be called once for the  
                    dialog object.Once show method is called <see cref="M:NXOpen.UIStyler.Dialog.GetStylerItem(System.String,NXOpen.UIStyler.Dialog.ItemType)"> UIStyler.Dialog.GetStylerItem </see>  
                    will create any item 
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">
            <summary>  Registers the dialog with a menu item. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="isTopDialog"> </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem">
            <summary>  Represents a DialogItem for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.DialogItemIndex">
            <summary>  Describes dialog item index  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogItem.DialogItemIndex.Ok">
            <summary>  Ok index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogItem.DialogItemIndex.Apply">
            <summary>  Apply index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogItem.DialogItemIndex.Back">
            <summary>  Back index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogItem.DialogItemIndex.Cancel">
            <summary>  Cancel index  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Construct">
            <summary> Called when the dialog displays. </summary>  
             <remarks>  You can use the Constructor callback to set up dialog item attributes  
                such as populating a list or setting the sensitivity of a dialog item.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Destruct">
            <summary> Called when the dialog closes. </summary>  
             <remarks>  Use the Destructor callback to perform cleanup.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Okay">
            <summary> Called when a dialog user clicks OK or MB2 anywhere in NX or presses the OK's keyboard accelerator  
                as defined in the resource file. </summary>  
             <remarks>  OK callbacks should terminate the dialog and always return  
                UF_UI_CB_EXIT_DIALOG.  
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Apply">
            <summary> Called when a dialog user clicks Apply or &lt;Ctrl&gt;MB2 anywhere in NX or presses the Apply's  
                keyboard accelerator as defined in the resource file. </summary>  
             <remarks>  Apply callbacks should not terminate  
                the dialog and always return UF_UI_CB_CONTINUE_DIALOG.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.PageSwitch">
            <summary> Called when a user switches tabs. </summary>  
             <remarks>   
            <para> Created in NX8.5.3 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Back">
            <summary> Called when a dialog user clicks Back &lt;Shift&gt;MB2 anywhere in NX or presses Back's keyboard accelerator  
                as defined in the resource file. </summary>  
             <remarks>  Back callbacks should terminate the dialog and always return  
                UF_UI_CB_EXIT_DIALOG.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.Cancel">
            <summary> Called when a dialog user clicks Cancel or &lt;Alt&gt;MB2 anywhere in NX or presses Cancel's keyboard accelerator  
                as defined in the resource file. </summary>  
             <remarks> Cancel callbacks should terminate the dialog and always return UF_UI_CB_EXIT_DIALOG.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogItem.FileOperation">
            <summary> Called just before a dialog user selects a file operation, such as in File?New, and again after a file 
                operation completes. </summary>  
             <remarks>  
                A typical use for a file operation callback would be to make sure that the system updates cached part data  
                in a part before a dialog user executes a File?Save. The callback can determine from the callback data  
                structure whether the file operation is about to begin or has just completed. It can also determine  
                which operation is being executed. This callback is only used on DA1 dialogs because the DA2 dialogs  
                are usually cancelled (automatically through the quick access menus) when a dialog user selects any of  
                the File menu options.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddConstructHandler(NXOpen.UIStyler.DialogItem.Construct,System.Boolean)">
            <summary> Registers construct callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="constructevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddDestructHandler(NXOpen.UIStyler.DialogItem.Destruct,System.Boolean)">
            <summary> Registers destruct callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="destructevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddOkayHandler(NXOpen.UIStyler.DialogItem.Okay,System.Boolean)">
            <summary> Registers ok callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="okayevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddApplyHandler(NXOpen.UIStyler.DialogItem.Apply,System.Boolean)">
            <summary> Registers apply callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="applyevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddPageSwitchHandler(NXOpen.UIStyler.DialogItem.PageSwitch,System.Boolean)">
            <summary> Registers switch callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX8.5.3 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="switchevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddBackHandler(NXOpen.UIStyler.DialogItem.Back,System.Boolean)">
            <summary> Registers back callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="backevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddCancelHandler(NXOpen.UIStyler.DialogItem.Cancel,System.Boolean)">
            <summary> Registers cancel callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="cancelevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.AddFileOperationHandler(NXOpen.UIStyler.DialogItem.FileOperation,System.Boolean)">
            <summary> Registers file operation callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="fileoperationevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetTitle(System.String)">
            <summary> Specifies a string to display on the top border of the dialog  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetSensitivity(System.Boolean)">
            <summary> Specifies the sensitivity of the dialog. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="type">TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetNavigationSensitivity(NXOpen.UIStyler.DialogItem.DialogItemIndex,System.Boolean)">
            <summary>  Specifies the sensitivity of the navigation buttons at the bottom of the dialog. </summary>  
             <remarks>  If you set the  
                UF_STYLER_BACK_INDEX button to insensitive at creation time, the system does not show the BACK button;  
                Changing the button's sensitivity while the dialog displays does not show the Back button.  
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Sub item index </param>  
            <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetResize(System.Boolean)">
            <summary> Specifies wether dialog is allowed to resize  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="type">TRUE to allow dialog to resize; FALSE to freeze the dialog size</param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.SetWidth(System.Int32)">
            <summary> Specifies the pixel width for the dialog. </summary>  
             <remarks>  You can only set this attribute when the  
                Dialog Resize attribute is set to TRUE. You cannot enter a negative number.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="width"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.DialogItem.GetSelectionHandle">
            <summary>  Gets the selection handle for a given dialog item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>Selection handle </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.DialogItem.FileOperationData">
            <summary>  Returns  the file operation data  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.FileOperationData">
            <summary>  Represents a FileOperationData for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.FileOperationData.FileOperationType">
            <summary>  Describes file operation  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.New">
            <summary>  New file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Open">
            <summary>  Open file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Save">
            <summary>  Save file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAs">
            <summary>  Save as file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAll">
            <summary>  Save all file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Close">
            <summary>  Close file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Quit">
            <summary>  Quit file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAndExit">
            <summary>  Save and Exit file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.ChangePart">
            <summary>  Chaneg part file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Execute">
            <summary>  Execute file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.Reopen">
            <summary>  Reopen file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAllAndClose">
            <summary>  Save all and close file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAndClose">
            <summary>  Save and close file operation  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationType.SaveAsAndClose">
            <summary>  Save as and close file operation  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.FileOperationData.FileOperationState">
            <summary>  Describes file state  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationState.Enter">
            <summary>  Enter file state  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.FileOperationData.FileOperationState.Exit">
            <summary>  Exit file state  </summary>  
              
        </member>
        <member name="M:NXOpen.UIStyler.FileOperationData.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.FileOperationData.State">
            <summary>  Returns  the state  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.FileOperationData.Type">
            <summary>  Returns  the file operation type  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.GroupBox">
            <summary>  Represents a GroupBox for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.GroupBox.SetLabel(System.String)">
            <summary>   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text label to display in the top line of the group box frame </param> 
        </member>
        <member name="P:NXOpen.UIStyler.GroupBox.Sensitivity">
            <summary>  Returns or sets  the sensitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.GroupBox.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.IntegerItem">
            <summary>  Represents a Integer for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.IntegerItem.Activate">
            <summary> Called when a dialog user enters a valid integer value and presses Return  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerItem.AddActivateHandler(NXOpen.UIStyler.IntegerItem.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerItem.SetBitmap(System.String)">
            <summary> Specifies a filename that contains a bitmap definition. </summary>  
             <remarks>  The filename must contain a UBM, XPM, or BMP  
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text  
                label. When a bitmap is present, the system uses the text label as tooltip text when a user places the  
                mouse cursor over the bitmap. We recommend that you use a 16x16 bitmap for this dialog item.  
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmap">Filename with .ubm, .xpm, or .bmp extension that contains bitmap definition</param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerItem.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog  
                item's intended use. If you specify a bitmap for this dialog item, it uses this text as tooltip text.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> String to display on the left side of the text field.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerItem.SetFocus">
            <summary>  Sets focus  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerItem.ItemValue">
            <summary>  Returns or sets the value obtained from the text field. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerItem.Sensitivity">
            <summary>  Returns or sets  the sensitivity of Integer item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerItem.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.IntegerScale">
            <summary>  Represents a IntegerScale for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.IntegerScale.ValueChanged">
            <summary> Called when a dialog user moves the slider to a new position. </summary>  
             <remarks>   
                Do not terminate the dialog with a value-changed callback. The dialog should always return  
                UF_UI_CB_CONTINUE_DIALOG.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.IntegerScale.Drag">
            <summary> Called when a dialog user moves the slider up and down the scale. </summary>  
             <remarks>  For example, if a user moves the  
                slider from 0 to 100, the dialog calls the drag callback 100 times, one for each value that the  
                slider moves across.  
                Do not terminate the dialog with a drag callback. The dialog should always return  
                UF_UI_CB_CONTINUE_DIALOG.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerScale.AddValueChangedHandler(NXOpen.UIStyler.IntegerScale.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Value changed event </param>  
            <param name="isDialogLaunchingEvent"> True if launch any dialog else False </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerScale.AddDragHandler(NXOpen.UIStyler.IntegerScale.Drag,System.Boolean)">
            <summary> Registers drag callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="dragevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerScale.SetLimits(System.Int32,System.Int32)">
            <summary> Specifies the scale's maximum and minimum value. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="minimumValue">to set minimum </param>  
            <param name="maximumValue">to set maximum </param> 
        </member>
        <member name="M:NXOpen.UIStyler.IntegerScale.SetLabels(System.String,System.String)">
            <summary> Specifies the text for the minimum and maximum label. </summary>  
             <remarks>  By default, the system uses the maximum/minimum  
                value as a text label. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="minimumLabel">minimum limit for label </param>  
            <param name="maximumLabel">maximum limit for label </param> 
        </member>
        <member name="P:NXOpen.UIStyler.IntegerScale.ItemValue">
            <summary>  Returns or sets   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerScale.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the dialog item. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.IntegerScale.Visibility">
            <summary>  Returns or sets the visibility of the dialog item. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.LabelItem">
            <summary>  Represents a Label for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.LabelItem.SetBitmap(System.String)">
            <summary>  Specifies a filename that contains a bitmap definition. </summary>  
             <remarks>   
                The filename must contain a UBM, XPM, or BMP extension.  
                When you use this field, the system displays a bitmap for this dialog item  
                instead of a text label. When a bitmap is present, the system uses  
                the text label as tooltip text when a user places the mouse cursor over the bitmap.  
                We recommend that you use a 16x16 bitmap for this dialog item.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmapFile"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.LabelItem.SetLabel(System.String)">
            <summary>  Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog item's intended use. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> </param> 
        </member>
        <member name="P:NXOpen.UIStyler.LabelItem.Sensitivity">
            <summary>  Returns or sets  the seisitivity of the dialog item 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.LabelItem.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.MultiSelectList">
            <summary>  Represents a MultiSelectList for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.MultiSelectList.Activate">
            <summary>   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.MultiSelectList.DoubleClick">
            <summary> Called when a dialog user selects an entry with a single mouse click or presses the spacebar  
                on a selected item. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.AddActivateHandler(NXOpen.UIStyler.MultiSelectList.Activate,System.Boolean)">
            <summary> Called when a dialog user selects an entry with a double mouse click or presses Return on  
                a selected item. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.AddDoubleClickHandler(NXOpen.UIStyler.MultiSelectList.DoubleClick,System.Boolean)">
            <summary> Registers double click callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="doubleclickevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.SetListItems(System.String[])">
            <summary> Specifies an array of character strings for item names that are used as selectable choices for this  
                dialog item. </summary>  
             <remarks>  
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemVal">array of character strings for item names</param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.GetListItems">
            <summary>  Gets an array of character strings for item names that are used as selectable choices for this  
                dialog item. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> An array of character strings for item names</returns> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.SetSelected(System.Int32)">
            <summary> Specifies particular list items to be selected. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subIndex"> An index of particular list items to be selected </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.SetAllSelected">
            <summary> Specifies all list entry to be selected. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.GetAllIndicesSelected">
            <summary> Gets the indices of all selected list entries. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> An array of integers for item indices of selected items </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.GetAllNameSelected">
            <summary> Gets the names of all selected list entries. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> An array of character strings of selected items</returns> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.Focus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>  
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.Deselect(System.Int32)">
            <summary> Requests a list entry to be deselected. </summary>  
             <remarks>  
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Index of the list entry to be deselected.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.InsertSubitems(System.Int32,System.String[])">
            <summary>   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Sub item index </param>  
            <param name="multiEntries"> An array of items to be inserted </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.Append(System.String[])">
            <summary>  Appends one or more entries to be inserted into the list  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="multiEntries">An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.DeleteSubitem(System.Int32)">
            <summary>  Deletes sub item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Zero-based index of a list entry to be deleted </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiSelectList.ShowSubItem(System.Int32)">
            <summary>  Requests a list entry to be scrolled up to the first line in the list  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Zero-based index of a list entry to be scrolled up  
                                            to the first line of the list.</param> 
        </member>
        <member name="P:NXOpen.UIStyler.MultiSelectList.Sensitivity">
            <summary>  Returns or sets  the senstivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.MultiSelectList.Visibility">
            <summary>  Returns or sets the visibility 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.MultiTextBox">
            <summary>  Represents a MultiTextBox for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.MultiTextBox.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog item's  
                intended use. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel">new label string </param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiTextBox.SetItemValues(System.String[])">
            <summary> Specifies the text for this dialog item. </summary>  
             <remarks>  It can be programmatically set by APIs supported in  
                different laguages,or interactively entered by the user.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="values">array of strings to set the values in multi  
                                            select List</param> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiTextBox.GetItemValues">
            <summary> Specifies the text for this dialog item. </summary>  
             <remarks>  It can be programmatically get by APIs.   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> to get array of strings</returns> 
        </member>
        <member name="M:NXOpen.UIStyler.MultiTextBox.SetFocus">
            <summary> Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.MultiTextBox.Sensitivity">
            <summary>  Returns or sets the sensitivity of the dialog item. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.MultiTextBox.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.OptionMenu">
            <summary>  Represents a OptionMenu for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.OptionMenu.Activate">
            <summary>  Called when a dialog user selects an option from the menu. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.AddActivateHandler(NXOpen.UIStyler.OptionMenu.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Callback for activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.SetBitmap(System.String[])">
            <summary>  Set an array of bitmap filenames  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmaps"> An array of one or more bitmap filenames.  
                    If all bitmaps for the option menu reside in the same file, specify an array of just one entry,  
                    which contains the bitmap filename for this attribute. All existing choices for the option menu  
                    remains intact when this attribute is set. Only the bitmaps are changed. Note that the number of  
                    bitmaps must match the number of existing choices. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.GetBitmap">
            <summary>  Returns an array of bitmaps   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.SetLabel(System.String)">
            <summary>  Sets label  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text to be set for the descriptive label. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.SetItems(System.String[])">
            <summary>  Set an array of items  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strListArray"> An array of new choices to be used for the  
                    dialog item. Note that this removes all existing choices (both text and bitmaps) </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.GetItems">
            <summary>  Returns an array if items  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Sets the sensitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> If the entire dialog item should change to the new Sensitivity state,  
                    set this field to UF_STYLER_NO_SUB_INDEX. If only one subitem should change to the new sensitivity state, 
                    set this field to its zero-based index. </param>  
            <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionMenu.GetSensitivity">
            <summary>  Gets the sensitivity   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.OptionMenu.ItemValue">
            <summary>  Returns or sets  the item value  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.OptionMenu.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.OptionToggle">
            <summary>  Represents a OptionToggle for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.OptionToggle.Activate">
            <summary>  Called when a dialog user selects an option from the menu   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.OptionToggle.ValueChanged">
            <summary> Called when a dialog user clicks on the button or presses the spacebar when the button has keyboard focus. </summary>  
             <remarks>   
                Do not terminate the dialog with a value-changed callback. The dialog should always return UF_UI_CB_CONTINUE_DIALOG.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.AddActivateHandler(NXOpen.UIStyler.OptionToggle.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Callback for activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.AddValueChangedHandler(NXOpen.UIStyler.OptionToggle.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Callback for value changed event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetBitmaps(System.String[])">
            <summary>  Set bitmaps  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmaps"> An array of one or more bitmap filenames.  
                    If all bitmaps for the option menu reside in the same file, specify an array of just one entry,  
                    which contains the bitmap filename for this attribute. All existing choices for the option menu  
                    remain intact when this attribute is set. Only the bitmaps are changed. Note that the number of  
                    bitmaps must match the number of existing choices. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetLabel(System.String)">
            <summary>  Sets label  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text to be set for the tool tip. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetItems(System.String[])">
            <summary>  Sets items in the array  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strListArray"> An array of new choices to be used for the dialog item.  
                    Note that this removes all existing choices (both text and bitmaps). </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.GetItems">
            <summary>  Returns the items   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> An array of items </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetItemValue(System.Int32,System.Boolean)">
            <summary>  Sets item value  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Zero-based index indicating the choice to be selected.  
                    It must be in the range of existing choices.</param>  
            <param name="setCheck"> TRUE if set, FALSE if unset. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.GetItemValue(System.Boolean@)">
            <summary>  Returns item value   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="setCheck"> </param>  
            <returns> Item value </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Set the sesitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> If the entire dialog item should change to the new Sensitivity state,  
                    set this field to UF_STYLER_NO_SUB_INDEX. If only one sub-item should change to the new sensitivity  
                    state, set this field to its zero-based index. </param>  
            <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.GetSensitivity">
            <summary>  Returns the sesitivity   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.OptionToggle.SetDefaultAction">
            <summary>  Sets default action  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.OptionToggle.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.PageSwitchData">
            <summary>  Represents a PageSwitchData for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.PageSwitchData.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PageSwitchData.ActivatedPage">
            <summary>  Returns  the activated page  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PageSwitchData.DeactivatedPage">
            <summary>  Returns  the deactivated page  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.PropertyPage">
            <summary>  Represents a PropertyPage for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.PropertyPage.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog item's intended use.  
                If you specify a bitmap for this dialog item, it uses this text as tooltip text.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel">new label</param> 
        </member>
        <member name="M:NXOpen.UIStyler.PropertyPage.SetFocus">
            <summary>  Sets focus  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PropertyPage.Sensitivity">
            <summary>  Returns or sets  the sensitivity of property page. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PropertyPage.Visibility">
            <summary>  Returns or sets the visibility of the dialog item. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.PushButton">
            <summary>  Represents a PushButton for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.PushButton.Activate">
            <summary> Called when a dialog user clicks on the push button or presses the spacebar when the push button has  
                keyboard focus. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event obejct </param> 
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.AddActivateHandler(NXOpen.UIStyler.PushButton.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.SetBitmap(System.String)">
            <summary> Specifies a filename that contains a bitmap definition. </summary>  
             <remarks>  The filename must contain a UBM, XPM, or BMP  
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text  
                label. When a bitmap is present, the system uses the text label as a popup hint when a user places the  
                mouse cursor over the bitmap.   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="bitmap">the bitmap extension </param> 
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>  It should describe the dialog item's intended  
                use. If you specify a bitmap for this dialog item, it uses this text as tooltip text.   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel">the label string </param> 
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.SetFocus">
            <summary> Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.PushButton.SetDefaultAction">
            <summary>  Sets default action  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PushButton.Sensitivity">
            <summary>  Returns or sets  the senstivity of dialog. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.PushButton.Visibility">
            <summary>  Returns or sets  the visibility of dialog. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RadioBox">
            <summary>  Represents a RadioBox for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RadioBox.ValueChanged">
            <summary> Called when a dialog user click on a button in the radio box. </summary>  
             <remarks>  
                Do not terminate the dialog with a value-changed callback.  
                The dialog should always return UF_UI_CB_CONTINUE_DIALOG.   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.AddValueChangedHandler(NXOpen.UIStyler.RadioBox.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Callback for value changed event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.SetLabel(System.String)">
            <summary>  Sets label  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text to be set for the descriptive label </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Sets the sensitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> </param>  
            <param name="type"> TRUE if visible, FALSE if invisible </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.GetSensitivity">
            <summary>  Gets the sensitivity   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.RadioBox.SetDefaultAction">
            <summary>  Set default action  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RadioBox.ItemValue">
            <summary>  Returns or sets  the item value  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RadioBox.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RealItem">
            <summary>  Represents a Real for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RealItem.Activate">
            <summary>  Called when a dialog user enters a valid real value and presses Return. </summary>  
             <remarks>    
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealItem.AddActivateHandler(NXOpen.UIStyler.RealItem.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Callback for activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealItem.SetBitmap(System.String)">
            <summary>   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strBitmap"> Filename with .ubm, .xpm, or .bmp extension that contains a bitmap definition </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealItem.SetLabel(System.String)">
            <summary>  Set the label  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Text label to display on the left side of the text field. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealItem.SetFocus">
            <summary>  Sets focus  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealItem.ItemValue">
            <summary>  Returns or sets  the item value  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealItem.Sensitivity">
            <summary>  Returns or sets  the sensitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealItem.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RealScale">
            <summary>  Represents a RealScale for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RealScale.ValueChanged">
            <summary>   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.RealScale.Drag">
            <summary> Called when a dialog user moves the slider to a new position. </summary>  
             <remarks>   
                Do not terminate the dialog with a value-changed callback.  
                The dialog should always return UF_UI_CB_CONTINUE_DIALOG.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.AddValueChangedHandler(NXOpen.UIStyler.RealScale.ValueChanged,System.Boolean)">
            <summary> Called when a dialog user moves the slider up and down the scale. </summary>  
             <remarks>   
                For example, if a user moves the slider from 0.0 to 10.0,  
                the dialog calls the drag callback 100 times, one for each value that the slider moves across.  
                Do not terminate the dialog with a drag callback. The dialog should always return UF_UI_CB_CONTINUE_DIALOG. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Callback for value changed event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.AddDragHandler(NXOpen.UIStyler.RealScale.Drag,System.Boolean)">
            <summary> Registers dtag callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="dragevent"> Callback for add drag event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if dialog is going to launch, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.SetLimits(System.Double,System.Double)">
            <summary>  Sets limits  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="minimumValue"> Real minimum value </param>  
            <param name="maximumValue"> Real maximum value </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.SetLabels(System.String,System.String)">
            <summary>  Sets labels  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="minimumLabel"> String minimum label </param>  
            <param name="maximumLabel"> String maximum label </param> 
        </member>
        <member name="M:NXOpen.UIStyler.RealScale.SetDecimalPrecision(System.Int32)">
            <summary>  Sets decimal precision  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="digits"> The number significant digits </param> 
        </member>
        <member name="P:NXOpen.UIStyler.RealScale.ItemValue">
            <summary>  Returns or sets  the item value  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealScale.Sensitivity">
            <summary>  Returns or sets  the sensitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RealScale.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.RowColumn">
            <summary>  Represents a RowColumn for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RowColumn.Sensitivity">
            <summary>  Returns or sets  the sensitivity  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.RowColumn.Visibility">
            <summary>  Returns or sets  the visibility  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ScrolledWindow">
            <summary>  Represents a ScrolledWindow for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ScrolledWindow.Sensitivity">
            <summary>  Returns or sets   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ScrolledWindow.Visibility">
            <summary>  Returns or sets   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.SelectionBox">
            <summary>  Represents a SelectionBox for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.SelectionBox.Activate">
            <summary> Called when a dialog user selects a list entry with a single mouse click, presses the spacebar on a selected list entry, or presses Return when the cursor is in the text field. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.SelectionBox.DoubleClick">
            <summary> Called when a dialog user double-clicks on an option in the selection box or presses Return when an item is already selected. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.AddActivateHandler(NXOpen.UIStyler.SelectionBox.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> Activate event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if launch new dialog, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.AddDoubleClickHandler(NXOpen.UIStyler.SelectionBox.DoubleClick,System.Boolean)">
            <summary> Registers double click callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show"> UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="doubleclickevent"> Double click event </param>  
            <param name="isDialogLaunchingEvent"> TRUE if launch new dialog, FALSE if not </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.SetListItems(System.String[])">
            <summary>  Specifies an array of character strings for item names that are used as selectable choices for this dialog item. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="values"> List of items </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.GetListItems">
            <summary>  Gets an array of character strings for item names that are used as selectable choices for this dialog item. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> List of items </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.SetLabel(System.String)">
            <summary>  Specifies the descriptive text string to display below the scrolled list and above the text field. </summary>  
             <remarks>  It describes the dialog item's usage. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Label string </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.DeselectSubItem(System.Int32)">
            <summary>  Requests a list entry to be deselected. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.InsertSubItem(System.Int32,System.String[])">
            <summary>  Requests that one or more entries be inserted into the list. </summary>  
             <remarks>  You can insert entries at the bottom of the list or at any position within the list. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Position index where the insertion should be made. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then the new list entries are added to the bottom of the list. </param>  
            <param name="multiEntries"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.Append(System.String[])">
            <summary>  Appends one or more entries to be inserted into the list  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="multiEntries">An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.DeleteSubItem(System.Int32)">
            <summary>  Deletes sub item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.ShowSubItem(System.Int32)">
            <summary>  Requests that a list entry be scrolled up to the first line in the list. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.SetValue(System.Int32)">
            <summary>  Sets the value  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="value"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.GetSelectedIndexValue">
            <summary>  Gets selected index value   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SelectionBox.GetSelectedString">
            <summary>  Gets selected string   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.SelectionBox.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the selection box 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.SelectionBox.Visibility">
            <summary>  Returns or sets  the visibility of the selection box 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Separator">
            <summary>  Represents a Separator for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.Separator.Visibility">
            <summary>  Returns or sets  the visibility of the separator 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.SingleSelectList">
            <summary>  Represents a SingleSelectList for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.SingleSelectList.Activate">
            <summary>  Called when a dialog user selects an entry with a single mouse click  
                    or presses the spacebar on an already selected item. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="T:NXOpen.UIStyler.SingleSelectList.DoubleClick">
            <summary>  Called when a dialog user double-clicks on an option or presses Return when an item is already selected. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.AddActivateHandler(NXOpen.UIStyler.SingleSelectList.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.AddDoubleClickHandler(NXOpen.UIStyler.SingleSelectList.DoubleClick,System.Boolean)">
            <summary> Registers double click callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="doubleclickevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.SetSelected(System.Int32)">
            <summary>  Specifies particular list items to be selected  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subIndex"> Inndex of particular list items to be selected</param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.SetListItems(System.String[])">
            <summary>  Specifies an array of character strings that are used as entries in the list  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemVal"> An array of string items </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.GetListItems">
            <summary>  Gets an array of character strings that are used as entries in the list. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> An array of string items </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.DeselectSubItem(System.Int32)">
            <summary>  Requests a list entry to be deselected. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.InsertSubItem(System.Int32,System.String[])">
            <summary>  Requests one or more entries to be inserted into the list. </summary>  
             <remarks>  You can insert entries at the bottom of the list or at any position within the list.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Position index where the insertion should be made. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then the new list entries are added to the bottom of the list.</param>  
            <param name="multiEntries">An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.Append(System.String[])">
            <summary>  Appends one or more entries to be inserted into the list  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="multiEntries">An array of entry names to be inserted into the list. This field is used only when more than one entry are to be inserted into the list.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.DeleteSubItem(System.Int32)">
            <summary>  Requests a list entry to be deleted. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex">Zero-based index of a list entry to be deleted. If subitem_index equals UF_STYLER_NO_SUB_INDEX, then all list entries are deleted. </param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.ShowSubItem(System.Int32)">
            <summary> Requests that a list entry be scrolled up to the first line in the list  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subItemIndex"> Zero-based index of a list entry to be scrolled up to the first line of the list.</param> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.GetSelectedIndexValue">
            <summary>  Gets selected index   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.GetSelectedString">
            <summary>  Gets selected string   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.SingleSelectList.HasSelected">
            <summary>  Returns whether or not an item has been selected   
             </summary>  
             <remarks> <para> Created in NX7.5.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="P:NXOpen.UIStyler.SingleSelectList.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the single select list 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.SingleSelectList.Visibility">
            <summary>  Returns or sets  the visibility of the single select list 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StringItem">
            <summary>  Represents a StringItem for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StringItem.Activate">
            <summary> Called when a dialog user enters a character string and presses Return. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.AddActivateHandler(NXOpen.UIStyler.StringItem.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.SetBitmap(System.String)">
            <summary> Specifies a filename that contains a bitmap definition. </summary>  
             <remarks>  The filename must contain a UBM, XPM, or BMP  
                extension. When you use this field, the system displays a bitmap for this dialog item instead of a text  
                label. When a bitmap is present, the system uses the text label as tooltip text when a user places the  
                mouse cursor over the bitmap. We recommend that you use a 16x16 bitmap for this dialog item.   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strBitmap"> Filename with .ubm, .xpm, or .bmp extension that contains bitmap definition </param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.SetLabel(System.String)">
            <summary> Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>   
                It should describe the dialog item's intended use. If you specify a bitmap for this dialog item,  
                    it uses this text as tooltip text. 
                 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> String label to display on the left side of the text field </param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.SetSensitivity(System.Boolean)">
            <summary> Specifies the sensitivity of the dialog item. </summary>  
             <remarks>  When you set sensitivity to False, it grays out the  
                dialog item. This indicates that the dialog item exists but is not active. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="type"> TRUE if sensitive, FALSE if insensitive </param> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.GetSensitivity">
            <summary>  To get senstivity of string control  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> TRUE if sensitive, FALSE if insensitive </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.StringItem.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.StringItem.ItemValue">
            <summary>  Returns or sets  the string value for this dialog item. </summary>  
             <remarks>  It can be the initial value that is programmatically  
                defined, or interactively entered by the user. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.StringItem.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Styler">
            <summary>  Represents a Uistyler for UI Styler  </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.Styler.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.UIStyler.Styler.CreateStylerDialog(System.String)">
            <summary> Creates an NX (UIStyler generated) "bottom" dialog. </summary>  
             <remarks>  The ".dlg" file can only be generated from the  
                Open UIStyler.   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="dialogName"> Dialog name </param>  
            <returns> </returns> 
        </member>
        <member name="T:NXOpen.UIStyler.StylerEvent">
            <summary>  Represents a StylerEvent  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StylerEvent.Reason">
            <summary>  Describes callback reason  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.NoReason">
            <summary>  No reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ActivateReason">
            <summary>  Activate reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ValueChangedReason">
            <summary>  Value changed reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.DragReason">
            <summary>  Drag reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.DoubleClickReason">
            <summary>  Double click reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.OkReason">
            <summary>  Ok reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ApplyReason">
            <summary>  Apply reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.BackReason">
            <summary>  BAck reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.CancelReason">
            <summary>  Cancel reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ConstructReason">
            <summary>  Construct reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.DestructReason">
            <summary>  Destruct reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.FileopReason">
            <summary>  File operation reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.SwitchReason">
            <summary>  Switch reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.FileOperationReason">
            <summary>  File operation reason  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Reason.ExitFileOperationReason">
            <summary>  Exit file operation reason  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StylerEvent.Indicator">
            <summary>  Describes indicator value  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.NoValue">
            <summary>  No value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.StringValue">
            <summary>  String value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.StringPointerValue">
            <summary>  String pointer value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.IntegerValue">
            <summary>  Integer value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.IntegerPointerValue">
            <summary>  Integer pointer value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.RealValue">
            <summary>  Real value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.RealPointerValue">
            <summary>  Real pointer value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.SelectionValue">
            <summary>  Selection value  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Indicator.OptionToggleValue">
            <summary>  Option toggle value  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StylerEvent.Miscellaneous">
            <summary>  Describes event index  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.NoSubIndex">
            <summary>  No sub index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.OkIndex">
            <summary>  Ok index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.ApplyIndex">
            <summary>  Apply index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.BackIndex">
            <summary>  Back index  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerEvent.Miscellaneous.CancelIndex">
            <summary>  Cancel index  </summary>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StylerEvent.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StylerEvent.GetStylerItem">
            <summary>  Gets the dialog item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.StylerEvent.GetReason">
            <summary> Gets the reason for the event  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> Reason </returns> 
        </member>
        <member name="T:NXOpen.UIStyler.DialogState">
            <summary>  Represents the dialog state  </summary>  
             <remarks>  </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogState.ContinueDialog">
            <summary>  Continue the dialog  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.DialogState.ExitDialog">
            <summary>  Exit from the dialog  </summary>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StylerItem">
            <summary>  Represents a Styler Item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.StylerItem.ItemType">
            <summary>  Describes kind of action to be taken from callbac. </summary>  
             <remarks>   </remarks>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.InvalidType">
            <summary>  Invalid item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ActionButton">
            <summary>  Action Button item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Dialog">
            <summary>  Dialog item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.RadioBox">
            <summary>  Radio Box item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Real">
            <summary>  Real item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ScaleReal">
            <summary>  Real Scale item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Bitmap">
            <summary>  Bitmap item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.RowColumn">
            <summary>  Row Column item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ButtonLayout">
            <summary>  Button Layout item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ScrolledWindow">
            <summary>  Scrolled Window item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ColorTool">
            <summary>  Color Item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.SelectionBox">
            <summary>  Section Box item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Separator">
            <summary>  Separator item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.SingleSelectionList">
            <summary>  Single Selection List item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.String">
            <summary>  String item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.BeginGroup">
            <summary>  Begin Group item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Integer">
            <summary>  Integer item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ScaleInteger">
            <summary>  Scale item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.MultiList">
            <summary>  Multi List item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Label">
            <summary>  Label item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.MultiLineText">
            <summary>  Multi-line text item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.TabControl">
            <summary>  Tab Control item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.OptionMenu">
            <summary>  Option Menu item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.Toggle">
            <summary>  Toggle item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.OptionToggle">
            <summary>  Option Toggle item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.ToolPalette">
            <summary>  Tool Palette item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.WideString">
            <summary>  Wide String item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.PropertyPage">
            <summary>  Property Page item  </summary>  
              
        </member>
        <member name="F:NXOpen.UIStyler.StylerItem.ItemType.CollapsibleGroup">
            <summary>  Callapsible Group item  </summary>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.FreeResource">
            <summary>  Free resources associated with the instance. </summary>  
             <remarks>  After this method 
                is called, it is illegal to use the object.  In .NET or Java, this  
                method is automatically called when the object is deleted by the  
                garbage collector.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.GetItemType">
            <summary>  Gets the dialog item type. </summary>  
             <remarks>  User can write programs to query this attribute and determine the  
                type of a dialog item in order to determine what further actions should be taken. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns></returns> 
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.InitializeAttachment">
            <summary>  Returns initialized dialog item attachment information   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns>attachment object</returns> 
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.SetAttachment(NXOpen.UIStyler.Attachment)">
            <summary> Specifies the updated dialog item attachment information  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="attachment">attachment object</param> 
        </member>
        <member name="M:NXOpen.UIStyler.StylerItem.IsEqualTo(NXOpen.UIStyler.StylerItem)">
            <summary>  Equates two styler items  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="itemToCompare"> styler item to compare</param>  
            <returns></returns> 
        </member>
        <member name="T:NXOpen.UIStyler.TabControl">
            <summary>  Represents a Tab Control for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.TabControl.SwitchHandler">
            <summary> Called when a user switches tabs. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.TabControl.AddSwitchHandler(NXOpen.UIStyler.TabControl.SwitchHandler,System.Boolean)">
            <summary> Registers switch callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="switchevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.TabControl.SetFocus">
            <summary>  Sets focus  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.TabControl.PageSwitchData">
            <summary>  Returns  the page switch data 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.TabControl.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the dialog item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.TabControl.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Toggle">
            <summary>  Represents a Toggle for UI Styler. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.Toggle.ValueChanged">
            <summary>  Called when a dialog user clicks on the button or presses the spacebar when the button has keyboard focus. </summary>  
             <remarks>   
                    Do not terminate the dialog with a value-changed callback. The dialog should always return UF_UI_CB_CONTINUE_DIALOG  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.AddValueChangedHandler(NXOpen.UIStyler.Toggle.ValueChanged,System.Boolean)">
            <summary> Registers value change callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="valuechangedevent"> Value changed event </param>  
            <param name="isDialogLaunchingEvent"> True if launch any dialog else False </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.SetLabel(System.String)">
            <summary>  Sets the label to display on the right side of the toggle button. </summary>  
             <remarks>   
                If the toggle button displays a bitmap, then this text label is used as a popup hint instead 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.SetSensitivity(System.Int32,System.Boolean)">
            <summary>  Sets the sensitivity of the toggle button  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> </param>  
            <param name="type"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.GetSensitivity">
            <summary>  Gets the sensitivity   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>   
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="M:NXOpen.UIStyler.Toggle.SetDefaultAction">
            <summary>  Indicates that this dialog item should override the accelerator  
                on the second mouse button, which normally accelerates to the OK button. </summary>  
             <remarks>   
                When you set this attribute, a click on the second mouse button triggers  
                this dialog item's ON/OFF state and calls the Value Changed callback  
                instead of the action of the OK button. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.Toggle.ItemValue">
            <summary>  Returns or sets  an item value  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.Toggle.Visibility">
            <summary>  Returns or sets  the visibility of the toggle 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ToolPalette">
            <summary>  Represents a ToolPalette for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.ToolPalette.Activate">
            <summary>  Called when a dialog user selects a button in the tool palette. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.AddActivateHandler(NXOpen.UIStyler.ToolPalette.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.SetLabel(System.String)">
            <summary>  Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>   
                It should describe the dialog item's intended use.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> String label </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.SetSensitivity(System.Int32,System.Boolean)">
            <summary>   
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="subitemIndex"> Sub item index </param>  
            <param name="type"> True if sentivity is set otherwise False </param> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.GetSensitivity">
            <summary>  Gets the sensitivity of the dialog item  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <returns> True if sensitivity is set otherwise False </returns> 
        </member>
        <member name="M:NXOpen.UIStyler.ToolPalette.SetDefault(System.Int32)">
            <summary>  Indicates that this dialog item should override the accelerator  
                on the second mouse button, which normally accelerates to the OK button. </summary>  
             <remarks>   
                When you set this attribute, a click on the second mouse button triggers 
                this dialog item's Activate callback instead of the action of the OK button. 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="dialogId"> </param> 
        </member>
        <member name="P:NXOpen.UIStyler.ToolPalette.ItemValue">
            <summary>  Returns or sets  the currently selected choice for this dialog item. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.ToolPalette.Visibility">
            <summary>  Returns or sets  the visibility of the dialog item 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.WideString">
            <summary>  Represents a WideString for UI Styler  
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
             </remarks>  
              
        </member>
        <member name="T:NXOpen.UIStyler.WideString.Activate">
            <summary>  Called when a dialog user enters a character string and presses Return. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="eventobject"> Event object </param> 
        </member>
        <member name="M:NXOpen.UIStyler.WideString.AddActivateHandler(NXOpen.UIStyler.WideString.Activate,System.Boolean)">
            <summary> Registers activate callback. </summary>  
             <remarks>  This method should be called before calling <see cref="M:NXOpen.UIStyler.Dialog.Show">  UIStyler.Dialog.Show  </see> or <see cref="M:NXOpen.UIStyler.Dialog.RegisterWithUiMenu(System.Boolean)">  UIStyler.Dialog.RegisterWithUiMenu  </see>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="activateevent"> </param>  
            <param name="isDialogLaunchingEvent"> </param> 
        </member>
        <member name="M:NXOpen.UIStyler.WideString.SetLabel(System.String)">
            <summary>  Specifies descriptive text to display for the dialog item. </summary>  
             <remarks>   
                It should describe the dialog item's intended use 
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="strLabel"> Label string </param> 
        </member>
        <member name="M:NXOpen.UIStyler.WideString.SetFocus">
            <summary>  Indicates that this dialog item is receiving keyboard focus. </summary>  
             <remarks>  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.WideString.ItemValue">
            <summary>  Returns or sets  the string value for this dialog item. </summary>  
             <remarks>  
                 It can be the initial value that is programmatically defined, or interactively entered by the user.  
            <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.WideString.Sensitivity">
            <summary>  Returns or sets  the sensitivity of the wide string 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="P:NXOpen.UIStyler.WideString.Visibility">
            <summary>  Returns or sets  the visibility of the wide string 
             </summary>  
             <remarks> <para> Created in NX5.0.0 </para>  
            <para>License requirements to get this property: None.</para><para>License requirements to set this property: None.</para> </remarks>  
              
        </member>
        <member name="T:NXOpen.ViewUIManager">
            <summary>   </summary>  
             <remarks> <para>To obtain an instance of this class, refer to <see cref="T:NXOpen.UI"> NXOpen.UI  </see></para> 
            <para> Created in NX11.0.1 </para>  
             </remarks>  
              
        </member>
        <member name="P:NXOpen.ViewUIManager.Tag">
            <summary>  
             Returns the tag of this object.  
            </summary> 
        </member>
        <member name="M:NXOpen.ViewUIManager.CreatePreview(NXOpen.View,System.Boolean)">
            <summary>  Creates a Model View Preview  
             </summary>  
             <remarks> <para> Created in NX11.0.1 </para>  
            <para>License requirements: None.</para> </remarks>  
             <param name="viewTag"></param>  
            <param name="fit"> <para> True  - The preview will be created with a fitted scale </para> 
                                                       <para> False - The preview will be created with the current displayed scale </para> </param> 
        </member>
    </members>
</doc>
