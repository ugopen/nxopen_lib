#ifndef NXOpen_FEATURES_RESIZEHOLEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_RESIZEHOLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ResizeHoleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_AdmBaseBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ResizeHoleBuilder;
    }
    class Expression;
    class Face;
    namespace Features
    {
        class AdmBaseBuilder;
    }
    class ScCollector;
    namespace Features
    {
        class _ResizeHoleBuilderBuilder;
        class ResizeHoleBuilderImpl;
        /** Represents a @link Features::ResizeHole Features::ResizeHole@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateResizeHoleBuilder  NXOpen::Features::FeatureCollection::CreateResizeHoleBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ApplyCounterSunkRelief </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ApplyThreadedRelief </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CounterBoreDepth.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        CounterBoreDiameter.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        CounterSinkAngle.Value </term> <description> 
         
        90 </description> </item> 

        <item><term> 
         
        CounterSinkDiameter.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        CountersunkReliefDepth.Value </term> <description> 
         
        5 (millimeters part), 0.2 (inches part) </description> </item> 

        <item><term> 
         
        DepthLimitation </term> <description> 
         
        Value </description> </item> 

        <item><term> 
         
        DepthOption </term> <description> 
         
        Shoulder </description> </item> 

        <item><term> 
         
        EntryChamfer </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        EntryChamferAngle.Value </term> <description> 
         
        45 </description> </item> 

        <item><term> 
         
        EntryChamferOffset.Value </term> <description> 
         
        2 (millimeters part), 0.1 (inches part) </description> </item> 

        <item><term> 
         
        ExitChamfer </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ExitChamferAngle.Value </term> <description> 
         
        45 </description> </item> 

        <item><term> 
         
        ExitChamferOffset.Value </term> <description> 
         
        2 (millimeters part), 0.1 (inches part) </description> </item> 

        <item><term> 
         
        HoleDepth.Value </term> <description> 
         
        25 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        HoleDiameter.Value </term> <description> 
         
        5 (millimeters part), 0.2 (inches part) </description> </item> 

        <item><term> 
         
        HoleType </term> <description> 
         
        Simple </description> </item> 

        <item><term> 
         
        NeckChamfer </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        NeckChamferAngle.Value </term> <description> 
         
        45 </description> </item> 

        <item><term> 
         
        NeckChamferOffset.Value </term> <description> 
         
        2 (millimeters part), 0.1 (inches part) </description> </item> 

        <item><term> 
         
        TaperAngle.Value </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        ThreadDepth.Value </term> <description> 
         
        10 (millimeters part), 0.5 (inches part) </description> </item> 

        <item><term> 
         
        ThreadHoleDiameter.Value </term> <description> 
         
        5 (millimeters part), 0.2 (inches part) </description> </item> 

        <item><term> 
         
        ThreadedReliefAngle.Value </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ThreadedReliefDepth.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        ThreadedReliefDiameter.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        TipAngle.Value </term> <description> 
         
        118 </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ResizeHoleBuilder : public NXOpen::Features::AdmBaseBuilder
        {
            /** Represents hole type options. */
            public: enum Type
            {
                TypeSimple/** Simple hole type */,
                TypeCounterbored/** Counterbored hole type */,
                TypeCountersunk/** Countersink hole type */,
                TypeThreaded/** Threaded hole type */,
                TypeTapered/** Tapered hole type */
            };

            /** Represents hole depth limit options. */
            public: enum DepthLimit
            {
                DepthLimitValue/** Value limit options */,
                DepthLimitThroughNext/** Through next limit options */
            };

            /** Represents hole depth to limit options. */
            public: enum DepthTo
            {
                DepthToShoulder/** Shoulder depth to limit options */,
                DepthToTip/** Tip depth to limit options */
            };

            private: ResizeHoleBuilderImpl * m_resizeholebuilder_impl;
            private: friend class  _ResizeHoleBuilderBuilder;
            protected: ResizeHoleBuilder();
            public: ~ResizeHoleBuilder();
            /**Returns  the hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ResizeHoleBuilder::Type HoleType
            (
            );
            /**Sets  the hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleType
            (
                NXOpen::Features::ResizeHoleBuilder::Type holeType /** holetype */ 
            );
            /**Returns  the face select - only hole-like faces are allowed to select
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * HoleFaces
            (
            );
            /** Routine to add a fliped hole face to builder 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AddFlipHoleFace
            (
                NXOpen::Face * face /** face */ 
            );
            /** Routine to remove a fliped hole face from builder 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveFlipHoleFace
            (
                NXOpen::Face * face /** face */ 
            );
            /**Returns  the hole diameter - this is applicable for simple, counterbored, countersunk, threaded and tapered hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HoleDiameter
            (
            );
            /**Returns  the thread hole diameter - this is applicable for thread hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadHoleDiameter
            (
            );
            /**Returns  the counter bore diameter - this is applicable for counterbore hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CounterBoreDiameter
            (
            );
            /**Returns  the counter bore depth - this is applicable for counterbore hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CounterBoreDepth
            (
            );
            /**Returns  the counter sink diameter - this is applicable for countersink hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CounterSinkDiameter
            (
            );
            /**Returns  the counter sink angle - this is applicable for countersink hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CounterSinkAngle
            (
            );
            /**Returns  the taper angle - this is applicable for taper hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TaperAngle
            (
            );
            /**Returns  the thread standard - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ThreadStandard
            (
            );
            /**Sets  the thread standard - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadStandard
            (
                const NXString & threadStandard /** threadstandard */ 
            );
            /**Sets  the thread standard - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetThreadStandard
            (
                const char * threadStandard /** threadstandard */ 
            );
            /**Returns  the thread size - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ThreadSize
            (
            );
            /**Sets  the thread size - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetThreadSize
            (
                const NXString & threadSize /** threadsize */ 
            );
            /**Sets  the thread size - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetThreadSize
            (
                const char * threadSize /** threadsize */ 
            );
            /**Returns  the tap drill diameter - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TapDrillDiameter
            (
            );
            /**Returns  the thread depth - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadDepth
            (
            );
            /**Returns  the apply counter sunk relief - this is applicable for countersink hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ApplyCounterSunkRelief
            (
            );
            /**Sets  the apply counter sunk relief - this is applicable for countersink hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetApplyCounterSunkRelief
            (
                bool applyCounterSunkRelief /** applycountersunkrelief */ 
            );
            /**Returns  the countersunk relief depth - this is applicable for countersink hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CountersunkReliefDepth
            (
            );
            /**Returns  the apply threaded relief - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ApplyThreadedRelief
            (
            );
            /**Sets  the apply threaded relief - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetApplyThreadedRelief
            (
                bool applyThreadedRelief /** applythreadedrelief */ 
            );
            /**Returns  the threaded relief diameter - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefDiameter
            (
            );
            /**Returns  the threaded relief depth - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefDepth
            (
            );
            /**Returns  the threaded relief angle - this is applicable for threaded hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThreadedReliefAngle
            (
            );
            /**Returns  the entry chamfer - this is applicable for simple, counterbored, countersunk and threaded hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool EntryChamfer
            (
            );
            /**Sets  the entry chamfer - this is applicable for simple, counterbored, countersunk and threaded hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEntryChamfer
            (
                bool entryChamfer /** entrychamfer */ 
            );
            /**Returns  the entry chamfer offset - this is applicable for simple, counterbored, countersunk and threaded hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EntryChamferOffset
            (
            );
            /**Returns  the entry chamfer angle - this is applicable for simple, counterbored, countersunk and threaded hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EntryChamferAngle
            (
            );
            /**Returns  the exit chamfer - this is applicable for simple, counterbored, countersunk and threaded hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExitChamfer
            (
            );
            /**Sets  the exit chamfer - this is applicable for simple, counterbored, countersunk and threaded hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetExitChamfer
            (
                bool exitChamfer /** exitchamfer */ 
            );
            /**Returns  the exit chamfer offset - this is applicable for simple, counterbored, countersunk and threaded hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ExitChamferOffset
            (
            );
            /**Returns  the exit chamfer angle - this is applicable for simple, counterbored, countersunk and threaded hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ExitChamferAngle
            (
            );
            /**Returns  the neck chamfer - this is applicable for counterbored hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool NeckChamfer
            (
            );
            /**Sets  the neck chamfer - this is applicable for counterbored hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNeckChamfer
            (
                bool neckChamfer /** neckchamfer */ 
            );
            /**Returns  the neck chamfer offset - this is applicable for counterbored hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * NeckChamferOffset
            (
            );
            /**Returns  the neck chamfer angle - this is applicable for counterbored hole
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * NeckChamferAngle
            (
            );
            /**Returns  the depth limitation - this is applicable for simple, counterbored, countersunk, threaded and tapered hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ResizeHoleBuilder::DepthLimit DepthLimitation
            (
            );
            /**Sets  the depth limitation - this is applicable for simple, counterbored, countersunk, threaded and tapered hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDepthLimitation
            (
                NXOpen::Features::ResizeHoleBuilder::DepthLimit depthLimitation /** depthlimitation */ 
            );
            /**Returns  the hole depth - this is applicable for simple, counterbored, countersunk, threaded and tapered hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HoleDepth
            (
            );
            /**Returns  the depth option - this is applicable for simple, counterbored, countersunk, threaded and tapered hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ResizeHoleBuilder::DepthTo DepthOption
            (
            );
            /**Sets  the depth option - this is applicable for simple, counterbored, countersunk, threaded and tapered hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDepthOption
            (
                NXOpen::Features::ResizeHoleBuilder::DepthTo depthOption /** depthoption */ 
            );
            /**Returns  the tip angle - this is applicable for simple, counterbored, countersunk, threaded and tapered hole type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TipAngle
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
