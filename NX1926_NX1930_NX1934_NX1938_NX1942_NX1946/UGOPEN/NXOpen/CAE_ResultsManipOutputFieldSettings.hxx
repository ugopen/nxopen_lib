#ifndef NXOpen_CAE_RESULTSMANIPOUTPUTFIELDSETTINGS_HXX_INCLUDED
#define NXOpen_CAE_RESULTSMANIPOUTPUTFIELDSETTINGS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResultsManipOutputFieldSettings.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ResultsManipOutputFieldSettings;
    }
    namespace CAE
    {
        class _ResultsManipOutputFieldSettingsBuilder;
        class ResultsManipOutputFieldSettingsImpl;
        /** Represents a @link NXOpen::CAE::ResultsManipOutputFieldSettings NXOpen::CAE::ResultsManipOutputFieldSettings@endlink  to provide settings of the output field for results manipulation 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ResultsManipOutputFieldSettings : public NXOpen::TaggedObject
        {
            /** Defines the method of calculating values at nodes for element-nodal values */
            public: enum CalculationMethodForValueAtNodeOptions
            {
                CalculationMethodForValueAtNodeOptionsAverage/** average */ ,
                CalculationMethodForValueAtNodeOptionsMaximum/** maximum */ ,
                CalculationMethodForValueAtNodeOptionsMinimum/** minimum */ ,
                CalculationMethodForValueAtNodeOptionsSum/** sum */ 
            };

            private: ResultsManipOutputFieldSettingsImpl * m_resultsmanipoutputfieldsettings_impl;
            private: friend class  _ResultsManipOutputFieldSettingsBuilder;
            protected: ResultsManipOutputFieldSettings();
            public: ~ResultsManipOutputFieldSettings();
            /**Returns  the field name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXString FieldName
            (
            );
            /**Sets  the field name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFieldName
            (
                const NXString & fieldName /** fieldname */ 
            );
            /**Sets  the field name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetFieldName
            (
                const char * fieldName /** fieldname */ 
            );
            /**Returns  the field label. The acceptable value must be greater than 0. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int FieldLabel
            (
            );
            /**Sets  the field label. The acceptable value must be greater than 0. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFieldLabel
            (
                int fieldLabel /** fieldlabel */ 
            );
            /** Gets the field description 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: std::vector<NXString> GetFieldDescription
            (
            );
            /** Sets the field description 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetFieldDescription
            (
                std::vector<NXString> & fieldDescription /** fielddescription */ 
            );
            /**Returns  the independent domain. The acceptable range is -2-55.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int IndepDomain
            (
            );
            /**Sets  the independent domain. The acceptable range is -2-55.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIndepDomain
            (
                int indepDomain /** indepdomain */ 
            );
            /**Returns  the dependent domain. The acceptable range is -2-55. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: int DepDomain
            (
            );
            /**Sets  the dependent domain. The acceptable range is -2-55. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDepDomain
            (
                int depDomain /** depdomain */ 
            );
            /**Returns  the method of calculating values at nodes for element-nodal values 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ResultsManipOutputFieldSettings::CalculationMethodForValueAtNodeOptions CalculationMethodForValueAtNode
            (
            );
            /**Sets  the method of calculating values at nodes for element-nodal values 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCalculationMethodForValueAtNode
            (
                NXOpen::CAE::ResultsManipOutputFieldSettings::CalculationMethodForValueAtNodeOptions calculationMethod /** calculationmethod */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
