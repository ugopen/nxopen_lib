#ifndef NXOpen_CAE_POSTSCENARIOMETADATA_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIOMETADATA_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioMetadata.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostScenarioVariant.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioMetadata;
    }
    namespace CAE
    {
        class PostScenarioVariant;
    }
    namespace CAE
    {
    }
    namespace CAE
    {
        class PostScenarioMetadataImpl;

        /// \cond NX_NO_DOC 
        /**  @brief  This class represents a @link NXOpen::CAE::PostScenarioQueryResults NXOpen::CAE::PostScenarioQueryResults@endlink .  

         
            
                
                 <br> Keys:
                <ul>
                    <li>FunctionClass -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Spectrum</li>
                        <li>Time</li>
                        <li>FRF</li>
                        <li>CrossPower</li>
                        <li>AutoPower</li>
                        <li>PSD</li>
                    </ul></li>
                    <li>SpectrumFormat -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Linear</li>
                        <li>Power</li>
                    </ul></li>
                    <li>SpectrumScaling -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Peak</li>
                        <li>RMS</li>
                    </ul></li>
                    <li>VisualizationSpectrumScaling -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Peak</li>
                        <li>RMS</li>
                    </ul></li>
                    <li>CorrectionMode -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Energy</li>
                        <li>Amplitude</li>
                    </ul></li>
                    <li>VisualizationCorrectionMode -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>Energy</li>
                        <li>Amplitude</li>
                    </ul></li>
                    <li>AcousticalWeighting -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>WeightingNone</li>
                        <li>WeightingA</li>
                        <li>WeightingB</li>
                        <li>WeightingC</li>
                        <li>WeightingD</li>
                        <li>WeightingAB</li>
                        <li>WeightingBC</li>
                        <li>WeightingNone</li>
                        <li>WeightingNone</li>
                    </ul></li>
                    <li>EnergyCorrectionFactor -- Double</li>
                    <li>AmplitudeCorrectionFactor -- Double</li>
                    <li>dBOption -- Unicode String, possible values: <ul>
                        <li></li>
                        <li>dbOptionDefault</li>
                        <li>dbOptionLinear</li>
                        <li>dbOptionDB</li>
                    </ul></li>
                    <li>IsDuplicate -- Boolean</li>
                    <li>SelectedComponent -- Component</li>
                    <li>VisualizationTemplate -- Unicode String</li>
                    <li>ComplexOption -- Integer, this is a bit set: <ul>
                        <li> @code Real = 0x1 @endcode </li>
                        <li> @code Imaginary = 0x2 @endcode </li>
                        <li> @code Magnitude = 0x4 @endcode </li>
                        <li> @code Phase = 0x8 @endcode </li>
                        <li> @code SignedMagnitude = 0x10 @endcode </li>
                    </ul></li>
                    <li>Alias -- Unicode String</li>
                    <li>DisplayName -- Unicode String</li>
                    <li>AdditionalLegendColumns_N -- Integer</li>
                    <li>AdditionalLegendColumns_Header_%N -- Unicode String</li>
                    <li>AdditionalLegendColumns_Value_%N -- Unicode String</li>
                    <li>Hide_Record_Name -- Boolean</li>
                    <li>Dependent_Variable_Name -- Unicode String</li>
                    <li>Dependent_Variable1_Name -- Unicode String</li>
                    <li>Dependent_Variable2_Name -- Unicode String</li>
                    <li>Origin.DataSource -- Unicode String</li>
                    <li>Origin.DataDefinition[0] -- Unicode String</li>
                </ul>
                 <br> 
                
              <br> To create a new instance of this class, use @link NXOpen::CAE::PostScenarioQueryResults::NewMetadata  NXOpen::CAE::PostScenarioQueryResults::NewMetadata @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioMetadata : public NXOpen::TransientObject
        {
            private: PostScenarioMetadataImpl * m_postscenariometadata_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostScenarioMetadata(void *ptr);
            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Dispose of this instance. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostScenarioMetadata();

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**  @brief Get available keys. 

             
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetKeys
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the value for a particular key. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioVariant * GetValue
            (
                const NXString & key /** key */ 
            );
            /** Get the value for a particular key. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::PostScenarioVariant * GetValue
            (
                const char * key /** key */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set a key-value pair. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeyValue
            (
                const NXString & key /** key */ ,
                NXOpen::CAE::PostScenarioVariant * values /** values */ 
            );
            /** Set a key-value pair. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetKeyValue
            (
                const char * key /** key */ ,
                NXOpen::CAE::PostScenarioVariant * values /** values */ 
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
