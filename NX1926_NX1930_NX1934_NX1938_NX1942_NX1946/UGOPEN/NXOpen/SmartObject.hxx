#ifndef NXOpen_SMARTOBJECT_HXX_INCLUDED
#define NXOpen_SMARTOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SmartObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SmartObject;
    class DisplayableObject;
    class _SmartObjectBuilder;
    class SmartObjectImpl;
    /** Represents a smart object.

        For more information, refer to the smart object 
        documentation in the <a href="../ugopen_doc/uf_so/index.html"> NXOpen API Reference Guide</a>.
     <br> This is an abstract class, and cannot be instantiated  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  SmartObject : public NXOpen::DisplayableObject
    {
        /** Specifies when the smart object updates. */
        public: enum UpdateOption
        {
            UpdateOptionDontUpdate/** No update occurs. Note that it is not a valid option for creation. */,
            UpdateOptionWithinModeling/** Updates within modeling (e.g. a feature). */,
            UpdateOptionAfterModeling/** Updates after modeling (e.g. a dimension). */,
            UpdateOptionAfterParentBody/** Updates after the parent body. */,
            UpdateOptionMixed/** Updates after parent body for inter-part parents and updates within modeling for same part parents */
        };

        /** Specifies the smart object visibility. */
        public: enum VisibilityOption
        {
            VisibilityOptionInvisible/** Default creation. */,
            VisibilityOptionVisible/** visible */ ,
            VisibilityOptionVisibleIfParentInvisible/** Visible if a parent is not loaded (for extract). */
        };

        private: SmartObjectImpl * m_smartobject_impl;
        private: friend class  _SmartObjectBuilder;
        protected: SmartObject();
        public: ~SmartObject();
        /**Returns  the update option. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SmartObject::UpdateOption Update
        (
        );
        /** Removes the smart object parameters. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void RemoveParameters
        (
        );
        /** Edit a smart object by replacing its parameters using parameters of 
               other smart object of the same class.
               Other smart object is destroyed after editing. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void ReplaceParameters
        (
            NXOpen::SmartObject * otherSo /** other so */ 
        );
        /** Evaluate a smart object. 
               Typically smart object should be logged for update and final update should be
               performed at correct time so that smart object is processed with all its dependencies.
               In some situations, such as after replacing parameters of smart object, if it needs
               to be used immediately without performing final update, it may be forced to evaluate.
               When evaluate is called, smart object is evaluated based on current state of
               its parents and its children are not affected. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void Evaluate
        (
        );
        /**Returns  the visibility. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SmartObject::VisibilityOption Visibility
        (
        );
        /** Sets the visibility. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: void SetVisibility
        (
            NXOpen::SmartObject::VisibilityOption visibility /** visibility */ 
        );
        /** Protects the SmartObject from being deleted if any referencing objects are deleted. 
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : None */
        public: void ProtectFromDelete
        (
        );
        /** Removes delete protection from the SmartObject. See @link ProtectFromDelete ProtectFromDelete@endlink . 
         <br>  Created in NX11.0.2.  <br>  
         <br> License requirements : None */
        public: void ReleaseDeleteProtection
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
