#ifndef NXOpen_CAE_SHELLEADBUILDER_HXX_INCLUDED
#define NXOpen_CAE_SHELLEADBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ShellEADBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ShellEADBuilder;
    }
    class Builder;
    namespace CAE
    {
        class PhysicalPropertyTable;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    namespace CAE
    {
        class SelectFENodeList;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    class Point;
    namespace CAE
    {
        class _ShellEADBuilderBuilder;
        class ShellEADBuilderImpl;
        /** This class provides Shell Associated Data Support  <br> To create a new instance of this class, use @link NXOpen::CAE::NodeElementManager::CreateShellEadBuilder  NXOpen::CAE::NodeElementManager::CreateShellEadBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        GapThicknessState </term> <description> 
         
        Ignore </description> </item> 

        <item><term> 
         
        MaterialOrientationState </term> <description> 
         
        Ignore </description> </item> 

        <item><term> 
         
        PhysicalPropertyTableState </term> <description> 
         
        Ignore </description> </item> 

        <item><term> 
         
        SetMatOriMethod </term> <description> 
         
        CoordinateSystem </description> </item> 

        <item><term> 
         
        ThicknessState </term> <description> 
         
        Ignore </description> </item> 

        <item><term> 
         
        ZoffsetState </term> <description> 
         
        Ignore </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ShellEADBuilder : public NXOpen::Builder
        {
            /** indicates which material orientation method to use */
            public: enum MaterialOrientationMethod
            {
                MaterialOrientationMethodCoordinateSystem/** use a coordinate system to orient the material */,
                MaterialOrientationMethodVectorProjection/** use a vector projected to the shell to orient the material */,
                MaterialOrientationMethodCoordinateSystemData/** use coordinate system raw data to orient the material */
            };

            /** indicates to ignore, apply or clear the state property upon commit */
            public: enum State
            {
                StateIgnore/** do nothing to the property */,
                StateApply/** apply the property */,
                StateClear/** clear the property */
            };

            /** indicates which type of coordinate system data to use */
            public: enum CoordinateSystemDataType
            {
                CoordinateSystemDataTypeCartesian/** use cartesian coordinate system data to orient the material */,
                CoordinateSystemDataTypeCylindrical/** use cylindrical coordinate system data to orient the material */,
                CoordinateSystemDataTypeSpherical/** use spherical coordinate system data to orient the material */
            };

            private: ShellEADBuilderImpl * m_shelleadbuilder_impl;
            private: friend class  _ShellEADBuilderBuilder;
            protected: ShellEADBuilder();
            public: ~ShellEADBuilder();
            /**Returns  the select element operator selects elements 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the get selection ori operator gets material orientation method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::MaterialOrientationMethod SetMatOriMethod
            (
            );
            /**Sets  the get selection ori operator gets material orientation method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSetMatOriMethod
            (
                NXOpen::CAE::ShellEADBuilder::MaterialOrientationMethod setMatOriMethod /** setmatorimethod */ 
            );
            /**Returns  the get coordinate system method gets the coordinate system for orienting by coordinate system 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CoordinateSystem * CoordinateSystem
            (
            );
            /**Sets  the get coordinate system method gets the coordinate system for orienting by coordinate system 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCoordinateSystem
            (
                NXOpen::CoordinateSystem * coordinateSystem /** coordinatesystem */ 
            );
            /**Returns  the get vector method gets the projection vector for material orientation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the get vector method gets the projection vector for material orientation 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the thickness expression of the shell element 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * ThicknessExpression
            (
            );
            /**Returns  the material orientation state drives the action upon commit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::State MaterialOrientationState
            (
            );
            /**Sets  the material orientation state drives the action upon commit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMaterialOrientationState
            (
                NXOpen::CAE::ShellEADBuilder::State materialOrientationState /** materialorientationstate */ 
            );
            /**Returns  the thickness state drives the action upon commit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::State ThicknessState
            (
            );
            /**Sets  the thickness state drives the action upon commit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetThicknessState
            (
                NXOpen::CAE::ShellEADBuilder::State thicknessState /** thicknessstate */ 
            );
            /**Returns  the select nodes operator selects nodes to limit thickness to 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SelectFENodeList * Node
            (
            );
            /**Returns  the gap thickness expression of the shell element 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * GapThicknessExpression
            (
            );
            /**Returns  the gap thickness state drives the action upon commit 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::State GapThicknessState
            (
            );
            /**Sets  the gap thickness state drives the action upon commit 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGapThicknessState
            (
                NXOpen::CAE::ShellEADBuilder::State gapThicknessState /** gapthicknessstate */ 
            );
            /**Returns  the select nodes operator selects nodes to limit gap thickness to 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SelectFENodeList * NodeGaps
            (
            );
            /**Returns  the zoffset state drives the action upon commit 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::State ZoffsetState
            (
            );
            /**Sets  the zoffset state drives the action upon commit 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetZoffsetState
            (
                NXOpen::CAE::ShellEADBuilder::State zoffsetState /** zoffsetstate */ 
            );
            /**Returns  the zoffset expression of the shell element 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * ZoffsetExpression
            (
            );
            /**Returns  the physical property table state state drives the action upon commit 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::State PhysicalPropertyTableState
            (
            );
            /**Sets  the physical property table state state drives the action upon commit 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPhysicalPropertyTableState
            (
                NXOpen::CAE::ShellEADBuilder::State physicalPropertyTableState /** physicalpropertytablestate */ 
            );
            /**Returns  the physical property table of the shell element 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::PhysicalPropertyTable * PhysicalPropertyTable
            (
            );
            /**Sets  the physical property table of the shell element 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPhysicalPropertyTable
            (
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** physicalpropertytable */ 
            );
            /**Returns  the get selection csys data type gets coordinate system data type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ShellEADBuilder::CoordinateSystemDataType CsysDataType
            (
            );
            /**Sets  the get selection csys data type gets coordinate system data type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCsysDataType
            (
                NXOpen::CAE::ShellEADBuilder::CoordinateSystemDataType csysDataType /** csysdatatype */ 
            );
            /**Returns  the get coordinate system data point origin gets the coordinates of origin point for material orientation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Point * PointOrigin
            (
            );
            /**Sets  the get coordinate system data point origin gets the coordinates of origin point for material orientation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPointOrigin
            (
                NXOpen::Point * originPoint /** material orientation csys data origin point */
            );
            /**Returns  the get coordinate system data point on z axis gets the coordinates of point on z-axis for material orientation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Point * PointOnZaxis
            (
            );
            /**Sets  the get coordinate system data point on z axis gets the coordinates of point on z-axis for material orientation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPointOnZaxis
            (
                NXOpen::Point * zAxisPoint /** material orientation csys data point on z-axis */
            );
            /**Returns  the get coordinate system data point in plane gets the coordinates of point in x-z plane if cartesian csys or point in azimuthal origin plane if cylindrical/ spherical csys for material orientation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Point * PointInPlane
            (
            );
            /**Sets  the get coordinate system data point in plane gets the coordinates of point in x-z plane if cartesian csys or point in azimuthal origin plane if cylindrical/ spherical csys for material orientation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPointInPlane
            (
                NXOpen::Point * planePoint /** material orientation csys data point in the x-z plane if cartesian csys or azimuthal origin plane if cylindrical/spherical csys*/
            );
            /**Returns  the get preferred csys label gets the label assigned to the csys data 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: int PreferredLabel
            (
            );
            /**Sets  the get preferred csys label gets the label assigned to the csys data 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPreferredLabel
            (
                int preferredLabel /** preferredlabel */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
