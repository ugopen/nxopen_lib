#ifndef NXOpen_VSA_MEASUREMENTOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_VSA_MEASUREMENTOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Vsa_MeasurementOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_vsa_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Vsa
    {
        class MeasurementOperationBuilder;
    }
    class Builder;
    class NXObject;
    namespace Vsa
    {
        class _MeasurementOperationBuilderBuilder;
        class MeasurementOperationBuilderImpl;
        /**
            
             <br> To create a new instance of this class, use @link NXOpen::Vsa::VsaManager::CreateMeasurementOperationBuilder  NXOpen::Vsa::VsaManager::CreateMeasurementOperationBuilder @endlink  <br> 
         <br>  Usable only on Windows <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_VSAEXPORT  MeasurementOperationBuilder : public NXOpen::Builder
        {
            /**
                    
                    */
            public: enum APIEnumMeasurementType
            {
                APIEnumMeasurementTypeAngle/** angle */ ,
                APIEnumMeasurementTypeGapFlush/** gap flush */ ,
                APIEnumMeasurementTypePointToPoint/** point to point */ ,
                APIEnumMeasurementTypePointToLine/** point to line */ 
            };

            /**
                    
                    */
            public: enum APIEnumLimitType
            {
                APIEnumLimitTypeRelative/** relative */ ,
                APIEnumLimitTypeAbsolute/** absolute */ 
            };

            /**
                    
                    */
            public: enum APIEnumNameFormat
            {
                APIEnumNameFormatShort/** short */ ,
                APIEnumNameFormatLong/** long */ 
            };

            private: MeasurementOperationBuilderImpl * m_measurementoperationbuilder_impl;
            private: friend class  _MeasurementOperationBuilderBuilder;
            protected: MeasurementOperationBuilder();
            public: ~MeasurementOperationBuilder();
            /**Returns  the str name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StrName
            (
            );
            /**Sets  the str name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetStrName
            (
                const NXString & strName /** strname */ 
            );
            /**Sets  the str name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            void SetStrName
            (
                const char * strName /** strname */ 
            );
            /**Returns  the str description 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StrDescription
            (
            );
            /**Sets  the str description 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetStrDescription
            (
                const NXString & strDescription /** strdescription */ 
            );
            /**Sets  the str description 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            void SetStrDescription
            (
                const char * strDescription /** strdescription */ 
            );
            /**Returns  the enum Measurement Type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vsa::MeasurementOperationBuilder::APIEnumMeasurementType MeasurementType
            (
            );
            /**Sets  the enum Measurement Type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetMeasurementType
            (
                NXOpen::Vsa::MeasurementOperationBuilder::APIEnumMeasurementType measurementType /** measurementtype */ 
            );
            /**Returns  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double DirectionI
            (
            );
            /**Sets  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetDirectionI
            (
                double directionI /** directioni */ 
            );
            /**Returns  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double DirectionJ
            (
            );
            /**Sets  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetDirectionJ
            (
                double directionJ /** directionj */ 
            );
            /**Returns  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double DirectionK
            (
            );
            /**Sets  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetDirectionK
            (
                double directionK /** directionk */ 
            );
            /**Returns  the toggle limit
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleLimit
            (
            );
            /**Sets  the toggle limit
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetToggleLimit
            (
                bool toggleLimit /** togglelimit */ 
            );
            /**Returns  the Limit Type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vsa::MeasurementOperationBuilder::APIEnumLimitType LimitType
            (
            );
            /**Sets  the Limit Type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetLimitType
            (
                NXOpen::Vsa::MeasurementOperationBuilder::APIEnumLimitType specifyType /** specifytype */ 
            );
            /**Returns  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double Nominal
            (
            );
            /**Sets  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetNominal
            (
                double nominal /** nominal */ 
            );
            /**Returns  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double Lsl
            (
            );
            /**Sets  the Nominal 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetLsl
            (
                double lsl /** lsl */ 
            );
            /**Returns  the USL 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: double Usl
            (
            );
            /**Sets  the USL 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetUsl
            (
                double usl /** usl */ 
            );
            /**Returns  the Name Format 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Vsa::MeasurementOperationBuilder::APIEnumNameFormat NameFormat
            (
            );
            /**Sets  the Name Format 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetNameFormat
            (
                NXOpen::Vsa::MeasurementOperationBuilder::APIEnumNameFormat nameFormat /** nameformat */ 
            );
            /**Returns  the From Feature1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FeatureFrom1
            (
            );
            /**Sets  the From Feature1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetFeatureFrom1
            (
                NXOpen::NXObject * featureFrom1 /** featurefrom1 */ 
            );
            /**Returns  the From Feature2 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FeatureFrom2
            (
            );
            /**Sets  the From Feature2 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetFeatureFrom2
            (
                NXOpen::NXObject * featureFrom2 /** featurefrom2 */ 
            );
            /**Returns  the From Feature3 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FeatureFrom3
            (
            );
            /**Sets  the From Feature3 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetFeatureFrom3
            (
                NXOpen::NXObject * featureFrom3 /** featurefrom3 */ 
            );
            /**Returns  the From To1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FeatureTo1
            (
            );
            /**Sets  the From To1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetFeatureTo1
            (
                NXOpen::NXObject * featureTo1 /** featureto1 */ 
            );
            /**Returns  the From To1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FeatureTo2
            (
            );
            /**Sets  the From To1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetFeatureTo2
            (
                NXOpen::NXObject * featureTo2 /** featureto2 */ 
            );
            /**Returns  the From To1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * FeatureTo3
            (
            );
            /**Sets  the From To1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_vsa_build (" Building VSA model") */
            public: void SetFeatureTo3
            (
                NXOpen::NXObject * featureTo3 /** featureto3 */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
