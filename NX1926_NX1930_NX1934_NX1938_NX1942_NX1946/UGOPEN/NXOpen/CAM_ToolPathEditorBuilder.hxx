#ifndef NXOpen_CAM_TOOLPATHEDITORBUILDER_HXX_INCLUDED
#define NXOpen_CAM_TOOLPATHEDITORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_ToolPathEditorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class ToolPathEditorBuilder;
    }
    class Axis;
    class Builder;
    class NXObject;
    class Point;
    namespace CAM
    {
        class _ToolPathEditorBuilderBuilder;
        class ToolPathEditorBuilderImpl;
        /** Represents a Tool Path Editor Builder  <br> To create a new instance of this class, use @link NXOpen::CAM::Operation::CreateToolPathEditorBuilder  NXOpen::CAM::Operation::CreateToolPathEditorBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DeltaXC </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DeltaYC </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DeltaZC </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ExtendMethod </term> <description> 
         
        Linear </description> </item> 

        <item><term> 
         
        GougeCheckClearanceMethod </term> <description> 
         
        Specify </description> </item> 

        <item><term> 
         
        HolderCheck </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        MotionMethod </term> <description> 
         
        Delta </description> </item> 

        <item><term> 
         
        MoveStartPoint </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        TransformCircles </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  ToolPathEditorBuilder : public NXOpen::Builder
        {
            /** Motion Method Type */
            public: enum MotionMethodType
            {
                MotionMethodTypeDelta/** delta */ ,
                MotionMethodTypeToAPoint/** to apoint */ 
            };

            /** Extend Method Type */
            public: enum ExtendMethodType
            {
                ExtendMethodTypeLinear/** linear */ ,
                ExtendMethodTypeArc/** arc */ ,
                ExtendMethodTypeLinearArc/** linear arc */ ,
                ExtendMethodTypeArcLinear/** arc linear */ ,
                ExtendMethodTypeLinearArcLinear/** linear arc linear */ 
            };

            /** Clearance Method Type */
            public: enum ClearanceMethodType
            {
                ClearanceMethodTypeSpecify/** specify */ ,
                ClearanceMethodTypeUseOperation/** use operation */ 
            };

            /** Trim Method */
            public: enum TrimMethod
            {
                TrimMethodGeometry/** geometry */ ,
                TrimMethodPath/** path */ 
            };

            /** Trim Path Type */
            public: enum TrimPathType
            {
                TrimPathTypeSingle/** single */ ,
                TrimPathTypeRange/** range */ ,
                TrimPathTypeBetweenRapids/** between rapids */ ,
                TrimPathTypeCutLevel/** cut level */ ,
                TrimPathTypeNonCut/** non cut */ 
            };

            /** Trim Geometry Type */
            public: enum TrimGeometryType
            {
                TrimGeometryTypePlane/** plane */ ,
                TrimGeometryTypeLineInView/** line in view */ ,
                TrimGeometryTypeBoundary/** boundary */ ,
                TrimGeometryTypePermanentBoundary/** permanent boundary */ ,
                TrimGeometryTypeSelectionInView/** selection in view */ 
            };

            /** Trim Side Type */
            public: enum TrimSideType
            {
                TrimSideTypeOutside/** outside */ ,
                TrimSideTypeInside/** inside */ 
            };

            /** Connection Method Type */
            public: enum ConnectionMethodType
            {
                ConnectionMethodTypeClearancePlane/** clearance plane */ ,
                ConnectionMethodTypeDirect/** direct */ 
            };

            private: ToolPathEditorBuilderImpl * m_toolpatheditorbuilder_impl;
            private: friend class  _ToolPathEditorBuilderBuilder;
            protected: ToolPathEditorBuilder();
            public: ~ToolPathEditorBuilder();
            /**Returns  the motion method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathEditorBuilder::MotionMethodType MotionMethod
            (
            );
            /**Sets  the motion method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMotionMethod
            (
                NXOpen::CAM::ToolPathEditorBuilder::MotionMethodType motionMethod /** motionmethod */ 
            );
            /**Returns  the delta xc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DeltaXC
            (
            );
            /**Sets  the delta xc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDeltaXC
            (
                double deltaXC /** deltaxc */ 
            );
            /**Returns  the delta yc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DeltaYC
            (
            );
            /**Sets  the delta yc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDeltaYC
            (
                double deltaYC /** deltayc */ 
            );
            /**Returns  the delta zc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double DeltaZC
            (
            );
            /**Sets  the delta zc 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDeltaZC
            (
                double deltaZC /** deltazc */ 
            );
            /**Returns  the to point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ToPoint
            (
            );
            /**Sets  the to point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetToPoint
            (
                NXOpen::Point * toPoint /** topoint */ 
            );
            /**Returns  the reference point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ReferencePoint
            (
            );
            /**Sets  the reference point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReferencePoint
            (
                NXOpen::Point * refPoint /** refpoint */ 
            );
            /**Returns  the move start point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool MoveStartPoint
            (
            );
            /**Sets  the move start point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMoveStartPoint
            (
                bool moveStartPoint /** movestartpoint */ 
            );
            /**Returns  the transform circles 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool TransformCircles
            (
            );
            /**Sets  the transform circles 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransformCircles
            (
                bool transformCircles /** transformcircles */ 
            );
            /** Move 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Move
            (
            );
            /**Returns  the extend direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * ExtendDirection
            (
            );
            /**Sets  the extend direction 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExtendDirection
            (
                NXOpen::Axis * direction /** direction */ 
            );
            /**Returns  the extend method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathEditorBuilder::ExtendMethodType ExtendMethod
            (
            );
            /**Sets  the extend method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExtendMethod
            (
                NXOpen::CAM::ToolPathEditorBuilder::ExtendMethodType motionMethod /** motionmethod */ 
            );
            /**Returns  the first linear distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double FirstLinearDistance
            (
            );
            /**Sets  the first linear distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFirstLinearDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the second linear distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double SecondLinearDistance
            (
            );
            /**Sets  the second linear distance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSecondLinearDistance
            (
                double distance /** distance */ 
            );
            /**Returns  the arc angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ArcAngle
            (
            );
            /**Sets  the arc angle 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetArcAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the arc radius 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: double ArcRadius
            (
            );
            /**Sets  the arc radius 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetArcRadius
            (
                double radius /** radius */ 
            );
            /** Extend 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Extend
            (
            );
            /**Returns  the holder check 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool HolderCheck
            (
            );
            /**Sets  the holder check 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHolderCheck
            (
                bool transformCircles /** transformcircles */ 
            );
            /**Returns  the gouge check clearance plane method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathEditorBuilder::ClearanceMethodType GougeCheckClearanceMethod
            (
            );
            /**Sets  the gouge check clearance plane method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGougeCheckClearanceMethod
            (
                NXOpen::CAM::ToolPathEditorBuilder::ClearanceMethodType method /** method */ 
            );
            /**Returns  the clearance plane,plane entity type covers Xform and Plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * GougeCheckClearancePlane
            (
            );
            /**Sets  the clearance plane,plane entity type covers Xform and Plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGougeCheckClearancePlane
            (
                NXOpen::NXObject * clearancePlane /** clearanceplane */ 
            );
            /** Gouge check 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void GougeCheck
            (
            );
            /** Select all gouges 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SelectAllGouges
            (
            );
            /** Select previous gouge 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SelectPreviousGouge
            (
            );
            /** Select next gouge 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SelectNextGouge
            (
            );
            /** Move to clearance plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void MoveToClearancePlane
            (
            );
            /** Get number of gouges  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: int GetNumberOfGouges
            (
            );
            /** Reverse 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Reverse
            (
            );
            /**Returns  the trim geometry type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathEditorBuilder::TrimGeometryType TrimGeometry
            (
            );
            /**Sets  the trim geometry type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimGeometry
            (
                NXOpen::CAM::ToolPathEditorBuilder::TrimGeometryType geomType /** geomtype */ 
            );
            /**Returns  the permanent boundary 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * PermanentBoundary
            (
            );
            /**Sets  the permanent boundary 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPermanentBoundary
            (
                NXOpen::NXObject * bnd /** bnd */ 
            );
            /**Returns  the side to trim 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathEditorBuilder::TrimSideType TrimSide
            (
            );
            /**Sets  the side to trim 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimSide
            (
                NXOpen::CAM::ToolPathEditorBuilder::TrimSideType side /** side */ 
            );
            /**Returns  the trim plane,plane entity type covers Xform and Plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * TrimPlane
            (
            );
            /**Sets  the trim plane,plane entity type covers Xform and Plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimPlane
            (
                NXOpen::NXObject * plane /** plane */ 
            );
            /**Returns  the trim line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * TrimLine
            (
            );
            /**Sets  the trim line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimLine
            (
                NXOpen::NXObject * line /** line */ 
            );
            /**Returns  the normal to the trim line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * TrimDirection
            (
            );
            /**Sets  the normal to the trim line 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimDirection
            (
                NXOpen::Axis * dir /** dir */ 
            );
            /**Returns  the trimming connection method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathEditorBuilder::ConnectionMethodType TrimConnectionMethod
            (
            );
            /**Sets  the trimming connection method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimConnectionMethod
            (
                NXOpen::CAM::ToolPathEditorBuilder::ConnectionMethodType connMethod /** connmethod */ 
            );
            /**Returns  the trimming clearance plane method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::ToolPathEditorBuilder::ClearanceMethodType TrimClearanceMethod
            (
            );
            /**Sets  the trimming clearance plane method 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimClearanceMethod
            (
                NXOpen::CAM::ToolPathEditorBuilder::ClearanceMethodType clrMethod /** clrmethod */ 
            );
            /**Returns  the trimming clearance plane,plane entity type covers Xform and Plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * TrimClearancePlane
            (
            );
            /**Sets  the trimming clearance plane,plane entity type covers Xform and Plane 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTrimClearancePlane
            (
                NXOpen::NXObject * plane /** plane */ 
            );
            /** Trim 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Trim
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
