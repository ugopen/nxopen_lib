#ifndef NXOpen_ROUTING_BULKREPLACEMENTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_BULKREPLACEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_BulkReplacementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_AttributeIdentifier.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class BulkReplacementBuilder;
    }
    class Builder;
    class NXObject;
    namespace Routing
    {
        class RouteObjectCollector;
    }
    class SelectNXObject;
    namespace Routing
    {
        /** Defines the replacement method type. Attribute values, library select, and retain */
        enum RoutingBulkReplacementBuilderReplacementMethodType
        {
            RoutingBulkReplacementBuilderReplacementMethodTypeAttributeValues/** Search for a replacement object using attribute values */,
            RoutingBulkReplacementBuilderReplacementMethodTypeLibrarySelect/** Select a replacement object from the part library */,
            RoutingBulkReplacementBuilderReplacementMethodTypeRetain/** Keep the original object, no replacement is performed */
        };

        /** Defines the reason why the object has been retained. Unspecified, explicit, block unify, non-classification, and equipment  */
        enum RoutingBulkReplacementBuilderRetainReasonType
        {
            RoutingBulkReplacementBuilderRetainReasonTypeUnspecified/** Retain reason is not specified  */,
            RoutingBulkReplacementBuilderRetainReasonTypeExplicit/** Retain reason is the user explicitly marked it retain */,
            RoutingBulkReplacementBuilderRetainReasonTypeBlockUnify/** Retain reason is because of the presence of the NX_BLOCK_UNIFY attribute */,
            RoutingBulkReplacementBuilderRetainReasonTypeNonClassification/** Retain reason is the object did not originate from classification and is not supported */,
            RoutingBulkReplacementBuilderRetainReasonTypeEquipment/** Retain reason is the object is equipment and is not supported */,
            RoutingBulkReplacementBuilderRetainReasonTypeNonPartLibrary/** Retain reason is the object did not originate from the Routing part library and is not supported */,
            RoutingBulkReplacementBuilderRetainReasonTypeReferenceStock/** Retain reason is the object is reference stock */
        };

        /** Defines the library select source. Unspecified, classification and specific part */
        enum RoutingBulkReplacementBuilderLibrarySelectSourceType
        {
            RoutingBulkReplacementBuilderLibrarySelectSourceTypeUnspecified/** Library select source is not specified */,
            RoutingBulkReplacementBuilderLibrarySelectSourceTypeClassification/** Library select source is a classification object */,
            RoutingBulkReplacementBuilderLibrarySelectSourceTypeSpecificPart/** Library select source is a specific part */
        };

    }
    namespace Routing
    {
        class _BulkReplacementBuilderBuilder;
        class BulkReplacementBuilderImpl;
        /** Builder class for Bulk Replacement which manages replacement operations on Routing objects  <br> Not support KF.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  BulkReplacementBuilder : public NXOpen::Builder
        {
            private: BulkReplacementBuilderImpl * m_bulkreplacementbuilder_impl;
            private: friend class  _BulkReplacementBuilderBuilder;
            protected: BulkReplacementBuilder();
            public: ~BulkReplacementBuilder();
            /**Returns  the Routing object collector 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::Routing::RouteObjectCollector * RouteObjectCollector
            (
            );
            /** The replacement method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetReplacementMethodForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement method */,
                NXOpen::Routing::RoutingBulkReplacementBuilderReplacementMethodType method /** The replacement method to use for replacement of this object */
            );
            /** The replacement method setter for all objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetReplacementMethodForAllObjects
            (
                NXOpen::Routing::RoutingBulkReplacementBuilderReplacementMethodType method /** The replacement method to set for all objects */
            );
            /** The replacement method getter  @return  The replacement method currently set for this object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::Routing::RoutingBulkReplacementBuilderReplacementMethodType GetReplacementMethodForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to get the replacement method */
            );
            /** The retain reason getter  @return  The retain reason currently set for this object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::Routing::RoutingBulkReplacementBuilderRetainReasonType GetRetainReasonForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to get the retain reason */
            );
            /** The replacement object identifier method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetReplacementObjectIdentifierForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement object */,
                const NXString & objectIdentifier /** The object identifier for which to set as the replacement object */
            );
            /** The replacement object identifier method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void SetReplacementObjectIdentifierForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement object */,
                const char * objectIdentifier /** The object identifier for which to set as the replacement object */
            );
            /** The replacement object method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetReplacementClassificationObjectForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement object */,
                const NXString & classificationClassId /** The classification object class id of the object to to set as the replacement object */,
                const NXString & classificationInstanceId /** The classification object instance id of the object to to set as the replacement object */
            );
            /** The replacement object method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void SetReplacementClassificationObjectForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement object */,
                const char * classificationClassId /** The classification object class id of the object to to set as the replacement object */,
                const char * classificationInstanceId /** The classification object instance id of the object to to set as the replacement object */
            );
            /** The replacement object part number method setter 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetReplacementObjectPartNumberForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement object */,
                const NXString & partNumber /** The part numberof the object to to set as the replacement object */
            );
            /** The replacement object part number method setter 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void SetReplacementObjectPartNumberForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement object */,
                const char * partNumber /** The part numberof the object to to set as the replacement object */
            );
            /** The replacement part specification method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetReplacementPartSpecificationForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement object */,
                const NXString & partSpecification /** The full part specification of the part to use for replacement */
            );
            /** The replacement part specification method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void SetReplacementPartSpecificationForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the replacement object */,
                const char * partSpecification /** The full part specification of the part to use for replacement */
            );
            /** The replacement object identifier getter  @return  The object identifier for which is currently set as the replacement object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXString GetReplacementObjectIdentifierForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to get the replacement object */
            );
            /** The possible replacement object identifiers method getter  @return  array of object identifiers which are possible replacement objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: std::vector<NXString> GetReplacementObjectIdentifiersFromSearchResultsForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to get the possible replacement object identifiers */
            );
            /** The object attribute value method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetAttributeForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the attribute value */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute being set */,
                const NXString & attributeId /** The identifier of the attribute being set */,
                const NXString & value /** The new value for the attribute */
            );
            /** The object attribute value method setter 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void SetAttributeForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the attribute value */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute being set */,
                const char * attributeId /** The identifier of the attribute being set */,
                const char * value /** The new value for the attribute */
            );
            /** The attribute value setter for all objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetAttributeForAllObjects
            (
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute value being set */,
                const NXString & attributeId /** The identifier of the attribute value being set */,
                const NXString & value /** The new value for the attribute */
            );
            /** The attribute value setter for all objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void SetAttributeForAllObjects
            (
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute value being set */,
                const char * attributeId /** The identifier of the attribute value being set */,
                const char * value /** The new value for the attribute */
            );
            /** The object attribute value method getter  @return  The value of the attribute 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXString GetAttributeForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to get the attribute value */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute being retrieved */,
                const NXString & attributeId /** The identifier of the attribute value being retrieved */
            );
            /** The object attribute value method getter  @return  The value of the attribute 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            NXString GetAttributeForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to get the attribute value */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute being retrieved */,
                const char * attributeId /** The identifier of the attribute value being retrieved */
            );
            /** The object attribute value clear method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void ClearAttributeForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to clear the attribute value */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute being cleared */,
                const NXString & attributeId /** The identifier of the attribute value being cleared */
            );
            /** The object attribute value clear method 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void ClearAttributeForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to clear the attribute value */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute being cleared */,
                const char * attributeId /** The identifier of the attribute value being cleared */
            );
            /** The attribute value clear method for all objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void ClearAttributeForAllObjects
            (
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute being cleared */,
                const NXString & attributeId /** The identifier of the attribute value being cleared */
            );
            /** The attribute value clear method for all objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void ClearAttributeForAllObjects
            (
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute being cleared */,
                const char * attributeId /** The identifier of the attribute value being cleared */
            );
            /** The method that retrieves all the values for a given attribute from all the objects  @return  The values retrieved from all the objects for the attribute 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: std::vector<NXString> GetSelectedObjectValuesForAttribute
            (
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute for which to get all the values */,
                const NXString & attributeId /** The identifier of the attribute for which to get all the values */
            );
            /** The method that retrieves all the values for a given attribute from all the objects  @return  The values retrieved from all the objects for the attribute 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            std::vector<NXString> GetSelectedObjectValuesForAttribute
            (
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute for which to get all the values */,
                const char * attributeId /** The identifier of the attribute for which to get all the values */
            );
            /** The method gets the part libray values for a given attribute for the specified object  @return  The values retrieved from all the part library for the attribute 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: std::vector<NXString> GetPartLibraryValuesForAttributeForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to get the part library values */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute for which to get the values */,
                const NXString & attributeId /** The identifier of the attribute for which to get the values */
            );
            /** The method gets the part libray values for a given attribute for the specified object  @return  The values retrieved from all the part library for the attribute 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            std::vector<NXString> GetPartLibraryValuesForAttributeForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to get the part library values */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute for which to get the values */,
                const char * attributeId /** The identifier of the attribute for which to get the values */
            );
            /** The method that initiates a search for the replacement object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SearchForReplacementForObject
            (
                NXOpen::NXObject * objectTag /** The object for which to initiate the search */
            );
            /** The method that initiates a search for the replacement object using on the passed in attributes as criteria 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SearchForReplacementForObjectOnAttributes
            (
                NXOpen::NXObject * objectTag /** The object for which to initiate the search */,
                const std::vector<NXOpen::Routing::RoutingAttributeIdentifierType> & attributeIdTypes /** The array of attribute types to limit the search */,
                std::vector<NXString> & attributeIds /** The array of attribute identifiers to limit the search */
            );
            /** The method that copies the search results from one object to another 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void CopySearchResultsToObject
            (
                NXOpen::NXObject * fromObjectTag /** The object from which you want to copy the search results */,
                NXOpen::NXObject * toObjectTag /** The object to which you want to copy the search results */
            );
            /**Returns  the reference object used to extract characteristics for Bulk Replacement 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::SelectNXObject * ReferenceObject
            (
            );
            /** The method that returns the value of an attribute from the reference object  @return  The value of the attribute from the reference object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXString GetValueForAttributeFromReferenceObject
            (
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute for which to get the value */,
                const NXString & attributeId /** The identifier of the attribute for which to get all the values */
            );
            /** The method that returns the value of an attribute from the reference object  @return  The value of the attribute from the reference object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            NXString GetValueForAttributeFromReferenceObject
            (
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute for which to get the value */,
                const char * attributeId /** The identifier of the attribute for which to get all the values */
            );
            /** The method that sets the attribute value from the reference object on the specifiec object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetAttributeValueForObjectFromReferenceObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the attribute value from the reference object */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute for which to set the value from the reference object */,
                const NXString & attributeId /** The identifier of the attribute for which to set the value from the reference object */
            );
            /** The method that sets the attribute value from the reference object on the specifiec object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void SetAttributeValueForObjectFromReferenceObject
            (
                NXOpen::NXObject * objectTag /** The object for which to set the attribute value from the reference object */,
                NXOpen::Routing::RoutingAttributeIdentifierType attributeIdType /** The type of attribute for which to set the value from the reference object */,
                const char * attributeId /** The identifier of the attribute for which to set the value from the reference object */
            );
            /** The method that sets the reference set used for newly replaced objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetPartReferenceSet
            (
                const NXString & referenceSetName /** The name of the reference set */
            );
            /** The method that sets the reference set used for newly replaced objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            void SetPartReferenceSet
            (
                const char * referenceSetName /** The name of the reference set */
            );
            /** The method that gets the reference set used for newly replaced objects  @return  The name of the reference set 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXString GetPartReferenceSet
            (
            );
            /** The method that sets the layer used for newly replaced objects 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetPartLayer
            (
                int layer /** The number of the layer */
            );
            /** The method that gets the layer used for newly replaced objects  @return  The number of the layer 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: int GetPartLayer
            (
            );
            /** The method that sets the sequence of object replacement 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetSequenceOfObjectReplacement
            (
                const std::vector<NXOpen::NXObject *> & objects /** The objects in the order of them to be replaced */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
