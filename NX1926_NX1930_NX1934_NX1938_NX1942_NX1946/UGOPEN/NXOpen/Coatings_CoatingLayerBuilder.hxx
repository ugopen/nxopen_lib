#ifndef NXOpen_COATINGS_COATINGLAYERBUILDER_HXX_INCLUDED
#define NXOpen_COATINGS_COATINGLAYERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Coatings_CoatingLayerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_Coatings_CoatingRegionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_coatings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Coatings
    {
        class CoatingLayerBuilder;
    }
    class Builder;
    class Expression;
    namespace Features
    {
        namespace Coatings
        {
            class CoatingRegionBuilder;
        }
    }
    namespace Coatings
    {
        class _CoatingLayerBuilderBuilder;
        class CoatingLayerBuilderImpl;
        /**
             * Defines a builder for creating @link Coatings::CoatingLayer Coatings::CoatingLayer@endlink  objects,
             * which are used by the Coatings application.
              <br> To create a new instance of this class, use @link NXOpen::Coatings::CoatingLayerCollection::CreateCoatingLayerBuilder  NXOpen::Coatings::CoatingLayerCollection::CreateCoatingLayerBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Thickness.Value </term> <description> 
         
        0.25 (millimeters part), 0.1 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_COATINGSEXPORT  CoatingLayerBuilder : public NXOpen::Builder
        {
            private: CoatingLayerBuilderImpl * m_coatinglayerbuilder_impl;
            private: friend class  _CoatingLayerBuilderBuilder;
            protected: CoatingLayerBuilder();
            public: ~CoatingLayerBuilder();
            /**Returns  the tool bodies to split the target body(s). The tool bodies are
                      * gotten through the BooleanTool Builder
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Coatings::CoatingRegionBuilder * CoatingRegion
            (
            );
            /**Returns  the name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the thickness 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Thickness
            (
            );
            /**Returns  the face color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int FaceColor
            (
            );
            /**Sets  the face color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: void SetFaceColor
            (
                int faceColor /** facecolor */ 
            );
            /** Gets the process note 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetProcessNote
            (
            );
            /** Sets the process note 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: void SetProcessNote
            (
                const std::vector<NXString> & processNotes /** processnotes */ 
            );
            /**Returns  the name of the visualMaterial to apply 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: NXString VisualMaterialName
            (
            );
            /**Sets  the name of the visualMaterial to apply 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: void SetVisualMaterialName
            (
                const NXString & visualMaterialName /** visualmaterialname */ 
            );
            /**Sets  the name of the visualMaterial to apply 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            void SetVisualMaterialName
            (
                const char * visualMaterialName /** visualmaterialname */ 
            );
            /**Returns  the material tag tied in with material specified 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: NXString MaterialName
            (
            );
            /**Sets  the material tag tied in with material specified 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: void SetMaterialName
            (
                const NXString & material /** material */ 
            );
            /**Sets  the material tag tied in with material specified 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            void SetMaterialName
            (
                const char * material /** material */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
