#ifndef NXOpen_DRAWINGS_SHEETZONESETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_SHEETZONESETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_SheetZoneSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BordersAndZones.hxx>
#include <NXOpen/LineColorFontWidthBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class SheetZoneSettingsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class LineColorFontWidthBuilder;
    namespace Drawings
    {
        class _SheetZoneSettingsBuilderBuilder;
        class SheetZoneSettingsBuilderImpl;
        /** Represents the Drawing Sheet Zone Setting Style Builder.
            
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  SheetZoneSettingsBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: SheetZoneSettingsBuilderImpl * m_sheetzonesettingsbuilder_impl;
            private: friend class  _SheetZoneSettingsBuilderBuilder;
            protected: SheetZoneSettingsBuilder();
            public: ~SheetZoneSettingsBuilder();
            /**Returns  the create zones 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateZones
            (
            );
            /**Sets  the create zones 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateZones
            (
                bool createZones /** createzones */ 
            );
            /**Returns  the horizontal size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double HorizontalSize
            (
            );
            /**Sets  the horizontal size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHorizontalSize
            (
                double horizontalSize /** horizontalsize */ 
            );
            /**Returns  the vertical size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double VerticalSize
            (
            );
            /**Sets  the vertical size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVerticalSize
            (
                double verticalSize /** verticalsize */ 
            );
            /**Returns  the origin 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ZoneOrigin Origin
            (
            );
            /**Sets  the origin 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOrigin
            (
                NXOpen::Drawings::ZoneOrigin origin /** origin */ 
            );
            /**Returns  the continue zone indexing across sheets 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ContinueZoneIndexingAcrossSheets
            (
            );
            /**Sets  the continue zone indexing across sheets 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetContinueZoneIndexingAcrossSheets
            (
                bool continueZoneIndexingAcrossSheets /** continuezoneindexingacrosssheets */ 
            );
            /**Returns  the create zone markings 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateZoneMarkings
            (
            );
            /**Sets  the create zone markings 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateZoneMarkings
            (
                bool createZoneMarkings /** createzonemarkings */ 
            );
            /**Returns  the marking height 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double MarkingHeight
            (
            );
            /**Sets  the marking height 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMarkingHeight
            (
                double markingHeight /** markingheight */ 
            );
            /**Returns  the marking line color width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * MarkingLineColorWidth
            (
            );
            /**Returns  the create zone labels 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateZoneLabels
            (
            );
            /**Sets  the create zone labels 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateZoneLabels
            (
                bool createZoneLabels /** createzonelabels */ 
            );
            /**Returns  the label height 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double LabelHeight
            (
            );
            /**Sets  the label height 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLabelHeight
            (
                double labelHeight /** labelheight */ 
            );
            /**Returns  the labels color 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int LabelColor
            (
            );
            /**Sets  the labels color 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLabelColor
            (
                int labelColor /** labelcolor */ 
            );
            /**Returns  the labels font 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int LabelFont
            (
            );
            /**Sets  the labels font 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLabelFont
            (
                int labelFont /** labelfont */ 
            );
            /**Returns  the labels width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int LabelWidth
            (
            );
            /**Sets  the labels width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLabelWidth
            (
                int labelWidth /** labelwidth */ 
            );
            /**Returns  the labels font style 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool LabelItalicized
            (
            );
            /**Sets  the labels font style 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLabelItalicized
            (
                bool italic /** italic */ 
            );
            /**Returns  the labels to skip 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LabelsToSkip
            (
            );
            /**Sets  the labels to skip 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLabelsToSkip
            (
                const NXString & labelsToSkip /** labelstoskip */ 
            );
            /**Sets  the labels to skip 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetLabelsToSkip
            (
                const char * labelsToSkip /** labelstoskip */ 
            );
            /**Returns  the corner zone modification 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double CornerZoneModification
            (
            );
            /**Sets  the corner zone modification 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCornerZoneModification
            (
                double cornerZoneModification /** cornerzonemodification */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
