#ifndef NXOpen_AME_ELECTRICALANNOTATIONSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_AME_ELECTRICALANNOTATIONSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ElectricalAnnotationSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_ConnectionSubTypes.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ElectricalAnnotationSettingsBuilder;
    }
    class Builder;
    namespace AME
    {
        class _ElectricalAnnotationSettingsBuilderBuilder;
        class ElectricalAnnotationSettingsBuilderImpl;
        /** JA class for the Electrical Annotation Settings dialog <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateElectricalAnnotationSettingsBuilder  NXOpen::AME::AMEManager::CreateElectricalAnnotationSettingsBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ElectricalAnnotationSettingsBuilder : public NXOpen::Builder
        {
            /** Represents the type of annotations */
            public: enum AnnotationAttrType
            {
                AnnotationAttrTypeSourceTarget/** source target */ ,
                AnnotationAttrTypeCrossSection/** cross section */ ,
                AnnotationAttrTypeColor/** color */ ,
                AnnotationAttrTypeWireType/** wire type */ 
            };

            private: ElectricalAnnotationSettingsBuilderImpl * m_electricalannotationsettingsbuilder_impl;
            private: friend class  _ElectricalAnnotationSettingsBuilderBuilder;
            protected: ElectricalAnnotationSettingsBuilder();
            public: ~ElectricalAnnotationSettingsBuilder();
            /** The annotation attributes for a given connection type.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void GetAnnotationAttributes
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                std::vector<NXOpen::AME::ElectricalAnnotationSettingsBuilder::AnnotationAttrType> & annotationAttrs /** User needs to free this memory.*/
            );
            /** 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAnnotationAttributes
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                const std::vector<NXOpen::AME::ElectricalAnnotationSettingsBuilder::AnnotationAttrType> & annotationAttrs /** annotationattrs */ 
            );
            /** Reset to default. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetToDefault
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
