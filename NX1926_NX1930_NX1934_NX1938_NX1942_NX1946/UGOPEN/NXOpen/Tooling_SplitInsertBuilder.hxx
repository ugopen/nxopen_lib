#ifndef NXOpen_TOOLING_SPLITINSERTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_SPLITINSERTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_SplitInsertBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class SplitInsertBuilder;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    class Builder;
    class NXObject;
    class Section;
    namespace Tooling
    {
        class _SplitInsertBuilderBuilder;
        class SplitInsertBuilderImpl;
        /** Creates split insert builder for progressive die. No entity is returned.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateSplitInsertBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateSplitInsertBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        KeepOriginal </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RenameComponent </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  SplitInsertBuilder : public NXOpen::Builder
        {
            private: SplitInsertBuilderImpl * m_splitinsertbuilder_impl;
            private: friend class  _SplitInsertBuilderBuilder;
            protected: SplitInsertBuilder();
            public: ~SplitInsertBuilder();
            /**Returns  the select component 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * SelectComponent
            (
            );
            /**Returns  the splitting curves 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SplittingCurves
            (
            );
            /**Returns  the splitting direction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool SplittingDirection
            (
            );
            /**Sets  the splitting direction 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSplittingDirection
            (
                bool splittingDirection /** splittingdirection */ 
            );
            /**Returns  the keep original toggle value 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool KeepOriginal
            (
            );
            /**Sets  the keep original toggle value 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetKeepOriginal
            (
                bool keepOriginal /** keeporiginal */ 
            );
            /**Returns  the rename component 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool RenameComponent
            (
            );
            /**Sets  the rename component 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRenameComponent
            (
                bool renameComponent /** renamecomponent */ 
            );
            /**Returns  the wizard type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /** Suppress child feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::NXObject * SaveAndGetComponentParent
            (
                NXOpen::NXObject * componentTag /** componenttag */ 
            );
            /** Suppress child feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXString GetComponentFullName
            (
                NXOpen::NXObject * componentTag /** componenttag */ 
            );
            /** Suppress child feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Point3d GetComponentOrigin
            (
                NXOpen::NXObject * componentTag /** componenttag */ 
            );
            /** Suppress child feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Matrix3x3 GetComponentTransform
            (
                NXOpen::NXObject * componentTag /** componenttag */ 
            );
            /** Suppress child feature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void PrepairToSplitInsert
            (
            );
            /** Find linked body feature and source object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void FindLinkedBodyFeatureAndSource
            (
                const NXString & featureType /** featuretype */ ,
                const NXString & featureNameSubString /** featurenamesubstring */ 
            );
            /** Find linked body feature and source object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void FindLinkedBodyFeatureAndSource
            (
                const char * featureType /** featuretype */ ,
                const char * featureNameSubString /** featurenamesubstring */ 
            );
            /** Find linked body feature and source object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void FindLinkedBodyFeatureAndSourceForAll
            (
            );
            /** Reverse trim direction, relink source, and create udo for all. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ReverseTrimAndRelinkSourceAndCreateUDOForAll
            (
                const std::vector<NXOpen::NXObject *> & sourceObjects /** sourceobjects */ 
            );
            /** Set link feature and source object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetLinkFeatureAndSourceObject
            (
                std::vector<NXOpen::NXObject *> & sourceObjectsOld /** sourceobjectsold */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
