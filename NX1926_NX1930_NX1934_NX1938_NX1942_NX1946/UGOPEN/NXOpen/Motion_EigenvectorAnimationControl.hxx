#ifndef NXOpen_MOTION_EIGENVECTORANIMATIONCONTROL_HXX_INCLUDED
#define NXOpen_MOTION_EIGENVECTORANIMATIONCONTROL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_EigenvectorAnimationControl.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Motion_PostControl.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class EigenvectorAnimationControl;
    }
    namespace Motion
    {
        class PostControl;
    }
    namespace Motion
    {
        class _EigenvectorAnimationControlBuilder;
        class EigenvectorAnimationControlImpl;
        /** Represents the @link NXOpen::Motion::EigenvectorAnimationControl NXOpen::Motion::EigenvectorAnimationControl@endlink   <br> An instance of this class can be abtained with @link Motion::MotionSolution::GetEigenvectorAnimationControl Motion::MotionSolution::GetEigenvectorAnimationControl@endlink   <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  EigenvectorAnimationControl : public NXOpen::Motion::PostControl
        {
            private: EigenvectorAnimationControlImpl * m_eigenvectoranimationcontrol_impl;
            private: friend class  _EigenvectorAnimationControlBuilder;
            protected: EigenvectorAnimationControl();
            public: ~EigenvectorAnimationControl();
            /** Starts eigenvector animation analysis process 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void StartSolver
            (
            );
            /** Gets analysis time for eigenvector analysis, the initial value is the time of the last step. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetAnalysisTime
            (
            );
            /**Returns  the analysis step for eigenvector analysism, the range of the analysis step is between 0 and solution step count - 1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int AnalysisStep
            (
            );
            /**Sets  the analysis step for eigenvector analysism, the range of the analysis step is between 0 and solution step count - 1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAnalysisStep
            (
                int stepNumber /** stepnumber */ 
            );
            /**Returns  the flag if the generated result files will be deleted when eigenvector animation is finished. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool DeleteResultFiles
            (
            );
            /**Sets  the flag if the generated result files will be deleted when eigenvector animation is finished. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDeleteResultFiles
            (
                bool deleteResultFiles /** deleteresultfiles */ 
            );
            /** Calculates the eigenvectors of the current specified step 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CalculateEigenvector
            (
            );
            /** Gets the count of frequencies from the eigenvector calculation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int GetFrequencyCount
            (
            );
            /**Returns  the current frequency number for the analysis model, the range should be between 1 and frequency count 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int CurrentFrequencyNumber
            (
            );
            /**Sets  the current frequency number for the analysis model, the range should be between 1 and frequency count 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCurrentFrequencyNumber
            (
                int freqNumber /** freqnumber */ 
            );
            /** Gets frequency value for the input frequency number. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetFrequency
            (
                int freqNumber /** freqnumber */ 
            );
            /** Gets real part value for the input frequency number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetRealPart
            (
                int freqNumber /** freqnumber */ 
            );
            /** Gets imaginary part value for the input frequency number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetImaginaryPart
            (
                int freqNumber /** freqnumber */ 
            );
            /** Gets damping ratio value for the input frequency number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetDampingRatio
            (
                int freqNumber /** freqnumber */ 
            );
            /** Gets maximum scaling value for the input frequency number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: double GetMaximumScaling
            (
                int freqNumber /** freqnumber */ 
            );
            /** Calculates the animation result for the selected analysis step and the frequency number,
                        the input scaling factor can't exceed the max scaling 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void CalculateAnimationResult
            (
                double scalingFactor /** scalingfactor */ ,
                int numFrames /** numframes */ 
            );
            /** Loads the animation result 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void LoadAnimationResult
            (
            );
            /** Gets the count of animation steps 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int GetAnimationStepCount
            (
            );
            /** Animation play 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationPlay
            (
            );
            /** Animation step forward 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationStepForward
            (
            );
            /** Animation pause 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationPause
            (
            );
            /** Animation step backward 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationStepBackward
            (
            );
            /** Animation step to any step, the range is between 0 and step count - 1 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationStepTo
            (
                int stepNumber /** Special step */
            );
            /** Animation stop 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void AnimationStop
            (
            );
            /** Finish Eigenvector Animation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void Finish
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
