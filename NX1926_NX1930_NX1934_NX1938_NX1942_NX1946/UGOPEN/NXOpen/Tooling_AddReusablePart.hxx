#ifndef NXOpen_TOOLING_ADDREUSABLEPART_HXX_INCLUDED
#define NXOpen_TOOLING_ADDREUSABLEPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_AddReusablePart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_CloneObject.hxx>
#include <NXOpen/Tooling_SpreadsheetData.hxx>
#include <NXOpen/Tooling_ToolingManager.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class AddReusablePart;
    }
    namespace Assemblies
    {
        class Component;
    }
    namespace Assemblies
    {
        class ComponentPatternBuilder;
    }
    class Builder;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class Part;
    class Sketch;
    namespace Tooling
    {
        class CloneObject;
    }
    namespace Tooling
    {
        class ReusablePocketBuilder;
    }
    namespace Tooling
    {
        class SpreadsheetData;
    }
    namespace Tooling
    {
        class _AddReusablePartBuilder;
        class AddReusablePartImpl;
        /**
            Represents a @link NXOpen::Tooling::AddReusablePart NXOpen::Tooling::AddReusablePart@endlink 
             <br> To create a new instance of this class, use @link NXOpen::Tooling::AddReusablePartCollection::CreateBuilder  NXOpen::Tooling::AddReusablePartCollection::CreateBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.XPathOption </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YDirectionOption </term> <description> 
         
        Section </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YPathOption </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.PitchDistance.Value </term> <description> 
         
        10 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.SpaceType </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.SpanDistance.Value </term> <description> 
         
        100 (millimeters part), 10 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.NCopies.Value </term> <description> 
         
        12 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.PitchAngle.Value </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.PitchDistance.Value </term> <description> 
         
        10 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.SpaceType </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.SpanAngle.Value </term> <description> 
         
        360 (millimeters part), 360 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.UsePitchOption </term> <description> 
         
        Angle </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.CreateLastStaggered </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.HorizontalRef.RotationAngle.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.IncludeSeedToggle </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.RadialSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.CircularDefinition.StaggerType </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.AnglePitch.Value </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.CountOfInstances.Value </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.DirectionType </term> <description> 
         
        Righthand </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.DistancePitch.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.HelixPitch.Value </term> <description> 
         
        50 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.HelixSpan.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.NumberOfTurns.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.HelixDefinition.SizeOption </term> <description> 
         
        CountAngleDistance </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternFill.FillMargin.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternFill.FillOptions </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternFill.SimplifiedBoundaryToggle </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.AlongOrientationOption </term> <description> 
         
        NormalToPath </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.CircularOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.FollowFaceProjDirOption </term> <description> 
         
        PatternPlaneNormal </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.GeneralOrientationOption </term> <description> 
         
        Fixed </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.HelixOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.LinearOrientationOption </term> <description> 
         
        Fixed </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.MirrorOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.OrientationOption </term> <description> 
         
        Fixed </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.PolygonOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternOrientation.SpiralOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PatternType </term> <description> 
         
        Linear </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.NumberOfSides.Value </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSizeOption </term> <description> 
         
        Inscribed </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.NCopies.Value </term> <description> 
         
        4 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.PitchDistance.Value </term> <description> 
         
        25 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.SpaceType </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.SpanAngle.Value </term> <description> 
         
        360 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.PitchDistance.Value </term> <description> 
         
        25 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.SpanDistance.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.CreateLastStaggered </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.SimplifiedLayoutType </term> <description> 
         
        Square </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.StaggerType </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.XSpacing.NCopies.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.RectangularDefinition.YSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.DirectionType </term> <description> 
         
        Lefthand </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.NumberOfTurns.Value </term> <description> 
         
        1 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.RadialPitch.Value </term> <description> 
         
        50 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.SizeSpiralType </term> <description> 
         
        NumberOfTurns </description> </item> 

        <item><term> 
         
        ComponentPatternBuilder.PatternService.SpiralDefinition.TotalAngle.Value </term> <description> 
         
        360 (millimeters part), 360 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  AddReusablePart : public NXOpen::Builder
        {
            /** Represents the position method */
            public: enum PositionMethod
            {
                PositionMethodInvalid/** invalid */  = -1,
                PositionMethodAbsolute/** absolute */ ,
                PositionMethodMate/** mate */ ,
                PositionMethodReposition/** reposition */ ,
                PositionMethodWcs/** wcs */ ,
                PositionMethodPosition/** position */ ,
                PositionMethodPoint/** Position by point */ = 15,
                PositionMethodInferredOny/** inferred ony */ ,
                PositionMethodRouting/** Position using Routing */
            };

            /** Represents adding or editing a reusable component mode method */
            public: enum ModeMethod
            {
                ModeMethodAdd/** Add reusable component */ = 1,
                ModeMethodEdit/** Edit reusable component */
            };

            /** Represents the component type of the added part */
            public: enum ComponentMode
            {
                ComponentModeNormal/** normal reusable component */ = 1,
                ComponentModeCadenas/** cadenas part component */ = 3
            };

            /** Represents save pocket body information, updating or deleting a pocket body size mode method */
            public: enum PocketBodyMethod
            {
                PocketBodyMethodNone/** Save pocket body information into attatched component */ = 1,
                PocketBodyMethodUpdate/** Update the existed pocket body size*/,
                PocketBodyMethodDelete/**  Delete pocket body */
            };

            private: AddReusablePartImpl * m_addreusablepart_impl;
            private: friend class  _AddReusablePartBuilder;
            protected: AddReusablePart();
            public: ~AddReusablePart();
            /**Returns   the current position method
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AddReusablePart::PositionMethod PositionMode
            (
            );
            /**Sets   the current position method
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPositionMode
            (
                NXOpen::Tooling::AddReusablePart::PositionMethod positionMode /** position mode */ 
            );
            /** Creates the clone operation object  @return  the new @link NXOpen::Tooling::CloneObject NXOpen::Tooling::CloneObject@endlink  instance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CloneObject * CreateCloneObject
            (
                NXOpen::Tooling::ToolingApplication applicationType /** Wizard type */,
                const NXString & assemName /** Project assembly name */
            );
            /** Creates the clone operation object  @return  the new @link NXOpen::Tooling::CloneObject NXOpen::Tooling::CloneObject@endlink  instance 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Tooling::CloneObject * CreateCloneObject
            (
                NXOpen::Tooling::ToolingApplication applicationType /** Wizard type */,
                const char * assemName /** Project assembly name */
            );
            /** Gets the initial location, this is mainly used to get default add location of a reusable component  @return  Drop location to initial parameter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d GetInitialPosition
            (
            );
            /** Sets the initial location, this is mainly used to set default add location of a reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInitialPosition
            (
                const NXOpen::Point3d & dropLocation /** Drop location to initial parameter */
            );
            /**Gets the spreadsheet data, this is mainly used to get the attributes of a reusable component @return  Spreadsheet data 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SpreadsheetData * GetSpreadsheetData
            (
            );
            /** Sets the spreadsheet data, this is mainly used to set the attributes of a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpreadsheetData
            (
                NXOpen::Tooling::SpreadsheetData * spreadsheetData /** Spreadsheet data */
            );
            /**Gets the parent part, this is mainly used to get context work part of a reusable component  @return  The parent part to place the component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * GetParentPart
            (
            );
            /**Sets the parent part, this is mainly used to set context work part of a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParentPart
            (
                NXOpen::Part * part /** The parent part to place the component */
            );
            /**Gets the attached geometry, this is mainly used to get the initial parameter  @return  Geometry to calculate the initial parameter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * GetAttachedGeometry
            (
            );
            /**Sets the attached geometry, this is mainly used to set the initial parameter
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAttachedGeometry
            (
                NXOpen::NXObject * part /** Geometry to calculate the initial parameter */
            );
            /** Saves the library name and path of the reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveLibraryPath
            (
                const NXString & libName /** Library name */,
                const NXString & libpath /** The path in the library */
            );
            /** Saves the library name and path of the reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SaveLibraryPath
            (
                const char * libName /** Library name */,
                const char * libpath /** The path in the library */
            );
            /** Loads the reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void LoadReusableComponent
            (
                const NXString & krxFile /** The KRX file */
            );
            /** Loads the reusable component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void LoadReusableComponent
            (
                const char * krxFile /** The KRX file */
            );
            /** Sets the reusable component properties 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentProperties
            (
                const NXString & referenceSetName /** The name of the reference set used to represent the new component */,
                const NXString & componentName /** The name of the new component */,
                int layer /** The layer to place the new component on */
            );
            /** Sets the reusable component properties 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void SetComponentProperties
            (
                const char * referenceSetName /** The name of the reference set used to represent the new component */,
                const char * componentName /** The name of the new component */,
                int layer /** The layer to place the new component on */
            );
            /** Updates the part data for a reusable component, this is mainly used to update parameter for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateReusableComponent
            (
            );
            /** Updates the part data of a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdatePartData
            (
            );
            /** Constructs the parameters data, reads data from part family or spreadsheet and updates the parameter data in the part
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ConstructParametersData
            (
            );
            /** Affirm insertion of the reusable component.
                        To get the inserted reusable components, please use @link NXOpen::Tooling::AddReusablePart::AffirmReusableComponents NXOpen::Tooling::AddReusablePart::AffirmReusableComponents@endlink  instead.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AffirmReusableComponent
            (
            );
            /** Creates constraints for the reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateReusableConstraints
            (
                int index /**  The index part is to create constraints */
            );
            /** Deletes constraints for the reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteReusableConstraints
            (
            );
            /** Reverses the direction of the reusable component if the reusable component is placed on a face. @return  The output face of the componnent on 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ReverseComponentDirection
            (
                const NXOpen::Point3d & inputPosition /** The input position of componnent */,
                const NXOpen::Point3d & inputDirection /** The input direction of componnent*/,
                double length /** The input length of componnent*/,
                const NXOpen::Point3d & outputPosition /** The output position of componnent */,
                const NXOpen::Point3d & outputDirection /** The output position of componnent */
            );
            /** Creates pocket for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateReusablePocket
            (
                bool commit /** if the variable is true, the component needs pocket */
            );
            /** Deletes pocket for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteReusablePocket
            (
            );
            /** Creates an array instance of a component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateComponents
            (
                int count /** The count is array instance number */,
                NXOpen::NXObject * selobj /** The selected object is FACE type, the reusable component place on the face */
            );
            /** Deletes an array instance of a component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteComponents
            (
                int count /** The count is array instance number */
            );
            /** Adds series of reusable components in holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddHoleInstance
            (
                const NXOpen::Point3d & inputDirection /** The input direction of component*/,
                const NXOpen::Point3d & inputPostion /** The input position of componnent */
            );
            /** Adds series of reusable components in csys 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void AddHoleInstanceForCsys
            (
                const NXOpen::Point3d & inputDirection /** The input direction of component*/,
                const NXOpen::Point3d & inputPostion /** The input position of componnent */,
                NXOpen::NXObject * selCsys /** The input csys of component */
            );
            /** Reverses the direction of the reusable component if the reusable component is not placed on a face.
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void ReversePreviewComponent
            (
                const NXOpen::Point3d & rememberDir /** The original position of component */
            );
            /** Removes the instance from the part data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveOldInstance
            (
                int index /** The index of component instance */
            );
            /** Adds a new instance
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddNewInstance
            (
                NXOpen::Assemblies::Component * partOcc /** Add the new occurance into the part data*/,
                int index /** The index of component instance */
            );
            /** Edits a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void EditReusableComponent
            (
                NXOpen::Assemblies::Component * partOcc /** The component occurance to edit in the part data*/
            );
            /** Adds occurance into the part data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddPartOccurance
            (
                NXOpen::Assemblies::Component * partOcc /** The component occurance to add in the part data*/
            );
            /** Adds Component Properties
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddComponentProperty
            (
                const NXString & compName /** The name of the reference set used to represent the new component */,
                const NXString & refsetName /**  The layer to place the new component on */,
                int layer /** layer */ 
            );
            /** Adds Component Properties
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void AddComponentProperty
            (
                const char * compName /** The name of the reference set used to represent the new component */,
                const char * refsetName /**  The layer to place the new component on */,
                int layer /** layer */ 
            );
            /** Inserts the component into the part data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void InsertReusableComponent
            (
                int instIndex /** The index of the new component being added in the part data*/,
                bool needTransform /** Whether the component needs to be transformed in the fastener assembly */
            );
            /** Adds mode for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddComponentMode
            (
                NXOpen::Tooling::AddReusablePart::ModeMethod modeMethod /** mode method */ 
            );
            /** Sets the clone operation object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCloneObject
            (
                NXOpen::Tooling::CloneObject * cloneObject /** A @link NXOpen::Tooling::CloneObject NXOpen::Tooling::CloneObject@endlink  instance */
            );
            /** Gets the clone operation object  @return  A @link NXOpen::Tooling::CloneObject NXOpen::Tooling::CloneObject@endlink  instance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CloneObject * GetCloneObject
            (
            );
            /** Adds clone part name
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void AddClonePartName
            (
                const NXString & clonedpartname /** The new clone part name*/
            );
            /** Adds clone part name
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void AddClonePartName
            (
                const char * clonedpartname /** The new clone part name*/
            );
            /**Subtitutes a reusable part
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SubtituteReusableComponent
            (
                bool substituteInstance /** Whether the resuable component needs to be substituted */
            );
            /** Removes design element component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveDesignElement
            (
            );
            /** Moves a reusable component to a selected position
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void MoveReusableComponent
            (
                const NXOpen::Vector3d & translation /** The translation data */,
                const NXOpen::Matrix3x3 & rotation /** The rotation data */,
                int index /** The reusable component index in the part data  */
            );
            /** Removes a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveReusableComponent
            (
                int index /** The reusable component index in the part data*/
            );
            /** Sets the search geometry for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSearchGeometry
            (
                bool isTrunOn /** Whehter the search geometry toggle is turned on, which is on the add reusable component dialog*/
            );
            /** Destroys reusable builder data
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void DestroyReusableBuilder
            (
            );
            /** Records the existing reusable component with the same name
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void RecordReusableComponent
            (
                const NXString & fileName /**The reusable component name */
            );
            /** Records the existing reusable component with the same name
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            void RecordReusableComponent
            (
                const char * fileName /**The reusable component name */
            );
            /** Updates the pocket for a reusable component
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateReusablePocket
            (
            );
            /** Gets an array of design elements @return  The design elements
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> GetDesignElement
            (
            );
            /** Sets the reusable pocket builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReusablePocketBuilder
            (
                NXOpen::Tooling::ReusablePocketBuilder * pocketTag /** The reusable component pocket builder*/
            );
            /** Gets the reusable pocket builder @return  The reusable component pocket builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ReusablePocketBuilder * GetReusablePocketBuilder
            (
            );
            /** Sets the toggle of the Preview widget
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnablePreview
            (
                bool isTrunOn /** Whehter preview toggle is turned on, which is on the add reusable component dialog*/
            );
            /** Sets the replace template part
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReplaceTemplate
            (
                NXOpen::Part * replaceTemplate /** The replace template part*/
            );
            /** Sets the selected component to replace
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentToReplace
            (
                int index /** The index for component to replace */,
                NXOpen::Assemblies::Component * replaceComponent /** The component to replace*/
            );
            /** Replace reusable component
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void ReplaceReusableComponent
            (
            );
            /** Removes an instance of a part family member 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveFamilyInstance
            (
                NXOpen::Part * part /** part */ 
            );
            /**Returns  the positioning feature that needed for reusable component 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Sketch * PositioningFeature
            (
            );
            /**Sets  the positioning feature that needed for reusable component 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPositioningFeature
            (
                NXOpen::Sketch * sketch /** Positioning feature */
            );
            /** Create the pattern component when the positioining pattern sketch feature is not exsit; edit pattern component when the positioining pattern feature is exsit
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePatternComponent
            (
                bool createPattern /** Flag to decide whether to create pattern component or edit, set flag as true to create and set flag false to edit */
            );
            /** Find the positioning feature set by pattern sketch  @return  Positioning feature set 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::Feature * FindPositioningFeatureSet
            (
            );
            /** Keep the reusable component handle information into its associated pattern point
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentHandleToPoint
            (
            );
            /**Returns  the current component type
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AddReusablePart::ComponentMode ComponentType
            (
            );
            /**Sets  the current component type
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentType
            (
                NXOpen::Tooling::AddReusablePart::ComponentMode partType /** part type */ 
            );
            /** 
                        Updates the CADENAS component by given parameter name and value, 
                        the name can also be retrieved by calling the following methods.
                        @link NXOpen::Tooling::AddReusablePart::GetSpreadsheetData NXOpen::Tooling::AddReusablePart::GetSpreadsheetData@endlink ,
                        @link NXOpen::Tooling::SpreadsheetData::GetParameterValue NXOpen::Tooling::SpreadsheetData::GetParameterValue@endlink ,
                        @link NXOpen::Tooling::SpreadsheetDataParameter::ParameterName NXOpen::Tooling::SpreadsheetDataParameter::ParameterName @endlink and @link NXOpen::Tooling::SpreadsheetDataParameter::SetParameterName NXOpen::Tooling::SpreadsheetDataParameter::SetParameterName @endlink 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateCadenasParameter
            (
                const NXString & paraName /** The parameter name */,
                const NXString & paraValue /** The parameter value */
            );
            /** 
                        Updates the CADENAS component by given parameter name and value, 
                        the name can also be retrieved by calling the following methods.
                        @link NXOpen::Tooling::AddReusablePart::GetSpreadsheetData NXOpen::Tooling::AddReusablePart::GetSpreadsheetData@endlink ,
                        @link NXOpen::Tooling::SpreadsheetData::GetParameterValue NXOpen::Tooling::SpreadsheetData::GetParameterValue@endlink ,
                        @link NXOpen::Tooling::SpreadsheetDataParameter::ParameterName NXOpen::Tooling::SpreadsheetDataParameter::ParameterName @endlink and @link NXOpen::Tooling::SpreadsheetDataParameter::SetParameterName NXOpen::Tooling::SpreadsheetDataParameter::SetParameterName @endlink 
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void UpdateCadenasParameter
            (
                const char * paraName /** The parameter name */,
                const char * paraValue /** The parameter value */
            );
            /** Modify parameters according to row index. The number of the row is defined by the template data file. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void ModifyParametersByRow
            (
                int index /** The index is the row of the template data file */
            );
            /** Sets criteria into instance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void AddCriteriaToInstance
            (
                bool hasCriteria /** hascriteria */ ,
                const NXString & expStr /** expstr */ ,
                const NXString & addValue /** addvalue */ 
            );
            /** Sets criteria into instance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void AddCriteriaToInstance
            (
                bool hasCriteria /** hascriteria */ ,
                const char * expStr /** expstr */ ,
                const char * addValue /** addvalue */ 
            );
            /**Sets  the current component pattern builder
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentPatternBuilder
            (
                NXOpen::Assemblies::ComponentPatternBuilder * patternComponentBuilderTag /** The reusable component pattern builder*/
            );
            /**Returns  the current component pattern builder
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentPatternBuilder * ComponentPatternBuilder
            (
            );
            /** Update pocket body for mw library reusable component 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdatePocketBody
            (
                bool createPattern /** Flag to decide whether to create pocket body pattern or not*/,
                NXOpen::Tooling::AddReusablePart::PocketBodyMethod updatePocketBody /** Flag to decide whether to create pocket body, delete or update 0: add; 1: delete; 2:update */
            );
            /** Create positioning feature on the given position
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePositioningFeatureOnPoint
            (
                NXOpen::NXObject * selobj /** The selected object is FACE type, the reusable component place on the face */,
                const NXOpen::Point3d & inputPosition /** The input position*/,
                bool centerFace /** whether to use face center as location*/
            );
            /** Keep positioning offset and placement index
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SavePositioningOriginPlacement
            (
                const NXString & positionOffSet /** The positionging offset value that defined in the krx file*/,
                int placementOriginIndex /** The positioning placement origin index that defined in the krx file*/
            );
            /** Keep positioning offset and placement index
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SavePositioningOriginPlacement
            (
                const char * positionOffSet /** The positionging offset value that defined in the krx file*/,
                int placementOriginIndex /** The positioning placement origin index that defined in the krx file*/
            );
            /** Update positioning offset
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdatePositioningOffset
            (
                const NXString & positionOffSet /** The positionging offset value that defined in the krx file*/
            );
            /** Update positioning offset
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void UpdatePositioningOffset
            (
                const char * positionOffSet /** The positionging offset value that defined in the krx file*/
            );
            /** Sets the update component name for a reusable component
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUpdateComponentName
            (
                bool updateComponentName /** Whehter the component name will be updated or not for copied part*/
            );
            /** Updates parameters by configuration
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void UpdateParametersByConfiguration
            (
            );
            /** Create positioning feature on the given position
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePositioningFeatureByPoint
            (
                NXOpen::NXObject * selobj /** The selected object is FACE type, the reusable component place on the face */,
                const NXOpen::Point3d & inputPosition /** The input position*/,
                bool centerFace /** whether to use face center as location*/
            );

            /// \cond NX_NO_DOC 
            /** Delete reusable component identity
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteReusableCompIdentity
            (
                NXOpen::Assemblies::Component * partOcc /** partocc */ 
            );

            /// \endcond 
            /** Affirm insertion of the reusable component, and return the array of @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  tag in the display part.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Assemblies::Component *> AffirmReusableComponents
            (
            );

            /// \cond NX_NO_DOC 
            /** Update UDO information when replacing a PFM with another PFM in native environment
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateTemplateInfo
            (
                NXOpen::Part * replacementPartTag /** The replacement part tag */,
                NXOpen::Assemblies::Component * replacedPartOcc /** The replaced part occ */
            );

            /// \endcond 
            /** Sets wave link geometry of structure member as the parents if it is structure mountingfeet.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWaveLink
            (
            );
            /** Sets reuse component name by rule if it is structure mountingfeet.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void RenamePart
            (
                const NXString & partName /**The reuse component name */
            );
            /** Sets reuse component name by rule if it is structure mountingfeet.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void RenamePart
            (
                const char * partName /**The reuse component name */
            );
            /** Sets isStructureDesigner flag if it is structure designer part.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStructureDesignerPart
            (
                bool isStructureDesigner /**The flag of Structure Designer */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
