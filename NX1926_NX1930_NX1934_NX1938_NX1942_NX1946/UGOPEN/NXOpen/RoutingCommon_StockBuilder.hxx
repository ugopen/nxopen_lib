#ifndef NXOpen_ROUTINGCOMMON_STOCKBUILDER_HXX_INCLUDED
#define NXOpen_ROUTINGCOMMON_STOCKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RoutingCommon_StockBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_RouteObjectCollector.hxx>
#include <NXOpen/Routing_StockBlockBuilder.hxx>
#include <NXOpen/libnxopencpp_routingcommon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace RoutingCommon
    {
        class StockBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    namespace PDM
    {
        class LogicalObject;
    }
    namespace Routing
    {
        class RouteObjectCollector;
    }
    namespace Routing
    {
        class StockBlockBuilder;
    }
    namespace RoutingCommon
    {
        class _StockBuilderBuilder;
        class StockBuilderImpl;
        /** Builder for creating/editing stocks.
                Create Stock: Takes a set of segments and assign the selected the stock
                to the segments. The stock style and orientation settings are optional.
                Edit Stock: Takes in the selected stock to edit as input and redefines
                the stock with the new settings.
             <br> To create a new instance of this class, use @link NXOpen::RoutingCommon::BuilderFactory::CreateStockBuilder  NXOpen::RoutingCommon::BuilderFactory::CreateStockBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        OrientationAngle.Value </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGCOMMONEXPORT  StockBuilder : public NXOpen::Builder
        {
            private: StockBuilderImpl * m_stockbuilder_impl;
            private: friend class  _StockBuilderBuilder;
            protected: StockBuilder();
            public: ~StockBuilder();
            /**Returns  the routing object collector that collects segments to assign stock to. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::RouteObjectCollector * SegmentCollector
            (
            );
            /**Returns  the path stock settings required to assign stock 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockBlockBuilder * StockSettings
            (
            );
            /**Returns   
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString StockAnchor
            (
            );
            /**Sets   
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockAnchor
            (
                const NXString & anchorName /** anchorname */ 
            );
            /**Sets   
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetStockAnchor
            (
                const char * anchorName /** anchorname */ 
            );
            /**Returns  the angle. Determines the rotation angle of the stock. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * OrientationAngle
            (
            );
            /**Returns  the orientation vector. cross section direction of the stock. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Direction * CrossSectionDirection
            (
            );
            /**Sets  the orientation vector. cross section direction of the stock. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCrossSectionDirection
            (
                NXOpen::Direction * orientationVector /** orientationvector */ 
            );
            /**Returns  the mirror cross section value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool MirrorCrossSection
            (
            );
            /**Sets  the mirror cross section value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMirrorCrossSection
            (
                bool flag /** flag */ 
            );
            /** Performs the operations needed prior to a commit. This method has to be called before invoking commit. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void PreCommit
            (
            );
            /** Returns the @link PDM::LogicalObject PDM::LogicalObject@endlink s that represent content that will be created by this builder. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetLogicalObjects
            (
                std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
