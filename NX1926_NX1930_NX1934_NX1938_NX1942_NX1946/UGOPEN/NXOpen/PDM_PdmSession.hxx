#ifndef NXOpen_PDM_PDMSESSION_HXX_INCLUDED
#define NXOpen_PDM_PDMSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PdmSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AttributePropertiesBuilder.hxx>
#include <NXOpen/PDM_CAEFileContainer.hxx>
#include <NXOpen/PDM_DatabaseObjectManager.hxx>
#include <NXOpen/PDM_ExportWorksetForReferenceBuilder.hxx>
#include <NXOpen/PDM_ExternalFileReferenceListBuilder.hxx>
#include <NXOpen/PDM_FileManagement.hxx>
#include <NXOpen/PDM_ObjectCreateBuilder.hxx>
#include <NXOpen/PDM_PartOperationAttributePropertiesBuilder.hxx>
#include <NXOpen/PDM_PartOperationBuilder.hxx>
#include <NXOpen/PDM_PartOperationCopyBuilder.hxx>
#include <NXOpen/PDM_PartOperationCreateBuilder.hxx>
#include <NXOpen/PDM_PartOperationImportBuilder.hxx>
#include <NXOpen/PDM_PartOperationMakeUniqueBuilder.hxx>
#include <NXOpen/PDM_SmartSaveBuilder.hxx>
#include <NXOpen/PDM_SmartSaveContext.hxx>
#include <NXOpen/PDM_SoaConnectionHandle.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class PdmSession;
    }
    class Session;
    class AttributePropertiesBuilder;
    class BasePart;
    class NXObject;
    namespace PDM
    {
        class AttributeGroupDescriptionCollection;
    }
    namespace PDM
    {
        class CAEFileContainer;
    }
    namespace PDM
    {
        class DatabaseObjectManager;
    }
    namespace PDM
    {
        class ExportFromTeamcenter;
    }
    namespace PDM
    {
        class ExportWorksetForReferenceBuilder;
    }
    namespace PDM
    {
        class ExternalFileReferenceListBuilder;
    }
    namespace PDM
    {
        class FileManagement;
    }
    namespace PDM
    {
        class ObjectCreateBuilder;
    }
    namespace PDM
    {
        class PartNameGenerator;
    }
    namespace PDM
    {
        class PartOperationAttributePropertiesBuilder;
    }
    namespace PDM
    {
        class PartOperationBuilder;
    }
    namespace PDM
    {
        class PartOperationCopyBuilder;
    }
    namespace PDM
    {
        class PartOperationCreateBuilder;
    }
    namespace PDM
    {
        class PartOperationImportBuilder;
    }
    namespace PDM
    {
        class PartOperationImportObserver;
    }
    namespace PDM
    {
        class PartOperationMakeUniqueBuilder;
    }
    namespace PDM
    {
        class SaveAsReviseObserver;
    }
    namespace PDM
    {
        namespace SaveManagement
        {
            class SaveObserver;
        }
    }
    namespace PDM
    {
        class SmartSaveBuilder;
    }
    namespace PDM
    {
        class SmartSaveContext;
    }
    namespace PDM
    {
        class SoaConnectionHandle;
    }
    namespace PDM
    {
        class TcinUtils;
    }
    class TaggedObject;
    namespace PDM
    {
        class PdmSessionImpl;
        /** Represents the NX Manager session  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  PdmSession
        {
            private: PdmSessionImpl * m_pdmsession_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PdmSession(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PdmSession();
            /**  Returns the connect string and discriminator used by NX session to connect to the Tcserver.
                         The client applications can use these settings to connect to the same Tcserver that NX
                         is using.
                         
                         Tcserver connect string: The connect string is path of the server hosting the services.
                         The connect string for the different transport protocols will be in the following form:
                         4-Tier(HTTP mode): similar to http:
                         2-Tier(IIOP mode): The Tcserver IOR string 
                         
                         Discriminator: The discriminator is a unique identifier and contains unique information related 
                         to a given TC server. This unique identifier (discriminator) is recognized by TC pool manager as
                         the session number that ties the server process to the client. The discriminator functionality 
                         is part of the SOA package. The discriminator allows multiple clients to connect to the same TC server.
                         In 2-Tier(IIOP mode), the discriminator will be an empty string.

                         To connect to the same Tcserver as NX, the client can create a Teamcenter::Soa::Client::Connection 
                         object using the connect string and then use the Teamcenter::Services::Core::SessionService to login
                         to Teamcenter Server with the discriminator and the connection object. More information about
                         connecting to the Teamcenter server can be found in the TC SOA API Documentation.

                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void GetTcserverSettings
            (
                NXString* connectString /** the connection string */,
                NXString* discriminator /** the discriminator */
            );
            /**  Returns the SSO credentials, if SSO is available 
                         The client applications can use these settings to connect to the same Tcserver that NX
                         is using.
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSsoSettings
            (
                bool* isSsoEnabled /** if SSO is enabled */,
                NXString* ssoServerUrl /** the SSO server URL */,
                NXString* ssoAppID /** the SSO app id */
            );
            /** Sets default folder.
                    The input default folder path in format &lt;username&gt;:&lt;folder&gt;:&lt;folder&gt;, where username is optional.
                    In that case, in :&lt;folder&gt;:&lt;folder&gt;, the first : indicates Home, for example, :Newstuff, is the Newstuff folder in current user's Home container
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultFolder
            (
                const NXString & defaultFolderSpec /** Default folder path including default folder name to be set */
            );
            /** Sets default folder.
                    The input default folder path in format &lt;username&gt;:&lt;folder&gt;:&lt;folder&gt;, where username is optional.
                    In that case, in :&lt;folder&gt;:&lt;folder&gt;, the first : indicates Home, for example, :Newstuff, is the Newstuff folder in current user's Home container
                    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetDefaultFolder
            (
                const char * defaultFolderSpec /** Default folder path including default folder name to be set */
            );
            /** Returns a new @link NXOpen::PDM::FileManagement NXOpen::PDM::FileManagement@endlink  object 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::FileManagement * NewFileManagement
            (
            );
            /** Returns a new @link NXOpen::PDM::CAEFileContainer NXOpen::PDM::CAEFileContainer@endlink  object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::CAEFileContainer * NewCaeFileContainer
            (
            );
            /**Returns a new @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  object
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationCopyBuilder * CreateCopyOperationBuilder
            (
                NXOpen::PDM::PartOperationBuilder::OperationType operation /** operation */ 
            );
            /**Returns a new @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink  object
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationCreateBuilder * CreateCreateOperationBuilder
            (
                NXOpen::PDM::PartOperationBuilder::OperationType operation /** operation */ 
            );
            /**Returns a new @link NXOpen::PDM::PartOperationBuilder NXOpen::PDM::PartOperationBuilder@endlink  object
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::PDM::PdmSession::CreateCopyOperationBuilder NXOpen::PDM::PdmSession::CreateCopyOperationBuilder@endlink  instead <br>  

             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::PDM::PdmSession::CreateCopyOperationBuilder instead") NXOpen::PDM::PartOperationBuilder * CreateOperationBuilder
            (
                NXOpen::PDM::PartOperationBuilder::OperationType operation /** operation */ 
            );
            /**Returns a new @link NXOpen::PDM::ObjectCreateBuilder NXOpen::PDM::ObjectCreateBuilder@endlink  object
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::ObjectCreateBuilder * CreateObjectCreateBuilder
            (
                std::vector<NXString> & tcTypes /** tctypes */ ,
                std::vector<NXString> & baseTCTypes /** basetctypes */ 
            );
            /**Returns a new @link NXOpen::PDM::PartOperationMakeUniqueBuilder NXOpen::PDM::PartOperationMakeUniqueBuilder@endlink  object
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::PDM::PartOperationMakeUniqueBuilder * CreateMakeUniqueOperationBuilder
            (
                NXOpen::BasePart * part /** part */ 
            );
            /**Returns a new @link NXOpen::PDM::PartOperationImportBuilder NXOpen::PDM::PartOperationImportBuilder@endlink  object
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationImportBuilder * CreateImportOperationBuilder
            (
            );
            /** Creates a new @link NXOpen::PDM::PartOperationAttributePropertiesBuilder NXOpen::PDM::PartOperationAttributePropertiesBuilder@endlink  object. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::PDM::PartOperationAttributePropertiesBuilder * CreatePartOperationAttributePropertiesBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** the array of objects */
            );
            /** Creates a new @link AttributePropertiesBuilder AttributePropertiesBuilder@endlink  object. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::AttributePropertiesBuilder * CreatePartOperationValidationPropertiesBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** the array of objects */
            );
            /** Exposes the SOA Connection object that NX uses when running in Teamcenter Integration mode.
                        Returns a @link NXOpen::PDM::SoaConnectionHandle NXOpen::PDM::SoaConnectionHandle@endlink  pointer. The application must obtain the handle
                        from the pointer and reinterpret_cast it to Teamcenter::Soa::Client::Connection* pointer before use.  @return  The SOA Connection Handle 
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::SoaConnectionHandle * GetSoaConnectionHandle
            (
            );
            /** Gets the @link NXOpen::PDM::DatabaseObjectManager NXOpen::PDM::DatabaseObjectManager@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::DatabaseObjectManager * GetDatabaseObjectManager
            (
            );
            /** Creates a new @link SmartSaveBuilder SmartSaveBuilder@endlink  object. 
             <br>  @deprecated Deprecated in NX11.0.1.  Use @link NXOpen::PDM::PdmSession::CreateSmartSaveBuilderWithContext NXOpen::PDM::PdmSession::CreateSmartSaveBuilderWithContext@endlink  instead <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX11.0.1.  Use NXOpen::PDM::PdmSession::CreateSmartSaveBuilderWithContext instead") NXOpen::PDM::SmartSaveBuilder * CreateSmartSaveBuilder
            (
                NXOpen::PDM::SmartSaveBuilder::SaveType saveType /** savetype */ 
            );
            /** Creates a new @link SmartSaveContext SmartSaveContext@endlink  object. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::SmartSaveContext * CreateSmartSaveContext
            (
                NXOpen::PDM::SmartSaveBuilder::SaveType saveType /** savetype */ 
            );
            /** Creates a new @link SmartSaveBuilder SmartSaveBuilder@endlink  object. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::SmartSaveBuilder * CreateSmartSaveBuilderWithContext
            (
                NXOpen::PDM::SmartSaveContext * smartSaveContext /** smartsavecontext */ 
            );
            /** Creates a new @link NXOpen::PDM::ExportWorksetForReferenceBuilder NXOpen::PDM::ExportWorksetForReferenceBuilder@endlink  object used for
                        exporting workset outside Teamcenter for reference. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::PDM::ExportWorksetForReferenceBuilder * CreateExportWorksetForReferenceBuilder
            (
                NXOpen::BasePart * workset /** workset assembly to export */
            );
            /** Sets active Engineering Change Notice (ECN) for the session.
                        All objects created will be added to solution items of this Engineering Change Notice.
                        The input will be in the format of Change Notice MFK ID and Change Notice Revision ID.
                        Note: Please make sure to set it at the start of the NXOpen program, before object creation.
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetActiveEngineeringChangeNotice
            (
                NXOpen::NXObject * part /** tag of the displayed part, can be null */,
                const NXString & ecnMFKId /** Change Notice MFKID to be set, can not be empty */,
                const NXString & ecnRevsionId /** Change Notice Revision ID to be set, can not be empty */
            );
            /** Sets active Engineering Change Notice (ECN) for the session.
                        All objects created will be added to solution items of this Engineering Change Notice.
                        The input will be in the format of Change Notice MFK ID and Change Notice Revision ID.
                        Note: Please make sure to set it at the start of the NXOpen program, before object creation.
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            void SetActiveEngineeringChangeNotice
            (
                NXOpen::NXObject * part /** tag of the displayed part, can be null */,
                const char * ecnMFKId /** Change Notice MFKID to be set, can not be empty */,
                const char * ecnRevsionId /** Change Notice Revision ID to be set, can not be empty */
            );
            /** Sets or unsets native mode for the session based on the value of input.
                    
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetNativeMode
            (
                bool enable /** flag to specify whether to set or unset native mode */,
                bool rereadTemplateInformation /** flag to specify whether to re-initialize managed templates */
            );
            /** Creates a new @link NXOpen::PDM::ExternalFileReferenceListBuilder NXOpen::PDM::ExternalFileReferenceListBuilder@endlink  object. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::PDM::ExternalFileReferenceListBuilder * CreateExternalFileReferenceListBuilder
            (
                const std::vector<NXOpen::NXObject *> & objects /** the array of objects */
            );
            /**
                       Returns the checkedout status (checkedout/non checkedout) of all the objects open in NX.
                    
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void GetCheckedoutStatusOfAllObjectsInSession
            (
                std::vector<NXOpen::NXObject *> & checkedOutObjects /** Array of NXObjects which are open in session and checked out */,
                std::vector<NXOpen::NXObject *> & uncheckedOutObjects /** Array of NXObjects which are open in session but not checkout */
            );
            /** Create folder in Teamcenter with newFolderName under parentFolderName.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateFolder
            (
                const NXString & newFolderName /** Name of new folder to be created */,
                const NXString & parentFolderName /** Name of parent folder specified in form "user:[folder1:][folderN:]", if empty API will try to use default or root folder as parent */
            );
            /** Create folder in Teamcenter with newFolderName under parentFolderName.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void CreateFolder
            (
                const char * newFolderName /** Name of new folder to be created */,
                const char * parentFolderName /** Name of parent folder specified in form "user:[folder1:][folderN:]", if empty API will try to use default or root folder as parent */
            );
            /** Returns array of all available Teamcenter Item Types
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetItemTypes
            (
            );
            /** Gets the Teamcenter user name for the current user
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetUserName
            (
            );
            /** Gets the Teamcenter user group for the current user
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetUserGroup
            (
            );
            /** Gets the Teamcenter role for the current user
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetUserRole
            (
            );
            /**Returns a new @link NXOpen::PDM::ExportFromTeamcenter NXOpen::PDM::ExportFromTeamcenter@endlink  object
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::ExportFromTeamcenter * ExportFromTeamcenterCreate
            (
                NXOpen::TaggedObject * part /** part */ 
            );


            /** Returns a collection of @link NXOpen::PDM::AttributeGroupDescription NXOpen::PDM::AttributeGroupDescription@endlink  objects representing
                        attribute group types.  The collection contains attribute group descriptions for
                        @link NXOpen::PDM::IAttributeGroupOwner NXOpen::PDM::IAttributeGroupOwner@endlink  objects loaded within the NX session.
                        Use the @link NXOpen::PDM::IAttributeGroupOwner::GetAttributeGroupDescriptions NXOpen::PDM::IAttributeGroupOwner::GetAttributeGroupDescriptions@endlink 
                        to get the specific attribute group descriptions for an attribute group owner.  
             <br>  Created in NX9.0.0.  <br>  
            */
            public: NXOpen::PDM::AttributeGroupDescriptionCollection *AttributeGroupDescriptions();
            /** Returns the @link NXOpen::PDM::PartOperationImportObserver NXOpen::PDM::PartOperationImportObserver@endlink  belonging to this session 
             <br>  Created in NX10.0.0.  <br>  
            */
            public: NXOpen::PDM::PartOperationImportObserver *PartOperationImportObserver();
            /** Returns the @link NXOpen::PDM::SaveManagement::SaveObserver NXOpen::PDM::SaveManagement::SaveObserver@endlink  belonging to this session 
             <br>  Created in NX12.0.1.  <br>  
            */
            public: NXOpen::PDM::SaveManagement::SaveObserver *SaveObserver();
            /** Returns the @link NXOpen::PDM::SaveAsReviseObserver NXOpen::PDM::SaveAsReviseObserver@endlink  belonging to this session 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: NXOpen::PDM::SaveAsReviseObserver *SaveAsReviseObserver();
            /** Returns the @link NXOpen::PDM::TcinUtils NXOpen::PDM::TcinUtils@endlink  instance belonging to this session 
             <br>  Created in NX11.0.1.  <br>  
            */
            public: NXOpen::PDM::TcinUtils *TcinUtils();
            /** Returns the @link NXOpen::PDM::PartNameGenerator NXOpen::PDM::PartNameGenerator@endlink  instance belonging to this session 
             <br>  Created in NX1899.0.0.  <br>  
            */
            public: NXOpen::PDM::PartNameGenerator *PartNameGenerator();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
