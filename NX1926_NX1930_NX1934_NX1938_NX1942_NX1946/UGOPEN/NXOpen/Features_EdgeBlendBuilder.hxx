#ifndef NXOpen_FEATURES_EDGEBLENDBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EDGEBLENDBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_EdgeBlendBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_BlendLimitsData.hxx>
#include <NXOpen/GeometricUtilities_BlendStopshortBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class EdgeBlendBuilder;
    }
    class Edge;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class BlendLimitsData;
    }
    namespace GeometricUtilities
    {
        class BlendStopshortBuilder;
    }
    class Point;
    class ScCollector;
    namespace Features
    {
        class _EdgeBlendBuilderBuilder;
        class EdgeBlendBuilderImpl;
        /** Represents a Edge Blend builder.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateEdgeBlendBuilder  NXOpen::Features::FeatureCollection::CreateEdgeBlendBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        TrimmingOption </term> <description> 
         
        False </description> </item> 

        </list> 

         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  EdgeBlendBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** This enum represents the Overlap resolution options for Edge Blend */
            public: enum Overlap
            {
                OverlapMaintainAndIntersect/** Maintain Blend and Intersect */,
                OverlapDifferentConvexityRollOver/** If different convexity,roll over */,
                OverlapAnyConvexityRollOver/** Any convexity,roll over */
            };

            /** This enum represents the order of Blending */
            public: enum OrderOfBlending
            {
                OrderOfBlendingConvexFirst/** Convex first */,
                OrderOfBlendingConcaveFirst/** Concave first */
            };

            /** This enum represents the Setback option  */
            public: enum Setback
            {
                SetbackIncludeWithCorner/** Include with corner*/,
                SetbackSeparateFromCorner/** Separate from corner */
            };

            /** This enum represents the Section option */
            public: enum Section
            {
                SectionCircular/** Default option, circular shaped blends */,
                SectionConic/** Conical shaped blends */
            };

            /** This enum represents the Conic option */
            public: enum Conic
            {
                ConicBoundaryPlusCenter/** boundary plus center */ ,
                ConicBoundaryPlusRho/** boundary plus rho */ ,
                ConicCenterPlusRho/** center plus rho */ 
            };

            /** This enum represents the rho type for conic section blend */
            public: enum Rhotype
            {
                RhotypeRelative/** relative */ ,
                RhotypeAbsolute/** absolute */ 
            };

            /** The Blend Face Continuity */
            public: enum FaceContinuity
            {
                FaceContinuityTangent/** tangent */ ,
                FaceContinuityCurvature/** curvature */ 
            };

            private: EdgeBlendBuilderImpl * m_edgeblendbuilder_impl;
            private: friend class  _EdgeBlendBuilderBuilder;
            protected: EdgeBlendBuilder();
            public: ~EdgeBlendBuilder();
            /**Returns  the tolerance of a variable blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance of a variable blend
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the blend all instances option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool AllInstancesOption
            (
            );
            /**Sets  the blend all instances option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAllInstancesOption
            (
                bool optionValue /** option value */ 
            );
            /**Returns  the Remove self-intersection option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool RemoveSelfIntersection
            (
            );
            /**Sets  the Remove self-intersection option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRemoveSelfIntersection
            (
                bool optionValue /** option value */ 
            );
            /**Returns  the Patch Areas option
                
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool PatchComplexGeometryAreas
            (
            );
            /**Sets  the Patch Areas option
                
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetPatchComplexGeometryAreas
            (
                bool optionValue /** option value */ 
            );
            /**Returns  the Limit Failing Areas option
                
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool LimitFailingAreas
            (
            );
            /**Sets  the Limit Failing Areas option
                
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLimitFailingAreas
            (
                bool optionValue /** option value */ 
            );
            /**Returns  the Roll over smooth edges option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool RollOverSmoothEdge
            (
            );
            /**Sets  the Roll over smooth edges option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRollOverSmoothEdge
            (
                bool optionValue /** option value */ 
            );
            /**Returns  the Roll onto edges option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool RollOntoEdge
            (
            );
            /**Sets  the Roll onto edges option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRollOntoEdge
            (
                bool optionValue /** option value */ 
            );
            /**Returns  the Maintain blend and move sharp edges option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool MoveSharpEdge
            (
            );
            /**Sets  the Maintain blend and move sharp edges option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetMoveSharpEdge
            (
                bool optionValue /** option value */ 
            );
            /**Returns  the Special blend at convex / concave Y option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConvexConcaveY
            (
            );
            /**Sets  the Special blend at convex / concave Y option
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetConvexConcaveY
            (
                bool optionValue /** option value */ 
            );
            /** Add an edge blend chainset to the edge blend  @return  Index of chainset, indicating which chainset we are dealing with 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddChainset
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */,
                const NXString & radius /** The radius of this chain set collector*/
            );
            /** Add an edge blend chainset to the edge blend  @return  Index of chainset, indicating which chainset we are dealing with 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            int AddChainset
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */,
                const char * radius /** The radius of this chain set collector*/
            );
            /** Add an edge blend chainset to the edge blend  @return  Index of chainset, indicating which chainset we are dealing with 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddChainset
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */,
                NXOpen::Features::EdgeBlendBuilder::Section sectionType /** Shape specifier for this chainset */,
                NXOpen::Features::EdgeBlendBuilder::Conic conicMethod /** Shape subtype specifier for this chainset */,
                NXOpen::Features::EdgeBlendBuilder::Rhotype rhoType /** rho type for this chain set */,
                const NXString & radius /** The radius of this chain set collector*/,
                const NXString & center /** The conic center value of this chain set collector if type is Conic */,
                const NXString & rho /** The conic rho value of this chain set collector if type is Conic */
            );
            /** Add an edge blend chainset to the edge blend  @return  Index of chainset, indicating which chainset we are dealing with 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            int AddChainset
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */,
                NXOpen::Features::EdgeBlendBuilder::Section sectionType /** Shape specifier for this chainset */,
                NXOpen::Features::EdgeBlendBuilder::Conic conicMethod /** Shape subtype specifier for this chainset */,
                NXOpen::Features::EdgeBlendBuilder::Rhotype rhoType /** rho type for this chain set */,
                const char * radius /** The radius of this chain set collector*/,
                const char * center /** The conic center value of this chain set collector if type is Conic */,
                const char * rho /** The conic rho value of this chain set collector if type is Conic */
            );
            /** Get the index of edge blend chainset given the collector @return  Index of chainset, indicating which chainset we are dealing with 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: int GetChainsetIndex
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */
            );
            /** Get the number of valid chainsets @return  Number of valid chainsets 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: int GetNumberOfValidChainsets
            (
            );
            /** Get collector and radius for an edge blend chainset given the index of the chainset 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void GetChainset
            (
                int csIndex /** Index of chainset, indicating which chainset we are dealing with */,
                NXOpen::ScCollector ** collector /**The collector for this edge blend chainset */,
                NXOpen::Expression ** radius /**  The radius of this chain set collector */
            );
            /** Get collector, radius and section types for an edge blend chainset given the index of the chainset 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: void GetChainsetAndSectionValue
            (
                int csIndex /** Index of chainset */,
                NXOpen::ScCollector ** collector /** The collector for this edge blend chainset */,
                NXOpen::Features::EdgeBlendBuilder::Section* sectionType /** The section type of this chain set collector */,
                NXOpen::Features::EdgeBlendBuilder::Conic* conicMethod /** The conic method of this chain set collector */,
                NXOpen::Features::EdgeBlendBuilder::Rhotype* rhoType /** The rho type of this chain set collector */,
                NXOpen::Expression ** radius /** The radius of this chain set collector */,
                NXOpen::Expression ** centerValueTAG /** The conic center value expression of this chain set collector */,
                NXOpen::Expression ** rhoValueTAG /** The conic rho value expression of this chain set collector */
            );
            /** Get collector, radius and validity status for an edge blend chainset given the index of the chainset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void GetChainsetAndStatus
            (
                int csIndex /** Index of chainset */,
                NXOpen::ScCollector ** collector /** The collector for this edge blend chainset */,
                NXOpen::Expression ** radius /** The radius of this chain set collector */,
                bool* isValid /** Is the chainset alive/valid ? */
            );
            /** Delete an edge blend chainset from the edge blend. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveChainset
            (
                int csIndex /** Index of chainset, indicating which chainset we are dealing with */
            );
            /** Delete an edge blend chainset from the edge blend. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveChainsetByCollector
            (
                NXOpen::ScCollector * collector /**The collector for this edge blend chainset */
            );
            /** Get an edge blend setback data for the index provided   @return  Array of Edge collector tags that are used by the setback 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Edge *> GetSetbackData
            (
                int sbIndex /** Index of where setback data item was created. */,
                std::vector<bool> & fromStart /** if true, then the setback is defined at the start
                                           vertex.  Otherwise, it is defined at the end vertex.
                                           There is one for each output edge. */,
                std::vector<NXOpen::Expression *> & distanceExp /**  The distance for the setback on each edge. */
            );
            /** Add an edge blend setback data for an edge in the edge blend  @return  Index of where setback data item is created. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddSetbackData
            (
                const std::vector<NXOpen::Edge *> & edgeArray /** Array of Edge collector tags that are used by the setback */,
                const std::vector<bool> & fromStart /** if true, then the setback is defined at the start
                                           vertex.  Otherwise, it is defined at the end vertex.
                                           There is one for each input edge. */,
                const std::vector<NXString> & distance /**  Array of distances */
            );
            /** Remove an edge blend setback data for an edge in the edge blend 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveSetbackData
            (
                int sbIndex /** Index of where setback data item was created*/
            );
            /** Get an edge blend stop short data for the index provided   @return  the Stopshort Data 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BlendStopshortBuilder * GetNewStopshortData
            (
                int ssIndex /** Index of where stop short data item is created */
            );
            /** Get an edge blend stop short data for the index provided   @return   The distance for the stopshort on the edge. 
             <br>  @deprecated Deprecated in NX5.0.0.  Use @link Features::EdgeBlendBuilder::GetNewStopshortData Features::EdgeBlendBuilder::GetNewStopshortData@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX5.0.0.  Use Features::EdgeBlendBuilder::GetNewStopshortData instead.") NXOpen::Expression * GetStopshortData
            (
                int ssIndex /** Index of where stop short data item is created. */,
                NXOpen::Edge ** edge /** Edge the stop short data is on. */,
                bool* fromStart /** if true, then the stopshort is defined at the start
                                                     vertex.  Otherwise, it is defined at the end vertex. */
            );
            /** Add an edge blend stop short data for an edge in the edge blend   @return  Index of where stop short data item is created. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddNewStopshortData
            (
                NXOpen::GeometricUtilities::BlendStopshortBuilder * builder /** the Stopshort Data */
            );
            /** Add an edge blend stop short data for an edge in the edge blend   @return  Index of where stop short data item is created. 
             <br>  @deprecated Deprecated in NX5.0.0.  Use @link Features::EdgeBlendBuilder::AddNewStopshortData Features::EdgeBlendBuilder::AddNewStopshortData@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX5.0.0.  Use Features::EdgeBlendBuilder::AddNewStopshortData instead.") int AddStopshortData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                bool fromStart /** if true, then the stopshort is defined at the start
                                                     vertex.  Otherwise, it is defined at the end vertex. */,
                const NXString & distance /**  The distance for the stopshort on the edge. */
            );
            /** Add an edge blend stop short data for an edge in the edge blend   @return  Index of where stop short data item is created. 
             <br>  @deprecated Deprecated in NX5.0.0.  Use @link Features::EdgeBlendBuilder::AddNewStopshortData Features::EdgeBlendBuilder::AddNewStopshortData@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            int AddStopshortData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                bool fromStart /** if true, then the stopshort is defined at the start
                                                     vertex.  Otherwise, it is defined at the end vertex. */,
                const char * distance /**  The distance for the stopshort on the edge. */
            );
            /** Remove an edge blend stop short data for an edge   
             <br>  @deprecated Deprecated in NX5.0.0.  Use @link Features::EdgeBlendBuilder::RemoveNewStopshortData Features::EdgeBlendBuilder::RemoveNewStopshortData@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX5.0.0.  Use Features::EdgeBlendBuilder::RemoveNewStopshortData instead.") void RemoveStopshortData
            (
                NXOpen::Edge * edge /** Edge to remove the stopshort on*/,
                bool fromStart /** if true, then the stopshort is defined at the start
                                                    vertex.  Otherwise, it is defined at the end vertex. */
            );
            /** Remove the stop short from an edge, given its type and location 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveStopshortDataByType
            (
                NXOpen::Edge * edge /** Edge to remove the stopshort on*/,
                bool fromStart /** if true, then the stopshort is defined at the start
                                                              vertex.  Otherwise, it is defined at the end vertex. */,
                NXOpen::GeometricUtilities::BlendStopshortBuilder::Choices type /** the type of the stopshort */
            );
            /** Remove an edge blend stop short corresponding to a BlendStopshortBuilder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveNewStopshortData
            (
                NXOpen::GeometricUtilities::BlendStopshortBuilder * builder /** the Stopshort Data */
            );
            /** Remove an edge blend stop short data for the index indicated  
             <br>  @deprecated Deprecated in NX5.0.0.  Use @link Features::EdgeBlendBuilder::RemoveNewStopshortData Features::EdgeBlendBuilder::RemoveNewStopshortData@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX5.0.0.  Use Features::EdgeBlendBuilder::RemoveNewStopshortData instead.") void RemoveStopshortData
            (
                int ssIndex /** Index of where stop short data item is created. */
            );
            /** Get all the variable radii data for an edge in the edge blend  @return  Parameter locations of points on the edge 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link Features::EdgeBlendBuilder::GetVariableRadiusDataNew Features::EdgeBlendBuilder::GetVariableRadiusDataNew@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX6.0.0.  Use Features::EdgeBlendBuilder::GetVariableRadiusDataNew instead.") std::vector<double> GetVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to get all the varible radius data on*/,
                std::vector<NXOpen::Expression *> & radiiExp /** The radius value of each point on the edge */,
                std::vector<NXOpen::Point *> & smartPoints /** Array of smart points defining variable radius */,
                std::vector<bool> & isExternalFlagArray /** Corresponding is_external flags of the variable radius points*/
            );
            /** Get all the variable radii data for an edge in the edge blend 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void GetVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to get all the varible radius data on*/,
                std::vector<NXOpen::Expression *> & parameterExp /** Parameter value of points on the edge */,
                std::vector<NXOpen::Expression *> & radiiExp /** The radius value of each point on the edge */,
                std::vector<NXOpen::Point *> & smartPoints /** Array of smart points defining variable radius */,
                std::vector<bool> & isExternalFlagArray /** Corresponding is_external flags of the variable radius points*/
            );
            /** Add an edge blend variable radius data for an edge in the edge blend  @return  Index of where variable radius data item is created
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link Features::EdgeBlendBuilder::AddVariableRadiusDataNew Features::EdgeBlendBuilder::AddVariableRadiusDataNew@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX6.0.0.  Use Features::EdgeBlendBuilder::AddVariableRadiusDataNew instead.") int AddVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                double parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Add an edge blend variable radius data for an edge in the edge blend  @return  Index of where variable radius data item is created
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link Features::EdgeBlendBuilder::AddVariableRadiusDataNew Features::EdgeBlendBuilder::AddVariableRadiusDataNew@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            int AddVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                double parameter /** Parameter location of point on the edge */,
                const char * radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Add an edge blend variable radius data for an edge in the edge blend 
                  * Note: This ja will always create arclength parameter  @return  Index of where variable radius data item is created
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                const NXString & parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Add an edge blend variable radius data for an edge in the edge blend 
                  * Note: This ja will always create arclength parameter  @return  Index of where variable radius data item is created
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            int AddVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                const char * parameter /** Parameter location of point on the edge */,
                const char * radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Add an edge blend variable radius data for an edge in the edge blend  @return  Index of where variable radius data item is created
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                const NXString & parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */,
                bool isArclength /** Flag indicating whether parameter is arclength or not */
            );
            /** Add an edge blend variable radius data for an edge in the edge blend  @return  Index of where variable radius data item is created
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            int AddVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                const char * parameter /** Parameter location of point on the edge */,
                const char * radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */,
                bool isArclength /** Flag indicating whether parameter is arclength or not */
            );
            /** Add an edge blend variable radius data for an edge in the edge blend  @return  Index of where variable radius data item is created
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int AddVariablePointData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                const NXString & parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge. */,
                const NXString & centerValue /**  The conic center value at this point on the edge. */,
                const NXString & rhoValue /**  The conic rho value at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */,
                bool isArclength /** Flag indicating whether parameter is arclength or not */
            );
            /** Add an edge blend variable radius data for an edge in the edge blend  @return  Index of where variable radius data item is created
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            int AddVariablePointData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                const char * parameter /** Parameter location of point on the edge */,
                const char * radius /**  The radius at this point on the edge. */,
                const char * centerValue /**  The conic center value at this point on the edge. */,
                const char * rhoValue /**  The conic rho value at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */,
                bool isArclength /** Flag indicating whether parameter is arclength or not */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link Features::EdgeBlendBuilder::EditVariableRadiusDataNew Features::EdgeBlendBuilder::EditVariableRadiusDataNew@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NX_DEPRECATED("Deprecated in NX6.0.0.  Use Features::EdgeBlendBuilder::EditVariableRadiusDataNew instead.") void EditVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vrIndex /** Index of what variable radius data item to edit*/,
                double parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend 
             <br>  @deprecated Deprecated in NX6.0.0.  Use @link Features::EdgeBlendBuilder::EditVariableRadiusDataNew Features::EdgeBlendBuilder::EditVariableRadiusDataNew@endlink  instead. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void EditVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vrIndex /** Index of what variable radius data item to edit*/,
                double parameter /** Parameter location of point on the edge */,
                const char * radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void EditVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vrIndex /** Index of what variable radius data item to edit*/,
                const NXString & parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void EditVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vrIndex /** Index of what variable radius data item to edit*/,
                const char * parameter /** Parameter location of point on the edge */,
                const char * radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void EditVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vrIndex /** Index of what variable radius data item to edit*/,
                const NXString & parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */,
                bool isArclength /** Flag indicating whether the parameter is arclength or not */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void EditVariableRadiusDataNew
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vrIndex /** Index of what variable radius data item to edit*/,
                const char * parameter /** Parameter location of point on the edge */,
                const char * radius /**  The radius at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */,
                bool isArclength /** Flag indicating whether the parameter is arclength or not */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void EditVariablePointData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vrIndex /** Index of what variable radius data item to edit*/,
                const NXString & parameter /** Parameter location of point on the edge */,
                const NXString & radius /**  The radius at this point on the edge. */,
                const NXString & centerValue /**  The conic center value at this point on the edge. */,
                const NXString & rhoValue /**  The conic center value at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */,
                bool isArclength /** Flag indicating whether the parameter is arclength or not */
            );
            /** Edit an edge blend variable radius data for an edge in the edge blend 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void EditVariablePointData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                int vrIndex /** Index of what variable radius data item to edit*/,
                const char * parameter /** Parameter location of point on the edge */,
                const char * radius /**  The radius at this point on the edge. */,
                const char * centerValue /**  The conic center value at this point on the edge. */,
                const char * rhoValue /**  The conic center value at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this vr */,
                bool isExternal /** Flag indicating whether this point is external to blend */,
                bool isArclength /** Flag indicating whether the parameter is arclength or not */
            );
            /** Remove variable radius data on an edge by the parameter value of the point on the edge 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to add stop short data on*/,
                double parameter /** Parameter location of point on the edge */
            );
            /** Remove variable radius data on an edge by the index into the point array on the edge 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveVariableRadiusDataByIndex
            (
                NXOpen::Edge * edge /** Edge to remove variable radius data on*/,
                int index /** Index into point array on the edge */
            );
            /** Remove all variable radius datas on an edge  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveVariableRadiusData
            (
                NXOpen::Edge * edge /** Edge to remove all variable radius datas from*/
            );
            /**Returns  the overlap resolution for edge blend  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EdgeBlendBuilder::Overlap OverlapOption
            (
            );
            /**Sets  the overlap resolution for edge blend  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetOverlapOption
            (
                NXOpen::Features::EdgeBlendBuilder::Overlap overlapOption /** overlap option */ 
            );
            /**Returns  the order of blending for edge blend  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EdgeBlendBuilder::OrderOfBlending BlendOrder
            (
            );
            /**Sets  the order of blending for edge blend  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBlendOrder
            (
                NXOpen::Features::EdgeBlendBuilder::OrderOfBlending blendOrder /** blend order */ 
            );
            /**Returns  the setback option for edge blend  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EdgeBlendBuilder::Setback SetbackOption
            (
            );
            /**Sets  the setback option for edge blend  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSetbackOption
            (
                NXOpen::Features::EdgeBlendBuilder::Setback setbackOption /** setback option */ 
            );
            /**Returns  the forced cliff edges for edge blend  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * CliffEdges
            (
            );
            /**Sets  the forced cliff edges for edge blend  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetCliffEdges
            (
                NXOpen::ScCollector * cliffEdgeCollector /**The cliff edge collector */
            );
            /**Returns  the prohibited cliff edges for edge blend  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * NonCliffEdges
            (
            );
            /**Sets  the prohibited cliff edges for edge blend  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNonCliffEdges
            (
                NXOpen::ScCollector * nonCliffEdgeCollector /**The non cliff edge collector */
            );
            /**Returns  the limits list 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::BlendLimitsData * LimitsListData
            (
            );
            /**Returns  the trimming option
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool TrimmingOption
            (
            );
            /**Sets  the trimming option
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTrimmingOption
            (
                bool optionValue /** option value */ 
            );
            /**Returns  the Segment blend to match face segments option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool SegmentBlendFaces
            (
            );
            /**Sets  the Segment blend to match face segments option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetSegmentBlendFaces
            (
                bool optionValue /** optionvalue */ 
            );
            /**Returns  the Blend Face Continuity option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EdgeBlendBuilder::FaceContinuity BlendFaceContinuity
            (
            );
            /**Sets  the Blend Face Continuity option
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBlendFaceContinuity
            (
                NXOpen::Features::EdgeBlendBuilder::FaceContinuity optionValue /** optionvalue */ 
            );
            /**Returns  the zero slope radius function at chain ends option
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : None */
            public: bool ZeroSlopeRadiusFunctionAtChainEnds
            (
            );
            /**Sets  the zero slope radius function at chain ends option
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetZeroSlopeRadiusFunctionAtChainEnds
            (
                bool optionValue /** optionvalue */ 
            );
            /** Add an edge blend edge chain data to the edge blend 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void AddEdgeChainData
            (
                const std::vector<NXOpen::Edge *> & edgeArray /** Array of edges that are used by the edge chain */,
                const std::vector<bool> & edgeAlongChainDirectionArray /** Array of chain edge along chain direction flags */,
                bool isChainClosed /** is the edge chain closed or not*/,
                bool isChainPartOfNetwork /** is the edge chain part of chain network (junction) or not */
            );
            /** Add a point on edge chain data to the edge blend 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void AddPointOnEdgeChainData
            (
                const std::vector<NXOpen::Edge *> & edgeArray /** Array of edges that are used by the edge chain */,
                double parameterOnChain /** The variable radius point parameter along the chain. If isArcLength is false, this value is a percentage value */,
                bool isArclength /** Flag indicating whether parameter is arclength or percentage arclength */,
                double radius /**  The radius at this point on the edge. */,
                double centerValue /**  The conic center value at this point on the edge. */,
                double rhoValue /**  The conic rho value at this point on the edge. */,
                NXOpen::Point * smartPoint /** Smart Point defining the location of this variable radius */,
                bool isExternal /** Flag indicating whether this point is external to blend */
            );
            /** Remove all existing edge chain data and point on edge chain data 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void RemoveEdgeChainAndPointOnEdgeChainData
            (
            );
            /** Get the number of valid setback data @return  Number of valid setback data 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int GetNumberOfValidSetbackData
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
