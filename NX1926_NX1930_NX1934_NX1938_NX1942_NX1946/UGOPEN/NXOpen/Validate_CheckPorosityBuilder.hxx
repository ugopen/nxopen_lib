#ifndef NXOpen_VALIDATE_CHECKPOROSITYBUILDER_HXX_INCLUDED
#define NXOpen_VALIDATE_CHECKPOROSITYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Validate_CheckPorosityBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Validate_SelectionAndPlacementBuilder.hxx>
#include <NXOpen/libnxopencpp_validate_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Validate
    {
        class CheckPorosityBuilder;
    }
    class Builder;
    class Expression;
    class Face;
    class Point;
    namespace Validate
    {
        class SelectionAndPlacementBuilder;
    }
    namespace Validate
    {
        class _CheckPorosityBuilderBuilder;
        class CheckPorosityBuilderImpl;
        /** Represents a Check Porosity Builder  <br> To create a new instance of this class, use @link NXOpen::Validate::AnalysisResultCollection::CreateCheckPorosityBuilder  NXOpen::Validate::AnalysisResultCollection::CreateCheckPorosityBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AutomaticUpdate </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ColorMapDisplayOptionType </term> <description> 
         
        All </description> </item> 

        <item><term> 
         
        MaximumPorosity </term> <description> 
         
        100.0 (millimeters part), 4.0 (inches part) </description> </item> 

        <item><term> 
         
        MinimumPorosity </term> <description> 
         
        0.0 (millimeters part), 0.0 (inches part) </description> </item> 

        <item><term> 
         
        PreviewState </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        TargetPorosity </term> <description> 
         
        50.0 (millimeters part), 2.0 (inches part) </description> </item> 

        <item><term> 
         
        VoxelSize.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_VALIDATEEXPORT  CheckPorosityBuilder : public NXOpen::Builder
        {
            /** Represent color map display option type */
            public: enum ColorMapDisplayOptionTypes
            {
                ColorMapDisplayOptionTypesAll/** Display All */,
                ColorMapDisplayOptionTypesWithinLimits/** within limits */ ,
                ColorMapDisplayOptionTypesOutsideLimits/** outside limits */ ,
                ColorMapDisplayOptionTypesAboveTarget/** above target */ ,
                ColorMapDisplayOptionTypesBelowTarget/** below target */ 
            };

            private: CheckPorosityBuilderImpl * m_checkporositybuilder_impl;
            private: friend class  _CheckPorosityBuilderBuilder;
            protected: CheckPorosityBuilder();
            public: ~CheckPorosityBuilder();
            /**Returns  the selection and placement builder
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::SelectionAndPlacementBuilder * SelectionAndPlacement
            (
            );
            /**Returns  the expression representing the voxel size 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * VoxelSize
            (
            );
            /**Returns  the Minimum Porosity  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double MinimumPorosity
            (
            );
            /**Sets  the Minimum Porosity  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumPorosity
            (
                double minimumPorosity /** minimumporosity */ 
            );
            /**Returns  the Target Porosity  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double TargetPorosity
            (
            );
            /**Sets  the Target Porosity  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetPorosity
            (
                double targetPorosity /** targetporosity */ 
            );
            /**Returns  the Maximum Porosity  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double MaximumPorosity
            (
            );
            /**Sets  the Maximum Porosity  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumPorosity
            (
                double maximumPorosity /** maximumporosity */ 
            );
            /**Returns  the color map display option types 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Validate::CheckPorosityBuilder::ColorMapDisplayOptionTypes ColorMapDisplayOptionType
            (
            );
            /**Sets  the color map display option types 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColorMapDisplayOptionType
            (
                NXOpen::Validate::CheckPorosityBuilder::ColorMapDisplayOptionTypes colorMapDisplayOptionType /** colormapdisplayoptiontype */ 
            );
            /**Returns  the minimum in porosity results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double Minimum
            (
            );
            /**Returns  the maximum in porosity results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double Maximum
            (
            );
            /**Returns  the median in porosity results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double Median
            (
            );
            /**Returns  the average in porosity results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double Average
            (
            );
            /**Returns  the belowLimit in volume results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double BelowLimit
            (
            );
            /**Returns  the aboveLimit in volume results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double AboveLimit
            (
            );
            /**Returns  the withinLimit in volume results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double WithinLimit
            (
            );
            /**Returns  the belowTarget in volume results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double BelowTarget
            (
            );
            /**Returns  the aboveTarget in volume results group 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double AboveTarget
            (
            );
            /**Returns  the automatic update toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticUpdate
            (
            );
            /**Sets  the automatic update toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAutomaticUpdate
            (
                bool automaticUpdate /** automaticupdate */ 
            );
            /**Returns  the preview toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool PreviewState
            (
            );
            /**Sets  the preview toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPreviewState
            (
                bool previewState /** previewstate */ 
            );
            /** Removes color legend 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveColorLegend
            (
            );
            /** Creates color legend 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void MakeColorLegend
            (
            );
            /** Adds geometric constraint point 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AddGeometricConstraintPoint
            (
                NXOpen::Face * face /** face */ ,
                NXOpen::Point * point /** point */ 
            );
            /** Sets geometric constraint point 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGeometricConstraintPoint
            (
                NXOpen::Face * face /** face */ ,
                NXOpen::Point * point /** point */ 
            );
            /** Deletes geometric constraint point 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteGeometricConstraintPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /** Clears geometric constraint points 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ClearGeometricConstraintPoints
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
