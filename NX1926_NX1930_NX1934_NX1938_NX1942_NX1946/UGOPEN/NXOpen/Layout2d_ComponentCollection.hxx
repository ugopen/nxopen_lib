#ifndef NXOpen_LAYOUT2D_COMPONENTCOLLECTION_HXX_INCLUDED
#define NXOpen_LAYOUT2D_COMPONENTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Layout2d_ComponentCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Layout2d_AssemblyFromLayout2dBuilder.hxx>
#include <NXOpen/Layout2d_AssociativeAssemblyBuilder.hxx>
#include <NXOpen/Layout2d_CreateComponentFrom3DBuilder.hxx>
#include <NXOpen/Layout2d_DefineComponentAnchorPointBuilder.hxx>
#include <NXOpen/Layout2d_DefineComponentBuilder.hxx>
#include <NXOpen/Layout2d_ExportComponentHierarchyBuilder.hxx>
#include <NXOpen/Layout2d_InheritDisplayAttributesBuilder.hxx>
#include <NXOpen/Layout2d_InsertComponentBuilder.hxx>
#include <NXOpen/Layout2d_MakeComponentUniqueBuilder.hxx>
#include <NXOpen/Layout2d_NewComponentBuilder.hxx>
#include <NXOpen/Layout2d_PublishComponentBuilder.hxx>
#include <NXOpen/Layout2d_ReparentComponentBuilder.hxx>
#include <NXOpen/Layout2d_ReplaceComponentBuilder.hxx>
#include <NXOpen/Layout2d_SmashComponentBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_layout2d_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Layout2d
    {
        class ComponentCollection;
    }
    class Part;
    namespace Layout2d
    {
        class Component;
    }
    class DisplayableObject;
    namespace Drawings
    {
        class OrderManager;
    }
    namespace Layout2d
    {
        class AssemblyFromLayout2dBuilder;
    }
    namespace Layout2d
    {
        class AssociativeAssemblyBuilder;
    }
    namespace Layout2d
    {
        class CreateComponentFrom3DBuilder;
    }
    namespace Layout2d
    {
        class DefineComponentAnchorPointBuilder;
    }
    namespace Layout2d
    {
        class DefineComponentBuilder;
    }
    namespace Layout2d
    {
        class ExportComponentHierarchyBuilder;
    }
    namespace Layout2d
    {
        class InheritDisplayAttributesBuilder;
    }
    namespace Layout2d
    {
        class InsertComponentBuilder;
    }
    namespace Layout2d
    {
        class MakeComponentUniqueBuilder;
    }
    namespace Layout2d
    {
        class NewComponentBuilder;
    }
    namespace Layout2d
    {
        class PublishComponentBuilder;
    }
    namespace Layout2d
    {
        class ReparentComponentBuilder;
    }
    namespace Layout2d
    {
        class ReplaceComponentBuilder;
    }
    namespace Layout2d
    {
        class SmashComponentBuilder;
    }
    class View;
    namespace Layout2d
    {
        class ComponentCollectionImpl;
        /** Represents a collection of @link NXOpen::Layout2d::Component NXOpen::Layout2d::Component@endlink s.    <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_LAYOUT2DEXPORT  ComponentCollection : public NXOpen::TaggedObjectCollection
        {
            private: ComponentCollectionImpl * m_componentcollection_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ComponentCollection(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ComponentCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Layout2d::ComponentCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Layout2d::Component *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Layout2d::ComponentCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_LAYOUT2DEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_LAYOUT2DEXPORT  void next();
                NXOpen::Layout2d::ComponentCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link  NXOpen::Layout2d::Component   NXOpen::Layout2d::Component @endlink  with the given identifier as recorded in a journal.
                    An object may not return the same value as its JournalIdentifier in different versions of
                    the software. However newer versions of the software should find the same object when
                    FindObject is passed older versions of its journal identifier. In general, this method
                    should not be used in handwritten code and exists to support record and playback of journals.
                    An exception will be thrown if no object can be found with the given journal identifier.  @return  2D Component with this identifier 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Layout2d::Component * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the 2D Component to be found */
            );
            /** Finds the @link  NXOpen::Layout2d::Component   NXOpen::Layout2d::Component @endlink  with the given identifier as recorded in a journal.
                    An object may not return the same value as its JournalIdentifier in different versions of
                    the software. However newer versions of the software should find the same object when
                    FindObject is passed older versions of its journal identifier. In general, this method
                    should not be used in handwritten code and exists to support record and playback of journals.
                    An exception will be thrown if no object can be found with the given journal identifier.  @return  2D Component with this identifier 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Layout2d::Component * FindObject
            (
                const char * journalIdentifier /** Identifier of the 2D Component to be found */
            );
            /** Creates a @link NXOpen::Layout2d::DefineComponentBuilder NXOpen::Layout2d::DefineComponentBuilder@endlink  that can create a fully defined 2D 
                        Component with specified content, anchor point, name and reuse library destination folder.
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::DefineComponentBuilder * CreateDefineComponentBuilder
            (
                NXOpen::Layout2d::Component * component /** the component to be edited, 
                                                                                    NULL in case of new component view.*/
            );
            /** Creates a @link NXOpen::Layout2d::InsertComponentBuilder NXOpen::Layout2d::InsertComponentBuilder@endlink  that inserts a 2D Component instance in the active
                     *  sketch.
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::InsertComponentBuilder * CreateInsertComponentBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::ReplaceComponentBuilder NXOpen::Layout2d::ReplaceComponentBuilder@endlink  that can replace the selected 2D Component
                     *   instance with another 2D Component definition
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::ReplaceComponentBuilder * CreateReplaceComponentBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::SmashComponentBuilder NXOpen::Layout2d::SmashComponentBuilder@endlink  that can smash the selected 
                     *  2D Component instance
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::SmashComponentBuilder * CreateSmashComponentBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::MakeComponentUniqueBuilder NXOpen::Layout2d::MakeComponentUniqueBuilder@endlink  that can create definition
                     *  for the selected 2D Component instance
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::MakeComponentUniqueBuilder * CreateMakeComponentUniqueBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::DefineComponentAnchorPointBuilder NXOpen::Layout2d::DefineComponentAnchorPointBuilder@endlink  that can define the Anchor Point location of a
                     *  2D Component
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::DefineComponentAnchorPointBuilder * CreateDefineComponentAnchorPointBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::PublishComponentBuilder NXOpen::Layout2d::PublishComponentBuilder@endlink  that can export local definitions into external storage locations
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::PublishComponentBuilder * CreatePublishComponentBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::NewComponentBuilder NXOpen::Layout2d::NewComponentBuilder@endlink  that creates an empty 2D Component instance and stores its
                     *  definition in local 2D Component folder
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::NewComponentBuilder * CreateNewComponentBuilder
            (
            );
            /** Deletes a list of 2D Components
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void DeleteComponents
            (
                const std::vector<NXOpen::Layout2d::Component *> & components /** components */ 
            );
            /** Verify if the object belong to this component  @return  true if the object is component member 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: bool IsComponentMember
            (
                NXOpen::DisplayableObject * disObject /** disobject */ 
            );
            /** Creates a @link NXOpen::Layout2d::AssemblyFromLayout2dBuilder NXOpen::Layout2d::AssemblyFromLayout2dBuilder@endlink  that can create assembly from  
                     *  the selected layout
                    
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::AssemblyFromLayout2dBuilder * CreateAssemblyFromLayout2dBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::ReplaceComponentBuilder NXOpen::Layout2d::ReplaceComponentBuilder@endlink  that can reparent the selected 2D Component
                     *  instance with another 2D Component or sketch 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::ReparentComponentBuilder * CreateReparentComponentBuilder
            (
            );
            /** Updates 2D Components without propagating the changes to the hierarchy in given layout 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void UpdateComponents
            (
                const std::vector<NXOpen::Layout2d::Component *> & components /** components */ 
            );
            /** Updates 2D Components and propagates the changes to the hierarchy in given layout 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: void UpdateComponentHierarchy
            (
                const std::vector<NXOpen::Layout2d::Component *> & components /** components */ 
            );
            /** Creates a @link NXOpen::Layout2d::CreateComponentFrom3DBuilder NXOpen::Layout2d::CreateComponentFrom3DBuilder@endlink  that can create assembly from
                     *  the selected layout
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::CreateComponentFrom3DBuilder * CreateComponentFrom3dBuilder
            (
                NXOpen::View * myView /** myview */ 
            );
            /** Creates a @link NXOpen::Layout2d::ExportComponentHierarchyBuilder NXOpen::Layout2d::ExportComponentHierarchyBuilder@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::ExportComponentHierarchyBuilder * CreateExportComponentHierarchyBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::AssociativeAssemblyBuilder NXOpen::Layout2d::AssociativeAssemblyBuilder@endlink  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::AssociativeAssemblyBuilder * CreateAssociativeAssemblyBuilder
            (
            );
            /** Creates a @link NXOpen::Layout2d::InheritDisplayAttributesBuilder NXOpen::Layout2d::InheritDisplayAttributesBuilder@endlink  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_layout ("NX Layout") */
            public: NXOpen::Layout2d::InheritDisplayAttributesBuilder * CreateInheritDisplayAttributesBuilder
            (
            );


            /** Returns the OrderManager for part 
             <br>  Created in NX11.0.0.  <br>  
            */
            public: NXOpen::Drawings::OrderManager *OrderManagers();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
