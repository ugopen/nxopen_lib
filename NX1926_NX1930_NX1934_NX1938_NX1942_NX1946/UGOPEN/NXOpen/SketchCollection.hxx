#ifndef NXOpen_SKETCHCOLLECTION_HXX_INCLUDED
#define NXOpen_SKETCHCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/ConvertToFromReferenceBuilder.hxx>
#include <NXOpen/CurveSnapOptionsBuilder.hxx>
#include <NXOpen/InferredConstraintsBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/RelationFinderSettingsBuilder.hxx>
#include <NXOpen/SketchAlongPathBuilder.hxx>
#include <NXOpen/SketchAngularDimensionBuilder.hxx>
#include <NXOpen/SketchAssociativeTrim.hxx>
#include <NXOpen/SketchAssociativeTrimBuilder.hxx>
#include <NXOpen/SketchAutoConstrainBuilder.hxx>
#include <NXOpen/SketchAutoDimensionBuilder.hxx>
#include <NXOpen/SketchChamferBuilder.hxx>
#include <NXOpen/SketchConicBuilder.hxx>
#include <NXOpen/SketchConstraintBuilder.hxx>
#include <NXOpen/SketchCornerBuilder.hxx>
#include <NXOpen/SketchDefineWorkRegionBuilder.hxx>
#include <NXOpen/SketchDimensionBuilder.hxx>
#include <NXOpen/SketchEditDefiningSectionBuilder.hxx>
#include <NXOpen/SketchEditDimensionValueBuilder.hxx>
#include <NXOpen/SketchEditParametersBuilder.hxx>
#include <NXOpen/SketchEllipseBuilder.hxx>
#include <NXOpen/SketchFindMovableObjectsBuilder.hxx>
#include <NXOpen/SketchFixObjectsBuilder.hxx>
#include <NXOpen/SketchIgnoreRelationBuilder.hxx>
#include <NXOpen/SketchInDraftingBuilder.hxx>
#include <NXOpen/SketchInPlaceBuilder.hxx>
#include <NXOpen/SketchIncludeGeometryBuilder.hxx>
#include <NXOpen/SketchLinearDimensionBuilder.hxx>
#include <NXOpen/SketchMakeCoincidentBuilder.hxx>
#include <NXOpen/SketchMakeCollinearBuilder.hxx>
#include <NXOpen/SketchMakeEqualBuilder.hxx>
#include <NXOpen/SketchMakeHorizontalBuilder.hxx>
#include <NXOpen/SketchMakeMidpointAlignedBuilder.hxx>
#include <NXOpen/SketchMakeParallelBuilder.hxx>
#include <NXOpen/SketchMakePerpendicularBuilder.hxx>
#include <NXOpen/SketchMakePerpendicularToStringBuilder.hxx>
#include <NXOpen/SketchMakePointOnStringBuilder.hxx>
#include <NXOpen/SketchMakeSymmetricBuilder.hxx>
#include <NXOpen/SketchMakeTangentBuilder.hxx>
#include <NXOpen/SketchMakeTangentToStringBuilder.hxx>
#include <NXOpen/SketchMakeUniformScaleBuilder.hxx>
#include <NXOpen/SketchMakeVerticalBuilder.hxx>
#include <NXOpen/SketchManageSymmetryLinesBuilder.hxx>
#include <NXOpen/SketchMirrorPatternBuilder.hxx>
#include <NXOpen/SketchOffset.hxx>
#include <NXOpen/SketchOffsetBuilder.hxx>
#include <NXOpen/SketchPasteBuilder.hxx>
#include <NXOpen/SketchPattern.hxx>
#include <NXOpen/SketchPatternBuilder.hxx>
#include <NXOpen/SketchPolygon.hxx>
#include <NXOpen/SketchPolygonBuilder.hxx>
#include <NXOpen/SketchProjectBuilder.hxx>
#include <NXOpen/SketchQuickExtendBuilder.hxx>
#include <NXOpen/SketchQuickTrimBuilder.hxx>
#include <NXOpen/SketchRadialDimensionBuilder.hxx>
#include <NXOpen/SketchRapidDimensionBuilder.hxx>
#include <NXOpen/SketchSymmetricBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SketchCollection;
    class Part;
    class Sketch;
    namespace Annotations
    {
        class AngularDimension;
    }
    namespace Annotations
    {
        class Dimension;
    }
    class ConvertToFromReferenceBuilder;
    class CurveSnapOptionsBuilder;
    namespace Features
    {
        class Feature;
    }
    class InferredConstraintsBuilder;
    class NXObject;
    class RelationFinderSettingsBuilder;
    class SketchAlongPathBuilder;
    class SketchAngularDimensionBuilder;
    class SketchAssociativeTrim;
    class SketchAssociativeTrimBuilder;
    class SketchAutoConstrainBuilder;
    class SketchAutoDimensionBuilder;
    class SketchChamferBuilder;
    class SketchConicBuilder;
    class SketchConstraintBuilder;
    class SketchCornerBuilder;
    class SketchDefineWorkRegionBuilder;
    class SketchDimensionBuilder;
    class SketchDimensionalConstraint;
    class SketchEditDefiningSectionBuilder;
    class SketchEditDimensionValueBuilder;
    class SketchEditParametersBuilder;
    class SketchEllipseBuilder;
    class SketchFindMovableObjectsBuilder;
    class SketchFixObjectsBuilder;
    class SketchIgnoreRelationBuilder;
    class SketchInDraftingBuilder;
    class SketchInPlaceBuilder;
    class SketchIncludeGeometryBuilder;
    class SketchIntersectionCurve;
    class SketchIntersectionCurveBuilder;
    class SketchIntersectionPoint;
    class SketchIntersectionPointBuilder;
    class SketchLinearDimensionBuilder;
    class SketchMakeCoincidentBuilder;
    class SketchMakeCollinearBuilder;
    class SketchMakeEqualBuilder;
    class SketchMakeHorizontalBuilder;
    class SketchMakeMidpointAlignedBuilder;
    class SketchMakeParallelBuilder;
    class SketchMakePerpendicularBuilder;
    class SketchMakePerpendicularToStringBuilder;
    class SketchMakePointOnStringBuilder;
    class SketchMakeSymmetricBuilder;
    class SketchMakeTangentBuilder;
    class SketchMakeTangentToStringBuilder;
    class SketchMakeUniformScaleBuilder;
    class SketchMakeVerticalBuilder;
    class SketchManageSymmetryLinesBuilder;
    class SketchMirrorPatternBuilder;
    class SketchOffset;
    class SketchOffsetBuilder;
    class SketchPasteBuilder;
    class SketchPattern;
    class SketchPatternBuilder;
    class SketchPolygon;
    class SketchPolygonBuilder;
    class SketchProjectBuilder;
    class SketchQuickExtendBuilder;
    class SketchQuickTrimBuilder;
    class SketchRadialDimensionBuilder;
    class SketchRapidDimensionBuilder;
    class SketchSymmetricBuilder;
    class SmartObject;
    class SketchCollectionImpl;
    /** Represents a collection of sketches  <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  SketchCollection : public NXOpen::TaggedObjectCollection
    {
        private: SketchCollectionImpl * m_sketchcollection_impl;
        private: NXOpen::Part* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit SketchCollection(NXOpen::Part *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~SketchCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::SketchCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Sketch *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(nullptr), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::SketchCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * () const;
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::SketchCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Finds the @link  NXOpen::Sketch   NXOpen::Sketch @endlink  with the given name.
            An exception will be thrown if no object can be found with the given name.
             @return  Sketch with this name 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Sketch * FindObject
        (
            const NXString & name /** The name of the @link NXOpen::Sketch NXOpen::Sketch@endlink  */
        );
        /** Finds the @link  NXOpen::Sketch   NXOpen::Sketch @endlink  with the given name.
            An exception will be thrown if no object can be found with the given name.
             @return  Sketch with this name 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::Sketch * FindObject
        (
            const char * name /** The name of the @link NXOpen::Sketch NXOpen::Sketch@endlink  */
        );
        /** Returns the sketch that owns the specified geometry  @return  The sketch that owns the geometry 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::Sketch * GetOwningSketch
        (
            NXOpen::SmartObject * geometry /** geometry */ 
        );
        /** Creates the builder for intersection curve 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchIntersectionCurveBuilder * CreateIntersectionCurveBuilder
        (
            NXOpen::SketchIntersectionCurve * operation /** operation */ 
        );
        /** Creates the builder for intersection point 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchIntersectionPointBuilder * CreateIntersectionPointBuilder
        (
            NXOpen::SketchIntersectionPoint * operation /** operation */ 
        );
        /** Creates a @link NXOpen::SketchProjectBuilder NXOpen::SketchProjectBuilder@endlink   @return  ProjectBuilder object
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchProjectBuilder * CreateProjectBuilder
        (
            NXOpen::Features::Feature * operation /** The feature for the @link NXOpen::SketchProjectBuilder NXOpen::SketchProjectBuilder@endlink  to be edited,
                                                                       if NULL then create a new one */
        );
        /** Creates a @link NXOpen::SketchCornerBuilder NXOpen::SketchCornerBuilder@endlink   @return  CornerBuilder object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchCornerBuilder * CreateCornerBuilder
        (
        );
        /** Creates a @link NXOpen::SketchAutoConstrainBuilder NXOpen::SketchAutoConstrainBuilder@endlink   @return  Sketch Auto-Constrain Builder object
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchAutoConstrainBuilder * CreateAutoConstrainBuilder
        (
        );
        /** Creates a @link NXOpen::SketchOffsetBuilder NXOpen::SketchOffsetBuilder@endlink . This command only supports creation of up to 200 output curves. That means number
                of curves in input section multiplied by the number of copies must be less than or equal to 200. 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchOffsetBuilder * CreateSketchOffsetBuilder
        (
            NXOpen::SketchOffset * offCon /** Offset constraint */
        );
        /** Creates a @link NXOpen::SketchAssociativeTrimBuilder NXOpen::SketchAssociativeTrimBuilder@endlink  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchAssociativeTrimBuilder * CreateSketchAssociativeTrimBuilder
        (
            NXOpen::SketchAssociativeTrim * trimCon /** Trim constraint */
        );
        /** Creates a @link NXOpen::ConvertToFromReferenceBuilder NXOpen::ConvertToFromReferenceBuilder@endlink   @return  Sketch ConvertToFromReferenceBuilder object
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::ConvertToFromReferenceBuilder * CreateConvertToFromReferenceBuilder
        (
        );
        /** Creates a @link NXOpen::InferredConstraintsBuilder NXOpen::InferredConstraintsBuilder@endlink   @return  InferredConstraintsBuilder object
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::InferredConstraintsBuilder * CreateInferredConstraintsBuilder
        (
        );
        /** Creates a @link NXOpen::SketchDimensionBuilder NXOpen::SketchDimensionBuilder@endlink   @return  DimensionBuilder object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDimensionBuilder * CreateDimensionBuilder
        (
            NXOpen::SketchDimensionalConstraint * constraint /** The sketch dimensional constraint to be edited. */
        );
        /** Creates a @link NXOpen::SketchQuickExtendBuilder NXOpen::SketchQuickExtendBuilder@endlink   @return  Sketch Quick-Extend Builder object 
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchQuickExtendBuilder * CreateQuickExtendBuilder
        (
        );
        /** Creates a @link NXOpen::SketchQuickTrimBuilder NXOpen::SketchQuickTrimBuilder@endlink   @return  Sketch QuickTrim Builder object
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchQuickTrimBuilder * CreateQuickTrimBuilder
        (
        );
        /** Creates a @link NXOpen::SketchInPlaceBuilder NXOpen::SketchInPlaceBuilder@endlink   @return  SketchInPlaceBuilder object
         <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::SketchCollection::CreateSketchInPlaceBuilder2 NXOpen::SketchCollection::CreateSketchInPlaceBuilder2@endlink  instead. <br>  

         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::SketchCollection::CreateSketchInPlaceBuilder2 instead.") NXOpen::SketchInPlaceBuilder * CreateNewSketchInPlaceBuilder
        (
            NXOpen::Sketch * operation /** The @link NXOpen::Sketch NXOpen::Sketch@endlink  to reattach or NULL to create                                                          a new one */
        );
        /** Creates a @link NXOpen::SketchInPlaceBuilder NXOpen::SketchInPlaceBuilder@endlink   @return  SketchInPlaceBuilder object
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchInPlaceBuilder * CreateSketchInPlaceBuilder2
        (
            NXOpen::Sketch * operation /** The @link NXOpen::Sketch NXOpen::Sketch@endlink  to reattach or NULL to create                                                          a new one */
        );
        /** Creates a @link NXOpen::SketchAlongPathBuilder NXOpen::SketchAlongPathBuilder@endlink   @return  SketchAlongPathBuilder object
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchAlongPathBuilder * CreateSketchAlongPathBuilder
        (
            NXOpen::Sketch * operation /** The @link NXOpen::Sketch NXOpen::Sketch@endlink  to reattach or NULL to create                                                          a new one */
        );
        /** Creates a @link NXOpen::SketchInDraftingBuilder NXOpen::SketchInDraftingBuilder@endlink   @return  SketchInDraftingBuilder object
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") */
        public: NXOpen::SketchInDraftingBuilder * CreateSketchInDraftingBuilder
        (
        );
        /** Creates a @link NXOpen::SketchEllipseBuilder NXOpen::SketchEllipseBuilder@endlink   @return  SketchEllipseBuilder object
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchEllipseBuilder * CreateSketchEllipseBuilder
        (
            NXOpen::NXObject * ellipse /** The ellipse to be edited. */
        );
        /** Creates a @link NXOpen::SketchConicBuilder NXOpen::SketchConicBuilder@endlink   @return  SketchConicBuilder object
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchConicBuilder * CreateSketchConicBuilder
        (
            NXOpen::NXObject * conic /** The conic to be edited. */
        );
        /** Creates a @link NXOpen::SketchChamferBuilder NXOpen::SketchChamferBuilder@endlink   @return  Sketch Chamfer Builder object 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchChamferBuilder * CreateSketchChamferBuilder
        (
        );
        /** Creates a @link NXOpen::SketchAutoDimensionBuilder NXOpen::SketchAutoDimensionBuilder@endlink   @return  Sketch Auto-Dimension Builder object
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchAutoDimensionBuilder * CreateAutoDimensionBuilder
        (
        );
        /** Creates a @link NXOpen::SketchPatternBuilder NXOpen::SketchPatternBuilder@endlink  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchPatternBuilder * CreateSketchPatternBuilder
        (
            NXOpen::SketchPattern * con /** Pattern constraint */
        );
        /** Creates a @link NXOpen::SketchMirrorPatternBuilder NXOpen::SketchMirrorPatternBuilder@endlink  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMirrorPatternBuilder * CreateSketchMirrorPatternBuilder
        (
            NXOpen::SketchPattern * con /** Pattern constraint */
        );
        /** Creates a @link NXOpen::SketchMakeSymmetricBuilder NXOpen::SketchMakeSymmetricBuilder@endlink   @return  MakeSymmetricBuilder object
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeSymmetricBuilder * CreateMakeSymmetricBuilder
        (
        );
        /** Creates a @link NXOpen::SketchPolygonBuilder NXOpen::SketchPolygonBuilder@endlink   @return  SketchPolygonBuilder object
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchPolygonBuilder * CreateSketchPolygonBuilder
        (
            NXOpen::SketchPolygon * polygonconstraint /** The polygon constraint. The only acceptable value here is NULL. */
        );
        /** Creates a @link NXOpen::SketchPasteBuilder NXOpen::SketchPasteBuilder@endlink  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchPasteBuilder * CreateSketchPasteBuilder
        (
            const std::vector<NXOpen::Sketch *> & sketches /** @link NXOpen::Sketch NXOpen::Sketch@endlink  to be copy/paste */
        );
        /** Creates a @link NXOpen::SketchEditDefiningSectionBuilder NXOpen::SketchEditDefiningSectionBuilder@endlink   @return  Edit Defining Section Builder object
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchEditDefiningSectionBuilder * CreateEditDefiningSectionBuilder
        (
        );
        /** Creates a @link NXOpen::SketchConstraintBuilder NXOpen::SketchConstraintBuilder@endlink  
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchConstraintBuilder * CreateConstraintBuilder
        (
        );
        /** Creates a @link NXOpen::SketchAngularDimensionBuilder NXOpen::SketchAngularDimensionBuilder@endlink   @return  the angular dimension builder 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchAngularDimensionBuilder * CreateAngularDimensionBuilder
        (
            NXOpen::Annotations::AngularDimension * angularDimension /** the angular dimension to be edited,
                                                                                          if NULL.  then create an angular dimension */
        );
        /** Creates a @link NXOpen::SketchLinearDimensionBuilder NXOpen::SketchLinearDimensionBuilder@endlink   @return  the linear dimension builder 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchLinearDimensionBuilder * CreateLinearDimensionBuilder
        (
            NXOpen::Annotations::Dimension * linearDimension /** the linear dimension to be edited,
                                                                                      if NULL,  then create a linear dimension  */
        );
        /** Creates a @link NXOpen::SketchRapidDimensionBuilder NXOpen::SketchRapidDimensionBuilder@endlink   @return  the rapid dimension builder 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchRapidDimensionBuilder * CreateRapidDimensionBuilder
        (
        );
        /** Creates a @link NXOpen::SketchRadialDimensionBuilder NXOpen::SketchRadialDimensionBuilder@endlink   @return  the radial dimension builder 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchRadialDimensionBuilder * CreateRadialDimensionBuilder
        (
            NXOpen::Annotations::Dimension * radialDimension /** the radial dimension to be edited,
                                                                                   if NULL,  then create a radial dimension  */
        );
        /** Creates a @link NXOpen::CurveSnapOptionsBuilder NXOpen::CurveSnapOptionsBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::CurveSnapOptionsBuilder * CreateCurveSnapOptionsBuilder
        (
        );
        /** Creates a @link NXOpen::RelationFinderSettingsBuilder NXOpen::RelationFinderSettingsBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::RelationFinderSettingsBuilder * CreateRelationFinderSettingsBuilder
        (
        );
        /** Creates a @link SketchMakeCoincidentBuilder SketchMakeCoincidentBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeCoincidentBuilder * CreateSketchMakeCoincidentBuilder
        (
        );
        /** Creates a @link SketchMakeCollinearBuilder SketchMakeCollinearBuilder@endlink  
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeCollinearBuilder * CreateSketchMakeCollinearBuilder
        (
        );
        /** Creates a @link SketchMakeEqualBuilder SketchMakeEqualBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeEqualBuilder * CreateSketchMakeEqualBuilder
        (
        );
        /** Creates a @link SketchMakeHorizontalBuilder SketchMakeHorizontalBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeHorizontalBuilder * CreateSketchMakeHorizontalBuilder
        (
        );
        /** Creates a @link SketchMakeMidpointAlignedBuilder SketchMakeMidpointAlignedBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeMidpointAlignedBuilder * CreateSketchMakeMidpointAlignedBuilder
        (
        );
        /** Creates a @link SketchMakeParallelBuilder SketchMakeParallelBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeParallelBuilder * CreateSketchMakeParallelBuilder
        (
        );
        /** Creates a @link SketchMakePerpendicularBuilder SketchMakePerpendicularBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakePerpendicularBuilder * CreateSketchMakePerpendicularBuilder
        (
        );
        /** Creates a @link SketchMakePerpendicularToStringBuilder SketchMakePerpendicularToStringBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakePerpendicularToStringBuilder * CreateSketchMakePerpendicularToStringBuilder
        (
        );
        /** Creates a @link SketchMakePointOnStringBuilder SketchMakePointOnStringBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakePointOnStringBuilder * CreateSketchMakePointOnStringBuilder
        (
        );
        /** Creates a @link SketchMakeTangentBuilder SketchMakeTangentBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeTangentBuilder * CreateSketchMakeTangentBuilder
        (
        );
        /** Creates a @link SketchMakeTangentToStringBuilder SketchMakeTangentToStringBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeTangentToStringBuilder * CreateSketchMakeTangentToStringBuilder
        (
        );
        /** Creates a @link SketchMakeVerticalBuilder SketchMakeVerticalBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeVerticalBuilder * CreateSketchMakeVerticalBuilder
        (
        );
        /** Creates a @link SketchSymmetricBuilder SketchSymmetricBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchSymmetricBuilder * CreateSketchSymmetricBuilder
        (
        );
        /** Creates a @link NXOpen::SketchEditDimensionValueBuilder NXOpen::SketchEditDimensionValueBuilder@endlink . This builder is only used for editing the value of a sketch dimension.  @return  the edit dimension value builder 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchEditDimensionValueBuilder * CreateEditDimensionValueBuilder
        (
            NXOpen::Annotations::Dimension * dimension /** the sketch dimension to be edited */
        );
        /** Creates a @link SketchIncludeGeometryBuilder SketchIncludeGeometryBuilder@endlink . The included object needs to be passed in to edit it.
                If the inlcuded object is not passed in, then new included objects can be created.
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchIncludeGeometryBuilder * CreateSketchIncludeGeometryBuilder
        (
            NXOpen::SmartObject * includedObject /** includedobject */ 
        );
        /** Creates a @link NXOpen::SketchManageSymmetryLinesBuilder NXOpen::SketchManageSymmetryLinesBuilder@endlink  
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchManageSymmetryLinesBuilder * CreateSketchManageSymmetryLinesBuilder
        (
        );
        /** Creates a @link NXOpen::SketchDefineWorkRegionBuilder NXOpen::SketchDefineWorkRegionBuilder@endlink   @return  Define Work Region Builder object
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchDefineWorkRegionBuilder * CreateDefineWorkRegionBuilder
        (
        );
        /** Creates a @link SketchFixObjectsBuilder SketchFixObjectsBuilder@endlink  to define the fixed geometry of the active sketch. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchFixObjectsBuilder * CreateSketchFixObjectsBuilder
        (
        );
        /** Creates a @link NXOpen::SketchFindMovableObjectsBuilder NXOpen::SketchFindMovableObjectsBuilder@endlink   @return  Find Movable Objects Builder object
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchFindMovableObjectsBuilder * CreateFindMovableObjectsBuilder
        (
        );
        /** Creates a @link SketchIgnoreRelationBuilder SketchIgnoreRelationBuilder@endlink  
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchIgnoreRelationBuilder * CreateIgnoreRelationBuilder
        (
        );
        /** Creates a @link NXOpen::SketchMakeUniformScaleBuilder NXOpen::SketchMakeUniformScaleBuilder@endlink   @return  Make Uniform Scale Builder object
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchMakeUniformScaleBuilder * CreateSketchMakeUniformScaleBuilder
        (
        );
        /** Creates a @link NXOpen::SketchEditParametersBuilder NXOpen::SketchEditParametersBuilder@endlink . This builder is only used for editing the parameters of a sketch.  @return  the edit parameters builder 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::SketchEditParametersBuilder * CreateEditParametersBuilder
        (
            NXOpen::Sketch * operation /** The @link NXOpen::Sketch NXOpen::Sketch@endlink  to edit parameters */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
