#ifndef NXOpen_CAM_INSPECTIONFEATUREDATAFILTERBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONFEATUREDATAFILTERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionFeatureDataFilterBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionMethodBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionFeatureDataFilterBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class _InspectionFeatureDataFilterBuilderBuilder;
        class InspectionFeatureDataFilterBuilderImpl;
        /** Represents a builder for an inspection feature data filter 
         <br>  Created in NX1880.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionFeatureDataFilterBuilder : public NXOpen::TaggedObject
        {
            private: InspectionFeatureDataFilterBuilderImpl * m_inspectionfeaturedatafilterbuilder_impl;
            private: friend class  _InspectionFeatureDataFilterBuilderBuilder;
            protected: InspectionFeatureDataFilterBuilder();
            public: ~InspectionFeatureDataFilterBuilder();
            /**Returns  the spike elimination setting 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::SpikeEliminationTypes SpikeElimination
            (
            );
            /**Sets  the spike elimination setting 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSpikeElimination
            (
                NXOpen::CAM::InspectionMethodBuilder::SpikeEliminationTypes spikeElim /** spikeelim */ 
            );
            /**Returns  the spike elimination standard deviation builder 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * SpikeEliminationStdDevBuilder
            (
            );
            /** Updates the standard deviation multiplier 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSpikeEliminationStdDev
            (
                double multiplier /** multiplier */ 
            );
            /**Returns  the data filter type 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::DataFilterTypes DataFilter
            (
            );
            /**Sets  the data filter type 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDataFilter
            (
                NXOpen::CAM::InspectionMethodBuilder::DataFilterTypes dataFilter /** datafilter */ 
            );
            /**Returns  the data filter pass type 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::DataFilterPassTypes DataFilterPass
            (
            );
            /**Sets  the data filter pass type 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDataFilterPass
            (
                NXOpen::CAM::InspectionMethodBuilder::DataFilterPassTypes passType /** passtype */ 
            );
            /**Returns  the minimum pass value builder 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * DataFilterMinPassValueBuilder
            (
            );
            /** Updates the minimum pass value 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMinimumPassValue
            (
                double passValue /** passvalue */ 
            );
            /**Returns  the maximum pass value builder 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * DataFilterMaxPassValueBuilder
            (
            );
            /** Updates the maximum pass value 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetMaximumPassValue
            (
                double passValue /** passvalue */ 
            );
            /**Returns  the data filter function 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::DataFilterFunctionTypes DataFilterFunction
            (
            );
            /**Sets  the data filter function 
             <br>  Created in NX1880.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDataFilterFunction
            (
                NXOpen::CAM::InspectionMethodBuilder::DataFilterFunctionTypes filterFunction /** filterfunction */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
