#ifndef NXOpen_AME_MANAGEECLASSMAPPINGBUILDER_HXX_INCLUDED
#define NXOpen_AME_MANAGEECLASSMAPPINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ManageEclassMappingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEBaseBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_SelectReuseLibraryItemBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ManageEclassMappingBuilder;
    }
    namespace AME
    {
        class AMEBaseBuilder;
    }
    namespace AME
    {
        class SelectAMEBaseNode;
    }
    namespace Tooling
    {
        class SelectReuseLibraryItemBuilder;
    }
    namespace AME
    {
        /**
                Definition of the EClass mapping behaviour types
            */
        enum ImportType
        {
            ImportTypeAddType/** add type */ ,
            ImportTypeAddFunction/** add function */ ,
            ImportTypeAddChildren/** add children */ 
        };

    }
    namespace AME
    {
        class _ManageEclassMappingBuilderBuilder;
        class ManageEclassMappingBuilderImpl;
        /** Represents a ManageEclassMappingBuilder class Builder   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateManageEclassmappingBuilder  NXOpen::AME::AMEManager::CreateManageEclassmappingBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ManageEclassMappingBuilder : public NXOpen::AME::AMEBaseBuilder
        {
            private: ManageEclassMappingBuilderImpl * m_manageeclassmappingbuilder_impl;
            private: friend class  _ManageEclassMappingBuilderBuilder;
            protected: ManageEclassMappingBuilder();
            public: ~ManageEclassMappingBuilder();
            /**Returns  the EClass node selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNode * SelectedEclassNode
            (
            );
            /**Returns  the reuse library selection item
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Tooling::SelectReuseLibraryItemBuilder * ReuseLibraryItem
            (
            );
            /**Returns  the enum import type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ImportType ImportType
            (
            );
            /**Sets  the enum import type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetImportType
            (
                NXOpen::AME::ImportType importType /** importtype */ 
            );
            /** Map selected EClass object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEClassObjectToADLibraryObject
            (
            );
            /** Unmap selected EClass object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnMapEClassObject
            (
            );
            /** Map selected EClass property with AD Library Object property 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEClassPropertyToADLibraryObjectProperty
            (
                const NXString & selectedEClassProperty /** selectedeclassproperty */ ,
                const NXString & selectedADPropertyId /** selectedadpropertyid */ ,
                const NXString & selectedADPropertyName /** selectedadpropertyname */ 
            );
            /** Map selected EClass property with AD Library Object property 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MapEClassPropertyToADLibraryObjectProperty
            (
                const char * selectedEClassProperty /** selectedeclassproperty */ ,
                const char * selectedADPropertyId /** selectedadpropertyid */ ,
                const char * selectedADPropertyName /** selectedadpropertyname */ 
            );
            /** Unmap selected EClass property with AD Library Object property
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnMapEClassPropertyToADLibraryObjectProperty
            (
                const NXString & selectedEClassProperty /** selectedeclassproperty */ 
            );
            /** Unmap selected EClass property with AD Library Object property
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnMapEClassPropertyToADLibraryObjectProperty
            (
                const char * selectedEClassProperty /** selectedeclassproperty */ 
            );
            /** Map selected EClass property value with AD Library Object property value
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void MapEClassPropValueToADLibraryObjectPropValue
            (
                const NXString & selectedEClassPropertyId /** selectedeclasspropertyid */ ,
                const NXString & selectedEClassPropValueId /** selectedeclasspropvalueid */ ,
                const NXString & selectedADLibraryObjectPropValueName /** selectedadlibraryobjectpropvaluename */ 
            );
            /** Map selected EClass property value with AD Library Object property value
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void MapEClassPropValueToADLibraryObjectPropValue
            (
                const char * selectedEClassPropertyId /** selectedeclasspropertyid */ ,
                const char * selectedEClassPropValueId /** selectedeclasspropvalueid */ ,
                const char * selectedADLibraryObjectPropValueName /** selectedadlibraryobjectpropvaluename */ 
            );
            /** Unmap selected EClass property value with AD Library Object property value
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UnMapEClassPropertyValue
            (
                const NXString & selectedEClassPropId /** selectedeclasspropid */ ,
                const NXString & selectedEclassPropValueId /** selectedeclasspropvalueid */ 
            );
            /** Unmap selected EClass property value with AD Library Object property value
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void UnMapEClassPropertyValue
            (
                const char * selectedEClassPropId /** selectedeclasspropid */ ,
                const char * selectedEclassPropValueId /** selectedeclasspropvalueid */ 
            );
            /** Set a map of for all AD properties and their respective Default values
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAdPropertyIdToDefaultValueMap
            (
                const std::vector<NXString> & adPropId /** adpropid */ ,
                const std::vector<NXString> & adDefaultValue /** addefaultvalue */ 
            );
            /** Transfer group level mapping to class level
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void TransferGroupMappingToClass
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
