#ifndef NXOpen_PDM_EXPORTFROMTEAMCENTER_HXX_INCLUDED
#define NXOpen_PDM_EXPORTFROMTEAMCENTER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_ExportFromTeamcenter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PDM_ICloneOperation.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class ExportFromTeamcenter;
    }
    namespace PDM
    {
        class AssyCloneCompDisp;
    }
    namespace PDM
    {
        class ICloneOperation;
    }
    namespace PDM
    {
        class _ExportFromTeamcenterBuilder;
        class ExportFromTeamcenterImpl;
        /** Represents a Export class that performs Create operations  <br> To create a new instance of this class, use @link NXOpen::PDM::PdmSession::ExportFromTeamcenterCreate  NXOpen::PDM::PdmSession::ExportFromTeamcenterCreate @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  ExportFromTeamcenter : public NXOpen::PDM::ICloneOperation
        {
            private: ExportFromTeamcenterImpl * m_exportfromteamcenter_impl;
            private: friend class  _ExportFromTeamcenterBuilder;
            protected: ExportFromTeamcenter();
            public: ~ExportFromTeamcenter();
            /** This API sets the default directory for the parts created during export will be placed in.
                        If this option is never set then the current directory will be used.
                        Note: This option is ignored for user name numbering technique.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultDirectory
            (
                const NXString & directoryName /** directoryname */ 
            );
            /** This API sets the default directory for the parts created during export will be placed in.
                        If this option is never set then the current directory will be used.
                        Note: This option is ignored for user name numbering technique.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultDirectory
            (
                const char * directoryName /** directoryname */ 
            );
            /** This API sets the root directory below which part specific associated file directories will be placed.
                        If the associated files root directory is not set then the associated files will be copied to the directory
                        of the exported parts.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociatedFilesRootDir
            (
                const NXString & rootDirName /** rootdirname */ 
            );
            /** This API sets the root directory below which part specific associated file directories will be placed.
                        If the associated files root directory is not set then the associated files will be copied to the directory
                        of the exported parts.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetAssociatedFilesRootDir
            (
                const char * rootDirName /** rootdirname */ 
            );
            /** This API sets the directory in which associated files for the specified component will be placed. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociatedFilesDir
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                const NXString & directoryName /** directoryname */ 
            );
            /** This API sets the directory in which associated files for the specified component will be placed. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetAssociatedFilesDir
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                const char * directoryName /** directoryname */ 
            );
            /** This API sets the option to export the related External files during export operation. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExternalFiles
            (
                bool setExternalFiles /** setexternalfiles */ 
            );
            /** This API creates the zip of exported parts. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int CreateZipFileOfExportedParts
            (
                const NXString & zipFilePath /** zipfilepath */ ,
                bool overwrite /** overwrite */ 
            );
            /** This API creates the zip of exported parts. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            int CreateZipFileOfExportedParts
            (
                const char * zipFilePath /** zipfilepath */ ,
                bool overwrite /** overwrite */ 
            );
            /** This API sets the default check-out data to be used for checking out all the exported parts. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultCheckOutData
            (
                const NXString & checkoutComment /** checkoutcomment */ 
            );
            /** This API sets the default check-out data to be used for checking out all the exported parts. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultCheckOutData
            (
                const char * checkoutComment /** checkoutcomment */ 
            );
            /** This API sets the check-out data to be used for checking out a particular part. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int SetCheckOutData
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                const NXString & checkoutComment /** checkoutcomment */ 
            );
            /** This API sets the check-out data to be used for checking out a particular part. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            int SetCheckOutData
            (
                NXOpen::PDM::AssyCloneCompDisp * objectToBeCloned /** objecttobecloned */ ,
                const char * checkoutComment /** checkoutcomment */ 
            );
            /** This API specifies whether to add DFA mixins or not. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAddDfaMixins
            (
                bool isAddDfaMixins /** isadddfamixins */ 
            );
            /** This API specifies whether to export DFA file or not. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExportDfaWithPart
            (
                bool isExportDfaWithPart /** isexportdfawithpart */ 
            );
            /** This API adds the dfa file to the export operation. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AddDFAFile
            (
                const NXString & dfaFile /** dfafile */ 
            );
            /** This API adds the dfa file to the export operation. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void AddDFAFile
            (
                const char * dfaFile /** dfafile */ 
            );
            /** This API exports the dfa files to the the specified export directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ExportDFAFiles
            (
                std::vector<NXString> & dfaFiles /** dfafiles */ ,
                const NXString & defDir /** defdir */ ,
                bool doMixins /** domixins */ 
            );
            /** This API exports the dfa files to the the specified export directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void ExportDFAFiles
            (
                std::vector<NXString> & dfaFiles /** dfafiles */ ,
                const char * defDir /** defdir */ ,
                bool doMixins /** domixins */ 
            );
            /** This API stores the current identifier display rule as previous identifier display rule and then sets new for current export session. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIdentifierDisplayRule
            (
                const NXString & displayRule /** displayrule */ 
            );
            /** This API stores the current identifier display rule as previous identifier display rule and then sets new for current export session. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetIdentifierDisplayRule
            (
                const char * displayRule /** displayrule */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
