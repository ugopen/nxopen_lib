#ifndef NXOpen_MECHATRONICS_CHAINJOINTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_CHAINJOINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_ChainJointBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class ChainJointBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Point;
    class SelectNXObjectList;
    namespace Mechatronics
    {
        class _ChainJointBuilderBuilder;
        class ChainJointBuilderImpl;
        /**
            Represents a @link NXOpen::Mechatronics::ChainJointBuilder NXOpen::Mechatronics::ChainJointBuilder@endlink .
            When @link Builder::Commit Builder::Commit@endlink  is called NULL will be returned.
             <br> To create a new instance of this class, use @link NXOpen::Mechatronics::PhysicsManager::CreateChainJointBuilder  NXOpen::Mechatronics::PhysicsManager::CreateChainJointBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  ChainJointBuilder : public NXOpen::Builder
        {
            private: ChainJointBuilderImpl * m_chainjointbuilder_impl;
            private: friend class  _ChainJointBuilderBuilder;
            protected: ChainJointBuilder();
            public: ~ChainJointBuilder();
            /**Returns  the geometries. This can be a @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink  or
                       @link NXOpen::Mechatronics::RigidBody NXOpen::Mechatronics::RigidBody@endlink 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::SelectNXObjectList * Geometry
            (
            );
            /**Returns   @brief  the axis vector.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Direction * BaseAxisVector
            (
            );
            /**Sets   @brief  the axis vector.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetBaseAxisVector
            (
                NXOpen::Direction * axisVector /** axisvector */ 
            );
            /**Returns   @brief  the anchor point.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Point * BaseAnchorPoint
            (
            );
            /**Sets   @brief  the anchor point.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetBaseAnchorPoint
            (
                NXOpen::Point * point /** point */ 
            );
            /**Returns  the second anchor point option. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableSecondAnchor
            (
            );
            /**Sets  the second anchor point option. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableSecondAnchor
            (
                bool enable /** enable */ 
            );
            /**Returns  the second anchor point. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Point * AnchorPointSecond
            (
            );
            /**Sets  the second anchor point. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetAnchorPointSecond
            (
                NXOpen::Point * anchorPoint /** anchorpoint */ 
            );
            /**Returns  the angular upper limit option. If the enable is true, then this joint will be
                    applied the upper limit in angular direction. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableAngularUpperLimit
            (
            );
            /**Sets  the angular upper limit option. If the enable is true, then this joint will be
                    applied the upper limit in angular direction. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableAngularUpperLimit
            (
                bool enable /** enable */ 
            );
            /**Returns  the angular lower limit option. If the enable is true, then this joint will be
                    applied the lower limit in angular direction. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool EnableAngularLowerLimit
            (
            );
            /**Sets  the angular lower limit option. If the enable is true, then this joint will be
                    applied the lower limit in angular direction. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetEnableAngularLowerLimit
            (
                bool enable /** enable */ 
            );
            /**Returns  the angular upper limit. The upper limit setup for joint angular movement. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * AngularUpperLimit
            (
            );
            /**Returns  the angular lower limit. The lower limit setup for joint angular movement. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * AngularLowerLimit
            (
            );
            /**Returns  the start angle. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXOpen::Expression * StartAngle
            (
            );
            /**Returns  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString Name
            (
            );
            /**Sets  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetName
            (
                const char * name /** name */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
