#ifndef NXOpen_CAE_DATAREADEROPTIONENUM_HXX_INCLUDED
#define NXOpen_CAE_DATAREADEROPTIONENUM_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DataReaderOptionEnum.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DataReaderOptionBase.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DataReaderOptionEnum;
    }
    namespace CAE
    {
        class DataReaderOptionBase;
    }
    namespace CAE
    {
        class _DataReaderOptionEnumBuilder;
        class DataReaderOptionEnumImpl;
        /**  @brief  Specialization of a @link NXOpen::CAE::DataReaderOptionBase NXOpen::CAE::DataReaderOptionBase@endlink  to handle 
            enumerated values. An enumerated value offers a list of choices from which to select from. All 
            choices are exposed as strings.
             

          <br>   <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DataReaderOptionEnum : public NXOpen::CAE::DataReaderOptionBase
        {
            private: DataReaderOptionEnumImpl * m_datareaderoptionenum_impl;
            private: friend class  _DataReaderOptionEnumBuilder;
            protected: DataReaderOptionEnum();
            public: ~DataReaderOptionEnum();
            /**Returns  the current selected choice
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Value
            (
            );
            /**Sets  the current selected choice
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetValue
            (
                const NXString & choice /** choice */ 
            );
            /**Sets  the current selected choice
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetValue
            (
                const char * choice /** choice */ 
            );
            /**Returns  the default selection for the option
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultValue
            (
            );
            /**Returns  the number of choices in the enumeration
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int NumChoices
            (
            );
            /** Returns the choice with the specified index.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetChoiceByIndex
            (
                int choiceIndex /** choiceindex */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
