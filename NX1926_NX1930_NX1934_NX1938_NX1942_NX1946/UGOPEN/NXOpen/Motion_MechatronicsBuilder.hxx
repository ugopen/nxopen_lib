#ifndef NXOpen_MOTION_MECHATRONICSBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_MECHATRONICSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_MechatronicsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/Motion_ConfigurationParameter.hxx>
#include <NXOpen/Motion_InputPortAssociation.hxx>
#include <NXOpen/Motion_OutputPortAssociation.hxx>
#include <NXOpen/Motion_PortVariable.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/Motion_MotionBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class MechatronicsBuilder;
    }
    class Expression;
    class ExternalFileReferenceAdapter;
    class IExternalFileReferencer;
    namespace Motion
    {
        class ConfigurationParameter;
    }
    namespace Motion
    {
        class ConfigurationParameterList;
    }
    namespace Motion
    {
        class InputPortAssociation;
    }
    namespace Motion
    {
        class InputPortAssociationList;
    }
    namespace Motion
    {
        class MotionBuilder;
    }
    namespace Motion
    {
        class OutputPortAssociation;
    }
    namespace Motion
    {
        class OutputPortAssociationList;
    }
    namespace Motion
    {
        class PortVariable;
    }
    namespace Motion
    {
        class PortVariableList;
    }
    namespace Motion
    {
        class _MechatronicsBuilderBuilder;
        class MechatronicsBuilderImpl;
        /** Represents a @link Motion::Mechatronics Motion::Mechatronics@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Motion::MechatronicsCollection::CreateMechatronicsBuilder  NXOpen::Motion::MechatronicsCollection::CreateMechatronicsBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        CommunicationInterval.Value </term> <description> 
         
        0.01 (millimeters part), 0.01 (inches part) </description> </item> 

        <item><term> 
         
        CommunicationIntervalType </term> <description> 
         
        Constant </description> </item> 

        <item><term> 
         
        IntegrationType </term> <description> 
         
        CoSimulation </description> </item> 

        <item><term> 
         
        MechatronicsType </term> <description> 
         
        Amesim </description> </item> 

        <item><term> 
         
        Purpose </term> <description> 
         
        Import </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  MechatronicsBuilder : public NXOpen::Motion::MotionBuilder, public virtual NXOpen::IExternalFileReferencer
        {
            /**  @brief 
                    The Mechatronics Type
                     

             
                    
                    Possible values are Simulink or Amesim
                    Warning: Starting with Simcenter 2019.1, the Matlab option is renamed to Simulink 
                    
                    */
            public: enum MechatronicsModelType
            {
                MechatronicsModelTypeAmesim/** amesim */ ,
                MechatronicsModelTypeSimulink/** simulink */ ,
                MechatronicsModelTypeGeneric/** generic */ ,
                MechatronicsModelTypeFmi/** fmi */ 
            };

            /** the mechatronics purpose type - possible values are Import and Export*/
            public: enum PurposeType
            {
                PurposeTypeImport/** import */ ,
                PurposeTypeExport/** export */ 
            };

            /** the mechatronics integration type - possible values are ModelExchange and CoSimulation*/
            public: enum SolverIntegrationType
            {
                SolverIntegrationTypeCoSimulation/** co simulation */ ,
                SolverIntegrationTypeModelExchange/** model exchange */ 
            };

            /** the mechatronics communication interval type - only for Amesim, Generic and FMI! - possible values are Constant and Variable*/
            public: enum SolverCommunicationIntervalType
            {
                SolverCommunicationIntervalTypeConstant/** constant */ ,
                SolverCommunicationIntervalTypeVariable/** variable */ 
            };

            /** the mechatronics communication run type - only for Generic and FMI - possible values are Serial and Parallel*/
            public: enum SolverCommunicationRunType
            {
                SolverCommunicationRunTypeSerial/** serial */ ,
                SolverCommunicationRunTypeParallel/** parallel */ 
            };

            /** the element that defines if a Generic Co-Sim is master or not*/
            public: enum Master
            {
                MasterNo/** no */ ,
                MasterYes/** yes */ 
            };

            /** the enum for external file reference object id of mechatronics */
            public: enum ReferenceObjectId
            {
                ReferenceObjectIdModalFile/** modal file */ ,
                ReferenceObjectIdHeaderFile/** header file */ ,
                ReferenceObjectIdParameterFile/** parameter file */ 
            };

            private: MechatronicsBuilderImpl * m_mechatronicsbuilder_impl;
            private: friend class  _MechatronicsBuilderBuilder;
            protected: MechatronicsBuilder();
            public: ~MechatronicsBuilder();
            /**Returns  the mechatronics type - possible values are Simulink, Amesim, Generic or FMI
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MechatronicsBuilder::MechatronicsModelType MechatronicsType
            (
            );
            /**Sets  the mechatronics type - possible values are Simulink, Amesim, Generic or FMI
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMechatronicsType
            (
                NXOpen::Motion::MechatronicsBuilder::MechatronicsModelType mechatronicsType /** mechatronicstype */ 
            );
            /**Returns  the purpose of the mechatronics element - possible values are Import, Export 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MechatronicsBuilder::PurposeType Purpose
            (
            );
            /**Sets  the purpose of the mechatronics element - possible values are Import, Export 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPurpose
            (
                NXOpen::Motion::MechatronicsBuilder::PurposeType purpose /** purpose */ 
            );
            /**Returns  the integration type - possible values are CoSimulation, ModelExchange 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MechatronicsBuilder::SolverIntegrationType IntegrationType
            (
            );
            /**Sets  the integration type - possible values are CoSimulation, ModelExchange 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetIntegrationType
            (
                NXOpen::Motion::MechatronicsBuilder::SolverIntegrationType integrationType /** integrationtype */ 
            );
            /**Returns  the communication interval type - possible values are Constant, Variable 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MechatronicsBuilder::SolverCommunicationIntervalType CommunicationIntervalType
            (
            );
            /**Sets  the communication interval type - possible values are Constant, Variable 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCommunicationIntervalType
            (
                NXOpen::Motion::MechatronicsBuilder::SolverCommunicationIntervalType communicationIntervalType /** communicationintervaltype */ 
            );
            /**Returns  the communication interval  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * CommunicationInterval
            (
            );
            /**Sets  the communication interval  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCommunicationInterval
            (
                NXOpen::Expression * communicationInterval /** communicationinterval */ 
            );
            /**Returns  the name of the element
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the name of the element
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the element
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the active configuration parameters group name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString ActiveParameterGroupName
            (
            );
            /**Sets  the active configuration parameters group name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActiveParameterGroupName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the active configuration parameters group name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetActiveParameterGroupName
            (
                const char * name /** name */ 
            );
            /**Returns  the active port variable  group name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString ActivePortVariableGroupName
            (
            );
            /**Sets  the active port variable  group name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActivePortVariableGroupName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the active port variable  group name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetActivePortVariableGroupName
            (
                const char * name /** name */ 
            );
            /** Reads the input/output definition of a mechatronics element from an external file, when purpose 
                    is specified as Export.
                    Allowed file types are .txt, .csv, and Excel files
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ReadInterfaceFromFile
            (
                const NXString & filePath /** filepath */ 
            );
            /** Reads the input/output definition of a mechatronics element from an external file, when purpose 
                    is specified as Export.
                    Allowed file types are .txt, .csv, and Excel files
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void ReadInterfaceFromFile
            (
                const char * filePath /** filepath */ 
            );
            /** Updates the list of available inputs and outputs (for both MATLAB ans Amesim models) and Configuration Parametersa and port Variables (for Amesim only) from the selected HeaderFile/ModelFile 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void RefreshLists
            (
            );
            /** Allows retrieving the list of names  of available configuration parameter groups 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXString> GetParameterGroupNames
            (
            );
            /** Allows retrieving the list of names  of available port variables groups  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXString> GetPortVariableGroupNames
            (
            );
            /** Retrieves an input port association from its name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::InputPortAssociation * GetInput
            (
                const NXString & inputName /** inputname */ 
            );
            /** Retrieves an input port association from its name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Motion::InputPortAssociation * GetInput
            (
                const char * inputName /** inputname */ 
            );
            /**  Retrieves an output port association from its name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::OutputPortAssociation * GetOutput
            (
                const NXString & inputName /** inputname */ 
            );
            /**  Retrieves an output port association from its name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Motion::OutputPortAssociation * GetOutput
            (
                const char * inputName /** inputname */ 
            );
            /** Searches for the watch variable by name in the active group 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PortVariable * GetPortVariable
            (
                const NXString & inputName /** inputname */ 
            );
            /** Searches for the watch variable by name in the active group 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Motion::PortVariable * GetPortVariable
            (
                const char * inputName /** inputname */ 
            );
            /** Searches for the watch parameter by name in the active group 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ConfigurationParameter * GetConfigurationParameter
            (
                const NXString & inputName /** inputname */ 
            );
            /** Searches for the watch parameter by name in the active group 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            NXOpen::Motion::ConfigurationParameter * GetConfigurationParameter
            (
                const char * inputName /** inputname */ 
            );
            /**Returns  the input ports list for Amesim and Simulink 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::InputPortAssociationList * InputPortsListAmesimAndSimulink
            (
            );
            /**Returns  the output ports list 
             <br>  @deprecated Deprecated in NX1872.0.0.  Use @link NXOpen::Motion::MechatronicsBuilder::OutputPortsListAmesimAndSimulink NXOpen::Motion::MechatronicsBuilder::OutputPortsListAmesimAndSimulink@endlink  <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1872.0.0.  Use NXOpen::Motion::MechatronicsBuilder::OutputPortsListAmesimAndSimulink") NXOpen::Motion::OutputPortAssociationList * OutputPortsList
            (
            );
            /**Returns  the input ports list for Generic and FMI
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::InputPortAssociationList * InputPortsListGenericAndFMI
            (
            );
            /**Returns  the output ports list for Amesim and Simulink 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::OutputPortAssociationList * OutputPortsListAmesimAndSimulink
            (
            );
            /** Creates a new output list item including expressions  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::OutputPortAssociation * NewOutputListItem
            (
            );
            /**Returns  the output ports list for Generic and FMI
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::OutputPortAssociationList * OutputPortsListGenericAndFMI
            (
            );
            /** Creates a new input list item including expressions  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::InputPortAssociation * NewInputListItem
            (
            );
            /**Returns  the configuration/watch parameters list 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ConfigurationParameterList * ConfigurationParametersList
            (
            );
            /**Returns  the watch variables list 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::PortVariableList * PortVariablesList
            (
            );
            /**Returns  the run type mechatronics element for Generic and FMI - possible values are Serial, Parallel
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MechatronicsBuilder::SolverCommunicationRunType CommunicationRunType
            (
            );
            /**Sets  the run type mechatronics element for Generic and FMI - possible values are Serial, Parallel
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCommunicationRunType
            (
                NXOpen::Motion::MechatronicsBuilder::SolverCommunicationRunType communicationRunType /** communicationruntype */ 
            );
            /**Returns  a value that represents if a Generic Co-Sim is master - possible values Yes or No
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MechatronicsBuilder::Master IsMaster
            (
            );
            /**Sets  a value that represents if a Generic Co-Sim is master - possible values Yes or No
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetMaster
            (
                NXOpen::Motion::MechatronicsBuilder::Master isMaster /** ismaster */ 
            );
            /**Returns  the function name for Generic and FMI
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString FunctionName
            (
            );
            /**Sets  the function name for Generic and FMI
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFunctionName
            (
                const NXString & functionName /** functionname */ 
            );
            /**Sets  the function name for Generic and FMI
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetFunctionName
            (
                const char * functionName /** functionname */ 
            );
            /**Returns  the number of solve iterations for Generic and FMI
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int NumSolveIterations
            (
            );
            /**Sets  the number of solve iterations for Generic and FMI
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetNumSolveIterations
            (
                int numSolveIterations /** numsolveiterations */ 
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
