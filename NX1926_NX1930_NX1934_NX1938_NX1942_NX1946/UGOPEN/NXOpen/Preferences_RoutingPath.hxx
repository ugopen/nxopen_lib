#ifndef NXOpen_PREFERENCES_ROUTINGPATH_HXX_INCLUDED
#define NXOpen_PREFERENCES_ROUTINGPATH_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_RoutingPath.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class RoutingPath;
    }
    namespace Preferences
    {
        class RoutingApplicationView;
    }
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Preferences
    {
        class RoutingPathImpl;
        /** The RoutingPath object stores a set of path preferences.  <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::RoutingApplicationView  NXOpen::Preferences::RoutingApplicationView @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  RoutingPath
        {
            /** Describes the types of curves allowed in a routing application.  */
            public: enum CurveType
            {
                CurveTypeLine/** UF_ROUTE_AV_CURVES_LINES */,
                CurveTypeArc/** UF_ROUTE_AV_CURVES_ARCS */,
                CurveTypeSpline/** UF_ROUTE_AV_CURVES_SPLINES */
            };

            /** Describes the types of corners allowed in a routing application.  */
            public: enum AllowedCornerType
            {
                AllowedCornerTypeNone/** UF_ROUTE_AV_CORNERS_NONE */,
                AllowedCornerTypeBend/** UF_ROUTE_AV_CORNERS_BEND */,
                AllowedCornerTypeCope/** UF_ROUTE_AV_CORNERS_COPE */,
                AllowedCornerTypeMiter/** UF_ROUTE_AV_CORNERS_MITER */,
                AllowedCornerTypeSbend/** UF_ROUTE_AV_CORNERS_SBEND */
            };

            /** Describes the types of corners allowed in a routing application.  */
            public: enum DefaultCornerType
            {
                DefaultCornerTypeNone/** No Corner*/ = -1,
                DefaultCornerTypeBend/** Bend Corner*/,
                DefaultCornerTypeMiter/** Miter Corner */,
                DefaultCornerTypeBendTable/** Not really a corner type.
                                                                                  Used to indicate use of bend table in
                                                                                  conjunction with a Bend corner */
            };

            /** Describes method used to determine bend radius on a bend or sbend corner */
            public: enum RadiusMethod
            {
                RadiusMethodRadius/** Use specified radius */,
                RadiusMethodRatio/** Use ratio to stock diameter to determine radius */,
                RadiusMethodTable/** Use radius obtained from a bend table lookup */,
                RadiusMethodInnerRadius/** Use inner radius */
            };

            /** Describes units of specified radius value @link NXOpen::Preferences::RoutingPath::RadiusMethodRadius NXOpen::Preferences::RoutingPath::RadiusMethodRadius@endlink  only. */
            public: enum RadiusUnits
            {
                RadiusUnitsNone/** Unspecified. Use units of part file. */,
                RadiusUnitsInches/** Use inch units */,
                RadiusUnitsMillimeters/** Use metric (mm) units */
            };

            /** Should Smart RCPs be created during path creation in Create Path? */
            public: enum CreateSmartRcps
            {
                CreateSmartRcpsFalse/** Do not create smart RCPs. */,
                CreateSmartRcpsTrue/** Create smart RCPs. */
            };

            /** Should duplicate RCPs be merged after a Transform [Move or Copy] operation? */
            public: enum MergeDupRcps
            {
                MergeDupRcpsFalse/** Do not merge duplicate RCPs. */,
                MergeDupRcpsTrue/** Merge duplicate RCPs. */
            };

            /** Should new splines form tangencies with existing splines when they're created? */
            public: enum CreateTangency
            {
                CreateTangencyFalse/** Do not merge duplicate RCPs. */,
                CreateTangencyTrue/** Merge duplicate RCPs. */
            };

            /** Should points be added to existing spline when they are subdivided to preserve shape? */
            public: enum AddPointsToSpline
            {
                AddPointsToSplineFalse/** Do not merge duplicate RCPs. */,
                AddPointsToSplineTrue/** Merge duplicate RCPs. */
            };

            /** Should a branch selection confirmation dialog be show during Path selection? */
            public: enum ConfirmBranchSel
            {
                ConfirmBranchSelFalse/** Do not confirm branch selection. */,
                ConfirmBranchSelTrue/** Confirm branch selection. */
            };

            /** Should fixed length splines ignore length constraint violations and update? */
            public: enum ContinueUpdOnError
            {
                ContinueUpdOnErrorFalse/** false */ ,
                ContinueUpdOnErrorTrue/** true */ 
            };

            /** Path curve chaining methods 
             <br>  @deprecated Deprecated in NX1926.0.0.  No replacement. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX1926.0.0.  No replacement.") ChainMethod
            {
                ChainMethodNoBranch/** Curves must be mono-connected */,
                ChainMethodContinuous/** Tangents must match at each connection */,
                ChainMethodTangent/** Use curve with closest tangent when searching */,
                ChainMethodCycle/** Return all chains */,
                ChainMethodMinDist/** Chain with minimum path length */,
                ChainMethodMaxDist/** Chain with maximum path length */
            };

            /** Chain occurrences of curves ? [i.e. curves not in the work part] 
             <br>  @deprecated Deprecated in NX1926.0.0.  No replacement. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX1926.0.0.  No replacement.") OccChainable
            {
                OccChainableFalse/** false */ ,
                OccChainableTrue/** true */ 
            };

            /** Display a certain routing object? */
            public: enum DisplayObject
            {
                DisplayObjectFalse/** false */ ,
                DisplayObjectTrue/** true */ 
            };

            /** Create slope associativity constraints during line path creation [from ports only] */
            public: enum CreateSlopeConstraints
            {
                CreateSlopeConstraintsFalse/** false */ ,
                CreateSlopeConstraintsTrue/** true */ 
            };

            private: RoutingPathImpl * m_routingpath_impl;
            private: NXOpen::Preferences::RoutingApplicationView* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit RoutingPath(NXOpen::Preferences::RoutingApplicationView *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~RoutingPath();
            /** Query the types of curves allowed in an application view  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Preferences::RoutingPath::CurveType> GetAllowedCurves
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAllowedCurves
            (
                const std::vector<NXOpen::Preferences::RoutingPath::CurveType> & allowedCurves /** allowed curves */ 
            );
            /** Query the types of corners allowed in an application view  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Preferences::RoutingPath::AllowedCornerType> GetAllowedCorners
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAllowedCorners
            (
                const std::vector<NXOpen::Preferences::RoutingPath::AllowedCornerType> & allowedCorners /** allowed corners */ 
            );
            /** Query the default corner type in an application view  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::DefaultCornerType GetDefaultCorner
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDefaultCorner
            (
                NXOpen::Preferences::RoutingPath::DefaultCornerType defaultCorner /** default corner */ 
            );
            /** Query wether the default corner should use bend ratio.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::RadiusMethod GetBendRadiusMethod
            (
            );
            /** Set whether the default corner should use bend ratio. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBendRadiusMethod
            (
                NXOpen::Preferences::RoutingPath::RadiusMethod radiusMethod /** radius method */ 
            );
            /** Needs a work part and a loaded applicaiton view.
                        Radius units are converted to work part units automatically.
                        Returns -1 and quits if input requirements are not met.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetBendRadius
            (
            );
            /** Needs a work part and a loaded applicaiton view.
                        Radius units are assumed to be work part units and are set automatically.
                        Returns -1 and quits if input requirements are not met. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBendRadius
            (
                double bendRadius /** bend radius */ 
            );
            /** Query bend radius units stored in path preferences  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::RadiusUnits GetBendRadiusUnits
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBendRadiusUnits
            (
                NXOpen::Preferences::RoutingPath::RadiusUnits radiusUnits /** radius units */ 
            );
            /** Query default bend ratio. Used when default corner uses bend ratio method  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetBendRatio
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBendRatio
            (
                double bendRatio /** bend ratio */ 
            );
            /** Returns the bend radius table spreadsheet name. Used when default corner uses bend table method  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString GetBendRadiusTable
            (
            );
            /** Sets the bend radius table spreadsheet name. Used when default corner uses bend table method 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBendRadiusTable
            (
                const NXString & bendTableSpreadsheet /** bend table spreadsheet */ 
            );
            /** Sets the bend radius table spreadsheet name. Used when default corner uses bend table method 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetBendRadiusTable
            (
                const char * bendTableSpreadsheet /** bend table spreadsheet */ 
            );
            /** Returns the rows of data from the bend radius table for the given stock part number.  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::CharacteristicList *> GetBendRadiusTableDataForStock
            (
                const NXString & stockPartNumber /** stock part number */ 
            );
            /** Returns the rows of data from the bend radius table for the given stock part number.  @return  
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            std::vector<NXOpen::Routing::CharacteristicList *> GetBendRadiusTableDataForStock
            (
                const char * stockPartNumber /** stock part number */ 
            );
            /** Create smart RCPs during path creation?  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::CreateSmartRcps GetCreateSmartRcps
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCreateSmartRcps
            (
                NXOpen::Preferences::RoutingPath::CreateSmartRcps createSmart /** create smart */ 
            );
            /** Merge duplicate RCPs after a Transform [Move or Copy] operation?  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::MergeDupRcps GetMergeDuplicateRcps
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMergeDuplicateRcps
            (
                NXOpen::Preferences::RoutingPath::MergeDupRcps mergeDuplicates /** merge duplicates */ 
            );
            /** Confirm branch selection during Path selection?  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::ConfirmBranchSel GetConfirmBranchSelection
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetConfirmBranchSelection
            (
                NXOpen::Preferences::RoutingPath::ConfirmBranchSel confirmBranchSel /** confirm branch sel */ 
            );
            /** Query default stock offset expression used by Create Path and Create Stock Offset Port [via Qualify Part]  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXString GetStockOffsetExpression
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockOffsetExpression
            (
                const NXString & stockOffsetExp /** stock offset exp */ 
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            void SetStockOffsetExpression
            (
                const char * stockOffsetExp /** stock offset exp */ 
            );
            /** Query default down direction for fixed length splines  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::ContinueUpdOnError GetContinueUpdateOnError
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetContinueUpdateOnError
            (
                NXOpen::Preferences::RoutingPath::ContinueUpdOnError update /** update */ 
            );
            /** Create slope constraints during line path creation to and from fitting ports?  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::CreateSlopeConstraints GetCreateSlopeConstraints
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCreateSlopeConstraints
            (
                NXOpen::Preferences::RoutingPath::CreateSlopeConstraints createSlopeConstraints /** create slope constraints */ 
            );
            /** Query path curve chaining method  @return  
             <br>  @deprecated Deprecated in NX1926.0.0.  No replacement. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  No replacement.") NXOpen::Preferences::RoutingPath::ChainMethod GetCurveChainingMethod
            (
            );
            /** 
             <br>  @deprecated Deprecated in NX1926.0.0.  No replacement. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  No replacement.") void SetCurveChainingMethod
            (
                NXOpen::Preferences::RoutingPath::ChainMethod chainMethod /** chain method */ 
            );
            /** Query all the types of chainable curve types  @return  
             <br>  @deprecated Deprecated in NX1926.0.0.  No replacement. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  No replacement.") std::vector<NXOpen::Preferences::RoutingPath::CurveType> GetChainableCurveTypes
            (
            );
            /** 
             <br>  @deprecated Deprecated in NX1926.0.0.  No replacement. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  No replacement.") void SetChainableCurveTypes
            (
                const std::vector<NXOpen::Preferences::RoutingPath::CurveType> & chainableCurveTypes /** chainable curve types */ 
            );
            /** Query if curve occurrences [curves not in the work part] are chainable  @return  
             <br>  @deprecated Deprecated in NX1926.0.0.  No replacement. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  No replacement.") NXOpen::Preferences::RoutingPath::OccChainable GetOccurrenceChainable
            (
            );
            /** 
             <br>  @deprecated Deprecated in NX1926.0.0.  No replacement. <br>  

             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  No replacement.") void SetOccurrenceChainable
            (
                NXOpen::Preferences::RoutingPath::OccChainable occChainable /** occ chainable */ 
            );
            /** Display RCPs?  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::DisplayObject GetDisplayRcps
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDisplayRcps
            (
                NXOpen::Preferences::RoutingPath::DisplayObject displayRcps /** display rcps */ 
            );
            /** Display ports?  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::DisplayObject GetDisplayPorts
            (
            );
            /** Display ports in the model? 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDisplayPorts
            (
                NXOpen::Preferences::RoutingPath::DisplayObject displayPorts /** display ports */ 
            );
            /** Display segment constraints?  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::DisplayObject GetDisplaySegmentConstraints
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDisplaySegmentConstraints
            (
                NXOpen::Preferences::RoutingPath::DisplayObject displayConstraints /** display constraints */ 
            );
            /** Display anchors?  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::DisplayObject GetDisplayAnchors
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDisplayAnchors
            (
                NXOpen::Preferences::RoutingPath::DisplayObject displayAnchors /** display anchors */ 
            );
            /** Displayed port length  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetDisplayPortLength
            (
            );
            /** 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDisplayPortLength
            (
                double displayPortLength /** display port length */ 
            );
            /** Heal Path curve type.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::CurveType GetHealPathCurveType
            (
            );
            /** 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetHealPathCurveType
            (
                NXOpen::Preferences::RoutingPath::CurveType healPathCurveType /** heal path curve type */ 
            );
            /** Create tangency between splines?  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::CreateTangency GetCreateSplineTangency
            (
            );
            /**  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCreateSplineTangency
            (
                NXOpen::Preferences::RoutingPath::CreateTangency applyTangency /** apply tangency */ 
            );
            /** Add points to subdivided splines to maintain shape?  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::AddPointsToSpline GetCreateNewPointsOnSubdivide
            (
            );
            /**  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCreateNewPointsOnSubdivide
            (
                NXOpen::Preferences::RoutingPath::AddPointsToSpline addPoints /** add points */ 
            );
            /** Display connected ports?  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Preferences::RoutingPath::DisplayObject GetDisplayConnectedPorts
            (
            );
            /** Display connected ports in the model 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDisplayConnectedPorts
            (
                NXOpen::Preferences::RoutingPath::DisplayObject displayConnectedPorts /** display connected ports */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
