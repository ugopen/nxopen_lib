#ifndef NXOpen_TRANSLATORVALIDATOR_HXX_INCLUDED
#define NXOpen_TRANSLATORVALIDATOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     TranslatorValidator.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DexBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class TranslatorValidator;
    class Builder;
    class DexBuilder;
    class _TranslatorValidatorBuilder;
    class TranslatorValidatorImpl;

    /// \cond NX_NO_DOC 
    /**
    Represents a class that is used for Validating the translators code
     <br> To create a new instance of this class, use @link NXOpen::DebugSession::CreateTranslatorValidator  NXOpen::DebugSession::CreateTranslatorValidator @endlink  <br> 
    Default values.
    <list type="table"> 
     
    <listheader><term> 
    Property</term>  <description> 
    Value</description> </listheader>
    <item><term> 
     
    CopyFile </term> <description> 
     
    0 </description> </item> 

    </list> 

     <br>  Created in NX1872.0.0.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  TranslatorValidator : public NXOpen::Builder
    {
        /** Enumeration used to define the translator type. */
        public: enum TranslatorType
        {
            TranslatorTypeStepExport/** step export */ ,
            TranslatorTypeDxfdwgExport/** dxfdwg export */ ,
            TranslatorTypeAcisExport/** acis export */ ,
            TranslatorTypeProeExport/** proe export */ ,
            TranslatorTypeCativ4Export/** cativ4export */ ,
            TranslatorTypeIgesExport/** iges export */ ,
            TranslatorTypeStepImport/** step import */ ,
            TranslatorTypeDxfdwgImport/** dxfdwg import */ ,
            TranslatorTypeAcisImport/** acis import */ ,
            TranslatorTypeProeImport/** proe import */ ,
            TranslatorTypeCativ4Import/** cativ4import */ ,
            TranslatorTypeIgesImport/** iges import */ ,
            TranslatorTypeStep242Export/** step242export */ ,
            TranslatorTypeStep242Import/** step242import */ ,
            TranslatorTypeStep203Export/** step203export */ ,
            TranslatorTypeStep203Import/** step203import */ ,
            TranslatorTypeStep214Export/** step214export */ ,
            TranslatorTypeStep214Import/** step214import */ ,
            TranslatorTypeUgto2dExport/** ugto2d export */ ,
            TranslatorTypeSTLExport/** stlexport */ ,
            TranslatorTypeStepFileOpen/** step file open */ ,
            TranslatorTypeDxfdwgFileOpen/** dxfdwg file open */ ,
            TranslatorTypeAcisFileOpen/** acis file open */ ,
            TranslatorTypeProeFileOpen/** proe file open */ ,
            TranslatorTypeCativ4FileOpen/** cativ4file open */ ,
            TranslatorTypeIgesFileOpen/** iges file open */ ,
            TranslatorTypeStepSaveAs/** step save as */ ,
            TranslatorTypeDxfdwgSaveAs/** dxfdwg save as */ ,
            TranslatorTypeAcisSaveAs/** acis save as */ ,
            TranslatorTypeProeSaveAs/** proe save as */ ,
            TranslatorTypeCativ4SaveAs/** cativ4save as */ ,
            TranslatorTypeIgesSaveAs/** iges save as */ ,
            TranslatorTypeStep242FileOpen/** step242file open */ ,
            TranslatorTypeStep242SaveAs/** step242save as */ ,
            TranslatorTypeStep203FileOpen/** step203file open */ ,
            TranslatorTypeStep203SaveAs/** step203save as */ ,
            TranslatorTypeStep214FileOpen/** step214file open */ ,
            TranslatorTypeStep214SaveAs/** step214save as */ ,
            TranslatorTypeIfcImport/** ifc import */ ,
            TranslatorTypeIfcExport/** ifc export */ ,
            TranslatorTypeIfcFileOpen/** ifc file open */ ,
            TranslatorTypeIfcSaveAs/** ifc save as */ ,
            TranslatorTypeObjImport/** obj import */ ,
            TranslatorTypeObjExport/** obj export */ ,
            TranslatorTypeObjFileOpen/** obj file open */ ,
            TranslatorTypeObjSaveAs/** obj save as */ ,
            TranslatorTypeCatiav5Export/** catiav5export */ ,
            TranslatorTypeCatiav5Import/** catiav5import */ ,
            TranslatorTypeCatiav5FileOpen/** catiav5file open */ ,
            TranslatorTypeCatiav5SaveAs/** catiav5save as */ ,
            TranslatorTypeExport3MF/** export3mf */ ,
            TranslatorTypeImport3MF/** import3mf */ ,
            TranslatorTypeFileOpen3MF/** file open3mf */ ,
            TranslatorTypeSaveAs3MF/** save as3mf */ 
        };

        private: TranslatorValidatorImpl * m_translatorvalidator_impl;
        private: friend class  _TranslatorValidatorBuilder;
        protected: TranslatorValidator();
        public: ~TranslatorValidator();
        /**Returns  the log validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: bool LogfileValidation
        (
        );
        /**Sets  the log validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLogfileValidation
        (
            bool logfileValidation /** logfile validation */ 
        );
        /**Returns  the fileSize validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: bool FilesizeValidation
        (
        );
        /**Sets  the fileSize validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFilesizeValidation
        (
            bool filesizeValidation /** filesize validation */ 
        );
        /**Returns  the file size used for validation. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: double Filesize
        (
        );
        /**Sets  the file size used for validation. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFilesize
        (
            double filesize /** filesize */ 
        );
        /**Returns  the master file size used for validation. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: double MasterFilesize
        (
        );
        /**Sets  the master file size used for validation. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetMasterFilesize
        (
            double masterfilesize /** masterfilesize */ 
        );
        /**Returns  the output file - the name of file where output is being written 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NXString OutputFile
        (
        );
        /**Sets  the output file - the name of file where output is being written 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the output file - the name of file where output is being written 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        void SetOutputFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the log file - the name of file where log is being written 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NXString LogFile
        (
        );
        /**Sets  the log file - the name of file where log is being written 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLogFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the log file - the name of file where log is being written 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        void SetLogFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the ui validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: bool UIOptionValidation
        (
        );
        /**Sets  the ui validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUIOptionValidation
        (
            bool uioptionValidation /** uioption validation */ 
        );
        /**Returns  the validatortype used for validation. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::TranslatorValidator::TranslatorType Translatortype
        (
        );
        /**Sets  the validatortype used for validation. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTranslatortype
        (
            NXOpen::TranslatorValidator::TranslatorType translatortype /** translatortype */ 
        );
        /**Returns  the builder used for validation. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::DexBuilder * Builder
        (
        );
        /**Sets  the builder used for validation. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBuilder
        (
            NXOpen::DexBuilder * buildertype /** buildertype */ 
        );
        /**Returns  the bodies validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: bool BodiesValidation
        (
        );
        /**Sets  the bodies validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBodiesValidation
        (
            bool bodiesValidation /** bodies validation */ 
        );
        /**Returns  the curves validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: bool CurvesValidation
        (
        );
        /**Sets  the curves validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCurvesValidation
        (
            bool curvesValidation /** curves validation */ 
        );
        /**Returns  the setting file - the setting file name used for validation 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: NXString SettingFile
        (
        );
        /**Sets  the setting file - the setting file name used for validation 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSettingFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the setting file - the setting file name used for validation 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        void SetSettingFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the setting file validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: bool SettingFileValidation
        (
        );
        /**Sets  the setting file validation used. 
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSettingFileValidation
        (
            bool settingfileValidation /** settingfile validation */ 
        );
        /**Returns  the image validation used. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: bool ImageValidation
        (
        );
        /**Sets  the image validation used. 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetImageValidation
        (
            bool imageValidation /** image validation */ 
        );
        /**Returns  the License file validation used. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: bool LicenseValidation
        (
        );
        /**Sets  the License file validation used. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetLicenseValidation
        (
            bool licenseValidation /** license validation */ 
        );
        /**Returns  the copy file validation used. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: bool CopyFile
        (
        );
        /**Sets  the copy file validation used. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCopyFile
        (
            bool copyFile /** copy file */ 
        );
    };

    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
