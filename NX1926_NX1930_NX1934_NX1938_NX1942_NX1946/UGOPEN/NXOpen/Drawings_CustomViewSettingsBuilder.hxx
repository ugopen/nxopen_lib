#ifndef NXOpen_DRAWINGS_CUSTOMVIEWSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_CUSTOMVIEWSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_CustomViewSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class CustomViewSettingsBuilder;
    }
    class Builder;
    class NXColor;
    namespace Drawings
    {
        class _CustomViewSettingsBuilderBuilder;
        class CustomViewSettingsBuilderImpl;
        /** this class represents the "this class represents Drawings.CustomViewSettingsBuilder.
                It consists of the settings which optimize the view creation for large assemblies and these
                settings are subset of the view style settings  <br> To create a new instance of this class, use @link NXOpen::Drawings::DraftingViewCollection::CreateCustomViewSettingsBuilder  NXOpen::Drawings::DraftingViewCollection::CreateCustomViewSettingsBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DelayUpdateOnCreation </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DelayViewUpdate </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        HiddenLinesFont </term> <description> 
         
        Invisible </description> </item> 

        <item><term> 
         
        InterferingSolids </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        RenderTrueHiddenLine </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowAdjacentBlends </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowCenterLines </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowCheckBoundaryStatus </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowEdgesHiddenByEdges </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowHiddenLines </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowSelfHiddenLines </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowSmoothEdgeEndGapsLock </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowSmoothEdges </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowTraceLines </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowUVGrids </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowVIEndGapsLock </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ShowVirtualIntersections </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        SmallFeatures </term> <description> 
         
        Hide </description> </item> 

        <item><term> 
         
        ThreadStandard </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        TraceLineCreateGapsLock </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  CustomViewSettingsBuilder : public NXOpen::Builder
        {
            /** the thread standards options */
            public: enum ThreadStandards
            {
                ThreadStandardsNone/** none */ ,
                ThreadStandardsAnsiSimplified/** ansi simplified */ ,
                ThreadStandardsAnsiSchematic/** ansi schematic */ ,
                ThreadStandardsAnsiDetailed/** ansi detailed */ ,
                ThreadStandardsIsoSimplified/** iso simplified */ ,
                ThreadStandardsIsoDetailed/** iso detailed */ ,
                ThreadStandardsEskdSimplified/** eskd simplified */ 
            };

            /** the options for interfering curves */
            public: enum Interfering
            {
                InterferingNone/** none */ ,
                InterferingWithoutInterference/** without interference */ ,
                InterferingWithInterference/** with interference */ 
            };

            /** the options for small features */
            public: enum Features
            {
                FeaturesShowAll/** show all */ ,
                FeaturesSimplify/** simplify */ ,
                FeaturesHide/** hide */ 
            };

            /** the options for all the fonts used in the custom view settings dialog */
            public: enum Font
            {
                FontInvisible/** Invisible     */,
                FontSolid/** Solid         */,
                FontDashed/** Dashed        */,
                FontPhantom/** Phantom       */,
                FontCenterline/** CenterLine    */,
                FontDotted/** Dotted        */,
                FontLongDashed/** Long Dashed   */,
                FontDottedDashed/** Dotted Dashed */,
                FontEight/** Long Dashed Double Dotted */,
                FontNine/** Long Dashed Dotted for OOTB fonts and Undulating for shipbuilding fonts */,
                FontTen/** Long Dashed Triplicate Dotted for OOTB fonts and Zigzag for shipbuilding fonts */,
                FontEleven/** Long Dashed Double Short Dashed for OOTB fonts and Railway for shipbuilding fonts */
            };

            /** the width options for all the line width used in the customize view settings dialog */
            public: enum Width
            {
                WidthOriginal/** Original */,
                WidthOne/** One      */ = 5,
                WidthTwo/** Two      */,
                WidthThree/** Three    */,
                WidthFour/** Four     */,
                WidthFive/** Five     */,
                WidthSix/** Six      */,
                WidthSeven/** Seven    */,
                WidthEight/** Eight    */,
                WidthNine/** Nine     */
            };

            private: CustomViewSettingsBuilderImpl * m_customviewsettingsbuilder_impl;
            private: friend class  _CustomViewSettingsBuilderBuilder;
            protected: CustomViewSettingsBuilder();
            public: ~CustomViewSettingsBuilder();
            /**Returns  the thread standard 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::ThreadStandards ThreadStandard
            (
            );
            /**Sets  the thread standard 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetThreadStandard
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::ThreadStandards threadStandard /** threadstandard */ 
            );
            /**Returns  the minimum pitch 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double MinimumPitch
            (
            );
            /**Sets  the minimum pitch 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMinimumPitch
            (
                double minimumPitch /** minimumpitch */ 
            );
            /**Returns  the render true hidden line 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool RenderTrueHiddenLine
            (
            );
            /**Sets  the render true hidden line 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetRenderTrueHiddenLine
            (
                bool renderTrueHiddenLine /** rendertruehiddenline */ 
            );
            /**Returns  the show virtual intersections 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowVirtualIntersections
            (
            );
            /**Sets  the show virtual intersections 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowVirtualIntersections
            (
                bool showVirtualIntersections /** showvirtualintersections */ 
            );
            /**Returns  the show adjacent blends 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowAdjacentBlends
            (
            );
            /**Sets  the show adjacent blends 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowAdjacentBlends
            (
                bool showAdjacentBlends /** showadjacentblends */ 
            );
            /**Returns  the virtual inter section color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * VirtualInterSectionColor
            (
            );
            /**Sets  the virtual inter section color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVirtualInterSectionColor
            (
                NXOpen::NXColor * virtualInterSectionColor /** virtualintersectioncolor */ 
            );
            /**Returns  the virtual inter section font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Font VirtualInterSectionFont
            (
            );
            /**Sets  the virtual inter section font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVirtualInterSectionFont
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Font virtualInterSectionFont /** virtualintersectionfont */ 
            );
            /**Returns  the virtual inter section width 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Width VirtualInterSectionWidth
            (
            );
            /**Sets  the virtual inter section width 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVirtualInterSectionWidth
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Width virtualInterSectionWidth /** virtualintersectionwidth */ 
            );
            /**Returns  the show end gaps lock 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowVIEndGapsLock
            (
            );
            /**Sets  the show end gaps lock 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowVIEndGapsLock
            (
                bool showEndGapsLock /** showendgapslock */ 
            );
            /**Returns  the show end gaps value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ShowVIEndGapsValue
            (
            );
            /**Sets  the show end gaps value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowVIEndGapsValue
            (
                double showEndGapsValue /** showendgapsvalue */ 
            );
            /**Returns  the show trace lines 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowTraceLines
            (
            );
            /**Sets  the show trace lines 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowTraceLines
            (
                bool showTraceLines /** showtracelines */ 
            );
            /**Returns  the trace line visible color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * TraceLineVisibleColor
            (
            );
            /**Sets  the trace line visible color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTraceLineVisibleColor
            (
                NXOpen::NXColor * traceLineVisibleColor /** tracelinevisiblecolor */ 
            );
            /**Returns  the trace line visible font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Font TraceLineVisibleFont
            (
            );
            /**Sets  the trace line visible font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTraceLineVisibleFont
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Font traceLineVisibleFont /** tracelinevisiblefont */ 
            );
            /**Returns  the trace line visible font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Width TraceLineVisibleWidth
            (
            );
            /**Sets  the trace line visible font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTraceLineVisibleWidth
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Width traceLineVisibleWidth /** tracelinevisiblewidth */ 
            );
            /**Returns  the trace line hidden color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * TraceLineHiddenColor
            (
            );
            /**Sets  the trace line hidden color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTraceLineHiddenColor
            (
                NXOpen::NXColor * traceLineHiddenColor /** tracelinehiddencolor */ 
            );
            /**Returns  the trace line hidden font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Font TraceLineHiddenFont
            (
            );
            /**Sets  the trace line hidden font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTraceLineHiddenFont
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Font traceLineHiddenFont /** tracelinehiddenfont */ 
            );
            /**Returns  the trace line hidden Width 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Width TraceLineHiddenWidth
            (
            );
            /**Sets  the trace line hidden Width 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTraceLineHiddenWidth
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Width traceLineHiddenWidth /** tracelinehiddenwidth */ 
            );
            /**Returns  the trace line create gaps lock 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TraceLineCreateGapsLock
            (
            );
            /**Sets  the trace line create gaps lock 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTraceLineCreateGapsLock
            (
                bool traceLineCreateGapsLock /** tracelinecreategapslock */ 
            );
            /**Returns  the trace line create gaps value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double TraceLineCreateGapsValue
            (
            );
            /**Sets  the trace line create gaps value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTraceLineCreateGapsValue
            (
                double traceLineCreateGapsValue /** tracelinecreategapsvalue */ 
            );
            /**Returns  the show smooth edges 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowSmoothEdges
            (
            );
            /**Sets  the show smooth edges 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowSmoothEdges
            (
                bool showSmoothEdges /** showsmoothedges */ 
            );
            /**Returns  the smooth edge color pick 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * SmoothEdgeColor
            (
            );
            /**Sets  the smooth edge color pick 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSmoothEdgeColor
            (
                NXOpen::NXColor * smoothEdgeColor /** smoothedgecolor */ 
            );
            /**Returns  the smooth edge line font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Font SmoothEdgeFont
            (
            );
            /**Sets  the smooth edge line font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSmoothEdgeFont
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Font smoothEdgeLineFont /** smoothedgelinefont */ 
            );
            /**Returns  the smooth edges line hidden font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Width SmoothEdgeWidth
            (
            );
            /**Sets  the smooth edges line hidden font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSmoothEdgeWidth
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Width smoothEdgeLineWidth /** smoothedgelinewidth */ 
            );
            /**Returns  the show end gaps lock 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowSmoothEdgeEndGapsLock
            (
            );
            /**Sets  the show end gaps lock 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowSmoothEdgeEndGapsLock
            (
                bool showEndGapsLock /** showendgapslock */ 
            );
            /**Returns  the show end gaps value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double ShowSmoothEdgeEndGapsValue
            (
            );
            /**Sets  the show end gaps value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowSmoothEdgeEndGapsValue
            (
                double showEndGapsValue /** showendgapsvalue */ 
            );
            /**Returns  the show uvgrids 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowUVGrids
            (
            );
            /**Sets  the show uvgrids 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowUVGrids
            (
                bool showUVGrids /** showuvgrids */ 
            );
            /**Returns  the show check boundary status 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowCheckBoundaryStatus
            (
            );
            /**Sets  the show check boundary status 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowCheckBoundaryStatus
            (
                bool showCheckBoundaryStatus /** showcheckboundarystatus */ 
            );
            /**Returns  the show center lines 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowCenterLines
            (
            );
            /**Sets  the show center lines 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowCenterLines
            (
                bool showCenterLines /** showcenterlines */ 
            );
            /**Returns  the delay view update 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool DelayViewUpdate
            (
            );
            /**Sets  the delay view update 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDelayViewUpdate
            (
                bool delayViewUpdate /** delayviewupdate */ 
            );
            /**Returns  the delay update on creation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool DelayUpdateOnCreation
            (
            );
            /**Sets  the delay update on creation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDelayUpdateOnCreation
            (
                bool delayUpdateOnCreation /** delayupdateoncreation */ 
            );
            /**Returns  the show hidden lines 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowHiddenLines
            (
            );
            /**Sets  the show hidden lines 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowHiddenLines
            (
                bool showHiddenLines /** showhiddenlines */ 
            );
            /**Returns  the hidden lines color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * HiddenLinesColor
            (
            );
            /**Sets  the hidden lines color 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenLinesColor
            (
                NXOpen::NXColor * hiddenLinesColor /** hiddenlinescolor */ 
            );
            /**Returns  the hidden lines font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Font HiddenLinesFont
            (
            );
            /**Sets  the hidden lines font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenLinesFont
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Font hiddenLinesFont /** hiddenlinesfont */ 
            );
            /**Returns  the hidden line hidden font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Width HiddenLinesWidth
            (
            );
            /**Sets  the hidden line hidden font 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetHiddenLinesWidth
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Width hiddenLinesWidth /** hiddenlineswidth */ 
            );
            /**Returns  the show edges hidden by edges 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowEdgesHiddenByEdges
            (
            );
            /**Sets  the show edges hidden by edges 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowEdgesHiddenByEdges
            (
                bool showEdgesHiddenByEdges /** showedgeshiddenbyedges */ 
            );
            /**Returns  the show self hidden lines 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowSelfHiddenLines
            (
            );
            /**Sets  the show self hidden lines 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowSelfHiddenLines
            (
                bool showSelfHiddenLines /** showselfhiddenlines */ 
            );
            /**Returns  the interfering solids 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Interfering InterferingSolids
            (
            );
            /**Sets  the interfering solids 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInterferingSolids
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Interfering interferingSolids /** interferingsolids */ 
            );
            /**Returns  the small features 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::CustomViewSettingsBuilder::Features SmallFeatures
            (
            );
            /**Sets  the small features 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSmallFeatures
            (
                NXOpen::Drawings::CustomViewSettingsBuilder::Features smallFeatures /** smallfeatures */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
