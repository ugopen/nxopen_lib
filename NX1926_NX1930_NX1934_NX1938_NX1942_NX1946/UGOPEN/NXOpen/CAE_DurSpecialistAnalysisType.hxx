#ifndef NXOpen_CAE_DURSPECIALISTANALYSISTYPE_HXX_INCLUDED
#define NXOpen_CAE_DURSPECIALISTANALYSISTYPE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DurSpecialistAnalysisType.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DurSpecialistSimulationObject.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ParamLibParameter.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DurSpecialistAnalysisType;
    }
    namespace CAE
    {
        class DurSpecialistSimulationObject;
    }
    class NXObject;
    class ParamLibParameter;
    namespace CAE
    {
        class _DurSpecialistAnalysisTypeBuilder;
        class DurSpecialistAnalysisTypeImpl;
        /**  @brief  Represent the @link NXOpen::CAE::DurSpecialistAnalysisType NXOpen::CAE::DurSpecialistAnalysisType@endlink  object  

          
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DurSpecialistAnalysisType : public NXOpen::NXObject
        {
            private: DurSpecialistAnalysisTypeImpl * m_durspecialistanalysistype_impl;
            private: friend class  _DurSpecialistAnalysisTypeBuilder;
            protected: DurSpecialistAnalysisType();
            public: ~DurSpecialistAnalysisType();
            /** Is type required.  @return  is the simulation object type required for the analysis type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: bool IsTypeRequired
            (
                const NXString & type /** is the neutral name of a simulation object type */
            );
            /** Is type required.  @return  is the simulation object type required for the analysis type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            bool IsTypeRequired
            (
                const char * type /** is the neutral name of a simulation object type */
            );
            /** Is type optional.  @return  is the simulation object type Optional for the analysis type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: bool IsTypeOptional
            (
                const NXString & type /** is the neutral name of a simulation object type */
            );
            /** Is type optional.  @return  is the simulation object type Optional for the analysis type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            bool IsTypeOptional
            (
                const char * type /** is the neutral name of a simulation object type */
            );
            /** Is type implicit.  @return  is the simulation object type Implicit for the analysis type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: bool IsTypeImplicit
            (
                const NXString & type /** is the neutral name of a simulation object type */
            );
            /** Is type implicit.  @return  is the simulation object type Implicit for the analysis type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            bool IsTypeImplicit
            (
                const char * type /** is the neutral name of a simulation object type */
            );
            /** Get the @link NXOpen::CAE::DurSpecialistSimulationObject NXOpen::CAE::DurSpecialistSimulationObject@endlink  object.  @return  The durability simulation object 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: NXOpen::CAE::DurSpecialistSimulationObject * GetSimulationObject
            (
                const NXString & type /** is the neutral name of a simulation object type */
            );
            /** Get the @link NXOpen::CAE::DurSpecialistSimulationObject NXOpen::CAE::DurSpecialistSimulationObject@endlink  object.  @return  The durability simulation object 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            NXOpen::CAE::DurSpecialistSimulationObject * GetSimulationObject
            (
                const char * type /** is the neutral name of a simulation object type */
            );
            /**Returns  the Parameter. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ParamLibParameter * Parameter
            (
            );
            /** Synchronize the @link NXOpen::CAE::DurSpecialistAnalysisType NXOpen::CAE::DurSpecialistAnalysisType@endlink  object. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : sc_dur_specialist ("Simcenter Specialist Durability") */
            public: void Synchronize
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
