#ifndef NXOpen_CAE_POSTSCENARIODESCRIPTORBUILDER_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIODESCRIPTORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioDescriptorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioDescriptorBuilder;
    }
    class Builder;
    namespace CAE
    {
        class CaePart;
    }
    namespace CAE
    {
        class PostScenarioQueryContext;
    }
    namespace CAE
    {
        class PostScenarioQueryResults;
    }
    namespace CAE
    {
        class PostScenarioValueCollector;
    }
    namespace CAE
    {
        class _PostScenarioDescriptorBuilderBuilder;
        class PostScenarioDescriptorBuilderImpl;

        /// \cond NX_NO_DOC 
        /**  @brief  This class represents a builder for Post Scenario Descriptors.  

         

                
                 <br> 
                A @link CAE::PostScenario CAE::PostScenario@endlink  visualization is based on a @link CAE::PostScenarioDescriptor CAE::PostScenarioDescriptor@endlink 
                which acts as a processing template on top of data coming from a @link CAE::DataSource CAE::DataSource@endlink .
                 <br> 
                 <br> 
                This class allows you to define your own scenario descriptors (or, processing templates) to implement
                user-specific advanced post-processing techniques on available data.
                 <br> 
                 <br> 
                A scenario descriptor is made out of two parts:
                <ol>
                <li>a declarative part, in this case an XML file following the scenarios.dtd schema</li>
                <li>an interactive part, in this case a set of NXOpen callbacks</li>
                </ol>
                 <br> 
                 <br> 
                The Scenario-based Data Visualization subsystem performs queries to the specification of your
                XML file and performs the necessary joins. In some cases, the interactive part of your scenario
                descriptor may jump in to pre-process the query parameters. The XML file is used as a basis
                for generating User Interface withing the Scenario-based Data Visualization Navigator.
                 <br> 
                 <br> 
                After a query is performed following a user's choice (or, the choice of an NXOpen Program), your
                main callback, the Transformation Function, is invoked. The input to this callback consists of the
                data sets picked by the user, a context parameter that provides you with any optionally selected
                FE models, and an output parameter which represents the data that will be plotted.
                 <br> 
                 <br> 
                The advantage of this system is that it allows NXOpen programmers to have control over data queries
                against @link CAE::DataSource CAE::DataSource@endlink  objects in order to perform mathematical transformations
                on this data to better help understand the results. Through the @link CAE::DataSource CAE::DataSource@endlink  you
                have access to a number of file formats, and through the available @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink 
                your scenario descriptor is empowered to create advanced post-processing visualizations via a common API.
                In this way, data acquisition and data display are abstracted behind a common API, making on-the-fly 
                visualization switching straight forward.
                 <br> 
                 <br> 
                The intention of this API is to be invoked as part of the  @code ufsta @endcode / @code Startup @endcode 
                mechanism of NXOpen Programs (see UGII_USER_DIR/startup), or via File -> Execute -> NXOpen Program
                and File -> Execute -> Unload Shared Library. Feel free to consult the examples in UGII_BASE_DIR/ugopen/SampleNXOpenPrograms
                for the two techniques used to define scenario descriptors as NXOpen plugins.
                 <br> 
                 <br> 
                If using the  @code ufsta @endcode  or  @code Startup @endcode  mechanism, register a Part Open and
                Part Create callback, and use the Scenario Descriptor Builder at part open/creation time to
                ensure you scenario descriptor is available.
                 <br> 
                 <br> 
                If using the File -> Execute -> NXOpen Program mechanism, ensure your NXOpen program has proper
                cleanup code written to gracefully handle File -> Execute -> Unload Shared Library. See the example
                programs for a reference. This mechanism allows you to load scenarios on-the-fly as needed instead
                of loading them all at part creation time; it is most useful for development. Note, not all languages
                are supported by File -> Execute -> NXOpen Program.
                 <br> 
                
              <br> No support for KF.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioDescriptorBuilder : public NXOpen::Builder
        {
            public: /** Called to retrieve information about this scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback0<NXString> DescriptionCallback;
            public: /**  @brief Called to allow the scenario to perform transformations on the queried data. 

             
                    
                        
                         <br> 
                        This callback gets called after data is queried and prepared for your
                        scenario to apply further transformations to it, and to prepare it for
                        your chosen @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                         <br> 
                         <br> 
                        It is expected that your transformation callback processes data in <tt>input</tt>
                        conforming to your intrinsic rules, and populates <tt>output</tt> in a way that conforms
                        to the target @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                         <br> 
                         <br> 
                        If your scenario does not support or it does not consider the <tt>input</tt> data
                        to be valid at a high level, it is expected that you leave the <tt>output</tt> parameter
                        untouched and log your error message via _ja_method_CAE.PostScenarioMessageCollector.Warning_/ja_method_
                        retrievable through _ja_property_CAE.PostScenarioQueryContext.MessageCollector_/ja_property_.
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback4<void, NXOpen::CAE::CaePart *, NXOpen::CAE::PostScenarioQueryResults *, NXOpen::CAE::PostScenarioQueryContext *, NXOpen::CAE::PostScenarioQueryResults *> TransformationCallback;
            public: /**  @brief This callback is used to retrieve values for choice-type configuration variables 

             
                    
                        
                         <br> 
                        This callback gets called to provide data for <tt>ConfigurationVariable</tt>s of 
                        type <tt>choice</tt> or <tt>multi_choice</tt>.
                         <br> 
                         <br> 
                        It is expected that you return at least one value.
                         <br> 
                         <br> 
                        The effect of a choice configuration variable is that the user will be presented
                        with a list of values when setting up a scenario (see @link CAE::PostScenarioBuilder CAE::PostScenarioBuilder@endlink ).
                        After the user binds values to that variable, your Transformation Functions (see @link CAE::PostScenarioDescriptorBuilder::AddTransformationCallback CAE::PostScenarioDescriptorBuilder::AddTransformationCallback@endlink )
                        will see these values in the @link CAE::PostScenarioConfigurationGroup CAE::PostScenarioConfigurationGroup@endlink . The key
                        will match your variable's name, and the values will be one or more of the values as returned by
                        this callback (depending on whether the type is <tt>choice</tt> or <tt>multi_choice</tt>).
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<void, NXOpen::CAE::CaePart *, NXOpen::CAE::PostScenarioValueCollector *> ChoiceProviderCallback;
            public: /**  @brief This callback is used disable variables (c.f. @link CAE::PostScenarioSelectionParameters CAE::PostScenarioSelectionParameters@endlink ) based on the value of configuration variables. 

             
                    
                        
                         <br> 
                        This callback gets called in GUI context to allow graying out some @link CAE::PostScenarioConfigurationVariable CAE::PostScenarioConfigurationVariable@endlink  or @link CAE::PostScenarioVariable CAE::PostScenarioVariable@endlink 
                        based on the value of a @link CAE::PostScenarioConfigurationVariable CAE::PostScenarioConfigurationVariable@endlink .
                         <br> 
                         <br> 
                        This is done in conjunction with the "sensitivity" type relation from the XML descriptor.
                         <br> 
                         <br> 
                        This function returns a boolean True value if the "To" variables are to be disabled.
                         <br> 
                         <br> 
                        The input are the bound values to the "From" @link CAE::PostScenarioConfigurationVariable CAE::PostScenarioConfigurationVariable@endlink .
                         <br> 
                         <br> 
                        Multiple "sensitivity" relations can affect the same "To" variables, in which case the totality of
                        relations trying to disable a "To" variable will be evaluated in a boolean <tt>OR</tt> expression.
                        You can think of this set of relations affecting the same variables as <tt>enabled = R1 NOR R2 NOR R3 ...</tt>
                        which allows you to build more complex interaction between multiple @link CAE::PostScenarioConfigurationVariable CAE::PostScenarioConfigurationVariable@endlink s.
                         <br> 
                         <br> 
                        A disabled @link CAE::PostScenarioVariable CAE::PostScenarioVariable@endlink  implies all values are selected by the GUI.
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            typedef NXOpen::Callback2<bool, NXOpen::CAE::CaePart *, NXOpen::CAE::PostScenarioValueCollector *> SensitivityCallback;
            private: PostScenarioDescriptorBuilderImpl * m_postscenariodescriptorbuilder_impl;
            private: friend class  _PostScenarioDescriptorBuilderBuilder;
            protected: PostScenarioDescriptorBuilder();
            public: ~PostScenarioDescriptorBuilder();
            /**Returns  the path to an XML file describing the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString XmlPath
            (
            );
            /**Sets  the path to an XML file describing the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetXmlPath
            (
                const NXString & path /** path */ 
            );
            /**Sets  the path to an XML file describing the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetXmlPath
            (
                const char * path /** path */ 
            );
            /**Returns  the contents of an XML document that describes the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString XmlText
            (
            );
            /**Sets  the contents of an XML document that describes the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetXmlText
            (
                const NXString & text /** text */ 
            );
            /**Sets  the contents of an XML document that describes the scenario. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetXmlText
            (
                const char * text /** text */ 
            );
            /**  @brief Add a description callback 

             

                        
                        This callback allows your scenario to summarily describe itself.
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddDescriptionCallback
            (
                const NXOpen::CAE::PostScenarioDescriptorBuilder::DescriptionCallback&  cb /** cb */ 
            );
            /**  @brief Add a transformation callback 

             

                        
                        This callback gets called after data is queried and prepared for your
                        scenario to apply further transformations to it, and to prepare it for
                        your chosen @link CAE::PostScenarioVisualizationDefinition CAE::PostScenarioVisualizationDefinition@endlink .
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddTransformationCallback
            (
                const NXOpen::CAE::PostScenarioDescriptorBuilder::TransformationCallback&  cb /** cb */ 
            );
            /**  @brief Add a choice provider callback 

             

                        
                        The callback is mapped to a Configuration Variable of type <tt>choice</tt> or <tt>multi_choice</tt> by
                        an ID that is unique within this scenario. The same ID must appear in the <tt>callback</tt> attribute of
                        your Configuration Variable in the XML descriptor, as well as in your NXOpen method call. The same
                        ID will appear as a key in the @link CAE::PostScenarioConfigurationGroup CAE::PostScenarioConfigurationGroup@endlink  of your
                        @link CAE::PostScenarioQueryResults CAE::PostScenarioQueryResults@endlink  in your transformation function.
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddChoiceProviderCallback
            (
                const NXString & name /** the ID of this choice provider; this should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::ChoiceProviderCallback&  cb /** cb */ 
            );
            /**  @brief Add a choice provider callback 

             

                        
                        The callback is mapped to a Configuration Variable of type <tt>choice</tt> or <tt>multi_choice</tt> by
                        an ID that is unique within this scenario. The same ID must appear in the <tt>callback</tt> attribute of
                        your Configuration Variable in the XML descriptor, as well as in your NXOpen method call. The same
                        ID will appear as a key in the @link CAE::PostScenarioConfigurationGroup CAE::PostScenarioConfigurationGroup@endlink  of your
                        @link CAE::PostScenarioQueryResults CAE::PostScenarioQueryResults@endlink  in your transformation function.
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void AddChoiceProviderCallback
            (
                const char * name /** the ID of this choice provider; this should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::ChoiceProviderCallback&  cb /** cb */ 
            );
            /**  @brief Add a sensitivity callback 

             

                        
                        The callback is mapped to a Relation by
                        an ID that is unique within this scenario. The same ID must appear in the <tt>Callback</tt> element's id attribute of
                        your Relation in the XML descriptor, as well as in your NXOpen method call. The same
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void AddSensitivityCallback
            (
                const NXString & name /** the ID of this sensitivity callback; this should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::SensitivityCallback&  cb /** cb */ 
            );
            /**  @brief Add a sensitivity callback 

             

                        
                        The callback is mapped to a Relation by
                        an ID that is unique within this scenario. The same ID must appear in the <tt>Callback</tt> element's id attribute of
                        your Relation in the XML descriptor, as well as in your NXOpen method call. The same
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void AddSensitivityCallback
            (
                const char * name /** the ID of this sensitivity callback; this should be referenced in the XML */,
                const NXOpen::CAE::PostScenarioDescriptorBuilder::SensitivityCallback&  cb /** cb */ 
            );
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
