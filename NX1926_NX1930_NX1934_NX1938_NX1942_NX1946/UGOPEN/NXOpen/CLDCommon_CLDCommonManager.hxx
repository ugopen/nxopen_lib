#ifndef NXOpen_CLDCOMMON_CLDCOMMONMANAGER_HXX_INCLUDED
#define NXOpen_CLDCOMMON_CLDCOMMONMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CLDCommon_CLDCommonManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/CLDCommon_FastPlacementUtilityBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cldcommon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CLDCommon
    {
        class CLDCommonManager;
    }
    class Session;
    namespace CLDCommon
    {
        class FastPlacementUtilityBuilder;
    }
    namespace CLDCommon
    {
        class LoadLineBuilder;
    }
    class Part;
    namespace CLDCommon
    {
        class CLDCommonManagerImpl;

        /// \cond NX_NO_DOC 
        /** Represents a Manager of CLD Common dialogs  <br> Use the static method in this class to obtain an instance.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CLDCOMMONEXPORT  CLDCommonManager
        {
            private: CLDCommonManagerImpl * m_cldcommonmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit CLDCommonManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static CLDCommonManager* theCLDCommonManager;
            /** Returns the CLDCommonManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static CLDCommonManager* GetCLDCommonManager(NXOpen::Session *owner);
            public: ~CLDCommonManager();
            /** To calculate and set attribute group name  @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") OR ld_author (" Line Designer Advanced Author") OR ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::CLDCommon::LoadLineBuilder * CreateLoadLineBuilder
            (
            );
            /**Get the fast placement utility builder 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::CLDCommon::FastPlacementUtilityBuilder * GetFastPlacementUtilityBuilder
            (
                NXOpen::Part * part /** part */ 
            );
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
