#ifndef NXOpen_CAE_PLANARPARALLELMESHSLICING_HXX_INCLUDED
#define NXOpen_CAE_PLANARPARALLELMESHSLICING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PlanarParallelMeshSlicing.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_MeshSlicingData.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PlanarParallelMeshSlicing;
    }
    namespace CAE
    {
        class MeshSlicingData;
    }
    namespace CAE
    {
        class _PlanarParallelMeshSlicingBuilder;
        class PlanarParallelMeshSlicingImpl;

        /// \cond NX_NO_DOC 
        /**  @brief  Represents a 'MeshSlicingData' sub object, Planar Parallel 

           <br> This is a sub object of Mesh Slicing Data. Coordinate count can only be 3.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PlanarParallelMeshSlicing : public NXOpen::CAE::MeshSlicingData
        {
            private: PlanarParallelMeshSlicingImpl * m_planarparallelmeshslicing_impl;
            private: friend class  _PlanarParallelMeshSlicingBuilder;
            protected: PlanarParallelMeshSlicing();
            public: ~PlanarParallelMeshSlicing();
            /** Coordinates of direction vector of slicing plane
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void GetSlicingDirection
            (
                std::vector<double> & coordinates /** coordinates */ 
            );
            /** Coordinates of direction vector of slicing plane. Coordinate count can only be 3
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSlicingDirection
            (
                const std::vector<double> & coordinates /** coordinates */ 
            );
            /** Reference point or starting point (x,y,z). Point coordinate count can only be 3.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void GetReferencePoint
            (
                std::vector<double> & pointCoords /** pointcoords */ 
            );
            /** Reference point or starting point (x,y,z). Point coordinate count can only be 3.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetReferencePoint
            (
                const std::vector<double> & pointCoords /** pointcoords */ 
            );
            /** Array of distances from reference point
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void GetDistancesFromReferencePoint
            (
                std::vector<double> & distances /** distances */ 
            );
            /** Array of distances from reference point
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetDistancesFromReferencePoint
            (
                const std::vector<double> & distances /** distances */ 
            );
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
