#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISEXBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISEXBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_SectionAnalysisExBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_CurveAlignedBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_InteractiveBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_IsoparametricBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_ParallelPlanesExBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_RadialBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_XYZPlaneBuilder.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionAnalysisExBuilder;
        }
    }
    class Builder;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class CurveAlignedBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class InteractiveBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class IsoparametricBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class ParallelPlanesExBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class RadialBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class XYZPlaneBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    class SelectPointList;
    class SelectTaggedObjectList;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _SectionAnalysisExBuilderBuilder;
            class SectionAnalysisExBuilderImpl;
            /** Represents a @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExObject NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExObject@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisExBuilder  NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisExBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            Alignment </term> <description> 
             
            XYZPlane </description> </item> 

            <item><term> 
             
            CalculationMethod </term> <description> 
             
            Curvature </description> </item> 

            <item><term> 
             
            CurveAligned.IsSpacingEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            CurveAligned.Number </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            CurveAligned.Offset </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            CurveAligned.Spacing </term> <description> 
             
            25 </description> </item> 

            <item><term> 
             
            CurveAligned.SpecifiedPlane.Plane </term> <description> 
             
            View </description> </item> 

            <item><term> 
             
            CurveAligned.UseProjectedCurve </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            Interactive.IsCutInfiniteEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            IsShowInflectionPointsEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            IsShowLengthEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            IsShowPeakPointsEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            Isoparametric.IsSpacingEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            Isoparametric.IsUEnabled </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            Isoparametric.IsVEnabled </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            Isoparametric.Number </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            Isoparametric.Spacing </term> <description> 
             
            25 </description> </item> 

            <item><term> 
             
            NeedleDirection </term> <description> 
             
            Outside </description> </item> 

            <item><term> 
             
            Output </term> <description> 
             
            AnalysisObject </description> </item> 

            <item><term> 
             
            ParallelPlanes.IsNumberEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            ParallelPlanes.IsSpacingEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            ParallelPlanes.Number </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            ParallelPlanes.Offset </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            ParallelPlanes.Spacing </term> <description> 
             
            50 (millimeters part), 2 (inches part) </description> </item> 

            <item><term> 
             
            Placement </term> <description> 
             
            Uniform </description> </item> 

            <item><term> 
             
            Radial.IsSpacingEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            Radial.Number </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            Radial.Offset </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            Radial.RotationAxis </term> <description> 
             
            View </description> </item> 

            <item><term> 
             
            Radial.Spacing </term> <description> 
             
            72 </description> </item> 

            <item><term> 
             
            ScalingMethod </term> <description> 
             
            Linear </description> </item> 

            <item><term> 
             
            XYZPlane.IsNumberEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            XYZPlane.IsSpacingEnabled </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            XYZPlane.IsXEnabled </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            XYZPlane.IsYEnabled </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            XYZPlane.IsZEnabled </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            XYZPlane.Number </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            XYZPlane.Spacing </term> <description> 
             
            50 (millimeters part), 2 (inches part) </description> </item> 

            </list> 

             <br>  Created in NX7.0.0.  <br>  
            */
            class NXOPENCPP_GEOMETRICANALYSISEXPORT  SectionAnalysisExBuilder : public NXOpen::Builder
            {
                /** The types of the section placement*/
                public: enum PlacementType
                {
                    PlacementTypeUniform/** Uniformly distributed */,
                    PlacementTypeThroughPoints/** Through the specified points */,
                    PlacementTypeBetweenPoints/** Distributed between two specified points*/,
                    PlacementTypeInteractive/** Interactively specified */
                };

                /** The section alignment type */
                public: enum AlignmentType
                {
                    AlignmentTypeXYZPlane/** The cutting planes are perpendicular to X, Y or Z plane */,
                    AlignmentTypeParallelPlanes/** The cutting planes are parallel to a specified plane */,
                    AlignmentTypeCurveAligned/** The cutting planes are perpendicular to specified curves */,
                    AlignmentTypeIsoparametric/** The sections are along isoparametric lines */,
                    AlignmentTypeRadial/** The cutting planes are distributed along a circle */
                };

                /** The output options */
                public: enum OutputType
                {
                    OutputTypeAnalysisObject/** Analysis Object */,
                    OutputTypeSectionCurves/** section curves */,
                    OutputTypeBoth/** Both Analysis Object and section curves */
                };

                /** The needle direction */
                public: enum NeedleDirectionType
                {
                    NeedleDirectionTypeInside/** Inside */,
                    NeedleDirectionTypeOutside/** Outside */
                };

                /** The calculation method */
                public: enum CalculationMethodType
                {
                    CalculationMethodTypeCurvature/** Curvature */,
                    CalculationMethodTypeRadiusofCurvature/** Radius of curvature */
                };

                /** The scaling method */
                public: enum ScalingMethodType
                {
                    ScalingMethodTypeLinear/** Linear */,
                    ScalingMethodTypeLogarithmic/** Logarithmic */
                };

                private: SectionAnalysisExBuilderImpl * m_sectionanalysisexbuilder_impl;
                private: friend class  _SectionAnalysisExBuilderBuilder;
                protected: SectionAnalysisExBuilder();
                public: ~SectionAnalysisExBuilder();
                /**Returns  the selected objects 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectTaggedObjectList * SelectObject
                (
                );
                /**Returns  the placement 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::PlacementType Placement
                (
                );
                /**Sets  the placement 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetPlacement
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::PlacementType placement /** placement */ 
                );
                /**Returns  the specified points 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::SelectPointList * SpecifyPoint
                (
                );
                /**Returns  the Interactive placement specification. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::PlacementTypeInteractive NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::PlacementTypeInteractive@endlink  
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::InteractiveBuilder * Interactive
                (
                );
                /**Returns  the alignment type 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentType Alignment
                (
                );
                /**Sets  the alignment type 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetAlignment
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentType alignment /** alignment */ 
                );
                /**Returns  the XYZ Planes section specification. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeXYZPlane NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeXYZPlane@endlink  
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::XYZPlaneBuilder * XYZPlane
                (
                );
                /**Returns  the Parallel Planes section specification. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeParallelPlanes NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeParallelPlanes@endlink  
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::ParallelPlanesExBuilder * ParallelPlanes
                (
                );
                /**Returns  the Curve Aligned section specification. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeCurveAligned NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeCurveAligned@endlink  
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::CurveAlignedBuilder * CurveAligned
                (
                );
                /**Returns  the Isoparametric section specification. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeIsoparametric NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeIsoparametric@endlink  
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::IsoparametricBuilder * Isoparametric
                (
                );
                /**Returns  the Radial section specification. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeCurveAligned NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::AlignmentTypeCurveAligned@endlink  
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::RadialBuilder * Radial
                (
                );
                /**Returns  the comb options specification
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricUtilities::CombOptionsBuilder * CombOptions
                (
                );
                /**Returns  a value indicating whether to show the peak points 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsShowPeakPointsEnabled
                (
                );
                /**Sets  a value indicating whether to show the peak points 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowPeakPointsEnabled
                (
                    bool peak /** peak */ 
                );
                /**Returns  a value indicating whether to show the inflection points 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsShowInflectionPointsEnabled
                (
                );
                /**Sets  a value indicating whether to show the inflection points 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowInflectionPointsEnabled
                (
                    bool inflection /** inflection */ 
                );
                /**Returns  a value indicating whether to show the length of each section curve 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsShowLengthEnabled
                (
                );
                /**Sets  a value indicating whether to show the length of each section curve 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowLengthEnabled
                (
                    bool length /** length */ 
                );
                /**Returns  the output 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::OutputType Output
                (
                );
                /**Sets  the output 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetOutput
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::OutputType output /** output */ 
                );
                /**Returns  the needle direction 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::NeedleDirectionType NeedleDirection
                (
                );
                /**Sets  the needle direction 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNeedleDirection
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::NeedleDirectionType needleDirection /** needledirection */ 
                );
                /**Returns  the calculation method 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::CalculationMethodType CalculationMethod
                (
                );
                /**Sets  the calculation method 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetCalculationMethod
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::CalculationMethodType calculationMethod /** calculationmethod */ 
                );
                /**Returns  the scaling method 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::ScalingMethodType ScalingMethod
                (
                );
                /**Sets  the scaling method 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetScalingMethod
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisExBuilder::ScalingMethodType scalingMethod /** scalingmethod */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
