#ifndef NXOpen_ROUTING_DESIGNRULEVIOLATION_HXX_INCLUDED
#define NXOpen_ROUTING_DESIGNRULEVIOLATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_DesignRuleViolation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class DesignRuleViolation;
    }
    class NXObject;
    namespace Routing
    {
        class DesignRule;
    }
    namespace Routing
    {
        class DesignRuleOverride;
    }
    namespace Routing
    {
        class DesignRuleViolationLocation;
    }
    namespace Routing
    {
        class _DesignRuleViolationBuilder;
        class DesignRuleViolationImpl;
        /** Represents @link NXOpen::Routing::DesignRuleViolation NXOpen::Routing::DesignRuleViolation@endlink  object  <br> Design Rule Violation object is created automatically during design rule check  <br> 
         <br>  Created in NX4.0.2.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  DesignRuleViolation : public NXOpen::NXObject
        {
            /** Design Rule Violation Location Object Blank Option */
            public: enum BlankOption
            {
                BlankOptionBlank/** blank */ ,
                BlankOptionUnblank/** unblank */ 
            };

            private: DesignRuleViolationImpl * m_designruleviolation_impl;
            private: friend class  _DesignRuleViolationBuilder;
            protected: DesignRuleViolation();
            public: ~DesignRuleViolation();
            /**Returns  the short description of the design rule violation is returned 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString ShortDescription
            (
            );
            /**Sets  the short description of the design rule violation is returned 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetShortDescription
            (
                const NXString & shortDescription /** short description */ 
            );
            /**Sets  the short description of the design rule violation is returned 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetShortDescription
            (
                const char * shortDescription /** short description */ 
            );
            /**Returns  the long description of the design rule violation is returned 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString LongDescription
            (
            );
            /**Sets  the long description of the design rule violation is returned 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetLongDescription
            (
                const NXString & longDescription /** long description */ 
            );
            /**Sets  the long description of the design rule violation is returned 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetLongDescription
            (
                const char * longDescription /** long description */ 
            );
            /** Get the array of objects in violation  @return  Caller frees the array 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::NXObject *> GetObjects
            (
            );
            /** Sets the array of objects in violation 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetObjects
            (
                const std::vector<NXOpen::NXObject *> & objects /** Caller frees the array */
            );
            /** Add an object in violation to the violation 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AddObjects
            (
                const std::vector<NXOpen::Routing::DesignRuleViolation *> & objects /** objects */ 
            );
            /**Returns  the override object for the violation is inquired 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::DesignRuleOverride * Override
            (
            );
            /**Sets  the override object for the violation is inquired 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetOverride
            (
                NXOpen::Routing::DesignRuleOverride * overrideTag /** overridetag */ 
            );
            /**Returns  the date and time the violation was created or updated.
                     *  The time stamp is number of seconds since the UNIX epoch (midnight GMT, 1 January 1970).
                     
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: int TimeStamp
            (
            );
            /**Sets  the date and time the violation was created or updated.
                     *  The time stamp is number of seconds since the UNIX epoch (midnight GMT, 1 January 1970).
                     
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetTimeStamp
            (
                int timeStamp /** time stamp */ 
            );
            /** Sets the violation override 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetViolationOverride
            (
                const NXString & user /** user */ ,
                const NXString & reason /** reason */ ,
                int timestamp /** timestamp */ 
            );
            /** Sets the violation override 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetViolationOverride
            (
                const char * user /** user */ ,
                const char * reason /** reason */ ,
                int timestamp /** timestamp */ 
            );
            /** Removes violation override from given violation object. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveViolationOverride
            (
            );
            /** Violation is overridden or not is inquired  @return   
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsRuleOverridden
            (
            );
            /** Override object will be deleted 
             <br>  Created in NX4.0.3.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void DeleteRuleOverride
            (
                NXOpen::Routing::DesignRuleOverride * deleteObject /** deleteobject */ 
            );
            /** 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetLocations
            (
                const std::vector<NXOpen::Routing::DesignRuleViolationLocation *> & violationLocations /** violationlocations */ 
            );
            /** This will give all violation location objects stored in calling violation object.  @return  Array of @link NXOpen::Routing::DesignRuleViolationLocation NXOpen::Routing::DesignRuleViolationLocation@endlink  object. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::DesignRuleViolationLocation *> GetLocations
            (
            );
            /** This will add given number of violation location objects. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AddViolationLocations
            (
                const std::vector<NXOpen::Routing::DesignRuleViolationLocation *> & locationObjects /** Array of violation locations to be added. */
            );
            /** This function will blank location objects of given violation. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void BlankLocationObjectsOfViolation
            (
                NXOpen::Routing::DesignRuleViolation::BlankOption blankOption /** blank option */ 
            );
            /** This will return violation location object stored at given postion of array.
                        If there is no object at the given position, it will give appropriate message.
                        and return NULL  @return  ViolationLocation object at given array position. 
             <br>  @deprecated Deprecated in NX8.0.3.  Use @link NXOpen::Routing::DesignRuleViolation::GetLocations NXOpen::Routing::DesignRuleViolation::GetLocations@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX8.0.3.  Use NXOpen::Routing::DesignRuleViolation::GetLocations instead.") NXOpen::Routing::DesignRuleViolationLocation * GetViolationLocation
            (
                int* arrayPosition /** array position */ 
            );
            /** This will set violation location object at given postion of array.
                        If there is already an object at the given position, it will delete that
                        object and set with new one. 
             <br>  @deprecated Deprecated in NX8.0.3.  Use @link NXOpen::Routing::DesignRuleViolation::AddViolationLocations NXOpen::Routing::DesignRuleViolation::AddViolationLocations@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX8.0.3.  Use NXOpen::Routing::DesignRuleViolation::AddViolationLocations instead.") void SetViolationLocation
            (
                int arrayPosition /** array position */ ,
                NXOpen::Routing::DesignRuleViolationLocation * locationObject /** ViolationLocation object to be set at given array position. */
            );
            /** Returns the Design Rule that owns this violation.  @return  
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::Routing::CustomManager::DesignRule NXOpen::Routing::CustomManager::DesignRule@endlink  instead. <br>  

             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::Routing::CustomManager::DesignRule instead.") NXOpen::Routing::DesignRule * GetOwningDesignRule
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
