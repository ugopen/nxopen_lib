#ifndef NXOpen_DRAWINGS_TRACKDRAWINGCHANGESGENERALBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_TRACKDRAWINGCHANGESGENERALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_TrackDrawingChangesGeneralBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/LineColorFontWidthBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class TrackDrawingChangesGeneralBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class LineColorFontWidthBuilder;
    namespace Drawings
    {
        class _TrackDrawingChangesGeneralBuilderBuilder;
        class TrackDrawingChangesGeneralBuilderImpl;
        /**
            Represents a @link NXOpen::Drawings::TrackDrawingChangesGeneralBuilder NXOpen::Drawings::TrackDrawingChangesGeneralBuilder@endlink 
            
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  TrackDrawingChangesGeneralBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Represents compare method type*/
            public: enum CompareMethodType
            {
                CompareMethodTypeAgainstAnotherDrawing/**This option is used to compare different part over current part*/,
                CompareMethodTypeAgainstSnapshotDataInActiveDrawing/**This option is used to compare current part on itself*/,
                CompareMethodTypeOpenSavedComparisonReport/**This option is used to open a compare report that is saved in the current part*/
            };

            /** Represents baseline Of comparison type*/
            public: enum BaselineOfComparisonType
            {
                BaselineOfComparisonTypeSnapshot/** snapshot */ ,
                BaselineOfComparisonTypeTrackedChanges/** tracked changes */ 
            };

            /**Represents snapshot data to use type*/
            public: enum SnapshotDataToUseType
            {
                SnapshotDataToUseTypeAskAtRunTime/** This option tells to show messages at rumtime */,
                SnapshotDataToUseTypeAlwaysUseExistingData/** This option will use existing snapshot data */,
                SnapshotDataToUseTypeAlwaysCreateNewData/** This option will always create new snapshot data*/,
                SnapshotDataToUseTypeCreateNewDataifNoneExists/** This option will create new sanpshot data if none exists*/
            };

            /** Represents symbol type*/
            public: enum SymbolType
            {
                SymbolTypeCircle/** circle */ ,
                SymbolTypeTriangleUp/** triangle up */ ,
                SymbolTypeTriangleDown/** triangle down */ ,
                SymbolTypeSquare/** square */ ,
                SymbolTypeHexagon/** hexagon */ 
            };

            private: TrackDrawingChangesGeneralBuilderImpl * m_trackdrawingchangesgeneralbuilder_impl;
            private: friend class  _TrackDrawingChangesGeneralBuilderBuilder;
            protected: TrackDrawingChangesGeneralBuilder();
            public: ~TrackDrawingChangesGeneralBuilder();
            /**Returns  the compare tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double CompareTolerance
            (
            );
            /**Sets  the compare tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCompareTolerance
            (
                double compareTolerance /** comparetolerance */ 
            );
            /**Returns  the baseline of comparison 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::BaselineOfComparisonType BaselineOfComparison
            (
            );
            /**Sets  the baseline of comparison 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBaselineOfComparison
            (
                NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::BaselineOfComparisonType baselineOfComparison /** baselineofcomparison */ 
            );
            /**Returns  the compare method  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::CompareMethodType CompareMethod
            (
            );
            /**Sets  the compare method  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCompareMethod
            (
                NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::CompareMethodType compareMethod /** comparemethod */ 
            );
            /**Returns  the restart id numbers with new report 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RestartIDNumbersWithNewReport
            (
            );
            /**Sets  the restart id numbers with new report 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetRestartIDNumbersWithNewReport
            (
                bool restartIDNumbersWithNewReport /** restartidnumberswithnewreport */ 
            );
            /**Returns  the increment id number per report 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncrementIDNumberPerReport
            (
            );
            /**Sets  the increment id number per report 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetIncrementIDNumberPerReport
            (
                bool incrementIDNumberPerReport /** incrementidnumberperreport */ 
            );
            /**Returns  the create overlay data with snapshot data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateOverlayDataWithSnapshotData
            (
            );
            /**Sets  the create overlay data with snapshot data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateOverlayDataWithSnapshotData
            (
                bool createOverlayDataWithSnapshotData /** createoverlaydatawithsnapshotdata */ 
            );
            /**Returns  the display change symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayChangeSymbol
            (
            );
            /**Sets  the display change symbol 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayChangeSymbol
            (
                bool displayChangeSymbol /** displaychangesymbol */ 
            );
            /**Returns  the preserve Change Symbol Display 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool PreserveChangeSymbolDisplay
            (
            );
            /**Sets  the preserve Change Symbol Display 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetPreserveChangeSymbolDisplay
            (
                bool preserveChangeSymbolDisplay /** preservechangesymboldisplay */ 
            );
            /**Returns  the change symbol type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::SymbolType ChangeSymbolType
            (
            );
            /**Sets  the change symbol type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetChangeSymbolType
            (
                NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::SymbolType symbolType /** symboltype */ 
            );
            /**Returns  the change symbol size 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double ChangeSymbolSize
            (
            );
            /**Sets  the change symbol size 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetChangeSymbolSize
            (
                double symbolSize /** symbolsize */ 
            );
            /**Returns  the change symbol line color font width 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * ChangeSymbolLineColorFontWidth
            (
            );
            /**Returns  the snapshot data to use 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::SnapshotDataToUseType SnapshotDataToUse
            (
            );
            /**Sets  the snapshot data to use 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSnapshotDataToUse
            (
                NXOpen::Drawings::TrackDrawingChangesGeneralBuilder::SnapshotDataToUseType snapshotDataToUse /** snapshotdatatouse */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
