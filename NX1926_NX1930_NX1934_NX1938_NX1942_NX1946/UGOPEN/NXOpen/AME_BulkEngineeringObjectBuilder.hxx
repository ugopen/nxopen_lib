#ifndef NXOpen_AME_BULKENGINEERINGOBJECTBUILDER_HXX_INCLUDED
#define NXOpen_AME_BULKENGINEERINGOBJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_BulkEngineeringObjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_Bulk3DPlacementBuilder.hxx>
#include <NXOpen/AME_EOAttributeHolder.hxx>
#include <NXOpen/AME_EODefAttributeHolder.hxx>
#include <NXOpen/AME_EngineeringObjectNameBuilder.hxx>
#include <NXOpen/AME_InsertSettingsBuilder.hxx>
#include <NXOpen/AME_ProductDefAttributeHolder.hxx>
#include <NXOpen/AME_SelectionBaseDefinitionBuilder.hxx>
#include <NXOpen/AME_SymbolLocationBuilder.hxx>
#include <NXOpen/AME_MultipleObjectsBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_SelectReuseLibraryItemBuilder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class BulkEngineeringObjectBuilder;
    }
    namespace AME
    {
        class Bulk3DPlacementBuilder;
    }
    namespace AME
    {
        class EOAttributeHolder;
    }
    namespace AME
    {
        class EODefAttributeHolder;
    }
    namespace AME
    {
        class EngineeringObjectNameBuilder;
    }
    namespace AME
    {
        class InsertSettingsBuilder;
    }
    namespace AME
    {
        class MultipleObjectsBuilder;
    }
    namespace AME
    {
        class ProductDefAttributeHolder;
    }
    namespace AME
    {
        class SelectAMEBaseNodeList;
    }
    namespace AME
    {
        class SelectionBaseDefinitionBuilder;
    }
    namespace AME
    {
        class SymbolLocationBuilder;
    }
    class NXObject;
    namespace Tooling
    {
        class SelectReuseLibraryItemBuilder;
    }
    namespace AME
    {
        class _BulkEngineeringObjectBuilderBuilder;
        class BulkEngineeringObjectBuilderImpl;
        /** BulkEngineeringObjectBuilder class will be used for bulk Engineering Object Operation.
             <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateBulkEngineeringObjectBuilder  NXOpen::AME::AMEManager::CreateBulkEngineeringObjectBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AspectPlacement </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        Bulk3DPlacement.PlacementAngle </term> <description> 
         
        ZeroDegree </description> </item> 

        <item><term> 
         
        Bulk3DPlacement.PlacementType </term> <description> 
         
        LefttoRight </description> </item> 

        <item><term> 
         
        InsertSettings.AspectPlacement </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        InsertSettings.CopiesPerParent </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        ShowInAutomation </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ShowInFunction </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ShowInLocation </term> <description> 
         
        false </description> </item> 

        <item><term> 
         
        ShowInProduct </term> <description> 
         
        false </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  BulkEngineeringObjectBuilder : public NXOpen::AME::MultipleObjectsBuilder
        {
            /** Choices for placement type, can be Place in Navigator or Place on Page or Place in Cabinet*/
            public: enum PlacementType
            {
                PlacementTypeNavigator/** navigator */ ,
                PlacementTypePage/** page */ ,
                PlacementTypeCabinet/** cabinet */ 
            };

            private: BulkEngineeringObjectBuilderImpl * m_bulkengineeringobjectbuilder_impl;
            private: friend class  _BulkEngineeringObjectBuilderBuilder;
            protected: BulkEngineeringObjectBuilder();
            public: ~BulkEngineeringObjectBuilder();
            /**Returns  the selected base definition
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectionBaseDefinitionBuilder * SelectedBaseDefinition
            (
            );
            /**Returns  the eo name and description ui block
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EngineeringObjectNameBuilder * EOName
            (
            );
            /**Returns  the select object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectAMEBaseNodeList * SelectedObjects
            (
            );
            /**Returns  the show in function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInFunction
            (
            );
            /**Sets  the show in function 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInFunction
            (
                bool showInFunction /** showinfunction */ 
            );
            /**Returns  the show in location 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInLocation
            (
            );
            /**Sets  the show in location 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInLocation
            (
                bool showInLocation /** showinlocation */ 
            );
            /**Returns  the show in product 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInProduct
            (
            );
            /**Sets  the show in product 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInProduct
            (
                bool showInProduct /** showinproduct */ 
            );
            /**Returns  the show in automation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ShowInAutomation
            (
            );
            /**Sets  the show in automation 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowInAutomation
            (
                bool showInAutomation /** showinautomation */ 
            );
            /**Returns  the aspect placement 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool AspectPlacement
            (
            );
            /**Sets  the aspect placement 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAspectPlacement
            (
                bool aspectPlacement /** aspectplacement */ 
            );
            /**Returns  the settings group having the aspect placement and copies per parent 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::InsertSettingsBuilder * InsertSettings
            (
            );
            /**Returns  the EO definition attribute holder 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EODefAttributeHolder * EoDefAttributeHolder
            (
            );
            /**Returns  the Product definition attribute holder 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::ProductDefAttributeHolder * ProductDefAttributeHolder
            (
            );
            /**Returns  the container for definition holders 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::EOAttributeHolder * EOAttributeHolder
            (
            );
            /**Returns  the selection definition builder
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Tooling::SelectReuseLibraryItemBuilder * ReuseLibraryItem
            (
            );
            /**Returns  the symbol location builder
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SymbolLocationBuilder * SymbolLocation
            (
            );
            /**Sets  the placement type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPlacementValue
            (
                NXOpen::AME::BulkEngineeringObjectBuilder::PlacementType placementType /** placementtype */ 
            );
            /**Returns  the placement type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::BulkEngineeringObjectBuilder::PlacementType PlacementValue
            (
            );
            /**Returns  the bulk 3d placement cabinet builder 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::Bulk3DPlacementBuilder * Bulk3DPlacement
            (
            );
            /**Returns  the is from mapping flag indicates if bulk engineering object instantiation is initiated from mapping 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool IsFromMapping
            (
            );
            /**Sets  the is from mapping flag indicates if bulk engineering object instantiation is initiated from mapping 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFromMapping
            (
                bool isFromMapping /** isfrommapping */ 
            );
            /** Selected external objects to be mapped 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExternalObjectsToMap
            (
                const std::vector<NXOpen::NXObject *> & externalObjects /** externalobjects */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
