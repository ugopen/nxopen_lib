#ifndef NXOpen_CAE_CONNECTIONS_LUMPEDMASS_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_LUMPEDMASS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_LumpedMass.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_Types.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_Connections_IConnection.hxx>
#include <NXOpen/CAE_Connections_ICsys.hxx>
#include <NXOpen/CAE_Connections_IMassConnectivity.hxx>
#include <NXOpen/CAE_Connections_IMassInertia.hxx>
#include <NXOpen/CAE_Connections_IMassPhysicalParams.hxx>
#include <NXOpen/CAE_Connections_IMassTarget.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class LumpedMass;
        }
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAE
    {
        namespace Connections
        {
            class IConnection;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ICsys;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IMassConnectivity;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IMassInertia;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IMassPhysicalParams;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IMassTarget;
        }
    }
    class CoordinateSystem;
    class Expression;
    class INXObject;
    class TaggedObject;
    namespace CAE
    {
        namespace Connections
        {
            class _LumpedMassBuilder;
            class LumpedMassImpl;
            /** Lumped Mass. Use this interface to set/get properties and parameters of the lumped mass.  
             <br>  Created in NX1847.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  LumpedMass : public NXOpen::CAE::Connections::IConnection, public virtual NXOpen::CAE::Connections::ICsys, public virtual NXOpen::CAE::Connections::IMassConnectivity, public virtual NXOpen::CAE::Connections::IMassInertia, public virtual NXOpen::CAE::Connections::IMassTarget, public virtual NXOpen::CAE::Connections::IMassPhysicalParams
            {
                private: LumpedMassImpl * m_lumpedmass_impl;
                private: friend class  _LumpedMassBuilder;
                protected: LumpedMass();
                public: ~LumpedMass();
                /**Returns  the csys type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::CsysType CsysType
                (
                );
                /**Sets  the csys type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCsysType
                (
                    NXOpen::CAE::Connections::CsysType csysType /** csystype */ 
                );
                /**Returns  the csys 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CoordinateSystem * Csys
                (
                );
                /**Sets  the csys 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCsys
                (
                    NXOpen::CoordinateSystem * csys /** csys */ 
                );
                /** Gets supported csys types of connection.  @return  Supported CSys Types 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::CAE::Connections::CsysType> GetSupportedCsysTypes
                (
                );
                /**Returns  the mass connection type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::MassConnectivityType MassConnectivityType
                (
                );
                /**Sets  the mass connection type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetMassConnectivityType
                (
                    NXOpen::CAE::Connections::MassConnectivityType type /** Mass connect type */
                );
                /**Returns  the maximum distance from definition point to center of support element 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxDistanceTolerance
                (
                );
                /**Returns  the expansion radius 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ExpansionRadiusTolerance
                (
                );
                /**Returns  the expansion radius factor 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ExpansionRadiusFactorTolerance
                (
                );
                /**Returns  the search tolerance type
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::RingSearchType RingSearchType
                (
                );
                /**Sets  the search tolerance type
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRingSearchType
                (
                    NXOpen::CAE::Connections::RingSearchType type /** Ring search type */
                );
                /**Returns  the panel search distance 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * PanelSearchDistance
                (
                );
                /**Returns  the panel search type
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::PanelSearchType PanelSearchType
                (
                );
                /**Sets  the panel search type
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetPanelSearchType
                (
                    NXOpen::CAE::Connections::PanelSearchType type /** Panel search type */
                );
                /** Gets panels  @return  Panels entities 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::TaggedObject *> GetPanels
                (
                );
                /** Add panels 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void AddPanels
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Panels entities */
                );
                /** Remove panels 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemovePanels
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Panels entities */
                );
                /**Returns  the inertia XX. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * InertiaXX
                (
                );
                /**Returns  the inertia YY. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * InertiaYY
                (
                );
                /**Returns  the inertia ZZ. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * InertiaZZ
                (
                );
                /**Returns  the inertia XY. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * InertiaYX
                (
                );
                /**Returns  the inertia XZ. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * InertiaZX
                (
                );
                /**Returns  the inertia YZ. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * InertiaZY
                (
                );
                /**Returns  the mass distribution type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::MassDistributionType MassDistributionType
                (
                );
                /**Sets  the mass distribution type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetMassDistributionType
                (
                    NXOpen::CAE::Connections::MassDistributionType type /** Mass distribution type*/
                );
                /**Returns  the mass connection type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool UseCenterOfSlaveNodes
                (
                );
                /**Sets  the mass connection type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetUseCenterOfSlaveNodes
                (
                    bool use /** Mass center type */
                );
                /**Returns  the target center 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::TaggedObject * Center
                (
                );
                /**Sets  the target center 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCenter
                (
                    NXOpen::TaggedObject * center /** Mass center */
                );
                /** Gets entities from mass spider legs. 
                            These can be any combination of CAD (point, edge, face, body) or FE (node, edge, face, element and mesh) 
                            objects able to return nodes.  @return  Mass support entities 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::TaggedObject *> GetSupportEntities
                (
                );
                /** Add entities to mass spider legs. 
                            Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void AddSupportEntities
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Mass support entities */
                );
                /** Remove entities from mass spider legs. 
                            Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemoveSupportEntities
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Mass support entities */
                );
                /** Add entities to mass spider legs. 
                            Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetSupportEntities
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Mass support entities */
                );
                /**Returns  the mass type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::MassType MassType
                (
                );
                /**Sets  the mass type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetMassType
                (
                    NXOpen::CAE::Connections::MassType type /** Mass type */
                );
                /**Returns  the mass value 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * Mass
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
