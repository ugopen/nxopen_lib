#ifndef NXOpen_FIELDS_SPATIALMAPBUILDER_HXX_INCLUDED
#define NXOpen_FIELDS_SPATIALMAPBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_SpatialMapBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Fields_PathObjects.hxx>
#include <NXOpen/Fields_SpatialMap.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class SpatialMapBuilder;
    }
    class Builder;
    class CoordinateSystem;
    class Expression;
    namespace Fields
    {
        class FieldVariable;
    }
    namespace Fields
    {
        class PathObjects;
    }
    namespace Fields
    {
        class PathObjectsList;
    }
    namespace Fields
    {
        class SpatialMap;
    }
    class Point;
    class SelectNXObjectList;
    namespace Fields
    {
        class _SpatialMapBuilderBuilder;
        class SpatialMapBuilderImpl;
        /**  @brief  Represents a @link NXOpen::Fields::SpatialMap NXOpen::Fields::SpatialMap@endlink  builder  

         
             <br> Used to create and or edit a @link NXOpen::Fields::SpatialMap NXOpen::Fields::SpatialMap@endlink . <br> 
             <br> To create a new instance of this class, use @link NXOpen::Fields::FieldManager::CreateSpatialMapBuilder  NXOpen::Fields::FieldManager::CreateSpatialMapBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  SpatialMapBuilder : public NXOpen::Builder
        {
            private: SpatialMapBuilderImpl * m_spatialmapbuilder_impl;
            private: friend class  _SpatialMapBuilderBuilder;
            protected: SpatialMapBuilder();
            public: ~SpatialMapBuilder();
            /**Returns  the map type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMap::TypeEnum MapType
            (
            );
            /**Sets  the map type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMapType
            (
                NXOpen::Fields::SpatialMap::TypeEnum mapType /** maptype */ 
            );
            /**Returns  the map subtype 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMap::SubtypeEnum MapSubtype
            (
            );
            /**Sets  the map subtype 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMapSubtype
            (
                NXOpen::Fields::SpatialMap::SubtypeEnum mapSubType /** mapsubtype */ 
            );
            /**Returns  the subtype mapping 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMap::SubtypeMappingEnum MapSubtypeMapping
            (
            );
            /**Sets  the subtype mapping 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMapSubtypeMapping
            (
                NXOpen::Fields::SpatialMap::SubtypeMappingEnum mapSubTypeMapping /** mapsubtypemapping */ 
            );
            /**Returns  the parametric plane map 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMap::ParametricPlaneMapEnum ParametricPlaneMap
            (
            );
            /**Sets  the parametric plane map 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParametricPlaneMap
            (
                NXOpen::Fields::SpatialMap::ParametricPlaneMapEnum parmPlaneMap /** parmplanemap */ 
            );
            /** The method to set the face tolerance to a default value based on the current state of the field 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void AutoTolerance
            (
            );
            /**Returns  the face tolerance for 3D degenerate surface maps 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FaceTolerance
            (
            );
            /**Returns  the bounding box map 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMap::BoundingBoxMapEnum BoundingBoxMap
            (
            );
            /**Sets  the bounding box map 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoundingBoxMap
            (
                NXOpen::Fields::SpatialMap::BoundingBoxMapEnum boundBoxMap /** boundboxmap */ 
            );
            /**Returns  the csys 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * CoordSystem
            (
            );
            /**Sets  the csys 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCoordSystem
            (
                NXOpen::CoordinateSystem * csys /** csys */ 
            );
            /**Returns  the bounded objects 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * BoundedObjects
            (
            );
            /**Returns  the origin 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Origin
            (
            );
            /**Sets  the origin 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOrigin
            (
                NXOpen::Point * origin /** origin */ 
            );
            /**Returns  the opposite corner 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * OppositeCorner
            (
            );
            /**Sets  the opposite corner 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOppositeCorner
            (
                NXOpen::Point * oppositeCorner /** oppositecorner */ 
            );
            /**Returns  the lattice path objects 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::PathObjects * LatticePath
            (
            );
            /**Returns  the list of @link NXOpen::Fields::PathObjects NXOpen::Fields::PathObjects@endlink  objects that define sections of constant u 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::PathObjectsList * ConstUObjects
            (
            );
            /**Returns  the list of @link NXOpen::Fields::PathObjects NXOpen::Fields::PathObjects@endlink  objects that define sections of constant v 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::PathObjectsList * ConstVObjects
            (
            );
            /**Returns  the faces to be used as mapping objects 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * MappingFaces
            (
            );
            /** Create a lattice spatial map from the input datapoints array.  The number of columns in the datapoints
                        array is specified by numOfColumns, and should include the total of all independent and dependent columns.
                        Note that the number of dependent columns can be zero.  The independent domain must be x, y, z, xy, xz, yz or xyz and
                        the number of columns must be greater than or equal to the count of the independent variables.
                        
                        The number of rows of data in the datapoints array is calculated by dividing the number of data points by the number of columns.
                        
                        If number of lattice columns is 1, then a parametric line based map will be created.
                        
                        Otherwise the lattice will be a M x N u-v grid, where M is the number of lattice columns and N is calculated based 
                        on the number of rows in the data points array divded by the number of lattice columns 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::SpatialMap * CreateLatticeMap
            (
                int numOfLatticeColumn /** numoflatticecolumn */ ,
                int numOfColumns /** numofcolumns */ ,
                const std::vector<NXOpen::Fields::FieldVariable *> & indepVarArray /** indep var array */ ,
                const std::vector<double> & datapoint /** datapoint */ ,
                std::vector<double> & parameterizedDatapoints /** parameterizeddatapoints */ 
            );
            /** Used to reset map on builder
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetMap
            (
                NXOpen::Fields::SpatialMap * spatialMap /** spatialmap */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
