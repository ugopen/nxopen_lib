#ifndef NXOpen_MOTION_BUSHINGDEFINE_HXX_INCLUDED
#define NXOpen_MOTION_BUSHINGDEFINE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_BushingDefine.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Motion.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class BushingDefine;
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Motion
    {
        class SelectLink;
    }
    class Point;
    namespace Motion
    {
        class _BushingDefineBuilder;
        class BushingDefineImpl;
        /** Represents a Motion BushingDefine 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  BushingDefine : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Defines the orientation type of bushing */
            public: enum OrientationTypes
            {
                OrientationTypesVector/** Vector orientation type */,
                OrientationTypesCsys/** CSYS orientation type*/
            };

            /** Defines the Angle Calculation option */
            public: enum AngleCalculationOption
            {
                AngleCalculationOptionLargeAngle/** Large Angle */,
                AngleCalculationOptionSmallAngle/** Small Angle */
            };

            /** Defines the Force Calculation option */
            public: enum ForceCalculationOption
            {
                ForceCalculationOptionAbc/** ABC */,
                ForceCalculationOptionStandard/** Standard */,
                ForceCalculationOptionBab/** BAB */
            };

            private: BushingDefineImpl * m_bushingdefine_impl;
            private: friend class  _BushingDefineBuilder;
            protected: BushingDefine();
            public: ~BushingDefine();
            /**Returns  the action motion body 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectLink * ActionLink
            (
            );
            /**Returns  the action point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ActionPoint
            (
            );
            /**Sets  the action point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionPoint
            (
                NXOpen::Point * actionPoint /** actionpoint */ 
            );
            /**Returns  the orientation type of bushing 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::BushingDefine::OrientationTypes OrientationType
            (
            );
            /**Sets  the orientation type of bushing 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetOrientationType
            (
                NXOpen::Motion::BushingDefine::OrientationTypes orientationType /** orientationtype */ 
            );
            /**Returns   @brief the direction 

             
                        It should only be used when Bushing type is 
                        @link  Motion::BushingBuilder::BushingTypesCylindrical   Motion::BushingBuilder::BushingTypesCylindrical @endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Direction
            (
            );
            /**Sets   @brief the direction 

             
                        It should only be used when Bushing type is 
                        @link  Motion::BushingBuilder::BushingTypesCylindrical   Motion::BushingBuilder::BushingTypesCylindrical @endlink  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDirection
            (
                NXOpen::Direction * direction /** direction */ 
            );
            /**Returns  the csys of bushing, the coordinate system of action and reaction are same each other 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::CoordinateSystem * Csys
            (
            );
            /**Sets  the csys of bushing, the coordinate system of action and reaction are same each other 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCsys
            (
                NXOpen::CoordinateSystem * csys /** csys */ 
            );
            /**Returns  the reaction motion body 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::SelectLink * ReactionLink
            (
            );
            /**Returns  the reaction point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ReactionPoint
            (
            );
            /**Sets  the reaction point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReactionPoint
            (
                NXOpen::Point * reactionPoint /** reactionpoint */ 
            );
            /**Returns  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Sets  the flag to specify whether Action Offset should be applied 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetApplyActionOffset
            (
                bool apply /** apply */ 
            );
            /**Returns  the flag to specify whether Action Offset should be applied 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool ApplyActionOffset
            (
            );
            /**Returns  the offset to be applied on X Axis, if Action Offset is used 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ActionOffsetX
            (
            );
            /**Returns  the offset to be applied on Y Axis, if Action Offset is used 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ActionOffsetY
            (
            );
            /**Returns  the offset to be applied on Z Axis, if Action Offset is used 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * ActionOffsetZ
            (
            );
            /**Sets  the flag to specify whether Base Offset should be applied 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetApplyBaseOffset
            (
                bool apply /** apply */ 
            );
            /**Returns  the flag to specify whether Base Offset should be applied 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool ApplyBaseOffset
            (
            );
            /**Returns  the offset to be applied on X Axis, if Base Offset is used 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * BaseOffsetX
            (
            );
            /**Returns  the offset to be applied on Y Axis, if Base Offset is used 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * BaseOffsetY
            (
            );
            /**Returns  the offset to be applied on Z Axis, if Base Offset is used 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * BaseOffsetZ
            (
            );
            /**Returns  the angle calculation option  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::BushingDefine::AngleCalculationOption AngleCalculation
            (
            );
            /**Sets  the angle calculation option  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetAngleCalculation
            (
                NXOpen::Motion::BushingDefine::AngleCalculationOption opt /** opt */ 
            );
            /**Returns  the force calculation option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::BushingDefine::ForceCalculationOption ForceCalculation
            (
            );
            /**Sets  the force calculation option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetForceCalculation
            (
                NXOpen::Motion::BushingDefine::ForceCalculationOption opt /** opt */ 
            );
            /**Returns  the dipole option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool Dipole
            (
            );
            /**Sets  the dipole option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDipole
            (
                bool opt /** opt */ 
            );
            /**Returns  the override state of the action rigid body 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ActionLinkOvrCtrl
            (
            );
            /**Sets  the override state of the action rigid body 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the reaction rigid body 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ReactionLinkOvrCtrl
            (
            );
            /**Sets  the override state of the reaction rigid body 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReactionLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the action point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ActionPointOvrCtrl
            (
            );
            /**Sets  the override state of the action point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionPointOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the reaction point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ReactionPointOvrCtrl
            (
            );
            /**Sets  the override state of the reaction point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetReactionPointOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the direction 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState DirectionOvrCtrl
            (
            );
            /**Sets  the override state of the direction 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetDirectionOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the coordinate system 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState CsysOvrCtrl
            (
            );
            /**Sets  the override state of the coordinate system 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCsysOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the orientation type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState OrientationTypeOvrCtrl
            (
            );
            /**Sets  the override state of the orientation type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetOrientationTypeOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the apply action offset toggle
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ApplyActionOffsetOvrCtrl
            (
            );
            /**Sets  the override state of the apply action offset toggle
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetApplyActionOffsetOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the apply base offset toggle
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ApplyBaseOffsetOvrCtrl
            (
            );
            /**Sets  the override state of the apply base offset toggle
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetApplyBaseOffsetOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the Action Offset X 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ActionOffsetXOvrCtrl
            (
            );
            /**Sets  the override state of the Action Offset X 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionOffsetXOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the Action Offset Y 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ActionOffsetYOvrCtrl
            (
            );
            /**Sets  the override state of the Action Offset Y 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionOffsetYOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the Action Offset Z 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState ActionOffsetZOvrCtrl
            (
            );
            /**Sets  the override state of the Action Offset Z 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetActionOffsetZOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the Base Offset X 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState BaseOffsetXOvrCtrl
            (
            );
            /**Sets  the override state of the Base Offset X 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBaseOffsetXOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the Base Offset Y 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState BaseOffsetYOvrCtrl
            (
            );
            /**Sets  the override state of the Base Offset Y 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBaseOffsetYOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the override state of the Base Offset Z 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::ParamOverrideState BaseOffsetZOvrCtrl
            (
            );
            /**Sets  the override state of the Base Offset Z 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBaseOffsetZOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
