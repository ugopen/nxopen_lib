#ifndef NXOpen_ASSEMBLIES_COMPONENTPATTERNBUILDER_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_COMPONENTPATTERNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ComponentPatternBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_ComponentPattern.hxx>
#include <NXOpen/GeometricUtilities_PatternDefinition.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class ComponentPatternBuilder;
    }
    namespace Assemblies
    {
        class ComponentPattern;
    }
    class Builder;
    namespace GeometricUtilities
    {
        class PatternDefinition;
    }
    class SelectDisplayableObjectList;
    namespace Assemblies
    {
        class _ComponentPatternBuilderBuilder;
        class ComponentPatternBuilderImpl;
        /** Represents a builder class that performs various @link NXOpen::Assemblies::ComponentPattern NXOpen::Assemblies::ComponentPattern@endlink  operations.
                Input to this class can be PSM facet objects.
             <br> To create a new instance of this class, use @link NXOpen::Assemblies::ComponentAssembly::CreateComponentPatternBuilder  NXOpen::Assemblies::ComponentAssembly::CreateComponentPatternBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.XPathOption </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.YDirectionOption </term> <description> 
         
        Section </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.YPathOption </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.YSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.YSpacing.PitchDistance.Value </term> <description> 
         
        10 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.YSpacing.SpaceType </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        PatternService.AlongPathDefinition.YSpacing.SpanDistance.Value </term> <description> 
         
        100 (millimeters part), 10 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.AngularSpacing.NCopies.Value </term> <description> 
         
        12 </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.AngularSpacing.PitchAngle.Value </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.AngularSpacing.PitchDistance.Value </term> <description> 
         
        10 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.AngularSpacing.SpaceType </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.AngularSpacing.SpanAngle.Value </term> <description> 
         
        360 (millimeters part), 360 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.AngularSpacing.UsePitchOption </term> <description> 
         
        Angle </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.CreateLastStaggered </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.HorizontalRef.RotationAngle.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.IncludeSeedToggle </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.RadialSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PatternService.CircularDefinition.StaggerType </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        PatternService.HelixDefinition.AnglePitch.Value </term> <description> 
         
        30 </description> </item> 

        <item><term> 
         
        PatternService.HelixDefinition.CountOfInstances.Value </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        PatternService.HelixDefinition.DirectionType </term> <description> 
         
        Righthand </description> </item> 

        <item><term> 
         
        PatternService.HelixDefinition.DistancePitch.Value </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.HelixDefinition.HelixPitch.Value </term> <description> 
         
        50 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.HelixDefinition.HelixSpan.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.HelixDefinition.NumberOfTurns.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        PatternService.HelixDefinition.SizeOption </term> <description> 
         
        CountAngleDistance </description> </item> 

        <item><term> 
         
        PatternService.PatternFill.FillMargin.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.PatternFill.FillOptions </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        PatternService.PatternFill.SimplifiedBoundaryToggle </term> <description> 
         
        False </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.AlongOrientationOption </term> <description> 
         
        NormalToPath </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.CircularOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.FollowFaceProjDirOption </term> <description> 
         
        PatternPlaneNormal </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.GeneralOrientationOption </term> <description> 
         
        Fixed </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.HelixOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.LinearOrientationOption </term> <description> 
         
        Fixed </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.MirrorOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.OrientationOption </term> <description> 
         
        Fixed </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.PolygonOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        PatternService.PatternOrientation.SpiralOrientationOption </term> <description> 
         
        FollowPattern </description> </item> 

        <item><term> 
         
        PatternService.PatternType </term> <description> 
         
        Linear </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.NumberOfSides.Value </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.PolygonSizeOption </term> <description> 
         
        Inscribed </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.PolygonSpacing.NCopies.Value </term> <description> 
         
        4 </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.PolygonSpacing.PitchDistance.Value </term> <description> 
         
        25 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.PolygonSpacing.SpaceType </term> <description> 
         
        Offset </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.PolygonSpacing.SpanAngle.Value </term> <description> 
         
        360 </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.RadialSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.RadialSpacing.PitchDistance.Value </term> <description> 
         
        25 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.PolygonDefinition.RadialSpacing.SpanDistance.Value </term> <description> 
         
        100 (millimeters part), 4 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.RectangularDefinition.CreateLastStaggered </term> <description> 
         
        true </description> </item> 

        <item><term> 
         
        PatternService.RectangularDefinition.SimplifiedLayoutType </term> <description> 
         
        Square </description> </item> 

        <item><term> 
         
        PatternService.RectangularDefinition.StaggerType </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        PatternService.RectangularDefinition.XSpacing.NCopies.Value </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        PatternService.RectangularDefinition.YSpacing.NCopies.Value </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PatternService.SpiralDefinition.DirectionType </term> <description> 
         
        Lefthand </description> </item> 

        <item><term> 
         
        PatternService.SpiralDefinition.NumberOfTurns.Value </term> <description> 
         
        1 (millimeters part), 1 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.SpiralDefinition.RadialPitch.Value </term> <description> 
         
        50 (millimeters part), 2 (inches part) </description> </item> 

        <item><term> 
         
        PatternService.SpiralDefinition.SizeSpiralType </term> <description> 
         
        NumberOfTurns </description> </item> 

        <item><term> 
         
        PatternService.SpiralDefinition.TotalAngle.Value </term> <description> 
         
        360 (millimeters part), 360 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  ComponentPatternBuilder : public NXOpen::Builder
        {
            private: ComponentPatternBuilderImpl * m_componentpatternbuilder_impl;
            private: friend class  _ComponentPatternBuilderBuilder;
            protected: ComponentPatternBuilder();
            public: ~ComponentPatternBuilder();
            /**Returns  the @link NXOpen::Assemblies::Component NXOpen::Assemblies::Component@endlink  for pattern.
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * ComponentPatternSet
            (
            );
            /**Returns  the @link NXOpen::GeometricUtilities::PatternDefinition NXOpen::GeometricUtilities::PatternDefinition@endlink .
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::PatternDefinition * PatternService
            (
            );
            /** Returns the dynamic positioning flag.
                     
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetDynamicPositioning
            (
            );
            /** Sets the dynamic positioning flag. It will enable or disable the dynamic preview of the components. 
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDynamicPositioning
            (
                bool isDynamicPositioning /** isdynamicpositioning */ 
            );
            /**Returns  the option to specify whether the @link NXOpen::Assemblies::ComponentPattern NXOpen::Assemblies::ComponentPattern@endlink  is 
                        associative or not.           
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the option to specify whether the @link NXOpen::Assemblies::ComponentPattern NXOpen::Assemblies::ComponentPattern@endlink  is 
                        associative or not.           
                    
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAssociative
            (
                bool isAssociative /** isassociative */ 
            );
            /**Returns  the copy constraint option. The copy constraint type of pattern is created 
                        when this option is enabled otherwise Pure Reference pattern is created.
                    
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: bool CopyConstraintPattern
            (
            );
            /**Sets  the copy constraint option. The copy constraint type of pattern is created 
                        when this option is enabled otherwise Pure Reference pattern is created.
                    
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetCopyConstraintPattern
            (
                bool isCopyConstraintReferencePattern /** iscopyconstraintreferencepattern */ 
            );
            /** Sets the object selected for pattern definition 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetObject
            (
                NXOpen::Assemblies::ComponentPattern * compPattern /** The pattern definition object */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
