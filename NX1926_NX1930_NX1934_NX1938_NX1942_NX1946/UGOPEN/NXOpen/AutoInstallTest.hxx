#ifndef NXOpen_AUTOINSTALLTEST_HXX_INCLUDED
#define NXOpen_AUTOINSTALLTEST_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AutoInstallTest.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class AutoInstallTest;
    class Session;
    class AutoInstallTestImpl;

    /// \cond NX_NO_DOC 
    /** Represents a class that is used for autotests.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
     <br>  Usable only on Windows <br> 
     <br>  Created in NX1926.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  AutoInstallTest
    {
         /** Contains return code and response json string 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public:
        struct ReturnParams
        {
            public: /** Return code from SccS after calling a command */int ReturnCode;
            public: /** JSON response returned by SccS */NXString ResponseString;
            public: ReturnParams() :
                ReturnCode(),
                ResponseString()
            {
            }
            /** Constructor for the ReturnParams struct. */ 
            public: ReturnParams(int returnCodeInitial /** Return code from SccS after calling a command */, 
                    const NXString &responseStringInitial /** JSON response returned by SccS */) :
                ReturnCode(returnCodeInitial),
                ResponseString(responseStringInitial)
            {
            }
        };

         /** Contains custom version info data 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public:
        struct CustomVersionInfo
        {
            public: /** Product major version*/int VersionNumber;
            public: /** Product build number*/int BuildNumber;
            public: /** Hotfix build number. Put zero if you do not want to test hotfix update */int CustomerPatch;
            public: /** Customer ID. Put zero if you do not want to test hotfix update */int CustomerId;
            public: /** Product Name */NXString ProductName;
            public: /** Product channel type */NXString ChannelType;
            public: CustomVersionInfo() :
                VersionNumber(),
                BuildNumber(),
                CustomerPatch(),
                CustomerId(),
                ProductName(),
                ChannelType()
            {
            }
            /** Constructor for the CustomVersionInfo struct. */ 
            public: CustomVersionInfo(int versionNumberInitial /** Product major version*/, 
                    int buildNumberInitial /** Product build number*/, 
                    int customerPatchInitial /** Hotfix build number. Put zero if you do not want to test hotfix update */, 
                    int customerIdInitial /** Customer ID. Put zero if you do not want to test hotfix update */, 
                    const NXString &productNameInitial /** Product Name */, 
                    const NXString &channelTypeInitial /** Product channel type */) :
                VersionNumber(versionNumberInitial),
                BuildNumber(buildNumberInitial),
                CustomerPatch(customerPatchInitial),
                CustomerId(customerIdInitial),
                ProductName(productNameInitial),
                ChannelType(channelTypeInitial)
            {
            }
        };

         /** Contains notification related data 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public:
        struct Notifications
        {
            public: /** Notification Id */NXString Id;
            public: /** Date of creation of notification */NXString CreationDate;
            public: Notifications() :
                Id(),
                CreationDate()
            {
            }
            /** Constructor for the Notifications struct. */ 
            public: Notifications(const NXString &idInitial /** Notification Id */, 
                    const NXString &creationDateInitial /** Date of creation of notification */) :
                Id(idInitial),
                CreationDate(creationDateInitial)
            {
            }
        };

        private: AutoInstallTestImpl * m_autoinstalltest_impl;
        private: NXOpen::Session* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit AutoInstallTest(NXOpen::Session *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        private: static AutoInstallTest* theAutoInstallTest;
        /** Returns the AutoInstallTest object for the running session which serves as the 'gateway' class for the application API.  
            References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
            Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
        */
        public: static AutoInstallTest* GetAutoInstallTest(NXOpen::Session *owner);
        public: ~AutoInstallTest();
        /**Set the flag to launch SccS with headless authentication. This should be done before calling any other APIs in this JA. Once SccS is launched this API will have no effect.
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetAutoAuthenticationFlag
        (
            bool autoAuthenticate /** autoauthenticate */ 
        );
        /**Gets the status of update on ZEUS
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutoInstallTest::ReturnParams SetVersionInfo
        (
            const NXOpen::AutoInstallTest::CustomVersionInfo & versionInfo /** versioninfo */ 
        );
        /**Gets the status of update on ZEUS
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutoInstallTest::ReturnParams GetUpdateStatus
        (
            int* state /** state */ ,
            int* baseCompatibleVersion /** basecompatibleversion */ ,
            NXString* releasenotesLink /** releasenoteslink */ 
        );
        /**Gets the status of update on ZEUS
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutoInstallTest::ReturnParams ValidateDownloadedUpdate
        (
            bool failOnCertError /** failoncerterror */ ,
            NXString* certError /** certerror */ 
        );
        /**Start update download
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutoInstallTest::ReturnParams StartDownload
        (
            const NXString & downloadLocation /** downloadlocation */ 
        );
        /**Start update download
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::AutoInstallTest::ReturnParams StartDownload
        (
            const char * downloadLocation /** downloadlocation */ 
        );
        /**Get progress of download
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutoInstallTest::ReturnParams GetDownloadProgress
        (
            int* progress /** progress */ 
        );
        /**Start installation of downloaded update
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutoInstallTest::ReturnParams StartInstall
        (
        );
        /**Get unacknowledeged notifications
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AutoInstallTest::ReturnParams GetNotifications
        (
            std::vector<NXOpen::AutoInstallTest::Notifications> & notifications /** notifications */ 
        );
        /** Acknowledge notifications
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::AutoInstallTest::ReturnParams> AcknowledgeNotifications
        (
            const std::vector<NXOpen::AutoInstallTest::Notifications> & notificationsToAcknowledege /** notificationstoacknowledege */ 
        );
        /**Compare JSON response with expected response
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: bool CompareResponse
        (
            const NXString & responseString /** responsestring */ ,
            const NXString & pathOfFile /** File containing expected response */
        );
        /**Compare JSON response with expected response
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        bool CompareResponse
        (
            const char * responseString /** responsestring */ ,
            const char * pathOfFile /** File containing expected response */
        );
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
