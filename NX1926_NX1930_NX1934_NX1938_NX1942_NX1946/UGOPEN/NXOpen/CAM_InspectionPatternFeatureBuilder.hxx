#ifndef NXOpen_CAM_INSPECTIONPATTERNFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONPATTERNFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionPatternFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionPatternFeatureBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionPatternFeatureBuilderBuilder;
        class InspectionPatternFeatureBuilderImpl;
        /** Represents a CMM Inspection Pattern Feature builder  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionPatternFeatureBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionPatternFeatureBuilder @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionPatternFeatureBuilder : public NXOpen::CAM::OperationBuilder
        {
            /** Filter for the list of available inspection features for inclusion in the pattern. */
            public: enum FeatureFilterTypes
            {
                FeatureFilterTypesNone/** All inspection features will be listed */,
                FeatureFilterTypesPoints/** Only point inspection features will be listed */,
                FeatureFilterTypesLines/** Only line inspection features will be listed */,
                FeatureFilterTypesPlanes/** Only plane inspection features will be listed */,
                FeatureFilterTypesCurves/** Only curve inspection features will be listed */,
                FeatureFilterTypesHoles/** Only inner circle, cylinder, and cone inspection features will be listed */,
                FeatureFilterTypesPins/** Only outer circle, cylinder, and cone inspection features will be listed */,
                FeatureFilterTypesSpheres/** Only sphere inspection features will be listed */,
                FeatureFilterTypesSurfaces/** Only surface inspection features will be listed */
            };

            private: InspectionPatternFeatureBuilderImpl * m_inspectionpatternfeaturebuilder_impl;
            private: friend class  _InspectionPatternFeatureBuilderBuilder;
            protected: InspectionPatternFeatureBuilder();
            public: ~InspectionPatternFeatureBuilder();
            /**Returns  the select features button used to select features from the screen 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectFeatures
            (
            );
            /**Returns  the feature filter used to filter the list of available features 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionPatternFeatureBuilder::FeatureFilterTypes FeatureFilter
            (
            );
            /**Sets  the feature filter used to filter the list of available features 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetFeatureFilter
            (
                NXOpen::CAM::InspectionPatternFeatureBuilder::FeatureFilterTypes featureFilter /** featurefilter */ 
            );
            /**Returns  the pattern feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the pattern feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the pattern feature name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetName
            (
                const char * name /** name */ 
            );
            /** Returns the current subfeatures.  @return  Current subfeatures 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetSubFeatures
            (
            );
            /** Sets the current subfeatures. 
             <br>  Created in NX7.5.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSubFeatures
            (
                std::vector<NXString> & subFeatures /** Current subfeatures */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
