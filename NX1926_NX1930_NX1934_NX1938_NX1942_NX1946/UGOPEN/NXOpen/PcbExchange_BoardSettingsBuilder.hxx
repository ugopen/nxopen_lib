#ifndef NXOpen_PCBEXCHANGE_BOARDSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_BOARDSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_BoardSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class BoardSettingsBuilder;
    }
    class Builder;
    class Expression;
    class NXColor;
    namespace PcbExchange
    {
        class _BoardSettingsBuilderBuilder;
        class BoardSettingsBuilderImpl;
        /** Represents a @link NXOpen::PcbExchange::BoardSettingsBuilder NXOpen::PcbExchange::BoardSettingsBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreateBoardSettingsBuilder  NXOpen::PcbExchange::Manager::CreateBoardSettingsBuilder @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  BoardSettingsBuilder : public NXOpen::Builder
        {
            /** This enum defines the model options. */
            public: enum ModelOption
            {
                ModelOptionSingleLayer/** single layer */ ,
                ModelOptionTopBottom/** top bottom */ ,
                ModelOptionMultiLayer/** multi layer */ ,
                ModelOptionSolid/** solid */ 
            };

            /** This enum defines the Board Stackup options. */
            public: enum BoardStackupOption
            {
                BoardStackupOptionNone/** none */ ,
                BoardStackupOptionFromPart/** from part */ ,
                BoardStackupOptionFromFile/** from file */ ,
                BoardStackupOptionFromODB/** from odb */ 
            };

            /** This enum defines the Materials Source options. */
            public: enum MaterialsSourceOption
            {
                MaterialsSourceOptionSpecify/** specify */ 
            };

            /** This enum defines the Thickness source options. */
            public: enum ThicknessSourceOption
            {
                ThicknessSourceOptionFromPart/** from part */ ,
                ThicknessSourceOptionSpecify/** specify */ 
            };

            /** This enum defines the Materials From options. */
            public: enum MaterialsFromOption
            {
                MaterialsFromOptionPCBMaterialLibrary/** pcbmaterial library */ ,
                MaterialsFromOptionNXMaterialLibrary/** nxmaterial library */ 
            };

            /** This enum defines the Algorithm Option. */
            public: enum AlgorithmOption
            {
                AlgorithmOptionDiscretized/** discretized */ ,
                AlgorithmOptionEquivalent/** equivalent */ 
            };

            private: BoardSettingsBuilderImpl * m_boardsettingsbuilder_impl;
            private: friend class  _BoardSettingsBuilderBuilder;
            protected: BoardSettingsBuilder();
            public: ~BoardSettingsBuilder();
            /**Returns  the model 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardSettingsBuilder::ModelOption Model
            (
            );
            /**Sets  the model 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetModel
            (
                NXOpen::PcbExchange::BoardSettingsBuilder::ModelOption model /** model */ 
            );
            /**Returns  the board stackup 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardSettingsBuilder::BoardStackupOption BoardStackup
            (
            );
            /**Sets  the board stackup 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetBoardStackup
            (
                NXOpen::PcbExchange::BoardSettingsBuilder::BoardStackupOption boardStackup /** boardstackup */ 
            );
            /**Returns  the materials source 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardSettingsBuilder::MaterialsSourceOption MaterialsSource
            (
            );
            /**Sets  the materials source 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetMaterialsSource
            (
                NXOpen::PcbExchange::BoardSettingsBuilder::MaterialsSourceOption materialsSource /** materialssource */ 
            );
            /**Returns  the thickness source 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardSettingsBuilder::ThicknessSourceOption ThicknessSource
            (
            );
            /**Sets  the thickness source 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetThicknessSource
            (
                NXOpen::PcbExchange::BoardSettingsBuilder::ThicknessSourceOption thicknessSource /** thicknesssource */ 
            );
            /**Returns  the element size 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ElementSize
            (
            );
            /**Returns  the element color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ElementColor
            (
            );
            /**Sets  the element color 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetElementColor
            (
                NXOpen::NXColor * elementColor /** elementcolor */ 
            );
            /**Returns  the board thickness 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoardThickness
            (
            );
            /**Returns  the trace thickness 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TraceThickness
            (
            );
            /**Returns  the plate thickness 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PlateThickness
            (
            );
            /**Returns  the materials from 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardSettingsBuilder::MaterialsFromOption MaterialsFrom
            (
            );
            /**Sets  the materials from 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetMaterialsFrom
            (
                NXOpen::PcbExchange::BoardSettingsBuilder::MaterialsFromOption materialsFrom /** materialsfrom */ 
            );
            /**Returns  the dielectric when material is from Pcb Material Library
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int DielectricPcbMaterial
            (
            );
            /**Sets  the dielectric when material is from Pcb Material Library
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetDielectricPcbMaterial
            (
                int dielectricPcbMaterial /** dielectricpcbmaterial */ 
            );
            /**Returns  the trace when material is from Pcb Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int TracePcbMaterial
            (
            );
            /**Sets  the trace when material is from Pcb Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetTracePcbMaterial
            (
                int tracePcbMaterial /** tracepcbmaterial */ 
            );
            /**Returns  the via when material is from Pcb Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int ViaPcbMaterial
            (
            );
            /**Sets  the via when material is from Pcb Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetViaPcbMaterial
            (
                int viaPcbMaterial /** viapcbmaterial */ 
            );
            /**Returns  the dielectric when material is from NX Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int DielectricNxMaterial
            (
            );
            /**Sets  the dielectric when material is from NX Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetDielectricNxMaterial
            (
                int dielectricNxMaterial /** dielectricnxmaterial */ 
            );
            /**Returns  the trace when material is from NX Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int TraceNxMaterial
            (
            );
            /**Sets  the trace when material is from NX Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetTraceNxMaterial
            (
                int traceNxMaterial /** tracenxmaterial */ 
            );
            /**Returns  the via when material is from NX Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int ViaNxMaterial
            (
            );
            /**Sets  the via when material is from NX Material Library 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetViaNxMaterial
            (
                int viaNxMaterial /** vianxmaterial */ 
            );
            /**Returns  the algorithm 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::BoardSettingsBuilder::AlgorithmOption Algorithm
            (
            );
            /**Sets  the algorithm 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetAlgorithm
            (
                NXOpen::PcbExchange::BoardSettingsBuilder::AlgorithmOption algorithm /** algorithm */ 
            );
            /**Returns  the board stackup dir 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardStackupDir
            (
            );
            /**Sets  the board stackup dir 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetBoardStackupDir
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the board stackup dir 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            void SetBoardStackupDir
            (
                const char * filename /** filename */ 
            );
            /**Returns  the board stackup odbfolder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardStackupODBFolder
            (
            );
            /**Sets  the board stackup odbfolder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetBoardStackupODBFolder
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the board stackup odbfolder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            void SetBoardStackupODBFolder
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the read vias from file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReadViasFromFile
            (
            );
            /**Sets  the read vias from file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetReadViasFromFile
            (
                bool readViasFromFile /** readviasfromfile */ 
            );
            /**Returns  the advanced options from part 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool AdvancedOptionsFromPart
            (
            );
            /**Sets  the advanced options from part 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetAdvancedOptionsFromPart
            (
                bool advancedOptionsFromPart /** advancedoptionsfrompart */ 
            );
            /**Returns  the advanced options from file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool AdvancedOptionsFromFile
            (
            );
            /**Sets  the advanced options from file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetAdvancedOptionsFromFile
            (
                bool advancedOptionsFromFile /** advancedoptionsfromfile */ 
            );
            /**Returns  the number of calculation points 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfCalculationPoints
            (
            );
            /**Sets  the number of calculation points 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetNumberOfCalculationPoints
            (
                int numberOfCalculationPoints /** numberofcalculationpoints */ 
            );
            /**Returns  the calculation points precision 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: int CalculationPointsPrecision
            (
            );
            /**Sets  the calculation points precision 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetCalculationPointsPrecision
            (
                int calculationPointsPrecision /** calculationpointsprecision */ 
            );
            /**Returns  the board conductivity dir 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardConductivityDir
            (
            );
            /**Sets  the board conductivity dir 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void SetBoardConductivityDir
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the board conductivity dir 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            void SetBoardConductivityDir
            (
                const char * filename /** filename */ 
            );
            /** TODO: Check if we need this 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void Calculate
            (
            );
            /** TODO: Check if we need this 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_maya_exchange ("Unigraphics NX PCB Exchange") */
            public: void ViewReport
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
