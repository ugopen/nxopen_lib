#ifndef NXOpen_CAE_ACOUSTICSANDVIBRATIONSOLVERPARAMETERSCOMPONENTACCESSOR_HXX_INCLUDED
#define NXOpen_CAE_ACOUSTICSANDVIBRATIONSOLVERPARAMETERSCOMPONENTACCESSOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AcousticsAndVibrationSolverParametersComponentAccessor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AcousticsAndVibrationSolverParametersComponentAccessor;
    }
    class NXObject;
    namespace CAE
    {
        class _AcousticsAndVibrationSolverParametersComponentAccessorBuilder;
        class AcousticsAndVibrationSolverParametersComponentAccessorImpl;
        /**
            Builds a @link NXOpen::CAE::AcousticsAndVibrationSolverParametersComponentAccessor NXOpen::CAE::AcousticsAndVibrationSolverParametersComponentAccessor@endlink  object
             <br> There is no kf creator for this.  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AcousticsAndVibrationSolverParametersComponentAccessor : public NXOpen::NXObject
        {
            private: AcousticsAndVibrationSolverParametersComponentAccessorImpl * m_acousticsandvibrationsolverparameterscomponentaccessor_impl;
            private: friend class  _AcousticsAndVibrationSolverParametersComponentAccessorBuilder;
            protected: AcousticsAndVibrationSolverParametersComponentAccessor();
            public: ~AcousticsAndVibrationSolverParametersComponentAccessor();
            /**Returns  the use environment variable flag 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use the UsePresolverEnvVar version instead. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use the UsePresolverEnvVar version instead.") bool UseEnvVar
            (
            );
            /**Sets  the use environment variable flag 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use the UsePresolverEnvVar version instead. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use the UsePresolverEnvVar version instead.") void SetUseEnvVar
            (
                bool envVar /** envvar */ 
            );
            /**Returns  the solver path 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use the PresolverPath version instead. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use the PresolverPath version instead.") NXString SolverPath
            (
            );
            /**Sets  the solver path 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use the PresolverPath version instead. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Use the PresolverPath version instead.") void SetSolverPath
            (
                const NXString & solverPath /** solverpath */ 
            );
            /**Sets  the solver path 
             <br>  @deprecated Deprecated in NX1926.0.0.  Use the PresolverPath version instead. <br>  

             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetSolverPath
            (
                const char * solverPath /** solverpath */ 
            );
            /**Returns  the use environment variable flag for Presolver 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePresolverEnvVar
            (
            );
            /**Sets  the use environment variable flag for Presolver 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUsePresolverEnvVar
            (
                bool envVar /** envvar */ 
            );
            /**Returns  the solver path for Presolver 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PresolverPath
            (
            );
            /**Sets  the solver path for Presolver 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetPresolverPath
            (
                const NXString & solverPath /** solverpath */ 
            );
            /**Sets  the solver path for Presolver 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetPresolverPath
            (
                const char * solverPath /** solverpath */ 
            );
            /**Returns  the use environment variable flag for Sysnoise 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseSysnoiseEnvVar
            (
            );
            /**Sets  the use environment variable flag for Sysnoise 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUseSysnoiseEnvVar
            (
                bool envVar /** envvar */ 
            );
            /**Returns  the solver path for Sysnoise 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SysnoisePath
            (
            );
            /**Sets  the solver path for Sysnoise 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetSysnoisePath
            (
                const NXString & solverPath /** solverpath */ 
            );
            /**Sets  the solver path for Sysnoise 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetSysnoisePath
            (
                const char * solverPath /** solverpath */ 
            );
            /**Returns  the use model directory for solver temporary files flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseModelDirForSolverTempFiles
            (
            );
            /**Sets  the use model directory for solver temporary files flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUseModelDirForSolverTempFiles
            (
                bool useModelDirForSolverTempFiles /** usemodeldirforsolvertempfiles */ 
            );
            /**Returns  the temp dir path 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TempDir
            (
            );
            /**Sets  the temp dir path 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetTempDir
            (
                const NXString & tempDir /** tempdir */ 
            );
            /**Sets  the temp dir path 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetTempDir
            (
                const char * tempDir /** tempdir */ 
            );
            /**Returns  the memory setting 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double Memory
            (
            );
            /**Sets  the memory setting 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMemory
            (
                double memory /** memory */ 
            );
            /**Returns  the number of threads setting 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int NumThreads
            (
            );
            /**Sets  the number of threads setting 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNumThreads
            (
                int numThreads /** numthreads */ 
            );
            /**Returns  the run in foreground flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseRunInForeground
            (
            );
            /**Sets  the run in foreground flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUseRunInForeground
            (
                bool useRunInForeground /** useruninforeground */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
