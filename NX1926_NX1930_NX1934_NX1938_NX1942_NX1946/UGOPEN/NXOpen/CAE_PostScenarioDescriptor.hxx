#ifndef NXOpen_CAE_POSTSCENARIODESCRIPTOR_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIODESCRIPTOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioDescriptor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioDescriptor;
    }
    namespace CAE
    {
        class PostScenarioInputDefinitionCollection;
    }
    namespace CAE
    {
        class _PostScenarioDescriptorBuilder;
        class PostScenarioDescriptorImpl;
        /**  @brief  This class represents a @link NXOpen::CAE::PostScenarioDescriptor NXOpen::CAE::PostScenarioDescriptor@endlink .  

           <br> Not support KF.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioDescriptor : public NXOpen::TaggedObject
        {
            private: PostScenarioDescriptorImpl * m_postscenariodescriptor_impl;
            private: friend class  _PostScenarioDescriptorBuilder;
            protected: PostScenarioDescriptor();
            public: ~PostScenarioDescriptor();
            /**Returns  the name of the post scenario descriptor. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Returns  the description of this scenario, if available. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Description
            (
            );

            /// \cond NX_NO_DOC 
            /**Returns  the value determining if this scenario was added through NXOpen. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool UserDefined
            (
            );

            /// \endcond 
            /** Returns the license feature or features required to create a scenario of this type.

                        Empty output means there are no special license requirements.

                        If multiple license strings are returned, it means any of those license features
                        allow this scenario to be created. (logical OR)
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetLicenseRequierments
            (
            );


            /** Available Input Definitions.
                        An input definition is an interpretation that a scenario gives to compatible data in order to post-process it in a specific way.
                     
             <br>  Created in NX11.0.0.  <br>  
            */
            public: NXOpen::CAE::PostScenarioInputDefinitionCollection *InputDefinitions();
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
