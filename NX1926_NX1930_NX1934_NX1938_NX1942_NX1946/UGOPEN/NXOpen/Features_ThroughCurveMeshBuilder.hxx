#ifndef NXOpen_FEATURES_THROUGHCURVEMESHBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_THROUGHCURVEMESHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_ThroughCurveMeshBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_Rebuild.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class ThroughCurveMeshBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class Rebuild;
    }
    class Section;
    class SectionList;
    namespace Features
    {
        class _ThroughCurveMeshBuilderBuilder;
        class ThroughCurveMeshBuilderImpl;
        /**
            Represents a @link NXOpen::Features::ThroughCurveMesh NXOpen::Features::ThroughCurveMesh@endlink  builder.
            Let you create a body from a collection of existing curve outlines (known as strings) running in two different directions.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateThroughCurveMeshBuilder  NXOpen::Features::FeatureCollection::CreateThroughCurveMeshBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Construction </term> <description> 
         
        Normal </description> </item> 

        <item><term> 
         
        CrossSurfaceRebuildData.RebuildType </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        CurvatureTolerance </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        Emphasis </term> <description> 
         
        Both </description> </item> 

        <item><term> 
         
        FirstCrossContinuity.ContinuityType </term> <description> 
         
        G0 </description> </item> 

        <item><term> 
         
        FirstPrimaryContinuity.ContinuityType </term> <description> 
         
        G0 </description> </item> 

        <item><term> 
         
        IntersectionTolerance </term> <description> 
         
        0.02 </description> </item> 

        <item><term> 
         
        LastCrossContinuity.ContinuityType </term> <description> 
         
        G0 </description> </item> 

        <item><term> 
         
        LastPrimaryContinuity.ContinuityType </term> <description> 
         
        G0 </description> </item> 

        <item><term> 
         
        PositionTolerance </term> <description> 
         
        0.0254 (millimeters part), 0.001 (inches part) </description> </item> 

        <item><term> 
         
        PrimarySurfaceRebuildData.RebuildType </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        TangentTolerance </term> <description> 
         
        0.5 </description> </item> 

        </list> 

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  ThroughCurveMeshBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** 
                    This enum represents the Emphasis options. 
                    */
            public: enum EmphasisType
            {
                EmphasisTypeBoth/** Emphasis on both primary and cross strings. */,
                EmphasisTypePrimary/** Emphasis on primary strings. */,
                EmphasisTypeCross/** Emphasis on cross strings. */
            };

            /** 
                   This enum represents the Construction options.
                   */
            public: enum ConstructionMethod
            {
                ConstructionMethodNormal/** Use the standard procedures.*/,
                ConstructionMethodSplinePoints/** Use the points and tangent values at the points for reparameterizing curves.*/,
                ConstructionMethodSimple/** Build the simplest curve mesh surface possible.*/
            };

            /** This enum represents the body type option. If sections are all
                        closed, if possible then a solid body can be created. */
            public: enum BodyPreferenceTypes
            {
                BodyPreferenceTypesSolid/** Solid */,
                BodyPreferenceTypesSheet/** Sheet */
            };

            private: ThroughCurveMeshBuilderImpl * m_throughcurvemeshbuilder_impl;
            private: friend class  _ThroughCurveMeshBuilderBuilder;
            protected: ThroughCurveMeshBuilder();
            public: ~ThroughCurveMeshBuilder();
            /**Returns  the primary curves list which is required.
                     They should all be roughly parallel and run in approximately one direction.
                     A point could be selected as the first and/or last primary string.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SectionList * PrimaryCurvesList
            (
            );
            /**Returns  the cross curves list which is required.
                     They should all be roughly parallel and run in approximately one direction.
                     A point could be selected as the first and/or last primary string.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::SectionList * CrossCurvesList
            (
            );
            /**Returns  the first primary continuity, @link NXOpen::GeometricUtilities::Continuity NXOpen::GeometricUtilities::Continuity@endlink .
                     Define continuity constraint at the first primary sections side.
                     It contains the continuity type and the constraint face.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * FirstPrimaryContinuity
            (
            );
            /**Returns  the last primary continuity, @link NXOpen::GeometricUtilities::Continuity NXOpen::GeometricUtilities::Continuity@endlink .
                     Define continuity constraint at the last primary sections side.
                     It contains the continuity type and the constraint face.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * LastPrimaryContinuity
            (
            );
            /**Returns  the first cross continuity, @link NXOpen::GeometricUtilities::Continuity NXOpen::GeometricUtilities::Continuity@endlink .
                     Define continuity constraint at the first cross sections side.
                     It contains the continuity type and the constraint face.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * FirstCrossContinuity
            (
            );
            /**Returns  the last cross continuity, @link NXOpen::GeometricUtilities::Continuity NXOpen::GeometricUtilities::Continuity@endlink .
                     Define continuity constraint at the first cross sections side.
                     It contains the continuity type and the constraint face.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Continuity * LastCrossContinuity
            (
            );
            /**Returns  the spine.
                     Control the parameterization of the cross strings.
                     It is valid only if both the first and last primary strings are planar and this spine string is perpendicular to the first and last primary strings
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Section * Spine
            (
            );
            /**Returns  the emphasis options.
                    Allow you to tell the system which set of strings will have the most effect on the created surface in both location and shape.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::ThroughCurveMeshBuilder::EmphasisType Emphasis
            (
            );
            /**Sets  the emphasis options.
                    Allow you to tell the system which set of strings will have the most effect on the created surface in both location and shape.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetEmphasis
            (
                NXOpen::Features::ThroughCurveMeshBuilder::EmphasisType emphasis /** emphasis */ 
            );
            /**Returns  the construction options.
                    Use one of three construction options when you create a Through Curve Mesh feature: Normal, Use Spline Points, and Simple.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Features::ThroughCurveMeshBuilder::ConstructionMethod Construction
            (
            );
            /**Sets  the construction options.
                    Use one of three construction options when you create a Through Curve Mesh feature: Normal, Use Spline Points, and Simple.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetConstruction
            (
                NXOpen::Features::ThroughCurveMeshBuilder::ConstructionMethod construction /** construction */ 
            );
            /**Returns  the primary template curve.
                     Control the building of the simple surface in primary curve direction.
                     It is only available when the construction method is simple.
                     If you leave it empty, the system will automatically choose the most complicated one for fitting.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Section * PrimaryTemplateString
            (
            );
            /**Returns  the cross template curve.
                     Control the building of the simple surface in cross curve direction.
                     It is only available when the construction method is simple.
                     If you leave it empty, the system will automatically choose the most complicated one for fitting.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::Section * CrossTemplateString
            (
            );
            /**Returns  the primary surface rebuild data, @link NXOpen::GeometricUtilities::Rebuild NXOpen::GeometricUtilities::Rebuild@endlink .
                     Redefine the degree and knot points of the primary strings to build a surface that joins smoothly with surrounding surfaces. 
                     It is only available for the Normal Construction option.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Rebuild * PrimarySurfaceRebuildData
            (
            );
            /**Returns  the cross surface rebuild data, @link NXOpen::GeometricUtilities::Rebuild NXOpen::GeometricUtilities::Rebuild@endlink .
                     Redefine the degree and knot points of the cross strings to build a surface that joins smoothly with surrounding surfaces. 
                     It is only available for the Normal Construction option.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: NXOpen::GeometricUtilities::Rebuild * CrossSurfaceRebuildData
            (
            );
            /**Returns  the intersection tolerance.
                    Define how far the primary strings and cross strings can deviate from each other.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double IntersectionTolerance
            (
            );
            /**Sets  the intersection tolerance.
                    Define how far the primary strings and cross strings can deviate from each other.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetIntersectionTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the position tolerance.
                    Control the distance accuracy of the rebuild surface in relation to the input curves.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double PositionTolerance
            (
            );
            /**Sets  the position tolerance.
                    Control the distance accuracy of the rebuild surface in relation to the input curves.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetPositionTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the tangent tolerance.
                    Control the angle accuracy of the rebuild surface in relation to the input curves.It is expressed in degree.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double TangentTolerance
            (
            );
            /**Sets  the tangent tolerance.
                    Control the angle accuracy of the rebuild surface in relation to the input curves.It is expressed in degree.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetTangentTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the curvature tolerance.
                    Control the curvature tolerance of the rebuild surface in relation to the input curves.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: double CurvatureTolerance
            (
            );
            /**Sets  the curvature tolerance.
                    Control the curvature tolerance of the rebuild surface in relation to the input curves.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetCurvatureTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the body type options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ThroughCurveMeshBuilder::BodyPreferenceTypes BodyPreference
            (
            );
            /**Sets  the body type options 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING"), nx_freeform_1 ("basic freeform modeling") */
            public: void SetBodyPreference
            (
                NXOpen::Features::ThroughCurveMeshBuilder::BodyPreferenceTypes bodyPreference /** bodypreference */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
