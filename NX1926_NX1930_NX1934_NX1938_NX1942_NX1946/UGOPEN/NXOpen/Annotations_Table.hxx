#ifndef NXOpen_ANNOTATIONS_TABLE_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_TABLE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_Table.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class Table;
    }
    class DisplayableObject;
    namespace Annotations
    {
        class _TableBuilder;
        class TableImpl;
        /**
            Represents a @link NXOpen::Annotations::Table NXOpen::Annotations::Table@endlink .
            This class represents a tabular note.
             <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  Table : public NXOpen::DisplayableObject
        {
            /**  Represents mode of insertion of a row
                    */
            public: enum InsertRowsType
            {
                InsertRowsTypeAbove/** Insert row above. */,
                InsertRowsTypeBelow/** Insert row below. */
            };

            /**  Represents mode of insertion of a column
                    */
            public: enum InsertColumnsType
            {
                InsertColumnsTypeLeft/** Insert column to left. */,
                InsertColumnsTypeRight/** Insert column to right. */
            };

            private: TableImpl * m_table_impl;
            private: friend class  _TableBuilder;
            protected: Table();
            public: ~Table();
            /** Update tabular note 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void DoUpdate
            (
            );
            /** Evalute rules and update tabular note 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void EvaluateRulesAndUpdate
            (
            );
            /** Edit Cell Text 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void EditCellText
            (
                NXOpen::DisplayableObject * tableCell /** Table cell object to edit cell text.*/,
                const NXString & text /** Text to edit cell text of table cell object.*/
            );
            /** Edit Cell Text 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            void EditCellText
            (
                NXOpen::DisplayableObject * tableCell /** Table cell object to edit cell text.*/,
                const char * text /** Text to edit cell text of table cell object.*/
            );
            /** Resize rows and columns 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void ResizeRowsCols
            (
                const std::vector<NXOpen::DisplayableObject *> & rowsOrColumns /** Table row or column object to resize.*/,
                double resizeValue /** Value to resize row or column.*/
            );
            /** Lock or Unlock Rows 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void LockUnlockRows
            (
                const std::vector<NXOpen::DisplayableObject *> & rows /** Array of table row object to lock or unlock.*/
            );
            /** Insert Rows 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void InsertRows
            (
                const std::vector<NXOpen::DisplayableObject *> & selectedRows /** array of selected table row object to insert new rows.*/,
                NXOpen::Annotations::Table::InsertRowsType insertRowsInTabularNote /** position of table row to be inserted in the table.*/
            );
            /** Insert Columns 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void InsertColumns
            (
                const std::vector<NXOpen::DisplayableObject *> & selectedColumns /** array of selected table column object to insert new rows.*/,
                NXOpen::Annotations::Table::InsertColumnsType insertColumnsInTabularNote /** position of table column to be inserted in the table.*/
            );
            /** Insert Header Row 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void InsertHeaderRow
            (
            );
            /** Check Row Lock/Unlock Status 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: bool IsRowLocked
            (
                NXOpen::DisplayableObject * row /** row */ 
            );
            /** Save Parts List or Table as Template 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SaveAsTemplate
            (
                const NXString & filePath /**Filename of the template with qualified path */
            );
            /** Save Parts List or Table as Template 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SaveAsTemplate
            (
                const char * filePath /**Filename of the template with qualified path */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
