#ifndef NXOpen_ROUTING_ASSEMBLYDEFINITION_HXX_INCLUDED
#define NXOpen_ROUTING_ASSEMBLYDEFINITION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_AssemblyDefinition.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_ItemDefinition.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class AssemblyDefinition;
    }
    namespace Routing
    {
        class ItemDefinition;
    }
    namespace Routing
    {
        class SingleDevice;
    }
    namespace Routing
    {
        class _AssemblyDefinitionBuilder;
        class AssemblyDefinitionImpl;
        /** @brief 
                 Represents a collection of @link NXOpen::Routing::SingleDevice NXOpen::Routing::SingleDevice@endlink  objects that are used in an assembled product.
                

         
                <br> 
                <br>  
                <br> 
                 This class is abstract.
                <br>  
             <br> No creator is available in KF because this is an abstract class.  <br> 
         <br>  Created in NX4.0.2.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  AssemblyDefinition : public NXOpen::Routing::ItemDefinition
        {
            private: AssemblyDefinitionImpl * m_assemblydefinition_impl;
            private: friend class  _AssemblyDefinitionBuilder;
            protected: AssemblyDefinition();
            public: ~AssemblyDefinition();
            /** Gets the list of @link NXOpen::Routing::SingleDevice NXOpen::Routing::SingleDevice@endlink  objects contained in the assembly. 
                        The returned list is empty if the assembly does not contain any objects.  @return  list of objects in the assembly 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Routing::SingleDevice *> GetSingleDeviceChildren
            (
            );
            /** Replaces the list of @link NXOpen::Routing::SingleDevice NXOpen::Routing::SingleDevice@endlink  objects contained in the assembly. 
                        Using NULL for replacementChildren is not allowed. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void ReplaceSingleDeviceChildren
            (
                const std::vector<NXOpen::Routing::SingleDevice *> & replacementChildren /** @link NXOpen::Routing::SingleDevice NXOpen::Routing::SingleDevice@endlink  children to use in replacing the children of this Assembly Definition. */
            );
            /** Adds a @link NXOpen::Routing::SingleDevice NXOpen::Routing::SingleDevice@endlink  object to the list of objects contained in the assembly. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void AddSingleDeviceChild
            (
                NXOpen::Routing::SingleDevice * device /** object to add */
            );
            /** Removes a @link NXOpen::Routing::SingleDevice NXOpen::Routing::SingleDevice@endlink  from the list of objects contained in the assembly. 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void RemoveSingleDeviceChild
            (
                NXOpen::Routing::SingleDevice * device /** object to remove */
            );
            /** Determines if a @link NXOpen::Routing::SingleDevice NXOpen::Routing::SingleDevice@endlink  object is contained in the assembly  @return  TRUE if the object is in the AssemblyDefinition 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: bool IsSingleDeviceChild
            (
                NXOpen::Routing::SingleDevice * device /** object to test */
            );
            /** Gets the @link NXOpen::Routing::SingleDevice NXOpen::Routing::SingleDevice@endlink  object that has this AssemblyDefinition object as its definition.  @return  instance of the AssemblyDefinion 
             <br>  Created in NX4.0.2.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::SingleDevice * GetReferencingDevice
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
