#ifndef NXOpen_ASSEMDEBUGSESSION_HXX_INCLUDED
#define NXOpen_ASSEMDEBUGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AssemDebugSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class AssemDebugSession;
    class DebugSession;
    class BasePart;
    class TaggedObject;
    class AssemDebugSessionImpl;

    /// \cond NX_NO_DOC 
    /** Represents a class that is used for NX ASSEM Autotest.  This class should not
    be made available to customers  <br> To obtain an instance of this class, refer to @link NXOpen::DebugSession  NXOpen::DebugSession @endlink  <br> 
     <br>  Created in NX6.0.2.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  AssemDebugSession
    {
         /** The members of this structure control the priting of assembly structure information 
         <br>  Created in NX1926.0.0.  <br>  
        */
        public:
        struct PrintAssemblyStructureInformationFlags
        {
            public: /** tree structure info (parent, children) */bool PrintTreeStructure;
            public: /** Refset Info */bool PrintRefset;
            public: /** Position Info */bool PrintPosition;
            public: /** Arrangement Info */bool PrintArrangement;
            public: /** Suppression Info */bool PrintSuppressionInfo;
            public: /** Constraints Info */bool PrintConstraintsInfo;
            public: /** 4GDGroup */bool Print4gdgroup;
            public: /** Quantity Info */bool PrintQuantity;
            public: /** Format Info */bool PrintFormat;
            public: PrintAssemblyStructureInformationFlags() :
                PrintTreeStructure(),
                PrintRefset(),
                PrintPosition(),
                PrintArrangement(),
                PrintSuppressionInfo(),
                PrintConstraintsInfo(),
                Print4gdgroup(),
                PrintQuantity(),
                PrintFormat()
            {
            }
            /** Constructor for the PrintAssemblyStructureInformationFlags struct. */ 
            public: PrintAssemblyStructureInformationFlags(bool printTreeStructureInitial /** tree structure info (parent, children) */, 
                    bool printRefsetInitial /** Refset Info */, 
                    bool printPositionInitial /** Position Info */, 
                    bool printArrangementInitial /** Arrangement Info */, 
                    bool printSuppressionInfoInitial /** Suppression Info */, 
                    bool printConstraintsInfoInitial /** Constraints Info */, 
                    bool print4gdgroupInitial /** 4GDGroup */, 
                    bool printQuantityInitial /** Quantity Info */, 
                    bool printFormatInitial /** Format Info */) :
                PrintTreeStructure(printTreeStructureInitial),
                PrintRefset(printRefsetInitial),
                PrintPosition(printPositionInitial),
                PrintArrangement(printArrangementInitial),
                PrintSuppressionInfo(printSuppressionInfoInitial),
                PrintConstraintsInfo(printConstraintsInfoInitial),
                Print4gdgroup(print4gdgroupInitial),
                PrintQuantity(printQuantityInitial),
                PrintFormat(printFormatInitial)
            {
            }
        };

        /** Represents the Parasolid Part Event Monitor id
            */
        public: enum ParasolidLoadStatusEventId { ParasolidLoadStatusEventIdDummyMember }; // Used as an id
        /** Represents the CM Partition Load Event Monitor id
            */
        public: enum CmPartitionLoadStatusEventId { CmPartitionLoadStatusEventIdDummyMember }; // Used as an id
        private: AssemDebugSessionImpl * m_assemdebugsession_impl;
        private: NXOpen::DebugSession* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit AssemDebugSession(NXOpen::DebugSession *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~AssemDebugSession();
        /** Compare the input plmxml file to a master plmxml filename  
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void ComparePlmxml
        (
            const NXString & masterXmlFilename /** Recorded PLMXML file name */,
            const NXString & newXmlFilename /** Playback PLMXML file name */
        );
        /** Compare the input plmxml file to a master plmxml filename  
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void ComparePlmxml
        (
            const char * masterXmlFilename /** Recorded PLMXML file name */,
            const char * newXmlFilename /** Playback PLMXML file name */
        );
        /** Create a new plmxml file for the input part with the given name 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void NewPlmxml
        (
            NXOpen::BasePart * workPart /** Part Filename */,
            const NXString & newXml /** New PLMXML filename */
        );
        /** Create a new plmxml file for the input part with the given name 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        void NewPlmxml
        (
            NXOpen::BasePart * workPart /** Part Filename */,
            const char * newXml /** New PLMXML filename */
        );
        /** Print all in-session inter-part links 
         <br>  Created in NX6.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintAllIpLinksInSession
        (
        );
        /** Print information about all constraints in session 
         <br>  Created in NX6.0.3.  <br>  
         <br> License requirements : None */
        public: void PrintConstraintInformation
        (
        );
        /** Print information about all the reference set objects in the given part 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void PrintReferenceSetsInformationOfPart
        (
            NXOpen::BasePart * basePart /** basepart */ 
        );
        /** Print the corresponding lightweight bodies for the solid bodies
                that are displayed in the current work view 
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintLightweightOfAllDisplayedBodiesInWorkView
        (
        );
        /** Print information about all the components in the given part 
                Please do not use this as we have written new alternative function JA_ASSEM_DEBUG_print_assembly_structure_flag 
            
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void PrintAllComponentsInPart
        (
            NXOpen::BasePart * basePart /** basepart */ 
        );
        /** Print information about all the components representation status in the given display part 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void PrintAllComponentsRepresentationStatusInPart
        (
            NXOpen::BasePart * basePart /** basepart */ 
        );
        /** Print information about the visibility status of all the components that have there parts loaded in the given displayed part 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintAllComponentsVisibilityStatusInPart
        (
            NXOpen::BasePart * basePart /** basepart */ 
        );
        /** Print all referencers to in-session product interfaces 
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: void PrintAllPiReferencesInSession
        (
        );
        /** Start gathering Parasolid Part Event Monitor status in the given display part  @return  Client Id for the PEM 
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::AssemDebugSession::ParasolidLoadStatusEventId StartPrintAllParasolidLoadStatusInPart
        (
        );
        /** Stop gathering information about the Parasolid Part Event Monitor in the given display part 
         <br>  Created in NX7.5.1.  <br>  
         <br> License requirements : None */
        public: void EndPrintAllParasolidLoadStatusInPart
        (
            NXOpen::AssemDebugSession::ParasolidLoadStatusEventId clientId /** Client id for the PEM */
        );
        /** Start gathering CM Partition Part Event Monitor status in the given display part  @return  Client Id for the PEM 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AssemDebugSession::CmPartitionLoadStatusEventId StartPrintAllCmPartitionLoadStatusInPart
        (
        );
        /** Stop gathering information about the CM Partition Part Event Monitor in the given display part 
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void EndPrintAllCmPartitionLoadStatusInPart
        (
            NXOpen::AssemDebugSession::CmPartitionLoadStatusEventId clientId /** Client id for the PEM */
        );
        /** Dump the CFI structured storage hierarchy for the specified part into xml. This includes both storage
                and stream data. If includeQafData is true then all the quick access folders(QAF) data will be
                dumped as well.
            
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : None */
        public: void PrintStructuredStorages
        (
            NXOpen::BasePart * basePart /** basepart */ ,
            bool includeQafData /** If true then include quick access folders */
        );
        /**
                Dump the component pattern data information into xml.
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void PrintCompPatternInformationInPart
        (
            NXOpen::BasePart * basePart /** basepart */ 
        );
        /**
                Dumps part family data in work part into xml.
            
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintPartFamilyData
        (
            NXOpen::BasePart * workPart /** workpart */ 
        );
        /**
                Dumps modification state of loaded parts in session into xml.
            
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintLoadedPartsModifiedState
        (
        );
        /**
                Process any pending Assembly Navigator updates.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void ProcessAssemblyNavigatorUpdates
        (
        );
        /**
                Expand all in the Assembly Navigator.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void ExpandAssemblyNavigator
        (
        );
        /**
                Expand all in the Constraint Navigator.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void ExpandConstraintNavigator
        (
        );
        /**
                Dump clearance data in display part into xml.
            
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintClearanceData
        (
            NXOpen::BasePart * displayPart /** displaypart */ 
        );
        /**
                Dump SOME clearance data in the display part into XML.
            
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void PrintClearanceDataLessInfo
        (
            NXOpen::BasePart * displayPart /** displaypart */ 
        );
        /**
                Output autotest validation XML for component positions from the given assembly.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintComponentPositions
        (
            NXOpen::BasePart * displayPart /** displaypart */ 
        );
        /**
                Dump assembly order data information into xml.
            
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintAssemblyOrdersData
        (
            NXOpen::BasePart * displayPart /** displaypart */ 
        );
        /**
                Dump positioning task collection information into xml.
            
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintPositioningTaskInformation
        (
            NXOpen::BasePart * displayPart /** displaypart */ 
        );
        /**
                Write out part load information for all loaded parts in the session to the autotest XML file.
                The version input argument specifies which version of the implementation to use.
                The options parameter allows some control about how much information will be written out.
                See the implementation of the underlying function for details about options.
            
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintPartLoadInformationWithOptions
        (
            int version /** Implementation version to use */,
            int options /** Defines behavior, deliberately not further specified. */
        );
        /**
                Dump information about partial load status of all parts in session into xml.
                This is equivalent to @link NXOpen::AssemDebugSession::PrintPartLoadInformation NXOpen::AssemDebugSession::PrintPartLoadInformation@endlink  with version 0 and options 0.

                This method has been deprecated because its output produces UIDs and therefore will be new and unstable every time a part is
                created in the session
            
         <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::AssemDebugSession::PrintPartLoadInformationWithOptions NXOpen::AssemDebugSession::PrintPartLoadInformationWithOptions@endlink  instead. <br>  

         <br>  Created in NX10.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::AssemDebugSession::PrintPartLoadInformationWithOptions instead.") void PrintPartLoadInformation
        (
        );
        /**
                Prints DOF of all part occurrences that have positioning control in the work part.
            
         <br>  Created in NX10.0.2.  <br>  
         <br> License requirements : None */
        public: void PrintDofOfComponents
        (
            NXOpen::BasePart * part /** part */ 
        );
        /** Prints assembly navigator columns and nodes information.
            
         <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::AssemDebugSession::PrintAssemblyNavigatorInfo NXOpen::AssemDebugSession::PrintAssemblyNavigatorInfo@endlink  instead. <br>  

         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::AssemDebugSession::PrintAssemblyNavigatorInfo instead.") void PrintAssemblyNavigatorInformation
        (
        );
        /** Prints assembly navigator columns and nodes information.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintAssemblyNavigatorInfo
        (
        );
        /** Prints multiple display part information. The version input argument specifies
                which version of the output information on multiple display parts to use.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintMultipleDisplayPartInformation
        (
            int version /** Defines which version of the validation information to use. Typically, this is a non-negative number. */
        );
        /** Prints out the current CONTEXT to the syslog file.
                See the implementation of the underlying function for details about options.
                This is not for validation, but for autotest investigation.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintCurrentContextToSyslog
        (
            const NXString & prefix /** A prefix string to print to the syslog. May be NULL.*/,
            int options /** Defines behavior, deliberately not further specified. */
        );
        /** Prints out the current CONTEXT to the syslog file.
                See the implementation of the underlying function for details about options.
                This is not for validation, but for autotest investigation.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        void PrintCurrentContextToSyslog
        (
            const char * prefix /** A prefix string to print to the syslog. May be NULL.*/,
            int options /** Defines behavior, deliberately not further specified. */
        );
        /** Allows watching or unwatching of CONTEXT.
                See the implementation of the underlying function for details about options.
                This is not for validation, but for autotest investigation. Tests should not be submitted with calls to this
                function in them.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void WatchContext
        (
            NXOpen::TaggedObject * partOrPartOcc /** The part or part occurrence to watch, or NULL_TAG. */,
            int options /** Defines behavior, deliberately not further specified. */
        );
        /** Print following information for each of the component of the given assembly to autotest xml file
                 Component name, Visibility, Non Visibility Reason, Reference Set, Number of Solid Body Occs, Number of Solid Body Face Occs,
                 Number of Solid Body Edge Occs, Part File Name.
             
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: void PrintAssemblyComponentInformation
        (
            NXOpen::BasePart * part /** Top Assembly Part Tag */
        );
        /** Print following information for each of the component of the given assembly to autotest xml file
                 Component name, Visibility, Non Visibility Reason, Reference Set, Number of Solid Body Occs, Number of Solid Body Face Occs,
                 Number of Solid Body Edge Occs, Part File Name.
                 Version 0: Exactly same as JA_ASSEM_DEBUG_print_assembly_component_information above
                            Native parts: Leaf name (excluding extension).
                            Managed parts: %UL leaf spec (including UIDs).
                 Version 1: Prints stable part filenames
                            Native parts : Leaf name (including extension).
                            Managed parts : @DB cli spec (excluding UIDs).
            
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintAssemblyComponentInformationWithOptions
        (
            NXOpen::BasePart * part /** Top Assembly Part Tag */,
            int version /** Implementation version to use */,
            int options /** Defines behavior, deliberately not further specified. */
        );
        /** Same as Check World, but limited to only the OCC_part of the part which is passed in.
            
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void CheckOccPartOfPart
        (
            NXOpen::BasePart * part /** part */ 
        );
        /** Print nx_edit_reference utility output in xml
            
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintNxEditRefInformation
        (
            const NXString & outputFilePath /** A nx_edit_references output file path string.*/
        );
        /** Print nx_edit_reference utility output in xml
            
         <br>  Created in NX1872.0.0.  <br>  
         <br> License requirements : None */
        void PrintNxEditRefInformation
        (
            const char * outputFilePath /** A nx_edit_references output file path string.*/
        );
        /** Print information about assembly structure in the given part
            
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void PrintAssemblyStructureFlag
        (
            NXOpen::BasePart * basePart /** basepart */ ,
            const NXOpen::AssemDebugSession::PrintAssemblyStructureInformationFlags & flags /** flags */ 
        );
        /** Print information about Explosion in the given part
            
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void CheckExplosion
        (
            NXOpen::BasePart * part /** part */ 
        );
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
