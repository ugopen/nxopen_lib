#ifndef NXOpen_AME_PLCTYPES_HXX_INCLUDED
#define NXOpen_AME_PLCTYPES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PlcTypes.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        /**
                Definition of the Address Object I/O types
                See Xml node IoType
            */
        enum AddressObjectIotype
        {
            AddressObjectIotypeEmpty/** empty */ ,
            AddressObjectIotypeInput/** input */ ,
            AddressObjectIotypeOutput/** output */ 
        };

        /**
                Definition of the PLC data types
            */
        enum PlcDataType
        {
            PlcDataTypeDb/** db */ ,
            PlcDataTypeFb/** fb */ ,
            PlcDataTypeFc/** fc */ ,
            PlcDataTypeBlockDb/** block db */ ,
            PlcDataTypeBlockFb/** block fb */ ,
            PlcDataTypeBlockFc/** block fc */ ,
            PlcDataTypeBlockSdb/** block sdb */ ,
            PlcDataTypeBlockSfb/** block sfb */ ,
            PlcDataTypeBlockSfc/** block sfc */ ,
            PlcDataTypeBlockOb/** block ob */ ,
            PlcDataTypeBool/** bool */ ,
            PlcDataTypeByte/** byte */ ,
            PlcDataTypeChar/** char */ ,
            PlcDataTypeCounter/** counter */ ,
            PlcDataTypeDate/** date */ ,
            PlcDataTypeDint/** dint */ ,
            PlcDataTypeDword/** dword */ ,
            PlcDataTypeInt/** int */ ,
            PlcDataTypeReal/** real */ ,
            PlcDataTypeS5time/** s5time */ ,
            PlcDataTypeTime/** time */ ,
            PlcDataTypeTimeOfDay/** time of day */ ,
            PlcDataTypeTimer/** timer */ ,
            PlcDataTypeWord/** word */ ,
            PlcDataTypeAomIdent/** aom ident */ ,
            PlcDataTypeConnAny/** conn any */ ,
            PlcDataTypeConnOuc/** conn ouc */ ,
            PlcDataTypeConnPrg/** conn prg */ ,
            PlcDataTypeConnRId/** conn rid */ ,
            PlcDataTypeDbAny/** db any */ ,
            PlcDataTypeDbDyn/** db dyn */ ,
            PlcDataTypeDbWww/** db www */ ,
            PlcDataTypeEventAny/** event any */ ,
            PlcDataTypeEventAtt/** event att */ ,
            PlcDataTypeEventHwint/** event hwint */ ,
            PlcDataTypeHwAny/** hw any */ ,
            PlcDataTypeHwDevice/** hw device */ ,
            PlcDataTypeHwDpmaster/** hw dpmaster */ ,
            PlcDataTypeHwDpslave/** hw dpslave */ ,
            PlcDataTypeHwHsc/** hw hsc */ ,
            PlcDataTypeHwIeport/** hw ieport */ ,
            PlcDataTypeHwInterface/** hw interface */ ,
            PlcDataTypeHwIo/** hw io */ ,
            PlcDataTypeHwIosystem/** hw iosystem */ ,
            PlcDataTypeHwModule/** hw module */ ,
            PlcDataTypeHwPto/** hw pto */ ,
            PlcDataTypeHwPwm/** hw pwm */ ,
            PlcDataTypeHwSubmodule/** hw submodule */ ,
            PlcDataTypeLdt/** ldt */ ,
            PlcDataTypeLint/** lint */ ,
            PlcDataTypeLreal/** lreal */ ,
            PlcDataTypeLtime/** ltime */ ,
            PlcDataTypeLtimeOfDay/** ltime of day */ ,
            PlcDataTypeLword/** lword */ ,
            PlcDataTypeObAny/** ob any */ ,
            PlcDataTypeObAtt/** ob att */ ,
            PlcDataTypeObCyclic/** ob cyclic */ ,
            PlcDataTypeObDelay/** ob delay */ ,
            PlcDataTypeObDiag/** ob diag */ ,
            PlcDataTypeObHwint/** ob hwint */ ,
            PlcDataTypeObPcycle/** ob pcycle */ ,
            PlcDataTypeObStartup/** ob startup */ ,
            PlcDataTypeObTimeerror/** ob timeerror */ ,
            PlcDataTypeObTod/** ob tod */ ,
            PlcDataTypePip/** pip */ ,
            PlcDataTypePort/** port */ ,
            PlcDataTypeRtm/** rtm */ ,
            PlcDataTypeSint/** sint */ ,
            PlcDataTypeUdint/** udint */ ,
            PlcDataTypeUint/** uint */ ,
            PlcDataTypeUlint/** ulint */ ,
            PlcDataTypeUsint/** usint */ ,
            PlcDataTypeWChar/** wchar */ ,
            PlcDataTypeDtl/** dtl */ ,
            PlcDataTypeWstring/** wstring */ ,
            PlcDataTypeErrorstruct/** errorstruct */ ,
            PlcDataTypeIecCounter/** iec counter */ ,
            PlcDataTypeIecDcounter/** iec dcounter */ ,
            PlcDataTypeIecLcounter/** iec lcounter */ ,
            PlcDataTypeIecLtimer/** iec ltimer */ ,
            PlcDataTypeIecScounter/** iec scounter */ ,
            PlcDataTypeIecTimer/** iec timer */ ,
            PlcDataTypeIecUcounter/** iec ucounter */ ,
            PlcDataTypeIecUdcounter/** iec udcounter */ ,
            PlcDataTypeIecUlcounter/** iec ulcounter */ ,
            PlcDataTypeIecUscounter/** iec uscounter */ ,
            PlcDataTypeCref/** cref */ ,
            PlcDataTypeNref/** nref */ ,
            PlcDataTypeVref/** vref */ ,
            PlcDataTypeHscPeriod/** hsc period */ ,
            PlcDataTypeTaddrParam/** taddr param */ ,
            PlcDataTypeSslHeader/** ssl header */ ,
            PlcDataTypeConditions/** conditions */ ,
            PlcDataTypeTconParam/** tcon param */ ,
            PlcDataTypeDateAndTime/** date and time */ ,
            PlcDataTypeString/** string */ ,
            PlcDataTypeUdt/** udt */ ,
            PlcDataTypeAny/** any */ ,
            PlcDataTypeStruct/** struct */ ,
            PlcDataTypeArray/** array */ ,
            PlcDataTypeOb/** ob */ ,
            PlcDataTypeVariant/** variant */ ,
            PlcDataTypeUndefined/** undefined */ ,
            PlcDataTypeUnknown/** unknown */ 
        };

        /**
                Definition of the memory section types
            */
        enum MemorySectionType
        {
            MemorySectionTypeInput/** input */ ,
            MemorySectionTypeOutput/** output */ ,
            MemorySectionTypeMemory/** memory */ ,
            MemorySectionTypeTimer/** timer */ ,
            MemorySectionTypeCounter/** counter */ ,
            MemorySectionTypeNone/** none */ ,
            MemorySectionTypePeriphery/** periphery */ ,
            MemorySectionTypePeripheryInput/** periphery input */ ,
            MemorySectionTypePeripheryOutput/** periphery output */ ,
            MemorySectionTypeFb/** fb */ ,
            MemorySectionTypeFc/** fc */ ,
            MemorySectionTypeDb/** db */ ,
            MemorySectionTypeDi/** di */ ,
            MemorySectionTypeLocalc/** localc */ ,
            MemorySectionTypeLocaln/** localn */ ,
            MemorySectionTypeDbc/** dbc */ ,
            MemorySectionTypeDbr/** dbr */ ,
            MemorySectionTypeDbv/** dbv */ 
        };

        /**
                Definition of the data type sources
            */
        enum PlcDataTypeSource
        {
            PlcDataTypeSourceStandard/** standard */ ,
            PlcDataTypeSourceUdtProject/** udt project */ ,
            PlcDataTypeSourceUdtLibrary/** udt library */ ,
            PlcDataTypeSourceUdtName/** udt name */ ,
            PlcDataTypeSourceStruct/** struct */ 
        };

        /**
                Definition of type of Telegrams
            */
        enum TelegramType
        {
            TelegramTypeExtension/** extension */ ,
            TelegramTypeSupplementary/** supplementary */ ,
            TelegramTypeTorque/** torque */ ,
            TelegramTypeSafetyTintegrated/** safety tintegrated */ ,
            TelegramTypeMain/** main */ 
        };

        /**
                Definition of type of Telegrams 
            */
        enum SendReceiveType
        {
            SendReceiveTypeSendAndReceive/** send and receive */ ,
            SendReceiveTypeSend/** send */ ,
            SendReceiveTypeReceive/** receive */ 
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
