#ifndef NXOpen_ROUTING_OVERSTOCK_HXX_INCLUDED
#define NXOpen_ROUTING_OVERSTOCK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_Overstock.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Routing_Stock.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class Overstock;
    }
    class Curve;
    namespace Routing
    {
        class Stock;
    }
    class Scalar;
    namespace Routing
    {
        /** Describes the type of overstock. */
        enum Type
        {
            TypeUnknown/** unknown */  = -1,
            TypeFixedCrossSection/** fixed cross section */ ,
            TypeWrapped/** wrapped */ ,
            TypeSleeved/** sleeved */ ,
            TypeFlagged/** flagged */ 
        };

        /** Describes the overstock creation method. */
        enum CreationMethod
        {
            CreationMethodUnknown/** unknown */  = -1,
            CreationMethodEntireSegments/** entire segments */ ,
            CreationMethodInterval/** interval */ ,
            CreationMethodPointToPoint/** point to point */ ,
            CreationMethodPointAndLength/** point and length */ 
        };

    }
    namespace Routing
    {
        class _OverstockBuilder;
        class OverstockImpl;
        /** Represents an @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink  object.  <br> Creator not available in KF.  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  Overstock : public NXOpen::Routing::Stock
        {
            private: OverstockImpl * m_overstock_impl;
            private: friend class  _OverstockBuilder;
            protected: Overstock();
            public: ~Overstock();
            /** Returns the segments over which this @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink  is applied.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: std::vector<NXOpen::Curve *> GetOverstockSegments
            (
            );
            /** Returns the type of overstock. Possible types are wrapped, sleeved, flagged and
                        an overstock with fixed cross section.  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Routing::Type GetOverstockType
            (
            );
            /** Returns the creation method of this @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Routing::CreationMethod GetOverstockCreationMethod
            (
            );
            /** Returns the number of wraps for this @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Scalar * GetNumberOfWraps
            (
            );
            /** Get the overlap percentage of this @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Scalar * GetPercentageOverlap
            (
            );
            /** Get the gap distance for this @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Scalar * GetGapDistance
            (
            );
            /** Get the width of this @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Scalar * GetWidth
            (
            );
            /** Get the thickness of this @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: NXOpen::Scalar * GetThickness
            (
            );
            /** Get the stocks covering this @link NXOpen::Routing::Overstock NXOpen::Routing::Overstock@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") OR routing_harness ("Routing Harness") OR routing_cabling ("Routing Cabling") OR routing_pipetube ("Routing Piping and Tubing") OR routing_hvac ("Routing HVAC") OR routing_platform ("Routing Platform") OR routing_pid ("Routing PID") */
            public: std::vector<NXOpen::Routing::Stock *> GetCoveredStocks
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
