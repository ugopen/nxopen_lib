#ifndef NXOpen_CURVECOLLECTION_HXX_INCLUDED
#define NXOpen_CURVECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CurveCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class CurveCollection;
    class BasePart;
    class Curve;
    class Arc;
    class Ellipse;
    class Hyperbola;
    class ICurve;
    class IParameterizedSurface;
    class InfiniteLine;
    class Line;
    class NXMatrix;
    class Parabola;
    class Point;
    class Section;
    class Xform;
    class CurveCollectionImpl;
    /** @brief  Represents a collection of @link NXOpen::Curve NXOpen::Curve@endlink .  

     

    Iterating this collection only returns live uncondemned objects contained in the owning part
    of the collection. Note that @link NXOpen::Curve NXOpen::Curve@endlink  is a smart object and many smart objects are condemned as they
    only exist to support other objects and are not displayed. <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  CurveCollection : public NXOpen::TaggedObjectCollection
    {
        private: CurveCollectionImpl * m_curvecollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit CurveCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~CurveCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::CurveCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Curve *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(nullptr), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::CurveCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * () const;
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::CurveCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Creates a @link NXOpen::Line NXOpen::Line@endlink .  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
        public: NXOpen::Line * CreateLine
        (
            const NXOpen::Point3d & startPoint /** Start point */,
            const NXOpen::Point3d & endPoint /** End point */
        );
        /** Creates a @link NXOpen::Line NXOpen::Line@endlink  joining given start @link NXOpen::Point NXOpen::Point@endlink  and
                End @link NXOpen::Point NXOpen::Point@endlink .  @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
        public: NXOpen::Line * CreateLine
        (
            NXOpen::Point * startPoint /** Start @link NXOpen::Point NXOpen::Point@endlink  */,
            NXOpen::Point * endPoint /** End @link NXOpen::Point NXOpen::Point@endlink  */
        );
        /** Creates a @link NXOpen::InfiniteLine NXOpen::InfiniteLine@endlink  that passes through the two specified points.  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : nx_layout ("NX Layout") */
        public: NXOpen::InfiniteLine * CreateInfiniteLine
        (
            const NXOpen::Point3d & startPoint /** Start point */,
            const NXOpen::Point3d & endPoint /** End point */
        );
        /** Creates a paired @link NXOpen::InfiniteLine NXOpen::InfiniteLine@endlink  that is paired to the specified line.  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : nx_layout ("NX Layout") */
        public: NXOpen::InfiniteLine * CreatePairedInfiniteLine
        (
            NXOpen::Line * line /** Paired @link NXOpen::Line NXOpen::Line@endlink  */
        );
        /** Creates an @link NXOpen::Arc NXOpen::Arc@endlink  that passes through the three specified points.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Arc * CreateArc
        (
            const NXOpen::Point3d & startPoint /** Start point */,
            const NXOpen::Point3d & pointOn /** Point that the arc passes through. */,
            const NXOpen::Point3d & endPoint /** End point */,
            bool alternateSolution /** If true, the arc will be created using the alternate solution instead of the regular solution.
                    The alternate solution for an arc is the portion of the full circle that is left out of the
                    regular solution.  For example, if the regular solution is an arc that goes from 0 to 45 degrees,
                    the alternate solution will be an arc with the same center and origin but that goes from 45 degrees to 360. */,
            bool* startAndEndGotFlipped /** If true, the start point of the arc that is
                                                                 created is at the end point parameter to this method and
                                                                 the end point of the arc is at the start point parameter.
                                                                 In other words, suppose you execute
                                                                 arc = Curves.CreateArc(startPointParam, pointOnParam, endPointParam, false, flipped).
                                                                 If flipped is true, then
                                                                 arc.StartPoint equals endPointParam and
                                                                 arc.EndPoint equals startPointParam.
                                                                 */
        );
        /** Creates an @link NXOpen::Arc NXOpen::Arc@endlink .  The arc will be created in a plane which passes 
                through center and whose normal is the Z axis of the orientation
                matrix.  (matrix.Element.xx, matrix.Element.xy, matrix.Element.xz) is the X axis of the
                orientation matrix.  (matrix.Element.yx, matrix.Element.yy, matrix.Element.yz) is the
                Y axis of the orientation matrix.  The start and end angles are measured relative to
                the X and Y axis of this orientation matrix.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Arc * CreateArc
        (
            const NXOpen::Point3d & center /** Center of the arc */,
            NXOpen::NXMatrix * matrix /** Orientation matrix for the arc. */,
            double radius /** Radius of the arc.  Must be greater than zero. */,
            double startAngle /** Start angle in radians  */,
            double endAngle /** End angle in radians */
        );
        /** Creates an @link NXOpen::Arc NXOpen::Arc@endlink .  The arc will be created 
                through the origin and whose normal is Z axis.  The start 
                and end angles are measured relative to the X and Y axes.  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Arc * CreateArc
        (
            const NXOpen::Point3d & center /** Center of the arc */,
            const NXOpen::Vector3d & xDirection /** X direction of the arc */,
            const NXOpen::Vector3d & yDirection /** Y direction of the arc */,
            double radius /** Radius of the arc.  Must be greater than zero. */,
            double startAngle /** Start angle in radians  */,
            double endAngle /** End angle in radians */
        );
        /** Creates an @link NXOpen::Ellipse NXOpen::Ellipse@endlink .  The ellipse will be created in a plane which passes 
                through center and whose normal is the Z axis of the orientation
                matrix.  (matrix.Element.xx, matrix.Element.xy, matrix.Element.xz) is the X axis of the
                orientation matrix.  (matrix.Element.yx, matrix.Element.yy, matrix.Element.yz) is the
                Y axis of the orientation matrix.  The start, end, and rotation angles are measured
                relative to the X and Y axis of this orientation matrix.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Ellipse * CreateEllipse
        (
            const NXOpen::Point3d & center /** Center of ellipse */,
            double majorRadius /** Major radius */,
            double minorRadius /** Minor radius */,
            double startAngle /** Start angle in radians */,
            double endAngle /** End angle in radians */,
            double rotationAngle /** Rotation angle in radians */,
            NXOpen::NXMatrix * matrix /** Orientation matrix for the ellipse */
        );
        /** Creates an @link NXOpen::Ellipse NXOpen::Ellipse@endlink .  The ellipse will be created 
                through the origin and whose normal is Z axis.  The start 
                and end angles are measured relative to the X and Y axes.  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Ellipse * CreateEllipse
        (
            const NXOpen::Point3d & center /** Center of the ellipse */,
            const NXOpen::Vector3d & xDirection /** X direction of the ellipse */,
            const NXOpen::Vector3d & yDirection /** Y direction of the ellipse */,
            double majorRadius /** Major radius of the ellipse.  Must be greater than zero. */,
            double minorRadius /** Minor radius of the ellipse.  Must be greater than zero. */,
            double startAngle /** Start angle in radians  */,
            double endAngle /** End angle in radians */
        );
        /** Creates a @link NXOpen::Parabola NXOpen::Parabola@endlink .  The parabola will be created in a plane which passes 
                through center and whose normal is the Z axis of the orientation
                matrix.  (matrix.Element.xx, matrix.Element.xy, matrix.Element.xz) is the X axis of the
                orientation matrix.  (matrix.Element.yx, matrix.Element.yy, matrix.Element.yz) is the
                Y axis of the orientation matrix.  The rotation angle is measured relative to the 
                X and Y axis of this orientation matrix.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Parabola * CreateParabola
        (
            const NXOpen::Point3d & center /** Center of parabola */,
            double focalLength /** Focal length */,
            double minimumDY /** Minimum DY width */,
            double maximumDY /** Maximum DY width */,
            double rotationAngle /** Rotation angle in radians */,
            NXOpen::NXMatrix * matrix /** Orientation matrix for the parabola */
        );
        /** Creates a @link NXOpen::Parabola NXOpen::Parabola@endlink .  The parabola will be created 
                through the origin and whose normal is Z axis.  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Parabola * CreateParabola
        (
            const NXOpen::Point3d & center /** Center of the parabola */,
            const NXOpen::Vector3d & xDirection /** X direction of the parabola */,
            const NXOpen::Vector3d & yDirection /** Y direction of the parabola */,
            double focalLength /** Focal length */,
            double minimumDY /** Minimum DY width */,
            double maximumDY /** Maximum DY width */
        );
        /** Creates a @link NXOpen::Hyperbola NXOpen::Hyperbola@endlink .  The hyperbola will be created in a plane which passes 
                through center and whose normal is the Z axis of the orientation
                matrix.  (matrix.Element.xx, matrix.Element.xy, matrix.Element.xz) is the X axis of the
                orientation matrix.  (matrix.Element.yx, matrix.Element.yy, matrix.Element.yz) is the
                Y axis of the orientation matrix.  The rotation angle is measured relative to the 
                X and Y axis of this orientation matrix.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Hyperbola * CreateHyperbola
        (
            const NXOpen::Point3d & center /** Center of hyperbola */,
            double semiTransverseLength /** Semi-transverse length */,
            double semiConjugateLength /** Semi-conjugate length */,
            double minimumDY /** Minimum DY width */,
            double maximumDY /** Maximum DY width */,
            double rotationAngle /** Rotation angle in radians */,
            NXOpen::NXMatrix * matrix /** Orientation matrix for the hyperbola */
        );
        /** Creates a @link NXOpen::Hyperbola NXOpen::Hyperbola@endlink .  The hyperbola will be created 
                through the origin and whose normal is Z axis.  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Hyperbola * CreateHyperbola
        (
            const NXOpen::Point3d & center /** Center of the hyperbola */,
            const NXOpen::Vector3d & xDirection /** X direction of the hyperbola */,
            const NXOpen::Vector3d & yDirection /** Y direction of the hyperbola */,
            double semiTransverseLength /** Semi-transverse length */,
            double semiConjugateLength /** Semi-conjugate length */,
            double minimumDY /** Minimum DY width */,
            double maximumDY /** Maximum DY width */
        );
        /** Creates a @link NXOpen::Curve NXOpen::Curve@endlink .  The virtual blend curve will be
                created for the input blend face. The virtual blend curve behaves similarly
                to the original edge that the blend face was applied on.  @return  
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Curve * CreateVirtualBlendCurve
        (
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            NXOpen::IParameterizedSurface * blendFace /** blend face */,
            double tolerance /** tolerance for computing the facsimile curve */
        );
        /** Creates a @link NXOpen::Curve NXOpen::Curve@endlink .  The virtual centerline curve will be
                created for the input blend face.  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Curve * CreateVirtualCenterlineCurve
        (
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            NXOpen::IParameterizedSurface * blendFace /** blend face */,
            double tolerance /** tolerance for computing the facsimile curve */
        );
        /** Creates a @link NXOpen::Curve NXOpen::Curve@endlink . The smart composite curve will be
                created for the input section.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Curve * CreateSmartCompositeCurve
        (
            NXOpen::Section * section /** Section from which smart composite curve will be created */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            double tolerance /** Tolerance used to join the section output curves */
        );
        /** Creates a @link NXOpen::Curve NXOpen::Curve@endlink . The smart composite curve will be
                created for the input curve.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") */
        public: NXOpen::Curve * CreateSmartCompositeCurve
        (
            NXOpen::Curve * curve /** Curve from which smart composite curve will be created */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a @link NXOpen::Curve NXOpen::Curve@endlink .  The extracted curve will be
                created for the input curve to extract.  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: NXOpen::ICurve * CreateExtractedCurve
        (
            NXOpen::ICurve * curveToExtract /** Curve or edge to be extracted */,
            int type /** Type */,
            int subtype /** Sub-Type */,
            NXOpen::Xform * xform /**  optional Xform */,
            double tolerance /** tolerance for computing the extract curve */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
