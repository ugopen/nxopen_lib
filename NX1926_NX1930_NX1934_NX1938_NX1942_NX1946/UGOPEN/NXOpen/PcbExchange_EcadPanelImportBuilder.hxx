#ifndef NXOpen_PCBEXCHANGE_ECADPANELIMPORTBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_ECADPANELIMPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_EcadPanelImportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class EcadPanelImportBuilder;
    }
    class Builder;
    namespace PcbExchange
    {
        class _EcadPanelImportBuilderBuilder;
        class EcadPanelImportBuilderImpl;
        /** Represents a @link NXOpen::PcbExchange::EcadPanelImportBuilder NXOpen::PcbExchange::EcadPanelImportBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreateEcadPanelImportBuilder  NXOpen::PcbExchange::Manager::CreateEcadPanelImportBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  EcadPanelImportBuilder : public NXOpen::Builder
        {
            /** This enum defines the Thieving options. */
            public: enum ThievingOptions
            {
                ThievingOptionsNone/** none */ ,
                ThievingOptionsCurve/** curve */ ,
                ThievingOptionsSolidBody/** solid body */ 
            };

            /** This enum defines the Optimization method option. */
            public: enum OptimizationMethodOptions
            {
                OptimizationMethodOptionsNone/** none */ ,
                OptimizationMethodOptionsPattern/** pattern */ 
            };

            private: EcadPanelImportBuilderImpl * m_ecadpanelimportbuilder_impl;
            private: friend class  _EcadPanelImportBuilderBuilder;
            protected: EcadPanelImportBuilder();
            public: ~EcadPanelImportBuilder();
            /**Returns  the panel folder 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PanelFolder
            (
            );
            /**Sets  the panel folder 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetPanelFolder
            (
                const NXString & panelFolder /** panelfolder */ 
            );
            /**Sets  the panel folder 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetPanelFolder
            (
                const char * panelFolder /** panelfolder */ 
            );
            /** Get the outputs parts  @return  Outputs parts list 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetOutputParts
            (
            );
            /** Set the outputs parts 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOutputParts
            (
                std::vector<NXString> & outputsParts /** Outputs parts list */
            );
            /** Get the outputs names  @return  Outputs names list 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetOutputNames
            (
            );
            /** Set the outputs names 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOutputNames
            (
                std::vector<NXString> & outputsNames /** Outputs names list */
            );
            /**Returns  the breakaway creation option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool Breakaway
            (
            );
            /**Sets  the breakaway creation option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetBreakaway
            (
                bool breakaway /** breakaway */ 
            );
            /**Returns  the thieving creation option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EcadPanelImportBuilder::ThievingOptions Thieving
            (
            );
            /**Sets  the thieving creation option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetThieving
            (
                NXOpen::PcbExchange::EcadPanelImportBuilder::ThievingOptions thieving /** thieving */ 
            );
            /**Returns  the solder masks creation option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool SolderMasks
            (
            );
            /**Sets  the solder masks creation option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetSolderMasks
            (
                bool solderMasks /** soldermasks */ 
            );
            /**Returns  the Optimization method option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EcadPanelImportBuilder::OptimizationMethodOptions OptimizationMethod
            (
            );
            /**Sets  the Optimization method option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOptimizationMethod
            (
                NXOpen::PcbExchange::EcadPanelImportBuilder::OptimizationMethodOptions optimizationMethod /** optimizationmethod */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
