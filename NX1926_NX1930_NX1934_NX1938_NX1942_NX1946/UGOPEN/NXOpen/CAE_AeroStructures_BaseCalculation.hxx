#ifndef NXOpen_CAE_AEROSTRUCTURES_BASECALCULATION_HXX_INCLUDED
#define NXOpen_CAE_AEROSTRUCTURES_BASECALCULATION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AeroStructures_BaseCalculation.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AeroStructures_CalculationLogLine.hxx>
#include <NXOpen/CAE_AeroStructures_ExtractionSourceSet.hxx>
#include <NXOpen/CAE_AeroStructures_Laminate.hxx>
#include <NXOpen/CAE_AeroStructures_LaminateQueryManager.hxx>
#include <NXOpen/CAE_AeroStructures_LoadCaseSet.hxx>
#include <NXOpen/CAE_AeroStructures_MethodDescriptor.hxx>
#include <NXOpen/CAE_AeroStructures_ParameterDescriptor.hxx>
#include <NXOpen/CAE_AeroStructures_TableParameter.hxx>
#include <NXOpen/CAE_FEElement.hxx>
#include <NXOpen/CAE_FENode.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/GeneralScalarTable.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace AeroStructures
        {
            class BaseCalculation;
        }
    }
    namespace Annotations
    {
        class NoteBase;
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class CalculationLogLine;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class ExtractionSourceSet;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class Laminate;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class LaminateQueryManager;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class LoadCaseSet;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class MethodDescriptor;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class PropTable;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class TableParameter;
        }
    }
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class FENode;
    }
    class GeneralScalarTable;
    class NXObject;
    class Unit;
    namespace CAE
    {
        namespace AeroStructures
        {
            class _BaseCalculationBuilder;
            class BaseCalculationImpl;
            /**  @brief  This is the  @link CAE::AeroStructures::BaseCalculation CAE::AeroStructures::BaseCalculation@endlink  

              
             <br>  Created in NX1926.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  BaseCalculation : public NXOpen::NXObject
            {
                /** the Status type */
                public: enum CalculationStatus
                {
                    CalculationStatusNotRun/** has not run */,
                    CalculationStatusError/** error */,
                    CalculationStatusSuccess/** success */
                };

                private: BaseCalculationImpl * m_basecalculation_impl;
                private: friend class  _BaseCalculationBuilder;
                protected: BaseCalculation();
                public: ~BaseCalculation();
                /**Returns  the calculation status 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::BaseCalculation::CalculationStatus Status
                (
                );
                /**Returns  the description 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Description
                (
                );
                /** Return the list of log entries 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetLog
                (
                    std::vector<NXOpen::CAE::AeroStructures::CalculationLogLine *> & logsEntries /** logsentries */ 
                );
                /** Cause scalar expressions to be updated 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void UpdateScalarExpressions
                (
                );
                /**Returns  the method descriptor 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::MethodDescriptor * MethodDescriptor
                (
                );
                /** Returns a list of all the current input names 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetInputNames
                (
                    std::vector<NXString> & inputNames /** inputnames */ 
                );
                /** Returns a list of all the current output names 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetOutputNames
                (
                    std::vector<NXString> & outputNames /** outputnames */ 
                );
                /** Returns the parameter type for a current input or output 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::ParameterDescriptor::ParameterType GetParameterType
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Returns the parameter type for a current input or output 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::CAE::AeroStructures::ParameterDescriptor::ParameterType GetParameterType
                (
                    const char * parameterName /** parametername */ 
                );
                /** Returns the user comment for an input 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetInputComment
                (
                    const NXString & inputName /** inputname */ 
                );
                /** Returns the user comment for an input 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetInputComment
                (
                    const char * inputName /** inputname */ 
                );
                /** Get the value of an integer input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetInputIntegerValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of an integer input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                int GetInputIntegerValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a scalar input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double GetInputScalarValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a scalar input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                double GetInputScalarValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the unit type of a scalar input parameter 
                              * Returns null if the parameter is unitless
                              
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Unit * GetInputScalarUnit
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the unit type of a scalar input parameter 
                              * Returns null if the parameter is unitless
                              
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::Unit * GetInputScalarUnit
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the location (element or node) from where the loads are extracted  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Result::Location GetInputLoadLocation
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the location (element or node) from where the loads are extracted  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::CAE::Result::Location GetInputLoadLocation
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the nodes where the loads are extracted from 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetInputLoadNodes
                (
                    const NXString & parameterName /** parametername */ ,
                    std::vector<NXOpen::CAE::FENode *> & nodeArray /** the list of support nodes, if available */
                );
                /** Get the nodes where the loads are extracted from 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                void GetInputLoadNodes
                (
                    const char * parameterName /** parametername */ ,
                    std::vector<NXOpen::CAE::FENode *> & nodeArray /** the list of support nodes, if available */
                );
                /** Get the elements where the loads are extracted from 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetInputLoadElements
                (
                    const NXString & parameterName /** parametername */ ,
                    std::vector<NXOpen::CAE::FEElement *> & elementArray /** the list of support elements, if available */
                );
                /** Get the elements where the loads are extracted from 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                void GetInputLoadElements
                (
                    const char * parameterName /** parametername */ ,
                    std::vector<NXOpen::CAE::FEElement *> & elementArray /** the list of support elements, if available */
                );
                /** Get the aggregated or non-aggregated load values of an input parameter for this row.
                                If the load values were aggregated, the output will be an array with only one value.
                                If the values were not aggregated, the output will be an array with one value per element or node. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<double> GetInputLoadValues
                (
                    const NXString & parameterName /** parametername */ ,
                    const NXString & loadCaseName /** loadcasename */ 
                );
                /** Get the aggregated or non-aggregated load values of an input parameter for this row.
                                If the load values were aggregated, the output will be an array with only one value.
                                If the values were not aggregated, the output will be an array with one value per element or node. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                std::vector<double> GetInputLoadValues
                (
                    const char * parameterName /** parametername */ ,
                    const char * loadCaseName /** loadcasename */ 
                );
                /** Get the aggregated or non-aggregated all load values of an input parameter
                                The output will be a general scalar table, one load by row.
                                If the load values were aggregated, the row will contain one column.
                                If the values were not aggregated, the row will contain one value per element or node per column. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeneralScalarTable * GetInputLoadValuesAll
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the aggregated or non-aggregated all load values of an input parameter
                                The output will be a general scalar table, one load by row.
                                If the load values were aggregated, the row will contain one column.
                                If the values were not aggregated, the row will contain one value per element or node per column. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::GeneralScalarTable * GetInputLoadValuesAll
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the unit type of a load input parameter.
                              * Returns null if the parameter is unitless
                              
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Unit * GetInputLoadUnit
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the unit type of a load input parameter.
                              * Returns null if the parameter is unitless
                              
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::Unit * GetInputLoadUnit
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a string input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetInputStringValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a string input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetInputStringValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a boolean input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool GetInputBooleanValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a boolean input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                bool GetInputBooleanValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a table input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::TableParameter * GetInputTableValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a table input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::CAE::AeroStructures::TableParameter * GetInputTableValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a laminate input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::Laminate * GetInputLaminateValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a laminate input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::CAE::AeroStructures::Laminate * GetInputLaminateValue
                (
                    const char * parameterName /** parametername */ 
                );
                /**Returns  the Property Table 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::PropTable * PropertyTable
                (
                );
                /**Returns  the LoadCaseSet used by the calculation
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::LoadCaseSet * LoadCaseSet
                (
                );
                /**Sets  the LoadCaseSet used by the calculation
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetLoadCaseSet
                (
                    NXOpen::CAE::AeroStructures::LoadCaseSet * loadCaseSet /** loadcaseset */ 
                );
                /** Get the value of an expanded file input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetInputFileValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of an expanded file input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetInputFileValue
                (
                    const char * parameterName /** parametername */ 
                );
                /**Returns  the Annotation 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Annotations::NoteBase * Annotation
                (
                );
                /**Returns  the ExtractionSourceSet for the calculation 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::ExtractionSourceSet * ExtractionSourceSet
                (
                );
                /**Sets  the ExtractionSourceSet for the calculation 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetExtractionSourceSet
                (
                    NXOpen::CAE::AeroStructures::ExtractionSourceSet * extractionSourceSet /** extractionsourceset */ 
                );
                /** Returns the laminate query manager 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::LaminateQueryManager * GetLaminateQueryManager
                (
                );
                /** Get the value of a size input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetInputSizeValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a size input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                int GetInputSizeValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Returns a boolean value that indicates whether the calculation has computed results 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool GetHasResult
                (
                );
                /** Returns a list of all the input names used in the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetResultInputNames
                (
                    std::vector<NXString> & inputNames /** inputnames */ 
                );
                /** Returns the user comment about an input in the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetResultInputComment
                (
                    const NXString & inputName /** inputname */ 
                );
                /** Returns the user comment about an input in the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetResultInputComment
                (
                    const char * inputName /** inputname */ 
                );
                /** Returns the parameter type for an input or output in the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::AeroStructures::ParameterDescriptor::ParameterType GetResultParameterType
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Returns the parameter type for an input or output in the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::CAE::AeroStructures::ParameterDescriptor::ParameterType GetResultParameterType
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of an integer input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetResultInputIntegerValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of an integer input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                int GetResultInputIntegerValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a scalar input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double GetResultInputScalarValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a scalar input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                double GetResultInputScalarValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the unit type of a scalar input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Unit * GetResultInputScalarUnit
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the unit type of a scalar input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::Unit * GetResultInputScalarUnit
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the aggregated or non-aggregated load values of an input parameter for this row.
                                If the load values were aggregated, the output will be an array with only one value.
                                If the values were not aggregated, the output will be an array with one value per element or node. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<double> GetResultInputLoadValues
                (
                    const NXString & parameterName /** parametername */ ,
                    const NXString & loadCaseName /** loadcasename */ 
                );
                /** Get the aggregated or non-aggregated load values of an input parameter for this row.
                                If the load values were aggregated, the output will be an array with only one value.
                                If the values were not aggregated, the output will be an array with one value per element or node. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                std::vector<double> GetResultInputLoadValues
                (
                    const char * parameterName /** parametername */ ,
                    const char * loadCaseName /** loadcasename */ 
                );
                /** Get the unit type of a scalar input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Unit * GetResultInputLoadUnit
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the unit type of a scalar input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::Unit * GetResultInputLoadUnit
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a string input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetResultInputStringValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a string input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetResultInputStringValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a boolean input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool GetResultInputBooleanValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a boolean input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                bool GetResultInputBooleanValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the shorthand notation of a laminate input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetResultInputLaminateShorthandNotation
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the shorthand notation of a laminate input parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetResultInputLaminateShorthandNotation
                (
                    const char * parameterName /** parametername */ 
                );
                /** Returns a list of all the output names used in the last computed result
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetResultOutputNames
                (
                    std::vector<NXString> & outputNames /** outputnames */ 
                );
                /** Returns the unit type for an output in the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Unit * GetResultOutputUnit
                (
                    const NXString & outputName /** outputname */ 
                );
                /** Returns the unit type for an output in the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::Unit * GetResultOutputUnit
                (
                    const char * outputName /** outputname */ 
                );
                /** Get the value of an integer output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetResultOutputIntegerValue
                (
                    const NXString & parameterName /** parametername */ ,
                    const NXString & failureModeName /** failuremodename */ ,
                    const NXString & loadCaseName /** loadcasename */ 
                );
                /** Get the value of an integer output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                int GetResultOutputIntegerValue
                (
                    const char * parameterName /** parametername */ ,
                    const char * failureModeName /** failuremodename */ ,
                    const char * loadCaseName /** loadcasename */ 
                );
                /** Get the value of a scalar output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: double GetResultOutputScalarValue
                (
                    const NXString & parameterName /** parametername */ ,
                    const NXString & failureModeName /** failuremodename */ ,
                    const NXString & loadCaseName /** loadcasename */ 
                );
                /** Get the value of a scalar output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                double GetResultOutputScalarValue
                (
                    const char * parameterName /** parametername */ ,
                    const char * failureModeName /** failuremodename */ ,
                    const char * loadCaseName /** loadcasename */ 
                );
                /** Get the unit type of a scalar output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Unit * GetResultOutputScalarUnit
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the unit type of a scalar output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXOpen::Unit * GetResultOutputScalarUnit
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a string output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetResultOutputStringValue
                (
                    const NXString & parameterName /** parametername */ ,
                    const NXString & failureModeName /** failuremodename */ ,
                    const NXString & loadCaseName /** loadcasename */ 
                );
                /** Get the value of a string output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetResultOutputStringValue
                (
                    const char * parameterName /** parametername */ ,
                    const char * failureModeName /** failuremodename */ ,
                    const char * loadCaseName /** loadcasename */ 
                );
                /** Get the value of a boolean output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool GetResultOutputBooleanValue
                (
                    const NXString & parameterName /** parametername */ ,
                    const NXString & failureModeName /** failuremodename */ ,
                    const NXString & loadCaseName /** loadcasename */ 
                );
                /** Get the value of a boolean output parameter for the last computed result 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                bool GetResultOutputBooleanValue
                (
                    const char * parameterName /** parametername */ ,
                    const char * failureModeName /** failuremodename */ ,
                    const char * loadCaseName /** loadcasename */ 
                );
                /** Returns the loadCase names used in the last computed result
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetResultLoadCaseNames
                (
                    std::vector<NXString> & loadCaseNames /** loadcasenames */ 
                );
                /** Returns the failMode names from the last computed result
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetResultFailModeNames
                (
                    std::vector<NXString> & failModeIds /** failmodeids */ 
                );
                /** Get the value of a file input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetResultInputFileValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a file input parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetResultInputFileValue
                (
                    const char * parameterName /** parametername */ 
                );
                /** Get the value of a file output parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetResultOutputFileValue
                (
                    const NXString & parameterName /** parametername */ 
                );
                /** Get the value of a file output parameter 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                NXString GetResultOutputFileValue
                (
                    const char * parameterName /** parametername */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
