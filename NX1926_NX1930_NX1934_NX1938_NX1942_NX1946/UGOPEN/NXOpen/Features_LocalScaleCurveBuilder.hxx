#ifndef NXOpen_FEATURES_LOCALSCALECURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_LOCALSCALECURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_LocalScaleCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_CurveFinderBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class LocalScaleCurveBuilder;
    }
    class Expression;
    namespace Features
    {
        class CurveFinderBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class _LocalScaleCurveBuilderBuilder;
        class LocalScaleCurveBuilderImpl;
        /**
            Represents a @link Features::LocalScaleCurve Features::LocalScaleCurve@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::SynchronousCurveCollection::CreateLocalScaleCurveBuilder  NXOpen::Features::SynchronousCurveCollection::CreateLocalScaleCurveBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        CurveFinder.ChamferEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.CoincidentVertex2dComponentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.CoincidentVertexEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.CoincidentVertexSketchGroupEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.Collinear2dComponentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.CollinearEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.CollinearSketchGroupEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.Concentric2dComponentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.ConcentricEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.ConcentricSketchGroupEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.EqualRadius2dComponentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.EqualRadiusEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.EqualRadiusSketchGroupEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.Offset2dComponentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.OffsetEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.OffsetSketchGroupEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.Parallel2dComponentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.ParallelEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.ParallelSketchGroupEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.SymmetricEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.Tangent2dComponentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.TangentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.TangentSketchGroupEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.UseCurveFinder </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CurveFinder.VertexOnCurve2dComponentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.VertexOnCurveEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CurveFinder.VertexOnCurveSketchGroupEnabled </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  LocalScaleCurveBuilder : public NXOpen::Features::FeatureBuilder
        {
            private: LocalScaleCurveBuilderImpl * m_localscalecurvebuilder_impl;
            private: friend class  _LocalScaleCurveBuilderBuilder;
            protected: LocalScaleCurveBuilder();
            public: ~LocalScaleCurveBuilder();
            /**Returns  the curve finder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::CurveFinderBuilder * CurveFinder
            (
            );
            /**Returns  the scale origin 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d ScaleOrigin
            (
            );
            /**Sets  the scale origin 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetScaleOrigin
            (
                const NXOpen::Point3d & scalePoint /** scalepoint */ 
            );
            /**Returns  the scale factor 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * InputScaleFactor
            (
            );
            /**Returns  the distance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Distance
            (
            );
            /**Returns  the distance tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  a value that indicates which size option is selected
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int SizeOption
            (
            );
            /**Sets  a value that indicates which size option is selected
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetSizeOption
            (
                int sizeOption /** sizeoption */ 
            );
            /**Returns  a value that indicates which keep tangent support is selected
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepTangent
            (
            );
            /**Sets  a value that indicates which keep tangent support is selected
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetKeepTangent
            (
                int keepTangent /** keeptangent */ 
            );
            /**Returns  a value that indicates whether keep orthogonal is enabled 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool KeepOrthogonal
            (
            );
            /**Sets  a value that indicates whether keep orthogonal is enabled 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetKeepOrthogonal
            (
                bool keepOrthogonal /** keeporthogonal */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
