#ifndef NXOpen_ALP_UINODEUTILS_HXX_INCLUDED
#define NXOpen_ALP_UINODEUTILS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ALP_UINodeUtils.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libalpopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace ALP
    {
        class UINodeUtils;
    }
    class Session;
    class NXObject;
    class Part;
    namespace ALP
    {
        class UINodeUtilsImpl;
        /** Represents a utils of assembly line planner for journaling uinode methods  <br> Use the static method in this class to obtain an instance.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class ALPOPENCPPEXPORT  UINodeUtils
        {
            private: UINodeUtilsImpl * m_uinodeutils_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit UINodeUtils(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static UINodeUtils* theUINodeUtils;
            /** Returns the UINodeUtils object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static UINodeUtils* GetUINodeUtils(NXOpen::Session *owner);
            public: ~UINodeUtils();
            /** To get item revision name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXString GetItemRevisionName
            (
                NXOpen::Part * partTag /** parttag */ 
            );
            /** To assign product And station
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void ProductAndStationAssignment
            (
                const std::vector<NXOpen::NXObject *> & selectedProduct /** selectedproduct */ ,
                const std::vector<NXOpen::NXObject *> & selectedStation /** selectedstation */ ,
                const std::vector<NXOpen::NXObject *> & objectToRefresh /** objecttorefresh */ 
            );
            /** To unassign product And station
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void ProductAndStationUnassignment
            (
                const std::vector<NXOpen::NXObject *> & selectedProduct /** selectedproduct */ ,
                int unassignOption /** unassignoption */ ,
                const NXString & label /** label */ 
            );
            /** To unassign product And station
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void ProductAndStationUnassignment
            (
                const std::vector<NXOpen::NXObject *> & selectedProduct /** selectedproduct */ ,
                int unassignOption /** unassignoption */ ,
                const char * label /** label */ 
            );
            /** To assign features to operation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void AssignMfgFeature
            (
                const std::vector<NXOpen::NXObject *> & selectedFeature /** selectedfeature */ ,
                NXOpen::NXObject * operationPartOccTag /** operationpartocctag */ ,
                double totalWeldTime /** totalweldtime */ 
            );
            /** To unassign features from operation 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void UnAssignMfgFeature
            (
                const std::vector<NXOpen::NXObject *> & selectedFeature /** selectedfeature */ 
            );
            /** To Update the Operation Name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void UpdateOperationName
            (
                NXOpen::NXObject * operationPartOccTag /** operationpartocctag */ ,
                const NXString & newOperationName /** newoperationname */ 
            );
            /** To Update the Operation Name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            void UpdateOperationName
            (
                NXOpen::NXObject * operationPartOccTag /** operationpartocctag */ ,
                const char * newOperationName /** newoperationname */ 
            );
            /** To Update the Operation Time 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void UpdateOperationTime
            (
                NXOpen::NXObject * operationPartOccTag /** operationpartocctag */ ,
                double newOperationTime /** newoperationtime */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
