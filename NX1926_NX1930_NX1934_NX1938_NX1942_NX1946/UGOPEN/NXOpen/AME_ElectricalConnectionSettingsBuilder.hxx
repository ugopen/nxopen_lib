#ifndef NXOpen_AME_ELECTRICALCONNECTIONSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_AME_ELECTRICALCONNECTIONSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ElectricalConnectionSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_ConnectionSubTypes.hxx>
#include <NXOpen/DisplayableObject.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ElectricalConnectionSettingsBuilder;
    }
    class Builder;
    class NXColor;
    namespace AME
    {
        class _ElectricalConnectionSettingsBuilderBuilder;
        class ElectricalConnectionSettingsBuilderImpl;
        /** Builder object for changing electrical connection settings on diagramming pages associated with the @link NXOpen::AME::Project NXOpen::AME::Project@endlink .  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateElectricalConnectionSettingsBuilder  NXOpen::AME::AMEManager::CreateElectricalConnectionSettingsBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ElectricalConnectionSettingsBuilder : public NXOpen::Builder
        {
            private: ElectricalConnectionSettingsBuilderImpl * m_electricalconnectionsettingsbuilder_impl;
            private: friend class  _ElectricalConnectionSettingsBuilderBuilder;
            protected: ElectricalConnectionSettingsBuilder();
            public: ~ElectricalConnectionSettingsBuilder();
            /** Wire cross section property of a given electrical connection sub-type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: double GetWireCrossSection
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ 
            );
            /**  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetWireCrossSection
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                double wireCrossSection /** wirecrosssection */ 
            );
            /** Wire type property of a given electrical connection sub-type.  @return  Caller needs to free this memory. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString GetWireType
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ 
            );
            /**  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetWireType
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                const NXString & wireType /** wiretype */ 
            );
            /**  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetWireType
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                const char * wireType /** wiretype */ 
            );
            /** Wire color code property of a given electrical connection sub-type.  @return  Caller needs to free this memory. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString GetWireColorCode
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ 
            );
            /**  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetWireColorCode
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                const NXString & wireColorCode /** wirecolorcode */ 
            );
            /**  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetWireColorCode
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                const char * wireColorCode /** wirecolorcode */ 
            );
            /** Style color code property of a given electrical connection sub-type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXColor * GetStyleColorCode
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ 
            );
            /**  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetStyleColorCode
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                NXOpen::NXColor * styleColorCode /** stylecolorcode */ 
            );
            /** Style font property of a given electrical connection sub-type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::DisplayableObject::ObjectFont GetStyleFont
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ 
            );
            /**  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetStyleFont
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                NXOpen::DisplayableObject::ObjectFont styleFont /** stylefont */ 
            );
            /** Style width property of a given electrical connection sub-type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::DisplayableObject::ObjectWidth GetStyleWidth
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ 
            );
            /**  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetStyleWidth
            (
                NXOpen::AME::AmeElectricalConnectionPotentialType potentialType /** potentialtype */ ,
                NXOpen::DisplayableObject::ObjectWidth styleWidth /** stylewidth */ 
            );
            /** Resets electrical connection settings to default 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetToDefault
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
