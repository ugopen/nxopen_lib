#ifndef NXOpen_REPLACEEXPRESSIONSBUILDER_HXX_INCLUDED
#define NXOpen_REPLACEEXPRESSIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ReplaceExpressionsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ReplaceExpressionsBuilder;
    class Builder;
    class Expression;
    class _ReplaceExpressionsBuilderBuilder;
    class ReplaceExpressionsBuilderImpl;
    /**
        This class creates Replace expressions from the source part to the current work part via the naming rule defined.
     <br> To create a new instance of this class, use @link NXOpen::ExpressionCollection::CreateReplaceExpressionsBuilder  NXOpen::ExpressionCollection::CreateReplaceExpressionsBuilder @endlink  <br> 
    Default values.
    <list type="table"> 
     
    <listheader><term> 
    Property</term>  <description> 
    Value</description> </listheader>
    <item><term> 
     
    FilterMatchCase </term> <description> 
     
    false </description> </item> 

    <item><term> 
     
    FilterWholeWord </term> <description> 
     
    false </description> </item> 

    <item><term> 
     
    ReplaceType </term> <description> 
     
    ExpressionName </description> </item> 

    </list> 

     <br>  Created in NX10.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ReplaceExpressionsBuilder : public NXOpen::Builder
    {
        /** These represent the options for the replacement type */
        public: enum ReplacementTypes
        {
            ReplacementTypesExpressionName/** Replace Expression Names */,
            ReplacementTypesGenericString/** Replace Generic String */
        };

        private: ReplaceExpressionsBuilderImpl * m_replaceexpressionsbuilder_impl;
        private: friend class  _ReplaceExpressionsBuilderBuilder;
        protected: ReplaceExpressionsBuilder();
        public: ~ReplaceExpressionsBuilder();
        /**Returns  the replacement type 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::ReplaceExpressionsBuilder::ReplacementTypes ReplaceType
        (
        );
        /**Sets  the replacement type 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetReplaceType
        (
            NXOpen::ReplaceExpressionsBuilder::ReplacementTypes replacementType /** replacementtype */ 
        );
        /**Returns  the current string.  This string is used as the replaced string. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXString CurrentString
        (
        );
        /**Sets  the current string.  This string is used as the replaced string. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCurrentString
        (
            const NXString & currentString /** currentstring */ 
        );
        /**Sets  the current string.  This string is used as the replaced string. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        void SetCurrentString
        (
            const char * currentString /** currentstring */ 
        );
        /**Returns  the replace string.  This string replaces the current string. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NXString ReplaceString
        (
        );
        /**Sets  the replace string.  This string replaces the current string. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: void SetReplaceString
        (
            const NXString & replaceString /** replacestring */ 
        );
        /**Sets  the replace string.  This string replaces the current string. 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        void SetReplaceString
        (
            const char * replaceString /** replacestring */ 
        );
        /**Returns  the string to replace in the expression formula. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXString SearchString
        (
        );
        /**Sets  the string to replace in the expression formula. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSearchString
        (
            const NXString & searchString /** searchstring */ 
        );
        /**Sets  the string to replace in the expression formula. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        void SetSearchString
        (
            const char * searchString /** searchstring */ 
        );
        /**Returns  the replacement string 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: NXString UpdateString
        (
        );
        /**Sets  the replacement string 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUpdateString
        (
            const NXString & updateString /** updatestring */ 
        );
        /**Sets  the replacement string 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        void SetUpdateString
        (
            const char * updateString /** updatestring */ 
        );
        /** Expressions whose formulas will have the search string replaced by the replacement string 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSelectedExpressions
        (
            const std::vector<NXOpen::Expression *> & expressions /** array of selected expressions */
        );
        /**Returns  the logical to match whole word only. True indicates that only whole word matches will be found. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: bool FilterWholeWord
        (
        );
        /**Sets  the logical to match whole word only. True indicates that only whole word matches will be found. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFilterWholeWord
        (
            bool filterWholeWord /** filterwholeword */ 
        );
        /**Returns  the logical to match case. True indicates that case sensitive matches will be found. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: bool FilterMatchCase
        (
        );
        /**Sets  the logical to match case. True indicates that case sensitive matches will be found. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void SetFilterMatchCase
        (
            bool filterMatchCase /** filtermatchcase */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
