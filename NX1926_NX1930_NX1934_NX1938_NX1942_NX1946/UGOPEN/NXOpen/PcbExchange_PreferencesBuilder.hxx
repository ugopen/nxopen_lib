#ifndef NXOpen_PCBEXCHANGE_PREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_PREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_PreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PcbExchange_EntityFilter.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class PreferencesBuilder;
    }
    class Builder;
    class Expression;
    class NXColor;
    namespace PcbExchange
    {
        class EntityFilter;
    }
    namespace PcbExchange
    {
        class _PreferencesBuilderBuilder;
        class PreferencesBuilderImpl;
        /** Represents a @link PcbExchange::PreferencesBuilder PcbExchange::PreferencesBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreatePreferencesBuilder  NXOpen::PcbExchange::Manager::CreatePreferencesBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  PreferencesBuilder : public NXOpen::Builder
        {
            /** This enum defines the Settings Source. */
            public: enum SettingsSourceTypeName
            {
                SettingsSourceTypeNameIniFiles/** ini files */ ,
                SettingsSourceTypeNameSpecifiedSettingsFolder/** specified settings folder */ ,
                SettingsSourceTypeNameCustomerDefaults/** customer defaults */ 
            };

            /** This enum defines the PCA Name. */
            public: enum DefaultPcaNameTypeName
            {
                DefaultPcaNameTypeNameCurrentNXModel/** current nxmodel */ ,
                DefaultPcaNameTypeNameECADModelName/** ecadmodel name */ ,
                DefaultPcaNameTypeNameSpecifyAtImport/** specify at import */ 
            };

            /** This enum defines the Component Load Options. */
            public: enum ComponentLoadOptionsTypeName
            {
                ComponentLoadOptionsTypeNameLoadAndCreateAssemblyComponents/** load and create assembly components */ ,
                ComponentLoadOptionsTypeNameCreateBodiesOnly/** create bodies only */ ,
                ComponentLoadOptionsTypeNameLoadAssemblyComponentsCreateBodies/** load assembly components create bodies */ 
            };

            /** This enum defines the Group Entity Components By. */
            public: enum GroupEntityComponentsByTypeName
            {
                GroupEntityComponentsByTypeNameNone/** none */ ,
                GroupEntityComponentsByTypeNameType/** type */ ,
                GroupEntityComponentsByTypeNameLayer/** layer */ 
            };

            /** This enum defines the Create New Components In. */
            public: enum CreateNewComponentsInTypeName
            {
                CreateNewComponentsInTypeNameDirectoryOfECADFiles/** directory of ecadfiles */ ,
                CreateNewComponentsInTypeNameDirectoryOfNXParts/** directory of nxparts */ ,
                CreateNewComponentsInTypeNameSpecify/** specify */ 
            };

            /** This enum defines the Components Heights From. */
            public: enum ComponentsHeightFromTypeName
            {
                ComponentsHeightFromTypeNameFootprintDefinition/** footprint definition */ ,
                ComponentsHeightFromTypeNamePartDefinition/** part definition */ 
            };

            /** This enum defines the Import Trace Menu. */
            public: enum ImportTraceMenuTypeName
            {
                ImportTraceMenuTypeNameCurves/** curves */ ,
                ImportTraceMenuTypeNameSheets/** sheets */ ,
                ImportTraceMenuTypeNameBodies/** bodies */ 
            };

            /** This enum defines the Import Pad Menu. */
            public: enum ImportPadMenuTypeName
            {
                ImportPadMenuTypeNameCurves/** curves */ ,
                ImportPadMenuTypeNameSheets/** sheets */ ,
                ImportPadMenuTypeNameBodies/** bodies */ 
            };

            /** This enum defines the Import Mask Menu. */
            public: enum ImportMaskMenuTypeName
            {
                ImportMaskMenuTypeNameCurves/** curves */ ,
                ImportMaskMenuTypeNameSheets/** sheets */ ,
                ImportMaskMenuTypeNameBodies/** bodies */ 
            };

            /** This enum defines the Import Generic Menu. */
            public: enum ImportGenericMenuTypeName
            {
                ImportGenericMenuTypeNameCurves/** curves */ ,
                ImportGenericMenuTypeNameSheets/** sheets */ ,
                ImportGenericMenuTypeNameBodies/** bodies */ 
            };

            /** This enum defines the Mail Protocol. */
            public: enum MailProtocolTypeName
            {
                MailProtocolTypeNameMapi/** mapi */ ,
                MailProtocolTypeNameSmtp/** smtp */ 
            };

            private: PreferencesBuilderImpl * m_preferencesbuilder_impl;
            private: friend class  _PreferencesBuilderBuilder;
            protected: PreferencesBuilder();
            public: ~PreferencesBuilder();
            /**Returns  the settings source 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::SettingsSourceTypeName SettingsSource
            (
            );
            /**Sets  the settings source 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSettingsSource
            (
                NXOpen::PcbExchange::PreferencesBuilder::SettingsSourceTypeName mDefaultSettingsSources /** mdefaultsettingssources */ 
            );
            /**Returns  the specified ini file 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SpecifiedSettingsFolder
            (
            );
            /**Sets  the specified ini file 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecifiedSettingsFolder
            (
                const NXString & settingsFolder /** settingsfolder */ 
            );
            /**Sets  the specified ini file 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetSpecifiedSettingsFolder
            (
                const char * settingsFolder /** settingsfolder */ 
            );
            /**Returns  the m read write dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ReadWriteDir
            (
            );
            /**Sets  the m read write dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReadWriteDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the m read write dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetReadWriteDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the m browse ecad files from dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BrowseEcadFilesFromDir
            (
            );
            /**Sets  the m browse ecad files from dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBrowseEcadFilesFromDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the m browse ecad files from dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetBrowseEcadFilesFromDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the m ecad file pre processor text 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EcadFilePreProcessor
            (
            );
            /**Sets  the m ecad file pre processor text 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEcadFilePreProcessor
            (
                const NXString & mEcadFilePreProcessor /** mecadfilepreprocessor */ 
            );
            /**Sets  the m ecad file pre processor text 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetEcadFilePreProcessor
            (
                const char * mEcadFilePreProcessor /** mecadfilepreprocessor */ 
            );
            /**Returns  the m ecad file post processor text 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EcadFilePostProcessor
            (
            );
            /**Sets  the m ecad file post processor text 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEcadFilePostProcessor
            (
                const NXString & mEcadFilePostProcessor /** mecadfilepostprocessor */ 
            );
            /**Sets  the m ecad file post processor text 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetEcadFilePostProcessor
            (
                const char * mEcadFilePostProcessor /** mecadfilepostprocessor */ 
            );
            /**Returns  the m idf float width 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int IdfFloatWidth
            (
            );
            /**Sets  the m idf float width 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIdfFloatWidth
            (
                int mIdfFloatWidth /** midffloatwidth */ 
            );
            /**Returns  the m idf float precision 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int IdfFloatPrecision
            (
            );
            /**Sets  the m idf float precision 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIdfFloatPrecision
            (
                int mIdfFloatPrecision /** midffloatprecision */ 
            );
            /**Returns  the m ecad float tolerance 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EcadFloatTolerance
            (
            );
            /**Returns  the m error checking 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ErrorChecking
            (
            );
            /**Sets  the m error checking 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetErrorChecking
            (
                bool mErrorChecking /** merrorchecking */ 
            );
            /**Returns  the m automatically save all created parts 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticallySaveAllCreatedParts
            (
            );
            /**Sets  the m automatically save all created parts 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAutomaticallySaveAllCreatedParts
            (
                bool mAutomaticallySaveAllCreatedParts /** mautomaticallysaveallcreatedparts */ 
            );
            /**Returns  the m compare primary pin locations 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ComparePrimaryPinLocations
            (
            );
            /**Sets  the m compare primary pin locations 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComparePrimaryPinLocations
            (
                bool mComparePrimaryPinLocations /** mcompareprimarypinlocations */ 
            );
            /**Returns  the m default pca name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::DefaultPcaNameTypeName DefaultPcaName
            (
            );
            /**Sets  the m default pca name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultPcaName
            (
                NXOpen::PcbExchange::PreferencesBuilder::DefaultPcaNameTypeName mDefaultPcaName /** mdefaultpcaname */ 
            );
            /**Returns  the m pca name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PcaNamePrefix
            (
            );
            /**Sets  the m pca name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPcaNamePrefix
            (
                const NXString & mPcaNamePrefix /** mpcanameprefix */ 
            );
            /**Sets  the m pca name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPcaNamePrefix
            (
                const char * mPcaNamePrefix /** mpcanameprefix */ 
            );
            /**Returns  the m pca name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PcaNameSuffix
            (
            );
            /**Sets  the m pca name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPcaNameSuffix
            (
                const NXString & mPcaNameSuffix /** mpcanamesuffix */ 
            );
            /**Sets  the m pca name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPcaNameSuffix
            (
                const char * mPcaNameSuffix /** mpcanamesuffix */ 
            );
            /**Returns  the m board as assembly component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool BoardAsAssemblyComponent
            (
            );
            /**Sets  the m board as assembly component 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardAsAssemblyComponent
            (
                bool mBoardAsAssemblyComponent /** mboardasassemblycomponent */ 
            );
            /**Returns  the m board name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardNamePrefix
            (
            );
            /**Sets  the m board name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardNamePrefix
            (
                const NXString & mBoardNamePrefix /** mboardnameprefix */ 
            );
            /**Sets  the m board name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetBoardNamePrefix
            (
                const char * mBoardNamePrefix /** mboardnameprefix */ 
            );
            /**Returns  the m board name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardNameSuffix
            (
            );
            /**Sets  the m board name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardNameSuffix
            (
                const NXString & mBoardNameSuffix /** mboardnamesuffix */ 
            );
            /**Sets  the m board name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetBoardNameSuffix
            (
                const char * mBoardNameSuffix /** mboardnamesuffix */ 
            );
            /**Returns  the m component load options 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ComponentLoadOptionsTypeName ComponentLoadOptions
            (
            );
            /**Sets  the m component load options 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentLoadOptions
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentLoadOptionsTypeName mComponentLoadOptions /** mcomponentloadoptions */ 
            );
            /**Returns  the m component name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ComponentNamePrefix
            (
            );
            /**Sets  the m component name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentNamePrefix
            (
                const NXString & mComponentNamePrefix /** mcomponentnameprefix */ 
            );
            /**Sets  the m component name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetComponentNamePrefix
            (
                const char * mComponentNamePrefix /** mcomponentnameprefix */ 
            );
            /**Returns  the m component name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ComponentNameSuffix
            (
            );
            /**Sets  the m component name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentNameSuffix
            (
                const NXString & mComponentNameSuffix /** mcomponentnamesuffix */ 
            );
            /**Sets  the m component name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetComponentNameSuffix
            (
                const char * mComponentNameSuffix /** mcomponentnamesuffix */ 
            );
            /**Returns  the m areas as assembly components 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool AreasAsAssemblyComponents
            (
            );
            /**Sets  the m areas as assembly components 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAreasAsAssemblyComponents
            (
                bool mAreasAsAssemblyComponents /** mareasasassemblycomponents */ 
            );
            /**Returns  the m area name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AreaNamePrefix
            (
            );
            /**Sets  the m area name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAreaNamePrefix
            (
                const NXString & mAreaNamePrefix /** mareanameprefix */ 
            );
            /**Sets  the m area name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetAreaNamePrefix
            (
                const char * mAreaNamePrefix /** mareanameprefix */ 
            );
            /**Returns  the m area name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AreaNameSuffix
            (
            );
            /**Sets  the m area name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAreaNameSuffix
            (
                const NXString & mAreaNameSuffix /** mareanamesuffix */ 
            );
            /**Sets  the m area name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetAreaNameSuffix
            (
                const char * mAreaNameSuffix /** mareanamesuffix */ 
            );
            /**Returns  the m group entity components by 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::GroupEntityComponentsByTypeName GroupEntityComponentsBy
            (
            );
            /**Sets  the m group entity components by 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGroupEntityComponentsBy
            (
                NXOpen::PcbExchange::PreferencesBuilder::GroupEntityComponentsByTypeName mGroupEntityComponentsBy /** mgroupentitycomponentsby */ 
            );
            /**Returns  the m board color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BoardColor
            (
            );
            /**Sets  the m board color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardColor
            (
                NXOpen::NXColor * mBoardColor /** mboardcolor */ 
            );
            /**Returns  the m board translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int BoardTranslucency
            (
            );
            /**Sets  the m board translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardTranslucency
            (
                int mBoardTranslucency /** mboardtranslucency */ 
            );
            /**Returns  the m board layer 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int BoardLayer
            (
            );
            /**Sets  the m board layer 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardLayer
            (
                int mBoardLayer /** mboardlayer */ 
            );
            /**Returns  the m board default thickness 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoardDefaultThickness
            (
            );
            /**Returns  the m holes default diameter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HolesDefaultDiameter
            (
            );
            /**Returns  the m create new components in 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::CreateNewComponentsInTypeName CreateNewComponentsIn
            (
            );
            /**Sets  the m create new components in 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCreateNewComponentsIn
            (
                NXOpen::PcbExchange::PreferencesBuilder::CreateNewComponentsInTypeName mCreateNewComponentsIn /** mcreatenewcomponentsin */ 
            );
            /**Returns  the m create new component in dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CreateNewComponentInDir
            (
            );
            /**Sets  the m create new component in dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCreateNewComponentInDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the m create new component in dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetCreateNewComponentInDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the m specify new comp dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SpecifyNewCompDir
            (
            );
            /**Sets  the m specify new comp dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecifyNewCompDir
            (
                const NXString & mSpecifyNewCompDir /** mspecifynewcompdir */ 
            );
            /**Sets  the m specify new comp dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetSpecifyNewCompDir
            (
                const char * mSpecifyNewCompDir /** mspecifynewcompdir */ 
            );
            /**Returns  the m components color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ComponentsColor
            (
            );
            /**Sets  the m components color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsColor
            (
                NXOpen::NXColor * mComponentsColor /** mcomponentscolor */ 
            );
            /**Returns  the m components translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int ComponentsTranslucency
            (
            );
            /**Sets  the m components translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsTranslucency
            (
                int mComponentsTranslucency /** mcomponentstranslucency */ 
            );
            /**Returns  the m components height from 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ComponentsHeightFromTypeName ComponentsHeightFrom
            (
            );
            /**Sets  the m components height from 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsHeightFrom
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentsHeightFromTypeName mComponentsHeightFrom /** mcomponentsheightfrom */ 
            );
            /**Returns  the m components default height 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsDefaultHeight
            (
            );
            /**Returns  the m component xmlfile browse 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ComponentXMLFileBrowse
            (
            );
            /**Sets  the m component xmlfile browse 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentXMLFileBrowse
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the m component xmlfile browse 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetComponentXMLFileBrowse
            (
                const char * filename /** filename */ 
            );
            /** TODO: fill in a description for this 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void CatalogButton
            (
            );
            /**Returns  the m keep in color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * KeepInColor
            (
            );
            /**Sets  the m keep in color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepInColor
            (
                NXOpen::NXColor * mKeepInColor /** mkeepincolor */ 
            );
            /**Returns  the m keep in translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepInTranslucency
            (
            );
            /**Sets  the m keep in translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepInTranslucency
            (
                int mKeepInTranslucency /** mkeepintranslucency */ 
            );
            /**Returns  the m keep in layer 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepInLayer
            (
            );
            /**Sets  the m keep in layer 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepInLayer
            (
                int mKeepInLayer /** mkeepinlayer */ 
            );
            /**Returns  the m keep out color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * KeepOutColor
            (
            );
            /**Sets  the m keep out color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepOutColor
            (
                NXOpen::NXColor * mKeepOutColor /** mkeepoutcolor */ 
            );
            /**Returns  the m keep out translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepOutTranslucency
            (
            );
            /**Sets  the m keep out translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepOutTranslucency
            (
                int mKeepOutTranslucency /** mkeepouttranslucency */ 
            );
            /**Returns  the m keep out layer 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepOutLayer
            (
            );
            /**Sets  the m keep out layer 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepOutLayer
            (
                int mKeepOutLayer /** mkeepoutlayer */ 
            );
            /**Returns  the m other color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OtherColor
            (
            );
            /**Sets  the m other color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOtherColor
            (
                NXOpen::NXColor * mOtherColor /** mothercolor */ 
            );
            /**Returns  the m other translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int OtherTranslucency
            (
            );
            /**Sets  the m other translucency 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOtherTranslucency
            (
                int mOtherTranslucency /** mothertranslucency */ 
            );
            /**Returns  the m other layer 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int OtherLayer
            (
            );
            /**Sets  the m other layer 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOtherLayer
            (
                int mOtherLayer /** motherlayer */ 
            );
            /** TODO: fill in a description for this 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AreaMappingButton
            (
            );
            /**Returns  the m import trace toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportTraceToggle
            (
            );
            /**Sets  the m import trace toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportTraceToggle
            (
                bool mImportTraceToggle /** mimporttracetoggle */ 
            );
            /**Returns  the m import trace menu 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ImportTraceMenuTypeName ImportTraceMenu
            (
            );
            /**Sets  the m import trace menu 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportTraceMenu
            (
                NXOpen::PcbExchange::PreferencesBuilder::ImportTraceMenuTypeName mImportTraceMenu /** mimporttracemenu */ 
            );
            /**Returns  the m trace max number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int TraceMaxNumber
            (
            );
            /**Sets  the m trace max number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTraceMaxNumber
            (
                int mTraceMaxNumber /** mtracemaxnumber */ 
            );
            /**Returns  the m trace name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TraceNamePrefix
            (
            );
            /**Sets  the m trace name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTraceNamePrefix
            (
                const NXString & mTraceNamePrefix /** mtracenameprefix */ 
            );
            /**Sets  the m trace name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetTraceNamePrefix
            (
                const char * mTraceNamePrefix /** mtracenameprefix */ 
            );
            /**Returns  the mtrace name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TraceNameSuffix
            (
            );
            /**Sets  the mtrace name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTraceNameSuffix
            (
                const NXString & mtraceNameSuffix /** mtracenamesuffix */ 
            );
            /**Sets  the mtrace name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetTraceNameSuffix
            (
                const char * mtraceNameSuffix /** mtracenamesuffix */ 
            );
            /**Returns  the m import pad toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportPadToggle
            (
            );
            /**Sets  the m import pad toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportPadToggle
            (
                bool mImportPadToggle /** mimportpadtoggle */ 
            );
            /**Returns  the m import pad menu 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ImportPadMenuTypeName ImportPadMenu
            (
            );
            /**Sets  the m import pad menu 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportPadMenu
            (
                NXOpen::PcbExchange::PreferencesBuilder::ImportPadMenuTypeName mImportPadMenu /** mimportpadmenu */ 
            );
            /**Returns  the m pad max number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int PadMaxNumber
            (
            );
            /**Sets  the m pad max number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPadMaxNumber
            (
                int mPadMaxNumber /** mpadmaxnumber */ 
            );
            /**Returns  the m pad name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PadNamePrefix
            (
            );
            /**Sets  the m pad name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPadNamePrefix
            (
                const NXString & mPadNamePrefix /** mpadnameprefix */ 
            );
            /**Sets  the m pad name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPadNamePrefix
            (
                const char * mPadNamePrefix /** mpadnameprefix */ 
            );
            /**Returns  the m pad name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PadNameSuffix
            (
            );
            /**Sets  the m pad name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPadNameSuffix
            (
                const NXString & mPadNameSuffix /** mpadnamesuffix */ 
            );
            /**Sets  the m pad name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPadNameSuffix
            (
                const char * mPadNameSuffix /** mpadnamesuffix */ 
            );
            /**Returns  the m import mask toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportMaskToggle
            (
            );
            /**Sets  the m import mask toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportMaskToggle
            (
                bool mImportMaskToggle /** mimportmasktoggle */ 
            );
            /**Returns  the m import mask menu 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ImportMaskMenuTypeName ImportMaskMenu
            (
            );
            /**Sets  the m import mask menu 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportMaskMenu
            (
                NXOpen::PcbExchange::PreferencesBuilder::ImportMaskMenuTypeName mImportMaskMenu /** mimportmaskmenu */ 
            );
            /**Returns  the m mask max number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int MaskMaxNumber
            (
            );
            /**Sets  the m mask max number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaskMaxNumber
            (
                int mMaskMaxNumber /** mmaskmaxnumber */ 
            );
            /**Returns  the m mask name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MaskNamePrefix
            (
            );
            /**Sets  the m mask name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaskNamePrefix
            (
                const NXString & mMaskNamePrefix /** mmasknameprefix */ 
            );
            /**Sets  the m mask name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetMaskNamePrefix
            (
                const char * mMaskNamePrefix /** mmasknameprefix */ 
            );
            /**Returns  the m mask name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MaskNameSuffix
            (
            );
            /**Sets  the m mask name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaskNameSuffix
            (
                const NXString & mMaskNameSuffix /** mmasknamesuffix */ 
            );
            /**Sets  the m mask name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetMaskNameSuffix
            (
                const char * mMaskNameSuffix /** mmasknamesuffix */ 
            );
            /**Returns  the m import generic toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportGenericToggle
            (
            );
            /**Sets  the m import generic toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportGenericToggle
            (
                bool mImportGenericToggle /** mimportgenerictoggle */ 
            );
            /**Returns  the m import generic menu 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ImportGenericMenuTypeName ImportGenericMenu
            (
            );
            /**Sets  the m import generic menu 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportGenericMenu
            (
                NXOpen::PcbExchange::PreferencesBuilder::ImportGenericMenuTypeName mImportGenericMenu /** mimportgenericmenu */ 
            );
            /**Returns  the m generic max number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int GenericMaxNumber
            (
            );
            /**Sets  the m generic max number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGenericMaxNumber
            (
                int mGenericMaxNumber /** mgenericmaxnumber */ 
            );
            /**Returns  the m generic name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GenericNamePrefix
            (
            );
            /**Sets  the m generic name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGenericNamePrefix
            (
                const NXString & mGenericNamePrefix /** mgenericnameprefix */ 
            );
            /**Sets  the m generic name prefix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetGenericNamePrefix
            (
                const char * mGenericNamePrefix /** mgenericnameprefix */ 
            );
            /**Returns  the m generic name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GenericNameSuffix
            (
            );
            /**Sets  the m generic name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGenericNameSuffix
            (
                const NXString & mGenericNameSuffix /** mgenericnamesuffix */ 
            );
            /**Sets  the m generic name suffix 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetGenericNameSuffix
            (
                const char * mGenericNameSuffix /** mgenericnamesuffix */ 
            );
            /**Returns  the m group pads 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool GroupPads
            (
            );
            /**Sets  the m group pads 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGroupPads
            (
                bool mGroupPads /** mgrouppads */ 
            );
            /**Returns  the m merge traces and pads 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MergeTracesAndPads
            (
            );
            /**Sets  the m merge traces and pads 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMergeTracesAndPads
            (
                bool mMergeTracesAndPads /** mmergetracesandpads */ 
            );
            /**Returns  the m negative 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool Negative
            (
            );
            /**Sets  the m negative 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNegative
            (
                bool mNegative /** mnegative */ 
            );
            /**Returns  the m internal layers 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool InternalLayers
            (
            );
            /**Sets  the m internal layers 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInternalLayers
            (
                bool mInternalLayers /** minternallayers */ 
            );
            /**Returns  the m import bends 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportBends
            (
            );
            /**Sets  the m import bends 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportBends
            (
                bool mImportBends /** mimportbends */ 
            );
            /**Returns  the m project view toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProjectViewToggle
            (
            );
            /**Sets  the m project view toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProjectViewToggle
            (
                bool mProjectViewToggle /** mprojectviewtoggle */ 
            );
            /**Returns  the m project view 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ProjectView
            (
            );
            /**Sets  the m project view 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProjectView
            (
                const NXString & mProjectView /** mprojectview */ 
            );
            /**Sets  the m project view 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetProjectView
            (
                const char * mProjectView /** mprojectview */ 
            );
            /**Returns  the m export bends 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExportBends
            (
            );
            /**Sets  the m export bends 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExportBends
            (
                bool mExportBends /** mexportbends */ 
            );
            /**Returns  the m edmd dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EdmdDir
            (
            );
            /**Sets  the m edmd dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEdmdDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the m edmd dir 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetEdmdDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the m monitor edmdtoggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MonitorEDMDToggle
            (
            );
            /**Sets  the m monitor edmdtoggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMonitorEDMDToggle
            (
                bool mMonitorEDMDToggle /** mmonitoredmdtoggle */ 
            );
            /**Returns  the m filter mcad toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool FilterMcadToggle
            (
            );
            /**Sets  the m filter mcad toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilterMcadToggle
            (
                bool mFilterMcadToggle /** mfiltermcadtoggle */ 
            );
            /** TODO: fill in a description for this 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void FilterOnMcad
            (
            );
            /** Method to get EntityFilter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EntityFilter * GetMcadEntityFilter
            (
            );
            /** Method to set EntityFilter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetMcadEntityFilter
            (
                NXOpen::PcbExchange::EntityFilter * filter /** filter */ 
            );
            /**Returns  the m filter ecad toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool FilterEcadToggle
            (
            );
            /**Sets  the m filter ecad toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilterEcadToggle
            (
                bool mFilterEcadToggle /** mfilterecadtoggle */ 
            );
            /** TODO: fill in a description for this 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void FilterOnECAD
            (
            );
            /** Method to get EntityFilter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EntityFilter * GetEcadEntityFilter
            (
            );
            /** Method to set EntityFilter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetEcadEntityFilter
            (
                NXOpen::PcbExchange::EntityFilter * filter /** filter */ 
            );
            /**Returns  the m mail notify 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MailNotify
            (
            );
            /**Sets  the m mail notify 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMailNotify
            (
                bool mMailNotify /** mmailnotify */ 
            );
            /**Returns  the m mail protocol 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::MailProtocolTypeName MailProtocol
            (
            );
            /**Sets  the m mail protocol 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMailProtocol
            (
                NXOpen::PcbExchange::PreferencesBuilder::MailProtocolTypeName mMailProtocol /** mmailprotocol */ 
            );
            /** Returns the m mail recipients 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetMailRecipients
            (
            );
            /** Sets the m mail recipients 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMailRecipients
            (
                const std::vector<NXString> & mMailRecipients /** mmailrecipients */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
