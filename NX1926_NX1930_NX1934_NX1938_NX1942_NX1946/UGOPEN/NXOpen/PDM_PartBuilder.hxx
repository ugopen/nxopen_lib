#ifndef NXOpen_PDM_PARTBUILDER_HXX_INCLUDED
#define NXOpen_PDM_PARTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PartBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/PDM_AlternateIdManager.hxx>
#include <NXOpen/PDM_DatabaseAttributeManager.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class PartBuilder;
    }
    namespace PDM
    {
        class AlternateIdManager;
    }
    namespace PDM
    {
        class DatabaseAttributeManager;
    }
    namespace PDM
    {
        class PartCreationObject;
    }
    namespace PDM
    {
        class PartBuilderImpl;
        /** This class serves as the base class for NX Manager part builders. The
                NX Manager part builders are used to create new parts in NX Manager mode.

                 <br> 
                This class is <b>deprecated in NX10</b> for "Create" and "Save As of master parts" operations.
                This class should only be used in case of Save As Non Master parts and
                Save As New Item Type Operations.
                For Create of all parts use @link NXOpen::PDM::PartOperationBuilder NXOpen::PDM::PartOperationBuilder@endlink  and @link NXOpen::FileNew NXOpen::FileNew@endlink 
                For Save As of master parts, use @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink .
                 <br> 
             <br> This is an abstract class, and cannot be created.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  PartBuilder : public NXOpen::TransientObject
        {
             /** Contains part number information.*/
            public:
            struct PartNumberData
            {
                public: /** The part name*/NXString PartName;
                public: /** Modifiable flag for part name.*/bool PartNameModifiable;
                public: /** The part description*/NXString PartDescription;
                public: /** Modifiable flag for part description.*/bool PartDescriptionModifiable;
                public: /** The multifield key*/NXString PartNumber;
                public: /** Modifiable flag for part number.*/bool PartNumberModifiable;
                public: PartNumberData() :
                    PartName(),
                    PartNameModifiable(),
                    PartDescription(),
                    PartDescriptionModifiable(),
                    PartNumber(),
                    PartNumberModifiable()
                {
                }
                /** Constructor for the PartNumberData struct. */ 
                public: PartNumberData(const NXString &partNameInitial /** The part name*/, 
                        bool partNameModifiableInitial /** Modifiable flag for part name.*/, 
                        const NXString &partDescriptionInitial /** The part description*/, 
                        bool partDescriptionModifiableInitial /** Modifiable flag for part description.*/, 
                        const NXString &partNumberInitial /** The multifield key*/, 
                        bool partNumberModifiableInitial /** Modifiable flag for part number.*/) :
                    PartName(partNameInitial),
                    PartNameModifiable(partNameModifiableInitial),
                    PartDescription(partDescriptionInitial),
                    PartDescriptionModifiable(partDescriptionModifiableInitial),
                    PartNumber(partNumberInitial),
                    PartNumberModifiable(partNumberModifiableInitial)
                {
                }
            };

             /** Contains part revision information */
            public:
            struct PartRevisionData
            {
                public: /**Part revision*/NXString PartRevision;
                public: /** Revision Modifiable flag. False if part revision is not modifiable*/bool PartRevisionModifiable;
                public: PartRevisionData() :
                    PartRevision(),
                    PartRevisionModifiable()
                {
                }
                /** Constructor for the PartRevisionData struct. */ 
                public: PartRevisionData(const NXString &partRevisionInitial /**Part revision*/, 
                        bool partRevisionModifiableInitial /** Revision Modifiable flag. False if part revision is not modifiable*/) :
                    PartRevision(partRevisionInitial),
                    PartRevisionModifiable(partRevisionModifiableInitial)
                {
                }
            };

             /** Contains part file name information */
            public:
            struct PartFileNameData
            {
                public: /**Part file name*/NXString PartFileName;
                public: /** False if part file name is not modifiable*/bool PartFileNameModifiable;
                public: PartFileNameData() :
                    PartFileName(),
                    PartFileNameModifiable()
                {
                }
                /** Constructor for the PartFileNameData struct. */ 
                public: PartFileNameData(const NXString &partFileNameInitial /**Part file name*/, 
                        bool partFileNameModifiableInitial /** False if part file name is not modifiable*/) :
                    PartFileName(partFileNameInitial),
                    PartFileNameModifiable(partFileNameModifiableInitial)
                {
                }
            };

            /** Tokens identifying every possible UG/Manager part selection dialog. */
            public: enum Operation
            {
                OperationExportPartNew/** File-\>Export-\>NXOpen.Part:New radio button*/,
                OperationAssemblyDiagram/** Assembly-\>Report-\>Assembly Diagram... */,
                OperationAssemblyCreateNewComponent/** Assembly-\>NXOpen.Assemblies.Component-\>Create New... */,
                OperationDefault/** Default UG/Manager part selection dialog*/
            };

            private: PartBuilderImpl * m_partbuilder_impl;
            /// \cond NX_NO_DOC 
            public: explicit PartBuilder(void *ptr);
            /// \endcond 
            /** Free resources associated with the instance. After this method
                    is called, it is illegal to use the object.  In .NET, this method
                    is automatically called when the object is deleted by the garbage
                    collector. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PartBuilder();
            /** Create the specification for the new part that will be created.
                    For the input part_number:
                    In case of Default Domain: it is Teamcenter item ID.
                    In case of non-Default Domain: it is the multifield key.
                    e.g.  %#MFK#%,=item_id=001, object_type=SupplierPart, supplier_code=x
                    And the encoded part filename would be containing the MFK.

                     <br> 
                    NOTE: The part_file_name argument is the Dataset Name and is applicable only while creating
                    specs for non-master parts.
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void CreatePartSpec
            (
                const NXString & partType /** the part type */,
                const NXString & partNumber /** the multifield key */,
                const NXString & partRevision /** the part revision */,
                const NXString & partFileType /** the part file type */,
                const NXString & partFileName /** the dataset name */
            );
            /** Create the specification for the new part that will be created.
                    For the input part_number:
                    In case of Default Domain: it is Teamcenter item ID.
                    In case of non-Default Domain: it is the multifield key.
                    e.g.  %#MFK#%,=item_id=001, object_type=SupplierPart, supplier_code=x
                    And the encoded part filename would be containing the MFK.

                     <br> 
                    NOTE: The part_file_name argument is the Dataset Name and is applicable only while creating
                    specs for non-master parts.
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            void CreatePartSpec
            (
                const char * partType /** the part type */,
                const char * partNumber /** the multifield key */,
                const char * partRevision /** the part revision */,
                const char * partFileType /** the part file type */,
                const char * partFileName /** the dataset name */
            );
            /** Create an instance of a @link NXOpen::PDM::DatabaseAttributeManager NXOpen::PDM::DatabaseAttributeManager@endlink 
                    class that will be used to modify database attributes while creating the new part.  @return  the new @link NXOpen::PDM::DatabaseAttributeManager NXOpen::PDM::DatabaseAttributeManager@endlink  instance 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::DatabaseAttributeManager * NewDatabaseAttributeManager
            (
            );
            /** Create an instance of a @link NXOpen::PDM::PartCreationObject NXOpen::PDM::PartCreationObject@endlink 
                    class that acts as a proxy for a part in NX Manager mode prior to that part
                    being created.  @return  the new @link NXOpen::PDM::PartCreationObject NXOpen::PDM::PartCreationObject@endlink  instance 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartCreationObject * CreatePartCreationObject
            (
            );
            /** Create an instance of a @link NXOpen::PDM::AlternateIdManager NXOpen::PDM::AlternateIdManager@endlink 
                    class that will be used to create alternate ID information while creating the new part.  @return  the new @link NXOpen::PDM::AlternateIdManager NXOpen::PDM::AlternateIdManager@endlink  instance 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::AlternateIdManager * NewAlternateIdManager
            (
            );
            /** This method generates a part number given an input part type and
                    assigns this part number to the builder.

                     <br> The input part type will also be assigned to the builder. If the
                    input part type is NULL then this method will fail unless the part
                    type has already been set on the builder via a previous call to this method
                    or to @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink .
                     <br> 

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    (as will typically be the case) then the <b>part_type</b> and
                    <b>part_number</b> parameters of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the values assigned
                    by this method. Otherwise, CreatePartSpec will override the values assigned
                    here and assign the values of the <b>part_type</b> and <b>part_number</b>
                    parameters to the builder.
                     <br> 

                     <br> 
                    The output part_number:
                    In case of Default Domain: it is Teamcenter item ID.
                    In case of non-Default Domain: it is the multifield key.
                    e.g.   %#MFK#%,=item_id=001, object_type=SupplierPart, supplier_code=x
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink 
                    for Create and @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  for Save As instead.
                    To assign part number, use @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink  and
                    @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink  to create DB_PART_NO attribute.
                     <br> 
                     @return  the assigned multifield key 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AssignPartNumber
            (
                const NXString & partType /** the part type */
            );
            /** This method generates a part number given an input part type and
                    assigns this part number to the builder.

                     <br> The input part type will also be assigned to the builder. If the
                    input part type is NULL then this method will fail unless the part
                    type has already been set on the builder via a previous call to this method
                    or to @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink .
                     <br> 

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    (as will typically be the case) then the <b>part_type</b> and
                    <b>part_number</b> parameters of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the values assigned
                    by this method. Otherwise, CreatePartSpec will override the values assigned
                    here and assign the values of the <b>part_type</b> and <b>part_number</b>
                    parameters to the builder.
                     <br> 

                     <br> 
                    The output part_number:
                    In case of Default Domain: it is Teamcenter item ID.
                    In case of non-Default Domain: it is the multifield key.
                    e.g.   %#MFK#%,=item_id=001, object_type=SupplierPart, supplier_code=x
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink 
                    for Create and @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  for Save As instead.
                    To assign part number, use @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink  and
                    @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink  to create DB_PART_NO attribute.
                     <br> 
                     @return  the assigned multifield key 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXString AssignPartNumber
            (
                const char * partType /** the part type */
            );
            /**This method generates a part revision and assigns this part revision
                    to the builder.

                     <br> 
                    This method depends on the part type and part number already being
                    set on the builder. Therefore, a call to
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink  or,
                    more likely, to @link AssignPartNumber AssignPartNumber@endlink  must be made
                    before calling this method.
                     <br> 

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    (as will typically be the case) then the <b>part_revision</b> parameter of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the value of the <b>part_revision</b>
                    parameters to the builder.
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink 
                    for Create and @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  for Save As instead.
                    To assign part number, use @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink  and
                    @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink  to create DB_PART_REV attribute.
                     <br> 
                     @return  the assigned part revision 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AssignPartRevision
            (
            );
            /**This method generates a part file name given an input part file type and
                    assigns this part file name to the builder.

                     <br> 
                    This method depends on the part type, part number, and part revision
                    already being set on the builder. Therefore, a call to
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink  or,
                    more likely, calls to @link PDM::PartBuilder::AssignPartNumber PDM::PartBuilder::AssignPartNumber@endlink  and
                    @link PDM::PartBuilder::AssignPartRevision PDM::PartBuilder::AssignPartRevision@endlink  must be made
                    before calling this method.
                     <br> 

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    (as will typically be the case) then the <b>part_file_type</b> and
                    <b>part_file_name</b> parameters of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the values assigned
                    by this method. Otherwise, CreatePartSpec will override the values assigned
                    here and assign the values of the <b>part_file_type</b> and <b>part_file_name</b>
                    parameters to the builder.
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations.  Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                     @return  the assigned part file name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AssignPartFileName
            (
                const NXString & partFileType /** the part file type. Note that if the
                               part file type is "master", then this method will return NULL but
                               will still set the part file type in the builder. */
            );
            /**This method generates a part file name given an input part file type and
                    assigns this part file name to the builder.

                     <br> 
                    This method depends on the part type, part number, and part revision
                    already being set on the builder. Therefore, a call to
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink  or,
                    more likely, calls to @link PDM::PartBuilder::AssignPartNumber PDM::PartBuilder::AssignPartNumber@endlink  and
                    @link PDM::PartBuilder::AssignPartRevision PDM::PartBuilder::AssignPartRevision@endlink  must be made
                    before calling this method.
                     <br> 

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    (as will typically be the case) then the <b>part_file_type</b> and
                    <b>part_file_name</b> parameters of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the values assigned
                    by this method. Otherwise, CreatePartSpec will override the values assigned
                    here and assign the values of the <b>part_file_type</b> and <b>part_file_name</b>
                    parameters to the builder.
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations.  Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                     @return  the assigned part file name 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            NXString AssignPartFileName
            (
                const char * partFileType /** the part file type. Note that if the
                               part file type is "master", then this method will return NULL but
                               will still set the part file type in the builder. */
            );
            /** This method generates a part number given an input part type and
                    sets this part number to the builder.

                     <br> The input part type will also be assigned to the builder. If the
                    input part type is NULL then this method will fail unless the part
                    type has already been set on the builder via a previous call to this method
                    or to @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink .
                     <br> 

                     <br> 
                    If this overloaded method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    then the <b>part_number</b> parameter of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the value of <b>part_number</b>
                    parameter to the builder.
                     <br> 

                     <br> 
                    The output part_number in part_info structure:
                    In case of Default Domain: it is Teamcenter item ID.
                    In case of non-Default Domain: it is the multifield key.
                    e.g.   %#MFK#%,=item_id=001, object_type=SupplierPart, supplier_code=x
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink 
                    for Create and @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  for Save As instead.
                    To assign part number, use @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink  and
                    @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink  to create DB_PART_NO attribute.
                     <br> 
                     @return  Contains part number information.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartBuilder::PartNumberData AssignPartNumber
            (
                const NXString & oldPartNumber /** Old part number */,
                const NXString & partType /** Part type */
            );
            /** This method generates a part number given an input part type and
                    sets this part number to the builder.

                     <br> The input part type will also be assigned to the builder. If the
                    input part type is NULL then this method will fail unless the part
                    type has already been set on the builder via a previous call to this method
                    or to @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink .
                     <br> 

                     <br> 
                    If this overloaded method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    then the <b>part_number</b> parameter of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the value of <b>part_number</b>
                    parameter to the builder.
                     <br> 

                     <br> 
                    The output part_number in part_info structure:
                    In case of Default Domain: it is Teamcenter item ID.
                    In case of non-Default Domain: it is the multifield key.
                    e.g.   %#MFK#%,=item_id=001, object_type=SupplierPart, supplier_code=x
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink 
                    for Create and @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  for Save As instead.
                    To assign part number, use @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink  and
                    @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink  to create DB_PART_NO attribute.
                     <br> 
                     @return  Contains part number information.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PDM::PartBuilder::PartNumberData AssignPartNumber
            (
                const char * oldPartNumber /** Old part number */,
                const char * partType /** Part type */
            );
            /** This method generates a part revision and sets this part revision to the builder.

                     <br> 
                    This method depends on the part type and part number already being
                    set on the builder. Therefore, a call to
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink  or,
                    more likely, to @link AssignPartNumber AssignPartNumber@endlink  must be made
                    before calling this method.
                     <br> 

                     <br> If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    then the <b>part_revision</b> parameter of
                    @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the value of the <b>part_revision</b>
                    parameters to the builder.
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink 
                    for Create and @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  for Save As instead.
                    To assign part number, use @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink  and
                    @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink  to create DB_PART_REV attribute.
                     <br> 
                     @return  Contains part revision information 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartBuilder::PartRevisionData AssignPartRevision
            (
                int overload /** Dummy parameter to call this overloaded method*/
            );
            /**This method generates a part file name and assigns this part 
                    file name to the builder.

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    then the <b>part_file_name</b> parameter of @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the values of the <b>part_file_type</b> and <b>part_file_name</b>
                    parameters to the builder.
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations.  Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartBuilder::PartFileNameData AssignPartFileName
            (
                const NXString & partNumber /**Part Number*/,
                const NXString & partRevision /** part revision*/,
                const NXString & partFileNameType /**Part file name type.
                                Note that if the part file type is "master", then this method will set the 
                                field <b>PartFileName</b> of @link PDM::PartBuilder::PartFileNameData PDM::PartBuilder::PartFileNameData@endlink 
                                with NULL*/,
                const NXString & oldPartFileName /**Old part file name*/
            );
            /**This method generates a part file name and assigns this part 
                    file name to the builder.

                     <br> 
                    If this method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    then the <b>part_file_name</b> parameter of @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                    should be set to NULL so that the builder will use the value assigned
                    by this method. Otherwise, CreatePartSpec will override the value assigned
                    here and assign the values of the <b>part_file_type</b> and <b>part_file_name</b>
                    parameters to the builder.
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations.  Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PDM::PartBuilder::PartFileNameData AssignPartFileName
            (
                const char * partNumber /**Part Number*/,
                const char * partRevision /** part revision*/,
                const char * partFileNameType /**Part file name type.
                                Note that if the part file type is "master", then this method will set the 
                                field <b>PartFileName</b> of @link PDM::PartBuilder::PartFileNameData PDM::PartBuilder::PartFileNameData@endlink 
                                with NULL*/,
                const char * oldPartFileName /**Old part file name*/
            );
            /**
                    Sets the part number explicitly into builder.   <br> 
                    This method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink 
                    for Create and @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  for Save As instead.
                    To assign part number, use @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink  and
                    @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink  to set the DB_PART_NO attribute.
                     <br> 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssignPartNumber
            (
                const NXString & partNumber /** the part number */
            );
            /**
                    Sets the part number explicitly into builder.   <br> 
                    This method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationCreateBuilder NXOpen::PDM::PartOperationCreateBuilder@endlink 
                    for Create and @link NXOpen::PDM::PartOperationCopyBuilder NXOpen::PDM::PartOperationCopyBuilder@endlink  for Save As instead.
                    To assign part number, use @link NXOpen::PDM::LogicalObject NXOpen::PDM::LogicalObject@endlink  and
                    @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink  to set the DB_PART_NO attribute.
                     <br> 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetAssignPartNumber
            (
                const char * partNumber /** the part number */
            );
            /**
                    Sets the part type explicitly into builder.   <br> 
                    This method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssignPartType
            (
                const NXString & partType /** part type */ 
            );
            /**
                    Sets the part type explicitly into builder.   <br> 
                    This method is called before @link PDM::PartBuilder::CreatePartSpec PDM::PartBuilder::CreatePartSpec@endlink 
                     <br> 

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            void SetAssignPartType
            (
                const char * partType /** part type */ 
            );
            /**
                    Sets explicitly the place from where part selection dialog invoked into builder.

                     <br> 
                    Deprecated in NX10 except for Save As Non Master part and
                    Save As to New Item Type operations. Use @link NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects NXOpen::PDM::PartOperationBuilder::CreateSpecificationsForLogicalObjects@endlink 
                    instead.
                     <br> 
                     
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetContextOperation
            (
                NXOpen::PDM::PartBuilder::Operation operation /** Token identifying place from where UG/Manager part selection dialog invoked */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
