#ifndef NXOpen_CAE_POSTSCENARIOQUERYRESULTS_HXX_INCLUDED
#define NXOpen_CAE_POSTSCENARIOQUERYRESULTS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostScenarioQueryResults.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_PostScenarioConfigurationGroup.hxx>
#include <NXOpen/CAE_PostScenarioConfigurationGroupBuilder.hxx>
#include <NXOpen/CAE_PostScenarioMetadata.hxx>
#include <NXOpen/CAE_PostScenarioPlotBuilder.hxx>
#include <NXOpen/CAE_PostScenarioResultGroup.hxx>
#include <NXOpen/CAE_PostScenarioResultGroupBuilder.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostScenarioQueryResults;
    }
    namespace CAE
    {
        class PostScenarioConfigurationGroup;
    }
    namespace CAE
    {
        class PostScenarioConfigurationGroupBuilder;
    }
    namespace CAE
    {
        class PostScenarioMetadata;
    }
    namespace CAE
    {
        class PostScenarioPlotBuilder;
    }
    namespace CAE
    {
        class PostScenarioResultGroup;
    }
    namespace CAE
    {
        class PostScenarioResultGroupBuilder;
    }
    namespace CAE
    {
    }
    namespace CAE
    {
        class PostScenarioQueryResultsImpl;

        /// \cond NX_NO_DOC 
        /**  @brief  This class represents a @link NXOpen::CAE::PostScenarioQueryResults NXOpen::CAE::PostScenarioQueryResults@endlink .  

         

                
                 <br> 
                This class represents the format that data is passed
                around in the Scenario-based Data Visualization framework.
                 <br> 
                 <br>         
                It is a 3 level deep tree:<ul>
                <li> the top level is represented by ResultGroup's
                  which describe the Data Set in terms of dimensions
                  and other metadata</li>
                <li>the second level represents the plots;
                  plots are selections performed by the user based on the
                  descriptor you have provided and identify one "plot"
                  conforming to that definition. We call this binding
                  selection values to selection variables</li>
                <li>plot entries; plot entries identify one-dimensional signal functions
                  or spatial result groups that make up a plot. Here, each higher order
                  independent variable is bound to a scalar value, and the entire set
                  builds up the multidimensional plot. In the simplest case where one plot
                  IS a one-dimensional signal function or a sptial result group, the plot
                  will only have one entry.</li>
                </ul>
                 <br> 
                 <br> 
                Data points are represented using @link CAE::PostScenarioVariantList CAE::PostScenarioVariantList@endlink .
                That type of object allows working with data in a general sense and permits storing
                any and all data types supported by the framework, be they real numeric values, complex
                numeric values, string values or even sets of coordinate systems.
                 <br> 
                 <br>         
                A QueryResults object can be iterated starting with the @link CAE::PostScenarioResultGroup CAE::PostScenarioResultGroup@endlink .
                This identifies a data set, and it is defined by the dimensionality of the set and other metadata, like
                the variables' names, type, measure and so on. A plot belongs to one result group and one configuration group.
                 <br> 
                 <br> 
                A configuration group represents the set of bound configuration parameters which do not form the query against
                the data sources, but are user inputs. For some visualizations, you must provide configuration groups in a specific way,
                but most of the time there shall be only one configuration group called "Default".
                 <br> 
                 <br> 
                QueryResults objects are usually part of the Scenario-based Data Visualization framework. Your scenarios are usually
                asked to read data from them and write data to them. To write data to them, use @link CAE::PostScenarioResultGroupBuilder CAE::PostScenarioResultGroupBuilder@endlink 
                @link CAE::PostScenarioConfigurationGroupBuilder CAE::PostScenarioConfigurationGroupBuilder@endlink , @link CAE::PostScenarioPlotBuilder CAE::PostScenarioPlotBuilder@endlink ,
                @link CAE::PostScenarioPlotEntryBuilder CAE::PostScenarioPlotEntryBuilder@endlink  and @link CAE::PostScenarioMetadata CAE::PostScenarioMetadata@endlink .
                 <br> 
                 <br> 
                query results can be grouped by input definitions: @code 
                     QueryResults (code)
                       ResultGroup1
                         ConfigurationGroup1
                           Plot1
                           Plot2
                         ConfigurationGroup2
                           Plot3
                       ResultGroup2
                         ConfigurationGruop1
                           Plot4
                           Plot5 @endcode 
                 <br> 
                 <br> In the most common case, they are grouped as such on the input: @code 
                    QueryResults (root)
                      ConfigurationGroupDefault (representing all your configuration parameters)
                        ResultGroup1 (representing Slot1)
                            Plot1
                        ResultGroup2 (representing Slot2)
                            Plot2
                        ... (for each data slot in your scenario descriptor)
                 @endcode  <br> 
                 <br>                 
                See also @link CAE::PostScenarioPlotData CAE::PostScenarioPlotData@endlink  and @link CAE::PostScenarioPlotDataEntry CAE::PostScenarioPlotDataEntry@endlink .
                 <br> 
                 <br> 
                Example (NXOpen for Python): @code 
                def MyTransformation(mgr, input, ctx, output):
                    rg = output.NewResultGroupBuilder("ResultGroup1")
                
                    subcase = mgr.PostScenarioMgr.NewVariableDomain()
                    subcase.AddComponent("subcase_name", [])
                    rg.AddSelectionVariable(
                        "Subcase",
                        NXOpen.CAE.PostScenarioVariantType.String,
                        subcase)
                    subcase.Dispose()
                    # lowest order
                    frequency = mgr.PostScenarioMgr.NewVariableDomain()
                    frequency.AddComponent("frequency", [])
                    rg.AddIndependentVariable(
                        "Frequency",
                        NXOpen.CAE.PostScenarioVariantType.Double,
                        frequency)
                    frequency.Dispose()
                    # first high order independent
                    rpm = mgr.PostScenarioMgr.NewVariableDomain()
                    rpm.AddComponent("rpm", [])
                    rg.AddIndependentVariable(
                        "RPM",
                        NXOpen.CAE.PostScenarioVariantType.Double,
                        rpm)
                    rpm.Dispose()
                    pressure = mgr.PostScenarioMgr.NewVariableDomain()
                    pressure.AddComponent("pressure", [])
                    pressure.AddComponent("pressure", [])
                    rg.AddDependentVariable(
                        "Pressure",
                        NXOpen.CAE.PostScenarioVariantType.Double,
                        NXOpen.CAE.PostScenarioComponentType.Scalar,
                        pressure)
                    pressure.Dispose()
                    rg.Commit()
                    rg.Dispose()
                
                    # need a new object here...
                    cg = output.NewConfigurationGroupBuilder(
                        "Default")
                    v = mgr.PostScenarioMgr.NewVariant()
                    v.SetValueAsInteger(42)
                    cg.AddMetadata(
                        "A",
                        [v])
                    v.Dispose()
                    cg.Commit()
                    cg.Dispose()
                
                    # need a new object here...
                    pb = output.NewPlotBuilder(
                        "MyPlot",
                        "ResultGroup1",
                        "Default")
                    v = mgr.PostScenarioMgr.NewVariant()
                    v.SetValueAsString("Subcase 1")
                    pb.SetSelectionValue("Subcase", v)
                    eb = pb.NewPlotEntryBuilder()
                    v = mgr.PostScenarioMgr.NewVariant()
                    v.SetValueAsDouble(3.14)
                    eb.SetHighOrderIndependent(
                        "RPM",
                        v)
                    v.Dispose()
                    vl = mgr.PostScenarioMgr.NewVariantList()
                    vl.SetValueAsDouble([1.0, 2.0, 3.0])
                    eb.SetIndependent(
                        "Frequency",
                        vl)
                    vl.Dispose()
                    vl = mgr.PostScenarioMgr.NewVariantList()
                    vl.SetValueAsDouble([100.0, 200.0, 300.0])
                    eb.AssignDependent(
                        "Pressure",
                        NXOpen.CAE.PostScenarioVariantComponent.Scalar,
                        vl)
                    eb.Commit()
                    eb.Dispose()
                    pb.Commit()
                    pb.Dispose()
                 @endcode 
                
                Example iterating across plots (NXOpen for Python): @code 
                def MyCallback(mgr, input, ctx, output):
                    theSession  = NXOpen.Session.GetSession( )
                    lw = theSession.ListingWindow
                    for rg in input.GetResultGroups():
                        lw.WriteLine("Result Group " + rg.Name)
                        for dvar in rg.GetDependentVariables():
                            lw.WriteLine("Variable " + dvar.Name + " measure " + dvar.Domain.GetMeasure())
                            for plot in rg.GetPlots():
                                lw.WriteLine("Printing " + plot.Name)
                                lw.WriteLine("Number of entries: " + str(sum(1 for e in plot.GetEntries())))
                                i = 0
                                for entry in plot.GetEntries():
                                    i = i + 1
                                    lw.WriteLine("Entry #" + str(i))
                                    for component in entry.GetAvailableComponents(dvar.Name):
                                        ivalues = entry.GetIndependentValues().GetValueAsDouble()
                                        dvalues = entry.GetDependentValues(dvar.Name, component).GetValueAsDouble()
                
                                        lw.WriteLine(repr([ivalues, dvalues]))

                 @endcode  <br> 
                
              <br> No support for KF.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostScenarioQueryResults : public NXOpen::TransientObject
        {
            private: PostScenarioQueryResultsImpl * m_postscenarioqueryresults_impl;
            /// \cond NX_NO_DOC 
            public: explicit PostScenarioQueryResults(void *ptr);
            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns   @brief Assign the output name. 

             

                        
                         <br> 
                        If this object is the input to a transformation function, the name represents a data
                        slot as defined by the XML descriptor. The data contained therein represents the result
                        of the user's query against the selected data source that is connected to that slot.
                        Its abscence, or empty contents, mean that no data could be found for the given selection
                        criteria.
                         <br> 
                         <br> 
                        If this object is the output of a transformation function, the name is used to map
                        a data set to a particular subviewport, as defined in the scenario XML descriptor.
                         <br> 
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets   @brief Assign the output name. 

             

                        
                         <br> 
                        If this object is the input to a transformation function, the name represents a data
                        slot as defined by the XML descriptor. The data contained therein represents the result
                        of the user's query against the selected data source that is connected to that slot.
                        Its abscence, or empty contents, mean that no data could be found for the given selection
                        criteria.
                         <br> 
                         <br> 
                        If this object is the output of a transformation function, the name is used to map
                        a data set to a particular subviewport, as defined in the scenario XML descriptor.
                         <br> 
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets   @brief Assign the output name. 

             

                        
                         <br> 
                        If this object is the input to a transformation function, the name represents a data
                        slot as defined by the XML descriptor. The data contained therein represents the result
                        of the user's query against the selected data source that is connected to that slot.
                        Its abscence, or empty contents, mean that no data could be found for the given selection
                        criteria.
                         <br> 
                         <br> 
                        If this object is the output of a transformation function, the name is used to map
                        a data set to a particular subviewport, as defined in the scenario XML descriptor.
                         <br> 
                        
                     
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            void SetName
            (
                const char * name /** name */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Dispose of this instance. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~PostScenarioQueryResults();

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Allows building a @link CAE::PostScenarioResultGroup CAE::PostScenarioResultGroup@endlink  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioResultGroupBuilder * NewResultGroupBuilder
            (
                const NXString & name /** name */ 
            );
            /** Allows building a @link CAE::PostScenarioResultGroup CAE::PostScenarioResultGroup@endlink  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::PostScenarioResultGroupBuilder * NewResultGroupBuilder
            (
                const char * name /** name */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Allows building a @link CAE::PostScenarioConfigurationGroup CAE::PostScenarioConfigurationGroup@endlink  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioConfigurationGroupBuilder * NewConfigurationGroupBuilder
            (
                const NXString & name /** name */ 
            );
            /** Allows building a @link CAE::PostScenarioConfigurationGroup CAE::PostScenarioConfigurationGroup@endlink  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::PostScenarioConfigurationGroupBuilder * NewConfigurationGroupBuilder
            (
                const char * name /** name */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Allows building a @link CAE::PostScenarioPlotData CAE::PostScenarioPlotData@endlink  object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::PostScenarioPlotBuilder * NewPlotBuilder
            (
                const NXString & name /** name */ ,
                const NXString & resultGroup /** resultgroup */ ,
                const NXString & namedSelection /** namedselection */ 
            );
            /** Allows building a @link CAE::PostScenarioPlotData CAE::PostScenarioPlotData@endlink  object 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::CAE::PostScenarioPlotBuilder * NewPlotBuilder
            (
                const char * name /** name */ ,
                const char * resultGroup /** resultgroup */ ,
                const char * namedSelection /** namedselection */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**  @brief Get the available Result Groups in this data set 

             

                        
                         <br> 
                        For the input argument to the TransformationCallback (see @link CAE::PostScenarioDescriptorBuilder CAE::PostScenarioDescriptorBuilder@endlink )
                        each Result Group represents the data assigned to one Slot, and it shall have the name of that slot.
                         <br> 
                         <br> 
                        A Result Group owns the plots therein, and the Result Group represents the definition of the data set in terms
                        of dimensionality (i.e. Variables).
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::PostScenarioResultGroup *> GetResultGroups
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**  @brief Get the available Configuration Groups in this data set 

             

                        
                         <br> 
                        For the input argument to the TransformationCallback (see @link CAE::PostScenarioDescriptorBuilder CAE::PostScenarioDescriptorBuilder@endlink )
                        there is only one Configuration Group named "Default". For output arguments, this is usually also the case unless
                        otherwise noted.
                         <br> 
                         <br> 
                        A configuration group groups plots with Configuration Parameters, which, in the case of the input argument to
                        the transformation callback, represent the user's input on those parameters.
                         <br> 
                         <br> 
                        In some cases, parameters will not have any values bound to them, in which case the transformation callback
                        must assume the default value declared in the scenario XML descriptor.
                         <br> 
                        
                      
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::PostScenarioConfigurationGroup *> GetConfigurationGroups
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create a metadata object. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::PostScenarioMetadata * NewMetadata
            (
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
