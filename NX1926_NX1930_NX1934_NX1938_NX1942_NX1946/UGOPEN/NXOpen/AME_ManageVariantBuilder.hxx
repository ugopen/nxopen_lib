#ifndef NXOpen_AME_MANAGEVARIANTBUILDER_HXX_INCLUDED
#define NXOpen_AME_MANAGEVARIANTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ManageVariantBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ManageVariantBuilder;
    }
    class Builder;
    class NXObject;
    class Part;
    namespace AME
    {
        class _ManageVariantBuilderBuilder;
        class ManageVariantBuilderImpl;
        /** Builder class for creating/deleting/editing of variant and variant selection objects.  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateManageVariantBuilder  NXOpen::AME::AMEManager::CreateManageVariantBuilder @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ManageVariantBuilder : public NXOpen::Builder
        {
            private: ManageVariantBuilderImpl * m_managevariantbuilder_impl;
            private: friend class  _ManageVariantBuilderBuilder;
            protected: ManageVariantBuilder();
            public: ~ManageVariantBuilder();
            /**  Method to create variant 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * CreateVariant
            (
                NXOpen::NXObject * parentVariantSelection /** parentvariantselection */ 
            );
            /**  Method to create variant selection 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * CreateVariantSelection
            (
                NXOpen::NXObject * parentVariant /** parentvariant */ 
            );
            /**  Method to edit existing variant 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void EditVariant
            (
            );
            /**  Method to set default variant for a variant selection 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDefaultVariant
            (
                NXOpen::NXObject * variantObject /** variantobject */ 
            );
            /**  Method to set name of the variant 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetVariantName
            (
                NXOpen::NXObject * variantObject /** variantobject */ ,
                const NXString & newName /** newname */ 
            );
            /**  Method to set name of the variant 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetVariantName
            (
                NXOpen::NXObject * variantObject /** variantobject */ ,
                const char * newName /** newname */ 
            );
            /**  Method to set name of the variant selection 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetVariantSelectionName
            (
                NXOpen::NXObject * variantSelectionObject /** variantselectionobject */ ,
                const NXString & newName /** newname */ 
            );
            /**  Method to set name of the variant selection 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetVariantSelectionName
            (
                NXOpen::NXObject * variantSelectionObject /** variantselectionobject */ ,
                const char * newName /** newname */ 
            );
            /**  Method to set description of the variant 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetVariantDescription
            (
                NXOpen::NXObject * variantObject /** variantobject */ ,
                const NXString & newDescription /** newdescription */ 
            );
            /**  Method to set description of the variant 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetVariantDescription
            (
                NXOpen::NXObject * variantObject /** variantobject */ ,
                const char * newDescription /** newdescription */ 
            );
            /**  Method to set description of the variant selection 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetVariantSelectionDescription
            (
                NXOpen::NXObject * variantSelectionObject /** variantselectionobject */ ,
                const NXString & newDescription /** newdescription */ 
            );
            /**  Method to set description of the variant selection 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetVariantSelectionDescription
            (
                NXOpen::NXObject * variantSelectionObject /** variantselectionobject */ ,
                const char * newDescription /** newdescription */ 
            );
            /** Method to duplicate input variants under a variant selection 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::NXObject *> DuplicateVariants
            (
                const std::vector<NXOpen::NXObject *> & inputVariants /** Variant objects to be duplicated*/
            );
            /**  Method to delete variants and variant selections
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteVariantsAndVariantSelections
            (
                const std::vector<NXOpen::NXObject *> & objectsToDelete /** objectstodelete */ 
            );
            /** Method to get the variant's @link Part Part@endlink  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Part * GetVariantPart
            (
                NXOpen::NXObject * variantObject /** variantobject */ 
            );
            /** Method to get the variant's project 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * GetVariantProject
            (
                NXOpen::NXObject * variantObject /** variantobject */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
