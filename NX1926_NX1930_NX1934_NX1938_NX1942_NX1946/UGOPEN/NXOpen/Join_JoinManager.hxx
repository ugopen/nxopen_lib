#ifndef NXOpen_JOIN_JOINMANAGER_HXX_INCLUDED
#define NXOpen_JOIN_JOINMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Join_JoinManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libjoinopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Join
    {
        class JoinManager;
    }
    class Session;
    namespace Annotations
    {
        class Annotation;
    }
    namespace Join
    {
        class CurveJoin;
    }
    namespace Join
    {
        class CurveJoinBuilder;
    }
    namespace Join
    {
        class ExportJoinBuilder;
    }
    namespace Join
    {
        class FaceJoin;
    }
    namespace Join
    {
        class FaceJoinBuilder;
    }
    namespace Join
    {
        class ImportJoinBuilder;
    }
    namespace Join
    {
        class JoinNoteBuilder;
    }
    namespace Join
    {
        class MultiEditPointJoinBuilder;
    }
    namespace Join
    {
        class MultiEditPointJoinParametersBuilder;
    }
    namespace Join
    {
        class PointJoin;
    }
    namespace Join
    {
        class PointJoinBuilder;
    }
    namespace Join
    {
        class RefPointsBuilder;
    }
    namespace Join
    {
        class SubtypeAuthorBuilder;
    }
    class NXObject;
    class Part;
    namespace Join
    {
        class JoinManagerImpl;
        /** Represents a manager of join feature builders.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class JOINOPENCPPEXPORT  JoinManager
        {
            private: JoinManagerImpl * m_joinmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit JoinManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static JoinManager* theJoinManager;
            /** Returns the JoinManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static JoinManager* GetJoinManager(NXOpen::Session *owner);
            public: ~JoinManager();
            /** Creates a @link Join::PointJoinBuilder Join::PointJoinBuilder@endlink   @return  yynxkda test 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::PointJoinBuilder * CreatePointJoinBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::PointJoin * pointJoin /** @link Join::PointJoin Join::PointJoin@endlink  to be edited */
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link Join::CurveJoinBuilder Join::CurveJoinBuilder@endlink   @return  yynxkda test 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::CurveJoinBuilder * CreateCurveJoinBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::CurveJoin * curveJoin /** @link Join::CurveJoin Join::CurveJoin@endlink  to be edited */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a @link Join::FaceJoinBuilder Join::FaceJoinBuilder@endlink   @return  yynxkda test 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::FaceJoinBuilder * CreateFaceJoinBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::FaceJoin * faceJoin /** @link Join::FaceJoin Join::FaceJoin@endlink  to be edited */
            );

            /// \endcond 
            /** Creates a @link NXOpen::Join::ExportJoinBuilder NXOpen::Join::ExportJoinBuilder@endlink  object.  @return  ExportJoin builder
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::ExportJoinBuilder * CreateExportJoinBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::Join::ImportJoinBuilder NXOpen::Join::ImportJoinBuilder@endlink  object.  @return  ImportJoin builder
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::ImportJoinBuilder * CreateImportJoinBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::Join::RefPointsBuilder NXOpen::Join::RefPointsBuilder@endlink  object. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::RefPointsBuilder * ChildRefpointsBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::PointJoinBuilder * parentBuilder /** parentbuilder */ 
            );

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::Join::SubtypeAuthorBuilder NXOpen::Join::SubtypeAuthorBuilder@endlink  object.  @return  SubtypeAuthor builder
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_join_advanced (" NX Join Advanced Functionality") */
            public: NXOpen::Join::SubtypeAuthorBuilder * CreateSubtypeAuthorBuilder
            (
            );

            /// \endcond 
            /** Creates a @link NXOpen::Join::JoinNoteBuilder NXOpen::Join::JoinNoteBuilder@endlink  object.  @return  Join Note builder
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::JoinNoteBuilder * CreateJoinNoteBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Annotations::Annotation * annotation /** annotation */ 
            );
            /** Method to show or hide the solid body associated with a @link Join::PointJoin Join::PointJoin@endlink  feature in the work part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void HideSolids
            (
                const std::vector<NXOpen::NXObject *> & joinFeatures /** Point Join features. If empty, all feature in work part will be used. */,
                bool hideSolids /** true to hide solids, false to show solids. */
            );
            /** Method to turn on or off the show through state for @link Join::PointJoin Join::PointJoin@endlink  features in the work part. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void ShowThrough
            (
                const std::vector<NXOpen::NXObject *> & joinFeatures /** Join features. If empty, all feature in work part will be used. */,
                bool showThrough /** true to turn show through state on, false to turn off. */
            );
            /** Method to recompute the stackup for the Point Joint Feature. The method creates a build for each feature, commits it, and runs update for all changed features. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateStackup
            (
                const std::vector<NXOpen::NXObject *> & joinFeatures /** Point Join features. */
            );
            /** Creates a @link NXOpen::Join::MultiEditPointJoinBuilder NXOpen::Join::MultiEditPointJoinBuilder@endlink  object.  @return  MultiEditPointJoinBuilder builder
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::MultiEditPointJoinBuilder * CreateMultiEditPointJoinBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link NXOpen::Join::MultiEditPointJoinParametersBuilder NXOpen::Join::MultiEditPointJoinParametersBuilder@endlink  object.  @return  MultiEditPointJoinBuilder builder
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_join (" NX Join") */
            public: NXOpen::Join::MultiEditPointJoinParametersBuilder * CreateMultiEditPointJoinParametersBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Join::MultiEditPointJoinBuilder * parentBuilder /** parentbuilder */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
