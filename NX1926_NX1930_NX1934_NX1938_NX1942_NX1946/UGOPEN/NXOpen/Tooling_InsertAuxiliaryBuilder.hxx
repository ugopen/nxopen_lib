#ifndef NXOpen_TOOLING_INSERTAUXILIARYBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_INSERTAUXILIARYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_InsertAuxiliaryBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class InsertAuxiliaryBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Point;
    class ScCollector;
    class Section;
    class SelectBody;
    class SelectBodyList;
    class SelectEdge;
    class SelectFace;
    class SelectNXObjectList;
    namespace Tooling
    {
        class _InsertAuxiliaryBuilderBuilder;
        class InsertAuxiliaryBuilderImpl;
        /** PDW insert auxiliary builder to design various auxiliaries of insert group  <br> To create a new instance of this class, use @link NXOpen::Tooling::InsertAuxiliaryCollection::CreateInsertAuxiliaryBuilder  NXOpen::Tooling::InsertAuxiliaryCollection::CreateInsertAuxiliaryBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        BlendRadius </term> <description> 
         
        0.2 </description> </item> 

        <item><term> 
         
        BottomPlateClearance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CircDeleteAllComponents </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CircularOperation </term> <description> 
         
        Create </description> </item> 

        <item><term> 
         
        ClearanceValue </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        DesignTool </term> <description> 
         
        Copy </description> </item> 

        <item><term> 
         
        FalseBodyHeight.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        HeelFalseHeightClearance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        HeelHeight </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        HeelLength </term> <description> 
         
        10 </description> </item> 

        <item><term> 
         
        HeelRadian </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        HeelTypes </term> <description> 
         
        RType </description> </item> 

        <item><term> 
         
        HeelWidth </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        OffsetAngle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OffsetX </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        OffsetY </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PunchPlateClearance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        PunchShankParaC </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        PunchShankParaFL </term> <description> 
         
        45 </description> </item> 

        <item><term> 
         
        PunchShankParaL1 </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        PunchShankParaLength </term> <description> 
         
        8 </description> </item> 

        <item><term> 
         
        PunchShankParaPL </term> <description> 
         
        40 </description> </item> 

        <item><term> 
         
        PunchShankParaR </term> <description> 
         
        13 </description> </item> 

        <item><term> 
         
        PunchShankParaWidth </term> <description> 
         
        8 </description> </item> 

        <item><term> 
         
        RampShankHeight.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        RampSteps </term> <description> 
         
        AddMaterial </description> </item> 

        <item><term> 
         
        RectDeleteAllComponents </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RectangularOperation </term> <description> 
         
        Create </description> </item> 

        <item><term> 
         
        ShankShape </term> <description> 
         
        Flange </description> </item> 

        <item><term> 
         
        StripperPlateClearance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TotalAlongX </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        TotalAlongY </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        TotalNumber </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        UseBottomPlateClearance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        UseClearance </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        UseFaceOrSketch </term> <description> 
         
        Face </description> </item> 

        <item><term> 
         
        UsePunchPlateClearance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        UseStripperPlateClearance </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  InsertAuxiliaryBuilder : public NXOpen::Builder
        {
            /** Specifies the insert auxiliary type. */
            public: enum Types
            {
                TypesInsertFlange/** insert flange*/,
                TypesInsertRamp/** insert ramp*/,
                TypesInsertHeel/** insert heel*/,
                TypesPunchMount/** punch mount*/,
                TypesTools/** tools*/
            };

            /** Specifies the shank shape. */
            public: enum ShankShapeTypes
            {
                ShankShapeTypesFlange/** flange*/,
                ShankShapeTypesRamp/** ramp*/,
                ShankShapeTypesHeel/** heel*/
            };

            /** Specifies the ramp steps. */
            public: enum RampStepsType
            {
                RampStepsTypeAddMaterial/** add material */ ,
                RampStepsTypeCreateCurvesAndDivideFace/** create curves and divide face */ ,
                RampStepsTypeCreateRamp/** create ramp */ ,
                RampStepsTypeDeleteRamp/** delete ramp */ 
            };

            /** Specisied the heel types */
            public: enum HeelTypesType
            {
                HeelTypesTypeRType/** rtype */ ,
                HeelTypesTypeCType/** ctype */ 
            };

            /** Specifies the use face or sketch to revolve.*/
            public: enum UseFaceOrSketchToRevolve
            {
                UseFaceOrSketchToRevolveFace/** face */ ,
                UseFaceOrSketchToRevolveSketch/** sketch */ 
            };

            /** Specifies the design tool option. */
            public: enum DesignToolOption
            {
                DesignToolOptionCopy/** copy*/,
                DesignToolOptionArray/** array*/,
                DesignToolOptionDelete/** delete*/
            };

            /** Specifies the rectangular array option. */
            public: enum RectOperationOption
            {
                RectOperationOptionCreate/** create*/,
                RectOperationOptionEdit/** edit*/,
                RectOperationOptionDelete/** delete*/
            };

            /** Specifies the options of circular array. */
            public: enum CircOperationTypes
            {
                CircOperationTypesCreate/** create*/,
                CircOperationTypesEdit/** edit*/,
                CircOperationTypesDelete/** delete*/
            };

            private: InsertAuxiliaryBuilderImpl * m_insertauxiliarybuilder_impl;
            private: friend class  _InsertAuxiliaryBuilderBuilder;
            protected: InsertAuxiliaryBuilder();
            public: ~InsertAuxiliaryBuilder();
            /**Returns  the insert auxiliary type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::Types Type
            (
            );
            /**Sets  the insert auxiliary type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::Types type /** type */ 
            );
            /**Returns  the shank shape. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::ShankShapeTypes ShankShape
            (
            );
            /**Sets  the shank shape. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetShankShape
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::ShankShapeTypes shankShape /** shankshape */ 
            );
            /**Returns  the ramp steps 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::RampStepsType RampSteps
            (
            );
            /**Sets  the ramp steps 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRampSteps
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::RampStepsType rampSteps /** rampsteps */ 
            );
            /**Returns  the heel types 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::HeelTypesType HeelTypes
            (
            );
            /**Sets  the heel types 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHeelTypes
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::HeelTypesType heelTypes /** heeltypes */ 
            );
            /**Returns  the punch shank parameter length. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchShankParaLength
            (
            );
            /**Sets  the punch shank parameter length. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchShankParaLength
            (
                double punchShankParaL /** punchshankparal */ 
            );
            /**Returns  the punch shank parameter width. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchShankParaWidth
            (
            );
            /**Sets  the punch shank parameter width. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchShankParaWidth
            (
                double punchShankParaW /** punchshankparaw */ 
            );
            /**Returns  the punch shank parameter for true body and false body length. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchShankParaL1
            (
            );
            /**Sets  the punch shank parameter for true body and false body length. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchShankParaL1
            (
                double punchShankParaL1 /** punchshankparal1 */ 
            );
            /**Returns  the punch shank parameter for clearance between true body and false body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchShankParaC
            (
            );
            /**Sets  the punch shank parameter for clearance between true body and false body. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchShankParaC
            (
                double punchShankParaC /** punchshankparac */ 
            );
            /**Returns  the punch shank parameter for true body radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchShankParaR
            (
            );
            /**Sets  the punch shank parameter for true body radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchShankParaR
            (
                double punchShankParaR /** punchshankparar */ 
            );
            /**Returns  the punch shank parameter for true body height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchShankParaPL
            (
            );
            /**Sets  the punch shank parameter for true body height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchShankParaPL
            (
                double punchShankParaPL /** punchshankparapl */ 
            );
            /**Returns  the punch shank parameter false body height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchShankParaFL
            (
            );
            /**Sets  the punch shank parameter false body height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchShankParaFL
            (
                double punchShankParaFL /** punchshankparafl */ 
            );
            /**Returns  the selected punch. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * Punch
            (
            );
            /**Returns  the selected shank profile. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SelectShankProfile
            (
            );
            /**Returns  the ramp shank height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RampShankHeight
            (
            );
            /**Returns  the false body height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FalseBodyHeight
            (
            );
            /**Returns  the select face to divide 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * SelectFaceToDivide
            (
            );
            /**Returns  the curves created to divid the face 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * CreateCurvesToDivideFace
            (
            );
            /**Returns  the use face or sketch option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::UseFaceOrSketchToRevolve UseFaceOrSketch
            (
            );
            /**Sets  the use face or sketch option 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUseFaceOrSketch
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::UseFaceOrSketchToRevolve useFaceOrSketch /** usefaceorsketch */ 
            );
            /**Returns  the sketch to revolve 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SketchToRevolve
            (
            );
            /**Returns  the sweep face for editing ramp. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FaceForRamp
            (
            );
            /**Returns  the vector to determintate the datum plane normal that the sweep guide curve in. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * VectorForRamp
            (
            );
            /**Sets  the vector to determintate the datum plane normal that the sweep guide curve in. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetVectorForRamp
            (
                NXOpen::Direction * vectorForRamp /** vectorforramp */ 
            );
            /**Returns  the tangent point for the sweep guide curve 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * PointForRamp
            (
            );
            /**Sets  the tangent point for the sweep guide curve 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPointForRamp
            (
                NXOpen::Point * pointForRamp /** pointforramp */ 
            );
            /**Returns  the the sweep guide curve radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RadiusForRamp
            (
            );
            /**Returns  the select insert to delete ramp 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * SelectInsertToDeleteRamp
            (
            );
            /**Returns  the select ramp feature 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectRampFeature
            (
            );
            /**Returns  the heel length. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double HeelLength
            (
            );
            /**Sets  the heel length. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHeelLength
            (
                double heelLength /** heellength */ 
            );
            /**Returns  the heel width. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double HeelWidth
            (
            );
            /**Sets  the heel width. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHeelWidth
            (
                double heelWidth /** heelwidth */ 
            );
            /**Returns  the heel radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double HeelRadian
            (
            );
            /**Sets  the heel radius. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHeelRadian
            (
                double heelRadian /** heelradian */ 
            );
            /**Returns  the heel height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double HeelHeight
            (
            );
            /**Sets  the heel height. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHeelHeight
            (
                double heelHeight /** heelheight */ 
            );
            /**Returns  the blend radius. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double BlendRadius
            (
            );
            /**Sets  the blend radius. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBlendRadius
            (
                double blendRadius /** blendradius */ 
            );
            /**Returns  the false height clearance of heel. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double HeelFalseHeightClearance
            (
            );
            /**Sets  the false height clearance of heel. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetHeelFalseHeightClearance
            (
                double heelFalseHeightClearance /** heelfalseheightclearance */ 
            );
            /**Returns  the option to use punch plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool UsePunchPlateClearance
            (
            );
            /**Sets  the option to use punch plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUsePunchPlateClearance
            (
                bool usePPClearance /** useppclearance */ 
            );
            /**Returns  the punch plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double PunchPlateClearance
            (
            );
            /**Sets  the punch plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPunchPlateClearance
            (
                double punchPlateClr /** punchplateclr */ 
            );
            /**Returns  the option to use bottoming plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool UseBottomPlateClearance
            (
            );
            /**Sets  the option to use bottoming plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUseBottomPlateClearance
            (
                bool useBPClearance /** usebpclearance */ 
            );
            /**Returns  the bottom plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double BottomPlateClearance
            (
            );
            /**Sets  the bottom plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBottomPlateClearance
            (
                double bottomPlateClr /** bottomplateclr */ 
            );
            /**Returns  the option to stripper plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool UseStripperPlateClearance
            (
            );
            /**Sets  the option to stripper plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUseStripperPlateClearance
            (
                bool useSPClearance /** usespclearance */ 
            );
            /**Returns  the stripper plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double StripperPlateClearance
            (
            );
            /**Sets  the stripper plate clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetStripperPlateClearance
            (
                double stripperPlateClr /** stripperplateclr */ 
            );
            /**Returns  the option to use clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool UseClearance
            (
            );
            /**Sets  the option to use clearance. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetUseClearance
            (
                bool useClearance /** useclearance */ 
            );
            /**Returns  the clearance value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double ClearanceValue
            (
            );
            /**Sets  the clearance value. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetClearanceValue
            (
                double clearanceValue /** clearancevalue */ 
            );
            /**Returns  the punch edge. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectEdge * PunchEdge
            (
            );
            /**Returns  the punch shank. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * PunchShankFace
            (
            );
            /**Returns  the insert edge. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectEdge * InsertEdge
            (
            );
            /**Returns  the insert shank face. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * InsertShankFace
            (
            );
            /**Returns  the punch edge to place the mount. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectEdge * MountPunchEdge
            (
            );
            /**Returns  the punch face to place the mount. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * MountPunchFace
            (
            );
            /** Design mount head for insert.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void DesignMountHead
            (
            );
            /**Returns  the design tool. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::DesignToolOption DesignTool
            (
            );
            /**Sets  the design tool. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDesignTool
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::DesignToolOption designTool /** designtool */ 
            );
            /**Returns  the insert to be copied. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * CopySelectInsert
            (
            );
            /**Returns  the control point for the copy operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ControlPoint
            (
            );
            /**Sets  the control point for the copy operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetControlPoint
            (
                NXOpen::Point * specifyControlPoint /** specifycontrolpoint */ 
            );
            /**Returns  the destination point for the copy operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * DestinationPoint
            (
            );
            /**Sets  the destination point for the copy operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDestinationPoint
            (
                NXOpen::Point * specifyDestinationPoint /** specifydestinationpoint */ 
            );
            /**Returns  the insert to do rectangular array . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * RectangularInsert
            (
            );
            /**Returns  the rectangular array operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::RectOperationOption RectangularOperation
            (
            );
            /**Sets  the rectangular array operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRectangularOperation
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::RectOperationOption rectOperationType /** rectoperationtype */ 
            );
            /**Returns  the option to delete all components in rectangular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool RectDeleteAllComponents
            (
            );
            /**Sets  the option to delete all components in rectangular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRectDeleteAllComponents
            (
                bool rectDeleteAllComponents /** rectdeleteallcomponents */ 
            );
            /**Returns  the X vector for rectangular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * RectangularXVector
            (
            );
            /**Sets  the X vector for rectangular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRectangularXVector
            (
                NXOpen::Direction * rectSpecifyVectorX /** rectspecifyvectorx */ 
            );
            /**Returns  the total number of insert along X. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int TotalAlongX
            (
            );
            /**Sets  the total number of insert along X. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTotalAlongX
            (
                int totalNumberX /** totalnumberx */ 
            );
            /**Returns  the offset value along X. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double OffsetX
            (
            );
            /**Sets  the offset value along X. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetX
            (
                double offsetX /** offsetx */ 
            );
            /**Returns  the Y vector for rectangular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * RectangularYVector
            (
            );
            /**Sets  the Y vector for rectangular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetRectangularYVector
            (
                NXOpen::Direction * rectSpecifyVectorY /** rectspecifyvectory */ 
            );
            /**Returns  the total number of insert along Y. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int TotalAlongY
            (
            );
            /**Sets  the total number of insert along Y. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTotalAlongY
            (
                int totalNumberY /** totalnumbery */ 
            );
            /**Returns  the offset value along Y. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double OffsetY
            (
            );
            /**Sets  the offset value along Y. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetY
            (
                double offsetY /** offsety */ 
            );
            /**Returns  the insert to do circular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * CircularInsert
            (
            );
            /**Returns  the circular array operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InsertAuxiliaryBuilder::CircOperationTypes CircularOperation
            (
            );
            /**Sets  the circular array operation. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCircularOperation
            (
                NXOpen::Tooling::InsertAuxiliaryBuilder::CircOperationTypes circOperationType /** circoperationtype */ 
            );
            /**Returns  the option to delete all components in circular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CircDeleteAllComponents
            (
            );
            /**Sets  the option to delete all components in circular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCircDeleteAllComponents
            (
                bool circDeleteAllComponents /** circdeleteallcomponents */ 
            );
            /**Returns  the specified vector for defining circular array axis. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * CircularVector
            (
            );
            /**Sets  the specified vector for defining circular array axis. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCircularVector
            (
                NXOpen::Direction * circSpecifyVector /** circspecifyvector */ 
            );
            /**Returns  the total number of insert for circular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int TotalNumber
            (
            );
            /**Sets  the total number of insert for circular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTotalNumber
            (
                int totalNumber /** totalnumber */ 
            );
            /**Returns  the offset angle of circular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double OffsetAngle
            (
            );
            /**Sets  the offset angle of circular array. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetOffsetAngle
            (
                double offsetAngle /** offsetangle */ 
            );
            /**Returns  the insert objects to be deleted. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * InsertsToDelete
            (
            );
            /**Returns  the faces of those to be deleted shanks. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ShanksToDelete
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
