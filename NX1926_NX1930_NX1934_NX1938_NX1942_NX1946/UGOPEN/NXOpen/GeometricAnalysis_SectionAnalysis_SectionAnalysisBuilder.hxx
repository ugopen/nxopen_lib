#ifndef NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_SECTIONANALYSIS_SECTIONANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_SectionAnalysis_SectionAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_CircularGridBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_QuadrilateralGridBuilder.hxx>
#include <NXOpen/GeometricAnalysis_SectionAnalysis_TriangularGridBuilder.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class SectionAnalysisBuilder;
        }
    }
    class Builder;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class CircularGridBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class QuadrilateralGridBuilder;
        }
    }
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class TriangularGridBuilder;
        }
    }
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    class SelectTaggedObjectList;
    namespace GeometricAnalysis
    {
        namespace SectionAnalysis
        {
            class _SectionAnalysisBuilderBuilder;
            class SectionAnalysisBuilderImpl;
            /** Represents a @link NXOpen::GeometricAnalysis::SectionAnalysisObject NXOpen::GeometricAnalysis::SectionAnalysisObject@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisBuilder  NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateSectionAnalysisBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            CalculationMethod </term> <description> 
             
            Curvature </description> </item> 

            <item><term> 
             
            CircularGrid.CircularFrame.AnchorAttachment </term> <description> 
             
            None </description> </item> 

            <item><term> 
             
            CircularGrid.CircularFrame.Subtype </term> <description> 
             
            Arbitrary </description> </item> 

            <item><term> 
             
            CircularGrid.Spacing.BoundSections1 </term> <description> 
             
            True </description> </item> 

            <item><term> 
             
            CircularGrid.Spacing.BoundSections2 </term> <description> 
             
            True </description> </item> 

            <item><term> 
             
            CircularGrid.Spacing.Interval1 </term> <description> 
             
            45.0 </description> </item> 

            <item><term> 
             
            CircularGrid.Spacing.Interval2 </term> <description> 
             
            50.0 (millimeters part), 2.0 (inches part) </description> </item> 

            <item><term> 
             
            CircularGrid.Spacing.LockInterval1 </term> <description> 
             
            False </description> </item> 

            <item><term> 
             
            CircularGrid.Spacing.LockInterval2 </term> <description> 
             
            False </description> </item> 

            <item><term> 
             
            CircularGrid.Spacing.SectionNumber1 </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            CircularGrid.Spacing.SectionNumber2 </term> <description> 
             
            5 </description> </item> 

            <item><term> 
             
            CircularGrid.SpecifiedPlane.Plane </term> <description> 
             
            View </description> </item> 

            <item><term> 
             
            NeedleDirection </term> <description> 
             
            Outside </description> </item> 

            <item><term> 
             
            Output </term> <description> 
             
            AnalysisObject </description> </item> 

            <item><term> 
             
            QuadrilateralGrid.QuadrilateralFrame.AnchorAttachment </term> <description> 
             
            None </description> </item> 

            <item><term> 
             
            QuadrilateralGrid.QuadrilateralFrame.Subtype </term> <description> 
             
            Arbitrary </description> </item> 

            <item><term> 
             
            ScalingMethod </term> <description> 
             
            Linear </description> </item> 

            <item><term> 
             
            ShowInflectionPoints </term> <description> 
             
            False </description> </item> 

            <item><term> 
             
            ShowPeakPoints </term> <description> 
             
            False </description> </item> 

            <item><term> 
             
            ShowSectionLength </term> <description> 
             
            False </description> </item> 

            <item><term> 
             
            TriangularGrid.TriangularFrame.AnchorAttachment </term> <description> 
             
            None </description> </item> 

            <item><term> 
             
            TriangularGrid.TriangularFrame.Subtype </term> <description> 
             
            Arbitrary </description> </item> 

            <item><term> 
             
            Type </term> <description> 
             
            Parallel </description> </item> 

            </list> 

             <br>  Created in NX6.0.0.  <br>  
            */
            class NXOPENCPP_GEOMETRICANALYSISEXPORT  SectionAnalysisBuilder : public NXOpen::Builder
            {
                /** Represents the sectioning types */
                public: enum Types
                {
                    TypesParallel/** Parallel Planes */,
                    TypesIsoparametric/** Isoparametric */,
                    TypesAlongCurve/** Along Curve */,
                    TypesQuadrilateral/** Quadrilateral */,
                    TypesTriangular/** Triangular */,
                    TypesCircular/** Circular */
                };

                /** The output options */
                public: enum OutputType
                {
                    OutputTypeAnalysisObject/** Analysis Object */,
                    OutputTypeSectionCurves/** section curves */,
                    OutputTypeBoth/** Both Analysis Object and section curves */
                };

                /** The needle direction */
                public: enum NeedleDirectionType
                {
                    NeedleDirectionTypeInside/** Inside */,
                    NeedleDirectionTypeOutside/** Outside */
                };

                /** The calculation method */
                public: enum CalculationMethodType
                {
                    CalculationMethodTypeCurvature/** Curvature */,
                    CalculationMethodTypeRadiusofCurvature/** Radius of curvature */
                };

                /** The scaling method */
                public: enum ScalingMethodType
                {
                    ScalingMethodTypeLinear/** Linear */,
                    ScalingMethodTypeLogarithmic/** Logarithmic */
                };

                private: SectionAnalysisBuilderImpl * m_sectionanalysisbuilder_impl;
                private: friend class  _SectionAnalysisBuilderBuilder;
                protected: SectionAnalysisBuilder();
                public: ~SectionAnalysisBuilder();
                /**Returns  the sectioning type 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::Types Type
                (
                );
                /**Sets  the sectioning type 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetType
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::Types type /** type */ 
                );
                /**Returns  the references (faces or faceted bodies) 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::SelectTaggedObjectList * References
                (
                );
                /**Returns  the quadrilateral grid. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::TypesQuadrilateral NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::TypesQuadrilateral@endlink  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::QuadrilateralGridBuilder * QuadrilateralGrid
                (
                );
                /**Returns  the triangular grid. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::TypesTriangular NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::TypesTriangular@endlink  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::TriangularGridBuilder * TriangularGrid
                (
                );
                /**Returns  the circular grid. 
                                Only used when type is @link NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::TypesCircular NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::TypesCircular@endlink  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::CircularGridBuilder * CircularGrid
                (
                );
                /**Returns  the comb options 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: NXOpen::GeometricUtilities::CombOptionsBuilder * CombOptions
                (
                );
                /**Returns  the flag to show the peak points of the sections 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowPeakPoints
                (
                );
                /**Sets  the flag to show the peak points of the sections 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowPeakPoints
                (
                    bool showPeakPoints /** showpeakpoints */ 
                );
                /**Returns  the flag to show the inflection points of planar sections 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowInflectionPoints
                (
                );
                /**Sets  the flag to show the inflection points of planar sections 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowInflectionPoints
                (
                    bool showInflectionPoints /** showinflectionpoints */ 
                );
                /**Returns  the flag to show the section length labels 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: bool ShowSectionLength
                (
                );
                /**Sets  the flag to show the section length labels 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetShowSectionLength
                (
                    bool showSectionLength /** showsectionlength */ 
                );
                /**Returns  the output 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::OutputType Output
                (
                );
                /**Sets  the output 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetOutput
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::OutputType output /** output */ 
                );
                /**Returns  the needle direction 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::NeedleDirectionType NeedleDirection
                (
                );
                /**Sets  the needle direction 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetNeedleDirection
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::NeedleDirectionType needleDirection /** needledirection */ 
                );
                /**Returns  the calculation method 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::CalculationMethodType CalculationMethod
                (
                );
                /**Sets  the calculation method 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetCalculationMethod
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::CalculationMethodType calculationMethod /** calculationmethod */ 
                );
                /**Returns  the scaling method 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::ScalingMethodType ScalingMethod
                (
                );
                /**Sets  the scaling method 
                 <br>  Created in NX7.0.0.  <br>  
                 <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
                public: void SetScalingMethod
                (
                    NXOpen::GeometricAnalysis::SectionAnalysis::SectionAnalysisBuilder::ScalingMethodType scalingMethod /** scalingmethod */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
