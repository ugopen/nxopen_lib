#ifndef NXOpen_PCBEXCHANGE_ECADIMPORTBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_ECADIMPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_EcadImportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PcbExchange_EntityFilter.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class EcadImportBuilder;
    }
    class Builder;
    class Expression;
    namespace PcbExchange
    {
        class EntityFilter;
    }
    namespace PcbExchange
    {
        class _EcadImportBuilderBuilder;
        class EcadImportBuilderImpl;
        /** Represents a @link NXOpen::PcbExchange::EcadImportBuilder NXOpen::PcbExchange::EcadImportBuilder@endlink   <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreateEcadImportBuilder  NXOpen::PcbExchange::Manager::CreateEcadImportBuilder @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  EcadImportBuilder : public NXOpen::Builder
        {
            /** This enum defines the Ecad location options. */
            public: enum EcadLocationEnum
            {
                EcadLocationEnumOs/** os */ ,
                EcadLocationEnumTc/** tc */ 
            };

            /** This enum defines the import option. */
            public: enum ImportOptionEnum
            {
                ImportOptionEnumAll/** all */ ,
                ImportOptionEnumBoardOnly/** board only */ 
            };

            private: EcadImportBuilderImpl * m_ecadimportbuilder_impl;
            private: friend class  _EcadImportBuilderBuilder;
            protected: EcadImportBuilder();
            public: ~EcadImportBuilder();
            /**Returns  the ecad from 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EcadImportBuilder::EcadLocationEnum EcadLocation
            (
            );
            /**Sets  the ecad from 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetEcadLocation
            (
                NXOpen::PcbExchange::EcadImportBuilder::EcadLocationEnum ecadLocation /** ecadlocation */ 
            );
            /**Returns  the odb folder selection option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsOdbFolder
            (
            );
            /**Sets  the odb folder selection option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOdbFolder
            (
                bool isOdbFolder /** isodbfolder */ 
            );
            /**Returns  the board folder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardFolder
            (
            );
            /**Sets  the board folder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetBoardFolder
            (
                const NXString & boardFolder /** boardfolder */ 
            );
            /**Sets  the board folder 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetBoardFolder
            (
                const char * boardFolder /** boardfolder */ 
            );
            /**Returns  the board file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardFile
            (
            );
            /**Sets  the board file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetBoardFile
            (
                const NXString & boardFile /** boardfile */ 
            );
            /**Sets  the board file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetBoardFile
            (
                const char * boardFile /** boardfile */ 
            );
            /**Returns  the library file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LibraryFile
            (
            );
            /**Sets  the library file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetLibraryFile
            (
                const NXString & libraryFile /** libraryfile */ 
            );
            /**Sets  the library file 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetLibraryFile
            (
                const char * libraryFile /** libraryfile */ 
            );
            /**Returns  the use current work part option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseCurrentWorkPart
            (
            );
            /**Sets  the use current work part option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetUseCurrentWorkPart
            (
                bool useCurrentWorkPart /** usecurrentworkpart */ 
            );
            /**Returns  the ecad number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EcadNumber
            (
            );
            /**Sets  the ecad number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetEcadNumber
            (
                const NXString & ecadNumber /** ecadnumber */ 
            );
            /**Sets  the ecad number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetEcadNumber
            (
                const char * ecadNumber /** ecadnumber */ 
            );
            /**Returns  the ecad revision 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EcadRevision
            (
            );
            /**Sets  the ecad revision 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetEcadRevision
            (
                const NXString & ecadRevision /** ecadrevision */ 
            );
            /**Sets  the ecad revision 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetEcadRevision
            (
                const char * ecadRevision /** ecadrevision */ 
            );
            /**Returns  the output part 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputPart
            (
            );
            /**Sets  the output part 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOutputPart
            (
                const NXString & outputPart /** outputpart */ 
            );
            /**Sets  the output part 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetOutputPart
            (
                const char * outputPart /** outputpart */ 
            );
            /**Returns  the part number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartNumber
            (
            );
            /**Sets  the part number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetPartNumber
            (
                const NXString & partNumber /** partnumber */ 
            );
            /**Sets  the part number 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetPartNumber
            (
                const char * partNumber /** partnumber */ 
            );
            /**Returns  the part revision 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartRevision
            (
            );
            /**Sets  the part revision 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetPartRevision
            (
                const NXString & partRevision /** partrevision */ 
            );
            /**Sets  the part revision 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetPartRevision
            (
                const char * partRevision /** partrevision */ 
            );
            /**Returns  the part name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartName
            (
            );
            /**Sets  the part name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetPartName
            (
                const NXString & partName /** partname */ 
            );
            /**Sets  the part name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            void SetPartName
            (
                const char * partName /** partname */ 
            );
            /**Returns  the import option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EcadImportBuilder::ImportOptionEnum ImportOption
            (
            );
            /**Sets  the import option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetImportOption
            (
                NXOpen::PcbExchange::EcadImportBuilder::ImportOptionEnum importOption /** importoption */ 
            );
            /**Returns  the only use existing components option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool OnlyUseExistingComponents
            (
            );
            /**Sets  the only use existing components option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOnlyUseExistingComponents
            (
                bool onlyUseExistingComp /** onlyuseexistingcomp */ 
            );
            /**Returns  the override board thickness option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool OverrideBoardThickness
            (
            );
            /**Sets  the override board thickness option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetOverrideBoardThickness
            (
                bool overrideBoardThickness /** overrideboardthickness */ 
            );
            /**Returns  the board thickness 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoardThickness
            (
            );
            /**Returns  the use entity filter option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseEntityFilter
            (
            );
            /**Sets  the use entity filter option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetUseEntityFilter
            (
                bool useEntityFilter /** useentityfilter */ 
            );
            /**Returns  the show the log option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowLog
            (
            );
            /**Sets  the show the log option 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetShowLog
            (
                bool showLog /** showlog */ 
            );
            /** Method to get EntityFilter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EntityFilter * GetEntityFilter
            (
            );
            /** Method to set EntityFilter 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetEntityFilter
            (
                NXOpen::PcbExchange::EntityFilter * filter /** filter */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
