#ifndef NXOpen_CAE_XYPLOT_PLOT_HXX_INCLUDED
#define NXOpen_CAE_XYPLOT_PLOT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Xyplot_Plot.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_XyplotDataTypes.hxx>
#include <NXOpen/CAE_Xyplot_BasicModel.hxx>
#include <NXOpen/CAE_Xyplot_Graph.hxx>
#include <NXOpen/CAE_Xyplot_LegendTable.hxx>
#include <NXOpen/CAE_Xyplot_NoteModel.hxx>
#include <NXOpen/CAE_Xyplot_PlotGraphTemplate.hxx>
#include <NXOpen/CAE_Xyplot_BaseModel.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Xyplot
        {
            class Plot;
        }
    }
    namespace CAE
    {
        namespace FTK
        {
            class IApplicationData;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class BaseModel;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class BasicModel;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class Graph;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class LegendTable;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class NoteModel;
        }
    }
    namespace CAE
    {
        namespace Xyplot
        {
            class PlotGraphTemplate;
        }
    }
    class TaggedObject;
    namespace CAE
    {
        namespace Xyplot
        {
            class _PlotBuilder;
            class PlotImpl;
            /** Manages the plot template  <br> Not support KF.  <br> 
             <br>  Created in NX7.5.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Plot : public NXOpen::CAE::Xyplot::BaseModel
            {
                private: PlotImpl * m_plot_impl;
                private: friend class  _PlotBuilder;
                protected: Plot();
                public: ~Plot();
                /** Returns the count of plotted records on the plot graph.  @return  Record count 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetRecordCount
                (
                );
                /** Returns application specific data associated to a record. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::FTK::IApplicationData * GetApplicationDataOfRecord
                (
                    int recordIndex /** The record index starts form 0 to record count -1. Get record count from @link Plot::GetRecordCount Plot::GetRecordCount@endlink  */
                );
                /** Saves plotted records on a graph to an afu file.
                               The record index is between 0 and the value returned from
                               @link NXOpen::CAE::Xyplot::Plot::GetRecordCount NXOpen::CAE::Xyplot::Plot::GetRecordCount@endlink . 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void SaveRecords
                (
                    const std::vector<int> & recordIndexes /** The index of records to be saved */,
                    std::vector<NXString> & recordNames /** The output record names */,
                    const NXString & outputFileName /** The destination file with full file name.
                                                                                            The file suffix must be ".afu". */,
                    bool reportError /** reporterror */ 
                );
                /** Saves plotted records on a graph to an afu file.
                               The record index is between 0 and the value returned from
                               @link NXOpen::CAE::Xyplot::Plot::GetRecordCount NXOpen::CAE::Xyplot::Plot::GetRecordCount@endlink . 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                void SaveRecords
                (
                    const std::vector<int> & recordIndexes /** The index of records to be saved */,
                    std::vector<NXString> & recordNames /** The output record names */,
                    const char * outputFileName /** The destination file with full file name.
                                                                                            The file suffix must be ".afu". */,
                    bool reportError /** reporterror */ 
                );
                /** Gets the window device and view index of the plot graph.  @return  the device of window 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetDeviceAndViewIndex
                (
                    int* viewIndex /** the index of view */
                );
                /** Gets all graphs on the plot. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetGraphs
                (
                    std::vector<NXOpen::CAE::Xyplot::Graph *> & graphs /** Graph objects */
                );
                /**Returns  the sub-graph count in a stacked plot. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: int SubGraphCountInStack
                (
                );
                /**Returns  the plot template 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Xyplot::PlotGraphTemplate * PlotTemplate
                (
                );
                /** Saves plotted records on a plot graph to a CSV file. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void SaveRecordsToCsv
                (
                    const std::vector<int> & recordIndex /** the indexes of records to be saved */,
                    std::vector<NXString> & recordNames /** recordnames */ ,
                    const NXString & csvFileName /** the destination CSV file name */,
                    bool isWriteHeader /** iswriteheader */ 
                );
                /** Saves plotted records on a plot graph to a CSV file. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                void SaveRecordsToCsv
                (
                    const std::vector<int> & recordIndex /** the indexes of records to be saved */,
                    std::vector<NXString> & recordNames /** recordnames */ ,
                    const char * csvFileName /** the destination CSV file name */,
                    bool isWriteHeader /** iswriteheader */ 
                );
                /** Creates a note on the plot 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::Xyplot::NoteModel * CreateNote
                (
                    std::vector<NXString> & lines /** lines */ ,
                    const NXOpen::Point2d & textPosition /** textposition */ 
                );
                /** Gets all notes on the plot 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::CAE::Xyplot::NoteModel *> GetNotes
                (
                );
                /** Gets the titles on the plot. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::CAE::Xyplot::BasicModel *> GetTitles
                (
                );
                /** Gets the bounding box of the plot view. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetViewBoundingBox
                (
                    NXOpen::Point3d* leftBottom /** leftbottom */ ,
                    NXOpen::Point3d* rightTop /** righttop */ 
                );
                /**  @brief Writes the template setting of plot to template file. 

                 
                            
                            <ol>
                            <li>
                            If input file is a simple file: 
                             <br> 
                            If environment variable of UGII_USER_DIR is not set, it will be written into file under user environment directory. 
                             <br> 
                             <br> 
                            If environment variable of UGII_USER_DIR is not set, it will write to write the template setting.
                             <br> 
                            </li>
                            <li>
                            If input file is a file with full path, the template settings will be written into the file.
                            </li>
                            </ol>
                            
                             @return  the file name with full path 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString WriteToTemplateFile
                (
                    const NXString & inputTemplateFile /** simple name or file name with full path */
                );
                /**  @brief Writes the template setting of plot to template file. 

                 
                            
                            <ol>
                            <li>
                            If input file is a simple file: 
                             <br> 
                            If environment variable of UGII_USER_DIR is not set, it will be written into file under user environment directory. 
                             <br> 
                             <br> 
                            If environment variable of UGII_USER_DIR is not set, it will write to write the template setting.
                             <br> 
                            </li>
                            <li>
                            If input file is a file with full path, the template settings will be written into the file.
                            </li>
                            </ol>
                            
                             @return  the file name with full path 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                NXString WriteToTemplateFile
                (
                    const char * inputTemplateFile /** simple name or file name with full path */
                );
                /** Gets the visibility of specified record. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: bool GetRecordDisplayVisibility
                (
                    int recordIndex /** the index of specied record */
                );
                /** Sets the visibility of specified record. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetRecordDisplayVisibility
                (
                    int recordIndex /** the index of specied record */,
                    bool visibility /** visibility */ 
                );
                /** Gets the models by model type. 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::CAE::Xyplot::BasicModel *> GetModels
                (
                    NXOpen::CAE::Xyplot::ModelType type /** type */ 
                );
                /**  @brief  Fits the display view on a reasonable region. 

                  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void FitView
                (
                );
                /**  @brief  Deletes the nth record. 

                 
                            
                            The record index must be greater or equal to 0, and less than @link CAE::Xyplot::Plot::GetRecordCount CAE::Xyplot::Plot::GetRecordCount@endlink 
                             <br> 
                            <b> Procedure of deleting records from plot fully:</b>
                            <ol>
                            <li>Call this method to delete record data from plot</li>
                            <li>Call @link CAE::Xyplot::Plot::CommitRecordsChange CAE::Xyplot::Plot::CommitRecordsChange@endlink  to precess record data change and update data model</li>
                            <li>Call @link CAE::Xyplot::BaseModel::UpdateDisplay CAE::Xyplot::BaseModel::UpdateDisplay@endlink  to regenerate display to reflect data change</li>
                            <li>Optionally call @link CAE::Xyplot::Plot::FitView CAE::Xyplot::Plot::FitView@endlink  to make display fit the view;it is only required when the plot display boundary is changed</li>
                            </ol>
                             <br> 
                            
                            
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void DeleteRecord
                (
                    int recordIndex /** recordindex */ 
                );
                /**  @brief  Deletes all records. 

                 
                            
                            Higher performance to delete all records from plot than deleting records one by one
                             <br> 
                            <b> Procedure of deleting records from plot fully:</b>
                            <ol>
                            <li>Call this method to delete all record data from plot</li>
                            <li>Call @link CAE::Xyplot::Plot::CommitRecordsChange CAE::Xyplot::Plot::CommitRecordsChange@endlink  to precess record data change and update data model</li>
                            <li>Call @link CAE::Xyplot::BaseModel::UpdateDisplay CAE::Xyplot::BaseModel::UpdateDisplay@endlink  to regenerate display to reflect data change</li>
                            <li>Optionally call @link CAE::Xyplot::Plot::FitView CAE::Xyplot::Plot::FitView@endlink  to make display fit the view;it is only required when the plot display boundary is changed</li>
                            </ol>
                             <br> 
                            
                            
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void DeleteAllRecords
                (
                );
                /**  @brief  Accepts record changed and process data to update data model 

                 
                                 This method is only to update data model, it needs call @link CAE::Xyplot::BaseModel::UpdateDisplay CAE::Xyplot::BaseModel::UpdateDisplay@endlink  to update display to reflect data change.
                                
                            
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void CommitRecordsChange
                (
                );
                /** Gets the legend table models on the plot.  @return  Legend Table Objects 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::CAE::Xyplot::LegendTable *> GetLegendTables
                (
                );
                /** Gets the post environment settings in the plot.  @return  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::TaggedObject * GetPostEnvironmentSettings
                (
                );
                /** Gets calculation legend table models on the plot.  @return  Legend Table Objects 
                 <br>  Created in NX1899.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<NXOpen::CAE::Xyplot::LegendTable *> GetCalculationLegendTables
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
