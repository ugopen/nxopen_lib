#ifndef NXOpen_FEATURES_COATINGS_COATINGBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_COATINGS_COATINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_Coatings_CoatingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_Coatings_FeatureParmsBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace Coatings
        {
            class CoatingBuilder;
        }
    }
    class Expression;
    namespace Features
    {
        namespace Coatings
        {
            class FeatureParmsBuilder;
        }
    }
    class NXObject;
    class ScCollector;
    namespace Features
    {
        namespace Coatings
        {
            class _CoatingBuilderBuilder;
            class CoatingBuilderImpl;
            /**
                     * Defines a builder for creating @link Features::Coatings::Coating Features::Coatings::Coating@endlink  objects,
                     * which are used by the Coatings application.
                      <br> To create a new instance of this class, use @link NXOpen::Features::CoatingsCollection::CreateCoatingsCoatingBuilder  NXOpen::Features::CoatingsCollection::CreateCoatingsCoatingBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            DistanceTolerance </term> <description> 
             
            0.0254 </description> </item> 

            <item><term> 
             
            IsSolidBody </term> <description> 
             
            false </description> </item> 

            </list> 

             <br>  Created in NX1926.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  CoatingBuilder : public NXOpen::Features::Coatings::FeatureParmsBuilder
            {
                private: CoatingBuilderImpl * m_coatingbuilder_impl;
                private: friend class  _CoatingBuilderBuilder;
                protected: CoatingBuilder();
                public: ~CoatingBuilder();
                /**Returns  the name of the coating. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Name
                (
                );
                /**Sets  the name of the coating. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetName
                (
                    const NXString & name /** name */ 
                );
                /**Sets  the name of the coating. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                void SetName
                (
                    const char * name /** name */ 
                );
                /**Returns  the faces that serve as the basis upon which coating surfaces are determined. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * Faces
                (
                );
                /**Returns  the bounding curves that will determine how to divide the selected faces. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * Curves
                (
                );
                /**Returns  the PNT3_t that will determine how to use the selected curves to divide the selected faces. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXObject * Point
                (
                );
                /**Sets  the PNT3_t that will determine how to use the selected curves to divide the selected faces. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetPoint
                (
                    NXOpen::NXObject * point /** point */ 
                );
                /**Returns  true if the coating feature is to be created with solid bodies, false if the coating feature is to be created with sheet bodies.  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsSolidBody
                (
                );
                /**Sets  true if the coating feature is to be created with solid bodies, false if the coating feature is to be created with sheet bodies.  
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetSolidBody
                (
                    bool isSolidBody /** issolidbody */ 
                );
                /**Returns  the thickness of the resultant coating in metres. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Thickness
                (
                );
                /**Returns  the process note that the user is assigning to the coating. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString ProcessNote
                (
                );
                /**Sets  the process note that the user is assigning to the coating. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                public: void SetProcessNote
                (
                    const NXString & processNote /** processnote */ 
                );
                /**Sets  the process note that the user is assigning to the coating. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_coatings (" Coatings") */
                void SetProcessNote
                (
                    const char * processNote /** processnote */ 
                );
                /**Returns  the name of the material that will be used by the Advanced Studio rendering engine. 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString VisualMaterialName
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
