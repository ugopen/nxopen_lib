#ifndef NXOpen_CAE_ELEMENTASSOCIATEDDATAUTILS_HXX_INCLUDED
#define NXOpen_CAE_ELEMENTASSOCIATEDDATAUTILS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ElementAssociatedDataUtils.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ElementAssociatedDataUtils;
    }
    namespace CAE
    {
        class NodeElementManager;
    }
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        class PhysicalPropertyTable;
    }
    class CoordinateSystem;
    class Direction;
    namespace CAE
    {
         /** Used to specify a term of the Degree of freedom. */

        struct DofTerm
        {
            public: /** Node element connectivity index. */int NodeIndex;
            public: /** Degree of Freedom Component. Integer 1 through 6. */int DofComponent;
            public: /** Coefficient. */double Coefficient;
            public: DofTerm() :
                NodeIndex(),
                DofComponent(),
                Coefficient()
            {
            }
            /** Constructor for the DofTerm struct. */ 
            public: DofTerm(int nodeIndexInitial /** Node element connectivity index. */, 
                    int dofComponentInitial /** Degree of Freedom Component. Integer 1 through 6. */, 
                    double coefficientInitial /** Coefficient. */) :
                NodeIndex(nodeIndexInitial),
                DofComponent(dofComponentInitial),
                Coefficient(coefficientInitial)
            {
            }
        };

         /** Used to specify a term of the component degree of freedom value. */

        struct ComponentDofsTerm
        {
            public: /** Node element connectivity index. */int NodeIndex;
            public: /** Degrees of Freedom Component.  Any combination of the integers 1 though 6 or Null(-7777) */int ComponentDofs;
            public: ComponentDofsTerm() :
                NodeIndex(),
                ComponentDofs()
            {
            }
            /** Constructor for the ComponentDofsTerm struct. */ 
            public: ComponentDofsTerm(int nodeIndexInitial /** Node element connectivity index. */, 
                    int componentDofsInitial /** Degrees of Freedom Component.  Any combination of the integers 1 though 6 or Null(-7777) */) :
                NodeIndex(nodeIndexInitial),
                ComponentDofs(componentDofsInitial)
            {
            }
        };

        /** Indicates which material orientation method to use. */
        enum CaeElementAssociatedDataUtilsMatOrientationMethod
        {
            CaeElementAssociatedDataUtilsMatOrientationMethodNone/** No material orientation specified. */,
            CaeElementAssociatedDataUtilsMatOrientationMethodOriAngle/** Specify an angle to orient the material. */,
            CaeElementAssociatedDataUtilsMatOrientationMethodCoordinateSystem/** Use a coordinate system to orient the material. */,
            CaeElementAssociatedDataUtilsMatOrientationMethodCsysData/** Use coordinate system data to orient the material. */
        };

        /** Indicates which type of coordinate system to use if using coordinate system data to orient the material. */
        enum CaeElementAssociatedDataUtilsCsysDataType
        {
            CaeElementAssociatedDataUtilsCsysDataTypeCartesian/** Use cartesian coordinate system data to orient the material. */,
            CaeElementAssociatedDataUtilsCsysDataTypeCylindrical/** Use cylindrical coordinate system data to orient the material. */,
            CaeElementAssociatedDataUtilsCsysDataTypeSpherical/** Use spherical coordinate system data to orient the material. */
        };

        /** Indicates which vector choice to use. */
        enum CaeElementAssociatedDataUtilsVectorChoiceType
        {
            CaeElementAssociatedDataUtilsVectorChoiceTypeHorizontal/** The vector is defined to be horizontal. */,
            CaeElementAssociatedDataUtilsVectorChoiceTypeVertical/** The vector is defined to be vertical. */
        };

        /** Indicates which orientation coordinate csystem to use if using vector to define beam orientation.*/
        enum CaeElementAssociatedDataUtilsOrientationCsys
        {
            CaeElementAssociatedDataUtilsOrientationCsysAbsolute/** The orientation coordinate system is defined to be absolute. */,
            CaeElementAssociatedDataUtilsOrientationCsysNodal/** The orientation coordinate system is defined to be nodal displacement. */
        };

        /** Indicates which end release setting to use. */
        enum CaeElementAssociatedDataUtilsEndReleaseSetting
        {
            CaeElementAssociatedDataUtilsEndReleaseSettingOff/** End release set to off. */,
            CaeElementAssociatedDataUtilsEndReleaseSettingOn/** End release set to on. */
        };

        /** Indicates whether to set or clear end release settings. */
        enum CaeElementAssociatedDataUtilsEndReleaseState
        {
            CaeElementAssociatedDataUtilsEndReleaseStateSet/** Set end release values. */,
            CaeElementAssociatedDataUtilsEndReleaseStateClear/** Clear end release values. */
        };

        /** Indicates which orientation method to use */
        enum CaeElementAssociatedDataUtilsOrientationMethod
        {
            CaeElementAssociatedDataUtilsOrientationMethodNone/** No material orientation specified. */,
            CaeElementAssociatedDataUtilsOrientationMethodVector/** Use a vector to orient the element */,
            CaeElementAssociatedDataUtilsOrientationMethodCsystem/** Use a csystem to orient the element */,
            CaeElementAssociatedDataUtilsOrientationMethodNode/** Use a node to orient the element */,
            CaeElementAssociatedDataUtilsOrientationMethodCsystemData/** Use a csys data to orient the element */
        };

        /** Indicates which translational or rotational degree of freedom to use as component end */
        enum CaeElementAssociatedDataUtilsComponentEnd
        {
            CaeElementAssociatedDataUtilsComponentEndNone/** No Component End Specified */,
            CaeElementAssociatedDataUtilsComponentEndX/** X translational */,
            CaeElementAssociatedDataUtilsComponentEndY/** Y translational */,
            CaeElementAssociatedDataUtilsComponentEndZ/** Z translational */,
            CaeElementAssociatedDataUtilsComponentEndRx/** RX rotational */,
            CaeElementAssociatedDataUtilsComponentEndRy/** RY rotational */,
            CaeElementAssociatedDataUtilsComponentEndRz/** RZ rotational */
        };

        /** Indicates which coordindate system to be used to define beam section offsets */
        enum CaeElementAssociatedDataUtilsOffsetCsysChoice
        {
            CaeElementAssociatedDataUtilsOffsetCsysChoiceNodal/** The section offset coordindate system is nodal displacement. */,
            CaeElementAssociatedDataUtilsOffsetCsysChoiceElemental/** The section offset coordindate system is elemental */
        };

        /** Indicates if a rigid element dof is on or off */
        enum CaeElementAssociatedDataUtilsDof
        {
            CaeElementAssociatedDataUtilsDofOff/** off */ ,
            CaeElementAssociatedDataUtilsDofOn/** on */ 
        };

    }
    namespace CAE
    {
        class ElementAssociatedDataUtilsImpl;
        /**  @brief  Represents a system to access element associated data  

           <br> To obtain an instance of this class, refer to @link NXOpen::CAE::NodeElementManager  NXOpen::CAE::NodeElementManager @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ElementAssociatedDataUtils
        {
            private: ElementAssociatedDataUtilsImpl * m_elementassociateddatautils_impl;
            private: NXOpen::CAE::NodeElementManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ElementAssociatedDataUtils(NXOpen::CAE::NodeElementManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ElementAssociatedDataUtils();
            /** Returns constraint element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskConstraintEquationData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                   If false, the parameters that follow are ignored. */,
                std::vector<NXOpen::CAE::DofTerm> & terms /** Term of dof in the constraint equation. The first degree of freedom
                                                                                                                               in the array defines the dependent degree of freedom. */,
                double* constantTerm /** The constant term is the constant that the constraint equation equals.
                                                                                       This value is not used by all solvers. */
            );
            /** Sets constraint element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetConstraintEquationData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                const std::vector<NXOpen::CAE::DofTerm> & terms /** Term of dof in the constraint equation. The first degree of freedom
                                                                                                                                   in the array defines the dependent degree of freedom. */,
                double constantTerm /** The constant term is the constant that the constraint equation equals.
                                                                                     This value is not used by all solvers. */
            );
            /** Returns shell element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskShellData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                std::vector<double> & cornerNodeThicknesses /** Corner node thicknesses in units mm or in. */,
                std::vector<double> & cornerNodeGapValues /** Corner node gap values in units mm or in. */,
                double* zOffset /** Z offset value. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the shell element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsMatOrientationMethod* matOriMethod /** Material orientation method. */,
                NXOpen::CoordinateSystem ** coordinateSystem /** Coordinate system for orienting by coordinate system. */,
                double* matOriAngle /** Material orientation angle. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsCsysDataType* csysDataType /** Material orientation coordinate system type for csys data option. */,
                const NXOpen::Point3d & originPoint /** Material orientation csys data origin point. */,
                const NXOpen::Point3d & zAxisPoint /** Material orientation csys data point on z-axis. */,
                const NXOpen::Point3d & planePoint /** Material orientation csys data point in the x-z plane if cartesian csys or azimuthal origin plane if cylindrical/spherical csys. */,
                int* preferredLabel /** Preferred coordinate system label for csys data export. */
            );
            /** Sets shell element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetShellData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                const std::vector<double> & cornerNodeThicknesses /** Corner node thicknesses in units mm or in. */,
                const std::vector<double> & cornerNodeGapValues /** Corner node gap values in units mm or in. */,
                double zOffset /** Z offset value. */,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the shell element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsMatOrientationMethod matOriMethod /** Material orientation method. */,
                NXOpen::CoordinateSystem * coordinateSystem /** Coordinate system for orienting by coordinate system. */,
                double matOriAngle /** Material orientation angle. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsCsysDataType csysDataType /** Material orientation coordinate system type for csys data option. */,
                const NXOpen::Point3d & originPoint /** Material orientation csys data origin point. */,
                const NXOpen::Point3d & zAxisPoint /** Material orientation csys data point on z-axis. */,
                const NXOpen::Point3d & planePoint /** Material orientation csys data point in the x-z plane if cartesian csys or azimuthal origin plane if cylindrical/spherical csys. */,
                int preferredLabel /** Preferred coordinate system label for csys data export. */
            );
            /** Returns beam element associated data.
                    
             <br>  @deprecated Deprecated in NX1899.0.0.  Use @link NXOpen::CAE::ElementAssociatedDataUtils::AskBeamData2 NXOpen::CAE::ElementAssociatedDataUtils::AskBeamData2@endlink  instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1899.0.0.  Use NXOpen::CAE::ElementAssociatedDataUtils::AskBeamData2 instead.") void AskBeamData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                               If false, the parameters that follow are ignored. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the beam element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationMethod* oriMethod /** Orientation method. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsVectorChoiceType* vectorType /** Orientation vector type. Only used if orientation method is vector. */,
                NXOpen::Direction ** direction /** Orientation direction. Only used if orientation method is vector. */,
                NXOpen::CAE::FENode ** orientationNode /** Orientation node. Only used if orientation method is node. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseState* endAState /** Pin flags End A state */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF1 /** Pin flag End A for DOF 1. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF2 /** Pin flag End A for DOF 2. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF3 /** Pin flag End A for DOF 3. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF4 /** Pin flag End A for DOF 4. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF5 /** Pin flag End A for DOF 5. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF6 /** Pin flag End A for DOF 6. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseState* endBState /** Pin flags End B state */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF1 /** Pin flag End B for DOF 1. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF2 /** Pin flag End B for DOF 2. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF3 /** Pin flag End B for DOF 3. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF4 /** Pin flag End B for DOF 4. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF5 /** Pin flag End B for DOF 5. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF6 /** Pin flag End B for DOF 6. */,
                double* xOffsetEndA /** X offset to shear center in nodal displacement coordinate system for End A in units mm or in. */,
                double* yOffsetEndA /** Y offset to shear center in nodal displacement coordinate system for End A in units mm or in. */,
                double* zOffsetEndA /** Z offset to shear center in nodal displacement coordinate system for End A in units mm or in. */,
                double* xOffsetEndB /** X offset to shear center in nodal displacement coordinate system for End B in units mm or in. */,
                double* yOffsetEndB /** Y offset to shear center in nodal displacement coordinate system for End B in units mm or in. */,
                double* zOffsetEndB /** Z offset to shear center in nodal displacement coordinate system for End B in units mm or in. */
            );
            /** Returns beam element associated data.
                     
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskBeamData2
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the beam element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationMethod* oriMethod /** Orientation method. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationCsys* orientationCsysType /** Orientation coordinate system type. Only used if orientation method is vector. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsVectorChoiceType* vectorType /** Orientation vector type. Only used if orientation method is vector. */,
                NXOpen::Direction ** direction /** Orientation direction. Only used if orientation method is vector. */,
                NXOpen::CAE::FENode ** orientationNode /** Orientation node. Only used if orientation method is node. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseState* endAState /** Pin flags End A state */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF1 /** Pin flag End A for DOF 1. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF2 /** Pin flag End A for DOF 2. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF3 /** Pin flag End A for DOF 3. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF4 /** Pin flag End A for DOF 4. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF5 /** Pin flag End A for DOF 5. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndADOF6 /** Pin flag End A for DOF 6. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseState* endBState /** Pin flags End B state */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF1 /** Pin flag End B for DOF 1. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF2 /** Pin flag End B for DOF 2. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF3 /** Pin flag End B for DOF 3. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF4 /** Pin flag End B for DOF 4. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF5 /** Pin flag End B for DOF 5. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting* pinFlagEndBDOF6 /** Pin flag End B for DOF 6. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOffsetCsysChoice* offsetCSYSEndA /** Offset coordinate system type for End A. */,
                double* xOffsetEndA /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is X offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End A in units mm or in.
                                                                                                               For other solvers, this value is X offset regarding language-specific coordinate system for End A in units mm or in. */,
                double* yOffsetEndA /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is Y offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End A in units mm or in.
                                                                                                               For other solvers, this value is Y offset regarding language-specific coordinate system for End A in units mm or in. */,
                double* zOffsetEndA /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is Z offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End A in units mm or in.
                                                                                                               For other solvers, this value is Z offset regarding language-specific coordinate system for End A in units mm or in. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOffsetCsysChoice* offsetCSYSEndB /** Offset coordinate system type for End B. */,
                double* xOffsetEndB /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is X offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End B in units mm or in.
                                                                                                               For other solvers, this value is X offset regarding language-specific coordinate system for End B in units mm or in. */,
                double* yOffsetEndB /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is Y offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End B in units mm or in.
                                                                                                               For other solvers, this value is Y offset regarding language-specific coordinate system for End B in units mm or in. */,
                double* zOffsetEndB /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is Z offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End B in units mm or in.
                                                                                                               For other solvers, this value is Z offset regarding language-specific coordinate system for End B in units mm or in. */
            );
            /** Sets beam element associated data.
                    
             <br>  @deprecated Deprecated in NX1899.0.0.  Use @link NXOpen::CAE::ElementAssociatedDataUtils::SetBeamData2 NXOpen::CAE::ElementAssociatedDataUtils::SetBeamData2@endlink  which has 32 parameters instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1899.0.0.  Use NXOpen::CAE::ElementAssociatedDataUtils::SetBeamData2 which has 32 parameters instead.") void SetBeamData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the beam element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationMethod oriMethod /** Orientation method. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsVectorChoiceType vectorType /** Orientation vector type. Only used if orientation method is vector. */,
                NXOpen::Direction * direction /** Orientation direction. Only used if orientation method is vector. */,
                NXOpen::CAE::FENode * orientationNode /** Orientation node. Only used if orientation method is node. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseState endReleaseA /** End Release A state. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF1 /** Pin flag End A for DOF 1. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF2 /** Pin flag End A for DOF 2. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF3 /** Pin flag End A for DOF 3. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF4 /** Pin flag End A for DOF 4. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF5 /** Pin flag End A for DOF 5. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF6 /** Pin flag End A for DOF 6. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseState endReleaseB /** End Release B state. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF1 /** Pin flag End B for DOF 1. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF2 /** Pin flag End B for DOF 2. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF3 /** Pin flag End B for DOF 3. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF4 /** Pin flag End B for DOF 4. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF5 /** Pin flag End B for DOF 5. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF6 /** Pin flag End B for DOF 6. */,
                double xOffsetEndA /** X offset to shear center in nodal displacement coordinate system for End A in units mm or in. */,
                double yOffsetEndA /** Y offset to shear center in nodal displacement coordinate system for End A in units mm or in. */,
                double zOffsetEndA /** Z offset to shear center in nodal displacement coordinate system for End A in units mm or in. */,
                double xOffsetEndB /** X offset to shear center in nodal displacement coordinate system for End B in units mm or in. */,
                double yOffsetEndB /** Y offset to shear center in nodal displacement coordinate system for End B in units mm or in. */,
                double zOffsetEndB /** Z offset to shear center in nodal displacement coordinate system for End B in units mm or in. */
            );
            /** Sets beam element associated data.
                     
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetBeamData2
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the beam element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationMethod oriMethod /** Orientation method. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationCsys orientationCsysType /** Orientation coordinate system type. Only used if orientation method is vector. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsVectorChoiceType vectorType /** Orientation vector type. Only used if orientation method is vector. */,
                NXOpen::Direction * direction /** Orientation direction. Only used if orientation method is vector. */,
                NXOpen::CAE::FENode * orientationNode /** Orientation node. Only used if orientation method is node. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseState endReleaseA /** End Release A state. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF1 /** Pin flag End A for DOF 1. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF2 /** Pin flag End A for DOF 2. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF3 /** Pin flag End A for DOF 3. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF4 /** Pin flag End A for DOF 4. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF5 /** Pin flag End A for DOF 5. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndADOF6 /** Pin flag End A for DOF 6. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseState endReleaseB /** End Release B state. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF1 /** Pin flag End B for DOF 1. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF2 /** Pin flag End B for DOF 2. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF3 /** Pin flag End B for DOF 3. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF4 /** Pin flag End B for DOF 4. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF5 /** Pin flag End B for DOF 5. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsEndReleaseSetting pinFlagEndBDOF6 /** Pin flag End B for DOF 6. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOffsetCsysChoice offsetCSYSEndA /** Offset coordinate system type for End A. This value is only valid for solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran. */,
                double xOffsetEndA /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is X offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End A in units mm or in.
                                                                                                                   For other solvers, this value is X offset regarding language-specific coordinate system for End A in units mm or in. */,
                double yOffsetEndA /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is Y offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End A in units mm or in.
                                                                                                                   For other solvers, this value is Y offset regarding language-specific coordinate system for End A in units mm or in. */,
                double zOffsetEndA /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is Z offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End A in units mm or in.
                                                                                                                   For other solvers, this value is Z offset regarding language-specific coordinate system for End A in units mm or in. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOffsetCsysChoice offsetCSYSEndB /** Offset coordinate system type for End B. This value is only valid for solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran. */,
                double xOffsetEndB /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is X offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End B in units mm or in.
                                                                                                                   For other solvers, this value is X offset regarding language-specific coordinate system for End B in units mm or in. */,
                double yOffsetEndB /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is Y offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End B in units mm or in.
                                                                                                                   For other solvers, this value is Y offset regarding language-specific coordinate system for End B in units mm or in. */,
                double zOffsetEndB /** For solvers: NX Nastran, Simcenter Multiphysics and MSC Nastran, this value is Z offset to shear center regarding corresponding (either nodal or elemental) coordinate system for End B in units mm or in.
                                                                                                                   For other solvers, this value is Z offset regarding language-specific coordinate system for End B in units mm or in. */
            );
            /** Returns interpolation element associated data.
                      @return  Data that indicates the start of the degrees-of-freedom belonging to the m-set.
                                                                                                        This value is not used by all solvers. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<int> AskInterpolationData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                   If false, the parameters that follow are ignored. */,
                std::vector<NXOpen::CAE::DofTerm> & dofDataTerms /** Term of dof in the interpolation element.*/
            );
            /** Sets interpolation element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetInterpolationData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                const std::vector<NXOpen::CAE::DofTerm> & dofDataTerms /** Term of dof in the interpolation element.*/,
                const std::vector<int> & umData /** Data that indicates the start of the degrees-of-freedom belonging to the m-set.
                                                                                                 This value is not used by all solvers. */
            );
            /** Returns bushing element associated data.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskBushingData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the bushing element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationMethod* oriMethod /** Orientation method. */,
                NXOpen::Direction ** oriDirr /** Orientation vector. */,
                NXOpen::CoordinateSystem ** coordinateSystem /** Coordinate system for orienting by coordinate system. */,
                NXOpen::CAE::FENode ** oriNode /** Orientation node. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsCsysDataType* csysDataType /** Orientation coordinate system type for csys data option. */,
                const NXOpen::Point3d & originPoint /** Orientation csys data origin point. */,
                const NXOpen::Point3d & zAxisPoint /** Orientation csys data point on z-axis. */,
                const NXOpen::Point3d & planePoint /** Orientation csys data point in the x-z plane if cartesian csys or azimuthal origin plane if cylindrical/spherical csys. */,
                int* preferredLabel /** Preferred coordinate system label for csys data export. */
            );
            /** Sets bushing element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetBushingData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the bushing element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationMethod oriMethod /** Material orientation method. */,
                NXOpen::Direction * oriDirr /** Orientation vector. */,
                NXOpen::CoordinateSystem * coordinateSystem /** Coordinate system for orienting by coordinate system. */,
                NXOpen::CAE::FENode * oriNode /** Orientation node. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsCsysDataType csysDataType /** Orientation coordinate system type for csys data option. */,
                const NXOpen::Point3d & originPoint /** Orientation csys data origin point. */,
                const NXOpen::Point3d & zAxisPoint /** Orientation csys data point on z-axis. */,
                const NXOpen::Point3d & planePoint /** Orientation csys data point in the x-z plane if cartesian csys or azimuthal origin plane if cylindrical/spherical csys. */,
                int preferredLabel /** Preferred coordinate system label for csys data export. */
            );
            /** Returns gap element associated data.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskGapData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the gap element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationMethod* oriMethod /** Orientation method. */,
                NXOpen::Direction ** oriDirr /** Orientation vector. */,
                NXOpen::CoordinateSystem ** coordinateSystem /** Coordinate system for orienting by coordinate system. */,
                NXOpen::CAE::FENode ** oriNode /** Orientation node. */
            );
            /** Sets gap element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetGapData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the gap element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsOrientationMethod oriMethod /** Material orientation method. */,
                NXOpen::Direction * oriDirr /** Orientation vector. */,
                NXOpen::CoordinateSystem * coordinateSystem /** Coordinate system for orienting by coordinate system. */,
                NXOpen::CAE::FENode * oriNode /** Orientation node. */
            );
            /** Returns spring element associated data.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskSpringData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the spring element. */,
                double* stiffness /** Spring stiffness value either translational in units N/mm or lbf/in
                                                                                                                   or rotational in units N-mm or lbf-in. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsComponentEnd* componentEndA /** Component end A of the spring element (either translational or rotational). */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsComponentEnd* componentEndB /** Component end B of the spring element (either translational or rotational). */
            );
            /** Sets spring element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSpringData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the spring element. */,
                double stiffness /** Spring stiffness value either translational in units N/mm or lbf/in
                                                                                                                       or rotational in units N-mm or lbf-in. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsComponentEnd componentEndA /** Component end A of the spring element (either translational or rotational. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsComponentEnd componentEndB /** Component end B of the spring element (either translational or rotational. */
            );
            /** Returns lumped mass element associated data.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskLumpedMassData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                double* mass /** Mass value. */
            );
            /** Sets lumped mass element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetLumpedMassData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                double mass /** Mass value in units kg or lbm. */
            );
            /** Returns rigid element associated data.
                    
             <br>  @deprecated Deprecated in NX1847.0.0.  @link NXOpen::CAE::ElementAssociatedDataUtils::AskRigidData2 NXOpen::CAE::ElementAssociatedDataUtils::AskRigidData2@endlink  instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  NXOpen::CAE::ElementAssociatedDataUtils::AskRigidData2 instead.") void AskRigidData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                std::vector<NXOpen::CAE::CaeElementAssociatedDataUtilsDof> & dofs /** The 6 dofs of the rigid element.*/
            );
            /** Returns rigid element associated data.
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskRigidData2
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the rigid element. */,
                std::vector<NXOpen::CAE::CaeElementAssociatedDataUtilsDof> & dofs /** The 6 dofs of the rigid element.*/
            );
            /** Sets rigid element associated data.
                     
             <br>  @deprecated Deprecated in NX1847.0.0.  @link NXOpen::CAE::ElementAssociatedDataUtils::SetRigidData2 NXOpen::CAE::ElementAssociatedDataUtils::SetRigidData2@endlink  instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  NXOpen::CAE::ElementAssociatedDataUtils::SetRigidData2 instead.") void SetRigidData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                const std::vector<NXOpen::CAE::CaeElementAssociatedDataUtilsDof> & dofs /** The 6 dofs of the rigid element.*/
            );
            /** Sets rigid element associated data.
                     
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetRigidData2
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the rigid element. */,
                const std::vector<NXOpen::CAE::CaeElementAssociatedDataUtilsDof> & dofs /** The 6 dofs of the rigid element.*/
            );
            /** Returns damper element associated data.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskDamperData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                double* viscousDamping /** Viscous damping value either translational in units N-sec/mm or lbf-sec/in
                                                                                                                    or rotational in units mN-mm-sec or lbf-in-sec. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the damper element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsComponentEnd* componentEndA /** Component end A of the damper element (either translational or rotational). */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsComponentEnd* componentEndB /** Component end B of the damper element (either translational or rotational). */
            );
            /** Sets damper element associated data.
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetDamperData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                double viscousDamping /** Viscous damping value either translational in units N-sec/mm or lbf-sec/in
                                                                                                                    or rotational in units mN-mm-sec or lbf-in-sec. */,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the damper element. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsComponentEnd componentEndA /** Component end A of the damper element (either translational or rotational. */,
                NXOpen::CAE::CaeElementAssociatedDataUtilsComponentEnd componentEndB /** Component end B of the damper element (either translational or rotational. */
            );
            /** Returns solid element associated data.
                    
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskSolidData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                                   If false, the parameters that follow are ignored. */,
                NXOpen::CAE::PhysicalPropertyTable ** physicalPropertyTable /** Physical property table of the element. */
            );
            /** Sets solid element associated data.
                     
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSolidData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** Physical property table of the element. */
            );
            /** Returns rspline element associated data.
                    
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void AskRsplineData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                bool* hasAssociatedDataDefined /** True if element has element associated data defined.
                                                                                                   If false, the parameters that follow are ignored. */,
                std::vector<NXOpen::CAE::ComponentDofsTerm> & dofDataTerms /** Term of component dofs in the rspline element.*/
            );
            /** Sets rspline element associated data.
                     
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetRsplineData
            (
                NXOpen::CAE::FEElement * element /** element */ ,
                const std::vector<NXOpen::CAE::ComponentDofsTerm> & dofDataTerms /** Term of component dofs in the rspline element.*/
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
