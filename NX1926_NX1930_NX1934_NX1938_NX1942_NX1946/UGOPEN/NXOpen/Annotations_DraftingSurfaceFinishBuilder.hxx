#ifndef NXOpen_ANNOTATIONS_DRAFTINGSURFACEFINISHBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_DRAFTINGSURFACEFINISHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_DraftingSurfaceFinishBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_BaseSurfaceFinishBuilder.hxx>
#include <NXOpen/Annotations_ForeshorteningSymbolBuilder.hxx>
#include <NXOpen/Annotations_BaseSurfaceFinishBuilder.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class DraftingSurfaceFinishBuilder;
    }
    namespace Annotations
    {
        class BaseSurfaceFinish;
    }
    namespace Annotations
    {
        class BaseSurfaceFinishBuilder;
    }
    namespace Annotations
    {
        class ForeshorteningSymbolBuilder;
    }
    namespace Annotations
    {
        class _DraftingSurfaceFinishBuilderBuilder;
        class DraftingSurfaceFinishBuilderImpl;
        /** Represents a @link NXOpen::Annotations::DraftingSurfaceFinish NXOpen::Annotations::DraftingSurfaceFinish@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Annotations::DraftingSurfaceFinishCollection::CreateDraftingSurfaceFinishBuilder  NXOpen::Annotations::DraftingSurfaceFinishCollection::CreateDraftingSurfaceFinishBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  DraftingSurfaceFinishBuilder : public NXOpen::Annotations::BaseSurfaceFinishBuilder
        {
            /** the valid types of finish type*/
            public: enum FinishType
            {
                FinishTypeBasic/** Basic*/,
                FinishTypeModifier/** Modifier */,
                FinishTypeModifierAllAround/** Modifier, All Around*/,
                FinishTypeMaterialRemovalRequired/** Material Removal Required */,
                FinishTypeModifierMaterialRemovalRequired/** Modifier, Material Removal Required */,
                FinishTypeModifierMaterialRemovalRequiredAllAround/** Modifier, Material Removal Required, All Around*/,
                FinishTypeMaterialRemovalProhibited/** Material Removal Prohibited*/,
                FinishTypeModifierMaterialRemovalProhibited/** Modifier, Material Removal Prohibited*/,
                FinishTypeModifierMaterialRemovalProhibitedAllAround/** Modifier, Material Removal Prohibited, All Around*/
            };

            private: DraftingSurfaceFinishBuilderImpl * m_draftingsurfacefinishbuilder_impl;
            private: friend class  _DraftingSurfaceFinishBuilderBuilder;
            protected: DraftingSurfaceFinishBuilder();
            public: ~DraftingSurfaceFinishBuilder();
            /**Returns  the finish 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::DraftingSurfaceFinishBuilder::FinishType Finish
            (
            );
            /**Sets  the finish 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetFinish
            (
                NXOpen::Annotations::DraftingSurfaceFinishBuilder::FinishType finish /** finish */ 
            );
            /**Returns  the a1 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString A1
            (
            );
            /**Sets  the a1 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetA1
            (
                const NXString & a1 /** a1 */ 
            );
            /**Sets  the a1 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetA1
            (
                const char * a1 /** a1 */ 
            );
            /**Returns  the a2 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString A2
            (
            );
            /**Sets  the a2 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetA2
            (
                const NXString & a2 /** a2 */ 
            );
            /**Sets  the a2 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetA2
            (
                const char * a2 /** a2 */ 
            );
            /**Returns  the b 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString B
            (
            );
            /**Sets  the b 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetB
            (
                const NXString & b /** b */ 
            );
            /**Sets  the b 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetB
            (
                const char * b /** b */ 
            );
            /**Returns  the c 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString C
            (
            );
            /**Sets  the c 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetC
            (
                const NXString & c /** c */ 
            );
            /**Sets  the c 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetC
            (
                const char * c /** c */ 
            );
            /**Returns  the d 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString D
            (
            );
            /**Sets  the d 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetD
            (
                const NXString & d /** d */ 
            );
            /**Sets  the d 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetD
            (
                const char * d /** d */ 
            );
            /**Returns  the e 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString E
            (
            );
            /**Sets  the e 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetE
            (
                const NXString & e /** e */ 
            );
            /**Sets  the e 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetE
            (
                const char * e /** e */ 
            );
            /**Returns  the f1 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString F1
            (
            );
            /**Sets  the f1 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetF1
            (
                const NXString & f1 /** f1 */ 
            );
            /**Sets  the f1 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetF1
            (
                const char * f1 /** f1 */ 
            );
            /**Returns  the f2 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString F2
            (
            );
            /**Sets  the f2 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetF2
            (
                const NXString & f2 /** f2 */ 
            );
            /**Sets  the f2 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            void SetF2
            (
                const char * f2 /** f2 */ 
            );
            /**Returns  the tolerance type applicable only for all the 3 cases of finish type where Material Removal Required
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseSurfaceFinishBuilder::ToleranceOption ToleranceType
            (
            );
            /**Sets  the tolerance type applicable only for all the 3 cases of finish type where Material Removal Required
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetToleranceType
            (
                NXOpen::Annotations::BaseSurfaceFinishBuilder::ToleranceOption toleranceType /** tolerancetype */ 
            );
            /**Returns  the tolerance in case of bilateral tolerance type otherwise upper tolerance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Tolerance
            (
            );
            /**Sets  the tolerance in case of bilateral tolerance type otherwise upper tolerance 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTolerance
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the lower tolerance applicable for all the tolerance types other than Bilateral
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double LowerTolerance
            (
            );
            /**Sets  the lower tolerance applicable for all the tolerance types other than Bilateral
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLowerTolerance
            (
                double lowerTolerance /** lowertolerance */ 
            );
            /**Returns  the angle
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: double Angle
            (
            );
            /**Sets  the angle
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the invert Text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool InvertText
            (
            );
            /**Sets  the invert Text 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInvertText
            (
                bool invertText /** inverttext */ 
            );
            /**Returns  the parantheses. This method is deprecated. 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link NXOpen::Annotations::DraftingSurfaceFinishBuilder::Parentheses NXOpen::Annotations::DraftingSurfaceFinishBuilder::Parentheses @endlink and @link NXOpen::Annotations::DraftingSurfaceFinishBuilder::SetParentheses NXOpen::Annotations::DraftingSurfaceFinishBuilder::SetParentheses @endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use NXOpen::Annotations::DraftingSurfaceFinishBuilder::Parentheses NXOpen::Annotations::DraftingSurfaceFinishBuilder::Parentheses @endlink and @link NXOpen::Annotations::DraftingSurfaceFinishBuilder::SetParentheses NXOpen::Annotations::DraftingSurfaceFinishBuilder::SetParentheses @endlink  instead.") NXOpen::Annotations::BaseSurfaceFinishBuilder::ParanthesesType Parantheses
            (
            );
            /**Sets  the parantheses. This method is deprecated. 
             <br>  @deprecated Deprecated in NX8.0.0.  Use @link NXOpen::Annotations::DraftingSurfaceFinishBuilder::Parentheses NXOpen::Annotations::DraftingSurfaceFinishBuilder::Parentheses @endlink and @link NXOpen::Annotations::DraftingSurfaceFinishBuilder::SetParentheses NXOpen::Annotations::DraftingSurfaceFinishBuilder::SetParentheses @endlink  instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use NXOpen::Annotations::DraftingSurfaceFinishBuilder::Parentheses NXOpen::Annotations::DraftingSurfaceFinishBuilder::Parentheses @endlink and @link NXOpen::Annotations::DraftingSurfaceFinishBuilder::SetParentheses NXOpen::Annotations::DraftingSurfaceFinishBuilder::SetParentheses @endlink  instead.") void SetParantheses
            (
                NXOpen::Annotations::BaseSurfaceFinishBuilder::ParanthesesType paranthesesType /** paranthesestype */ 
            );
            /**Returns  the parentheses 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::BaseSurfaceFinishBuilder::ParenthesesType Parentheses
            (
            );
            /**Sets  the parentheses 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetParentheses
            (
                NXOpen::Annotations::BaseSurfaceFinishBuilder::ParenthesesType parenthesesType /** parenthesestype */ 
            );
            /**Returns  the invert symbol 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool InvertSymbol
            (
            );
            /**Sets  the invert symbol 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInvertSymbol
            (
                bool invertSymbol /** invertsymbol */ 
            );
            /**Returns  the single roughness value
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool SingleRoughnessValue
            (
            );
            /**Sets  the single roughness value
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSingleRoughnessValue
            (
                bool singleRoughnessValue /** singleroughnessvalue */ 
            );
            /** The drafting surface finish is inherited form existing drafting surface finish. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void InheritFrom
            (
                NXOpen::Annotations::BaseSurfaceFinish * inheritTag /** inherittag */ 
            );
            /**Returns  the foreshortening symbol builder 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::ForeshorteningSymbolBuilder * ForeshorteningSymbol
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
