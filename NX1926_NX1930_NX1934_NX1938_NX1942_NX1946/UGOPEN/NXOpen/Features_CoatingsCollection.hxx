#ifndef NXOpen_FEATURES_COATINGSCOLLECTION_HXX_INCLUDED
#define NXOpen_FEATURES_COATINGSCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_CoatingsCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class CoatingsCollection;
    }
    namespace Features
    {
        class FeatureCollection;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        namespace Coatings
        {
            class Coating;
        }
    }
    namespace Features
    {
        namespace Coatings
        {
            class CoatingBuilder;
        }
    }
    namespace Features
    {
        namespace Coatings
        {
            class CoatingRegion;
        }
    }
    namespace Features
    {
        namespace Coatings
        {
            class CoatingRegionBuilder;
        }
    }
    namespace Features
    {
        class CoatingsCollectionImpl;
        /** This class contains the factory method for creating Coatings feature builder.  <br> To obtain an instance of this class, refer to @link NXOpen::Features::FeatureCollection  NXOpen::Features::FeatureCollection @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  CoatingsCollection : public NXOpen::TaggedObjectCollection
        {
            private: CoatingsCollectionImpl * m_coatingscollection_impl;
            private: NXOpen::Features::FeatureCollection* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit CoatingsCollection(NXOpen::Features::FeatureCollection *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CoatingsCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Features::CoatingsCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Features::Feature *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Features::CoatingsCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_FEATURESEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_FEATURESEXPORT  void next();
                NXOpen::Features::CoatingsCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a @link NXOpen::Features::Coatings::CoatingBuilder NXOpen::Features::Coatings::CoatingBuilder@endlink   @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: NXOpen::Features::Coatings::CoatingBuilder * CreateCoatingsCoatingBuilder
            (
                NXOpen::Features::Coatings::Coating * coating /** @link NXOpen::Features::Coatings::Coating NXOpen::Features::Coatings::Coating@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Features::Coatings::CoatingRegionBuilder NXOpen::Features::Coatings::CoatingRegionBuilder@endlink   @return  
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_coatings (" Coatings") */
            public: NXOpen::Features::Coatings::CoatingRegionBuilder * CreateCoatingsCoatingRegionBuilder
            (
                NXOpen::Features::Coatings::CoatingRegion * coatingRegion /** @link NXOpen::Features::Coatings::CoatingRegion NXOpen::Features::Coatings::CoatingRegion@endlink  to be edited */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
