#ifndef NXOpen_CAM_OPERATIONCOLLECTION_HXX_INCLUDED
#define NXOpen_CAM_OPERATIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_OperationCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class OperationCollection;
    }
    namespace CAM
    {
        class CAMSetup;
    }
    namespace CAM
    {
        class Operation;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class CavityMillingBuilder;
    }
    namespace CAM
    {
        class CenterlineDrillTurningBuilder;
    }
    namespace CAM
    {
        class ChamferMillingBuilder;
    }
    namespace CAM
    {
        class CylinderMillingBuilder;
    }
    namespace CAM
    {
        class DPMItpBuilder;
    }
    namespace CAM
    {
        class DocumentationBuilder;
    }
    namespace CAM
    {
        class EdgeChamferBuilder;
    }
    namespace CAM
    {
        class EngravingBuilder;
    }
    namespace CAM
    {
        class FaceMillingBuilder;
    }
    namespace CAM
    {
        class FeatureMillingBuilder;
    }
    namespace CAM
    {
        class FinishTurningBuilder;
    }
    namespace CAM
    {
        class GenericFeatureOperationBuilder;
    }
    namespace CAM
    {
        class GmcOpBuilder;
    }
    namespace CAM
    {
        class GrooveMillingBuilder;
    }
    namespace CAM
    {
        class HoleDrillingBuilder;
    }
    namespace CAM
    {
        class HoleMakingBuilder;
    }
    namespace CAM
    {
        class LaserTeachMode;
    }
    namespace CAM
    {
        class LatheMachineControlBuilder;
    }
    namespace CAM
    {
        class LatheUserDefinedBuilder;
    }
    namespace CAM
    {
        class ManualControlBuilder;
    }
    namespace CAM
    {
        class MillMachineControlBuilder;
    }
    namespace CAM
    {
        class MillToolProbingBuilder;
    }
    namespace CAM
    {
        class MillUserDefinedBuilder;
    }
    namespace CAM
    {
        class MultiAxisRoughingBuilder;
    }
    namespace CAM
    {
        class MwBLDeburringOperationBuilder;
    }
    namespace CAM
    {
        class NCGroup;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    namespace CAM
    {
        class PlanarAdditiveBuilder;
    }
    namespace CAM
    {
        class PlanarMillingBuilder;
    }
    namespace CAM
    {
        class PlungeMillingBuilder;
    }
    namespace CAM
    {
        class PointToPointBuilder;
    }
    namespace CAM
    {
        class RadialGrooveMillingBuilder;
    }
    namespace CAM
    {
        class RotaryRoughingBuilder;
    }
    namespace CAM
    {
        class RoughTurningBuilder;
    }
    namespace CAM
    {
        class SurfaceContourBuilder;
    }
    namespace CAM
    {
        class SwarfBuilder;
    }
    namespace CAM
    {
        class TeachmodeTurningBuilder;
    }
    namespace CAM
    {
        class ThreadMillingBuilder;
    }
    namespace CAM
    {
        class ThreadTurningBuilder;
    }
    namespace CAM
    {
        class TrackBuildupAdditiveBuilder;
    }
    namespace CAM
    {
        class TurnPartProbingBuilder;
    }
    namespace CAM
    {
        class TurnToolProbingBuilder;
    }
    namespace CAM
    {
        class VazlMillingBuilder;
    }
    namespace CAM
    {
        class VolumeBased25DMillingOperationBuilder;
    }
    namespace CAM
    {
        class WedmMachineControlBuilder;
    }
    namespace CAM
    {
        class WedmOperationBuilder;
    }
    namespace CAM
    {
        class WedmUserDefinedBuilder;
    }
    namespace CAM
    {
        class ZLevelMillingBuilder;
    }
    namespace CAM
    {
        class ZlevelUndercutBuilder;
    }
    namespace CAM
    {
        class OperationCollectionImpl;
        /** Represents the operation collection  <br> To obtain an instance of this class, refer to @link NXOpen::CAM::CAMSetup  NXOpen::CAM::CAMSetup @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  OperationCollection : public NXOpen::TaggedObjectCollection
        {
            /** Whether use the default name in creation */
            public: enum UseDefaultName
            {
                UseDefaultNameFalse/** don't user the default name */,
                UseDefaultNameTrue/** use the default name */
            };

            private: OperationCollectionImpl * m_operationcollection_impl;
            private: NXOpen::CAM::CAMSetup* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit OperationCollection(NXOpen::CAM::CAMSetup *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~OperationCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::CAM::OperationCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CAM::Operation *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::CAM::OperationCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_CAMEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_CAMEXPORT  void next();
                NXOpen::CAM::OperationCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the CAM.Operation object with the given identifier as recorded in a journal. @return  the found object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Operation * FindObject
            (
                const NXString & sid /** the name of the object */
            );
            /** Finds the CAM.Operation object with the given identifier as recorded in a journal. @return  the found object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            NXOpen::CAM::Operation * FindObject
            (
                const char * sid /** the name of the object */
            );
            /** Create an operation of the specified type and subtype under the parent groups. If the value of 
                    use_default_name is true, default name will be used for the created operation; otherwise, the 
                    specified name will be used. @return  the created operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Operation * Create
            (
                NXOpen::CAM::NCGroup * parentProgramGroup /** the parent program group */,
                NXOpen::CAM::NCGroup * parentMethodGroup /** the parent method group */,
                NXOpen::CAM::NCGroup * parentToolGroup /** the parent tool group */,
                NXOpen::CAM::NCGroup * parentGeometryGroup /** the parent geometry group */,
                const NXString & typeName /** the name of the template type */,
                const NXString & subtypeName /** the name of the template subtype */,
                NXOpen::CAM::OperationCollection::UseDefaultName useDefaultName /** use default name or not */,
                const NXString & newOperationName /** the name of the created operation,
                                                                                               only used when use_default_name == true */
            );
            /** Create an operation of the specified type and subtype under the parent groups. If the value of 
                    use_default_name is true, default name will be used for the created operation; otherwise, the 
                    specified name will be used. @return  the created operation 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            NXOpen::CAM::Operation * Create
            (
                NXOpen::CAM::NCGroup * parentProgramGroup /** the parent program group */,
                NXOpen::CAM::NCGroup * parentMethodGroup /** the parent method group */,
                NXOpen::CAM::NCGroup * parentToolGroup /** the parent tool group */,
                NXOpen::CAM::NCGroup * parentGeometryGroup /** the parent geometry group */,
                const char * typeName /** the name of the template type */,
                const char * subtypeName /** the name of the template subtype */,
                NXOpen::CAM::OperationCollection::UseDefaultName useDefaultName /** use default name or not */,
                const char * newOperationName /** the name of the created operation,
                                                                                               only used when use_default_name == true */
            );
            /** Creates a surface contour operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::SurfaceContourBuilder * CreateSurfaceContourBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling facing operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FaceMillingBuilder * CreateFaceMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling cavity operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CavityMillingBuilder * CreateCavityMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling planar operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PlanarMillingBuilder * CreatePlanarMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling text operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::EngravingBuilder * CreateEngravingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling z level operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ZLevelMillingBuilder * CreateZlevelMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling hole (feature based) operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FeatureMillingBuilder * CreateFeatureMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a planar milling plunge operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PlungeMillingBuilder * CreatePlungeMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a hole making operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::HoleMakingBuilder * CreateHoleMakingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a lathe user defined operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LatheUserDefinedBuilder * CreateLatheUserDefinedBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a mill user defined operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillUserDefinedBuilder * CreateMillUserDefinedBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a mill user defined operation builder  @return  operation builder created 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MwBLDeburringOperationBuilder * CreateMwBldeburringOperationBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a wire edm user defined operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmUserDefinedBuilder * CreateWedmUserDefinedBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a wire edm machine control operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmMachineControlBuilder * CreateWedmMachineControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a lathe machine control operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LatheMachineControlBuilder * CreateLatheMachineControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a mill machine control operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillMachineControlBuilder * CreateMillMachineControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates GmcOp builder  @return  GmcOp builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GmcOpBuilder * CreateGmcopBuilder
            (
                NXOpen::CAM::CAMObject * param /** GmcOp to be edited */
            );
            /** Creates a point to point operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PointToPointBuilder * CreatePointToPointBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates an itp builder  @return  dpmitp builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DPMItpBuilder * CreateDpmitpBuilder
            (
                NXOpen::CAM::CAMObject * param /** dpmitp to be edited */
            );
            /** Creates a planar milling vazl operation builder  @return  operation builder created 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::VazlMillingBuilder * CreateVazlMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a rough turning operation builder  @return  operation builder created 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RoughTurningBuilder * CreateRoughTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a finish turning operation builder  @return  operation builder created 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FinishTurningBuilder * CreateFinishTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a thread turning operation builder  @return  operation builder created 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ThreadTurningBuilder * CreateThreadTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a centerline drill turning operation builder  @return  operation builder created 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CenterlineDrillTurningBuilder * CreateCenterlineDrillTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a WEDM operation builder  @return  builder created 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::WedmOperationBuilder * CreateWedmOperationBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a teachmode turning operation builder  @return  operation builder created 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TeachmodeTurningBuilder * CreateTeachmodeTurningBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a Thread Milling operation builder  @return  operation builder created 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ThreadMillingBuilder * CreateThreadMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a Cylinder Milling operation builder  @return  operation builder created 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CylinderMillingBuilder * CreateCylinderMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a volume based 25D milling operation builder  @return  operation builder created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::VolumeBased25DMillingOperationBuilder * CreateVolumeBased25dMillingOperationBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a mill tool probing operation builder  @return  operation builder created 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MillToolProbingBuilder * CreateMillToolProbingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a turn tool probing operation builder  @return  operation builder created 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnToolProbingBuilder * CreateTurnToolProbingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a turn part probing operation builder  @return  operation builder created 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnPartProbingBuilder * CreateTurnPartProbingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a Hole Drilling operation builder  @return  operation builder created 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::HoleDrillingBuilder * CreateHoleDrillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a Groove Milling operation builder  @return  operation builder created 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GrooveMillingBuilder * CreateGrooveMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a laser teach mode  @return  operation builder created 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LaserTeachMode * CreateLaserTeachMode
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a Chamfer Milling operation builder  @return  operation builder created 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ChamferMillingBuilder * CreateChamferMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a Radial Groove Milling operation builder  @return  operation builder created 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RadialGrooveMillingBuilder * CreateRadialGrooveMillingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a documentation operation builder  @return  operation builder created 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DocumentationBuilder * CreateDocumentationBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a Manual Control operation builder  @return  operation builder created 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ManualControlBuilder * CreateManualControlBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );
            /** Creates a Generic Feature Operation builder  @return  operation builder created 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::GenericFeatureOperationBuilder * CreateGenericFeatureOperationBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited */
            );

            /// \cond NX_NO_DOC 
            /** Creates an edge chamfer operation builder  @return  operation builder created 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::EdgeChamferBuilder * CreateEdgeChamferBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited - may be NULL if creating a new operation */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a multi axis roughing builder  @return  operation builder created 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MultiAxisRoughingBuilder * CreateMultiAxisRoughingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited - may be NULL if creating a new operation */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a zlevel undercut builder  @return  operation builder created 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ZlevelUndercutBuilder * CreateZlevelUndercutBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited - may be NULL if creating a new operation */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a swarf builder  @return  operation builder created 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::SwarfBuilder * CreateSwarfBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited - may be NULL if creating a new operation */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a rotary roughing builder  @return  operation builder created 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RotaryRoughingBuilder * CreateRotaryRoughingBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited - may be NULL if creating a new operation */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a planar additive builder  @return  operation builder created 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::PlanarAdditiveBuilder * CreatePlanarAdditiveBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited - may be NULL if creating a new operation */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a track buildup additive builder  @return  operation builder created 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TrackBuildupAdditiveBuilder * CreateTrackBuildupAdditiveBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited - may be NULL if creating a new operation */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a builder for the specified operation @return  operation builder created 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::OperationBuilder * CreateBuilder
            (
                NXOpen::CAM::CAMObject * param /** operation to be edited - may be NULL if creating a new operation */
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
