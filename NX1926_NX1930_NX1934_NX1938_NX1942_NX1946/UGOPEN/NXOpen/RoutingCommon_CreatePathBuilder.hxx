#ifndef NXOpen_ROUTINGCOMMON_CREATEPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTINGCOMMON_CREATEPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RoutingCommon_CreatePathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/RoutingCommon_BendCornerTypeBuilder.hxx>
#include <NXOpen/RoutingCommon_CornerBuilder.hxx>
#include <NXOpen/RoutingCommon_PathTransitionListManagerBuilder.hxx>
#include <NXOpen/Routing_StockBlockBuilder.hxx>
#include <NXOpen/libnxopencpp_routingcommon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace RoutingCommon
    {
        class CreatePathBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    class Expression;
    namespace PDM
    {
        class LogicalObject;
    }
    class Part;
    namespace Routing
    {
        class Corner;
    }
    namespace Routing
    {
        class StockBlockBuilder;
    }
    namespace RoutingCommon
    {
        class BendCornerTypeBuilder;
    }
    namespace RoutingCommon
    {
        class CornerBuilder;
    }
    namespace RoutingCommon
    {
        class PathTransitionListManagerBuilder;
    }
    class Unit;
    namespace RoutingCommon
    {
        class _CreatePathBuilderBuilder;
        class CreatePathBuilderImpl;
        /** Represents @link NXOpen::RoutingCommon::CreatePathBuilder NXOpen::RoutingCommon::CreatePathBuilder@endlink . Allows the user to create 
                routing path.
             <br> To create a new instance of this class, use @link NXOpen::RoutingCommon::BuilderFactory::CreatePathBuilder  NXOpen::RoutingCommon::BuilderFactory::CreatePathBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        BendCornerSettings.Method (deprecated) </term> <description> 
         
        Radius </description> </item> 

        <item><term> 
         
        BendCornerSettings.Radius.Value (deprecated) </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        BendCornerSettings.RatioToDiameter.Value (deprecated) </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        CornerSettings.CornerType </term> <description> 
         
        None </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGCOMMONEXPORT  CreatePathBuilder : public NXOpen::Builder
        {
            private: CreatePathBuilderImpl * m_createpathbuilder_impl;
            private: friend class  _CreatePathBuilderBuilder;
            protected: CreatePathBuilder();
            public: ~CreatePathBuilder();
            /** Creates a @link NXOpen::RoutingCommon::PathTransitionListManagerBuilder NXOpen::RoutingCommon::PathTransitionListManagerBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::PathTransitionListManagerBuilder * CreatePathTransitionManagerBuilder
            (
                NXOpen::Part * workPart /** workpart */ ,
                NXOpen::Assemblies::Component * workOcc /** workocc */ ,
                NXOpen::Part * displayPart /** displaypart */ 
            );
            /**Returns  the builder for managing path transitions that make up the path.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::PathTransitionListManagerBuilder * PathTransitionListManagerBuilder
            (
            );
            /**Returns  the builder for assigning stock to the new path.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::StockBlockBuilder * StockSettings
            (
            );
            /**Returns  the setting to determine whether to assign the default elbow to new segments. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool PlaceDefaultElbow
            (
            );
            /**Sets  the setting to determine whether to assign the default elbow to new segments. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetPlaceDefaultElbow
            (
                bool placeDefaultElbow /** placedefaultelbow */ 
            );
            /**Returns  the builder to assign corners to the routing path.
             <br>  @deprecated Deprecated in NX11.0.1.  Use @link NXOpen::RoutingCommon::CreatePathBuilder::CornerSettings NXOpen::RoutingCommon::CreatePathBuilder::CornerSettings@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX11.0.1.  Use NXOpen::RoutingCommon::CreatePathBuilder::CornerSettings instead.") NXOpen::RoutingCommon::BendCornerTypeBuilder * BendCornerSettings
            (
            );
            /**Returns  the setting to determine whether to force the new control point to automatically snap to a location 
                        that allows a valid placement of an elbow.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool SnapToElbowAngles
            (
            );
            /**Sets  the setting to determine whether to force the new control point to automatically snap to a location 
                        that allows a valid placement of an elbow.
                    
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSnapToElbowAngles
            (
                bool snapToElbowAngles /** snaptoelbowangles */ 
            );
            /**Returns  the angle tolerance to snap to a location that allows a valid placement of an elbow. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double SnapAngle
            (
            );
            /**Sets  the angle tolerance to snap to a location that allows a valid placement of an elbow. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSnapAngle
            (
                double snapAngle /** snapangle */ 
            );
            /**Returns  the setting to determine whether to simplify the path by removing collinear extension Routing Control Points. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool SimplifyPath
            (
            );
            /**Sets  the setting to determine whether to simplify the path by removing collinear extension Routing Control Points. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSimplifyPath
            (
                bool simplifyPath /** simplifypath */ 
            );
            /** Performs the operations needed prior to a commit. This method has to be called before invoking commit. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void PreCommit
            (
            );
            /** Returns the @link PDM::LogicalObject PDM::LogicalObject@endlink s that represent the content that will be created by this builder. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetLogicalObjects
            (
                std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /**Returns  the builder to assign corners to the routing path.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::CornerBuilder * CornerSettings
            (
            );
            /** Gets the corner attributes that came from the bend radius table. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetBendCornerAttributes
            (
                std::vector<NXOpen::NXObject::AttributeInformation> & attributes /** attributes */ 
            );
            /** Sets the corner attributes that came from the bend radius table. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetBendCornerAttributes
            (
                const std::vector<NXOpen::NXObject::AttributeInformation> & attributes /** attributes */ 
            );
            /** Removes the corner attributes that came from the bend radius table. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveBendCornerAttributes
            (
                const std::vector<NXOpen::Routing::Corner *> & corners /** corners */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
