#ifndef NXOpen_MECHATRONICS_SHMSIGNALCLIENTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_SHMSIGNALCLIENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_SHMSignalClientBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_SignalBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class SHMSignalClientBuilder;
    }
    class Builder;
    class Part;
    namespace Mechatronics
    {
        class _SHMSignalClientBuilderBuilder;
        class SHMSignalClientBuilderImpl;
        /**
                Represents a @link NXOpen::Mechatronics::SHMSignalClientBuilder NXOpen::Mechatronics::SHMSignalClientBuilder@endlink  builder.
             <br> This class is sub-object of another builder, and cannot be directly instantiated.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  SHMSignalClientBuilder : public NXOpen::Builder
        {
            /**  @brief  Represents endian type 

              
                    */
            public: enum EndianType
            {
                EndianTypeLittle/**little endian */,
                EndianTypeBig/** big */ 
            };

             /**  @brief  Represents SHMTag info definition structure.  

              
                    */
            public:
            struct SHMSignal
            {
                public: /** Signal Name          */NXString SignalName;
                public: /** Signal dataType              */NXOpen::Mechatronics::SignalBuilder::DataType EDataType;
                public: /** Signal value            */NXString Value;
                public: /**Signal IO Type            */NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType EIOType;
                public: SHMSignal() :
                    SignalName(),
                    EDataType((NXOpen::Mechatronics::SignalBuilder::DataType)0),
                    Value(),
                    EIOType((NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType)0)
                {
                }
                /** Constructor for the SHMSignal struct. */ 
                public: SHMSignal(const NXString &signalNameInitial /** Signal Name          */, 
                        NXOpen::Mechatronics::SignalBuilder::DataType eDataTypeInitial /** Signal dataType              */, 
                        const NXString &valueInitial /** Signal value            */, 
                        NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType eIOTypeInitial /**Signal IO Type            */) :
                    SignalName(signalNameInitial),
                    EDataType(eDataTypeInitial),
                    Value(valueInitial),
                    EIOType(eIOTypeInitial)
                {
                }
            };

             /**  @brief  Represents SHMTag info definition structure.  

              
                    */
            public:
            struct SHMSignalEx
            {
                public: /** Signal Name          */NXString SignalName;
                public: /** Signal dataType              */NXString StrDataTypeName;
                public: /** Signal value            */NXString Value;
                public: /**Signal IO Type            */NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType EIOType;
                public: SHMSignalEx() :
                    SignalName(),
                    StrDataTypeName(),
                    Value(),
                    EIOType((NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType)0)
                {
                }
                /** Constructor for the SHMSignalEx struct. */ 
                public: SHMSignalEx(const NXString &signalNameInitial /** Signal Name          */, 
                        const NXString &strDataTypeNameInitial /** Signal dataType              */, 
                        const NXString &valueInitial /** Signal value            */, 
                        NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType eIOTypeInitial /**Signal IO Type            */) :
                    SignalName(signalNameInitial),
                    StrDataTypeName(strDataTypeNameInitial),
                    Value(valueInitial),
                    EIOType(eIOTypeInitial)
                {
                }
            };

             /**  @brief  Represents SHMInstance info definition structure.  

              
                    */
            public:
            struct SHMInfo
            {
                public: /** SHM Name          */NXString Name;
                public: /** Endian type              */NXOpen::Mechatronics::SHMSignalClientBuilder::EndianType EndianType;
                public: /** Status            */NXString Status;
                public: SHMInfo() :
                    Name(),
                    EndianType((NXOpen::Mechatronics::SHMSignalClientBuilder::EndianType)0),
                    Status()
                {
                }
                /** Constructor for the SHMInfo struct. */ 
                public: SHMInfo(const NXString &nameInitial /** SHM Name          */, 
                        NXOpen::Mechatronics::SHMSignalClientBuilder::EndianType endianTypeInitial /** Endian type              */, 
                        const NXString &statusInitial /** Status            */) :
                    Name(nameInitial),
                    EndianType(endianTypeInitial),
                    Status(statusInitial)
                {
                }
            };

            private: SHMSignalClientBuilderImpl * m_shmsignalclientbuilder_impl;
            private: friend class  _SHMSignalClientBuilderBuilder;
            protected: SHMSignalClientBuilder();
            public: ~SHMSignalClientBuilder();
            /**  @brief  Refresh registered SHMSignal instances.  

              
             <br>  @deprecated Deprecated in NX1926.0.0.  Please use @link NXOpen::Mechatronics::SHMSignalClientBuilder::RefreshInstancesV2 NXOpen::Mechatronics::SHMSignalClientBuilder::RefreshInstancesV2@endlink  instead. <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Please use NXOpen::Mechatronics::SHMSignalClientBuilder::RefreshInstancesV2 instead.") void RefreshRegisteredInstances
            (
                std::vector<NXString> & instanceNames /** instancenames */ 
            );
            /**Returns   @brief  the selected configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedConfigurationName
            (
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationName
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSelectedConfigurationName
            (
                const char * configurationName /** configurationname */ 
            );
            /**Returns   @brief  the selected configuration part.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * SelectedConfigurationPart
            (
            );
            /**Sets   @brief  the selected configuration part.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationPart
            (
                NXOpen::Part * ownerPart /** ownerpart */ 
            );
            /**  @brief  Set SHM Client Signal Infomation  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSignals
            (
                const NXString & configurationName /** configurationname */ ,
                const std::vector<NXOpen::Mechatronics::SHMSignalClientBuilder::SHMSignal> & signalInfo /**Array of signal infomation*/
            );
            /**  @brief  Set SHM Client Signal Infomation  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSignals
            (
                const char * configurationName /** configurationname */ ,
                const std::vector<NXOpen::Mechatronics::SHMSignalClientBuilder::SHMSignal> & signalInfo /**Array of signal infomation*/
            );
            /**  @brief  Get SHM Client Infomation  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::Mechatronics::SHMSignalClientBuilder::SHMSignal> GetSignals
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**  @brief  Get SHM Client Infomation  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            std::vector<NXOpen::Mechatronics::SHMSignalClientBuilder::SHMSignal> GetSignals
            (
                const char * configurationName /** configurationname */ 
            );
            /**  @brief  Set SHM Client Signal Infomation  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSignalsEx
            (
                const NXString & configurationName /** configurationname */ ,
                const std::vector<NXOpen::Mechatronics::SHMSignalClientBuilder::SHMSignalEx> & signalInfo /**Array of signal infomation*/
            );
            /**  @brief  Set SHM Client Signal Infomation  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSignalsEx
            (
                const char * configurationName /** configurationname */ ,
                const std::vector<NXOpen::Mechatronics::SHMSignalClientBuilder::SHMSignalEx> & signalInfo /**Array of signal infomation*/
            );
            /**  @brief  Get SHM Client Infomation  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::Mechatronics::SHMSignalClientBuilder::SHMSignalEx> GetSignalsEx
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**  @brief  Get SHM Client Infomation  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            std::vector<NXOpen::Mechatronics::SHMSignalClientBuilder::SHMSignalEx> GetSignalsEx
            (
                const char * configurationName /** configurationname */ 
            );
            /**  @brief  Set SHM Client Instance Base Information  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSHMInstance
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Mechatronics::SHMSignalClientBuilder::EndianType eEndianType /** eendiantype */ ,
                const NXString & strStatus /** strstatus */ 
            );
            /**  @brief  Set SHM Client Instance Base Information  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSHMInstance
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Mechatronics::SHMSignalClientBuilder::EndianType eEndianType /** eendiantype */ ,
                const char * strStatus /** strstatus */ 
            );
            /**  @brief  Get SHM Client Instance Base Information  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void GetSHMInstance
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Mechatronics::SHMSignalClientBuilder::EndianType* eEndianType /** eendiantype */ ,
                NXString* strStatus /** strstatus */ 
            );
            /**  @brief  Get SHM Client Instance Base Information  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void GetSHMInstance
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Mechatronics::SHMSignalClientBuilder::EndianType* eEndianType /** eendiantype */ ,
                NXString* strStatus /** strstatus */ 
            );
            /**  @brief  Refresh SHM Server Instances, If IsEditInstance Is False, Resfresh Instance Which Is Edited Instance Name  

              
             <br>  @deprecated Deprecated in NX1926.0.0.  Please use @link NXOpen::Mechatronics::SHMSignalClientBuilder::RefreshInstancesV2 NXOpen::Mechatronics::SHMSignalClientBuilder::RefreshInstancesV2@endlink  or @link NXOpen::Mechatronics::SHMSignalClientBuilder::ChangeInstanceName NXOpen::Mechatronics::SHMSignalClientBuilder::ChangeInstanceName@endlink  instead. <br>  

             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NX_DEPRECATED("Deprecated in NX1926.0.0.  Please use NXOpen::Mechatronics::SHMSignalClientBuilder::RefreshInstancesV2 or NXOpen::Mechatronics::SHMSignalClientBuilder::ChangeInstanceName instead.") void RefreshInstances
            (
                std::vector<NXString> & instanceNames /** instancenames */ ,
                bool isEditInstanceName /** iseditinstancename */ 
            );
            /**  @brief  Get SHM Instance names.  

              
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void GetInstanceNames
            (
                std::vector<NXString> & instanceNames /** instancenames */ 
            );
            /**  @brief  Refresh SHM Server Instances. 

             
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void RefreshInstancesV2
            (
                std::vector<NXString> & instanceNames /** instancenames */ 
            );
            /**  @brief  Change SHM Instance names.  

              
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void ChangeInstanceName
            (
                const NXString & oldInstanceName /** oldinstancename */ ,
                const NXString & newInstanceName /** newinstancename */ 
            );
            /**  @brief  Change SHM Instance names.  

              
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void ChangeInstanceName
            (
                const char * oldInstanceName /** oldinstancename */ ,
                const char * newInstanceName /** newinstancename */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
