#ifndef NXOpen_TOOLING_COMPDRAWINGBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_COMPDRAWINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_CompDrawingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class CompDrawingBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    class Builder;
    class NXObject;
    namespace Tooling
    {
        class _CompDrawingBuilderBuilder;
        class CompDrawingBuilderImpl;
        /**
              Represents a @link NXOpen::Tooling::CompDrawingBuilder NXOpen::Tooling::CompDrawingBuilder@endlink  which is 
              used to create or edit the Component Drawing.
             <br> To create a new instance of this class, use @link NXOpen::Tooling::ToolingDrawingCollection::CreateComponentDrawingBuilder  NXOpen::Tooling::ToolingDrawingCollection::CreateComponentDrawingBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        ComponentType </term> <description> 
         
        All </description> </item> 

        <item><term> 
         
        DrawingFilter </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        Filter </term> <description> 
         
        Type </description> </item> 

        <item><term> 
         
        IsKeepDrawingOpen </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Margin </term> <description> 
         
        15 </description> </item> 

        <item><term> 
         
        Projection </term> <description> 
         
        FirstAngleProjection </description> </item> 

        </list> 

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  CompDrawingBuilder : public NXOpen::Builder
        {
            /** Specifies the filter of components.*/
            public: enum FilterSelection
            {
                FilterSelectionType/** filter components by type*/,
                FilterSelectionDrawing/** filter componnets by drawing */,
                FilterSelectionAll/**  list all components*/
            };

            /** Specifies the type of components.*/
            public: enum ComponentTypeSelection
            {
                ComponentTypeSelectionAll/** the type of components, read from configuration file */
            };

            /** Specifies the drawing type.*/
            public: enum DrawingType
            {
                DrawingTypeNone/** without drawing */,
                DrawingTypeNonMaster/** with non-master drawing */,
                DrawingTypeSelfContained/** with self-contained drawing */
            };

            /** Specifies the project type.*/
            public: enum ProjectionType
            {
                ProjectionTypeFirstAngleProjection/** first angle projection */,
                ProjectionTypeThirdAngleProjection/** third angle projection */
            };

            private: CompDrawingBuilderImpl * m_compdrawingbuilder_impl;
            private: friend class  _CompDrawingBuilderBuilder;
            protected: CompDrawingBuilder();
            public: ~CompDrawingBuilder();
            /**Returns  the filter to select component for drawing. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CompDrawingBuilder::FilterSelection Filter
            (
            );
            /**Sets  the filter to select component for drawing. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFilter
            (
                NXOpen::Tooling::CompDrawingBuilder::FilterSelection filter /** filter */ 
            );
            /**Returns  the component type in mold or die project assembly. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CompDrawingBuilder::ComponentTypeSelection ComponentType
            (
            );
            /**Sets  the component type in mold or die project assembly. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetComponentType
            (
                NXOpen::Tooling::CompDrawingBuilder::ComponentTypeSelection componentType /** componenttype */ 
            );
            /**Returns  the drawing component drawing filter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CompDrawingBuilder::DrawingType DrawingFilter
            (
            );
            /**Sets  the drawing component drawing filter. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDrawingFilter
            (
                NXOpen::Tooling::CompDrawingBuilder::DrawingType drawingType /** drawingtype */ 
            );
            /**Returns  the component to create drawing. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * Component
            (
            );
            /**Returns  the drawing projection angle. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CompDrawingBuilder::ProjectionType Projection
            (
            );
            /**Sets  the drawing projection angle. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetProjection
            (
                NXOpen::Tooling::CompDrawingBuilder::ProjectionType projection /** projection */ 
            );
            /**Returns  the naming rule of drawing files. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DrawingFileNamingRule
            (
            );
            /**Sets  the naming rule of drawing files. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDrawingFileNamingRule
            (
                const NXString & drawingFileNamingRule /** drawingfilenamingrule */ 
            );
            /**Sets  the naming rule of drawing files. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetDrawingFileNamingRule
            (
                const char * drawingFileNamingRule /** drawingfilenamingrule */ 
            );
            /**Returns  the naming rule of drawing sheets. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DrawingSheetNamingRule
            (
            );
            /**Sets  the naming rule of drawing sheets. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDrawingSheetNamingRule
            (
                const NXString & drawingSheetNamingRule /** drawingsheetnamingrule */ 
            );
            /**Sets  the naming rule of drawing sheets. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetDrawingSheetNamingRule
            (
                const char * drawingSheetNamingRule /** drawingsheetnamingrule */ 
            );
            /**Returns  the margin for user defined drawing template. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: int Margin
            (
            );
            /**Sets  the margin for user defined drawing template. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMargin
            (
                int margin /** margin */ 
            );
            /**Returns  the margin for view for user defined drawing template. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double MarginForView
            (
            );
            /**Sets  the margin for view for user defined drawing template. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMarginForView
            (
                double marginForView /** marginforview */ 
            );
            /**Returns  the option whether to keep drawing open. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsKeepDrawingOpen
            (
            );
            /**Sets  the option whether to keep drawing open. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetKeepDrawingOpen
            (
                bool isKeepDrawingOpen /** iskeepdrawingopen */ 
            );
            /** Creates all drawings. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateAll
            (
            );
            /** Creates a drawing. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::CreateCompDrawing NXOpen::Tooling::CompDrawingBuilder::CreateCompDrawing@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Tooling::CompDrawingBuilder::CreateCompDrawing instead.") void CreateDrawing
            (
                const NXString & pName /** pname */ ,
                const NXString & dFile /** dfile */ ,
                const NXString & dName /** dname */ ,
                const NXString & templateName /** templatename */ 
            );
            /** Creates a drawing. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::CreateCompDrawing NXOpen::Tooling::CompDrawingBuilder::CreateCompDrawing@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void CreateDrawing
            (
                const char * pName /** pname */ ,
                const char * dFile /** dfile */ ,
                const char * dName /** dname */ ,
                const char * templateName /** templatename */ 
            );
            /** Deletes a drawing. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::DeleteCompDrawing NXOpen::Tooling::CompDrawingBuilder::DeleteCompDrawing@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Tooling::CompDrawingBuilder::DeleteCompDrawing instead.") void DeleteDrawing
            (
                const NXString & pName /** pname */ ,
                const NXString & dFile /** dfile */ ,
                const NXString & dName /** dname */ ,
                const NXString & templateName /** templatename */ 
            );
            /** Deletes a drawing. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::DeleteCompDrawing NXOpen::Tooling::CompDrawingBuilder::DeleteCompDrawing@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void DeleteDrawing
            (
                const char * pName /** pname */ ,
                const char * dFile /** dfile */ ,
                const char * dName /** dname */ ,
                const char * templateName /** templatename */ 
            );
            /** Opens a drawing. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::OpenCompDrawing NXOpen::Tooling::CompDrawingBuilder::OpenCompDrawing@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Tooling::CompDrawingBuilder::OpenCompDrawing instead.") void OpenDrawing
            (
                const NXString & pName /** pname */ ,
                const NXString & dFile /** dfile */ ,
                const NXString & dName /** dname */ ,
                const NXString & templateName /** templatename */ 
            );
            /** Opens a drawing. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::OpenCompDrawing NXOpen::Tooling::CompDrawingBuilder::OpenCompDrawing@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void OpenDrawing
            (
                const char * pName /** pname */ ,
                const char * dFile /** dfile */ ,
                const char * dName /** dname */ ,
                const char * templateName /** templatename */ 
            );
            /** Edits a drawing. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::EditCompDrawing NXOpen::Tooling::CompDrawingBuilder::EditCompDrawing@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use NXOpen::Tooling::CompDrawingBuilder::EditCompDrawing instead.") void EditDrawing
            (
                const NXString & pName /** pname */ ,
                const NXString & dFile /** dfile */ ,
                const NXString & dName /** dname */ ,
                const NXString & templateName /** templatename */ 
            );
            /** Edits a drawing. 
             <br>  @deprecated Deprecated in NX8.5.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::EditCompDrawing NXOpen::Tooling::CompDrawingBuilder::EditCompDrawing@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            void EditDrawing
            (
                const char * pName /** pname */ ,
                const char * dFile /** dfile */ ,
                const char * dName /** dname */ ,
                const char * templateName /** templatename */ 
            );
            /** Initializes the component drawing value. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: void InitConstructor
            (
            );
            /** Creates a drawing for a component 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::CreateComponentDrawingCopyAttribute NXOpen::Tooling::CompDrawingBuilder::CreateComponentDrawingCopyAttribute@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::Tooling::CompDrawingBuilder::CreateComponentDrawingCopyAttribute instead.") void CreateCompDrawing
            (
                NXOpen::NXObject * component /** component */ ,
                const NXString & componentPartName /** component part name*/,
                const NXString & drawingFileName /** drawing file name*/,
                const NXString & drawingName /** drawing name*/,
                const NXString & templateName /** template name*/
            );
            /** Creates a drawing for a component 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::Tooling::CompDrawingBuilder::CreateComponentDrawingCopyAttribute NXOpen::Tooling::CompDrawingBuilder::CreateComponentDrawingCopyAttribute@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void CreateCompDrawing
            (
                NXOpen::NXObject * component /** component */ ,
                const char * componentPartName /** component part name*/,
                const char * drawingFileName /** drawing file name*/,
                const char * drawingName /** drawing name*/,
                const char * templateName /** template name*/
            );
            /** Deletes a sheet from a component. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void DeleteCompSheet
            (
                NXOpen::NXObject * component /** component */ ,
                const NXString & componentPartName /** component part name*/,
                const NXString & drawingFileName /** drawing file name*/,
                const NXString & drawingName /** drawing name*/,
                const NXString & templateName /** template name*/
            );
            /** Deletes a sheet from a component. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void DeleteCompSheet
            (
                NXOpen::NXObject * component /** component */ ,
                const char * componentPartName /** component part name*/,
                const char * drawingFileName /** drawing file name*/,
                const char * drawingName /** drawing name*/,
                const char * templateName /** template name*/
            );
            /** Opens a drawing in a component. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void OpenCompDrawing
            (
                NXOpen::NXObject * component /** component */ ,
                const NXString & componentPartName /** component part name*/,
                const NXString & drawingFileName /** drawing file name*/,
                const NXString & drawingName /** drawing name*/,
                const NXString & templateName /** template name*/
            );
            /** Opens a drawing in a component. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void OpenCompDrawing
            (
                NXOpen::NXObject * component /** component */ ,
                const char * componentPartName /** component part name*/,
                const char * drawingFileName /** drawing file name*/,
                const char * drawingName /** drawing name*/,
                const char * templateName /** template name*/
            );
            /** Edits a drawing in a component. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void EditCompDrawing
            (
                NXOpen::NXObject * component /** component */ ,
                const NXString & componentPartName /** component part name*/,
                const NXString & drawingFileName /** drawing file name*/,
                const NXString & drawingName /** drawing name*/,
                const NXString & templateName /** template name*/,
                const NXString & oldSheetName /** old sheet name*/
            );
            /** Edits a drawing in a component. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void EditCompDrawing
            (
                NXOpen::NXObject * component /** component */ ,
                const char * componentPartName /** component part name*/,
                const char * drawingFileName /** drawing file name*/,
                const char * drawingName /** drawing name*/,
                const char * templateName /** template name*/,
                const char * oldSheetName /** old sheet name*/
            );
            /** Add a new sheet to a component. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void AddCompSheet
            (
                NXOpen::NXObject * component /** component */ ,
                const NXString & componentPartName /** component part name*/,
                const NXString & drawingFileName /** drawing file name*/,
                const NXString & drawingName /** drawing name*/,
                const NXString & templateName /** template name*/
            );
            /** Add a new sheet to a component. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void AddCompSheet
            (
                NXOpen::NXObject * component /** component */ ,
                const char * componentPartName /** component part name*/,
                const char * drawingFileName /** drawing file name*/,
                const char * drawingName /** drawing name*/,
                const char * templateName /** template name*/
            );
            /** Deletes drawings in self-contained part or deletes a master model part with drawings 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void DeleteCompDrawing
            (
                NXOpen::NXObject * component /** component */ ,
                const NXString & componentPartName /** component part name*/,
                const NXString & drawingFileName /** drawing file name*/,
                const NXString & drawingName /** drawing name*/,
                const NXString & templateName /** template name*/
            );
            /** Deletes drawings in self-contained part or deletes a master model part with drawings 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            void DeleteCompDrawing
            (
                NXOpen::NXObject * component /** component */ ,
                const char * componentPartName /** component part name*/,
                const char * drawingFileName /** drawing file name*/,
                const char * drawingName /** drawing name*/,
                const char * templateName /** template name*/
            );
            /**Returns  the wizard type attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /** Creates a drawing for a component and copy attribute to the drawing part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateComponentDrawingCopyAttribute
            (
                NXOpen::NXObject * component /** component */ ,
                const NXString & componentPartName /** component part name*/,
                const NXString & drawingFileName /** drawing file name*/,
                const NXString & drawingName /** drawing name*/,
                const NXString & templateName /** template name*/,
                std::vector<NXString> & attributeTitles /** attribute titles */,
                std::vector<NXString> & attributeValues /** attribute values */
            );
            /** Creates a drawing for a component and copy attribute to the drawing part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void CreateComponentDrawingCopyAttribute
            (
                NXOpen::NXObject * component /** component */ ,
                const char * componentPartName /** component part name*/,
                const char * drawingFileName /** drawing file name*/,
                const char * drawingName /** drawing name*/,
                const char * templateName /** template name*/,
                std::vector<NXString> & attributeTitles /** attribute titles */,
                std::vector<NXString> & attributeValues /** attribute values */
            );
            /** Set display state 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDisplayState
            (
                int displayState /** display state */,
                const NXString & layout /** layout to open */,
                NXOpen::NXObject * drawingTag /** drawingtag */ 
            );
            /** Set display state 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetDisplayState
            (
                int displayState /** display state */,
                const char * layout /** layout to open */,
                NXOpen::NXObject * drawingTag /** drawingtag */ 
            );
            /** Assign attribute to object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AssignAttribute
            (
                NXOpen::NXObject * objectTag /** object tag */,
                const NXString & attributeTitle /** attribute title */,
                const NXString & attributeValue /** attribute value */
            );
            /** Assign attribute to object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void AssignAttribute
            (
                NXOpen::NXObject * objectTag /** object tag */,
                const char * attributeTitle /** attribute title */,
                const char * attributeValue /** attribute value */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
