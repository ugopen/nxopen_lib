#ifndef NXOpen_VIEWCOLLECTION_HXX_INCLUDED
#define NXOpen_VIEWCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ViewCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/Display_Background.hxx>
#include <NXOpen/Display_EnvironmentBuilder.hxx>
#include <NXOpen/Display_ExtractScene.hxx>
#include <NXOpen/Display_GlobalIlluminationBuilder.hxx>
#include <NXOpen/Display_IRayPlusStudioEditorBuilder.hxx>
#include <NXOpen/Display_Image.hxx>
#include <NXOpen/Display_ImageBasedLighting.hxx>
#include <NXOpen/Display_IrayPlusMaterialEditorBuilder.hxx>
#include <NXOpen/Display_IrayPlusSimpleMaterialEditorBuilder.hxx>
#include <NXOpen/Display_LightBuilder.hxx>
#include <NXOpen/Display_Lighting.hxx>
#include <NXOpen/Display_NonProportionalZoom.hxx>
#include <NXOpen/Display_RayTracedStudioBuilder.hxx>
#include <NXOpen/Display_RayTracedStudioEditorBuilder.hxx>
#include <NXOpen/Display_Reflection.hxx>
#include <NXOpen/Display_SaveImageFileBrowserBuilder.hxx>
#include <NXOpen/Display_Scene.hxx>
#include <NXOpen/Display_Shadows.hxx>
#include <NXOpen/Display_Stage.hxx>
#include <NXOpen/Display_StudioImageCaptureBuilder.hxx>
#include <NXOpen/Display_Wall.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ViewCollection;
    class BasePart;
    class View;
    namespace Display
    {
        class Background;
    }
    namespace Display
    {
        class EnvironmentBuilder;
    }
    namespace Display
    {
        class ExtractScene;
    }
    namespace Display
    {
        class GlobalIlluminationBuilder;
    }
    namespace Display
    {
        class IRayPlusStudioEditorBuilder;
    }
    namespace Display
    {
        class Image;
    }
    namespace Display
    {
        class ImageBasedLighting;
    }
    namespace Display
    {
        class IrayPlusMaterialEditorBuilder;
    }
    namespace Display
    {
        class IrayPlusSimpleMaterialEditorBuilder;
    }
    namespace Display
    {
        class LightBuilder;
    }
    namespace Display
    {
        class Lighting;
    }
    namespace Display
    {
        class NonProportionalZoom;
    }
    namespace Display
    {
        class RayTracedStudioBuilder;
    }
    namespace Display
    {
        class RayTracedStudioEditorBuilder;
    }
    namespace Display
    {
        class Reflection;
    }
    namespace Display
    {
        class SaveImageFileBrowserBuilder;
    }
    namespace Display
    {
        class Scene;
    }
    namespace Display
    {
        class Shadows;
    }
    namespace Display
    {
        class Stage;
    }
    namespace Display
    {
        class StudioImageCaptureBuilder;
    }
    namespace Display
    {
        class Wall;
    }
    class Light;
    class ViewCollectionImpl;
    /**
     Represents a collection of @link NXOpen::View NXOpen::View@endlink s. 
     <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ViewCollection : public NXOpen::TaggedObjectCollection
    {
         /** High End render image results */
        public:
        struct HighEndRenderImageResults
        {
            public: /** iterations */ int Iterations;
            public: /** seconds */ double Seconds;
            public: HighEndRenderImageResults() :
                Iterations(),
                Seconds()
            {
            }
            /** Constructor for the HighEndRenderImageResults struct. */ 
            public: HighEndRenderImageResults(int iterationsInitial /** iterations */ , 
                    double secondsInitial /** seconds */ ) :
                Iterations(iterationsInitial),
                Seconds(secondsInitial)
            {
            }
        };

        private: ViewCollectionImpl * m_viewcollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit ViewCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~ViewCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::ViewCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::View *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(nullptr), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::ViewCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * () const;
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::ViewCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /** Refreshes all the views in the current layout 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Refresh
        (
        );
        /** Returns the active views in the view collection.  @return  List of active views 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::View *> GetActiveViews
        (
        );
        /** Returns a list of custom view names in the view collection.  @return  List of custom view names 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXString> GetCustomViews
        (
        );
        /**Returns  the work view of the part, which is the work view of the
                current layout of the part. See also
                @link NXOpen::Layout::WorkView NXOpen::Layout::WorkView@endlink . 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::View * WorkView
        (
        );
        /** Returns whether the work view of the given part is in expand state.  @return  true if the work view is expanded 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsWorkViewExpanded
        (
        );
        /** Saves a view with user specified name.  @return  Newly created view
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::View * SaveAs
        (
            NXOpen::View * selectedView /** Selected view  */,
            const NXString & newViewName /** Selected name of the view  */,
            bool copyViewModifications /** True if view modifications to be copied */,
            bool moveViewDependencies /** True if view dependencies to be moved */
        );
        /** Saves a view with user specified name.  @return  Newly created view
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::View * SaveAs
        (
            NXOpen::View * selectedView /** Selected view  */,
            const char * newViewName /** Selected name of the view  */,
            bool copyViewModifications /** True if view modifications to be copied */,
            bool moveViewDependencies /** True if view dependencies to be moved */
        );
        /** Saves current view. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: void Save
        (
        );
        /** Finds the @link  NXOpen::View   NXOpen::View @endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  View with this identifier 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::View * FindObject
        (
            const NXString & journalIdentifier /** Identifier of the view to be found */
        );
        /** Finds the @link  NXOpen::View   NXOpen::View @endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  View with this identifier 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::View * FindObject
        (
            const char * journalIdentifier /** Identifier of the view to be found */
        );
        /** Removes the work view from the expand state (assuming that it is
            in that state), restoring it to its normal size in its layout.  Other views
            in the layout become visible again.  If the work view is not in expand
            state, an error is returned.  The view remains the work view unless the view
            is a member view on a drawing sheet, in which case the sheet's view becomes
            the work view.  The given part must be the displayed part.
             <br>  In batch mode, the internal state of the view is no longer in
            expand state, but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void UnexpandWork
        (
        );
        /** Adjusts the center and scale of each view in the current layout such that all of each
            view is visible, except that this fit operation is not applied to member views on a drawing.
            If the work view is in expand state when this method is called, the work view is unexpanded
            before all of the views are fit.
             <br>  In batch mode, the data for each view is updated, but no display occurs.  <br>  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void FitAll
        (
        );
        /** Regenerates the display of each view in the current layout.  The current scale of each
            view is used in determing the tolerances for rendering curves and facets within the view.
             <br>  In batch mode, the state of each view is updated, but no display occurs.  <br> 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void Regenerate
        (
        );
        /** Updates the display of each view in the current layout.  This method redisplays
            those objects whose display has become out of date due to rotations of the view or
            increases in view scale.  For example: Following a rotation, the silhouettes of bodies
            in wireframe mode will be updated;  Following a significant scale increase, the faces
            of a body in shaded mode will be tessalated with tighter tolerances.
             <br>  In batch mode, the state of each view is updated, but no display occurs.  <br> 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateDisplay
        (
        );
        /** Creates a @link NXOpen::Display::Scene NXOpen::Display::Scene@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::Scene * CreateScene
        (
            NXOpen::View * view /** view to which scene data will be associated */,
            bool makeReferencedObjects /** true if scene objects are to be created */
        );
        /** Creates a @link NXOpen::Display::Background NXOpen::Display::Background@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::Background * CreateBackground
        (
            NXOpen::View * view /** view to which background data will be associated */,
            bool makeReferencedObjects /** true if referenced image object is to be created */
        );
        /** Creates a @link NXOpen::Display::Shadows NXOpen::Display::Shadows@endlink  
         <br>  Created in NX7.5.3.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::Shadows * CreateShadows
        (
            NXOpen::View * view /** view to which shadows data will be associated */
        );
        /** Creates a @link NXOpen::Display::Image NXOpen::Display::Image@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::Image * CreateImage
        (
            NXOpen::View * view /** view to which image data will be associated */
        );
        /** Creates a @link NXOpen::Display::Stage NXOpen::Display::Stage@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::Stage * CreateStage
        (
            NXOpen::View * view /** view to which stage data will be associated */,
            bool makeReferencedObjects /** true if first wall's image object is to be created */
        );
        /** Creates a @link NXOpen::Display::Wall NXOpen::Display::Wall@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::Wall * CreateWall
        (
            NXOpen::View * view /** view to which stage data will be associated */,
            NXOpen::Display::Stage::WallType wallType /** where the wall sits in the Display.Stage */
        );
        /** Creates a @link NXOpen::Display::Reflection NXOpen::Display::Reflection@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::Reflection * CreateReflection
        (
            NXOpen::View * view /** view to which reflection data will be associated */,
            bool makeReferencedObjects /** true if referenced image object is to be created */
        );
        /** Creates a @link NXOpen::Display::Lighting NXOpen::Display::Lighting@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::Lighting * CreateLighting
        (
            NXOpen::View * view /** view to which lighting data will be associated */
        );
        /** Creates a @link NXOpen::Display::LightBuilder NXOpen::Display::LightBuilder@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::LightBuilder * CreateLightBuilder
        (
            NXOpen::Light * light /** light for which data will be modified */
        );
        /** Creates a @link NXOpen::Display::ImageBasedLighting NXOpen::Display::ImageBasedLighting@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::ImageBasedLighting * CreateImageBasedLighting
        (
            NXOpen::View * view /** view to which image-based lighting data will be associated */,
            bool makeReferencedObjects /** true if referenced image object is to be created */
        );
        /** Creates a @link NXOpen::Display::ExtractScene NXOpen::Display::ExtractScene@endlink  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::ExtractScene * CreateExtractScene
        (
            NXOpen::View * view /** view to which to extract the scene data will be associated */
        );
        /** Creates a @link NXOpen::Display::NonProportionalZoom NXOpen::Display::NonProportionalZoom@endlink  
         <br>  Created in NX7.0.0.  <br>  
         <br> License requirements : studio_analyze ("STUDIO ANALYZE") */
        public: NXOpen::Display::NonProportionalZoom * CreateNonProportionalZoom
        (
        );
        /** Creates a @link NXOpen::Display::StudioImageCaptureBuilder NXOpen::Display::StudioImageCaptureBuilder@endlink  
         <br>  Created in NX6.0.4.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::StudioImageCaptureBuilder * CreateStudioImageCaptureBuilder
        (
        );
        /** Preserve case for user defined view names. @return  Newly created view
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::View * SaveAsPreservingCase
        (
            NXOpen::View * selectedView /** Selected view  */,
            const NXString & newViewName /** Selected name of the view  */,
            bool copyViewModifications /** True if view modifications to be copied */,
            bool moveViewDependencies /** True if view dependencies to be moved */
        );
        /** Preserve case for user defined view names. @return  Newly created view
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::View * SaveAsPreservingCase
        (
            NXOpen::View * selectedView /** Selected view  */,
            const char * newViewName /** Selected name of the view  */,
            bool copyViewModifications /** True if view modifications to be copied */,
            bool moveViewDependencies /** True if view dependencies to be moved */
        );
        /** Creates a @link NXOpen::Display::RayTracedStudioBuilder NXOpen::Display::RayTracedStudioBuilder@endlink  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::RayTracedStudioBuilder * CreateRayTracedStudioBuilder
        (
        );
        /** Creates a @link NXOpen::Display::SaveImageFileBrowserBuilder NXOpen::Display::SaveImageFileBrowserBuilder@endlink  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::SaveImageFileBrowserBuilder * CreateSaveImageFileBrowserBuilder
        (
        );
        /** Creates a @link NXOpen::Display::GlobalIlluminationBuilder NXOpen::Display::GlobalIlluminationBuilder@endlink  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::GlobalIlluminationBuilder * CreateGlobalIlluminationBuilder
        (
        );
        /** Creates a @link NXOpen::Display::RayTracedStudioEditorBuilder NXOpen::Display::RayTracedStudioEditorBuilder@endlink  
         <br>  Created in NX9.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::RayTracedStudioEditorBuilder * CreateRayTracedStudioEditorBuilder
        (
        );
        /** Creates a @link NXOpen::Display::EnvironmentBuilder NXOpen::Display::EnvironmentBuilder@endlink  
         <br>  Created in NX10.0.2.  <br>  
         <br> License requirements : studio_render ("UG STUDIO RENDER") */
        public: NXOpen::Display::EnvironmentBuilder * CreateEnvironmentBuilder
        (
            NXOpen::View * view /** view to which image-based lighting data will be associated */,
            bool makeReferencedObjects /** true if referenced image object is to be created */
        );
        /** Creates a @link NXOpen::Display::IRayPlusStudioEditorBuilder NXOpen::Display::IRayPlusStudioEditorBuilder@endlink  
         <br>  Created in NX10.0.2.  <br>  
         <br> License requirements : studio_render ("UG STUDIO RENDER") */
        public: NXOpen::Display::IRayPlusStudioEditorBuilder * CreateIrayPlusStudioEditorBuilder
        (
        );
        /** Creates a @link NXOpen::Display::IrayPlusSimpleMaterialEditorBuilder NXOpen::Display::IrayPlusSimpleMaterialEditorBuilder@endlink  
         <br>  Created in NX10.0.2.  <br>  
         <br> License requirements : studio_render ("UG STUDIO RENDER") */
        public: NXOpen::Display::IrayPlusSimpleMaterialEditorBuilder * CreateIrayPlusSimpleMaterialEditorBuilder
        (
        );
        /** Creates a @link NXOpen::Display::IrayPlusMaterialEditorBuilder NXOpen::Display::IrayPlusMaterialEditorBuilder@endlink  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : studio_render ("UG STUDIO RENDER") */
        public: NXOpen::Display::IrayPlusMaterialEditorBuilder * CreateIrayPlusMaterialEditorBuilder
        (
            const NXString & materialName /** materialname */ 
        );
        /** Creates a @link NXOpen::Display::IrayPlusMaterialEditorBuilder NXOpen::Display::IrayPlusMaterialEditorBuilder@endlink  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : studio_render ("UG STUDIO RENDER") */
        NXOpen::Display::IrayPlusMaterialEditorBuilder * CreateIrayPlusMaterialEditorBuilder
        (
            const char * materialName /** materialname */ 
        );
        /** Get disclosed model views in the given part. 
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::View *> GetDisclosedModelViews
        (
        );
        /** Get disclosed model views and their purposes in the given part. 
         <br>  Created in NX11.0.1.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::View *> GetDisclosedModelViewsAndPurposes
        (
            std::vector<NXString> & disclosurePurposes /** disclosurepurposes */ 
        );
        /** Creates high end rendered image of a model 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : studio_render ("UG STUDIO RENDER") */
        public: NXOpen::ViewCollection::HighEndRenderImageResults CreateHighEndRenderImage
        (
            const NXString & fileLocation /** Define directory to save the render image to */
        );
        /** Creates high end rendered image of a model 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : studio_render ("UG STUDIO RENDER") */
        NXOpen::ViewCollection::HighEndRenderImageResults CreateHighEndRenderImage
        (
            const char * fileLocation /** Define directory to save the render image to */
        );
        /** Destroys the high end render session 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : studio_render ("UG STUDIO RENDER") */
        public: void DestroyHighEndRenderSession
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
