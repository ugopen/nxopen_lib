#ifndef NXOpen_CAE_MODELUPDATEDESIGNVARIABLESRAPIDCREATEBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELUPDATEDESIGNVARIABLESRAPIDCREATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelUpdateDesignVariablesRapidCreateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModelUpdateDesignVariablesRapidCreateBuilder;
    }
    class Builder;
    namespace CAE
    {
        class _ModelUpdateDesignVariablesRapidCreateBuilderBuilder;
        class ModelUpdateDesignVariablesRapidCreateBuilderImpl;
        /** This class is the builder that is used for the rapid creation of design variables.  <br> To create a new instance of this class, use @link NXOpen::CAE::CorrelManager::CreateModelUpdateDesignVariablesRapidCreateBuilderBuilder  NXOpen::CAE::CorrelManager::CreateModelUpdateDesignVariablesRapidCreateBuilderBuilder @endlink  <br> 
         <br>  Created in NX8.0.1.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModelUpdateDesignVariablesRapidCreateBuilder : public NXOpen::Builder
        {
            /** The enum for the design variable type. */
            public: enum DesignVariableTypeEnum
            {
                DesignVariableTypeEnumMaterial/** material */ ,
                DesignVariableTypeEnumPhysical/** physical */ 
            };

            /** The enum for the material type. */
            public: enum MaterialTypesEnum
            {
                MaterialTypesEnumMat1/** mat1 */ ,
                MaterialTypesEnumMat2/** mat2 */ ,
                MaterialTypesEnumMat3/** mat3 */ ,
                MaterialTypesEnumMat8/** mat8 */ ,
                MaterialTypesEnumMat9/** mat9 */ 
            };

            /** The enum for the physical type. */
            public: enum PhysicalTypesEnum
            {
                PhysicalTypesEnumPbar/** pbar */ ,
                PhysicalTypesEnumPbarl/** pbarl */ ,
                PhysicalTypesEnumPbeam/** pbeam */ ,
                PhysicalTypesEnumPbeaml/** pbeaml */ ,
                PhysicalTypesEnumPbush/** pbush */ ,
                PhysicalTypesEnumPdamp/** pdamp */ ,
                PhysicalTypesEnumPelas/** pelas */ ,
                PhysicalTypesEnumPgap/** pgap */ ,
                PhysicalTypesEnumPmass/** pmass */ ,
                PhysicalTypesEnumProd/** prod */ ,
                PhysicalTypesEnumPshear/** pshear */ ,
                PhysicalTypesEnumPshell/** pshell */ ,
                PhysicalTypesEnumPtube/** ptube */ ,
                PhysicalTypesEnumPvisc/** pvisc */ 
            };

            private: ModelUpdateDesignVariablesRapidCreateBuilderImpl * m_modelupdatedesignvariablesrapidcreatebuilder_impl;
            private: friend class  _ModelUpdateDesignVariablesRapidCreateBuilderBuilder;
            protected: ModelUpdateDesignVariablesRapidCreateBuilder();
            public: ~ModelUpdateDesignVariablesRapidCreateBuilder();
            /**Returns  the name seed 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXString NameSeed
            (
            );
            /**Sets  the name seed 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetNameSeed
            (
                const NXString & title /** title */ 
            );
            /**Sets  the name seed 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            void SetNameSeed
            (
                const char * title /** title */ 
            );
            /**Returns  the design variable type 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelUpdateDesignVariablesRapidCreateBuilder::DesignVariableTypeEnum DesignVariableType
            (
            );
            /**Sets  the design variable type 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetDesignVariableType
            (
                NXOpen::CAE::ModelUpdateDesignVariablesRapidCreateBuilder::DesignVariableTypeEnum designVariableType /** designvariabletype */ 
            );
            /**Returns  the card name 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXString CardName
            (
            );
            /**Sets  the card name 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetCardName
            (
                const NXString & cardName /** cardname */ 
            );
            /**Sets  the card name 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            void SetCardName
            (
                const char * cardName /** cardname */ 
            );
            /**Returns  the initial value 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: double InitialValue
            (
            );
            /**Sets  the initial value 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetInitialValue
            (
                double initialValue /** initialvalue */ 
            );
            /**Returns  the has initial value 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool HasInitialValue
            (
            );
            /**Sets  the has initial value 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetHasInitialValue
            (
                bool initialValue /** initialvalue */ 
            );
            /**Returns  the lower bound 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: double LowerBound
            (
            );
            /**Sets  the lower bound 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetLowerBound
            (
                double lowerBound /** lowerbound */ 
            );
            /**Returns  the has lower bound 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool HasLowerBound
            (
            );
            /**Sets  the has lower bound 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetHasLowerBound
            (
                bool lowerBound /** lowerbound */ 
            );
            /**Returns  the upper bound 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: double UpperBound
            (
            );
            /**Sets  the upper bound 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetUpperBound
            (
                double upperBound /** upperbound */ 
            );
            /**Returns  the has upper bound 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool HasUpperBound
            (
            );
            /**Sets  the has upper bound 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetHasUpperBound
            (
                bool upperBound /** upperbound */ 
            );
            /**Returns  the material types 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelUpdateDesignVariablesRapidCreateBuilder::MaterialTypesEnum MaterialTypes
            (
            );
            /**Sets  the material types 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetMaterialTypes
            (
                NXOpen::CAE::ModelUpdateDesignVariablesRapidCreateBuilder::MaterialTypesEnum materialTypes /** materialtypes */ 
            );
            /**Returns  the physical types 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelUpdateDesignVariablesRapidCreateBuilder::PhysicalTypesEnum PhysicalTypes
            (
            );
            /**Sets  the physical types 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SetPhysicalTypes
            (
                NXOpen::CAE::ModelUpdateDesignVariablesRapidCreateBuilder::PhysicalTypesEnum physicalTypes /** physicaltypes */ 
            );
            /** This command selects one entity. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SelectEntity
            (
                const NXString & entityName /** entityname */ 
            );
            /** This command selects one entity. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            void SelectEntity
            (
                const char * entityName /** entityname */ 
            );
            /** This command selects all the entities. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SelectAllEntities
            (
            );
            /** This command deselects all the entities. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void DeselectAllEntities
            (
            );
            /** This command selects one field. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SelectField
            (
                const NXString & field /** field */ 
            );
            /** This command selects one field. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            void SelectField
            (
                const char * field /** field */ 
            );
            /** This command selects all the fields. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void SelectAllFields
            (
            );
            /** This command deselects all the fields. 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_correl_update ("FE Model Update") */
            public: void DeselectAllFields
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
