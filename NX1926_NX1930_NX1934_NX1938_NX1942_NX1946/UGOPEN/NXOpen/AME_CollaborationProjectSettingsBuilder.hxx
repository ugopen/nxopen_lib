#ifndef NXOpen_AME_COLLABORATIONPROJECTSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_AME_COLLABORATIONPROJECTSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_CollaborationProjectSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_MappingSourceBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class CollaborationProjectSettingsBuilder;
    }
    class Builder;
    namespace AME
    {
        class _CollaborationProjectSettingsBuilderBuilder;
        class CollaborationProjectSettingsBuilderImpl;
        /** This builder class is used for setting type mapping configurations
                for external mechanical and excel data. It is also used for setting
                smart filter configurations.
             <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateCollaborationProjectSettingsBuilder  NXOpen::AME::AMEManager::CreateCollaborationProjectSettingsBuilder @endlink  <br> 
         <br>  Created in NX1899.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  CollaborationProjectSettingsBuilder : public NXOpen::Builder
        {
            /** possible choices for filter type */
            public: enum FilterMode
            {
                FilterModeFilterOnClassificationClass/** filter on classification class */ ,
                FilterModeFilterOnProperty/** filter on property */ 
            };

            /** possible choices for show objects setting */
            public: enum ResultsSetting
            {
                ResultsSettingDefineFilterValues/** define filter values */ ,
                ResultsSettingShowObjectsIfNotEmpty/** show objects if not empty */ 
            };

            private: CollaborationProjectSettingsBuilderImpl * m_collaborationprojectsettingsbuilder_impl;
            private: friend class  _CollaborationProjectSettingsBuilderBuilder;
            protected: CollaborationProjectSettingsBuilder();
            public: ~CollaborationProjectSettingsBuilder();
            /**Returns  the functions to Get/Set the @link NXOpen::AME::MappingSourceBuilder::MappingMode NXOpen::AME::MappingSourceBuilder::MappingMode@endlink  for Mechanical Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::MappingSourceBuilder::MappingMode TypeMappingModeForMechanicalData
            (
            );
            /**Sets  the functions to Get/Set the @link NXOpen::AME::MappingSourceBuilder::MappingMode NXOpen::AME::MappingSourceBuilder::MappingMode@endlink  for Mechanical Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTypeMappingModeForMechanicalData
            (
                NXOpen::AME::MappingSourceBuilder::MappingMode mode /** mode */ 
            );
            /**Returns  the property to use for type mapping by mechanical or automation id for Mechanical Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString MappingPropertyForMechanicalData
            (
            );
            /**Sets  the property to use for type mapping by mechanical or automation id for Mechanical Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMappingPropertyForMechanicalData
            (
                const NXString & mappingProperty /** mappingproperty */ 
            );
            /**Sets  the property to use for type mapping by mechanical or automation id for Mechanical Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetMappingPropertyForMechanicalData
            (
                const char * mappingProperty /** mappingproperty */ 
            );
            /**Returns  the functions to Get/Set the @link NXOpen::AME::MappingSourceBuilder::MappingMode NXOpen::AME::MappingSourceBuilder::MappingMode@endlink  for Excel Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::MappingSourceBuilder::MappingMode TypeMappingModeForExcelData
            (
            );
            /**Sets  the functions to Get/Set the @link NXOpen::AME::MappingSourceBuilder::MappingMode NXOpen::AME::MappingSourceBuilder::MappingMode@endlink  for Excel Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTypeMappingModeForExcelData
            (
                NXOpen::AME::MappingSourceBuilder::MappingMode mode /** mode */ 
            );
            /**Returns  the property to use for type mapping by mechanical or automation id for Excel Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString MappingPropertyForExcelData
            (
            );
            /**Sets  the property to use for type mapping by mechanical or automation id for Excel Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetMappingPropertyForExcelData
            (
                const NXString & mappingProperty /** mappingproperty */ 
            );
            /**Sets  the property to use for type mapping by mechanical or automation id for Excel Data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetMappingPropertyForExcelData
            (
                const char * mappingProperty /** mappingproperty */ 
            );
            /**Returns  the property to enable or disable smart filter 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool EnableSmartFilter
            (
            );
            /**Sets  the property to enable or disable smart filter 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetEnableSmartFilter
            (
                bool enableFilterSetting /** enablefiltersetting */ 
            );
            /**Returns  the functions to Get/Set the @link NXOpen::AME::CollaborationProjectSettingsBuilder::FilterMode NXOpen::AME::CollaborationProjectSettingsBuilder::FilterMode@endlink  for filter type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CollaborationProjectSettingsBuilder::FilterMode FilterType
            (
            );
            /**Sets  the functions to Get/Set the @link NXOpen::AME::CollaborationProjectSettingsBuilder::FilterMode NXOpen::AME::CollaborationProjectSettingsBuilder::FilterMode@endlink  for filter type 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFilterType
            (
                NXOpen::AME::CollaborationProjectSettingsBuilder::FilterMode filterType /** filtertype */ 
            );
            /**Returns  the property to get or set the property name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString PropertyName
            (
            );
            /**Sets  the property to get or set the property name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertyName
            (
                const NXString & propertyName /** propertyname */ 
            );
            /**Sets  the property to get or set the property name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetPropertyName
            (
                const char * propertyName /** propertyname */ 
            );
            /**Returns  the property to get or set @link NXOpen::AME::CollaborationProjectSettingsBuilder::ResultsSetting NXOpen::AME::CollaborationProjectSettingsBuilder::ResultsSetting@endlink  show objects setting 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::CollaborationProjectSettingsBuilder::ResultsSetting ShowObjectsSetting
            (
            );
            /**Sets  the property to get or set @link NXOpen::AME::CollaborationProjectSettingsBuilder::ResultsSetting NXOpen::AME::CollaborationProjectSettingsBuilder::ResultsSetting@endlink  show objects setting 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetShowObjectsSetting
            (
                NXOpen::AME::CollaborationProjectSettingsBuilder::ResultsSetting showObjectsSetting /** showobjectssetting */ 
            );
            /** The filter values for smart filter settings 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXString> GetFilterValues
            (
            );
            /** The filter values for smart filter settings 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFilterValues
            (
                std::vector<NXString> & filterValues /** filtervalues */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
