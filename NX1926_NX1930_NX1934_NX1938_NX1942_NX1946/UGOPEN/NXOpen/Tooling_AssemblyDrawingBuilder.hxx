#ifndef NXOpen_TOOLING_ASSEMBLYDRAWINGBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_ASSEMBLYDRAWINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_AssemblyDrawingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Tooling_BomListDataProvider.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class AssemblyDrawingBuilder;
    }
    class Builder;
    class NXObject;
    class Point;
    namespace Tooling
    {
        class BomListDataProvider;
    }
    namespace Tooling
    {
        class _AssemblyDrawingBuilderBuilder;
        class AssemblyDrawingBuilderImpl;
        /**
              Represents a @link NXOpen::Tooling::AssemblyDrawingBuilder NXOpen::Tooling::AssemblyDrawingBuilder@endlink  which is 
              used to create or edit the Assembly Drawing.
             <br> To create a new instance of this class, use @link NXOpen::Tooling::ToolingDrawingCollection::CreateAssemblyDrawingBuilder  NXOpen::Tooling::ToolingDrawingCollection::CreateAssemblyDrawingBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DoubleViewScale </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        EnumAttributeName </term> <description> 
         
        MwSide </description> </item> 

        <item><term> 
         
        EnumAttributeValue </term> <description> 
         
        A </description> </item> 

        <item><term> 
         
        EnumDrawingType </term> <description> 
         
        MasterModel </description> </item> 

        <item><term> 
         
        EnumSheets </term> <description> 
         
        CreateNew </description> </item> 

        <item><term> 
         
        ModelViewToUse </term> <description> 
         
        Top </description> </item> 

        <item><term> 
         
        SheetsNumber </term> <description> 
         
        One </description> </item> 

        <item><term> 
         
        TgShowA </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TgShowB </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TgShowC </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ToggleBlankComponentsWithAttribute </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ToggleCreateFourSheets </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ToggleListDependents </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ToggleShowOnly </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ViewOption </term> <description> 
         
        DefaultView </description> </item> 

        <item><term> 
         
        ViewScale </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  AssemblyDrawingBuilder : public NXOpen::Builder
        {
            /** Specifies the filter of assembly.*/
            public: enum Types
            {
                TypesVisibility/** visibility */ ,
                TypesDrawing/** drawing */ ,
                TypesView/** view */ 
            };

            /** Specifies the drawing type.*/
            public: enum DrawingTypes
            {
                DrawingTypesMasterModel/** master model */ ,
                DrawingTypesSelfContained/** self contained */ 
            };

            /** Specifies the sheet operation.*/
            public: enum DrawingCreateOrEdit
            {
                DrawingCreateOrEditCreateNew/** create new */ ,
                DrawingCreateOrEditSh1/** sh1 */ 
            };

            /** Specifies the attribute name*/
            public: enum AttributeNames
            {
                AttributeNamesMwSide/** mw side */ ,
                AttributeNamesMwComponentName/** mw component name */ 
            };

            /** Specifies the attribute value.*/
            public: enum AttributeValues
            {
                AttributeValuesA/** a */ ,
                AttributeValuesB/** b */ ,
                AttributeValuesHide/** hide */ 
            };

            /** Specifies the view options.*/
            public: enum ViewOptionValue
            {
                ViewOptionValueDefaultView/** default view */ ,
                ViewOptionValueBaseViewTool/** base view tool */ 
            };

            /** Specifies the model view to use.*/
            public: enum ModelViewToUseValue
            {
                ModelViewToUseValueTop/** top */ ,
                ModelViewToUseValueFront/** front */ ,
                ModelViewToUseValueRight/** right */ ,
                ModelViewToUseValueBack/** back */ ,
                ModelViewToUseValueBottom/** bottom */ ,
                ModelViewToUseValueLeft/** left */ ,
                ModelViewToUseValueIsometric/** isometric */ ,
                ModelViewToUseValueTrimetric/** trimetric */ 
            };

            /** The number of sheets. */
            public: enum SheetsNum
            {
                SheetsNumOne/** one sheets */,
                SheetsNumTwo/** two sheets */,
                SheetsNumThree/** three sheets */,
                SheetsNumFour/** four sheets */
            };

            /** Represents an enumeration indicating whether the sorting needs to be performed in ascending or descending order. */
            public: enum BomListSortOption
            {
                BomListSortOptionUnsorted/** Unsorted */,
                BomListSortOptionAscending/** Ascending */,
                BomListSortOptionDescending/** Descending */
            };

            /** Represents an index to components list type. */
            public: enum BomListTypes
            {
                BomListTypesBomList/** A list includes components in BOM */,
                BomListTypesHideList/** A list includes hidden components */
            };

            private: AssemblyDrawingBuilderImpl * m_assemblydrawingbuilder_impl;
            private: friend class  _AssemblyDrawingBuilderBuilder;
            protected: AssemblyDrawingBuilder();
            public: ~AssemblyDrawingBuilder();
            /**Returns  the option for the assembly drawing operation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AssemblyDrawingBuilder::DrawingTypes EnumDrawingType
            (
            );
            /**Sets  the option for the assembly drawing operation 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEnumDrawingType
            (
                NXOpen::Tooling::AssemblyDrawingBuilder::DrawingTypes enumDrawingType /** enumdrawingtype */ 
            );
            /** Create a new master model file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void NewMasterModelFile
            (
                const NXString & masterModelFileName /** mastermodelfilename */ 
            );
            /** Create a new master model file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void NewMasterModelFile
            (
                const char * masterModelFileName /** mastermodelfilename */ 
            );
            /** Open the master model file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void OpenMasterModelFile
            (
                const NXString & masterModelFileName /** mastermodelfilename */ 
            );
            /** Open the master model file 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void OpenMasterModelFile
            (
                const char * masterModelFileName /** mastermodelfilename */ 
            );
            /**Returns  the option for select the sheet 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AssemblyDrawingBuilder::DrawingCreateOrEdit EnumSheets
            (
            );
            /**Sets  the option for select the sheet 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEnumSheets
            (
                NXOpen::Tooling::AssemblyDrawingBuilder::DrawingCreateOrEdit enumSheets /** enumsheets */ 
            );
            /**Returns  the sheet name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString StringSheetName
            (
            );
            /**Sets  the sheet name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStringSheetName
            (
                const NXString & stringSheetName /** stringsheetname */ 
            );
            /**Sets  the sheet name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetStringSheetName
            (
                const char * stringSheetName /** stringsheetname */ 
            );
            /** Delete the sheet 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DeleteSheet
            (
                const NXString & selectedSheetName /** selectedsheetname */ 
            );
            /** Delete the sheet 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void DeleteSheet
            (
                const char * selectedSheetName /** selectedsheetname */ 
            );
            /**Returns  the string name rule 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString StringNameRule
            (
            );
            /**Sets  the string name rule 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStringNameRule
            (
                const NXString & stringNameRule /** stringnamerule */ 
            );
            /**Sets  the string name rule 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetStringNameRule
            (
                const char * stringNameRule /** stringnamerule */ 
            );
            /**Returns  the Filter rule 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXString StringFilterRule
            (
            );
            /**Sets  the Filter rule 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStringFilterRule
            (
                const NXString & stringFilterRule /** stringfilterrule */ 
            );
            /**Sets  the Filter rule 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetStringFilterRule
            (
                const char * stringFilterRule /** stringfilterrule */ 
            );
            /**Returns  the List dependents 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleListDependents
            (
            );
            /**Sets  the List dependents 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToggleListDependents
            (
                bool toggleListDependents /** togglelistdependents */ 
            );
            /**Returns  the only show components with attribute toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleShowOnly
            (
            );
            /**Sets  the only show components with attribute toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToggleShowOnly
            (
                bool showOnly /** showonly */ 
            );
            /**Returns  the blank components with attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleBlankComponentsWithAttribute
            (
            );
            /**Sets  the blank components with attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToggleBlankComponentsWithAttribute
            (
                bool toggleBlankComponentsWithAttribute /** toggleblankcomponentswithattribute */ 
            );
            /**Returns  the option for select the attribute name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AssemblyDrawingBuilder::AttributeNames EnumAttributeName
            (
            );
            /**Sets  the option for select the attribute name 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEnumAttributeName
            (
                NXOpen::Tooling::AssemblyDrawingBuilder::AttributeNames enumAttributeName /** enumattributename */ 
            );
            /**Returns  the option for select the attribute value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AssemblyDrawingBuilder::AttributeValues EnumAttributeValue
            (
            );
            /**Sets  the option for select the attribute value 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEnumAttributeValue
            (
                NXOpen::Tooling::AssemblyDrawingBuilder::AttributeValues enumAttributeValue /** enumattributevalue */ 
            );
            /**Returns  the option for view tools 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AssemblyDrawingBuilder::ViewOptionValue ViewOption
            (
            );
            /**Sets  the option for view tools 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetViewOption
            (
                NXOpen::Tooling::AssemblyDrawingBuilder::ViewOptionValue viewOptionValue /** viewoptionvalue */ 
            );
            /** The option for add section view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AddSectionView
            (
            );
            /** The option for add view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AddView
            (
                NXOpen::NXObject * viewTag /** viewtag */ ,
                const NXString & attrName /** attrname */ ,
                std::vector<NXString> & componentType /** componenttype */ 
            );
            /** The option for add view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void AddView
            (
                NXOpen::NXObject * viewTag /** viewtag */ ,
                const char * attrName /** attrname */ ,
                std::vector<NXString> & componentType /** componenttype */ 
            );
            /**Returns  a double view scale 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: double DoubleViewScale
            (
            );
            /**Sets  a double view scale 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDoubleViewScale
            (
                double doubleViewScale /** doubleviewscale */ 
            );
            /**Returns  the A attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TgShowA
            (
            );
            /**Sets  the A attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTgShowA
            (
                bool tgShowA /** tgshowa */ 
            );
            /**Returns  the B attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TgShowB
            (
            );
            /**Sets  the B attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTgShowB
            (
                bool tgShowB /** tgshowb */ 
            );
            /**Returns  the view location 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ViewLocation
            (
            );
            /**Sets  the view location 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetViewLocation
            (
                NXOpen::Point * viewLocation /** viewlocation */ 
            );
            /**Returns  the option for model view to use 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AssemblyDrawingBuilder::ModelViewToUseValue ModelViewToUse
            (
            );
            /**Sets  the option for model view to use 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetModelViewToUse
            (
                NXOpen::Tooling::AssemblyDrawingBuilder::ModelViewToUseValue modelViewToUseValue /** modelviewtousevalue */ 
            );
            /**Returns  the option for the Assembly drawing operation
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AssemblyDrawingBuilder::Types Type
            (
            );
            /**Sets  the option for the Assembly drawing operation
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::AssemblyDrawingBuilder::Types type /** type */ 
            );
            /** Retrieve the sheet 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void RetrieveSheet
            (
                const NXString & selectedSheetName /** selectedsheetname */ 
            );
            /** Retrieve the sheet 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void RetrieveSheet
            (
                const char * selectedSheetName /** selectedsheetname */ 
            );
            /** Create drawing 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateDrawing
            (
                const NXString & sheetName /** sheetname */ ,
                const NXString & templateName /** templatename */ 
            );
            /** Create drawing 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void CreateDrawing
            (
                const char * sheetName /** sheetname */ ,
                const char * templateName /** templatename */ 
            );
            /** Edit drawing 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void EditDrawing
            (
                const NXString & sheetName /** sheetname */ ,
                const NXString & templateName /** templatename */ 
            );
            /** Edit drawing 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void EditDrawing
            (
                const char * sheetName /** sheetname */ ,
                const char * templateName /** templatename */ 
            );
            /** Assign attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AssignAttr
            (
                const std::vector<NXOpen::NXObject *> & selectdObjs /** selectdobjs */ ,
                const NXString & attrName /** attrname */ ,
                const NXString & attrValue /** attrvalue */ 
            );
            /** Assign attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void AssignAttr
            (
                const std::vector<NXOpen::NXObject *> & selectdObjs /** selectdobjs */ ,
                const char * attrName /** attrname */ ,
                const char * attrValue /** attrvalue */ 
            );
            /** Create view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateView
            (
                const NXString & viewName /** viewname */ ,
                double viewScale /** viewscale */ 
            );
            /** Create view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void CreateView
            (
                const char * viewName /** viewname */ ,
                double viewScale /** viewscale */ 
            );
            /** Delete view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DeleteView
            (
                const NXString & viewName /** viewname */ 
            );
            /** Delete view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void DeleteView
            (
                const char * viewName /** viewname */ 
            );
            /** Create section view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateSectionView
            (
                const NXString & viewName /** viewname */ ,
                NXOpen::NXObject * parentView /** parentview */ ,
                const std::vector<double> & stepDirection /** stepdirection */ ,
                const std::vector<double> & arrowdirection /** arrowdirection */ ,
                const std::vector<double> & pointX /** pointx */ ,
                const std::vector<double> & pointY /** pointy */ ,
                const std::vector<double> & pointZ /** pointz */ ,
                const std::vector<int> & segmentType /** segmenttype */ ,
                const NXString & attrName /** attrname */ ,
                std::vector<NXString> & attrValueList /** attrvaluelist */ 
            );
            /** Create section view 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void CreateSectionView
            (
                const char * viewName /** viewname */ ,
                NXOpen::NXObject * parentView /** parentview */ ,
                const std::vector<double> & stepDirection /** stepdirection */ ,
                const std::vector<double> & arrowdirection /** arrowdirection */ ,
                const std::vector<double> & pointX /** pointx */ ,
                const std::vector<double> & pointY /** pointy */ ,
                const std::vector<double> & pointZ /** pointz */ ,
                const std::vector<int> & segmentType /** segmenttype */ ,
                const char * attrName /** attrname */ ,
                std::vector<NXString> & attrValueList /** attrvaluelist */ 
            );
            /** Create view to show components 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::NXObject * CreateViewToShowComponents
            (
                const NXString & viewName /** viewname */ 
            );
            /** Create view to show components 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            NXOpen::NXObject * CreateViewToShowComponents
            (
                const char * viewName /** viewname */ 
            );
            /**Returns  the section view button clicked attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool SectionViewButtonClicked
            (
            );
            /**Sets  the section view button clicked attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSectionViewButtonClicked
            (
                bool sectionViewButtonClicked /** sectionviewbuttonclicked */ 
            );
            /**Returns  the delete button clicked attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool DeleteButtonClicked
            (
            );
            /**Sets  the delete button clicked attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDeleteButtonClicked
            (
                bool deleteButtonClicked /** deletebuttonclicked */ 
            );
            /**Returns  the scale modified attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ScaleModified
            (
            );
            /**Sets  the scale modified attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetScaleModified
            (
                bool scaleModified /** scalemodified */ 
            );
            /**Returns  the wizard type attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type attribute 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /** Update event for show only true 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateEventForShowOnlyTrue
            (
                std::vector<NXString> & attributeNames /** attributenames */ ,
                std::vector<NXString> & attributeValues /** attributevalues */ ,
                const std::vector<NXOpen::NXObject *> & allComps /** all comps */ 
            );
            /** Update event for show only 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateEventForShowOnly
            (
                std::vector<NXString> & attributeNames /** attributenames */ ,
                std::vector<NXString> & attributeValues /** attributevalues */ ,
                const std::vector<NXOpen::NXObject *> & allComps /** all comps */ 
            );
            /** Update event for blank componets with attributes 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UpdateEventForBlankComponetsWithAttributes
            (
                std::vector<NXString> & attributeNames /** attributenames */ ,
                std::vector<NXString> & attributeValues /** attributevalues */ ,
                const std::vector<NXOpen::NXObject *> & allComps /** all comps */ 
            );
            /** Update event for unhighlight occurrence o fselected part occurrences 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UnhighlightOccOfSelectedPartOccs
            (
                std::vector<NXString> & attributeNames /** attributenames */ ,
                std::vector<NXString> & attributeValues /** attributevalues */ ,
                int indexAttributeName /** indexattributename */ ,
                int indexAttributeValue /** indexattributevalue */ ,
                NXOpen::NXObject * partOccTag /** partocctag */ ,
                bool unhighlight /** unhighlight */ 
            );
            /**Returns  the sheets number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::AssemblyDrawingBuilder::SheetsNum SheetsNumber
            (
            );
            /**Sets  the sheets number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSheetsNumber
            (
                NXOpen::Tooling::AssemblyDrawingBuilder::SheetsNum sheetsNumber /** sheetsnumber */ 
            );
            /** Set the selected arrangement as current used one. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void UseArrangement
            (
            );
            /**Returns  the new name of the selected arrangement. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewArrangementName
            (
            );
            /**Sets  the new name of the selected arrangement. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewArrangementName
            (
                const NXString & newArrangementrName /** newarrangementrname */ 
            );
            /**Sets  the new name of the selected arrangement. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetNewArrangementName
            (
                const char * newArrangementrName /** newarrangementrname */ 
            );
            /**Returns  the data provider of BOM 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BomListDataProvider * BomListDataProvider
            (
            );
            /** Populates BOM list data according to current template. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void PopulateBomListData
            (
            );
            /**Returns  the template file of bom
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BomTemplate
            (
            );
            /**Sets  the template file of bom
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBomTemplate
            (
                const NXString & bomTemplate /** bomtemplate */ 
            );
            /**Sets  the template file of bom
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetBomTemplate
            (
                const char * bomTemplate /** bomtemplate */ 
            );
            /**Returns  the name of the selected changeover arrangement. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedArrangementName
            (
            );
            /**Sets  the name of the selected changeover arrangement. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectedArrangementName
            (
                const NXString & arrangementName /** arrangementname */ 
            );
            /**Sets  the name of the selected changeover arrangement. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetSelectedArrangementName
            (
                const char * arrangementName /** arrangementname */ 
            );
            /** Create drawing with specified sheet number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateDrawing
            (
                const NXString & sheetName /** sheetname */ ,
                const NXString & templateName /** templatename */ ,
                int sheetsNumber /** sheetsnumber */ 
            );
            /** Create drawing with specified sheet number 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void CreateDrawing
            (
                const char * sheetName /** sheetname */ ,
                const char * templateName /** templatename */ ,
                int sheetsNumber /** sheetsnumber */ 
            );
            /**Returns  the C attribute 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool TgShowC
            (
            );
            /**Sets  the C attribute 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTgShowC
            (
                bool tgShowC /** tgshowc */ 
            );
            /**Returns  the only show components with attribute toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ToggleCreateFourSheets
            (
            );
            /**Sets  the only show components with attribute toggle 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetToggleCreateFourSheets
            (
                bool createFourSheets /** createfoursheets */ 
            );
            /**Returns  a view scale for create views automatically 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: double ViewScale
            (
            );
            /**Sets  a view scale for create views automatically 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetViewScale
            (
                double viewScale /** viewscale */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
