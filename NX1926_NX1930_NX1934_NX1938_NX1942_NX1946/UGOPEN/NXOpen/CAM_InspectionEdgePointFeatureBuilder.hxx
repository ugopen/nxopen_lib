#ifndef NXOpen_CAM_INSPECTIONEDGEPOINTFEATUREBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONEDGEPOINTFEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionEdgePointFeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionOperationEnums.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionEdgePointFeatureBuilder;
    }
    namespace CAM
    {
        class InheritableDoubleBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Face;
    class Point;
    class SelectNXObjectList;
    namespace CAM
    {
        class _InspectionEdgePointFeatureBuilderBuilder;
        class InspectionEdgePointFeatureBuilderImpl;
        /** Represents a CMM Inspection Edge Point Feature builder  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionEdgePointFeatureBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionEdgePointFeatureBuilder @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionEdgePointFeatureBuilder : public NXOpen::CAM::OperationBuilder
        {
            private: InspectionEdgePointFeatureBuilderImpl * m_inspectionedgepointfeaturebuilder_impl;
            private: friend class  _InspectionEdgePointFeatureBuilderBuilder;
            protected: InspectionEdgePointFeatureBuilder();
            public: ~InspectionEdgePointFeatureBuilder();
            /**Returns  the select adjacent surface 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectAdjacentSurface
            (
            );
            /**Returns  the reverse surface normal direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseSurfaceDirection
            (
            );
            /**Sets  the reverse surface normal direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReverseSurfaceDirection
            (
                bool reverseSurfaceDirection /** reversesurfacedirection */ 
            );
            /**Returns  the selected edge point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * SelectPoint
            (
            );
            /**Sets  the selected edge point 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSelectPoint
            (
                NXOpen::Point * selectPoint /** selectpoint */ 
            );
            /**Returns  the reverse point normal direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseEdgeDirection
            (
            );
            /**Sets  the reverse point normal direction 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetReverseEdgeDirection
            (
                bool reverseEdgeDirection /** reverseedgedirection */ 
            );
            /**Returns  the point offset value 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InheritableDoubleBuilder * OffsetValue
            (
            );
            /**Returns  the coordinate system reference type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::CamInspectionOperationCsysreferencetypes CsysReferenceType
            (
            );
            /**Sets  the coordinate system reference type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCsysReferenceType
            (
                NXOpen::CAM::CamInspectionOperationCsysreferencetypes csysReferenceType /** csysreferencetype */ 
            );
            /**Returns  the point X coordinate 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double PointX
            (
            );
            /**Sets  the point X coordinate 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointX
            (
                double pointX /** pointx */ 
            );
            /**Returns  the point Y coordinate 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double PointY
            (
            );
            /**Sets  the point Y coordinate 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointY
            (
                double pointY /** pointy */ 
            );
            /**Returns  the point Z coordinate 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double PointZ
            (
            );
            /**Sets  the point Z coordinate 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetPointZ
            (
                double pointZ /** pointz */ 
            );
            /**Returns  the point normal vector I component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalVectorI
            (
            );
            /**Sets  the point normal vector I component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorI
            (
                double normalVectorI /** normalvectori */ 
            );
            /**Returns  the point normal vector J component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalVectorJ
            (
            );
            /**Sets  the point normal vector J component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorJ
            (
                double normalVectorJ /** normalvectorj */ 
            );
            /**Returns  the point normal vector K component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double NormalVectorK
            (
            );
            /**Sets  the point normal vector K component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNormalVectorK
            (
                double normalVectorK /** normalvectork */ 
            );
            /**Returns  the surface normal vector I component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double SurfaceNormalVectorI
            (
            );
            /**Sets  the surface normal vector I component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSurfaceNormalVectorI
            (
                double surfaceNormalVectorI /** surfacenormalvectori */ 
            );
            /**Returns  the surface normal vector J component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double SurfaceNormalVectorJ
            (
            );
            /**Sets  the surface normal vector J component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSurfaceNormalVectorJ
            (
                double surfaceNormalVectorJ /** surfacenormalvectorj */ 
            );
            /**Returns  the surface normal vector K component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double SurfaceNormalVectorK
            (
            );
            /**Sets  the surface normal vector K component 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSurfaceNormalVectorK
            (
                double surfaceNormalVectorK /** surfacenormalvectork */ 
            );
            /**Returns  the name of the inspection edge point feature 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Name
            (
            );
            /**Sets  the name of the inspection edge point feature 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name of the inspection edge point feature 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetName
            (
                const char * name /** name */ 
            );
            /** Updates edge point inspection feature characteristic parameters based on selected geometry 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParams
            (
            );
            /** Flips the edge point inspection feature normal vector 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipNormal
            (
            );
            /** Flips the edge point inspection feature adjacent surface normal vector 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void FlipSurfaceNormal
            (
            );
            /** Updates the edge point inspection feature when the offset value is changed 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateOffset
            (
            );
            /** Sets the edge point inspection feature adjacent surface tag 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAdjacentSurface
            (
                NXOpen::Face * adjacentSurface /** adjacentsurface */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
