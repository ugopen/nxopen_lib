#ifndef NXOpen_MECHATRONICS_PLCSIMADVCLIENTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_PLCSIMADVCLIENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_PlcSimAdvClientBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_SignalBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class PlcSimAdvClientBuilder;
    }
    class Builder;
    class Part;
    namespace Mechatronics
    {
        class _PlcSimAdvClientBuilderBuilder;
        class PlcSimAdvClientBuilderImpl;
        /**  @brief  Represents a @link NXOpen::Mechatronics::PlcSimAdvClientBuilder NXOpen::Mechatronics::PlcSimAdvClientBuilder@endlink  builder.  

          
             <br> This class is sub-object of another builder, and cannot be directly instantiated.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  PlcSimAdvClientBuilder : public NXOpen::Builder
        {
            /**  @brief  Represents the plc signal area type.  

              */
            public: enum AreaType
            {
                AreaTypeUnknow/** Unknow  */ = -1,
                AreaTypeInput/** Input  */ = 1,
                AreaTypeOutput/** Output */,
                AreaTypeMarker/** Marker */ = 4,
                AreaTypeDatablock/** DataBlock */ = 8,
                AreaTypeCounter/** Counter */ = 16,
                AreaTypeTimer/** Timer */ = 32
            };

             /**  @brief  Represents PLCTag info definition structure.  

              
                    */
            public:
            struct TagInfo
            {
                public: /** PLCTag Name          */NXString Name;
                public: /** Area type            */NXOpen::Mechatronics::PlcSimAdvClientBuilder::AreaType EAreaType;
                public: /** IO type              */NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType EIOType;
                public: /** Data type            */NXOpen::Mechatronics::SignalBuilder::DataType EDataType;
                public: /** Checked status       */bool BChecked;
                public: TagInfo() :
                    Name(),
                    EAreaType((NXOpen::Mechatronics::PlcSimAdvClientBuilder::AreaType)0),
                    EIOType((NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType)0),
                    EDataType((NXOpen::Mechatronics::SignalBuilder::DataType)0),
                    BChecked()
                {
                }
                /** Constructor for the TagInfo struct. */ 
                public: TagInfo(const NXString &nameInitial /** PLCTag Name          */, 
                        NXOpen::Mechatronics::PlcSimAdvClientBuilder::AreaType eAreaTypeInitial /** Area type            */, 
                        NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType eIOTypeInitial /** IO type              */, 
                        NXOpen::Mechatronics::SignalBuilder::DataType eDataTypeInitial /** Data type            */, 
                        bool bCheckedInitial /** Checked status       */) :
                    Name(nameInitial),
                    EAreaType(eAreaTypeInitial),
                    EIOType(eIOTypeInitial),
                    EDataType(eDataTypeInitial),
                    BChecked(bCheckedInitial)
                {
                }
            };

             /**  @brief  Represents Extended PLCTag info definition structure.  

              
                    */
            public:
            struct TagInfoV2
            {
                public: /** PLCTag Name          */NXString Name;
                public: /** Area type            */NXOpen::Mechatronics::PlcSimAdvClientBuilder::AreaType EAreaType;
                public: /** IO type              */NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType EIOType;
                public: /** Data Type Name       */NXString DataType;
                public: /** Checked status       */bool BChecked;
                public: TagInfoV2() :
                    Name(),
                    EAreaType((NXOpen::Mechatronics::PlcSimAdvClientBuilder::AreaType)0),
                    EIOType((NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType)0),
                    DataType(),
                    BChecked()
                {
                }
                /** Constructor for the TagInfoV2 struct. */ 
                public: TagInfoV2(const NXString &nameInitial /** PLCTag Name          */, 
                        NXOpen::Mechatronics::PlcSimAdvClientBuilder::AreaType eAreaTypeInitial /** Area type            */, 
                        NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType eIOTypeInitial /** IO type              */, 
                        const NXString &dataTypeInitial /** Data Type Name       */, 
                        bool bCheckedInitial /** Checked status       */) :
                    Name(nameInitial),
                    EAreaType(eAreaTypeInitial),
                    EIOType(eIOTypeInitial),
                    DataType(dataTypeInitial),
                    BChecked(bCheckedInitial)
                {
                }
            };

            private: PlcSimAdvClientBuilderImpl * m_plcsimadvclientbuilder_impl;
            private: friend class  _PlcSimAdvClientBuilderBuilder;
            protected: PlcSimAdvClientBuilder();
            public: ~PlcSimAdvClientBuilder();
            /**  @brief  Refresh registered PLCSIMAdv instances.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void RefreshRegisteredInstances
            (
            );
            /**  @brief  Gets PLCSIMAdv instance names  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXString> GetInstanceNames
            (
                std::vector<NXOpen::Part *> & ownerParts /** ownerparts */ 
            );
            /**  @brief  Sets PLCSIMAdv instance names  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetInstanceNames
            (
                const std::vector<NXOpen::Part *> & ownerParts /** ownerparts */ ,
                std::vector<NXString> & names /** names */ 
            );
            /**  @brief  Gets instance update options.  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void GetInstanceUpdateOptions
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                int* tagListDetails /** PLC area type: 0:NONE,1:IO,2:M,3:IOM,4:CT,5:IOCT,6:MCT,7:IOMCT,8:DB,9:IODB,10:MDB,11:IOMDB,12:CTDB,13:IOCTDB,14:MCTDB,15:IOMCTDB */,
                bool* isHMIVisibleOnly /** Whether only to get PLC HMI visible tags or not */,
                NXString* dataBlockFilterList /** Data block names for which PLC tags will be got */
            );
            /**  @brief  Gets instance update options.  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void GetInstanceUpdateOptions
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                int* tagListDetails /** PLC area type: 0:NONE,1:IO,2:M,3:IOM,4:CT,5:IOCT,6:MCT,7:IOMCT,8:DB,9:IODB,10:MDB,11:IOMDB,12:CTDB,13:IOCTDB,14:MCTDB,15:IOMCTDB */,
                bool* isHMIVisibleOnly /** Whether only to get PLC HMI visible tags or not */,
                NXString* dataBlockFilterList /** Data block names for which PLC tags will be got */
            );
            /**  @brief  Sets instance update options.  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetInstanceUpdateOptions
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                int tagListDetails /** PLC area type: 0:NONE,1:IO,2:M,3:IOM,4:CT,5:IOCT,6:MCT,7:IOMCT,8:DB,9:IODB,10:MDB,11:IOMDB,12:CTDB,13:IOCTDB,14:MCTDB,15:IOMCTDB */,
                bool isHMIVisibleOnly /** Whether only to get PLC HMI visible tags or not */,
                const NXString & dataBlockFilterList /** Data block names for which PLC tags will be got */
            );
            /**  @brief  Sets instance update options.  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetInstanceUpdateOptions
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                int tagListDetails /** PLC area type: 0:NONE,1:IO,2:M,3:IOM,4:CT,5:IOCT,6:MCT,7:IOMCT,8:DB,9:IODB,10:MDB,11:IOMDB,12:CTDB,13:IOCTDB,14:MCTDB,15:IOMCTDB */,
                bool isHMIVisibleOnly /** Whether only to get PLC HMI visible tags or not */,
                const char * dataBlockFilterList /** Data block names for which PLC tags will be got */
            );
            /**  @brief  Updates instance.  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void UpdateInstance
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ 
            );
            /**  @brief  Updates instance.  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void UpdateInstance
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ 
            );
            /**  @brief  Gets PLCSIMAdv instance information  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void GetInstanceInformationV2
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                std::vector<NXOpen::Mechatronics::PlcSimAdvClientBuilder::TagInfoV2> & tagInfos /** Array of TagInfoExs */,
                int* cyclic /** Cyclic object for synchronization: 0:NoSyn,1:OB1,2~32:PIP1~PIP31,33:Servo */,
                int* stepFactor /** How many MCD steps to run for each PLC cyclic object synchronization point reached */
            );
            /**  @brief  Gets PLCSIMAdv instance information  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void GetInstanceInformationV2
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                std::vector<NXOpen::Mechatronics::PlcSimAdvClientBuilder::TagInfoV2> & tagInfos /** Array of TagInfoExs */,
                int* cyclic /** Cyclic object for synchronization: 0:NoSyn,1:OB1,2~32:PIP1~PIP31,33:Servo */,
                int* stepFactor /** How many MCD steps to run for each PLC cyclic object synchronization point reached */
            );
            /**  @brief  Sets PLCSIMAdv instance information  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetInstanceInformationV2
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const std::vector<NXOpen::Mechatronics::PlcSimAdvClientBuilder::TagInfoV2> & tagInfos /** Array of TagInfoExs */,
                int cyclic /** Cyclic object for synchronization: 0:NoSyn,1:OB1,2~32:PIP1~PIP31,33:Servo */,
                int stepFactor /** How many MCD steps to run for each PLC cyclic object synchronization point reached */
            );
            /**  @brief  Sets PLCSIMAdv instance information  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetInstanceInformationV2
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const std::vector<NXOpen::Mechatronics::PlcSimAdvClientBuilder::TagInfoV2> & tagInfos /** Array of TagInfoExs */,
                int cyclic /** Cyclic object for synchronization: 0:NoSyn,1:OB1,2~32:PIP1~PIP31,33:Servo */,
                int stepFactor /** How many MCD steps to run for each PLC cyclic object synchronization point reached */
            );
            /**Returns  the selected configuration name. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedConfigurationName
            (
            );
            /**Sets  the selected configuration name. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationName
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**Sets  the selected configuration name. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSelectedConfigurationName
            (
                const char * configurationName /** configurationname */ 
            );
            /**Returns  the selected configuration part. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * SelectedConfigurationPart
            (
            );
            /**Sets  the selected configuration part. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationPart
            (
                NXOpen::Part * ownerPart /** ownerpart */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
