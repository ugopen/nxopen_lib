//=============================================================================
//
//                   Copyright (c) 2006 UGS PLM Solutions
//                    Unpublished - All rights reserved
//===============================================================================
//File description: Sample NX/Open Application for UIStyler
//===============================================================================
//
//=============================================================================

//==============================================================================
//Following example demonstrates the Selection capability within UIStyler
//==============================================================================
//
//==============================================================================
//   WARNING!!  This file is overwritten by the UIStyler each time the Styler
//   file is saved.
//
//       Filename:  UistylerselectionExample.cs
//
//        This file was generated by the NX User Interface Styler
//        Created by: jawale
//        Version: NX 5
//              Date: 12-13-2006
//              Time: 11:56
//
//   This template file is overwritten each time the UIStyler dialog is
//   saved.  Any modifications to this file will be lost.
//==============================================================================


//==============================================================================
//  Purpose:  This TEMPLATE file contains C#.NET source to guide you in the
//  construction of your NX Open application dialog. The generation of your
//  dialog file (.dlg extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlg).


//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your UIStyler dialog in NX
//      using APIs provided in NXOpen.UIStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================


//------------------------------------------------------------------------------
// These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.Features;
using NXOpen.UIStyler;
using System.Collections;


//------------------------------------------------------------------------------
// Represents UI Styler application class
//------------------------------------------------------------------------------
public class UistylerselectionExample
{
    // class members
    private static Session theSession;
    private static UI theUI;
    public static UistylerselectionExample theUistylerselectionExample;
    private Dialog theDialog;
    private NXOpen.UIStyler.DialogItem changeDialog;
    private NXOpen.UIStyler.GroupBox changeGrBeg1;
    private NXOpen.UIStyler.BitMap changeBitmap1;
    private NXOpen.UIStyler.LabelItem changeLabel1;
    private NXOpen.UIStyler.StringItem changeStr0;
    private NXOpen.UIStyler.CollapsibleGroup changeCgBeg5;
    private NXOpen.UIStyler.Toggle changeToggle6;
    private NXOpen.UIStyler.RealItem changeReal6;
    public static bool isDisposeCalled;
    //Following is Hash table which collectes all selected edges of the block
    public Hashtable htEdges = new Hashtable();
        

#region " UI Styler Dialog Designer generator code " 
    //------------------------------------------------------------------------------
    // Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public UistylerselectionExample()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDialog = theUI.Styler.CreateStylerDialog("UistylerselectionExample.dlg");
            InitializeUIStylerDialog();
            isDisposeCalled = false;

        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
    }

    //------------------------------------------------------------------------------
    // This method is required for UI styler dialog creation
    //------------------------------------------------------------------------------
    private void InitializeUIStylerDialog()
    {
    try
    {
        //------------------------------------------------------------------------------
        // The following code snippets initializes all the styler items and associate
        // respective callbacks. Attributes of the styler item can be accessed and
        // modified only after calling Show() or RegisterWithUiMenu().
        //------------------------------------------------------------------------------
            changeDialog = (NXOpen.UIStyler.DialogItem)theDialog.GetStylerItem("UF_STYLER_DIALOG_INDEX", Dialog.ItemType.DialogItem);
            changeDialog.AddConstructHandler(new NXOpen.UIStyler.DialogItem.Construct(constructor_cb), false);
            changeDialog.AddOkayHandler(new NXOpen.UIStyler.DialogItem.Okay(ok_cb), false);
            changeDialog.AddApplyHandler(new NXOpen.UIStyler.DialogItem.Apply(apply_cb), false);
            changeGrBeg1 = (NXOpen.UIStyler.GroupBox)theDialog.GetStylerItem("GR_BEG_1", Dialog.ItemType.GroupBox);
            changeBitmap1 = (NXOpen.UIStyler.BitMap)theDialog.GetStylerItem("BITMAP_1", Dialog.ItemType.Bitmap);
            changeLabel1 = (NXOpen.UIStyler.LabelItem)theDialog.GetStylerItem("LABEL_1", Dialog.ItemType.LabelItem);
            changeStr0 = (NXOpen.UIStyler.StringItem)theDialog.GetStylerItem("STR_0", Dialog.ItemType.StringItem);
            changeStr0.AddActivateHandler(new NXOpen.UIStyler.StringItem.Activate(bend_radius_cb), false);
            changeCgBeg5 = (NXOpen.UIStyler.CollapsibleGroup)theDialog.GetStylerItem("CG_BEG_5", Dialog.ItemType.CollapsibleGroup);
            changeToggle6 = (NXOpen.UIStyler.Toggle)theDialog.GetStylerItem("TOGGLE_6", Dialog.ItemType.Toggle);
            changeToggle6.AddValueChangedHandler(new NXOpen.UIStyler.Toggle.ValueChanged(remove_surface_self_intersections_cb), false);
            changeReal6 = (NXOpen.UIStyler.RealItem)theDialog.GetStylerItem("REAL_6", Dialog.ItemType.RealItem);
            changeReal6.AddActivateHandler(new NXOpen.UIStyler.RealItem.Activate(tolerance_cb), false);
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
    }

#endregion

    

    //---------------- DIALOG CREATION FROM A USER EXIT HELP Example ---------------
    // An example is shown below to create this dialog from a user exit.
    // All dialog files must be located in
    //             $UGII_USER_DIR/application or
    //             $UGII_SITE_DIR/application or
    //             $UGII_VENDOR_DIR/application directory
    

    //      1)Add a user exit to the method name below, for example, Main().
    //      2)Consider how your shared library will be unloaded.  Take a look
    //        at the method GetUnloadOption().
    //------------------------------------------------------------------------------
    public static void Main ()
    {
        try
        {
            //For Journal playback uncomment calls for LockAccess and UnlockAccess
            //UI.GetUI().LockAccess();
            NXOpen.UIStyler.DialogResponse response;
            theUistylerselectionExample = new UistylerselectionExample();
            // The following method shows the dialog immediately
            response = theUistylerselectionExample.Show();
            theUistylerselectionExample.Dispose();
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        finally
        {
            //UI.GetUI().UnlockAccess();
        }
    } // User exit ends

    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    

    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    

    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    public static int GetUnloadOption(string arg)
    {
        // Return code to indicate this library can be unloaded
        // by the user.
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
        return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }

    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static int UnloadLibrary(string arg)
    {
        try
        {
            theUistylerselectionExample.Dispose();
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    // This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        NXOpen.UIStyler.DialogResponse retValue = NXOpen.UIStyler.DialogResponse.Ok;
        try
        {
            retValue = theDialog.Show();
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        return retValue;
    }


    //------------------------------------------------------------------------------
    // Following method disposes all the class members
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        try
        {
            if (isDisposeCalled == false)
            {
                changeDialog.Dispose();
                changeGrBeg1.Dispose();
                changeBitmap1.Dispose();
                changeLabel1.Dispose();
                changeStr0.Dispose();
                changeCgBeg5.Dispose();
                changeToggle6.Dispose();
                changeReal6.Dispose();
                theDialog.Dispose();
            }
            isDisposeCalled = true;
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
    }

    //------------------------------------------------------------------------------
    //------------------------- UIStyler Callback Functions ------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    // Callback Name: taggedObjectSelection_cb
    // Following callback is associated with the "changeDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------

    //Following is Selection Callback - This function gets invoked whenever all the tags of selected edges are stored in Hash table.
    public int taggedObjectSelection_cb(TaggedObject[] selectedObjects, TaggedObject[] deselectedObjects, SelectionHandle selectHandle)
    {
        try
        {
            for(int i =0; i < selectedObjects.Length; i++)
            {
                htEdges.Add(selectedObjects[i].Tag, selectedObjects[i]);
            }
            for(int i =0; i < deselectedObjects.Length; i++)
            {
                htEdges.Remove(deselectedObjects[i].Tag);
            }
            changeLabel1.SetLabel("Select Edges (" + htEdges.Count + ")");
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        // Callback acknowledged, do not terminate dialog
        // A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
        // for this callback type. You must continue dialog construction.
        return 0;
    }


    //------------------------------------------------------------------------------
    // Callback Name: filterTaggedObject_cb
    // Following callback is associated with the "changeDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------

    //Following is Filter Callback - This function gets invoked during selection. 
    //Here, we can put a logic to accept or reject the selected entities. In this example only Edge can be selected.

    public int filterTaggedObject_cb(TaggedObject selectedObject, NXOpen.Selection.MaskTriple selectionMask_array, SelectionHandle selectHandle)
    {
        if (!selectedObject.ToString().Contains("Edge"))
        {
            return NXOpen.UF.UFConstants.UF_UI_SEL_REJECT;
        }
        else
        {
            return NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT;
        }
    }
    //------------------------------------------------------------------------------
    // Callback Name: constructor_cb
    // Following callback is associated with the "changeDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogState constructor_cb(NXOpen.UIStyler.StylerEvent eventObject)
    {
        try
        {
            // Get the selection handle
            SelectionHandle selectH;
            selectH = changeDialog.GetSelectionHandle();
            NXOpen.Selection.MaskTriple[] selectionMask_array = new NXOpen.Selection.MaskTriple[1];
            NXOpen.Selection.MaskTriple selectionMask_arrayElem;
            selectionMask_arrayElem.Type = NXOpen.UF.UFConstants.UF_solid_type;
            selectionMask_arrayElem.Subtype = NXOpen.UF.UFConstants.UF_solid_edge_subtype;
            selectionMask_arrayElem.SolidBodySubtype = NXOpen.UF.UFConstants.UF_UI_SEL_FEATURE_ANY_EDGE;
            selectionMask_array[0] = selectionMask_arrayElem;
            //Following sets the Selection mask for Edge
            theUI.SelectionManager.SetSelectionMask(selectH, NXOpen.Selection.SelectionAction.ClearAndEnableSpecific, selectionMask_array);
            //Following sets the Selection and Filter callbacks which are invoked during selection
            theUI.SelectionManager.SetTaggedObjectSelectionCallbacks(selectH, filterTaggedObject_cb, taggedObjectSelection_cb);
            changeToggle6.ItemValue = true;
            changeStr0.ItemValue = "5.0";
            changeLabel1.SetLabel("Select Edges (0)");
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        // Callback acknowledged, do not terminate dialog
        // A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
        // for this callback type. You must continue dialog construction.
        return NXOpen.UIStyler.DialogState.ContinueDialog;
    }

    //------------------------------------------------------------------------------
    // Callback Name: ok_cb
    // Following callback is associated with the "changeDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogState ok_cb(NXOpen.UIStyler.StylerEvent eventObject)
    {
        try
        {
            apply_cb(eventObject);
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        // Callback acknowledged, terminate dialog
        // It is STRONGLY recommanded that you exit your
        // callback with NXOpen.UIStyler.DialogState.ExitDialog in a ok callback.
        return NXOpen.UIStyler.DialogState.ExitDialog;
    }

    //------------------------------------------------------------------------------
    // Callback Name: apply_cb
    // Following callback is associated with the "changeDialog" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    //Following is Apply Callback - This function is responsible for creating Edge Blend.
    public NXOpen.UIStyler.DialogState apply_cb(NXOpen.UIStyler.StylerEvent eventObject)
    {
        try
        {
            Part workPart = theSession.Parts.Work;
            Part displayPart = theSession.Parts.Display;

            // ----------------------------------------------
            //   Menu: Insert->Detail Feature->Edge Blend...
            // ----------------------------------------------
            Session.UndoMarkId markId1 = theSession.SetUndoMark(Session.MarkVisibility.Visible, "Start");
            NXOpen.Features.Feature nullFeatures_Feature = null;

            NXOpen.Features.EdgeBlendBuilder edgeBlendBuilder1 = workPart.Features.CreateEdgeBlendBuilder(nullFeatures_Feature);

            theSession.SetUndoMarkName(markId1, "Edge Blend");

            ScCollector scCollector1 = workPart.ScCollectors.CreateCollector();

            NXOpen.Features.Block block1 = (NXOpen.Features.Block)workPart.Features.FindObject("BLOCK(1)");

            Edge[] seedEdges1 = new Edge[htEdges.Count];
            IDictionaryEnumerator en = htEdges.GetEnumerator();
            int EdgeIndex = 0;
            while(en.MoveNext())
            {
                Edge edgeVar = (Edge)en.Value;;
                seedEdges1[EdgeIndex] = edgeVar;
                EdgeIndex += 1;
            }

            EdgeMultipleSeedTangentRule edgeMultipleSeedTangentRule2 = workPart.ScRuleFactory.CreateRuleEdgeMultipleSeedTangent(seedEdges1, 0.5, true);
            
            SelectionIntentRule[] rules2 = new SelectionIntentRule[1];
            rules2[0] = edgeMultipleSeedTangentRule2;

            scCollector1.ReplaceRules(rules2, false);

            Session.UndoMarkId markId2 = theSession.SetUndoMark(Session.MarkVisibility.Invisible, "Edge Blend");
            //Following can set the Tolerance for Edge Blend.
            edgeBlendBuilder1.Tolerance = changeReal6.ItemValue;
            edgeBlendBuilder1.AllInstancesOption = false;
            //Following can set the Remove Self Intersection option for the Edge Blend.
            edgeBlendBuilder1.RemoveSelfIntersection = changeToggle6.ItemValue;
            edgeBlendBuilder1.ConvexConcaveY = false;
            edgeBlendBuilder1.RollOverSmoothEdge = true;
            edgeBlendBuilder1.RollOntoEdge = true;
            edgeBlendBuilder1.MoveSharpEdge = true;
            edgeBlendBuilder1.OverlapOption = NXOpen.Features.EdgeBlendBuilder.Overlap.AnyConvexityRollOver;
            edgeBlendBuilder1.BlendOrder = NXOpen.Features.EdgeBlendBuilder.OrderOfBlending.ConvexFirst;
            edgeBlendBuilder1.SetbackOption = NXOpen.Features.EdgeBlendBuilder.Setback.SeparateFromCorner;

            //Following sets the value for Blend Radius.
            int csIndex1 = edgeBlendBuilder1.AddChainset(scCollector1, changeStr0.ItemValue);
            NXOpen.Features.Feature feature1 = edgeBlendBuilder1.CommitFeature();
            
            theSession.DeleteUndoMark(markId2, null);
            edgeBlendBuilder1.Destroy();
            htEdges.Clear();
            changeLabel1.SetLabel("Select Edges (0)");
        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        // Callback acknowledged, do not terminate dialog
        // A return value of NXOpen.UIStyler.DialogState.ExitDialog will not be accepted
        // for this callback type. You must respond to your apply button.
        return NXOpen.UIStyler.DialogState.ContinueDialog;
    }

    //------------------------------------------------------------------------------
    // Callback Name: bend_radius_cb
    // Following callback is associated with the "changeStr0" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogState bend_radius_cb(NXOpen.UIStyler.StylerEvent eventObject)
    {
        try
        {
            

            // ---- Enter your callback code here -----
            

        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        // Callback acknowledged, do not terminate dialog
        return NXOpen.UIStyler.DialogState.ContinueDialog;
        // or Callback acknowledged, terminate dialog.
        // return NXOpen.UIStyler.DialogState.ExitDialog;
    }

    //------------------------------------------------------------------------------
    // Callback Name: remove_surface_self_intersections_cb
    // Following callback is associated with the "changeToggle6" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogState remove_surface_self_intersections_cb(NXOpen.UIStyler.StylerEvent eventObject)
    {
        try
        {
            

            // ---- Enter your callback code here -----
            

        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        // Callback acknowledged, do not terminate dialog
        return NXOpen.UIStyler.DialogState.ContinueDialog;
        // or Callback acknowledged, terminate dialog.
        // return NXOpen.UIStyler.DialogState.ExitDialog;
    }

    //------------------------------------------------------------------------------
    // Callback Name: tolerance_cb
    // Following callback is associated with the "changeReal6" Styler item.
    // Input: eventObject - object of UIStyler.StylerEvent class
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogState tolerance_cb(NXOpen.UIStyler.StylerEvent eventObject)
    {
        try
        {
            

            // ---- Enter your callback code here -----
            

        }
        catch (NXOpen.NXException ex)
        {
            // ---- Enter your exception handling code here -----
             theUI.NXMessageBox.Show("UI Styler", NXMessageBox.DialogType.Error, ex.Message);
        }
        // Callback acknowledged, do not terminate dialog
        return NXOpen.UIStyler.DialogState.ContinueDialog;
        // or Callback acknowledged, terminate dialog.
        // return NXOpen.UIStyler.DialogState.ExitDialog;
    }

}
