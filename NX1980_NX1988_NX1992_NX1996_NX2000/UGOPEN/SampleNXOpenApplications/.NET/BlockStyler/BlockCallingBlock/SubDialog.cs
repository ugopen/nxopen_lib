/*=============================================================================

                    Copyright (c) 2008 Siemens PLM Solutions
                    Unpublished - All rights reserved

===============================================================================
File description: Sample NX/Open Application
===============================================================================

=============================================================================
*/

//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//
//        This file was generated by the NX Block UI Styler
//              Version: NX 11
//              Date: 05-22-2015  (Format: mm-dd-yyyy)
//              Time: 09:12 (Format: hh-mm)
//
//==============================================================================


//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using System.Collections.Generic;
using NXOpen.UF;
using System.Threading;
using System.Windows.Forms;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class SubDialog
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private static NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group0;// Block type: Group
    private static NXOpen.BlockStyler.SelectObject selection0;// Block type: Selection
    private NXOpen.DisplayableObject m_selectedObject;
    public NXOpen.DisplayableObject m_hardcode;
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesEnabled
    //------------------------------------------------------------------------------
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    public static readonly int         SnapPointTypesEnabled_FacetVertexPoint = (1 <<17);
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);

    private static bool m_done = false;

    private static bool m_isShown = false;

    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public SubDialog()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "SubDialog.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));

            m_selectedObject = null;
            m_hardcode = null;
            m_done = false;

            m_isShown = false;
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Remove the following conditional definitions:
    //
    //                a) #if USER_EXIT
    //                    #endif//USER_EXIT
    //        2) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        3) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //    3. THROUGH CALLBACK OF ANOTHER DIALOG
    //
    //        1) Remove the following conditional definition:
    //             #if CALLBACK
    //             #endif//CALLBACK
    //        2) Call the following line of code from where ever you want to launch this dialog.
    //             SubDialog.Show_SubDialog();
    //        3) Integrate this file with your main application file.
    //
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();

        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }

    // TODO: Need to document how and when to use this
    //------------------------------------------------------------------------------
    //Method name: Show_SubTestDialog2
    //------------------------------------------------------------------------------
    public static void Show_SubDialogHardCodedValues(ref NXOpen.DisplayableObject selectedObject,
                            NXOpen.Face hardcodeFace)
    {
        SubDialog theSubDialog = null;
        try
        {
            theSubDialog = new SubDialog();
            theSubDialog.m_hardcode =(NXOpen.DisplayableObject)hardcodeFace;          

            Thread oThread = new Thread(new ThreadStart(DoPerformOK));


            // Start the thread
            oThread.Start();

            // Spin for a while waiting for the started thread to become
            // alive:
            while (!oThread.IsAlive) ;

            // The following method shows the dialog immediately
            theSubDialog.Show();

            selectedObject = theSubDialog.GetSelectedObject();

            oThread.Join();


        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            theSubDialog.Dispose();
            theSubDialog = null;
        }
    }

    //------------------------------------------------------------------------------
    // Method name: Show_SubDialog
    // This version of the Show is meant to be called in the mode where the user
    // picks the face
    //------------------------------------------------------------------------------
    public static void Show_SubDialog(ref NXOpen.DisplayableObject selectedObject)
    {
        SubDialog theSubDialog = null;
        try
        {
            theSubDialog = new SubDialog();


            Thread oThread = new Thread(new ThreadStart(DoPerformOK));


            // Start the thread
            oThread.Start();

            // Wait a while waiting for the thread to become alive
            while (!oThread.IsAlive) ;

            // The following method shows the dialog immediately
            theSubDialog.Show();

            selectedObject = theSubDialog.GetSelectedObject();

            oThread.Join();


        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            theSubDialog.Dispose();
            theSubDialog = null;
        }
    }

    /// <summary>
    /// This is meant to be run in a thread that will be started after the dialog is shown.
    /// </summary>
    /// <remarks>
    /// Since this is run in separate thread, care must be taken calling NXOpen methods 
    /// that will work in multi-threaded environment.  For example if an exception occurs
    /// it is better to use the .Net method to show the exception than NXOpen NXMessageBox.
    /// 
    /// This callback is setup to work in two different ways, in one way it will work if the
    /// selection is hard coded and set in the Shown method.  The other way is when the user 
    /// selects an object
    /// </remarks>
    public static void DoPerformOK()
    {
        try
        {

            
            while (m_isShown == false)
            {
                Thread.Sleep(100);
            }

            //Need to checkt that user didn't select OK already
            if(m_done)
            {
                return;
            }

            //Need exactly one item to be selected
            while (NumSelectedItems() == 0)
            {
                //The Sleep is here so the user can see in the case of
                //hardcoded input the face that was selected
                Thread.Sleep(2000);
            }

            if (!m_done)
            {
                //After PerformOK or PerformCancel is called the Show method will return
                //This means you cannot call PerformOK or PerformCancel.
                //And if you call either of them after one of the methods has been called
                //This will put NX in a state of deadlock, as we need to wait for the call
                //To complete, but will we will not process the call as we will be 
                //blocking the main thread in NX
                theDialog.PerformOK();
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            //Do not call the NXOpen method below, as this is method is not thread safe in NX.
            //Instead use the .Net method to show a messagebox instead.
            //theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.Message);
            MessageBox.Show(ex.Message, "Thrown Exception", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation);
        }
        m_done = true;
    }
    /// <summary>
    /// This method returns how many items have been selected
    /// </summary>
    /// <returns></returns>
    public static int NumSelectedItems()
    {
        int retVal = 0;
        TaggedObject[] tagObjArray;
        NXOpen.BlockStyler.PropertyList NXObjectSelectionproplist = selection0.GetProperties();
        tagObjArray = NXObjectSelectionproplist.GetTaggedObjectVector("SelectedObjects");
        retVal = tagObjArray.Length;
        NXObjectSelectionproplist.Dispose();
        NXObjectSelectionproplist = null;

        return retVal;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    private DisplayableObject GetSelectedObject()
    {
        return m_selectedObject;
    }

    /// <summary>
    /// This method is only meant to be used when the selected face is meant to be hardcoded
    /// </summary>
    /// <param name="obj"></param>
    private void SetSelectedObject(DisplayableObject obj)
    {
        TaggedObject[] tagObjArray = new TaggedObject[1];
        NXOpen.BlockStyler.PropertyList NXObjectSelectionproplist = selection0.GetProperties();
        tagObjArray[0] = obj;
        
        NXObjectSelectionproplist.SetTaggedObjectVector("SelectedObjects", tagObjArray);
        NXObjectSelectionproplist.Dispose();
        NXObjectSelectionproplist = null;

    }

    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
            selection0 = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("selection0");

             NXOpen.BlockStyler.PropertyList selectionPropList = selection0.GetProperties();

             List<NXOpen.Selection.MaskTriple> maskTripleVector = new List<NXOpen.Selection.MaskTriple>();

             NXOpen.Selection.MaskTriple maskTriple22 = new NXOpen.Selection.MaskTriple(UFConstants.UF_face_type, UFConstants.UF_all_subtype, 0);
             maskTripleVector.Add(maskTriple22);

             selectionPropList.SetSelectionFilter("SelectionFilter", Selection.SelectionAction.EnableSpecific,
                                          maskTripleVector.ToArray());
             selectionPropList.Dispose();
             selectionPropList = null;
             maskTripleVector.Clear();


        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            m_isShown = true;
            if(m_hardcode != null)
            {
                SetSelectedObject(m_hardcode);
            }
            
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        m_done = true;
        int errorCode = 0;
        try
        {
            TaggedObject[] tagObjArray;
            NXOpen.BlockStyler.PropertyList NXObjectSelectionproplist = selection0.GetProperties();
            tagObjArray = NXObjectSelectionproplist.GetTaggedObjectVector("SelectedObjects");
            NXObjectSelectionproplist.Dispose();
            NXObjectSelectionproplist = null;

            if (tagObjArray != null && tagObjArray.Length > 0)
            {
                this.m_selectedObject = (NXOpen.DisplayableObject)tagObjArray[0];

            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        m_done = true;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == selection0)
            {
            
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: enableOKButton_cb
    //This callback allows the dialog to enable/disable the OK and Apply button.
    //------------------------------------------------------------------------------
    public bool enableOKButton_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return true;
    }
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }
    
}
