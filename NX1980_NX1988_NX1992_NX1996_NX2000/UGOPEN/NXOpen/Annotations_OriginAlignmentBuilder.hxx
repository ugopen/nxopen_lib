#ifndef NXOpen_ANNOTATIONS_ORIGINALIGNMENTBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_ORIGINALIGNMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_OriginAlignmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class OriginAlignmentBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _OriginAlignmentBuilderBuilder;
        class OriginAlignmentBuilderImpl;
        /**
              This is the Origin Alignment builder used to query or set origin alignment preferences.
            
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  OriginAlignmentBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /**
                      This represents the Auto-alignment types.
                    */
            public: enum AutoAlignmentType
            {
                AutoAlignmentTypeAssociative/**  Associative auto-alignment  */,
                AutoAlignmentTypeNonAssociative/**  Non-associative auto-alignment  */,
                AutoAlignmentTypeOff/**  No auto-alignment  */
            };

            private: OriginAlignmentBuilderImpl * m_originalignmentbuilder_impl;
            private: friend class  _OriginAlignmentBuilderBuilder;
            protected: OriginAlignmentBuilder();
            public: ~OriginAlignmentBuilder();
            /**Returns  the auto-alignment value. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::OriginAlignmentBuilder::AutoAlignmentType AutoAlignment
            (
            );
            /**Sets  the auto-alignment value. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAutoAlignment
            (
                NXOpen::Annotations::OriginAlignmentBuilder::AutoAlignmentType autoAlignment /** autoalignment */ 
            );
            /**Returns  the align to dimension line value that, if true, indicates that origin can be aligned to dimension line. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool AlignToDimensionLine
            (
            );
            /**Sets  the align to dimension line value that, if true, indicates that origin can be aligned to dimension line. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAlignToDimensionLine
            (
                bool alignToDimensionLine /** aligntodimensionline */ 
            );
            /**Returns  the stack annotation value that, if true, indicates that origin can stack with annotation. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool StackAnnotation
            (
            );
            /**Sets  the stack annotation value that, if true, indicates that origin can stack with annotation. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetStackAnnotation
            (
                bool stackAnnotation /** stackannotation */ 
            );
            /**Returns  the align horizontal or vertical value that, if true, indicates that origin can be aligned horizontally or vertically with other annotation. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool AlignHorizontalVertical
            (
            );
            /**Sets  the align horizontal or vertical value that, if true, indicates that origin can be aligned horizontally or vertically with other annotation. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetAlignHorizontalVertical
            (
                bool alignHorizontalVertical /** alignhorizontalvertical */ 
            );
            /**Returns  the position relative to geometry value that, if true, indicates that origin can be positioned relative to geometry. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool PositionRelativeToGeom
            (
            );
            /**Sets  the position relative to geometry value that, if true, indicates that origin can be positioned relative to geometry. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPositionRelativeToGeom
            (
                bool positionRelativeToGeom /** positionrelativetogeom */ 
            );
            /**Returns  the position relative to view value that, if true, indicates that origin can be positioned relative to view. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool PositionRelativeToView
            (
            );
            /**Sets  the position relative to view value that, if true, indicates that origin can be positioned relative to view. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPositionRelativeToView
            (
                bool positionRelativeToView /** positionrelativetoview */ 
            );
            /**Returns  the position at snap point value that, if true, indicates that origin can be positioned at snap point. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool PositionAtSnapPoint
            (
            );
            /**Sets  the position at snap point value that, if true, indicates that origin can be positioned at snap point. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPositionAtSnapPoint
            (
                bool positionAtSnapPoint /** positionatsnappoint */ 
            );
            /**Returns  the position on margin value that, if true, indicates that origin can be positioned on margin. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool PositionOnMargin
            (
            );
            /**Sets  the position on margin value that, if true, indicates that origin can be positioned on margin. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") OR drafting ("DRAFTING") */
            public: void SetPositionOnMargin
            (
                bool positionOnMargin /** positiononmargin */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not yet implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
