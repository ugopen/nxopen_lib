#ifndef NXOpen_FEATURES_TOPOLOGYOPTIMIZATION_ANALYSISCONSTRAINTBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TOPOLOGYOPTIMIZATION_ANALYSISCONSTRAINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TopologyOptimization_AnalysisConstraintBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace TopologyOptimization
        {
            class AnalysisConstraintBuilder;
        }
    }
    class Axis;
    class Builder;
    class Direction;
    class Plane;
    class ScCollector;
    namespace Features
    {
        namespace TopologyOptimization
        {
            class _AnalysisConstraintBuilderBuilder;
            class AnalysisConstraintBuilderImpl;

            /// \cond NX_NO_DOC 
            /**
                    Represents a @link NXOpen::Features::TopologyOptimization::AnalysisConstraint NXOpen::Features::TopologyOptimization::AnalysisConstraint@endlink  builder
                     <br> To create a new instance of this class, use @link NXOpen::Features::TopologyOptimization::Study::CreateAnalysisConstraintBuilder  NXOpen::Features::TopologyOptimization::Study::CreateAnalysisConstraintBuilder @endlink  <br> 
             <br>  Created in NX1953.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  AnalysisConstraintBuilder : public NXOpen::Builder
            {
                /** Analysis Constraints Type */
                public: enum ConstraintType
                {
                    ConstraintTypeFixed/** fixed */ ,
                    ConstraintTypePinned/** pinned */ ,
                    ConstraintTypePinnedSlider/** pinned slider */ ,
                    ConstraintTypeLinearSlider/** linear slider */ ,
                    ConstraintTypePlanarSlider/** planar slider */ 
                };

                private: AnalysisConstraintBuilderImpl * m_analysisconstraintbuilder_impl;
                private: friend class  _AnalysisConstraintBuilderBuilder;
                protected: AnalysisConstraintBuilder();
                public: ~AnalysisConstraintBuilder();

                /// \cond NX_NO_DOC 
                /**Returns  the constraint type enum 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::AnalysisConstraintBuilder::ConstraintType Type
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the constraint type enum 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetType
                (
                    NXOpen::Features::TopologyOptimization::AnalysisConstraintBuilder::ConstraintType type /** type */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the fe selected face 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectFace
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the pinned axis 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Axis * PinnedAxis
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the pinned axis 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetPinnedAxis
                (
                    NXOpen::Axis * pinnedAxis /** pinnedaxis */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the linear slider vector 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * LinearSliderVector
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the linear slider vector 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetLinearSliderVector
                (
                    NXOpen::Direction * linearSliderVector /** linearslidervector */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the planar slider plane 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * PlanarSliderPlane
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the planar slider plane 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetPlanarSliderPlane
                (
                    NXOpen::Plane * planarSliderPlane /** planarsliderplane */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the fe constraint name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Name
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the fe constraint name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetName
                (
                    const NXString & feConstraintName /** feconstraintname */ 
                );
                /**Sets  the fe constraint name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                void SetName
                (
                    const char * feConstraintName /** feconstraintname */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the flag indicating whether the object uses an user-defined name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool UserSetName
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the flag indicating whether the object uses an user-defined name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetUserSetName
                (
                    bool userSetName /** usersetname */ 
                );

                /// \endcond 
            };

            /// \endcond 
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
