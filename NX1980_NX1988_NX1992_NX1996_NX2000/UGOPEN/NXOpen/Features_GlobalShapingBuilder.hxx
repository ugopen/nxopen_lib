#ifndef NXOpen_FEATURES_GLOBALSHAPINGBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_GLOBALSHAPINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_GlobalShapingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_GlobalShapingCurveOffsetBuilder.hxx>
#include <NXOpen/Features_GlobalShapingPointOffsetBuilder.hxx>
#include <NXOpen/GeometricUtilities_LawBuilder.hxx>
#include <NXOpen/GeometricUtilities_MovePoleBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class GlobalShapingBuilder;
    }
    class Body;
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class GlobalShapingCurveOffsetBuilder;
    }
    namespace Features
    {
        class GlobalShapingCurveOffsetBuilderList;
    }
    namespace Features
    {
        class GlobalShapingPointOffsetBuilder;
    }
    namespace Features
    {
        class GlobalShapingPointOffsetBuilderList;
    }
    namespace GeometricUtilities
    {
        class FeatureOptions;
    }
    namespace GeometricUtilities
    {
        class LawBuilder;
    }
    namespace GeometricUtilities
    {
        class MovePoleBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class Point;
    class ScCollector;
    class Section;
    class SelectDisplayableObjectList;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace Features
    {
        class _GlobalShapingBuilderBuilder;
        class GlobalShapingBuilderImpl;
        /**
            Represents a @link NXOpen::Features::GlobalShaping NXOpen::Features::GlobalShaping@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateGlobalShapingBuilder  NXOpen::Features::FeatureCollection::CreateGlobalShapingBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        FirstRegionLimitCurveOffsetLaw.Function </term> <description> 
         
        ft </description> </item> 

        <item><term> 
         
        FirstRegionLimitCurveOffsetLaw.LawType </term> <description> 
         
        Constant </description> </item> 

        <item><term> 
         
        FirstRegionLimitCurveOffsetLaw.Parameter </term> <description> 
         
        t </description> </item> 

        <item><term> 
         
        ModifyMethod </term> <description> 
         
        Stretch </description> </item> 

        <item><term> 
         
        MovePole.DegreesAndPatches.Degree </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        MovePole.DegreesAndPatches.SegmentsOrPatches </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        MovePole.DegreesAndPatches.UDegree </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        MovePole.DegreesAndPatches.UPatches </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        MovePole.DegreesAndPatches.VDegree </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        MovePole.DegreesAndPatches.VPatches </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        MovePole.MoveMethod </term> <description> 
         
        View </description> </item> 

        <item><term> 
         
        MovePole.WCSDirection </term> <description> 
         
        X </description> </item> 

        </list> 

         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  GlobalShapingBuilder : public NXOpen::Features::FeatureBuilder
        {
            /**Represents the deformation type. */
            public: enum DeformationTypeValues
            {
                DeformationTypeValuesToPoint/** To point */,
                DeformationTypeValuesToCurves/** To curves */,
                DeformationTypeValuesOpenRegion/** Open region */,
                DeformationTypeValuesWallDeformation/** Wall deformation */,
                DeformationTypeValuesOverbend/** Overbend */,
                DeformationTypeValuesMatchToSheet/** Match to sheet */,
                DeformationTypeValuesStretchToPoint/** Stretch to point */,
                DeformationTypeValuesStretchToCurve/** Stretch to curve */,
                DeformationTypeValuesRadiusReduction/** Radius Reduction */,
                DeformationTypeValuesBySurface/** (9) Old By surface method */,
                DeformationTypeValuesByCurve/** (10)Bend/Twist by curves */,
                DeformationTypeValuesUnknown/** Unknown deformation */
            };

            /**Represents the point method type.*/
            public: enum PointMethodType
            {
                PointMethodTypeOffsetFromSheet/** Target point is offset from sheet */,
                PointMethodTypePointDefined/** Target point is the given point */
            };

            /**Represents the offset method type. */
            public: enum OffsetMethod
            {
                OffsetMethodConstant/** Constant offset */,
                OffsetMethodLawControlled/** Law controlled */,
                OffsetMethodCurveDefined/** Curve interpolated */
            };

            /**Represents the rotation type. */
            public: enum RotationMethodType
            {
                RotationMethodTypeAngle/** Rotation specified by angle */,
                RotationMethodTypeDistance/** Rotation specified by distance */
            };

            /**Represents the rotation method type. */
            public: enum RotationMethod
            {
                RotationMethodConstant/** Constant anlge rotation */,
                RotationMethodLawControlled/** Law controlled rotation */,
                RotationMethodCurveDefined/** Curve interpolated rotation */
            };

            /**Represents the direction method type. */
            public: enum DirectionMethodType
            {
                DirectionMethodTypeSameAsProjection/** Overcrown is same as projection direction */,
                DirectionMethodTypeNormalToSheet/** Overcrown is normal to sheet */,
                DirectionMethodTypeNormalToBase/** Overcrown is normal to base surface */,
                DirectionMethodTypeNormalToControl/** Overcrown is normal to control surface */,
                DirectionMethodTypeSpecifiedDirection/** Overcrown is user specified direction */,
                DirectionMethodTypeNone/** Overcrown has no direction specified */
            };

            /**Represents the transition method type. */
            public: enum TransitionType
            {
                TransitionTypeFunction1/** Tangent continuous transition */,
                TransitionTypeFunction2/** Position continuous transition */,
                TransitionTypeLaw/** Transition by law */,
                TransitionTypeG2/** g2 continuous */
            };

            /**Represents the body method type. */
            public: enum BodyMethod
            {
                BodyMethodSolid/** Output solid */,
                BodyMethodSheet/** Output sheet */
            };

            /**Represents radius options used. */
            public: enum RadiusType
            {
                RadiusTypeQuintic/** Quintic method. A quintic curve is used to reduce the radius */,
                RadiusTypeRadius/** Radius method. A true arc with tangent lines at the ends is used to
                                                                                reduce radius. This should be used when you know that the input is
                                                                                an edge blend or face blend */
            };

            /**Represents the orientation of the target curve(s) to the limit curves. With parallel option you can specify only one law.
                       With the perpendicular option, you can specify multiple laws. */
            public: enum TargetCurveOrientationType
            {
                TargetCurveOrientationTypeParallel/** Target curve is parallel to the limit curves. */,
                TargetCurveOrientationTypePerpendicular/** Target curves are perpendicular to the limit curves. */
            };

            /**Represent surface modify method. */
            public: enum ModifyMethodType
            {
                ModifyMethodTypeStretch/** By Surface stretch modify */,
                ModifyMethodTypeOvercrown/** By Surface overcrown modify */
            };

            /**Represent sheet deformation type. */
            public: enum DeformBodyType
            {
                DeformBodyTypeSheetBodies/** Sheet bodies */,
                DeformBodyTypeFacetBodies/** Facet bodies */
            };

            private: GlobalShapingBuilderImpl * m_globalshapingbuilder_impl;
            private: friend class  _GlobalShapingBuilderBuilder;
            protected: GlobalShapingBuilder();
            public: ~GlobalShapingBuilder();
            /**Returns  the deformation type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::DeformationTypeValues DeformationType
            (
            );
            /**Sets  the deformation type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeformationType
            (
                NXOpen::Features::GlobalShapingBuilder::DeformationTypeValues deformationType /** deformationtype */ 
            );
            /**Returns  the sheet to deform 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SheetToDeform
            (
            );
            /**Sets  the sheet to deform 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSheetToDeform
            (
                NXOpen::ScCollector * sheetToDeform /** sheettodeform */ 
            );
            /**Returns  the facet to deform 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * FacetToDeform
            (
            );
            /**Returns  the region to deform 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * RegionToDeform
            (
            );
            /**Sets  the region to deform 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRegionToDeform
            (
                NXOpen::Section * regionToDeform /** regiontodeform */ 
            );
            /**Returns  the region to deform offset law 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * FirstRegionLimitCurveOffsetLaw
            (
            );
            /**Returns  the bend curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * BendCurve
            (
            );
            /**Returns  the rotation target curve 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * RotationTargetCurve
            (
            );
            /**Returns  the region limit curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * RegionLimitCurve
            (
            );
            /**Returns  the region edge curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * RegionEdgeCurve
            (
            );
            /**Returns  the first region limit curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * FirstRegionLimitCurve
            (
            );
            /**Returns  the second region limit curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SecondRegionLimitCurve
            (
            );
            /**Returns  the second region limit curve offset law 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * SecondRegionLimitCurveOffsetLaw
            (
            );
            /**Returns  the first region offset curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FirstRegionOffsetCurve
            (
            );
            /**Returns  the second region offset curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SecondRegionOffsetCurve
            (
            );
            /**Returns  the target sheet 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TargetSheet
            (
            );
            /**Returns  the target point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TargetPoint
            (
            );
            /**Sets  the target point 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetPoint
            (
                NXOpen::Point * targetPoint /** targetpoint */ 
            );
            /**Returns  the target point method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::PointMethodType TargetPointMethod
            (
            );
            /**Sets  the target point method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetPointMethod
            (
                NXOpen::Features::GlobalShapingBuilder::PointMethodType targetPointMethod /** targetpointmethod */ 
            );
            /**Returns  the target point offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TargetPointOffset
            (
            );
            /**Returns  the target curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * TargetCurve
            (
            );
            /**Returns  the target curve offset type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::OffsetMethod TargetCurveOffsetType
            (
            );
            /**Sets  the target curve offset type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetCurveOffsetType
            (
                NXOpen::Features::GlobalShapingBuilder::OffsetMethod targetCurveOffsetType /** targetcurveoffsettype */ 
            );
            /**Returns  the target curve offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TargetCurveOffset
            (
            );
            /**Returns  the target curve offset law 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * TargetCurveOffsetLaw
            (
            );
            /**Returns  the first target curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FirstTargetCurve
            (
            );
            /**Returns  the first target curve offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FirstTargetCurveOffset
            (
            );
            /**Returns  the projection direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ProjectionDirection
            (
            );
            /**Sets  the projection direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetProjectionDirection
            (
                NXOpen::Direction * projectionDirection /** projectiondirection */ 
            );
            /**Returns  the stretch direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * StretchDirection
            (
            );
            /**Sets  the stretch direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStretchDirection
            (
                NXOpen::Direction * stretchDirection /** stretchdirection */ 
            );
            /**Returns  the second target curve 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SecondTargetCurve
            (
            );
            /**Returns  the second target curve offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SecondTargetCurveOffset
            (
            );
            /**Returns  the region boundary offset 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RegionToDeformOffset
            (
            );
            /**Returns  the deformation direction method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::DirectionMethodType DeformationDirectionMethod
            (
            );
            /**Sets  the deformation direction method 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeformationDirectionMethod
            (
                NXOpen::Features::GlobalShapingBuilder::DirectionMethodType deformationDirectionMethod /** deformationdirectionmethod */ 
            );
            /**Returns  the deformation direction vector 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DeformationDirectionVector
            (
            );
            /**Sets  the deformation direction vector 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeformationDirectionVector
            (
                NXOpen::Direction * deformationDirection /** deformationdirection */ 
            );
            /**Returns  the deformation direction reverse 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool DeformationDirectionReverse
            (
            );
            /**Sets  the deformation direction reverse 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDeformationDirectionReverse
            (
                bool deformationDirectionReverse /** deformationdirectionreverse */ 
            );
            /**Returns  the rotation angle type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::RotationMethod RotationAngleType
            (
            );
            /**Sets  the rotation angle type 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotationAngleType
            (
                NXOpen::Features::GlobalShapingBuilder::RotationMethod rotationAngleType /** rotationangletype */ 
            );
            /**Returns  the rotation type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::RotationMethodType RotationType
            (
            );
            /**Sets  the rotation type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotationType
            (
                NXOpen::Features::GlobalShapingBuilder::RotationMethodType rotationType /** rotationtype */ 
            );
            /**Returns  the rotation angle value 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RotationAngle
            (
            );
            /**Returns  the rotation distance value 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RotationDistance
            (
            );
            /**Returns  the rotation angle law 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RotationAngleLaw
            (
            );
            /**Returns  the rotation distance law 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * RotationDistanceLaw
            (
            );
            /**Returns  the rotation angle reverse direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool RotationAngleReverseDirection
            (
            );
            /**Sets  the rotation angle reverse direction 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotationAngleReverseDirection
            (
                bool rotationAngleReverseDirection /** rotationanglereversedirection */ 
            );
            /**Returns  the transition options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::TransitionType TransitionOptions
            (
            );
            /**Sets  the transition options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTransitionOptions
            (
                NXOpen::Features::GlobalShapingBuilder::TransitionType transitionOptions /** transitionoptions */ 
            );
            /**Returns  the transition law 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * TransitionLaw
            (
            );
            /**Returns  the transition shape control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double TransitionShapeControl
            (
            );
            /**Sets  the transition shape control 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTransitionShapeControl
            (
                double transitionShapeControl /** transitionshapecontrol */ 
            );
            /**Returns  the radius reduction percent 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RadiusReductionPercent
            (
            );
            /**Returns  the taper start. Distance at the start to apply the taper. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TaperStart
            (
            );
            /**Returns  the taper end. Distance at the end to apply the taper.  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TaperEnd
            (
            );
            /**Returns  the radius options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::RadiusType RadiusOptions
            (
            );
            /**Sets  the radius options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRadiusOptions
            (
                NXOpen::Features::GlobalShapingBuilder::RadiusType radiusOptions /** radiusoptions */ 
            );
            /**Returns  the feature options 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::FeatureOptions * FeatureOptions
            (
            );
            /**Returns  the modify input sheet 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool ModifyInputSheet
            (
            );
            /**Sets  the modify input sheet 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetModifyInputSheet
            (
                bool modifyInputSheet /** modifyinputsheet */ 
            );
            /**Returns  the distance tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /** Create a new target point 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingPointOffsetBuilder * NewTargetPoint
            (
            );
            /**Returns  the target points list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingPointOffsetBuilderList * TargetPointsList
            (
            );
            /** Create a new target curve 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingCurveOffsetBuilder * NewTargetCurve
            (
            );
            /**Returns  the target curves list 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Features::GlobalShapingCurveOffsetBuilderList * TargetCurvesList
            (
            );
            /**Returns  the maximum iterations count used for approximating the deformed sheet. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int IterationCount
            (
            );
            /**Sets  the maximum iterations count used for approximating the deformed sheet. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIterationCount
            (
                int iterationCount /** iterationcount */ 
            );
            /**Returns  the objects to transform with the deformation 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * AssociatedObjects
            (
            );
            /**Returns  the orientation of the target curve to the limit curves. Only used when 
                        deformation_type is @link NXOpen::Features::GlobalShapingBuilder::DeformationTypeValuesWallDeformation NXOpen::Features::GlobalShapingBuilder::DeformationTypeValuesWallDeformation@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::TargetCurveOrientationType TargetCurveOrientation
            (
            );
            /**Sets  the orientation of the target curve to the limit curves. Only used when 
                        deformation_type is @link NXOpen::Features::GlobalShapingBuilder::DeformationTypeValuesWallDeformation NXOpen::Features::GlobalShapingBuilder::DeformationTypeValuesWallDeformation@endlink . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetCurveOrientation
            (
                NXOpen::Features::GlobalShapingBuilder::TargetCurveOrientationType orientation /** orientation */ 
            );
            /**Returns  the base face selection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * BaseSheetSelection
            (
            );
            /**Returns  the control face selection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * ControlSheetSelection
            (
            );
            /**Returns  the modify method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GlobalShapingBuilder::ModifyMethodType ModifyMethod
            (
            );
            /**Sets  the modify method 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetModifyMethod
            (
                NXOpen::Features::GlobalShapingBuilder::ModifyMethodType modifyMethod /** modifymethod */ 
            );
            /**Returns  the move pole 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::MovePoleBuilder * MovePole
            (
            );
            /** Base sheet 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetBaseSheet
            (
                NXOpen::Body * baseSheet /** basesheet */ 
            );
            /** Control sheet 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetControlSheet
            (
                NXOpen::Body * controlSheet /** controlsheet */ 
            );
            /**Returns  the base curve 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * BaseCurve
            (
            );
            /**Returns  the curve control 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * ControlCurve
            (
            );
            /** Enable move pole 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void EnableMovePole
            (
                bool enable /** enable */ 
            );
            /**Returns  the twist angle law 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::LawBuilder * TwistAngleLaw
            (
            );
            /**Returns  the twist angle reverse direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool TwistAngleReverseDirection
            (
            );
            /**Sets  the twist angle reverse direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTwistAngleReverseDirection
            (
                bool twistAngleReverseDirection /** twistanglereversedirection */ 
            );
            /**Returns  the equal arc length toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool KeepBaseLength
            (
            );
            /**Sets  the equal arc length toggle 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetKeepBaseLength
            (
                bool keepBaseLength /** keepbaselength */ 
            );
            /**Returns  the start location of control curve 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * StartLocation
            (
            );
            /** Enable move pole 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void UpdateDeformSheetType
            (
            );
            /**Returns  the flip base udirection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FlipBaseUDirection
            (
            );
            /**Sets  the flip base udirection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFlipBaseUDirection
            (
                bool flipBaseUDirection /** flipbaseudirection */ 
            );
            /**Returns  the flip base vdirection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FlipBaseVDirection
            (
            );
            /**Sets  the flip base vdirection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFlipBaseVDirection
            (
                bool flipBaseVDirection /** flipbasevdirection */ 
            );
            /**Returns  the flip base normal direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FlipBaseNormalDirection
            (
            );
            /**Sets  the flip base normal direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFlipBaseNormalDirection
            (
                bool flipBaseNormalDirection /** flipbasenormaldirection */ 
            );
            /**Returns  the flip control udirection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FlipControlUDirection
            (
            );
            /**Sets  the flip control udirection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFlipControlUDirection
            (
                bool flipControlUDirection /** flipcontroludirection */ 
            );
            /**Returns  the flip control vdirection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FlipControlVDirection
            (
            );
            /**Sets  the flip control vdirection 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFlipControlVDirection
            (
                bool flipControlVDirection /** flipcontrolvdirection */ 
            );
            /**Returns  the flip control normal direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool FlipControlNormalDirection
            (
            );
            /**Sets  the flip control normal direction 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetFlipControlNormalDirection
            (
                bool flipControlNormalDirection /** flipcontrolnormaldirection */ 
            );

            /// \cond NX_NO_DOC 
            /** A function to create and copy NX facet body used in preview 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void CreatePreviewFacets
            (
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
