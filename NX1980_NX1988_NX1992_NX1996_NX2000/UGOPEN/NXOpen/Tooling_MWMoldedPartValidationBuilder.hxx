#ifndef NXOpen_TOOLING_MWMOLDEDPARTVALIDATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_MWMOLDEDPARTVALIDATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_MWMoldedPartValidationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class MWMoldedPartValidationBuilder;
    }
    class Body;
    class Builder;
    class Direction;
    class Edge;
    class Face;
    class NXColor;
    class SelectBody;
    class SelectFace;
    class SelectFaceList;
    namespace Tooling
    {
        class _MWMoldedPartValidationBuilderBuilder;
        class MWMoldedPartValidationBuilderImpl;
        /** Represents a builder to be used to perform Molded Part Validation analysis.  <br> To create a new instance of this class, use @link NXOpen::Tooling::MWMoldedPartValidationManager::CreateMWMoldedPartValidationBuilder  NXOpen::Tooling::MWMoldedPartValidationManager::CreateMWMoldedPartValidationBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        CalculationOption </term> <description> 
         
        KeepExisting </description> </item> 

        <item><term> 
         
        FaceDraftAngleLimit </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        FaceHighlightSelectedFaces </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        FaceNonSelectedFacesTranslucency </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectAllFaces </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectCrossoverFaces </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectNegativeFaces1 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectNegativeFaces2 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectPositiveFaces1 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectPositiveFaces2 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectUndercutAreas </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectUndercutEdges </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectVerticalFaces </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        FaceSelectedFacesTranslucency </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationCheckScope </term> <description> 
         
        FaceProperties </description> </item> 

        <item><term> 
         
        InformationLowerLimit </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR01 </term> <description> 
         
        5.5 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR02 </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR03 </term> <description> 
         
        4.5 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR04 </term> <description> 
         
        4 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR05 </term> <description> 
         
        3.5 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR06 </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR07 </term> <description> 
         
        2.5 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR08 </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR09 </term> <description> 
         
        1.5 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR10 </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR11 </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        InformationLowerLimitR12 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationRangeType </term> <description> 
         
        Uniform </description> </item> 

        <item><term> 
         
        InformationSharpAngleLimit </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        InformationShowBoundaryEdges </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR01 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR02 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR03 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR04 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR05 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR06 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR07 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR08 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR09 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR10 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR11 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowRangeR12 </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationShowSharpEdges </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        InformationUpperLimit </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR01 </term> <description> 
         
        6 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR02 </term> <description> 
         
        5.5 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR03 </term> <description> 
         
        5 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR04 </term> <description> 
         
        4.5 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR05 </term> <description> 
         
        4 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR06 </term> <description> 
         
        3.5 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR07 </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR08 </term> <description> 
         
        2.5 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR09 </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR10 </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR11 </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        InformationUpperLimitR12 </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        InformationUseSingleTolerance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RegionAssignToRegionOption </term> <description> 
         
        CavityRegion </description> </item> 

        <item><term> 
         
        RegionCavityRegionTranslucency </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RegionCoreRegionTranslucency </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RegionSelectCrossoverRegionFaces </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RegionSelectCrossoverVerticalFaces </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RegionSelectUnknownFaces </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        RegionShowIncompleteLoops </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        RegionShowInternalLoops </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        RegionShowPartingEdges </term> <description> 
         
        1 </description> </item> 

        </list> 

         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  MWMoldedPartValidationBuilder : public NXOpen::Builder
        {
            /** Calculation options */
            public: enum CalculateOption
            {
                CalculateOptionKeepExisting/** calculate and keep existing properties on the faces */,
                CalculateOptionEditRegionsOnly/** edit properties of region faces only */,
                CalculateOptionResetAll/** calculate and replace all properties for region faces */
            };

            /** Options for assigning faces to the Cavity or Core region */
            public: enum AssignToRegion
            {
                AssignToRegionCavityRegion/** assign selected region faces to the Cavity region */,
                AssignToRegionCoreRegion/** assign selected region faces to the Core region */
            };

            /** Check scope for information */
            public: enum CheckScope
            {
                CheckScopeFaceProperties/** face properties */,
                CheckScopeModelProperties/** model properties */,
                CheckScopeSharpCorners/** sharp corners */
            };

            /** Range type for displaying small corner radius faces */
            public: enum RangeType
            {
                RangeTypeUniform/** uniform range limit values */,
                RangeTypeRange/** user-defined range limit values */,
                RangeTypePlain/** range limit values defined by tolerances */
            };

            private: MWMoldedPartValidationBuilderImpl * m_mwmoldedpartvalidationbuilder_impl;
            private: friend class  _MWMoldedPartValidationBuilderBuilder;
            protected: MWMoldedPartValidationBuilder();
            public: ~MWMoldedPartValidationBuilder();
            /**Returns  the product body to be analyzed on the Calculate Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::SelectBody * CalculationProductBody
            (
            );
            /**Returns  the draw direction on the Calculate Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Direction * CalculationDrawDirection
            (
            );
            /**Sets  the draw direction on the Calculate Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetCalculationDrawDirection
            (
                NXOpen::Direction * calculationDrawDirection /** calculationdrawdirection */ 
            );
            /**Returns  the calculation option on the Calculate Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::MWMoldedPartValidationBuilder::CalculateOption CalculationOption
            (
            );
            /**Sets  the calculation option on the Calculate Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetCalculationOption
            (
                NXOpen::Tooling::MWMoldedPartValidationBuilder::CalculateOption calculationOption /** calculationoption */ 
            );
            /** Calculate button on the Calculate Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void Calculate
            (
            );
            /**Returns  the option for highlighting the selected faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceHighlightSelectedFaces
            (
            );
            /**Sets  the option for highlighting the selected faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceHighlightSelectedFaces
            (
                bool faceHighlightSelectedFaces /** facehighlightselectedfaces */ 
            );
            /**Returns  the draft angle limit on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double FaceDraftAngleLimit
            (
            );
            /**Sets  the draft angle limit on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceDraftAngleLimit
            (
                double faceDraftAngleLimit /** facedraftanglelimit */ 
            );
            /**Returns  the option for turning on/off the selection of all faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectAllFaces
            (
            );
            /**Sets  the option for turning on/off the selection of all faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectAllFaces
            (
                bool faceSelectAllFaces /** faceselectallfaces */ 
            );
            /**Returns  the color for applying to all faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FaceAllFacesColor
            (
            );
            /**Sets  the color for applying to all faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceAllFacesColor
            (
                NXOpen::NXColor * faceAllFacesColor /** faceallfacescolor */ 
            );
            /**Returns  the option for turning on/off the highlight of the positive faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectPositiveFaces1
            (
            );
            /**Sets  the option for turning on/off the highlight of the positive faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectPositiveFaces1
            (
                bool faceSelectPositiveFaces1 /** faceselectpositivefaces1 */ 
            );
            /**Returns  the color for applying to the positive faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FacePositiveFacesColor1
            (
            );
            /**Sets  the color for applying to the positive faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFacePositiveFacesColor1
            (
                NXOpen::NXColor * facePositiveFacesColor1 /** facepositivefacescolor1 */ 
            );
            /**Returns  the option for turning on/off the highlight of the positive small radius faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectPositiveFaces2
            (
            );
            /**Sets  the option for turning on/off the highlight of the positive small radius faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectPositiveFaces2
            (
                bool faceSelectPositiveFaces2 /** faceselectpositivefaces2 */ 
            );
            /**Returns  the color for applying to the positive small radius faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FacePositiveFacesColor2
            (
            );
            /**Sets  the color for applying to the positive small radius faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFacePositiveFacesColor2
            (
                NXOpen::NXColor * facePositiveFacesColor2 /** facepositivefacescolor2 */ 
            );
            /**Returns  the option for turning on/off the highlight of the vertical faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectVerticalFaces
            (
            );
            /**Sets  the option for turning on/off the highlight of the vertical faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectVerticalFaces
            (
                bool faceSelectVerticalFaces /** faceselectverticalfaces */ 
            );
            /**Returns  the color for applying to the vertical faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FaceVerticalFacesColor
            (
            );
            /**Sets  the color for applying to the vertical faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceVerticalFacesColor
            (
                NXOpen::NXColor * faceVerticalFacesColor /** faceverticalfacescolor */ 
            );
            /**Returns  the option for turning on/off the highlight of the negative small radius faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectNegativeFaces1
            (
            );
            /**Sets  the option for turning on/off the highlight of the negative small radius faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectNegativeFaces1
            (
                bool faceSelectNegativeFaces1 /** faceselectnegativefaces1 */ 
            );
            /**Returns  the color for applying to the negative small radius faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FaceNegativeFacesColor1
            (
            );
            /**Sets  the color for applying to the negative small radius faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceNegativeFacesColor1
            (
                NXOpen::NXColor * faceNegativeFacesColor1 /** facenegativefacescolor1 */ 
            );
            /**Returns  the option for turning on/off the highlight of the negative faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectNegativeFaces2
            (
            );
            /**Sets  the option for turning on/off the highlight of the negative faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectNegativeFaces2
            (
                bool faceSelectNegativeFaces2 /** faceselectnegativefaces2 */ 
            );
            /**Returns  the color for applying to the negative faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FaceNegativeFacesColor2
            (
            );
            /**Sets  the color for applying to the negative faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceNegativeFacesColor2
            (
                NXOpen::NXColor * faceNegativeFacesColor2 /** facenegativefacescolor2 */ 
            );
            /** Action button for setting color on all faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void FaceSetAllFacesColor
            (
            );
            /**Returns  the option for turning on/off the highlight of the crossover faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectCrossoverFaces
            (
            );
            /**Sets  the option for turning on/off the highlight of the crossover faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectCrossoverFaces
            (
                bool faceSelectCrossoverFaces /** faceselectcrossoverfaces */ 
            );
            /**Returns  the color for applying to the crossover faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FaceCrossoverFacesColor
            (
            );
            /**Sets  the color for applying to the crossover faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceCrossoverFacesColor
            (
                NXOpen::NXColor * faceCrossoverFacesColor /** facecrossoverfacescolor */ 
            );
            /**Returns  the option for turning on/off the highlight of the undercut area faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectUndercutAreas
            (
            );
            /**Sets  the option for turning on/off the highlight of the undercut area faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectUndercutAreas
            (
                bool faceSelectUndercutAreas /** faceselectundercutareas */ 
            );
            /**Returns  the color for applying to the undercut area faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FaceUndercutAreasColor
            (
            );
            /**Sets  the color for applying to the undercut area faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceUndercutAreasColor
            (
                NXOpen::NXColor * faceUndercutAreasColor /** faceundercutareascolor */ 
            );
            /**Returns  the option for turning on/off the highlight of the undercut edges on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool FaceSelectUndercutEdges
            (
            );
            /**Sets  the option for turning on/off the highlight of the undercut edges on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectUndercutEdges
            (
                bool faceSelectUndercutEdges /** faceselectundercutedges */ 
            );
            /**Returns  the color for applying to the undercut edges on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * FaceUndercutEdgesColor
            (
            );
            /**Sets  the color for applying to the undercut edges on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceUndercutEdgesColor
            (
                NXOpen::NXColor * faceUndercutEdgesColor /** faceundercutedgescolor */ 
            );
            /**Returns  the translucency for the selected faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: int FaceSelectedFacesTranslucency
            (
            );
            /**Sets  the translucency for the selected faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceSelectedFacesTranslucency
            (
                int faceSelectedFacesTranslucency /** faceselectedfacestranslucency */ 
            );
            /**Returns  the translucency for the non-selected faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: int FaceNonSelectedFacesTranslucency
            (
            );
            /**Sets  the translucency for the non-selected faces on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetFaceNonSelectedFacesTranslucency
            (
                int faceNonSelectedFacesTranslucency /** facenonselectedfacestranslucency */ 
            );
            /** Action button for invoking the Split Face command on the Face Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void ProcessFaceSplit
            (
            );
            /**Returns  the faces selected for assigning to the cavity or core region. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::SelectFaceList * RegionFaces
            (
            );
            /**Returns  the color for applying to the cavity region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * RegionCavityRegionColor
            (
            );
            /**Sets  the color for applying to the cavity region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionCavityRegionColor
            (
                NXOpen::NXColor * regionCavityRegionColor /** regioncavityregioncolor */ 
            );
            /**Returns  the translucency for applying to the cavity region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: int RegionCavityRegionTranslucency
            (
            );
            /**Sets  the translucency for applying to the cavity region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionCavityRegionTranslucency
            (
                int regionCavityRegionTranslucency /** regioncavityregiontranslucency */ 
            );
            /**Returns  the color for applying to the core region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * RegionCoreRegionColor
            (
            );
            /**Sets  the color for applying to the core region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionCoreRegionColor
            (
                NXOpen::NXColor * regionCoreRegionColor /** regioncoreregioncolor */ 
            );
            /**Returns  the translucency for applying to the core region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: int RegionCoreRegionTranslucency
            (
            );
            /**Sets  the translucency for applying to the core region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionCoreRegionTranslucency
            (
                int regionCoreRegionTranslucency /** regioncoreregiontranslucency */ 
            );
            /**Returns  the color for applying to the undefined region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * RegionUndefinedRegionColor
            (
            );
            /**Sets  the color for applying to the undefined region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionUndefinedRegionColor
            (
                NXOpen::NXColor * regionUndefinedRegionColor /** regionundefinedregioncolor */ 
            );
            /** Action button for setting color on the cavity, core and undefined region faces on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void RegionSetRegionsColor
            (
            );
            /**Returns  the option for including or removing the crossover region faces in the selection on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool RegionSelectCrossoverRegionFaces
            (
            );
            /**Sets  the option for including or removing the crossover region faces in the selection on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionSelectCrossoverRegionFaces
            (
                bool regionSelectCrossoverRegionFaces /** regionselectcrossoverregionfaces */ 
            );
            /**Returns  the option for including or removing the crossover vertical faces in the selection on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool RegionSelectCrossoverVerticalFaces
            (
            );
            /**Sets  the option for including or removing the crossover vertical faces in the selection on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionSelectCrossoverVerticalFaces
            (
                bool regionSelectCrossoverVerticalFaces /** regionselectcrossoververticalfaces */ 
            );
            /**Returns  the option for including or removing the unknown faces in the selection on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool RegionSelectUnknownFaces
            (
            );
            /**Sets  the option for including or removing the unknown faces in the selection on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionSelectUnknownFaces
            (
                bool regionSelectUnknownFaces /** regionselectunknownfaces */ 
            );
            /**Returns  the option for assigning the selected region faces to the cavity or core region on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::MWMoldedPartValidationBuilder::AssignToRegion RegionAssignToRegionOption
            (
            );
            /**Sets  the option for assigning the selected region faces to the cavity or core region on the Region Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionAssignToRegionOption
            (
                NXOpen::Tooling::MWMoldedPartValidationBuilder::AssignToRegion regionAssignToRegionOption /** regionassigntoregionoption */ 
            );
            /**Returns  the option for turning on/off the highlight of the internal loop edges. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool RegionShowInternalLoops
            (
            );
            /**Sets  the option for turning on/off the highlight of the internal loop edges. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionShowInternalLoops
            (
                bool regionShowInternalLoops /** regionshowinternalloops */ 
            );
            /**Returns  the option for turning on/off the highlight of the parting edges. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool RegionShowPartingEdges
            (
            );
            /**Sets  the option for turning on/off the highlight of the parting edges. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionShowPartingEdges
            (
                bool regionShowPartingEdges /** regionshowpartingedges */ 
            );
            /**Returns  the option for turning on/off the highlight of the incomplete loop edges. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool RegionShowIncompleteLoops
            (
            );
            /**Sets  the option for turning on/off the highlight of the incomplete loop edges. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetRegionShowIncompleteLoops
            (
                bool regionShowIncompleteLoops /** regionshowincompleteloops */ 
            );
            /**Returns  the check scope on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::MWMoldedPartValidationBuilder::CheckScope InformationCheckScope
            (
            );
            /**Sets  the check scope on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationCheckScope
            (
                NXOpen::Tooling::MWMoldedPartValidationBuilder::CheckScope informationCheckScope /** informationcheckscope */ 
            );
            /**Returns  the face selected face for displaying the face properties. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::SelectFace * InformationInspectFace
            (
            );
            /**Returns  the option for turning on/off the highlight of the boundary edges of the sheet body on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowBoundaryEdges
            (
            );
            /**Sets  the option for turning on/off the highlight of the boundary edges of the sheet body on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowBoundaryEdges
            (
                bool informationShowBoundaryEdges /** informationshowboundaryedges */ 
            );
            /**Returns  the sharp angle limit on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationSharpAngleLimit
            (
            );
            /**Sets  the sharp angle limit on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationSharpAngleLimit
            (
                double informationSharpAngleLimit /** informationsharpanglelimit */ 
            );
            /**Returns  the option for turning on/off the highlight of the sharp edges of the sheet body on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowSharpEdges
            (
            );
            /**Sets  the option for turning on/off the highlight of the sharp edges of the sheet body on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowSharpEdges
            (
                bool informationShowSharpEdges /** informationshowsharpedges */ 
            );
            /**Returns  the range type on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::Tooling::MWMoldedPartValidationBuilder::RangeType InformationRangeType
            (
            );
            /**Sets  the range type on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationRangeType
            (
                NXOpen::Tooling::MWMoldedPartValidationBuilder::RangeType informationRangeType /** informationrangetype */ 
            );
            /**Returns  the upper limit on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimit
            (
            );
            /**Sets  the upper limit on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimit
            (
                double informationUpperLimit /** informationupperlimit */ 
            );
            /**Returns  the option for using a single tolerance for defining the range limit values on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationUseSingleTolerance
            (
            );
            /**Sets  the option for using a single tolerance for defining the range limit values on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUseSingleTolerance
            (
                bool informationUseSingleTolerance /** informationusesingletolerance */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 1 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR01
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 1 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR01
            (
                bool informationShowRangeR01 /** informationshowranger01 */ 
            );
            /**Returns  the lower limit of row 1 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR01
            (
            );
            /**Sets  the lower limit of row 1 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR01
            (
                double informationLowerLimitR01 /** informationlowerlimitr01 */ 
            );
            /**Returns  the upper limit of row 1 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR01
            (
            );
            /**Sets  the upper limit of row 1 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR01
            (
                double informationUpperLimitR01 /** informationupperlimitr01 */ 
            );
            /**Returns  the color of row 1 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR01
            (
            );
            /**Sets  the color of row 1 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR01
            (
                NXOpen::NXColor * informationColorR01 /** informationcolorr01 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 2 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR02
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 2 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR02
            (
                bool informationShowRangeR02 /** informationshowranger02 */ 
            );
            /**Returns  the lower limit of row 2 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR02
            (
            );
            /**Sets  the lower limit of row 2 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR02
            (
                double informationLowerLimitR02 /** informationlowerlimitr02 */ 
            );
            /**Returns  the upper limit of row 2 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR02
            (
            );
            /**Sets  the upper limit of row 2 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR02
            (
                double informationUpperLimitR02 /** informationupperlimitr02 */ 
            );
            /**Returns  the color of row 2 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR02
            (
            );
            /**Sets  the color of row 2 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR02
            (
                NXOpen::NXColor * informationColorR02 /** informationcolorr02 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 3 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR03
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 3 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR03
            (
                bool informationShowRangeR03 /** informationshowranger03 */ 
            );
            /**Returns  the lower limit of row 3 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR03
            (
            );
            /**Sets  the lower limit of row 3 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR03
            (
                double informationLowerLimitR03 /** informationlowerlimitr03 */ 
            );
            /**Returns  the upper limit of row 3 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR03
            (
            );
            /**Sets  the upper limit of row 3 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR03
            (
                double informationUpperLimitR03 /** informationupperlimitr03 */ 
            );
            /**Returns  the color of row 3 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR03
            (
            );
            /**Sets  the color of row 3 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR03
            (
                NXOpen::NXColor * informationColorR03 /** informationcolorr03 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 4 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR04
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 4 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR04
            (
                bool informationShowRangeR04 /** informationshowranger04 */ 
            );
            /**Returns  the lower limit of row 4 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR04
            (
            );
            /**Sets  the lower limit of row 4 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR04
            (
                double informationLowerLimitR04 /** informationlowerlimitr04 */ 
            );
            /**Returns  the upper limit of row 4 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR04
            (
            );
            /**Sets  the upper limit of row 4 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR04
            (
                double informationUpperLimitR04 /** informationupperlimitr04 */ 
            );
            /**Returns  the color of row 4 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR04
            (
            );
            /**Sets  the color of row 4 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR04
            (
                NXOpen::NXColor * informationColorR04 /** informationcolorr04 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 5 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR05
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 5 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR05
            (
                bool informationShowRangeR05 /** informationshowranger05 */ 
            );
            /**Returns  the lower limit of row 5 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR05
            (
            );
            /**Sets  the lower limit of row 5 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR05
            (
                double informationLowerLimitR05 /** informationlowerlimitr05 */ 
            );
            /**Returns  the upper limit of row 5 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR05
            (
            );
            /**Sets  the upper limit of row 5 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR05
            (
                double informationUpperLimitR05 /** informationupperlimitr05 */ 
            );
            /**Returns  the color of row 5 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR05
            (
            );
            /**Sets  the color of row 5 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR05
            (
                NXOpen::NXColor * informationColorR05 /** informationcolorr05 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 6 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR06
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 6 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR06
            (
                bool informationShowRangeR06 /** informationshowranger06 */ 
            );
            /**Returns  the lower limit of row 6 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR06
            (
            );
            /**Sets  the lower limit of row 6 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR06
            (
                double informationLowerLimitR06 /** informationlowerlimitr06 */ 
            );
            /**Returns  the upper limit of row 6 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR06
            (
            );
            /**Sets  the upper limit of row 6 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR06
            (
                double informationUpperLimitR06 /** informationupperlimitr06 */ 
            );
            /**Returns  the color of row 6 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR06
            (
            );
            /**Sets  the color of row 6 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR06
            (
                NXOpen::NXColor * informationColorR06 /** informationcolorr06 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 7 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR07
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 7 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR07
            (
                bool informationShowRangeR07 /** informationshowranger07 */ 
            );
            /**Returns  the lower limit of row 7 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR07
            (
            );
            /**Sets  the lower limit of row 7 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR07
            (
                double informationLowerLimitR07 /** informationlowerlimitr07 */ 
            );
            /**Returns  the upper limit of row 7 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR07
            (
            );
            /**Sets  the upper limit of row 7 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR07
            (
                double informationUpperLimitR07 /** informationupperlimitr07 */ 
            );
            /**Returns  the color of row 7 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR07
            (
            );
            /**Sets  the color of row 7 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR07
            (
                NXOpen::NXColor * informationColorR07 /** informationcolorr07 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 8 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR08
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 8 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR08
            (
                bool informationShowRangeR08 /** informationshowranger08 */ 
            );
            /**Returns  the lower limit of row 8 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR08
            (
            );
            /**Sets  the lower limit of row 8 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR08
            (
                double informationLowerLimitR08 /** informationlowerlimitr08 */ 
            );
            /**Returns  the upper limit of row 8 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR08
            (
            );
            /**Sets  the upper limit of row 8 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR08
            (
                double informationUpperLimitR08 /** informationupperlimitr08 */ 
            );
            /**Returns  the color of row 8 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR08
            (
            );
            /**Sets  the color of row 8 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR08
            (
                NXOpen::NXColor * informationColorR08 /** informationcolorr08 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 9 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR09
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 9 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR09
            (
                bool informationShowRangeR09 /** informationshowranger09 */ 
            );
            /**Returns  the lower limit of row 9 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR09
            (
            );
            /**Sets  the lower limit of row 9 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR09
            (
                double informationLowerLimitR09 /** informationlowerlimitr09 */ 
            );
            /**Returns  the upper limit of row 9 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR09
            (
            );
            /**Sets  the upper limit of row 9 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR09
            (
                double informationUpperLimitR09 /** informationupperlimitr09 */ 
            );
            /**Returns  the color of row 9 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR09
            (
            );
            /**Sets  the color of row 9 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR09
            (
                NXOpen::NXColor * informationColorR09 /** informationcolorr09 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 10 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR10
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 10 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR10
            (
                bool informationShowRangeR10 /** informationshowranger10 */ 
            );
            /**Returns  the lower limit of row 10 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR10
            (
            );
            /**Sets  the lower limit of row 10 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR10
            (
                double informationLowerLimitR10 /** informationlowerlimitr10 */ 
            );
            /**Returns  the upper limit of row 10 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR10
            (
            );
            /**Sets  the upper limit of row 10 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR10
            (
                double informationUpperLimitR10 /** informationupperlimitr10 */ 
            );
            /**Returns  the color of row 10 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR10
            (
            );
            /**Sets  the color of row 10 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR10
            (
                NXOpen::NXColor * informationColorR10 /** informationcolorr10 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 11 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR11
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 11 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR11
            (
                bool informationShowRangeR11 /** informationshowranger11 */ 
            );
            /**Returns  the lower limit of row 11 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR11
            (
            );
            /**Sets  the lower limit of row 11 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR11
            (
                double informationLowerLimitR11 /** informationlowerlimitr11 */ 
            );
            /**Returns  the upper limit of row 11 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR11
            (
            );
            /**Sets  the upper limit of row 11 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR11
            (
                double informationUpperLimitR11 /** informationupperlimitr11 */ 
            );
            /**Returns  the color of row 11 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR11
            (
            );
            /**Sets  the color of row 11 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR11
            (
                NXOpen::NXColor * informationColorR11 /** informationcolorr11 */ 
            );
            /**Returns  the option of selecting the small radius faces within the range limit values of row 12 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: bool InformationShowRangeR12
            (
            );
            /**Sets  the option of selecting the small radius faces within the range limit values of row 12 on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationShowRangeR12
            (
                bool informationShowRangeR12 /** informationshowranger12 */ 
            );
            /**Returns  the lower limit of row 12 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimitR12
            (
            );
            /**Sets  the lower limit of row 12 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimitR12
            (
                double informationLowerLimitR12 /** informationlowerlimitr12 */ 
            );
            /**Returns  the upper limit of row 12 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationUpperLimitR12
            (
            );
            /**Sets  the upper limit of row 12 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationUpperLimitR12
            (
                double informationUpperLimitR12 /** informationupperlimitr12 */ 
            );
            /**Returns  the color of row 12 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: NXOpen::NXColor * InformationColorR12
            (
            );
            /**Sets  the color of row 12 for the small radius faces on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationColorR12
            (
                NXOpen::NXColor * informationColorR12 /** informationcolorr12 */ 
            );
            /**Returns  the lower limit of the range limit values on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: double InformationLowerLimit
            (
            );
            /**Sets  the lower limit of the range limit values on the Information Tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInformationLowerLimit
            (
                double informationLowerLimit /** informationlowerlimit */ 
            );
            /**Returns  the flag that indicates the Apply status of the command, needed only in the interactive environment. 0: "Apply" has not been done before; 1: "Apply" has been done before. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: int InApplyStatus
            (
            );
            /**Sets  the flag that indicates the Apply status of the command, needed only in the interactive environment. 0: "Apply" has not been done before; 1: "Apply" has been done before. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetInApplyStatus
            (
                int inApplyStatus /** inapplystatus */ 
            );
            /**Returns  the active tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: int ActiveTabPage
            (
            );
            /**Sets  the active tab page. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetActiveTabPage
            (
                int activeTabPage /** activetabpage */ 
            );
            /** Update the eject direction. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateEjectDirection
            (
            );
            /** Initialize the MPV data for performing analysis in Molded Part Validation. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void InitMpvData
            (
                int changeBody /** 0: No change in the selected body; 1: Change in the selected body; 2: Change in direction for the selected body. */
            );
            /** Update the MPV data used in performing analysis in Molded Part Validation whenever there are changes in data on dialog. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateMpvData
            (
            );
            /** Perform model properties calculation if the calculation has not been performed before. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void PerformModelPropertiesCalculation
            (
            );
            /** Perform the sharp corners calculation if the calculation has not been performed before. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void PerformSharpCornersCalculation
            (
            );
            /** Update the sharp edges information based on the new sharp angle limit which has been changed by the user. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateSharpEdgesInformation
            (
            );
            /** Update the small radius faces information based on the new range limits of the radius which has been changed by the user. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateSmallRadiusFacesInformation
            (
            );
            /** Set the product body to be analyzed on the Calculate Tab page. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void SetCalculationProductBody
            (
                NXOpen::Body * calculationProductBody /** The product body */
            );

            /// \cond NX_NO_DOC 
            /** Apply all default parameters after initializtion. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void ApplyAllDefaultParametersAfterInit
            (
            );

            /// \endcond 
            /** Get a list of different types of faces calculated from face analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void GetFaceAnalysisFaces
            (
                std::vector<NXOpen::Face *> & allFaces /** A list of all faces */,
                std::vector<NXOpen::Face *> & positiveFaces /** A list of positive faces */,
                std::vector<NXOpen::Face *> & smallDraftAnglePositiveFaces /** A list of small draft angle positive faces */,
                std::vector<NXOpen::Face *> & verticalFaces /** A list of vertical faces */,
                std::vector<NXOpen::Face *> & smallDraftAngleNegativeFaces /** A list of small draft angle negative faces */,
                std::vector<NXOpen::Face *> & negativeFaces /** A list of negative faces */
            );
            /** Get a list of crossover faces, undercut faces and edges, undercut areas calculated from face analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void GetCrossoverFacesAndUndercuts
            (
                std::vector<NXOpen::Face *> & crossoverFaces /** A list of crossover faces */,
                std::vector<NXOpen::Face *> & undercutFaces /** A list of undercut faces */,
                std::vector<NXOpen::Edge *> & undercutEdges /** A list undercut edges */,
                int* nUndercutAreas /** Number of undercut areas */
            );
            /** Get a list of different types of faces calculated from region analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void GetRegionAnalysisFaces
            (
                std::vector<NXOpen::Face *> & cavityRegionFaces /** A list of cavity region faces */,
                std::vector<NXOpen::Face *> & coreRegionFaces /** A list of core region faces */,
                std::vector<NXOpen::Face *> & undefinedRegionFaces /** A list of undefined region faces */,
                std::vector<NXOpen::Face *> & undefinedCrossoverRegionFaces /** A list of undefined crossover region faces */,
                std::vector<NXOpen::Face *> & undefinedCrossoverVerticalFaces /** A list of undefined crossover vertical region faces */,
                std::vector<NXOpen::Face *> & undefinedUnknownRegionFaces /** A list of undefined unknown region faces */,
                std::vector<NXOpen::Edge *> & partingEdges /** A list of parting edges */,
                std::vector<int> & nInternalLoopEdges /** A list of the number of edges in each of the internal loops */,
                std::vector<NXOpen::Edge *> & allInternalLoopEdges /** A list of edges in all internal loops */,
                std::vector<int> & nIncompleteLoopEdges /** A list of the number of edges in each of the incomplete loops */,
                std::vector<NXOpen::Edge *> & allIncompleteLoopEdges /** A list of edges in all incomplete loops */
            );

            /// \cond NX_NO_DOC 
            /** Get a closest NX color ID for given RGB values  @return  NX color ID of a color 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: int GetClosestNXColorIDFromRGB
            (
                const NXOpen::NXColor::Rgb & colorRGB /** RGB values of a color */
            );

            /// \endcond 
            /** Get a list of all colors for faces used in face and region analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void GetAllColors
            (
                std::vector<int> & nxFaceColorIDs /** A list of nx color IDs for faces used in face analysis */,
                std::vector<NXOpen::NXColor::Rgb> & faceColorRGBs /** A list of RGB values for faces used in face analysis */,
                std::vector<int> & nxRegionColorIDs /** A list of nx color IDs for faces used in region analysis */,
                std::vector<NXOpen::NXColor::Rgb> & regionColorRGBs /** A list of RGB values for faces used in region analysis */
            );

            /// \cond NX_NO_DOC 
            /** Change the color of the Cavity, Core and Undefined regions in region analysis using input interger RGB values 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void ChangeRegionsColor
            (
                const std::vector<int> & intRGBValues /** Integer RGB values for the colors of the Cavity, Core and Undefined regions */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Change the translucency of the Cavity and Core regions in region analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void ChangeRegionsTranslucency
            (
                const std::vector<int> & intTranslucencyValues /** Translucency of the Cavity and Core regions */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Retrieve the translucency of the Cavity and Core regions in region analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void RetrieveRegionsTranslucency
            (
                std::vector<int> & intTranslucencyValues /** Translucency of the Cavity and Core regions */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Change the color of the faces in face draft analysis using input interger RGB values 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void ChangeDraftFacesColor
            (
                const std::vector<int> & intRGBValues /** Integer RGB values for the new colors of faces */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update the draft faces information on draft angle limit change 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateDraftFacesInfoOnDraftAngleLimitChange
            (
                double draftAngleLimit /** New draft angle limit */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Execute operations done when the Apply button in dialog is clicked to update the analysis data 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ExecuteApply
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Highlight faces and edges based on toggles on the tab pages. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void HighlightBasedOnToggles
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** De-highlight all highlighted faces and edges. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void DehighlightAll
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Initialize NX Draft Analysis. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void InitDraftAnalysis
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Reset NX Draft Analysis. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetDraftAnalysis
            (
                bool deleteDraftAnalysisAO /** Whether of not to delete the Check Regions Draft Analysis AO */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update Draft Analysis display. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateDraftAnalysisDisplay
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update Draft Analysis display using input interger RGB values 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateDraftAnalysisDisplayOnColorChange
            (
                const std::vector<int> & intRGBValues /** Integer RGB values for the new colors used in Modeling Draft Analysis */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update Draft Analysis display on draft angle limit change 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateDraftAnalysisDisplayOnDraftAngleLimitChange
            (
                double draftAngleLimit /** New draft angle limit */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Initialize MPV Draft Analysis. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void InitMPVDraftAnalysis
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update MPV Draft Analysis display using input interger RGB values 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateMPVDraftAnalysisDisplayOnColorChange
            (
                const std::vector<int> & intRGBValues /** Integer RGB values for the new colors used in MPV Draft Analysis */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update MPV Draft Analysis display on Draft Angle Limit changes. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateMPVDraftAnalysisDisplayOnDraftAngleLimitChange
            (
                double draftAngleLimit /** Draft angle limit */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Update MPV Draft Analysis display on draw direction changes. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateMPVDraftAnalysisDisplayOnDrawDirectionChange
            (
                const NXOpen::Vector3d & drawDirection /** I - Draw direction */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get a list of convergent bodies created from Molded Part Validation draft analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void GetMPVDraftAnalysisConvergentBodies
            (
                std::vector<NXOpen::Body *> & mpvDraftAnalysisConvergentBodies /** A list of convergent bodies created from MPV draft analysis */,
                std::vector<int> & bodyType /** A list of body type for MPV draft analysis convergent bodies */
            );

            /// \endcond 
            /** Get the On and Off state of convergent bodies created from the MPV Draft Analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void GetOnOffStatesOfMPVDraftAnalysisConvergentBodies
            (
                std::vector<int> & onOffStates /** On and Off state of convergent bodies */
            );

            /// \cond NX_NO_DOC 
            /** Update the on and off state of convergent bodies created from the MPV Draft Analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void UpdateOnOffStateOfMPVDraftAnalysisConvergentBodies
            (
                const std::vector<int> & onOffStates /** On and Off state of convergent bodies created from the MPV Draft Analysis */,
                int option /** 0 - No update display; 1 - update display */
            );

            /// \endcond 
            /** Check if the draft and region analysis results are available and up-to-date 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void CheckAnalysisResultsAvailableAndUpToDate
            (
                NXOpen::Body * analysisBody /** Analysis body */,
                int* draftAnalysisResultsAvailable /** Are draft analysis results available   */,
                int* draftAnalysisresultsUpToDate /** Are draft analysis results up-to-date  */,
                int* regionAnalysisResultsAvailable /** Are region analysis results available  */,
                int* regionAnalysisresultsUpToDate /** Are region analysis results up-to-date */
            );
            /** Get current analysis body and parameters 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void GetCurrentAnalysisBodyAndParameters
            (
                NXOpen::Body ** analysisBody /** Analysis body to be returned */,
                NXOpen::Vector3d* drawDirection /** Draw direction */,
                double* draftAngleLimit /** Draft angle limit */
            );
            /** Identify a list of input bodies and group them into bodies with results, bodies with no results, and invalid bodies for analysis 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") */
            public: void IdentifyAndGroupBodies
            (
                const std::vector<NXOpen::Body *> & bodyTags /** A list of bodies to be identified and grouped */,
                std::vector<NXOpen::Body *> & bodyResults /** A list of bodies with results */,
                std::vector<NXOpen::Body *> & bodyNoResults /** A list of bodies with no results */,
                std::vector<NXOpen::Body *> & invalidBodies /** A list of invalid bodies for analysis */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
