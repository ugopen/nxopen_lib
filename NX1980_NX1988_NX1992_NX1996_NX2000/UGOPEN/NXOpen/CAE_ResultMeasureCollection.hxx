#ifndef NXOpen_CAE_RESULTMEASURECOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_RESULTMEASURECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ResultMeasureCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/CAE_ResultMeasure.hxx>
#include <NXOpen/CAE_ResultMeasureModelSubset.hxx>
#include <NXOpen/CAE_ResultMeasureResultOptions.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ResultMeasureCollection;
    }
    namespace CAE
    {
        class SimSimulation;
    }
    namespace CAE
    {
        class ResultMeasure;
    }
    namespace CAE
    {
        class Iteration;
    }
    namespace CAE
    {
        class Loadcase;
    }
    namespace CAE
    {
        class ResultMeasureModelSubset;
    }
    namespace CAE
    {
        class ResultMeasureResultOptions;
    }
    namespace CAE
    {
        class SimResultReference;
    }
    namespace CAE
    {
        class SimSolution;
    }
    namespace CAE
    {
        class ResultMeasureCollectionImpl;
        /**  @brief  Provides methods for managing ResultMeasures @link NXOpen::CAE::ResultMeasure NXOpen::CAE::ResultMeasure@endlink  

          
             <br> To obtain an instance of this class, refer to @link NXOpen::CAE::SimSimulation  NXOpen::CAE::SimSimulation @endlink  <br> 
         <br>  Created in NX8.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ResultMeasureCollection : public NXOpen::TaggedObjectCollection
        {
            private: ResultMeasureCollectionImpl * m_resultmeasurecollection_impl;
            private: NXOpen::CAE::SimSimulation* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ResultMeasureCollection(NXOpen::CAE::SimSimulation *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ResultMeasureCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::CAE::ResultMeasureCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CAE::ResultMeasure *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::CAE::ResultMeasureCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_CAEEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_CAEEXPORT  void next();
                NXOpen::CAE::ResultMeasureCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Create a ResultMeasure  @return  The created result measure object 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::ResultMeasureCollection::CreateResultMeasureNew NXOpen::CAE::ResultMeasureCollection::CreateResultMeasureNew@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::ResultMeasureCollection::CreateResultMeasureNew instead.") NXOpen::CAE::ResultMeasure * CreateResultMeasure
            (
                NXOpen::CAE::SimSolution * tSol /** tsol */ ,
                int iStepIndex /** istepindex */ ,
                int iIterIndex /** iiterindex */ ,
                const NXOpen::CAE::Result::Type & pType /** ptype */ ,
                NXOpen::CAE::Result::Component eComp /** ecomp */ ,
                const NXString & expName /** expname */ 
            );
            /** Create a ResultMeasure  @return  The created result measure object 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::ResultMeasureCollection::CreateResultMeasureNew NXOpen::CAE::ResultMeasureCollection::CreateResultMeasureNew@endlink  instead. <br>  

             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::ResultMeasure * CreateResultMeasure
            (
                NXOpen::CAE::SimSolution * tSol /** tsol */ ,
                int iStepIndex /** istepindex */ ,
                int iIterIndex /** iiterindex */ ,
                const NXOpen::CAE::Result::Type & pType /** ptype */ ,
                NXOpen::CAE::Result::Component eComp /** ecomp */ ,
                const char * expName /** expname */ 
            );
            /** Finds the @link  NXOpen::CAE::ResultMeasure   NXOpen::CAE::ResultMeasure @endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.

                        An exception will be thrown if no object can be found with the given journal identifier.  @return  The found ResultMeasure 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ResultMeasure * Find
            (
                const NXString & journalIdentifier /** Identifier of the ResultMeasure you want */
            );
            /** Finds the @link  NXOpen::CAE::ResultMeasure   NXOpen::CAE::ResultMeasure @endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.

                        An exception will be thrown if no object can be found with the given journal identifier.  @return  The found ResultMeasure 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::ResultMeasure * Find
            (
                const char * journalIdentifier /** Identifier of the ResultMeasure you want */
            );
            /** Update list of result measures.  Will open each measure's associated result file, and recompute
                         requested  value 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void UpdateMeasures
            (
                const std::vector<NXOpen::CAE::ResultMeasure *> & objects /** The objects to be updated */
            );
            /** Delete list of result measures 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void DeleteMeasures
            (
                const std::vector<NXOpen::CAE::ResultMeasure *> & objects /** The objects to be updated */
            );
            /** Create a result options for result measure 
             <br>  @deprecated Deprecated in NX10.0.0.  Use @link NXOpen::CAE::SimResultReference NXOpen::CAE::SimResultReference@endlink :@link CreateResultMeasureNew CreateResultMeasureNew@endlink  instead. <br>  

             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  Use NXOpen::CAE::SimResultReference:CreateResultMeasureNew instead.") NXOpen::CAE::ResultMeasureResultOptions * CreateResultOptions
            (
                NXOpen::CAE::SimSolution * tSol /** tsol */ ,
                int iStepIndex /** istepindex */ ,
                int iIterIndex /** iiterindex */ ,
                const NXOpen::CAE::Result::Type & pType /** ptype */ ,
                NXOpen::CAE::Result::Component eComp /** ecomp */ 
            );
            /** Create a result options for result measure 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::CAE::Iteration NXOpen::CAE::Iteration@endlink :@link CreateNewResultOptions CreateNewResultOptions@endlink  instead. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::CAE::Iteration:CreateNewResultOptions instead.") NXOpen::CAE::ResultMeasureResultOptions * CreateResultOptionsNew
            (
                NXOpen::CAE::SimSolution * tSol /** tsol */ ,
                NXOpen::CAE::SimResultReference * tResultReference /** tresultreference */ ,
                int iStepIndex /** istepindex */ ,
                int iIterIndex /** iiterindex */ ,
                const NXOpen::CAE::Result::Type & pType /** ptype */ ,
                NXOpen::CAE::Result::Component eComp /** ecomp */ 
            );
            /** Create a model subset for result measure 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ResultMeasureModelSubset * CreateModelSubset
            (
                NXOpen::CAE::ResultMeasure::SubsetSelection eSubset /** esubset */ 
            );
            /** Create a ResultMeasure  @return  The created result measure object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ResultMeasure * CreateResultMeasureNew
            (
                NXOpen::CAE::ResultMeasureResultOptions * pResOpt /** presopt */ ,
                NXOpen::CAE::ResultMeasureModelSubset * pSubset /** The model subset, can be null */,
                const NXString & expName /** The new expression name for the result measure */
            );
            /** Create a ResultMeasure  @return  The created result measure object 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::ResultMeasure * CreateResultMeasureNew
            (
                NXOpen::CAE::ResultMeasureResultOptions * pResOpt /** presopt */ ,
                NXOpen::CAE::ResultMeasureModelSubset * pSubset /** The model subset, can be null */,
                const char * expName /** The new expression name for the result measure */
            );
            /** Create a result options for result measure 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ResultMeasureResultOptions * CreateNewResultOptions
            (
                NXOpen::CAE::SimSolution * tSol /** tsol */ ,
                NXOpen::CAE::SimResultReference * tResultReference /** tresultreference */ ,
                NXOpen::CAE::Loadcase * tResultLoadcase /** tresultloadcase */ ,
                NXOpen::CAE::Iteration * tResultIteration /** tresultiteration */ ,
                bool bAllSubiterations /** to be used select all sub iterations */,
                NXOpen::CAE::Iteration * tResultSubIteration /** tresultsubiteration */ ,
                const NXOpen::CAE::Result::Type & pType /** ptype */ ,
                NXOpen::CAE::Result::Component eComp /** ecomp */ 
            );
            /** Create a result options for result measure 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::ResultMeasureResultOptions * CreateNewResultOptions
            (
                NXOpen::CAE::SimSolution * tSol /** tsol */ ,
                NXOpen::CAE::SimResultReference * tResultReference /** tresultreference */ ,
                NXOpen::CAE::Loadcase * tResultLoadcase /** tresultloadcase */ ,
                NXOpen::CAE::Iteration * tResultIteration /** tresultiteration */ ,
                bool bAllSubiterations /** to be used select all sub iterations */,
                NXOpen::CAE::Iteration * tResultSubIteration /** tresultsubiteration */ ,
                const NXOpen::CAE::Result::Type & pType /** ptype */ ,
                NXOpen::CAE::Result::Component eComp /** ecomp */ ,
                const NXString & resultUserName /** user name of result type */
            );
            /** Create a result options for result measure 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::ResultMeasureResultOptions * CreateNewResultOptions
            (
                NXOpen::CAE::SimSolution * tSol /** tsol */ ,
                NXOpen::CAE::SimResultReference * tResultReference /** tresultreference */ ,
                NXOpen::CAE::Loadcase * tResultLoadcase /** tresultloadcase */ ,
                NXOpen::CAE::Iteration * tResultIteration /** tresultiteration */ ,
                bool bAllSubiterations /** to be used select all sub iterations */,
                NXOpen::CAE::Iteration * tResultSubIteration /** tresultsubiteration */ ,
                const NXOpen::CAE::Result::Type & pType /** ptype */ ,
                NXOpen::CAE::Result::Component eComp /** ecomp */ ,
                const char * resultUserName /** user name of result type */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
