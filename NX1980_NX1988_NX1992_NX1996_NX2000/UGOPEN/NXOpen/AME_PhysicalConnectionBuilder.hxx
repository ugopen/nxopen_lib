#ifndef NXOpen_AME_PHYSICALCONNECTIONBUILDER_HXX_INCLUDED
#define NXOpen_AME_PHYSICALCONNECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PhysicalConnectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_Port.hxx>
#include <NXOpen/Diagramming_Sheet.hxx>
#include <NXOpen/AME_MultipleObjectsBuilder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PhysicalConnectionBuilder;
    }
    namespace AME
    {
        class MultipleObjectsBuilder;
    }
    namespace Diagramming
    {
        class Port;
    }
    namespace Diagramming
    {
        class Sheet;
    }
    namespace AME
    {
        class _PhysicalConnectionBuilderBuilder;
        class PhysicalConnectionBuilderImpl;
        /** JA class for creating Connection <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePhysicalConnectionBuilder  NXOpen::AME::AMEManager::CreatePhysicalConnectionBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PhysicalConnectionBuilder : public NXOpen::AME::MultipleObjectsBuilder
        {
            private: PhysicalConnectionBuilderImpl * m_physicalconnectionbuilder_impl;
            private: friend class  _PhysicalConnectionBuilderBuilder;
            protected: PhysicalConnectionBuilder();
            public: ~PhysicalConnectionBuilder();
            /** Set connection's owning sheet 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetOwningSheet
            (
                NXOpen::Diagramming::Sheet * owningSheet /** owningsheet */ 
            );
            /** Set connection's source port 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSourcePort
            (
                NXOpen::Diagramming::Port * sourcePort /** sourceport */ 
            );
            /** Set connection's target port 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTargetPort
            (
                NXOpen::Diagramming::Port * targetPort /** targetport */ 
            );
            /** Set Connection's Bend Points. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetBendPoints
            (
                const std::vector<NXOpen::Point2d> & p2dBendPoints /** p2dbendpoints */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
