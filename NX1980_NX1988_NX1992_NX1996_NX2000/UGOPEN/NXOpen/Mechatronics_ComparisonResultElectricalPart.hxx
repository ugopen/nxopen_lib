#ifndef NXOpen_MECHATRONICS_COMPARISONRESULTELECTRICALPART_HXX_INCLUDED
#define NXOpen_MECHATRONICS_COMPARISONRESULTELECTRICALPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_ComparisonResultElectricalPart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_ComparisonResultBase.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class ComparisonResultElectricalPart;
    }
    namespace Mechatronics
    {
        class ComparisonResultBase;
    }
    namespace Mechatronics
    {
    }
    namespace Mechatronics
    {
        class ComparisonResultElectricalPartImpl;
        /** Represents electrical part of comparison result 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  ComparisonResultElectricalPart : public NXOpen::Mechatronics::ComparisonResultBase
        {
            /** Defines statuses of electrical parts */
            public: enum Status
            {
                StatusAdded/** Added status */,
                StatusRemoved/** Removed status */,
                StatusUpdated/** Updated status */,
                StatusIdentical/** Identical status */
            };

            private: ComparisonResultElectricalPartImpl * m_comparisonresultelectricalpart_impl;
            /// \cond NX_NO_DOC 
            public: explicit ComparisonResultElectricalPart(void *ptr);
            /// \endcond 
            /** Frees the object from memory. After this method is called, it is illegal to use the object. In .NET, this method is automatically called when the object is deleted by the garbage collector. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: virtual ~ComparisonResultElectricalPart();
            /**Returns  the status from the electrical part 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Mechatronics::ComparisonResultElectricalPart::Status ComparisonStatus
            (
            );
            /**Returns  the part number from the electrical part 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PartNumber
            (
            );
            /** Gets a list of attributes from the electrical part 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAttributes
            (
                std::vector<NXString> & attributeNames /** Array of attribute names */,
                std::vector<NXString> & attributeValues /** Array of attribute values */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
