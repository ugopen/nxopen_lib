#ifndef NXOpen_TOOLING_DIEINSERTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_DIEINSERTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_DieInsertBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class DieInsertBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class Section;
    class SelectBodyList;
    class TaggedObject;
    namespace Tooling
    {
        class _DieInsertBuilderBuilder;
        class DieInsertBuilderImpl;
        /**  Represents die insert builder.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateDieInsertBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateDieInsertBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        BoundingBoxType </term> <description> 
         
        Block </description> </item> 

        <item><term> 
         
        ClearanceToggle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        ConceptDesign </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DieInsertType </term> <description> 
         
        DieInsert </description> </item> 

        <item><term> 
         
        InsertMode </term> <description> 
         
        StandardInsert </description> </item> 

        <item><term> 
         
        Position </term> <description> 
         
        Bottom </description> </item> 

        <item><term> 
         
        RenameDialog </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        UserDefinedDieInsertClearance </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        UserDefinedDieInsertHeight.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        WithoutFalseBody </term> <description> 
         
        0 </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  DieInsertBuilder : public NXOpen::Builder
        {
            /** Specifies the position of piercing inserts, for EDW only */
            public: enum PositionItems
            {
                PositionItemsTop/** The position is top side */,
                PositionItemsBottom/** The position is bottom side */
            };

            /** Specifies the insert mode for die. */
            public: enum InsertModeItems
            {
                InsertModeItemsStandardInsert/** The die insert mode is standard insert */,
                InsertModeItemsSketchProfile/** The die insert mode is sketch profile */,
                InsertModeItemsBoundingBox/** The die insert mode is bounding box */
            };

            /** Specifies the type of insert. */
            public: enum DieInsertTypeItems
            {
                DieInsertTypeItemsDieInsert/** die insert */ ,
                DieInsertTypeItemsBackingInsert/** backing insert */ 
            };

            /** Specifies the bounding box type. */
            public: enum BoundingBoxTypeItems
            {
                BoundingBoxTypeItemsBlock/** The bounding box type is Block */,
                BoundingBoxTypeItemsCylinder/** The bounding box type is Cylinder */
            };

            private: DieInsertBuilderImpl * m_dieinsertbuilder_impl;
            private: friend class  _DieInsertBuilderBuilder;
            protected: DieInsertBuilder();
            public: ~DieInsertBuilder();
            /**Returns  the select scraps for pierce insert design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectScrap
            (
            );
            /**Returns  the die insert position. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieInsertBuilder::PositionItems Position
            (
            );
            /**Sets  the die insert position. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetPosition
            (
                NXOpen::Tooling::DieInsertBuilder::PositionItems position /** position */ 
            );
            /**Returns  the die insert type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieInsertBuilder::DieInsertTypeItems DieInsertType
            (
            );
            /**Sets  the die insert type. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDieInsertType
            (
                NXOpen::Tooling::DieInsertBuilder::DieInsertTypeItems dieInsertType /** dieinserttype */ 
            );
            /**Returns  the insert mode 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieInsertBuilder::InsertModeItems InsertMode
            (
            );
            /**Sets  the insert mode 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInsertMode
            (
                NXOpen::Tooling::DieInsertBuilder::InsertModeItems insertMode /** insertmode */ 
            );
            /**Returns  the bounding box type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::DieInsertBuilder::BoundingBoxTypeItems BoundingBoxType
            (
            );
            /**Sets  the bounding box type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBoundingBoxType
            (
                NXOpen::Tooling::DieInsertBuilder::BoundingBoxTypeItems boundingBoxType /** boundingboxtype */ 
            );
            /** Insert the standard die by invoking standard part management dialog
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void StandardDieInsert
            (
            );
            /** Create datum plane for user defined die or backing insert outline. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateUserDefinedInsertDatumPlane
            (
            );
            /** Add die insert or backing insert part into assembly when creating user defined insert datum plane 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AddDieInsertPart
            (
            );
            /**Returns  the select die insert outline 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SelectDieInsertOutline
            (
            );
            /**Returns  the user defined die insert height 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UserDefinedDieInsertHeight
            (
            );
            /**Returns  the die plate clearance toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool ClearanceToggle
            (
            );
            /**Sets  the die plate clearance toggle 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetClearanceToggle
            (
                bool clearanceToggle /** clearancetoggle */ 
            );
            /**Returns  the user defined die insert clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double UserDefinedDieInsertClearance
            (
            );
            /**Sets  the user defined die insert clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUserDefinedDieInsertClearance
            (
                double userDefinedDieInsertClearance /** Indicates the false body clearance value of user defined die or backing insert */
            );
            /**Returns  the die shim distance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: double DieShimDistance
            (
            );
            /**Sets  the die shim distance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDieShimDistance
            (
                double dieShimDistance /** Indicates the shim distance value of user defined die or backing insert */
            );
            /**Returns  the select user defined insert to edit 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * SelectUserDefinedDieInsertForEdit
            (
            );
            /** Create user defined die insert or backing insert for selected scraps when creating die insert by user defined type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateUserDefinedDieInsert
            (
            );
            /**Returns  the value indicating if the design is for a concept. True indicates it is a concept design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConceptDesign
            (
            );
            /**Sets  the value indicating if the design is for a concept. True indicates it is a concept design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetConceptDesign
            (
                bool conceptDesign /** Indicates whether it is a concept design */
            );
            /**Returns  the option of whether to create false body for die or backing insert. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool WithoutFalseBody
            (
            );
            /**Sets  the option of whether to create false body for die or backing insert. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWithoutFalseBody
            (
                bool withoutFalseBody /** Indicates whether to create false body */
            );
            /**Returns  the rename dialog option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RenameDialog
            (
            );
            /**Sets  the rename dialog option for normal pierce design. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRenameDialog
            (
                bool renameDialog /** Indicates the rename dialog option for normal pierce design */
            );
            /**Returns  the parent part name to create insert. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParentPartName
            (
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParentPartName
            (
                const NXString & parentPartName /** Specifies the parent part name */
            );
            /**Sets  the parent part name to create insert. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetParentPartName
            (
                const char * parentPartName /** Specifies the parent part name */
            );
            /**Returns  the new component names. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewPartNames
            (
            );
            /**Sets  the new component names. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewPartNames
            (
                const NXString & newPartNames /** Specifies the new component names */
            );
            /**Sets  the new component names. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void SetNewPartNames
            (
                const char * newPartNames /** Specifies the new component names */
            );
            /**Returns  the die standard insert instance. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * DieStandardInsertInstance
            (
            );
            /**Sets  the die standard insert instance. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDieStandardInsertInstance
            (
                NXOpen::TaggedObject * dieStandardInsertInstance /** Specifies the die standard insert instance */
            );
            /** Sets box csys matrix. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetManipulatorToMatrixAndPosition
            (
                const NXOpen::Matrix3x3 & matrix /** matrix */ ,
                const NXOpen::Point3d & position /** position */ 
            );
            /** Calculate box size and set directions, edge length, lower point position. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CalculateBoxSize
            (
            );
            /**Returns  the select vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SelectVector
            (
            );
            /**Sets  the select vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSelectVector
            (
                NXOpen::Direction * selectVector /** selectvector */ 
            );
            /**Returns  the offset value linear dimension positive x 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionPositiveX
            (
            );
            /**Returns  the offset value linear dimension negative x 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionNegativeX
            (
            );
            /**Returns  the offset value linear dimension positive y 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionPositiveY
            (
            );
            /**Returns  the offset value linear dimension negative y 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionNegativeY
            (
            );
            /**Returns  the offset value linear dimension positive z 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionPositiveZ
            (
            );
            /**Returns  the offset value linear dimension negative z 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionNegativeZ
            (
            );
            /**Returns  the radial offset value for cylinder box
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * RadialOffset
            (
            );
            /**Returns  the position of csys for box. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d BoxPosition
            (
            );
            /**Sets  the position of csys for box. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBoxPosition
            (
                const NXOpen::Point3d & csysOrigin /** csysorigin */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
