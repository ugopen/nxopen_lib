#ifndef NXOpen_FEATURES_TOPOLOGYOPTIMIZATION_ANALYSISLOADBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TOPOLOGYOPTIMIZATION_ANALYSISLOADBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TopologyOptimization_AnalysisLoadBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace TopologyOptimization
        {
            class AnalysisLoadBuilder;
        }
    }
    class Axis;
    class Builder;
    class Direction;
    class Expression;
    class ScCollector;
    namespace Features
    {
        namespace TopologyOptimization
        {
            class _AnalysisLoadBuilderBuilder;
            class AnalysisLoadBuilderImpl;

            /// \cond NX_NO_DOC 
            /** Represents a @link Features::TopologyOptimization::AnalysisLoad Features::TopologyOptimization::AnalysisLoad@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Features::TopologyOptimization::Study::CreateAnalysisLoadBuilder  NXOpen::Features::TopologyOptimization::Study::CreateAnalysisLoadBuilder @endlink  <br> 
             <br>  Created in NX1953.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  AnalysisLoadBuilder : public NXOpen::Builder
            {
                /** Analysis Loads Type */
                public: enum AnalysisLoadType
                {
                    AnalysisLoadTypeForce/** force */ ,
                    AnalysisLoadTypeBearingLoad/** bearing load */ ,
                    AnalysisLoadTypePressure/** pressure */ ,
                    AnalysisLoadTypeTorque/** torque */ ,
                    AnalysisLoadTypeAcceleration/** acceleration */ ,
                    AnalysisLoadTypeEnforcedDisplacement/** enforced displacement */ 
                };

                /** Analysis Loads force type */
                public: enum AnalysisLoadForceType
                {
                    AnalysisLoadForceTypeByVector/** by vector */ ,
                    AnalysisLoadForceTypeByComponent/** by component */ 
                };

                private: AnalysisLoadBuilderImpl * m_analysisloadbuilder_impl;
                private: friend class  _AnalysisLoadBuilderBuilder;
                protected: AnalysisLoadBuilder();
                public: ~AnalysisLoadBuilder();

                /// \cond NX_NO_DOC 
                /**Returns  the Analysis Load type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::AnalysisLoadBuilder::AnalysisLoadType Type
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the Analysis Load type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetType
                (
                    NXOpen::Features::TopologyOptimization::AnalysisLoadBuilder::AnalysisLoadType type /** type */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the face(s) to apply the load on 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectFace
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the force type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::TopologyOptimization::AnalysisLoadBuilder::AnalysisLoadForceType ForceType
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the force type 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetForceType
                (
                    NXOpen::Features::TopologyOptimization::AnalysisLoadBuilder::AnalysisLoadForceType typeOfForce /** typeofforce */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the face vector 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Direction * FaceVector
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the face vector 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetFaceVector
                (
                    NXOpen::Direction * faceVector /** facevector */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the force expression 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Force
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the force x expression 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ForceX
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the force y expression 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ForceY
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the force z expression 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * ForceZ
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the bearing angular expression 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * BearingAngular
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the pressure expression 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Pressure
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the torque axis 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Axis * TorqueAxis
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the torque axis 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetTorqueAxis
                (
                    NXOpen::Axis * torqueAxis /** torqueaxis */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the torque expression 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Torque
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the acceleration expression 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * Acceleration
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the Analysis Load name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString Name
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the Analysis Load name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetName
                (
                    const NXString & name /** name */ 
                );
                /**Sets  the Analysis Load name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                void SetName
                (
                    const char * name /** name */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the flag indicating whether the object uses an user-defined name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : None */
                public: bool UserSetName
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the flag indicating whether the object uses an user-defined name 
                 <br>  Created in NX1953.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetUserSetName
                (
                    bool userSetName /** usersetname */ 
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the maximum displacement expression 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * MaxDisplacement
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Returns  the flag indicating bearing load force direction is reversed or not 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ReverseBearingLoadDirection
                (
                );

                /// \endcond 

                /// \cond NX_NO_DOC 
                /**Sets  the flag indicating bearing load force direction is reversed or not 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : des_top_opt ("TOPOLOGY OPTIMIZATION FOR DESIGNERS") */
                public: void SetReverseBearingLoadDirection
                (
                    bool reverseForceDirection /** reverseforcedirection */ 
                );

                /// \endcond 
            };

            /// \endcond 
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
