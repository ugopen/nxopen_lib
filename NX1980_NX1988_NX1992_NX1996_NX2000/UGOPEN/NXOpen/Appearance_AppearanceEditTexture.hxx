#ifndef NXOpen_APPEARANCE_APPEARANCEEDITTEXTURE_HXX_INCLUDED
#define NXOpen_APPEARANCE_APPEARANCEEDITTEXTURE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Appearance_AppearanceEditTexture.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_appearance_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Appearance
    {
        class AppearanceEditTexture;
    }
    class Builder;
    class Direction;
    class Point;
    namespace Appearance
    {
        class _AppearanceEditTextureBuilder;
        class AppearanceEditTextureImpl;
        /** Represents a @link NXOpen::Appearance::AppearanceEditTexture NXOpen::Appearance::AppearanceEditTexture@endlink 
                The AppearanceEditTexture used to manipulate texture space of appearance material
                for appearance designator.

             <br> To create a new instance of this class, use @link NXOpen::Appearance::AppearanceManager::CreateAppearanceEditTextureBuilder  NXOpen::Appearance::AppearanceManager::CreateAppearanceEditTextureBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_APPEARANCEEXPORT  AppearanceEditTexture : public NXOpen::Builder
        {
            /** BaseMaterialMappingProjections */
            public: enum MaterialProjectionsType
            {
                MaterialProjectionsTypeUv/** uv */ ,
                MaterialProjectionsTypePlanar/** planar */ ,
                MaterialProjectionsTypeBox/** box */ ,
                MaterialProjectionsTypeSpherical/** spherical */ ,
                MaterialProjectionsTypeCylindrical/** cylindrical */ 
            };

            /** DecalMappingProjections */
            public: enum DecalProjectionsType
            {
                DecalProjectionsTypePlanar/** planar */ ,
                DecalProjectionsTypeCylindrical/** cylindrical */ ,
                DecalProjectionsTypeSpherical/** spherical */ ,
                DecalProjectionsTypeUv/** uv */ 
            };

            /** AnchorTypes */
            public: enum AnchorTypes
            {
                AnchorTypesTopLeft/** top left */ ,
                AnchorTypesCenter/** center */ ,
                AnchorTypesBottomLeft/** bottom left */ ,
                AnchorTypesTopMiddle/** top middle */ ,
                AnchorTypesTopRight/** top right */ ,
                AnchorTypesLeftMiddle/** left middle */ ,
                AnchorTypesRightMiddle/** right middle */ ,
                AnchorTypesBottomMiddle/** bottom middle */ ,
                AnchorTypesBottomRight/** bottom right */ 
            };

            /** Scaling */
            public: enum Scaling
            {
                ScalingToFace/** to face */ ,
                ScalingToImageSize/** to image size */ ,
                ScalingToUniformScale/** to uniform scale */ ,
                ScalingToNonUniformScale/** to non uniform scale */ 
            };

            private: AppearanceEditTextureImpl * m_appearanceedittexture_impl;
            private: friend class  _AppearanceEditTextureBuilder;
            protected: AppearanceEditTexture();
            public: ~AppearanceEditTexture();
            /**Returns  the studio material name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXString StudioMaterialName
            (
            );
            /**Sets  the studio material name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetStudioMaterialName
            (
                const NXString & studioMaterialName /** studiomaterialname */ 
            );
            /**Sets  the studio material name 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            void SetStudioMaterialName
            (
                const char * studioMaterialName /** studiomaterialname */ 
            );
            /**Returns  the mapping projection 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: int MappingProjection
            (
            );
            /**Sets  the mapping projection 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetMappingProjection
            (
                int mappingProjection /** mappingprojection */ 
            );
            /**Returns  the anchor type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::Appearance::AppearanceEditTexture::AnchorTypes AnchorType
            (
            );
            /**Sets  the anchor type 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetAnchorType
            (
                NXOpen::Appearance::AppearanceEditTexture::AnchorTypes anchorType /** anchortype */ 
            );
            /**Returns  the texture origin 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::Point * TextureOrigin
            (
            );
            /**Sets  the texture origin 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetTextureOrigin
            (
                NXOpen::Point * textureOrigin /** textureorigin */ 
            );
            /**Returns  the texture normal vector 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::Direction * TextureNormalVector
            (
            );
            /**Sets  the texture normal vector 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetTextureNormalVector
            (
                NXOpen::Direction * textureNormalVector /** texturenormalvector */ 
            );
            /**Returns  the texture up vector 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: NXOpen::Direction * TextureUpVector
            (
            );
            /**Sets  the texture up vector 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetTextureUpVector
            (
                NXOpen::Direction * textureUpVector /** textureupvector */ 
            );
            /**Returns  the decal aspect ratio 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: double AspectRatio
            (
            );
            /**Sets  the decal aspect ratio 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetAspectRatio
            (
                double aspectRatio /** aspect ratio */ 
            );
            /**Returns  the decal scale
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: double Scale
            (
            );
            /**Sets  the decal scale
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : appearance_mgmt (" AppearanceManagement Author for Native mode") OR appearance_mgmt_mgd (" AppearanceManagement Author for Managed mode") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
