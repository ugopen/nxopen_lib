#ifndef NXOpen_ASSEMBLIES_EXPLOSION_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_EXPLOSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_Explosion.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class Explosion;
    }
    namespace Assemblies
    {
        class ComponentAssembly;
    }
    namespace Assemblies
    {
        class ExplodedComponent;
    }
    class NXObject;
    namespace Positioning
    {
        class ComponentPositioner;
    }
    class View;
    namespace Assemblies
    {
        class _ExplosionBuilder;
        class ExplosionImpl;
        /** Represents an explosion. An explosion is a view containing parts or subassemblies
                that have been displaced from their real model positions.
             <br> Use the @link NXOpen::Assemblies::ExplosionCollection NXOpen::Assemblies::ExplosionCollection@endlink  to create an explosion.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  Explosion : public NXOpen::NXObject
        {
             /** Represents the Blocking Graph option */
            public:
            struct BlockingOptions
            {
                public: /** Search additional blocking direction using component's local csys */bool SearchAdditionalDirections;
                public: /** Check for small interferences */bool CheckSmallInterferences;
                public: BlockingOptions() :
                    SearchAdditionalDirections(),
                    CheckSmallInterferences()
                {
                }
                /** Constructor for the BlockingOptions struct. */ 
                public: BlockingOptions(bool searchAdditionalDirectionsInitial /** Search additional blocking direction using component's local csys */, 
                        bool checkSmallInterferencesInitial /** Check for small interferences */) :
                    SearchAdditionalDirections(searchAdditionalDirectionsInitial),
                    CheckSmallInterferences(checkSmallInterferencesInitial)
                {
                }
            };

             /** Represents the Explosion Graph option */
            public:
            struct ExplosionOptions
            {
                public: /** Forcibly move interfering components apart with best guess */bool ForceInterferingComponentsApart;
                public: /** Prefer using constraints to pick explosion direction */bool PreferConstraintsForDirection;
                public: /** Ignore constraints in all computations */bool IgnoreConstraints;
                public: ExplosionOptions() :
                    ForceInterferingComponentsApart(),
                    PreferConstraintsForDirection(),
                    IgnoreConstraints()
                {
                }
                /** Constructor for the ExplosionOptions struct. */ 
                public: ExplosionOptions(bool forceInterferingComponentsApartInitial /** Forcibly move interfering components apart with best guess */, 
                        bool preferConstraintsForDirectionInitial /** Prefer using constraints to pick explosion direction */, 
                        bool ignoreConstraintsInitial /** Ignore constraints in all computations */) :
                    ForceInterferingComponentsApart(forceInterferingComponentsApartInitial),
                    PreferConstraintsForDirection(preferConstraintsForDirectionInitial),
                    IgnoreConstraints(ignoreConstraintsInitial)
                {
                }
            };

            private: ExplosionImpl * m_explosion_impl;
            private: friend class  _ExplosionBuilder;
            protected: Explosion();
            public: ~Explosion();
            /** Copies the component transformations in the source explosion onto the destination explosion.
                    
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Copy
            (
                NXOpen::Assemblies::Explosion * destinationExplosion /** destinationexplosion */ 
            );
            /** Changes the view so that it shows the explosion.
                    
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Show
            (
                NXOpen::View * view /** view */ 
            );
            /** Changes the view so that it no longer shows an exploded view.
                    
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Hide
            (
                NXOpen::View * view /** view */ 
            );
            /** Deletes the given @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                    
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Delete
            (
            );
            /** Attempts to delete the given array of @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink s.
                        An explosion cannot be deleted if it is being used in a model view which is not visible in active layout.
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int DeleteExplosions
            (
                const std::vector<NXOpen::Assemblies::Explosion *> & explosions /** explosions */ 
            );
            /**Returns  the root component of the explosion. The root component is the exploded component at the top of the exploded component
                        tree. The exploded component tree has the same structure as that of the component tree in @link NXOpen::Assemblies::ComponentAssembly NXOpen::Assemblies::ComponentAssembly@endlink .
                    
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Assemblies::ExplodedComponent * RootComponent
            (
            );
            /** Renames the given @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Rename
            (
                NXOpen::Assemblies::ComponentAssembly * occPart /** Part which contain this explosion  */,
                const NXString & explosionName /** New name to be assigned to this explosion */
            );
            /** Renames the given @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                    
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void Rename
            (
                NXOpen::Assemblies::ComponentAssembly * occPart /** Part which contain this explosion  */,
                const char * explosionName /** New name to be assigned to this explosion */
            );
            /** Attempts to auto explode the given array of @link NXOpen::Assemblies::ExplodedComponent  NXOpen::Assemblies::ExplodedComponent @endlink  to given distance in @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int AutoExplodeComponents
            (
                const std::vector<NXOpen::Assemblies::ExplodedComponent *> & selectedComponents /** selectedcomponents */ ,
                double autoExplodeDistance /** autoexplodedistance */ 
            );

            /// \cond NX_NO_DOC 
            /** Attempts to auto explode the given array of @link NXOpen::Assemblies::ExplodedComponent  NXOpen::Assemblies::ExplodedComponent @endlink  to given distance in @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                    
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int AutoExplodeComponentsUsingGraphs
            (
                const std::vector<NXOpen::Assemblies::ExplodedComponent *> & selectedComponents /** selectedcomponents */ ,
                const NXOpen::Assemblies::Explosion::BlockingOptions & blockingGraphOptions /** blockinggraphoptions */ ,
                const NXOpen::Assemblies::Explosion::ExplosionOptions & explosionGraphOptions /** explosiongraphoptions */ ,
                double autoExplodeDistance /** autoexplodedistance */ 
            );

            /// \endcond 
            /** Attempts to auto explode all @link NXOpen::Assemblies::ExplodedComponent NXOpen::Assemblies::ExplodedComponent@endlink  to given distance in @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: int AutoExplodeAssembly
            (
                double autoExplodeDistance /** autoexplodedistance */ 
            );
            /** Unexplode the given array of @link NXOpen::Assemblies::ExplodedComponent NXOpen::Assemblies::ExplodedComponent@endlink  in @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void UnexplodeComponents
            (
                const std::vector<NXOpen::Assemblies::ExplodedComponent *> & selectedComponents /** selectedcomponents */ 
            );
            /** Unexplode all the @link NXOpen::Assemblies::ExplodedComponent NXOpen::Assemblies::ExplodedComponent@endlink  of currently active assembly in @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void UnexplodeAllComponents
            (
            );
            /** Repositions given array of @link NXOpen::Assemblies::ExplodedComponent NXOpen::Assemblies::ExplodedComponent@endlink  leaf component to their original unexploded position on parent assemblies
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void MoveComponentsToOriginalPosition
            (
                const std::vector<NXOpen::Assemblies::ExplodedComponent *> & selectedComponents /** selectedcomponents */ 
            );
            /** Establish the Component Positioner for @link NXOpen::Assemblies::Explosion NXOpen::Assemblies::Explosion@endlink .
                         The positioner manages the component constraints.
                    
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ComponentPositioner * GetPositioner
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
