#ifndef NXOpen_MECHANICALROUTING_REFRESHRUNSFROMTEAMCENTERBUILDER_HXX_INCLUDED
#define NXOpen_MECHANICALROUTING_REFRESHRUNSFROMTEAMCENTERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MechanicalRouting_RefreshRunsFromTeamcenterBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechanicalrouting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MechanicalRouting
    {
        class RefreshRunsFromTeamcenterBuilder;
    }
    class Builder;
    namespace MechanicalRouting
    {
        class _RefreshRunsFromTeamcenterBuilderBuilder;
        class RefreshRunsFromTeamcenterBuilderImpl;

        /// \cond NX_NO_DOC 
        /** Builder which manages refreshing the runs from Teamcenter  <br> To create a new instance of this class, use @link NXOpen::MechanicalRouting::BuilderFactory::CreateRefreshRunsFromTeamcenterBuilder  NXOpen::MechanicalRouting::BuilderFactory::CreateRefreshRunsFromTeamcenterBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_MECHANICALROUTINGEXPORT  RefreshRunsFromTeamcenterBuilder : public NXOpen::Builder
        {
            /** Defines the refresh status. Unknown, up-to-date, refreshed, blocked, failed */

            /// \cond NX_NO_DOC 
            public: enum RefreshStatusType
            {
                RefreshStatusTypeUnknown/** The run is an unknown state */,
                RefreshStatusTypeUpToDate/** The run is up-to-date */,
                RefreshStatusTypeRefreshed/** The run was refreshed to a new version */,
                RefreshStatusTypeBlocked/** The refresh of the run was blocked */,
                RefreshStatusTypeDeleted/** The refresh of the run did not happen because the run was deleted in Teamcetner */,
                RefreshStatusTypeFailed/** The refresh of the run failed */
            };


            /// \endcond 
            /** Defines the reason why the run refresh was blocked. Not blocked, loaded in PID application, not specified  */

            /// \cond NX_NO_DOC 
            public: enum BlockedReasonType
            {
                BlockedReasonTypeNotBlocked/** Blocked reason is that it's not blocked  */,
                BlockedReasonTypeLoadedInPid/** Blocked reason is that the PID run is currently loaded in the PID application */,
                BlockedReasonTypeOtherRunsBlocked/** Blocked reason is that one or more runs were blocked */,
                BlockedReasonTypeNotSpecified/** Blocked reason is not specified */
            };


            /// \endcond 
            private: RefreshRunsFromTeamcenterBuilderImpl * m_refreshrunsfromteamcenterbuilder_impl;
            private: friend class  _RefreshRunsFromTeamcenterBuilderBuilder;
            protected: RefreshRunsFromTeamcenterBuilder();
            public: ~RefreshRunsFromTeamcenterBuilder();

            /// \cond NX_NO_DOC 
            /** The refresh status getter  @return  The refresh status for the run 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::RefreshRunsFromTeamcenterBuilder::RefreshStatusType GetRefreshStatusForRun
            (
                const NXString & runId /** The run to get the status for */
            );
            /** The refresh status getter  @return  The refresh status for the run 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::MechanicalRouting::RefreshRunsFromTeamcenterBuilder::RefreshStatusType GetRefreshStatusForRun
            (
                const char * runId /** The run to get the status for */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** The blocked reason getter  @return  The blocked reason for the run 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::MechanicalRouting::RefreshRunsFromTeamcenterBuilder::BlockedReasonType GetBlockedReasonForRun
            (
                const NXString & runId /** The run to get the blocked reason for */
            );
            /** The blocked reason getter  @return  The blocked reason for the run 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::MechanicalRouting::RefreshRunsFromTeamcenterBuilder::BlockedReasonType GetBlockedReasonForRun
            (
                const char * runId /** The run to get the blocked reason for */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** The timestamp of the refreshed run getter  @return  The timestamp of the refreshed run 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: int GetTimestampOfRefreshedRun
            (
                const NXString & runId /** The run to get the timestamp of the refreshed run for */
            );
            /** The timestamp of the refreshed run getter  @return  The timestamp of the refreshed run 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            int GetTimestampOfRefreshedRun
            (
                const char * runId /** The run to get the timestamp of the refreshed run for */
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
