#ifndef NXOpen_CAM_INTERPMATERIALBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INTERPMATERIALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InterpMaterialBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InterpMaterialBuilder;
    }
    namespace CAM
    {
        class _InterpMaterialBuilderBuilder;
        class InterpMaterialBuilderImpl;
        /** Represents a builder which holds the data for material 1, material 2, and a set of
                distance from foundation and percentage of material. 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InterpMaterialBuilder : public NXOpen::TaggedObject
        {
            private: InterpMaterialBuilderImpl * m_interpmaterialbuilder_impl;
            private: friend class  _InterpMaterialBuilderBuilder;
            protected: InterpMaterialBuilder();
            public: ~InterpMaterialBuilder();
            /**Returns  the current value of material 1 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXString Material1
            (
            );
            /**Sets  the current value of material 1 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaterial1
            (
                const NXString & newMaterialName /** the new name of material 1 */
            );
            /**Sets  the current value of material 1 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetMaterial1
            (
                const char * newMaterialName /** the new name of material 1 */
            );
            /**Returns  the current value of material 2 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXString Material2
            (
            );
            /**Sets  the current value of material 2 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMaterial2
            (
                const NXString & newMaterialName /** the new name of material 2 */
            );
            /**Sets  the current value of material 2 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SetMaterial2
            (
                const char * newMaterialName /** the new name of material 2 */
            );
            /** Add a new item 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Add
            (
                int indexAfter /** the index which new item will be added after */,
                double distanceFromFoundation /** the distance from foundation for new item */,
                double percentMaterial1 /** the percentage of material 1 for new item */
            );
            /** Modify item 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Modify
            (
                int index /** the index of item to be modified */,
                double distanceFromFoundation /** the distance from foundation for new item */,
                double percentMaterial1 /** the percentage of material 1 for new item */
            );
            /** Delete a item 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void Delete
            (
                int index /** the index of item to be deleted */
            );
            /** Move up a item 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void MoveUp
            (
                int index /** the index of item to be moved up */
            );
            /** Move down a item 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void MoveDown
            (
                int index /** the index of item to be moved down */
            );
            /** Get data for the specified item index
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void GetData
            (
                int index /** the index of item to be modified */,
                double* distanceFromFoundation /** the new value of distance from foundation */,
                double* percentMaterial1 /** the new value of percentage of material 1 */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
