#ifndef NXOpen_ROUTING_PATHSTOCKBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_PATHSTOCKBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_PathStockBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Routing_CharacteristicList.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class PathStockBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    class Expression;
    class NXObject;
    namespace Routing
    {
        class CharacteristicList;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _PathStockBuilderBuilder;
        class PathStockBuilderImpl;
        /** Assigns stocks to segments based of users critiera and the current
                default stock.   <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreatePathStockBuilder  NXOpen::Routing::RouteManager::CreatePathStockBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  PathStockBuilder : public NXOpen::Builder
        {
            /** Determines how to choose which stock to assign. */
            public: enum AssignMethod
            {
                AssignMethodNone/** No Stock. */,
                AssignMethodDefaultStock/** Default Stock. */,
                AssignMethodFromStartObject/** Finds a stock based off of the
                                                                               default stock and the object
                                                                               selected by the user. */,
                AssignMethodDiameterValue/** User specified diameter, creates round
                                                                               space reservation stock. */,
                AssignMethodRectangular/** User specified values, creates rectangular
                                                                               space reservation stock. */,
                AssignMethodFlatOval/** User specified values, creates flat_oval 
                                                                                   space reservation stock. */,
                AssignMethodSpecifiedStock/** Stock selected from Specify Item dialog */,
                AssignMethodFromParts/** Find stocks from the part table
                                                                               of parts selected by the user.*/
            };

            /** Determines the type of stock being assigned. */
            public: enum AssignStockType
            {
                AssignStockTypeStock/** Default stock type.             */,
                AssignStockTypeOverstock/** Overstock stock type.           */,
                AssignStockTypeFiller/** Filler stock type.              */,
                AssignStockTypeSpaceReservation/** Space Reservation stock type.   */
            };

            private: PathStockBuilderImpl * m_pathstockbuilder_impl;
            private: friend class  _PathStockBuilderBuilder;
            protected: PathStockBuilder();
            public: ~PathStockBuilder();
            /**Returns  the method to determine which stock to assign. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PathStockBuilder::AssignMethod AssignStockMethod
            (
            );
            /**Sets  the method to determine which stock to assign. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAssignStockMethod
            (
                NXOpen::Routing::PathStockBuilder::AssignMethod method /** method */ 
            );
            /**Returns  the start object to use for the 
                        @link Routing::PathStockBuilder::AssignMethodFromStartObject Routing::PathStockBuilder::AssignMethodFromStartObject@endlink  
                        method of stock assignment.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::NXObject * StartObject
            (
            );
            /**Sets  the start object to use for the 
                        @link Routing::PathStockBuilder::AssignMethodFromStartObject Routing::PathStockBuilder::AssignMethodFromStartObject@endlink  
                        method of stock assignment.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStartObject
            (
                NXOpen::NXObject * startObject /** start object */ 
            );
            /** Assigns stock using the method defined by this stock builder object.  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignStock
            (
                const std::vector<NXOpen::Routing::ISegment *> & segments /** segments */ 
            );
            /**Returns  the diameter value to use for the 
                        @link Routing::PathStockBuilder::AssignMethodDiameterValue Routing::PathStockBuilder::AssignMethodDiameterValue@endlink  
                        method of stock assignment.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double DiameterValue
            (
            );
            /**Sets  the diameter value to use for the 
                        @link Routing::PathStockBuilder::AssignMethodDiameterValue Routing::PathStockBuilder::AssignMethodDiameterValue@endlink  
                        method of stock assignment.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDiameterValue
            (
                double val /** val */ 
            );
            /** Updates an existing routing stock with settings stored in the builder.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateExistingStock
            (
                NXOpen::Routing::Stock * existingStock /** Existing Stock */
            );
            /** Returns the specified stock to use for the 
                        @link Routing::PathStockBuilder::AssignMethodSpecifiedStock Routing::PathStockBuilder::AssignMethodSpecifiedStock@endlink  
                        method of stock assignment.  @return  Characteristic list used to find the appropriate 
                                                                            @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                                                                            See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::CharacteristicList * GetSpecifiedStock
            (
            );
            /** Returns the specified stock and applied characteristics to use for the 
                        @link Routing::PathStockBuilder::AssignMethodSpecifiedStock Routing::PathStockBuilder::AssignMethodSpecifiedStock@endlink  
                        method of stock assignment. 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetSpecifiedStock
            (
                NXOpen::Routing::CharacteristicList ** stockPart /** Characteristic list used to find the appropriate 
                                                                                @link Routing::StockData Routing::StockData@endlink  for building the stock.  
                                                                                See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList ** appliedCharx /** Applied characteristics for the specified stock. */
            );
            /** Sets the specified stock to use for the 
                        @link Routing::PathStockBuilder::AssignMethodSpecifiedStock Routing::PathStockBuilder::AssignMethodSpecifiedStock@endlink  
                        method of stock assignment. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSpecifiedStock
            (
                NXOpen::Routing::CharacteristicList * stockPart /** Characteristic list used to find the appropriate 
                                                                                @link Routing::StockData Routing::StockData@endlink  for building the stock.
                                                                                See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */
            );
            /** Sets the specified stock and applied characteristics to use for the 
                        @link Routing::PathStockBuilder::AssignMethodSpecifiedStock Routing::PathStockBuilder::AssignMethodSpecifiedStock@endlink  
                        method of stock assignment. 
             <br>  Created in NX6.0.4.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSpecifiedStock
            (
                NXOpen::Routing::CharacteristicList * stockPart /** Characteristic list used to find the appropriate 
                                                                                @link Routing::StockData Routing::StockData@endlink  for building the stock.
                                                                                See @link Routing::StockDataCollection::CreateStockData Routing::StockDataCollection::CreateStockData@endlink . */,
                NXOpen::Routing::CharacteristicList * appliedCharx /** Applied characteristics for the specified stock. */
            );
            /**Returns  the type of stock being assigned. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::PathStockBuilder::AssignStockType StockType
            (
            );
            /**Sets  the type of stock being assigned. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetStockType
            (
                NXOpen::Routing::PathStockBuilder::AssignStockType stockType /** stock type */ 
            );
            /**Returns  the height value to use for the  @link 
                        Routing::PathStockBuilder::AssignMethodRectangular 
                        Routing::PathStockBuilder::AssignMethodRectangular@endlink  
                        method of stock assignment.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * RectangularHeight
            (
            );
            /**Returns  the Width value to use for the  @link 
                        Routing::PathStockBuilder::AssignMethodRectangular 
                        Routing::PathStockBuilder::AssignMethodRectangular@endlink  
                        method of stock assignment    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * RectangularWidth
            (
            );
            /**Returns  the Width value to use for the  @link 
                        Routing::PathStockBuilder::AssignMethodRectangular 
                        Routing::PathStockBuilder::AssignMethodRectangular@endlink  
                        method of stock assignment    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * RectangularRotation
            (
            );
            /**Returns  the height value to use for the  @link 
                        Routing::PathStockBuilder::AssignMethodFlatOval 
                        Routing::PathStockBuilder::AssignMethodFlatOval@endlink  
                        method of stock assignment.  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * FlatOvalHeight
            (
            );
            /**Returns  the Width value to use for the  @link 
                        Routing::PathStockBuilder::AssignMethodFlatOval 
                        Routing::PathStockBuilder::AssignMethodFlatOval@endlink  
                        method of stock assignment    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * FlatOvalWidth
            (
            );
            /**Returns  the Width value to use for the  @link 
                        Routing::PathStockBuilder::AssignMethodFlatOval 
                        Routing::PathStockBuilder::AssignMethodFlatOval@endlink  
                        method of stock assignment    
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * FlatOvalRotation
            (
            );
            /**Returns  the stock rotation value  
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * StockRotation
            (
            );
            /** Get the parts to use for the  @link 
                        Routing::PathStockBuilder::AssignMethodFromParts 
                        Routing::PathStockBuilder::AssignMethodFromParts@endlink  
                        method of stock assignment  @return  Part table parts to get
                                                                                                               stock characteristics. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: std::vector<NXOpen::Assemblies::Component *> GetParts
            (
            );
            /** Set the parts to use for the  @link 
                        Routing::PathStockBuilder::AssignMethodFromParts 
                        Routing::PathStockBuilder::AssignMethodFromParts@endlink  
                        method of stock assignment 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetParts
            (
                const std::vector<NXOpen::Assemblies::Component *> & parts /** Part table parts to get
                                                                                                                   stock characteristics. */
            );
            /** Notify the builder that the Routing preferred stock has been modified.  This updates
                        the builder so that it now uses the new preferred stock do determine which stock to
                        assign.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SettingsChanged
            (
            );
            /** Get the rectangular height and width value to use for the rectangular space reservation assignment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetRectangularDimensions
            (
                double* height /** height */ ,
                double* width /** width */ 
            );
            /** Set the rectangular height and width value for the rectangular space reservation assignment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetRectangularDimensions
            (
                double height /** height */ ,
                double width /** width */ 
            );
            /** Get the FlatOval height and width value to use for the FlatOval space reservation assignment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetFlatOvalDimensions
            (
                double* height /** height */ ,
                double* width /** width */ 
            );
            /** Set the FlatOval height and width value for the FlatOval space reservation assignment 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetFlatOvalDimensions
            (
                double height /** height */ ,
                double width /** width */ 
            );
            /** Set the selected stock 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetSelectedStock
            (
                NXOpen::Routing::Stock * stock /** Selected Stock */
            );
            /** Get the rotation value overwritten flag 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool IsRotationOverriden
            (
            );
            /** Set the rotation value overwritten flag 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void OverrideRotation
            (
                bool overrideRotation /** overriderotation */ 
            );
            /** Get the flag if non-circular stock default alignment is enabled 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool DefaultOrientationAlignmentEnabled
            (
            );
            /** Set the flag if it is to enable non-circular stock default alignment or not 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void EnableDefaultOrientationAlignment
            (
                bool suggestRotationAngle /** suggestrotationangle */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
