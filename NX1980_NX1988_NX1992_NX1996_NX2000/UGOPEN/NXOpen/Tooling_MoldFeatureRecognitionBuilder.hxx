#ifndef NXOpen_TOOLING_MOLDFEATURERECOGNITIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_MOLDFEATURERECOGNITIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_MoldFeatureRecognitionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/Tooling_CostTableDataProvider.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class MoldFeatureRecognitionBuilder;
    }
    class Body;
    class Builder;
    class Expression;
    class Face;
    namespace Features
    {
        class ToolingBox;
    }
    class NXColor;
    class NXObject;
    class SelectBody;
    class TaggedObject;
    namespace Tooling
    {
        class CostDataObject;
    }
    namespace Tooling
    {
        class CostTableDataProvider;
    }
    namespace Tooling
    {
        class OpeningAreaData;
    }
    namespace Tooling
    {
        class RibsData;
    }
    namespace Tooling
    {
        class UnderCutData;
    }
    namespace Tooling
    {
        class _MoldFeatureRecognitionBuilderBuilder;
        class MoldFeatureRecognitionBuilderImpl;
        /** Represents a @link NXOpen::Tooling::MoldFeatureRecognitionBuilder NXOpen::Tooling::MoldFeatureRecognitionBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::MoldwizardManager::CreateMoldFeatureRecognitionBuilder  NXOpen::Tooling::MoldwizardManager::CreateMoldFeatureRecognitionBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DisplayResolutionOptions </term> <description> 
         
        Standard </description> </item> 

        <item><term> 
         
        DraftAngle.Value </term> <description> 
         
        3 </description> </item> 

        <item><term> 
         
        MaximumRibLength.Value </term> <description> 
         
        2.0 (millimeters part), 0.07 (inches part) </description> </item> 

        <item><term> 
         
        MaximumRibThickness.Value </term> <description> 
         
        5.0 (millimeters part), 0.19 (inches part) </description> </item> 

        <item><term> 
         
        UndercutMinimumWidth.Value </term> <description> 
         
        0.25 (millimeters part), 0.0098 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX11.0.1.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  MoldFeatureRecognitionBuilder : public NXOpen::Builder
        {
            /** Display solution type for facets */
            public: enum DisplayResolutionType
            {
                DisplayResolutionTypeStandard/** standard */ ,
                DisplayResolutionTypeMedium/** medium */ ,
                DisplayResolutionTypeFine/** fine */ ,
                DisplayResolutionTypeExtraFine/** extra fine */ 
            };

            /** Analyze mode for Mold analysis */
            public: enum AnalysisModeType
            {
                AnalysisModeTypeCostMoldFullAnalysis/** cost mold full analysis */ ,
                AnalysisModeTypeCostMoldAnalysisWithoutWallThickness/** cost mold analysis without wall thickness */ ,
                AnalysisModeTypeCostMoldSplitFacesAndAnalysis/** cost mold split faces and analysis */ ,
                AnalysisModeTypeCostMoldFaceAnalysisOnly/** cost mold face analysis only */ ,
                AnalysisModeTypeCostMoldWallThicknessOnly/** cost mold wall thickness only */ ,
                AnalysisModeTypeCostMoldUndercutsOnly/** cost mold undercuts only */ ,
                AnalysisModeTypeCostMoldRibsOnly/** cost mold ribs only */ ,
                AnalysisModeTypeCostMoldOpeningsOnly/** cost mold openings only */ ,
                AnalysisModeTypeNothing/** nothing */ 
            };

            /** Feature type for mold cost related feature */
            public: enum CostFeatureType
            {
                CostFeatureTypeUndercut/** undercut */ ,
                CostFeatureTypeRib/** rib */ ,
                CostFeatureTypeOpening/** opening */ 
            };

            private: MoldFeatureRecognitionBuilderImpl * m_moldfeaturerecognitionbuilder_impl;
            private: friend class  _MoldFeatureRecognitionBuilderBuilder;
            protected: MoldFeatureRecognitionBuilder();
            public: ~MoldFeatureRecognitionBuilder();
            /**Returns  the selected body for analysis 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * SelectionBody
            (
            );
            /** Analyze selected body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void AnalyzeMoldBody
            (
            );
            /** Analyze selected body with specified mode type
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void AnalyzeMoldBodyByMode
            (
                NXOpen::Tooling::MoldFeatureRecognitionBuilder::AnalysisModeType analyseMode /** analysemode */ 
            );
            /** Export analysis result 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void ExportResult
            (
            );
            /**Returns  the x dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double XDimension
            (
            );
            /**Sets  the x dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetXDimension
            (
                double xLength /** xlength */ 
            );
            /**Returns  the y dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double YDimension
            (
            );
            /**Sets  the y dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetYDimension
            (
                double yLength /** ylength */ 
            );
            /**Returns  the z dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double ZDimension
            (
            );
            /**Sets  the z dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetZDimension
            (
                double zLength /** zlength */ 
            );
            /**Returns  the minimum x dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MinimumXDimension
            (
            );
            /**Sets  the minimum x dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMinimumXDimension
            (
                double minxLength /** minxlength */ 
            );
            /**Returns  the minimum y dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MinimumYDimension
            (
            );
            /**Sets  the minimum y dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMinimumYDimension
            (
                double minyLength /** minylength */ 
            );
            /**Returns  the minimum z dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MinimumZDimension
            (
            );
            /**Sets  the minimum z dimension of product body 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMinimumZDimension
            (
                double minzLength /** minzlength */ 
            );
            /**Returns  the surface area value 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double BodySurfaceArea
            (
            );
            /**Sets  the surface area value 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetBodySurfaceArea
            (
                double surfaceArea /** surfacearea */ 
            );
            /**Returns  the product body volume 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double PartVolume
            (
            );
            /**Sets  the product body volume 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetPartVolume
            (
                double partVolume /** partvolume */ 
            );
            /**Returns  the project area 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double BodyProjectArea
            (
            );
            /**Sets  the project area 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetBodyProjectArea
            (
                double bodyProjectArea /** bodyprojectarea */ 
            );
            /**Returns  the minimum wall thickness 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MinimumWallThickness
            (
            );
            /**Sets  the minimum wall thickness 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMinimumWallThickness
            (
                double minWallThickness /** minwallthickness */ 
            );
            /**Returns  the maximum wall thickness 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: double MaximumWallThickness
            (
            );
            /**Sets  the maximum wall thickness 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetMaximumWallThickness
            (
                double maxWallThickness /** maxwallthickness */ 
            );
            /**Returns  the undercut minimum width 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UndercutMinimumWidth
            (
            );
            /**Returns  the draft angle 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DraftAngle
            (
            );
            /**Returns  the maximum rib length to be recognized 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumRibLength
            (
            );
            /**Returns  the maximum rib thickness to be recognized 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumRibThickness
            (
            );
            /** Set the product orientation 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetProductOrientation
            (
                const NXOpen::Matrix3x3 & matrix /** matrix */ 
            );
            /** Get the product orientation 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Matrix3x3 GetProductOrientation
            (
            );
            /**Returns  the value that indicates whether to save part and export analysis data or not. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool SaveAndExportStatus
            (
            );
            /**Sets  the value that indicates whether to save part and export analysis data or not. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetSaveAndExportStatus
            (
                bool status /** status */ 
            );
            /**Returns  the folder in which output XML results can be found 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString XmlFolderBrowser
            (
            );
            /**Sets  the folder in which output XML results can be found 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetXmlFolderBrowser
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the folder in which output XML results can be found 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetXmlFolderBrowser
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the folder of part file to be saved 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: NXString PartFolderBrowser
            (
            );
            /**Sets  the folder of part file to be saved 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void SetPartFolderBrowser
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the folder of part file to be saved 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            void SetPartFolderBrowser
            (
                const char * foldername /** foldername */ 
            );
            /** Free all product feature data 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: void ReleaseAllProductFeatureData
            (
            );
            /** Find and collect molding features 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void FindMoldFeatures
            (
            );
            /** Set the value whether user has changed core/cavity faces or not. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : None */
            public: void SetIsCoreCavityFaceChanged
            (
                bool status /** status */ 
            );
            /**Returns  the temporary color for cost feature faces 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * CostFeatureFacesColor
            (
            );
            /**Sets  the temporary color for cost feature faces 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetCostFeatureFacesColor
            (
                NXOpen::NXColor * faceColor /** facecolor */ 
            );
            /**Returns  the tolerance of undercut face angle 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UndercutToleranceAngle
            (
            );
            /**Returns  the flag to allow group ribs automatically when performing rib feature analysis 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool AutoRibGrouping
            (
            );
            /**Sets  the flag to allow group ribs automatically when performing rib feature analysis 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetAutoRibGrouping
            (
                bool autoRibGrouping /** autoribgrouping */ 
            );
            /** Assign cost feature face color 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void AssignFeatureFaceColor
            (
                bool assignOrRestore /** assign cost feature face with temporary color or not*/
            );
            /** Populate product information from cost feature data 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetProductInformation
            (
            );
            /** Set face color for the current active feature type 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetFeatureFaceColorValue
            (
                NXOpen::NXColor * colorId /** colorid */ 
            );
            /** Change color setting value according the active feature type when table changed 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void ChangeColorSettingValue
            (
            );
            /** Get active table index 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: int GetActivePage
            (
            );
            /** Set active table index 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void SetActivePage
            (
                int activeTableIndex /** activetableindex */ 
            );
            /** Validates all size values of cost related features if they have dimensions being 0.00  @return  Validation result, pass or fail
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool ValidateFeaturesZeroDimension
            (
                NXString* message /** message contains error message to display in message box*/
            );
            /** Checks whether there is feature data with the specified feature type  @return  Feature data is empty or not
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: bool IsFeatureDataEmpty
            (
                NXOpen::Tooling::MoldFeatureRecognitionBuilder::CostFeatureType costFeatureType /** Mold cost feature type*/,
                bool needCheckUserCreated /** Need check feature data user created manually or not*/
            );
            /** Get the mold cost data 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * GetMoldCostDataObject
            (
            );
            /**Returns  the option of display resolution for facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::MoldFeatureRecognitionBuilder::DisplayResolutionType DisplayResolutionOptions
            (
            );
            /**Sets  the option of display resolution for facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayResolutionOptions
            (
                NXOpen::Tooling::MoldFeatureRecognitionBuilder::DisplayResolutionType resolutionOption /** resolutionoption */ 
            );
            /** Sets the refinement factor for facets 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRefineFactor
            (
                int displayResolutionType /** displayresolutiontype */ 
            );
            /**Returns  the temporary color for undercut feature faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * UndercutFeatureFacesColor
            (
            );
            /**Sets  the temporary color for undercut feature faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUndercutFeatureFacesColor
            (
                NXOpen::NXColor * faceColor /** facecolor */ 
            );
            /**Returns  the temporary color for rib feature faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * RibFeatureFacesColor
            (
            );
            /**Sets  the temporary color for rib feature faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRibFeatureFacesColor
            (
                NXOpen::NXColor * faceColor /** facecolor */ 
            );
            /**Returns  the temporary color for opening/insert feature faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OpeningFeatureFacesColor
            (
            );
            /**Sets  the temporary color for opening/insert feature faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOpeningFeatureFacesColor
            (
                NXOpen::NXColor * faceColor /** facecolor */ 
            );
            /**Returns  the value indicates whether transparent mode is on or not 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: bool TransparentMode
            (
            );
            /**Sets  the value indicates whether transparent mode is on or not 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTransparentMode
            (
                bool transparentMode /** transparentmode */ 
            );
            /** Updates the display with facet related data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateFacetDisplay
            (
                int highlightFacetType /** highlightfacettype */ 
            );
            /**Returns  the output xml file name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString XmlFileName
            (
            );
            /**Sets  the output xml file name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SetXmlFileName
            (
                const NXString & xmlFileName /** xmlfilename */ 
            );
            /**Sets  the output xml file name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            void SetXmlFileName
            (
                const char * xmlFileName /** xmlfilename */ 
            );
            /** Asks the default xml file name 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AskDefaultXmlFileName
            (
            );
            /** Asks the center point of bounding box of product and it's molding pull direction  @return  the center point of bounding box of product body 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d AskProductBodyOrientation
            (
                NXOpen::Body * selBody /** the product body */,
                NXOpen::Matrix3x3* workMatrix /** the orientation matrix of product body,its z direction is the molding pull direction */
            );
            /** Draws the pull direction of undercut temprarily 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void DrawSliderDirection
            (
                NXOpen::TaggedObject * costObject /** current selected undercut. */
            );
            /** Erases the temprary display of pull direction 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void EraseSliderDirection
            (
            );
            /** Delete selected cost objects 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteMoldingFeatures
            (
                const std::vector<NXOpen::Tooling::CostDataObject *> & costObjects /** current selected cost objects. */
            );
            /** Adds a new cost object manully  @return  new created cost object. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CostDataObject * AddMoldingFeature
            (
            );
            /** Splits a large undercut 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void SplitUnderCut
            (
                NXOpen::Tooling::UnderCutData * selectedUndercut /** the selected undercut to be split */,
                std::vector<NXOpen::Tooling::UnderCutData *> & newUndercuts /** new undercuts after split. */
            );
            /** Groups selected cost objects  @return  the grouped cost objects. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CostDataObject * GroupMoldingFeatures
            (
                const std::vector<NXOpen::Tooling::CostDataObject *> & costObject /** current selected cost objects. */
            );
            /** Ungroups selected cost object 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void UngroupMoldingFeature
            (
                const std::vector<NXOpen::Tooling::CostDataObject *> & costObjects /** current selected cost objects. */,
                std::vector<NXOpen::Tooling::CostDataObject *> & ungroupedObjects /** the ungrouped cost objects. */
            );
            /**  Shows the bounding box Of the product body
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void ShowBoundingBoxOfBody
            (
            );
            /**  Shows the bounding box Of the product body
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void RefreshCostObjectComputedProperties
            (
                NXOpen::Tooling::CostDataObject * costObject /** current selected cost object. */
            );
            /**  Closes the facet display model
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void CloseDisplay
            (
                int originalMode /** originalmode */ 
            );
            /** Changes slider direction based on bounding box's orientation 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void ChangeSliderDirectionBasedOnBoundingBox
            (
                NXOpen::Tooling::CostDataObject * costObject /** current selected cost objects. */,
                NXOpen::Features::ToolingBox * boxFeature /** created box feature. */
            );
            /** Creates bounding box feature based on the geometry of the cost object  @return  created box feature. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::ToolingBox * CreateBoundingBox
            (
                NXOpen::Tooling::CostDataObject * costObject /** current selected cost objects. */
            );
            /** Deletes bounding box feature created from the cost object 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteBoundingBoxFeature
            (
                NXOpen::Features::ToolingBox * boxFeature /** created box feature. */
            );
            /** Populates box feature data to the specified cost feature 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void PopulateBoxDataToCostFeature
            (
                NXOpen::Features::ToolingBox * boxFeature /** created box feature. */,
                NXOpen::Tooling::CostDataObject * costObject /** current selected cost objects. */
            );
            /**Returns  the data provider for undercut table 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CostTableDataProvider * UndercutDataProvider
            (
            );
            /**Returns  the data provider for rib table 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CostTableDataProvider * RibsDataProvider
            (
            );
            /**Returns  the data provider for opening table 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CostTableDataProvider * OpeningAreaDataProvider
            (
            );
            /** Ask current active data provider 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CostTableDataProvider * AskCurrentActiveDataProvider
            (
            );
            /** Collects all undercuts including its chilren 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void CollectUndercuts
            (
                std::vector<NXOpen::Tooling::UnderCutData *> & pCostObjects /** all undercuts in mold cost data collection. */
            );
            /** Updates the provider data according specified cost object data 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateProviderData
            (
                NXOpen::Tooling::CostTableDataProvider * pDataProvider /** pdataprovider */ ,
                const std::vector<NXOpen::Tooling::CostDataObject *> & pCostObjects /** all specified cost objects in table. */
            );
            /** Collects all openings including its chilren 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void CollectOpeningAreas
            (
                std::vector<NXOpen::Tooling::OpeningAreaData *> & pCostObjects /** all undercuts in mold cost data collection. */
            );
            /** Collects all rib ojects including its chilren 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void CollectRibs
            (
                std::vector<NXOpen::Tooling::RibsData *> & pCostObjects /** all ribs in mold cost data collection. */
            );
            /** Returns all facets that are assigned to a list of faces 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void AskFacetsOfFaces
            (
                const std::vector<NXOpen::Face *> & selectedFaces /** selected faces. */,
                std::vector<int> & facetsId /** all facets in specified faces */
            );
            /** Adds facets to an existing costing feature or a new costing feature
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void AddFacetsToFeatureOrCreateNewOne
            (
                int type /** type */ ,
                const std::vector<int> & facetsId /** facetsid */ ,
                NXOpen::Tooling::CostDataObject * costFeature /** costing feature tag */
            );
            /** Removes the deselected face from molding cost objects
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: void RemoveFacetsFromAllCostObjects
            (
                int type /** type */ ,
                const std::vector<int> & facetsId /** facetsid */ 
            );
            /** Asks related costing feature from current selected object  @return  related costing feature tag 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::CostDataObject * AskCostFeatureFromSelectionAndPoint
            (
                NXOpen::NXObject * selFace /** selected face or edge */,
                const NXOpen::Point3d & point /** point */ ,
                int* minDistElem /** mindistelem */ 
            );
            /** Ask the costing object related faces including its children 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void AskFeatureRelatedFacesWithChildren
            (
                NXOpen::Tooling::CostDataObject * costObjectTag /** costing object */,
                std::vector<NXOpen::Face *> & pFacesTags /** costing feature related faces */
            );
            /** Perform facet analysis for the selected body
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void PerformFacetAnalysis
            (
            );
            /** Creates one convergent body for each undercut,and gets all undercuts data. Before calling this method, face analysis should be finished. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CreateConvergentBodyAndGetUndercutsData
            (
                std::vector<NXOpen::Tooling::UnderCutData *> & undercuts /** undercuts */ ,
                std::vector<int> & undercutBodyNumberList /** undercutbodynumberlist */ ,
                std::vector<NXOpen::Body *> & convergentBodyList /** costing feature related convergent bodies */,
                int* undercutParameterLength /** undercutparameterlength */ ,
                std::vector<NXString> & allUndercutStringValueLists /** allundercutstringvaluelists */ 
            );
            /** Creates one convergent body for each rib,and gets all ribs data. Before calling this method, face analysis should be finished.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CreateConvergentBodyAndGetRibsData
            (
                std::vector<NXOpen::Tooling::RibsData *> & ribs /** ribs */ ,
                std::vector<int> & ribBodyNumberList /** ribbodynumberlist */ ,
                std::vector<NXOpen::Body *> & convergentBodyList /** costing feature related convergent bodies */,
                int* ribParameterLength /** ribparameterlength */ ,
                std::vector<NXString> & allRibsStringValueLists /** allribsstringvaluelists */ 
            );
            /** Creates one convergent body for each insert,and gets all inserts data. Before calling this method, face analysis should be finished.
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CreateConvergentBodyAndGetInsertsData
            (
                std::vector<NXOpen::Tooling::OpeningAreaData *> & inserts /** inserts */ ,
                std::vector<int> & insertBodyNumberList /** insertbodynumberlist */ ,
                std::vector<NXOpen::Body *> & convergentBodyList /** costing feature related convergent bodies */,
                int* insertParameterLength /** insertparameterlength */ ,
                std::vector<NXString> & allInsertStringValueLists /** allinsertstringvaluelists */ 
            );
            /** Store analysis result with UDO and save it in part. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SaveAnalysisResultToPart
            (
            );
            /** Clear existing analysis result in part. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void ClearExistingAnalysisResult
            (
            );
            /** Check whether analysis result exists in part. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void CheckAnalysisResult
            (
                NXOpen::Body * productBody /** productbody */ ,
                const NXOpen::Vector3d & drawingVector /** drawingvector */ ,
                bool* hasAnalysisResult /** hasanalysisresult */ ,
                bool* hasDifferentBody /** hasdifferentbody */ ,
                bool* hasDifferentVector /** hasdifferentvector */ 
            );
            /** Analyze selected body with specified mode type 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void AnalyzeMoldBodyByModeInCloudApp
            (
                NXOpen::Tooling::MoldFeatureRecognitionBuilder::AnalysisModeType analyseMode /** analysemode */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
