#ifndef NXOpen_AME_ASPECTPREFIXBUILDER_HXX_INCLUDED
#define NXOpen_AME_ASPECTPREFIXBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AspectPrefixBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AspectPrefixBuilder;
    }
    class Builder;
    namespace AME
    {
        class _AspectPrefixBuilderBuilder;
        class AspectPrefixBuilderImpl;
        /** represents the builder class which is used to define Aspect Prefixes and Delimiter for @link NXOpen::AME::Project NXOpen::AME::Project@endlink   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateAspectPrefixBuilder  NXOpen::AME::AMEManager::CreateAspectPrefixBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AspectPrefixBuilder : public NXOpen::Builder
        {
            /** represents delimiter type */
            public: enum DelimiterType
            {
                DelimiterTypeDot/** A dot (.) is used as the delimiter */,
                DelimiterTypeAspectPrefix/** Aspect Prefix is used as the delimiter */,
                DelimiterTypeNoDelimiter/** No delimiter will be used */
            };

            private: AspectPrefixBuilderImpl * m_aspectprefixbuilder_impl;
            private: friend class  _AspectPrefixBuilderBuilder;
            protected: AspectPrefixBuilder();
            public: ~AspectPrefixBuilder();
            /**Returns  the aspect prefix of function aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Function
            (
            );
            /**Sets  the aspect prefix of function aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFunction
            (
                const NXString & functionPrefix /** functionprefix */ 
            );
            /**Sets  the aspect prefix of function aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetFunction
            (
                const char * functionPrefix /** functionprefix */ 
            );
            /**Returns  the aspect prefix of location aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Location
            (
            );
            /**Sets  the aspect prefix of location aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetLocation
            (
                const NXString & location /** location */ 
            );
            /**Sets  the aspect prefix of location aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetLocation
            (
                const char * location /** location */ 
            );
            /**Returns  the aspect prefix of product aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString Product
            (
            );
            /**Sets  the aspect prefix of product aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetProduct
            (
                const NXString & product /** product */ 
            );
            /**Sets  the aspect prefix of product aspect 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetProduct
            (
                const char * product /** product */ 
            );
            /**Returns  the @link NXOpen::AME::AspectPrefixBuilder::DelimiterType NXOpen::AME::AspectPrefixBuilder::DelimiterType@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AspectPrefixBuilder::DelimiterType Delimiter
            (
            );
            /**Sets  the @link NXOpen::AME::AspectPrefixBuilder::DelimiterType NXOpen::AME::AspectPrefixBuilder::DelimiterType@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDelimiter
            (
                NXOpen::AME::AspectPrefixBuilder::DelimiterType delimiter /** delimiter */ 
            );
            /**Returns  the option to automatically rename AD object and its aspect names to mechanical/layout name upon mapping 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool AutoRenameOnMapping
            (
            );
            /**Sets  the option to automatically rename AD object and its aspect names to mechanical/layout name upon mapping 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAutoRenameOnMapping
            (
                bool autoRenameOnMapping /** autorenameonmapping */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
