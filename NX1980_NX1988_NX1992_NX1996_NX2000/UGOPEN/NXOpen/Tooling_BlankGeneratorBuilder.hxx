#ifndef NXOpen_TOOLING_BLANKGENERATORBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_BLANKGENERATORBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_BlankGeneratorBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class BlankGeneratorBuilder;
    }
    class Builder;
    class NXObject;
    class SelectFace;
    class TaggedObject;
    namespace Tooling
    {
        class _BlankGeneratorBuilderBuilder;
        class BlankGeneratorBuilderImpl;
        /**
              Represents a @link NXOpen::Tooling::BlankGeneratorBuilder NXOpen::Tooling::BlankGeneratorBuilder@endlink 
              This class is for Blank Generator Design UI
             <br> To create a new instance of this class, use @link NXOpen::Tooling::BlankGeneratorCollection::CreateBlankGeneratorBuilder  NXOpen::Tooling::BlankGeneratorCollection::CreateBlankGeneratorBuilder @endlink  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  BlankGeneratorBuilder : public NXOpen::Builder
        {
            /** Specifies the option of blank generator operation type.*/
            public: enum Types
            {
                TypesCreateBlank/** Create a blank. */,
                TypesEditBlank/** Edit a blank. */
            };

            /** Specify the edit method.*/
            public: enum EditBlankType
            {
                EditBlankTypeUpdate/**Update the blank*/,
                EditBlankTypeRemove/**Remove the blank*/
            };

            /** Specify the creation method.*/
            public: enum CreateBlankType
            {
                CreateBlankTypeImport/** Import blank*/,
                CreateBlankTypeSelect/** Select blank*/,
                CreateBlankTypeUnform/** Unform blank*/
            };

            private: BlankGeneratorBuilderImpl * m_blankgeneratorbuilder_impl;
            private: friend class  _BlankGeneratorBuilderBuilder;
            protected: BlankGeneratorBuilder();
            public: ~BlankGeneratorBuilder();
            /**Returns  the type of operation to perform - create or edit a blank. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BlankGeneratorBuilder::Types Type
            (
            );
            /**Sets  the type of operation to perform - create or edit a blank. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::BlankGeneratorBuilder::Types type /** Sets the type*/
            );
            /**Returns  the method used to create a blank. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BlankGeneratorBuilder::CreateBlankType CreateBlankOption
            (
            );
            /**Sets  the method used to create a blank. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCreateBlankOption
            (
                NXOpen::Tooling::BlankGeneratorBuilder::CreateBlankType createBlankOption /** Sets the create blank method*/
            );
            /** Create a blank by importing a blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void ImportBlank
            (
            );
            /** Create a blank by importing a blank according to blank tag.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * ImportBlankPart
            (
                const NXString & blankFullName /** blankfullname */ 
            );
            /** Create a blank by importing a blank according to blank tag.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::NXObject * ImportBlankPart
            (
                const char * blankFullName /** blankfullname */ 
            );
            /** Create a blank by selecting a blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SelectBlank
            (
            );
            /** Create a blank by unforming a sheet metal part.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void UnformSheet
            (
            );
            /**Returns  the face used to create a blank. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * StationaryFace
            (
            );
            /**Returns  the face used to update a blank. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * DatumFace
            (
            );
            /**Returns  the method used to edit a blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::BlankGeneratorBuilder::EditBlankType EditBlankOption
            (
            );
            /**Sets  the method used to edit a blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEditBlankOption
            (
                NXOpen::Tooling::BlankGeneratorBuilder::EditBlankType editBlankOption /** Sets the edit blank method*/
            );
            /** Update a blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void UpdateBlank
            (
            );
            /** Update a blank part.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObject * UpdateBlankPart
            (
                const NXString & blankFullName /** blankfullname */ 
            );
            /** Update a blank part.
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::NXObject * UpdateBlankPart
            (
                const char * blankFullName /** blankfullname */ 
            );
            /** Remove a blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void RemoveBlank
            (
            );
            /**Returns  the sheet metal part name.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString SheetMetalPartName
            (
            );
            /**Sets  the sheet metal part name.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSheetMetalPartName
            (
                const NXString & sheetMetalPartName /** Sets sheet part name */
            );
            /**Sets  the sheet metal part name.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetSheetMetalPartName
            (
                const char * sheetMetalPartName /** Sets sheet part name */
            );
            /**Returns  the blank number.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString BlankNumber
            (
            );
            /**Sets  the blank number.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBlankNumber
            (
                const NXString & blankNumber /** Sets blank number */
            );
            /**Sets  the blank number.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetBlankNumber
            (
                const char * blankNumber /** Sets blank number */
            );
            /**Returns  the part containing a blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * BlankPart
            (
            );
            /**Sets  the part containing a blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetBlankPart
            (
                NXOpen::TaggedObject * blankTag /**Sets the blank tag*/
            );
            /**Returns  the display part needed while selecting a blank .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * DisplayPartSelect
            (
            );
            /**Sets  the display part needed while selecting a blank .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayPartSelect
            (
                NXOpen::TaggedObject * displayPartTag /**Sets the display part tag*/
            );
            /**Returns  the indication that the blank to be updated was created by insert method. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CreatedByInsert
            (
            );
            /**Sets  the indication that the blank to be updated was created by insert method. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCreatedByInsert
            (
                bool insertBlankFlag /**Sets the insert blank flag*/
            );
            /**Returns  the new inserted blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * InsertNewBlank
            (
            );
            /**Sets  the new inserted blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetInsertNewBlank
            (
                NXOpen::TaggedObject * blankTag /**Sets the insert new blank tag*/
            );
            /**Returns  the display part needed while importing blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * DisplayPartImport
            (
            );
            /**Sets  the display part needed while importing blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayPartImport
            (
                NXOpen::TaggedObject * displayPartTag /**Sets the display part tag*/
            );
            /**Returns  the work part needed while creating blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * WorkPart
            (
            );
            /**Sets  the work part needed while creating blank.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetWorkPart
            (
                NXOpen::TaggedObject * workPart /**Sets the work part tag*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
