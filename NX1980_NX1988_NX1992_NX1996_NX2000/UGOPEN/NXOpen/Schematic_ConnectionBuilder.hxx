#ifndef NXOpen_SCHEMATIC_CONNECTIONBUILDER_HXX_INCLUDED
#define NXOpen_SCHEMATIC_CONNECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Schematic_ConnectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_Connection.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Schematic_Port.hxx>
#include <NXOpen/Schematic_Sheet.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_schematic_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Schematic
    {
        class ConnectionBuilder;
    }
    class Builder;
    namespace Diagramming
    {
        class Connection;
    }
    namespace Schematic
    {
        class Port;
    }
    namespace Schematic
    {
        class Sheet;
    }
    namespace Schematic
    {
        class _ConnectionBuilderBuilder;
        class ConnectionBuilderImpl;

        /// \cond NX_NO_DOC 
        /**  @brief  Represents a ConnectionBuilder.  

           <br> To create a new instance of this class, use @link NXOpen::Schematic::SchematicManager::CreateConnectionBuilder  NXOpen::Schematic::SchematicManager::CreateConnectionBuilder @endlink  <br> 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_SCHEMATICEXPORT  ConnectionBuilder : public NXOpen::Builder
        {
            private: ConnectionBuilderImpl * m_connectionbuilder_impl;
            private: friend class  _ConnectionBuilderBuilder;
            protected: ConnectionBuilder();
            public: ~ConnectionBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the id of the connection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Id
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the line type of the connection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetLineType
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the line type of the connection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineType
            (
                const NXString & lineType /** linetype */ 
            );
            /** Sets the line type of the connection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            void SetLineType
            (
                const char * lineType /** linetype */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the owning sheet of this connection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Schematic::Sheet * GetSheet
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the owning sheet of this connection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSheet
            (
                NXOpen::Schematic::Sheet * owningSheet /** owningsheet */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get bending points for polyline to render the connection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void GetBendPoints
            (
                std::vector<NXOpen::Point2d> & points /** points */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set bending points for polyline to render the connection. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBendPoints
            (
                const std::vector<NXOpen::Point2d> & points /** points */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the connection object of the connection builder. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Diagramming::Connection * GetConnection
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the current element ID of this connection. It works only in edit mode, it's optional and the first element ID stored in the connection will be used as default.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ElementId
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the current element ID of this connection. It works only in edit mode, it's optional and the first element ID stored in the connection will be used as default.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetElementId
            (
                const NXString & elementId /** elementid */ 
            );
            /**Sets  the current element ID of this connection. It works only in edit mode, it's optional and the first element ID stored in the connection will be used as default.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            void SetElementId
            (
                const char * elementId /** elementid */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the start location of this connection.
                        This start location is applicable only when the @link Diagramming::ConnectionBuilder::Start Diagramming::ConnectionBuilder::Start@endlink  is NULL.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d GetStartLocation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set the start location of this connection.
                        This start location is applicable only when the @link Diagramming::ConnectionBuilder::Start Diagramming::ConnectionBuilder::Start@endlink  is NULL.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStartLocation
            (
                const NXOpen::Point2d & startLocation /** startlocation */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the end location of this connection.
                        This end location is applicable only when the @link Diagramming::ConnectionBuilder::End Diagramming::ConnectionBuilder::End@endlink  port is NULL. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point2d GetEndLocation
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Set the end location of this connection.
                        This end location is applicable only when the @link Diagramming::ConnectionBuilder::End Diagramming::ConnectionBuilder::End@endlink  port is NULL. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEndLocation
            (
                const NXOpen::Point2d & endLocation /** endlocation */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the start port of this connection in native. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Schematic::Port * GetStart
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the start port of this connection in native. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStart
            (
                NXOpen::Schematic::Port * port /** port */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Gets the end port of this connection.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Schematic::Port * GetEnd
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Sets the end port of this connection.
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnd
            (
                NXOpen::Schematic::Port * port /** port */ 
            );

            /// \endcond 
        };

        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
