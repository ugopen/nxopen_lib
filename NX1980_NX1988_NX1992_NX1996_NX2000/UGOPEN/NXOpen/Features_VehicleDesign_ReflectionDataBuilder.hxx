#ifndef NXOpen_FEATURES_VEHICLEDESIGN_REFLECTIONDATABUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_REFLECTIONDATABUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_ReflectionDataBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class ReflectionDataBuilder;
        }
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class Point;
    class ScCollector;
    class Section;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _ReflectionDataBuilderBuilder;
            class ReflectionDataBuilderImpl;
            /**
                Represents a @link NXOpen::Features::VehicleDesign::ReflectionData NXOpen::Features::VehicleDesign::ReflectionData@endlink  builder
                 <br> To create a new instance of this class, use @link NXOpen::Features::VehicleDesignCollection::CreateReflectionDataBuilder  NXOpen::Features::VehicleDesignCollection::CreateReflectionDataBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            IsReflectData </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            IsReflectTraceCurve </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            IsRefractData </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            IsRefractTraceCurve </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            ReflectAccuracy </term> <description> 
             
            20 </description> </item> 

            <item><term> 
             
            ReflectMethod </term> <description> 
             
            DirectReflect </description> </item> 

            <item><term> 
             
            RefractionIndex </term> <description> 
             
            1.5 </description> </item> 

            <item><term> 
             
            Resolution </term> <description> 
             
            Medium </description> </item> 

            <item><term> 
             
            Thickness </term> <description> 
             
            5 </description> </item> 

            </list> 

             <br>  Created in NX6.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  ReflectionDataBuilder : public NXOpen::Features::FeatureBuilder
            {
                /** the resolution type */
                public: enum ResolutionType
                {
                    ResolutionTypeLow/** low */,
                    ResolutionTypeMedium/** medium */,
                    ResolutionTypeHigh/** high */,
                    ResolutionTypeCustomized/** user defined */
                };

                /** the reflection data option type */
                public: enum ReflectMethodType
                {
                    ReflectMethodTypeDirectReflect/** direct reflect */,
                    ReflectMethodTypeReverseReflection/** reverse reflection */
                };

                private: ReflectionDataBuilderImpl * m_reflectiondatabuilder_impl;
                private: friend class  _ReflectionDataBuilderBuilder;
                protected: ReflectionDataBuilder();
                public: ~ReflectionDataBuilder();
                /**Returns  the eye point 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * EyePoint
                (
                );
                /**Sets  the eye point 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetEyePoint
                (
                    NXOpen::Point * eyePoint /** eyepoint */ 
                );
                /**Returns  the target object to be reflected on the faces and/or planes 
                         the target object 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Section * TargetObject
                (
                );
                /**Returns  the reflection object to reflect the input target objects 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * ReflectionObject
                (
                );
                /**Returns  the thickness of the reflection objects 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: double Thickness
                (
                );
                /**Sets  the thickness of the reflection objects 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetThickness
                (
                    double thickness /** thickness */ 
                );
                /**Returns  whether the direction of reflection objects is reversed to determine their thickness 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: bool ReverseDir
                (
                );
                /**Sets  whether the direction of reflection objects is reversed to determine their thickness 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReverseDir
                (
                    bool reverseDir /** reversedir */ 
                );
                /**Returns  the refraction index 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: double RefractionIndex
                (
                );
                /**Sets  the refraction index 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRefractionIndex
                (
                    double refractionIndex /** refractionindex */ 
                );
                /**Returns  the resolution type  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::ReflectionDataBuilder::ResolutionType Resolution
                (
                );
                /**Sets  the resolution type  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetResolution
                (
                    NXOpen::Features::VehicleDesign::ReflectionDataBuilder::ResolutionType resolution /** resolution */ 
                );
                /**Returns  the customized reflection accuracy, which is the number of dispersed points for the input target objects 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: int ReflectAccuracy
                (
                );
                /**Sets  the customized reflection accuracy, which is the number of dispersed points for the input target objects 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReflectAccuracy
                (
                    int reflectAccuracy /** reflectaccuracy */ 
                );
                /**Returns  whether to create reflection data as output or not  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsReflectData
                (
                );
                /**Sets  whether to create reflection data as output or not  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReflectData
                (
                    bool isReflectData /** isreflectdata */ 
                );
                /**Returns  whether to create reflection trace curves as output or not 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsReflectTraceCurve
                (
                );
                /**Sets  whether to create reflection trace curves as output or not 
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReflectTraceCurve
                (
                    bool isReflectTraceCurve /** isreflecttracecurve */ 
                );
                /**Returns  whether to create refraction data as output or not  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsRefractData
                (
                );
                /**Sets  whether to create refraction data as output or not  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRefractData
                (
                    bool isRefractData /** isrefractdata */ 
                );
                /**Returns  whether to create refraction trace curves as output or not  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsRefractTraceCurve
                (
                );
                /**Sets  whether to create refraction trace curves as output or not  
                 <br>  Created in NX6.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRefractTraceCurve
                (
                    bool isRefractTraceCurve /** isrefracttracecurve */ 
                );
                /**Returns  the reflection data option type  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::ReflectionDataBuilder::ReflectMethodType ReflectMethod
                (
                );
                /**Sets  the reflection data option type  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReflectMethod
                (
                    NXOpen::Features::VehicleDesign::ReflectionDataBuilder::ReflectMethodType reflectionMethod /** reflectionmethod */ 
                );
                /**Returns  the reflected object is in the dash surface 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * DashSurface
                (
                );
                /**Returns  whether to create reverse reflection data as output or not  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsReverseReflectData
                (
                );
                /**Sets  whether to create reverse reflection data as output or not  
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReverseReflectData
                (
                    bool isReverseReflectData /** isreversereflectdata */ 
                );
                /**Returns  whether to create reverse reflection trace curves as output or not 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: bool IsReverseReflectTraceCurve
                (
                );
                /**Sets  whether to create reverse reflection trace curves as output or not 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetReverseReflectTraceCurve
                (
                    bool isReverseReflectTraceCurve /** isreversereflecttracecurve */ 
                );
                /**Returns  the distance tolerance. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: double DistanceTolerance
                (
                );
                /**Sets  the distance tolerance. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDistanceTolerance
                (
                    double distanceTolerance /** distancetolerance */ 
                );
                /**Returns  the angular tolerance. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : None */
                public: double AngularTolerance
                (
                );
                /**Sets  the angular tolerance. 
                 <br>  Created in NX1980.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetAngularTolerance
                (
                    double angularTolerance /** angulartolerance */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
