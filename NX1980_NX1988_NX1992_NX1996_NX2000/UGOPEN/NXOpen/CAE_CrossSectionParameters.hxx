#ifndef NXOpen_CAE_CROSSSECTIONPARAMETERS_HXX_INCLUDED
#define NXOpen_CAE_CROSSSECTIONPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CrossSectionParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Result.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CrossSectionParameters;
    }
    namespace CAE
    {
        class BaseResultType;
    }
    namespace CAE
    {
        class ResultParameters;
    }
    class Unit;
    namespace CAE
    {
        class _CrossSectionParametersBuilder;
        class CrossSectionParametersImpl;
        /** This class is worked as a packet of information that can be used to change cross-section state.
                <br/>Use @link NXOpen::CAE::ResultManager NXOpen::CAE::ResultManager@endlink  to create an @link NXOpen::CAE::CrossSectionParameters NXOpen::CAE::CrossSectionParameters@endlink 
             <br> To obtain an instance of this class use @link NXOpen::Session::ResultManager NXOpen::Session::ResultManager@endlink .  <br> 
         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CrossSectionParameters : public NXOpen::TaggedObject
        {
            private: CrossSectionParametersImpl * m_crosssectionparameters_impl;
            private: friend class  _CrossSectionParametersBuilder;
            protected: CrossSectionParameters();
            public: ~CrossSectionParameters();
            /** Ask Result type   @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::BaseResultType * GetGenericResultType
            (
            );
            /** Set Result type  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetGenericResultType
            (
                NXOpen::CAE::BaseResultType * type /** type */ 
            );
            /** Set result component  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetResultComponent
            (
                NXOpen::CAE::Result::Component component /** component */ 
            );
            /** Ask result component   @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Result::Component GetResultComponent
            (
            );
            /** Make Nodal result to Element Result. 
                         To define what value should be used to represent an element, use @link NXOpen::CAE::CrossSectionParameters::SetElementValueCriterion NXOpen::CAE::CrossSectionParameters::SetElementValueCriterion@endlink 
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void MakeElementResult
            (
                bool elementResult /** elementresult */ 
            );
            /** Query Element Result value  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool GetElementResult
            (
            );
            /** Set how element the result is defined 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetElementValueCriterion
            (
                NXOpen::CAE::Result::ElementValueCriterion criteria /** criteria */ 
            );
            /** Ask how element the result is defined.  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Result::ElementValueCriterion GetElementValueCriterion
            (
            );
            /** Set complex criteria 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetComplexCriterion
            (
                NXOpen::CAE::Result::Complex complex /** complex */ 
            );
            /** If result is complex it returns which component is set(like real or imaginary)  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Result::Complex GetComplexCriterion
            (
            );
            /** Sets the phase angle at which result will be evaluated. This is only value if complex result is set to the PhaseAngle type 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetPhaseAngle
            (
                double angle /** angle */ 
            );
            /** Ask phase angle. If complex result is set to Phaseangle type then user can specify an angle at which result will be evaluated  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: double GetPhaseAngle
            (
            );
            /** Set scale. This will affect all subsequent result query. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /** Ask scale @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: double GetScale
            (
            );
            /** Set result unit 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetUnit
            (
                NXOpen::Unit * unit /** unit */ 
            );
            /** Ask result unit  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::Unit * GetUnit
            (
            );
            /** Set all values to absolute values. 
                        Warning: Once converted to absolute value it is not possible to revert to original values.
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetAbsoluteValue
            (
                bool absolute /** absolute */ 
            );
            /** Ask whether all values are absolute values      @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool GetAbsoluteValue
            (
            );
            /** Turns on the fillets flag
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetFillets
            (
                bool fillets /** fillets */ 
            );
            /** Return the fillets flag  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool GetFillets
            (
            );
            /** Turns on the fillets flag
                     
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetFilletRadius
            (
                double filletRadius /** fillet radius */ 
            );
            /** Return the fillets flag  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: double GetFilletRadius
            (
            );
            /** Set beam element ID 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetBeamElement
            (
                int beamEid /** beam eid */ 
            );
            /** Ask beam element ID  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int GetBeamElement
            (
            );
            /** Set beam end 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetBeamEnd
            (
                NXOpen::CAE::Result::BeamEnd beamEnd /** beam end */ 
            );
            /** Ask beam end  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Result::BeamEnd GetBeamEnd
            (
            );
            /** Ask model range parameters  @return   
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ResultParameters * GetModelRangeParameters
            (
            );
            /** Set the method used when calculating the absolute values for the derived components of @link NXOpen::CAE::Result::DataTypeTensor NXOpen::CAE::Result::DataTypeTensor@endlink  
                         like  @link NXOpen::CAE::Result::ComponentMaximumPrincipal NXOpen::CAE::Result::ComponentMaximumPrincipal@endlink  
                     
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetTensorComponentAbsoluteValue
            (
                NXOpen::CAE::Result::TensorDerivedAbsolute absolute /** absolute */ 
            );
            /** Get the method used when calculating the absolute values for the derived components of
                        @link NXOpen::CAE::Result::DataTypeTensor NXOpen::CAE::Result::DataTypeTensor@endlink  like  @link NXOpen::CAE::Result::ComponentMaximumPrincipal NXOpen::CAE::Result::ComponentMaximumPrincipal@endlink   @return   
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Result::TensorDerivedAbsolute GetTensorComponentAbsoluteValue
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
