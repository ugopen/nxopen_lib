#ifndef NXOpen_SHEETMETAL_FLATPATTERNSETTINGS_HXX_INCLUDED
#define NXOpen_SHEETMETAL_FLATPATTERNSETTINGS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SheetMetal_FlatPatternSettings.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXColor.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ViewDependentDisplayManager.hxx>
#include <NXOpen/libnxopencpp_sheetmetal_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace SheetMetal
    {
        class FlatPatternSettings;
    }
    class NXColor;
    namespace SheetMetal
    {
        class _FlatPatternSettingsBuilder;
        class FlatPatternSettingsImpl;
        /** Provides access to object and callout properties for sheet-metal data in
                flat pattern views on drawings. The class is created upon a query to
                obtain the FlatPatternView object from either a view (style) or a 
                part (preferences).  <br> This class is not created directly by the user.  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_SHEETMETALEXPORT  FlatPatternSettings : public NXOpen::TaggedObject
        {
            /** The members of the following enumerated type are used to identify
                        object types to the FlatPatternView API. These are not the usual
                        NX object types; they are ordinary NX objects that are known to
                        the flat pattern feature for the type of outline they provide to
                        a bend region, joggle region, or lightening hole. */
            public: enum FlatPatternObjectType
            {
                FlatPatternObjectTypeBendCenterLine/** Deprecated */,
                FlatPatternObjectTypeBendUpCenterLine/** bend up center line */ ,
                FlatPatternObjectTypeBendDownCenterLine/** bend down center line */ ,
                FlatPatternObjectTypeBendTangentLine/** bend tangent line */ ,
                FlatPatternObjectTypeOuterMoldLine/** outer mold line */ ,
                FlatPatternObjectTypeInnerMoldLine/** inner mold line */ ,
                FlatPatternObjectTypeExteriorCurves/** exterior curves */ ,
                FlatPatternObjectTypeInteriorCurves/** Deprecated */,
                FlatPatternObjectTypeInteriorCutoutCurves/** interior cutout curves */ ,
                FlatPatternObjectTypeInteriorFeatureCurves/** interior feature curves */ ,
                FlatPatternObjectTypeLighteningHoleCenter/** lightening hole center */ ,
                FlatPatternObjectTypeJoggleLine/** joggle line */ ,
                FlatPatternObjectTypeAddedTopGeometry/** added top geometry */ ,
                FlatPatternObjectTypeAddedBottomGeometry/** added bottom geometry */ ,
                FlatPatternObjectTypeToolMarker/** tool marker */ ,
                FlatPatternObjectTypeHole/** hole */ ,
                FlatPatternObjectTypeCentermark/** centermark */ 
            };

             /** The members of the following structure are the display data for an
                        object in a flat pattern drawing member view. */
            public:
            struct FlatPatternObjectTypeDisplay
            {
                public: /** Object type */NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectType Type;
                public: /** Enabled status for the object type */int IsEnabled;
                public: /** Object color */NXColor* Color;
                public: /** Object font */NXOpen::ViewDependentDisplayManager::Font Font;
                public: /** Object width */NXOpen::ViewDependentDisplayManager::Width Width;
                public: FlatPatternObjectTypeDisplay() :
                    Type((NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectType)0),
                    IsEnabled(),
                    Color(),
                    Font((NXOpen::ViewDependentDisplayManager::Font)0),
                    Width((NXOpen::ViewDependentDisplayManager::Width)0)
                {
                }
                /** Constructor for the FlatPatternObjectTypeDisplay struct. */ 
                public: FlatPatternObjectTypeDisplay(NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectType typeInitial /** Object type */, 
                        int isEnabledInitial /** Enabled status for the object type */, 
                        NXColor* colorInitial /** Object color */, 
                        NXOpen::ViewDependentDisplayManager::Font fontInitial /** Object font */, 
                        NXOpen::ViewDependentDisplayManager::Width widthInitial /** Object width */) :
                    Type(typeInitial),
                    IsEnabled(isEnabledInitial),
                    Color(colorInitial),
                    Font(fontInitial),
                    Width(widthInitial)
                {
                }
            };

             /** The members of the following structure are the display data for a
                        callout in a flat pattern drawing member view. */
            public:
            struct FlatPatternCalloutTypeDisplay
            {
                public: /** The name of the callout type.
                                    The string is one returned by the 
                                    get_callout_data method, or can
                                    be hand-coded as the application name 'dot' the callout
                                    name, like this:
                                    "FlatPatternView.BendRadius". Neither name is
                                    case sensitive and blanks are not significant. This type
                                    of hand-coded callout type is usable as long as the
                                    callout type name is unique within the application name. 
                                    Beware of changing the defaults and loading old parts. */NXString Type;
                public: /** Enabled status for the callout type. */int IsEnabled;
                public: /** dialog name for the callout type. */NXString Name;
                public: FlatPatternCalloutTypeDisplay() :
                    Type(),
                    IsEnabled(),
                    Name()
                {
                }
                /** Constructor for the FlatPatternCalloutTypeDisplay struct. */ 
                public: FlatPatternCalloutTypeDisplay(const NXString &typeInitial /** The name of the callout type.
                                            The string is one returned by the 
                                            get_callout_data method, or can
                                            be hand-coded as the application name 'dot' the callout
                                            name, like this:
                                            "FlatPatternView.BendRadius". Neither name is
                                            case sensitive and blanks are not significant. This type
                                            of hand-coded callout type is usable as long as the
                                            callout type name is unique within the application name. 
                                            Beware of changing the defaults and loading old parts. */, 
                        int isEnabledInitial /** Enabled status for the callout type. */, 
                        const NXString &nameInitial /** dialog name for the callout type. */) :
                    Type(typeInitial),
                    IsEnabled(isEnabledInitial),
                    Name(nameInitial)
                {
                }
            };

            private: FlatPatternSettingsImpl * m_flatpatternsettings_impl;
            private: friend class  _FlatPatternSettingsBuilder;
            protected: FlatPatternSettings();
            public: ~FlatPatternSettings();
            /** Returns the display data for a flat pattern object type.  @return  The display data for the flat pattern object type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeDisplay GetFlatPatternObjectTypeDisplay
            (
                NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectType objectType /** The object type for which to return the display data. */
            );
            /** Sets the display data for a flat pattern object type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetFlatPatternObjectTypeDisplay
            (
                NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectType objectType /** The object type for which to get the display data. */,
                const NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeDisplay & displayData /** The display data for the flat pattern object type. */
            );
            /** Returns the display data for a callout type. The name member of the
                        @link NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay@endlink 
                        is separately allocated from the callout_type argument string. 
                        In some cases the new string will contain an
                        extended form of the callout_type passed in, and that form should
                        be used for subsequent calls, without modification.  @return  The display data for the callout type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay GetFlatPatternCalloutTypeDisplay
            (
                const NXString & calloutType /** The name of the callout type for which to get the display data. */
            );
            /** Returns the display data for a callout type. The name member of the
                        @link NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay@endlink 
                        is separately allocated from the callout_type argument string. 
                        In some cases the new string will contain an
                        extended form of the callout_type passed in, and that form should
                        be used for subsequent calls, without modification.  @return  The display data for the callout type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay GetFlatPatternCalloutTypeDisplay
            (
                const char * calloutType /** The name of the callout type for which to get the display data. */
            );
            /** Sets the display data for a callout type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void SetFlatPatternCalloutTypeDisplay
            (
                const NXString & calloutType /** The name of the callout type for which to set the display data. */,
                const NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay & displayData /** The display data for the callout type. */
            );
            /** Sets the display data for a callout type. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            void SetFlatPatternCalloutTypeDisplay
            (
                const char * calloutType /** The name of the callout type for which to set the display data. */,
                const NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay & displayData /** The display data for the callout type. */
            );
            /** Returns the types, colors, fonts, widths, and enabled status for all
                        the available object types. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void GetFlatPatternAllObjectTypeDisplay
            (
                std::vector<NXOpen::SheetMetal::FlatPatternSettings::FlatPatternObjectTypeDisplay> & displayData /** Array of structures with the object type display data. */
            );
            /** Returns the dialog names, identifiers, and enabled status for all the
                        available callout types. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
            public: void GetFlatPatternAllCalloutTypeDisplay
            (
                std::vector<NXOpen::SheetMetal::FlatPatternSettings::FlatPatternCalloutTypeDisplay> & displayData /** Array of structures with the callout type display data. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
