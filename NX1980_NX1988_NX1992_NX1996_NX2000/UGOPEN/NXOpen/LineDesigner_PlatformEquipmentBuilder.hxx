#ifndef NXOpen_LINEDESIGNER_PLATFORMEQUIPMENTBUILDER_HXX_INCLUDED
#define NXOpen_LINEDESIGNER_PLATFORMEQUIPMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     LineDesigner_PlatformEquipmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/KFObject.hxx>
#include <NXOpen/LineDesigner_JigOnPlaneBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/liblinedesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace LineDesigner
    {
        class PlatformEquipmentBuilder;
    }
    class Builder;
    class Expression;
    class KFObject;
    namespace LineDesigner
    {
        class JigOnPlaneBuilder;
    }
    class Section;
    namespace LineDesigner
    {
        class _PlatformEquipmentBuilderBuilder;
        class PlatformEquipmentBuilderImpl;
        /**  
            
            
            
            
            
             <br> To create a new instance of this class, use @link NXOpen::LineDesigner::LineDesignerManager::CreatePlatformEquipmentBuilder  NXOpen::LineDesigner::LineDesignerManager::CreatePlatformEquipmentBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        AddRailingToggle </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        DeckCeilingHeightForCenterline.Value </term> <description> 
         
        9000 (millimeters part), 354.5 (inches part) </description> </item> 

        <item><term> 
         
        DeckCeilingHeightForPolyline.Value </term> <description> 
         
        9000 (millimeters part), 354.5 (inches part) </description> </item> 

        <item><term> 
         
        DeckElevationForCenterline.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        DeckElevationForPolyline.Value </term> <description> 
         
        0 (millimeters part), 0 (inches part) </description> </item> 

        <item><term> 
         
        DeckHeightForCenterline.Value </term> <description> 
         
        525 (millimeters part), 21 (inches part) </description> </item> 

        <item><term> 
         
        DeckHeightForPolyline.Value </term> <description> 
         
        1750 (millimeters part), 68.9 (inches part) </description> </item> 

        <item><term> 
         
        DeckLengthForCenterline.Value </term> <description> 
         
        2540 (millimeters part), 100 (inches part) </description> </item> 

        <item><term> 
         
        DeckSupportEnum </term> <description> 
         
        NoSupports </description> </item> 

        <item><term> 
         
        DeckThicknessForCenterline.Value </term> <description> 
         
        300 (millimeters part), 12 (inches part) </description> </item> 

        <item><term> 
         
        DeckThicknessForPolyline.Value </term> <description> 
         
        300 (millimeters part), 12 (inches part) </description> </item> 

        <item><term> 
         
        DeckWidthForCenterline.Value </term> <description> 
         
        2438 (millimeters part), 96 (inches part) </description> </item> 

        <item><term> 
         
        DeckingMaterial </term> <description> 
         
        MetalGrate </description> </item> 

        <item><term> 
         
        DistanceFromCenterline.Value </term> <description> 
         
        660 (millimeters part), 26 (inches part) </description> </item> 

        <item><term> 
         
        HorizontalGridSpacing.Value </term> <description> 
         
        4000 (millimeters part), 157.5 (inches part) </description> </item> 

        <item><term> 
         
        OutlineEnum </term> <description> 
         
        Polyline </description> </item> 

        <item><term> 
         
        SideFromCenterlineEnum </term> <description> 
         
        RightTopSide </description> </item> 

        <item><term> 
         
        SupportsFromCeiling </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        TypeEnum </term> <description> 
         
        Platform </description> </item> 

        <item><term> 
         
        VerticalGridSpacing.Value </term> <description> 
         
        3200 (millimeters part), 126 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX9.0.0.  <br>  
        */
        class LINEDESIGNEROPENCPPEXPORT  PlatformEquipmentBuilder : public NXOpen::Builder
        {
            /** This enum is providing possible platform types */
            public: enum TypeAPI
            {
                TypeAPIPlatform/** platform */ ,
                TypeAPIMezzanine/** mezzanine */ 
            };

            /** This enum is providing possible outline types */
            public: enum OutlineTypeAPI
            {
                OutlineTypeAPIPolyline/** polyline */ ,
                OutlineTypeAPICenterline/** centerline */ 
            };

            /** This enum is providing possible sides for centerline outline type */
            public: enum SideFromCenterlineTypeAPI
            {
                SideFromCenterlineTypeAPIRightTopSide/** right top side */ ,
                SideFromCenterlineTypeAPILeftBottomSide/** left bottom side */ 
            };

            /** This enum is providing possible deck support types  */
            public: enum DeckSupportTypeAPI
            {
                DeckSupportTypeAPINoSupports/** no supports */ ,
                DeckSupportTypeAPICornersSupportsOnly/** corners supports only */ ,
                DeckSupportTypeAPIAutomaticSupportinGridPattern/** automatic supportin grid pattern */ ,
                DeckSupportTypeAPIManualSupports/** manual supports */ 
            };

            /** This enum is providing possible deck material type  */
            public: enum DeckingMaterialTypeAPI
            {
                DeckingMaterialTypeAPIMetalGrate/** metal grate */ ,
                DeckingMaterialTypeAPICheckerPlate/** checker plate */ 
            };

            private: PlatformEquipmentBuilderImpl * m_platformequipmentbuilder_impl;
            private: friend class  _PlatformEquipmentBuilderBuilder;
            protected: PlatformEquipmentBuilder();
            public: ~PlatformEquipmentBuilder();
            /**Returns  the platform type enum 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::LineDesigner::PlatformEquipmentBuilder::TypeAPI TypeEnum
            (
            );
            /**Sets  the platform type enum 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetTypeEnum
            (
                NXOpen::LineDesigner::PlatformEquipmentBuilder::TypeAPI typeEnum /** typeenum */ 
            );
            /**Returns  the outline type enum 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::LineDesigner::PlatformEquipmentBuilder::OutlineTypeAPI OutlineEnum
            (
            );
            /**Sets  the outline type enum 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetOutlineEnum
            (
                NXOpen::LineDesigner::PlatformEquipmentBuilder::OutlineTypeAPI outlineEnum /** outlineenum */ 
            );
            /**Returns  the Centerlinejig on plane builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::LineDesigner::JigOnPlaneBuilder * CenterlineJigOnPlane
            (
            );
            /**Sets  the Centerlinejig on plane builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetCenterlineJigOnPlane
            (
                NXOpen::LineDesigner::JigOnPlaneBuilder * centerlineJigOnPlane /** centerlinejigonplane */ 
            );
            /**Returns  the distance of platform from centerline 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DistanceFromCenterline
            (
            );
            /**Returns  the side from center line  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::LineDesigner::PlatformEquipmentBuilder::SideFromCenterlineTypeAPI SideFromCenterlineEnum
            (
            );
            /**Sets  the side from center line  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetSideFromCenterlineEnum
            (
                NXOpen::LineDesigner::PlatformEquipmentBuilder::SideFromCenterlineTypeAPI sideFromCenterlineEnum /** sidefromcenterlineenum */ 
            );
            /**Returns  the deck length for centerline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckLengthForCenterline
            (
            );
            /**Returns  the deck width for centerline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckWidthForCenterline
            (
            );
            /**Returns  the deck height for centerline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckHeightForCenterline
            (
            );
            /**Returns  the deck elevation for centerline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckElevationForCenterline
            (
            );
            /**Returns  the deck thickness for centerline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckThicknessForCenterline
            (
            );
            /**Returns  the deck ceiling height for centerline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckCeilingHeightForCenterline
            (
            );
            /**Returns  the polyline section for platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Section * PolylineSuperSection
            (
            );
            /**Returns the deck height for polyline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckHeightForPolyline
            (
            );
            /**Returns  the deck elevation for polyline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckElevationForPolyline
            (
            );
            /**Returns  the deck thickness for polyline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckThicknessForPolyline
            (
            );
            /**Returns  the deck ceiling height for polyline platform 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * DeckCeilingHeightForPolyline
            (
            );
            /**Returns  the deck support type for platform
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::LineDesigner::PlatformEquipmentBuilder::DeckSupportTypeAPI DeckSupportEnum
            (
            );
            /**Sets  the deck support type for platform
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetDeckSupportEnum
            (
                NXOpen::LineDesigner::PlatformEquipmentBuilder::DeckSupportTypeAPI deckSupportEnum /** decksupportenum */ 
            );
            /**Returns  the vertical grid spacing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * VerticalGridSpacing
            (
            );
            /**Returns  the horizontal grid spacing 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::Expression * HorizontalGridSpacing
            (
            );
            /**  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SupportCrossSectionButton
            (
            );
            /**Returns  the option to check , if supports are from ceiling 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool SupportsFromCeiling
            (
            );
            /**Sets  the option to check , if supports are from ceiling 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetSupportsFromCeiling
            (
                bool supportsFromCeiling /** supportsfromceiling */ 
            );
            /**Returns  the decking material 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::LineDesigner::PlatformEquipmentBuilder::DeckingMaterialTypeAPI DeckingMaterial
            (
            );
            /**Sets  the decking material 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetDeckingMaterial
            (
                NXOpen::LineDesigner::PlatformEquipmentBuilder::DeckingMaterialTypeAPI deckingMaterial /** deckingmaterial */ 
            );
            /**Returns  the railing toggle to check railing is prsent for platform or not
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool AddRailingToggle
            (
            );
            /**Sets  the railing toggle to check railing is prsent for platform or not
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetAddRailingToggle
            (
                bool addRailingToggle /** addrailingtoggle */ 
            );
            /**Returns  the kf object 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: NXOpen::KFObject * KfObject
            (
            );
            /**Returns  the platform height updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool StatusOfPlatformHeightUpdation
            (
            );
            /**Sets  the platform height updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetStatusOfPlatformHeightUpdation
            (
                bool statusOfPlatformHeightUpdation /** statusofplatformheightupdation */ 
            );
            /**Returns  the platform elevation updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool StatusOfPlatformElevationUpdation
            (
            );
            /**Sets  the platform elevation updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetStatusOfPlatformElevationUpdation
            (
                bool statusOfPlatformElevationUpdation /** statusofplatformelevationupdation */ 
            );
            /**Returns  the platform ceiling height updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool StatusOfPlatformCeilingHeightUpdation
            (
            );
            /**Sets  the platform ceiling height updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetStatusOfPlatformCeilingHeightUpdation
            (
                bool statusOfPlatformCeilingHeightUpdation /** statusofplatformceilingheightupdation */ 
            );
            /**Returns  the platform thickness updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool StatusOfPlatformThicknessUpdation
            (
            );
            /**Sets  the platform thickness updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetStatusOfPlatformThicknessUpdation
            (
                bool statusOfPlatformThicknessUpdation /** statusofplatformthicknessupdation */ 
            );
            /**Returns  the platform supportDefaultFromCeilingToggle updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool StatusOfPlatformSupportDefaultFromCeilingToggleUpdation
            (
            );
            /**Sets  the platform supportDefaultFromCeilingToggle updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetStatusOfPlatformSupportDefaultFromCeilingToggleUpdation
            (
                bool statusOfPlatformSupportDefaultFromCeilingToggleUpdation /** statusofplatformsupportdefaultfromceilingtoggleupdation */ 
            );
            /**Returns  the platform supportOption updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool StatusOfPlatformSupportOptionUpdation
            (
            );
            /**Sets  the platform supportOption updation status 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetStatusOfPlatformSupportOptionUpdation
            (
                bool statusOfPlatformSupportOptionUpdation /** statusofplatformsupportoptionupdation */ 
            );
            /**Returns  the issketchiInternal  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: bool IsSketchInternal
            (
            );
            /**Sets  the issketchiInternal  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ld_line_designer ("FULL LINE DESIGNER") */
            public: void SetSketchInternal
            (
                bool makeSketchInternal /** makesketchinternal */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
