#ifndef NXOpen_AME_SYMBOLANNOTATIONS_HXX_INCLUDED
#define NXOpen_AME_SYMBOLANNOTATIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_SymbolAnnotations.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        /** Represents height of symbol annotation 
         <br>  Created in NX1847.0.0.  <br>  
        */
        enum Height
        {
            HeightTwo/** Height = 2    */,
            HeightTwopointfive/** Height = 2.5  */,
            HeightThreepointfive/** Height = 3.5  */,
            HeightFive/** Height = 5    */,
            HeightSeven/** Height = 7    */,
            HeightTen/** Height = 10   */,
            HeightForteen/** Height = 14   */,
            HeightTwenty/** Height = 20   */,
            HeightSeventy/** Height = 70   */,
            HeightHundred/** Height = 100  */,
            HeightOnehundredforty/** Height = 140  */,
            HeightTwohundred/** Height = 200  */,
            HeightTwohundredfifty/** Height = 250  */
        };

        /** Represents justification of annotation */
        enum AmeSymbolAnnotationJustification
        {
            AmeSymbolAnnotationJustificationLeft/** left */ ,
            AmeSymbolAnnotationJustificationCenter/** center */ ,
            AmeSymbolAnnotationJustificationRight/** right */ 
        };

        /** Represents lettering angle of annotation */
        enum AmeSymbolAnnotationLetteringangle
        {
            AmeSymbolAnnotationLetteringangleDegree0/** degree0 */ ,
            AmeSymbolAnnotationLetteringangleDegree45/** degree45 */ ,
            AmeSymbolAnnotationLetteringangleDegree90/** degree90 */ ,
            AmeSymbolAnnotationLetteringangleDegree135/** degree135 */ ,
            AmeSymbolAnnotationLetteringangleDegree180/** degree180 */ ,
            AmeSymbolAnnotationLetteringangleDegree270/** degree270 */ ,
            AmeSymbolAnnotationLetteringangleDegree315/** degree315 */ 
        };

        /** Represents anchor of annotation */
        enum AmeSymbolAnnotationAnchor
        {
            AmeSymbolAnnotationAnchorTopLeft/** top left */ ,
            AmeSymbolAnnotationAnchorTopCenter/** top center */ ,
            AmeSymbolAnnotationAnchorTopRight/** top right */ ,
            AmeSymbolAnnotationAnchorMiddleLeft/** middle left */ ,
            AmeSymbolAnnotationAnchorMiddleCenter/** middle center */ ,
            AmeSymbolAnnotationAnchorMiddleRight/** middle right */ ,
            AmeSymbolAnnotationAnchorBottomLeft/** bottom left */ ,
            AmeSymbolAnnotationAnchorBottomCenter/** bottom center */ ,
            AmeSymbolAnnotationAnchorBottomRight/** bottom right */ 
        };

        /** Represents type of annotation */
        enum AmeSymbolAnnotationType
        {
            AmeSymbolAnnotationTypeProperties/** properties */ ,
            AmeSymbolAnnotationTypeContactBlock/** contact block */ 
        };

        /** Represents type of reference property */
        enum AmeSymbolAnnotationPropertytype
        {
            AmeSymbolAnnotationPropertytypeObjectProperties/** object properties */ ,
            AmeSymbolAnnotationPropertytypeCrossReferences/** cross references */ ,
            AmeSymbolAnnotationPropertytypeAspectProperties/** aspect properties */ 
        };

        /** Represents type of contact block */
        enum AmeSymbolAnnotationContactblock
        {
            AmeSymbolAnnotationContactblockInPath/** in path */ ,
            AmeSymbolAnnotationContactblockOnComponent/** on component */ 
        };

        /** Represents AttributeSource */
        enum AmeSymbolAnnotationAttributesource
        {
            AmeSymbolAnnotationAttributesourceUnknown/** Should not be used */ = -1,
            AmeSymbolAnnotationAttributesourceType/** type */ ,
            AmeSymbolAnnotationAttributesourceProduct/** product */ ,
            AmeSymbolAnnotationAttributesourceGeneral/** general */ ,
            AmeSymbolAnnotationAttributesourceAspectFunction/** aspect function */ ,
            AmeSymbolAnnotationAttributesourceAspectLocation/** aspect location */ ,
            AmeSymbolAnnotationAttributesourceAspectProduct/** aspect product */ ,
            AmeSymbolAnnotationAttributesourceCrossReference/** cross reference */ 
        };

        /** Represents text overflow method*/
        enum AmeSymbolAnnotationTextOverflowMethod
        {
            AmeSymbolAnnotationTextOverflowMethodDefault/** default */ ,
            AmeSymbolAnnotationTextOverflowMethodWrap/** wrap */ ,
            AmeSymbolAnnotationTextOverflowMethodTruncate/** truncate */ ,
            AmeSymbolAnnotationTextOverflowMethodOverflowborder/** overflowborder */ ,
            AmeSymbolAnnotationTextOverflowMethodSuffix/** suffix */ 
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
