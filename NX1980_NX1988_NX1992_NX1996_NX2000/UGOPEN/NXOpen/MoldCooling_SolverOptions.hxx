#ifndef NXOpen_MOLDCOOLING_SOLVEROPTIONS_HXX_INCLUDED
#define NXOpen_MOLDCOOLING_SOLVEROPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MoldCooling_SolverOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_moldcooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace MoldCooling
    {
        class SolverOptions;
    }
    class NXObject;
    namespace MoldCooling
    {
        class _SolverOptionsBuilder;
        class SolverOptionsImpl;
        /** Represents the solver options for the mold cooling analysis  <br> No Creator.  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_MOLDCOOLINGEXPORT  SolverOptions : public NXOpen::NXObject
        {
            private: SolverOptionsImpl * m_solveroptions_impl;
            private: friend class  _SolverOptionsBuilder;
            protected: SolverOptions();
            public: ~SolverOptions();
            /**Returns  the option to keep all analysis generated files 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool KeepAllFiles
            (
            );
            /**Sets  the option to keep all analysis generated files 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetKeepAllFiles
            (
                bool keepAllFiles /** keepallfiles */ 
            );
            /**Returns  the option to run the analysis in parallel 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ParallelRun
            (
            );
            /**Sets  the option to run the analysis in parallel 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetParallelRun
            (
                bool parallelRun /** parallelrun */ 
            );
            /**Returns  the number of processors to use for the parallel run 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int NumProcessors
            (
            );
            /**Sets  the number of processors to use for the parallel run 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_mold_cool_basic (" NX Mold Cooling Application") */
            public: void SetNumProcessors
            (
                int numProcessors /** numprocessors */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
