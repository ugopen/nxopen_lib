#ifndef NXOpen_ATTRIBUTEPROPERTIESBUILDER_HXX_INCLUDED
#define NXOpen_ATTRIBUTEPROPERTIESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AttributePropertiesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AttributePropertiesBaseBuilder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class AttributePropertiesBuilder;
    class AttributePropertiesBaseBuilder;
    class _AttributePropertiesBuilderBuilder;
    class AttributePropertiesBuilderImpl;
    /**
           Represents an @link NXOpen::AttributePropertiesBuilder NXOpen::AttributePropertiesBuilder@endlink . Input to this class can be PSM facet objects.
         <br> To create a new instance of this class, use @link NXOpen::AttributeManager::CreateAttributePropertiesBuilder  NXOpen::AttributeManager::CreateAttributePropertiesBuilder @endlink  <br> 
    Default values.
    <list type="table"> 
     
    <listheader><term> 
    Property</term>  <description> 
    Value</description> </listheader>
    <item><term> 
     
    BooleanValue </term> <description> 
     
    False </description> </item> 

    <item><term> 
     
    DataType </term> <description> 
     
    String </description> </item> 

    <item><term> 
     
    IntegerValue </term> <description> 
     
    0 </description> </item> 

    <item><term> 
     
    NumberValue </term> <description> 
     
    0 </description> </item> 

    <item><term> 
     
    ObjectPicker (deprecated) </term> <description> 
     
    Object </description> </item> 

    </list> 

     <br>  Created in NX8.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  AttributePropertiesBuilder : public NXOpen::AttributePropertiesBaseBuilder
    {
        /** It is used to determine the behaviors of attributes that has been mapped from TC,
                such as Hidden, Required, CopyFromOriginal, etc. Mapped attributes can be from Hardwired Attributes, Create Descriptor, Revise Descriptor or attribute mapping file.
                Proper operation type should be set when applicable, otherwise the system may not behave correctly.
                For example, if you ask if an attribute is required or not with OpType "None", it will always say No. But the same attribute may be required for
                "Create", or "Save As" or "Revise", etc. So Attribute templates from Teamcenter are able to force different behaviors on attributes based on
                whether they are being shown in item creation, edit or saveAs.*/
        public: enum OperationType
        {
            OperationTypeNone/**None. This should be chosen if attribute is not required for the operation.  */ = -1,
            OperationTypeCreate/**Create. This should be chosen if attribute is required for create operation. */,
            OperationTypeRevise/**Revise. This should be chosen if attribute is required for revise operation.  */,
            OperationTypeSaveAs/**SaveAs. This should be chosen if attribute is required for Save As operation. */,
            OperationTypeSave/**Save. This should be chosen if attribute is required for save operation. */,
            OperationTypeDelete/**Delete. This should be chosen if attribute is required for delete operation. */
        };

        private: AttributePropertiesBuilderImpl * m_attributepropertiesbuilder_impl;
        private: friend class  _AttributePropertiesBuilderBuilder;
        protected: AttributePropertiesBuilder();
        public: ~AttributePropertiesBuilder();
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
