#ifndef NXOpen_SKETCHPOLYGONBUILDER_HXX_INCLUDED
#define NXOpen_SKETCHPOLYGONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchPolygonBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SketchPolygonBuilder;
    class Builder;
    class Expression;
    class Point;
    class _SketchPolygonBuilderBuilder;
    class SketchPolygonBuilderImpl;
    /** Represents a @link NXOpen::SketchPolygon NXOpen::SketchPolygon@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::SketchCollection::CreateSketchPolygonBuilder  NXOpen::SketchCollection::CreateSketchPolygonBuilder @endlink  <br> 
    Default values.
    <list type="table"> 
     
    <listheader><term> 
    Property</term>  <description> 
    Value</description> </listheader>
    <item><term> 
     
    CreateConstraint </term> <description> 
     
    True </description> </item> 

    <item><term> 
     
    LengthDimension.Value </term> <description> 
     
    100 (millimeters part), 3.937 (inches part) </description> </item> 

    <item><term> 
     
    NumberOfSides </term> <description> 
     
    6 </description> </item> 

    <item><term> 
     
    RadiusDimension.Value </term> <description> 
     
    100 (millimeters part), 3.937 (inches part) </description> </item> 

    <item><term> 
     
    RotationDimension.Value </term> <description> 
     
    0 </description> </item> 

    <item><term> 
     
    Size </term> <description> 
     
    InscribedRadius </description> </item> 

    </list> 

     <br>  Created in NX7.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  SketchPolygonBuilder : public NXOpen::Builder
    {
        /** Polygon type */
        public: enum SizeType
        {
            SizeTypeInscribedRadius/** inscribed radius */,
            SizeTypeCircumscribedRadius/** circumscribed radius */,
            SizeTypeSideLength/** side length */
        };

        private: SketchPolygonBuilderImpl * m_sketchpolygonbuilder_impl;
        private: friend class  _SketchPolygonBuilderBuilder;
        protected: SketchPolygonBuilder();
        public: ~SketchPolygonBuilder();
        /**Returns  the center point 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point * CenterPoint
        (
        );
        /**Sets  the center point 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetCenterPoint
        (
            NXOpen::Point * centerPoint /** centerpoint */ 
        );
        /**Returns  the number of sides 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: int NumberOfSides
        (
        );
        /**Sets  the number of sides 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetNumberOfSides
        (
            int numberOfSides /** numberofsides */ 
        );
        /**Returns  the size point 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point * SizePoint
        (
        );
        /**Sets  the size point 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetSizePoint
        (
            NXOpen::Point * sizePoint /** sizepoint */ 
        );
        /**Returns  the size type 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::SketchPolygonBuilder::SizeType Size
        (
        );
        /**Sets  the size type 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetSize
        (
            NXOpen::SketchPolygonBuilder::SizeType size /** size */ 
        );
        /**Returns  the radius dimension.   This value is only used if @link NXOpen::SketchPolygonBuilder::Size NXOpen::SketchPolygonBuilder::Size@endlink  is set 
                    to @link NXOpen::SketchPolygonBuilder::SizeTypeInscribedRadius NXOpen::SketchPolygonBuilder::SizeTypeInscribedRadius@endlink  or @link NXOpen::SketchPolygonBuilder::SizeTypeCircumscribedRadius NXOpen::SketchPolygonBuilder::SizeTypeCircumscribedRadius@endlink 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * RadiusDimension
        (
        );
        /**Returns  the length dimension.  This value is only used if @link NXOpen::SketchPolygonBuilder::Size NXOpen::SketchPolygonBuilder::Size@endlink  is set to @link NXOpen::SketchPolygonBuilder::SizeTypeSideLength NXOpen::SketchPolygonBuilder::SizeTypeSideLength@endlink 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * LengthDimension
        (
        );
        /**Returns  the angular dimension 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Expression * RotationDimension
        (
        );
        /** The flag to indicate if we need to create length dimension 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void CreateLengthDimension
        (
            bool createDim /** true, to create the length dimension */
        );
        /** The flag to indicate if we need to create radius dimension 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void CreateRadiusDimension
        (
            bool createDim /** true, to create the radius dimension */
        );
        /** The flag to indicate if we need to create angle dimension 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void CreateAngleDimension
        (
            bool createDim /** true, to create the angle dimension */
        );
        /**Returns  the flag to indicate if the constraint needs to be created 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: bool CreateConstraint
        (
        );
        /**Sets  the flag to indicate if the constraint needs to be created 
         <br>  Created in NX1899.0.0.  <br>  
         <br> License requirements : None */
        public: void SetCreateConstraint
        (
            bool constraintCreation /** constraintcreation */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
