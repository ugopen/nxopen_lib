#ifndef NXOpen_SKETCHPATTERNBUILDER_HXX_INCLUDED
#define NXOpen_SKETCHPATTERNBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SketchPatternBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_PatternDefinition.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SketchPatternBuilder;
    class Builder;
    namespace GeometricUtilities
    {
        class PatternDefinition;
    }
    class NXObject;
    class Section;
    class _SketchPatternBuilderBuilder;
    class SketchPatternBuilderImpl;
    /**
        Represents a @link NXOpen::SketchPatternBuilder NXOpen::SketchPatternBuilder@endlink 
         <br> To create a new instance of this class, use @link NXOpen::SketchCollection::CreateSketchPatternBuilder  NXOpen::SketchCollection::CreateSketchPatternBuilder @endlink  <br> 
    Default values.
    <list type="table"> 
     
    <listheader><term> 
    Property</term>  <description> 
    Value</description> </listheader>
    <item><term> 
     
    CreateConstraint </term> <description> 
     
    True </description> </item> 

    <item><term> 
     
    CreateSpacingExp </term> <description> 
     
    True </description> </item> 

    <item><term> 
     
    LockOrientation </term> <description> 
     
    True </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.Value </term> <description> 
     
    2 </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType </term> <description> 
     
    Offset </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.XPathOption </term> <description> 
     
    Offset </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.YDirectionOption </term> <description> 
     
    Section </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.Value </term> <description> 
     
    1 </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.YPathOption </term> <description> 
     
    Offset </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.YSpacing.NCopies.Value </term> <description> 
     
    1 </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.YSpacing.PitchDistance.Value </term> <description> 
     
    10 (millimeters part), 1 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.YSpacing.SpaceType </term> <description> 
     
    Offset </description> </item> 

    <item><term> 
     
    PatternService.AlongPathDefinition.YSpacing.SpanDistance.Value </term> <description> 
     
    100 (millimeters part), 10 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.AngularSpacing.NCopies.Value </term> <description> 
     
    12 </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.AngularSpacing.PitchAngle.Value </term> <description> 
     
    30 </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.AngularSpacing.PitchDistance.Value </term> <description> 
     
    10 (millimeters part), 1 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.AngularSpacing.SpaceType </term> <description> 
     
    Offset </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.AngularSpacing.SpanAngle.Value </term> <description> 
     
    360 (millimeters part), 360 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.AngularSpacing.UsePitchOption </term> <description> 
     
    Angle </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.CreateLastStaggered </term> <description> 
     
    true </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.HorizontalRef.RotationAngle.Value </term> <description> 
     
    0 (millimeters part), 0 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.IncludeSeedToggle </term> <description> 
     
    true </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.RadialSpacing.NCopies.Value </term> <description> 
     
    1 </description> </item> 

    <item><term> 
     
    PatternService.CircularDefinition.StaggerType </term> <description> 
     
    None </description> </item> 

    <item><term> 
     
    PatternService.HelixDefinition.AnglePitch.Value </term> <description> 
     
    30 </description> </item> 

    <item><term> 
     
    PatternService.HelixDefinition.CountOfInstances.Value </term> <description> 
     
    6 </description> </item> 

    <item><term> 
     
    PatternService.HelixDefinition.DirectionType </term> <description> 
     
    Righthand </description> </item> 

    <item><term> 
     
    PatternService.HelixDefinition.DistancePitch.Value </term> <description> 
     
    10 (millimeters part), 0.4 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.HelixDefinition.HelixPitch.Value </term> <description> 
     
    50 (millimeters part), 2 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.HelixDefinition.HelixSpan.Value </term> <description> 
     
    100 (millimeters part), 4 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.HelixDefinition.NumberOfTurns.Value </term> <description> 
     
    2 </description> </item> 

    <item><term> 
     
    PatternService.HelixDefinition.SizeOption </term> <description> 
     
    CountAngleDistance </description> </item> 

    <item><term> 
     
    PatternService.PatternFill.FillMargin.Value </term> <description> 
     
    0 (millimeters part), 0 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.PatternFill.FillOptions </term> <description> 
     
    None </description> </item> 

    <item><term> 
     
    PatternService.PatternFill.SimplifiedBoundaryToggle </term> <description> 
     
    False </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.AlongOrientationOption </term> <description> 
     
    NormalToPath </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.CircularOrientationOption </term> <description> 
     
    FollowPattern </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.FollowFaceProjDirOption </term> <description> 
     
    PatternPlaneNormal </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.GeneralOrientationOption </term> <description> 
     
    Fixed </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.HelixOrientationOption </term> <description> 
     
    FollowPattern </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.LinearOrientationOption </term> <description> 
     
    Fixed </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.MirrorOrientationOption </term> <description> 
     
    FollowPattern </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.OrientationOption </term> <description> 
     
    Fixed </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.PolygonOrientationOption </term> <description> 
     
    FollowPattern </description> </item> 

    <item><term> 
     
    PatternService.PatternOrientation.SpiralOrientationOption </term> <description> 
     
    FollowPattern </description> </item> 

    <item><term> 
     
    PatternService.PatternType </term> <description> 
     
    Linear </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.NumberOfSides.Value </term> <description> 
     
    6 </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.PolygonSizeOption </term> <description> 
     
    Inscribed </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.PolygonSpacing.NCopies.Value </term> <description> 
     
    4 </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.PolygonSpacing.PitchDistance.Value </term> <description> 
     
    25 (millimeters part), 1 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.PolygonSpacing.SpaceType </term> <description> 
     
    Offset </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.PolygonSpacing.SpanAngle.Value </term> <description> 
     
    360 </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.RadialSpacing.NCopies.Value </term> <description> 
     
    1 </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.RadialSpacing.PitchDistance.Value </term> <description> 
     
    25 (millimeters part), 1 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.PolygonDefinition.RadialSpacing.SpanDistance.Value </term> <description> 
     
    100 (millimeters part), 4 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.RectangularDefinition.CreateLastStaggered </term> <description> 
     
    true </description> </item> 

    <item><term> 
     
    PatternService.RectangularDefinition.SimplifiedLayoutType </term> <description> 
     
    Square </description> </item> 

    <item><term> 
     
    PatternService.RectangularDefinition.StaggerType </term> <description> 
     
    None </description> </item> 

    <item><term> 
     
    PatternService.RectangularDefinition.XSpacing.NCopies.Value </term> <description> 
     
    2 </description> </item> 

    <item><term> 
     
    PatternService.RectangularDefinition.YSpacing.NCopies.Value </term> <description> 
     
    1 </description> </item> 

    <item><term> 
     
    PatternService.SpiralDefinition.DirectionType </term> <description> 
     
    Lefthand </description> </item> 

    <item><term> 
     
    PatternService.SpiralDefinition.NumberOfTurns.Value </term> <description> 
     
    1 (millimeters part), 1 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.SpiralDefinition.RadialPitch.Value </term> <description> 
     
    50 (millimeters part), 2 (inches part) </description> </item> 

    <item><term> 
     
    PatternService.SpiralDefinition.SizeSpiralType </term> <description> 
     
    NumberOfTurns </description> </item> 

    <item><term> 
     
    PatternService.SpiralDefinition.TotalAngle.Value </term> <description> 
     
    360 (millimeters part), 360 (inches part) </description> </item> 

    </list> 

     <br>  Created in NX7.5.0.  <br>  
    */
    class NXOPENCPPEXPORT  SketchPatternBuilder : public NXOpen::Builder
    {
        private: SketchPatternBuilderImpl * m_sketchpatternbuilder_impl;
        private: friend class  _SketchPatternBuilderBuilder;
        protected: SketchPatternBuilder();
        public: ~SketchPatternBuilder();
        /**Returns  the pattern section 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Section * Section
        (
        );
        /**Returns  the pattern service 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::GeometricUtilities::PatternDefinition * PatternService
        (
        );
        /**Returns  the flag to indicate if a spacing expression needs to be created 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: bool CreateSpacingExp
        (
        );
        /**Sets  the flag to indicate if a spacing expression needs to be created 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetCreateSpacingExp
        (
            bool createSpacingExp /** createspacingexp */ 
        );
        /** This function removes end constraint from the given pattern 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: void SetEndConstraint
        (
            NXOpen::NXObject * parent /** Parent object in base chain */,
            int inx /** Index of the pattern - starts from 0 */,
            bool isStart /** TRUE, if we want to remove the start end con */,
            bool constraint /** TRUE to add the con, false to remove */
        );
        /**Returns  the flag to indicate if a spacing expression needs to be created 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: bool LockOrientation
        (
        );
        /**Sets  the flag to indicate if a spacing expression needs to be created 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : None */
        public: void SetLockOrientation
        (
            bool lockOrientation /** lockorientation */ 
        );
        /** This function updates the pattern constraint with the number of copies set in the builder 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void UpdateCopies
        (
        );
        /** This function updates the pattern constraint according to the data set in pattern section 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: void UpdateInputSection
        (
        );
        /** This function updates the pattern constraint after a new direction object is set in the builder for a linear pattern. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateLinearDirectionObject
        (
        );
        /** This function updates the pattern constraint after a new center-point is set in the builder for a circular pattern. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateCenterPoint
        (
        );
        /** This function updates the pattern constraint after direction objects are set in the builder for a rectangular pattern. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateRectangularDirectionObjects
        (
        );
        /** This function updates the pattern constraint after a new from-point is set in the builder for a general pattern. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateFromPoint
        (
        );
        /** This function will solve the pattern constraint to update it based on the new data set in the builder 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void EvaluatePattern
        (
        );
        /**Returns  the flag to indicate if the constraint needs to be created 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: bool CreateConstraint
        (
        );
        /**Sets  the flag to indicate if the constraint needs to be created 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
        public: void SetCreateConstraint
        (
            bool constraintCreation /** constraintcreation */ 
        );
        /** This function updates the pattern constraint with the changes set to the builder. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void UpdateData
        (
        );
        /** This function updates the pattern constraint after handling flip in the builder. 
         <br>  Created in NX1926.0.0.  <br>  
         <br> License requirements : None */
        public: void HandleFlip
        (
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
