#ifndef NXOpen_ROUTINGCOMMON_BUILDERFACTORY_HXX_INCLUDED
#define NXOpen_ROUTINGCOMMON_BUILDERFACTORY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     RoutingCommon_BuilderFactory.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routingcommon_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace RoutingCommon
    {
        class BuilderFactory;
    }
    namespace RoutingCommon
    {
        class RoutingManager;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Curve;
    class NXObject;
    class Part;
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class ISegment;
    }
    namespace RoutingCommon
    {
        class AssignComponentNameBuilder;
    }
    namespace RoutingCommon
    {
        class AssignCornerBuilder;
    }
    namespace RoutingCommon
    {
        class ConnectBuilder;
    }
    namespace RoutingCommon
    {
        class CreatePathBuilder;
    }
    namespace RoutingCommon
    {
        class DerivedPathBuilder;
    }
    namespace RoutingCommon
    {
        class EditPlacementBuilder;
    }
    namespace RoutingCommon
    {
        class EditPointBuilder;
    }
    namespace RoutingCommon
    {
        class InsulationBuilder;
    }
    namespace RoutingCommon
    {
        class ManageInlineBehaviorBuilder;
    }
    namespace RoutingCommon
    {
        class MergeBuilder;
    }
    namespace RoutingCommon
    {
        class MovePathBuilder;
    }
    namespace RoutingCommon
    {
        class PartPlacementBuilder;
    }
    namespace RoutingCommon
    {
        class ReparentPartsBuilder;
    }
    namespace RoutingCommon
    {
        class SimplifyCurvesBuilder;
    }
    namespace RoutingCommon
    {
        class SplineBuilder;
    }
    namespace RoutingCommon
    {
        class SplinePointBuilder;
    }
    namespace RoutingCommon
    {
        class SplitBuilder;
    }
    namespace RoutingCommon
    {
        class StockBuilder;
    }
    namespace RoutingCommon
    {
        class SubdivideCurveBuilder;
    }
    namespace RoutingCommon
    {
        class TransformBlockBuilder;
    }
    namespace RoutingCommon
    {
        class BuilderFactoryImpl;
        /** Represents an @link NXOpen::RoutingCommon::BuilderFactory NXOpen::RoutingCommon::BuilderFactory@endlink  object.  Use this object 
                to create specific routing builders.
             <br> To obtain an instance of this class, refer to @link NXOpen::RoutingCommon::RoutingManager  NXOpen::RoutingCommon::RoutingManager @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGCOMMONEXPORT  BuilderFactory
        {
            private: BuilderFactoryImpl * m_builderfactory_impl;
            private: NXOpen::RoutingCommon::RoutingManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit BuilderFactory(NXOpen::RoutingCommon::RoutingManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~BuilderFactory();
            /**  Create a @link NXOpen::RoutingCommon::InsulationBuilder NXOpen::RoutingCommon::InsulationBuilder@endlink  object. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::RoutingCommon::InsulationBuilder * CreateInsulationBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** workocc */ ,
                NXOpen::Assemblies::Component * insulationPartOccurrence /** insulationpartoccurrence */ 
            );

            /// \cond NX_NO_DOC 
            /**  Create a @link NXOpen::RoutingCommon::AssignComponentNameBuilder NXOpen::RoutingCommon::AssignComponentNameBuilder@endlink  object. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::AssignComponentNameBuilder * CreateAssignComponentNameBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** workocc */ 
            );

            /// \endcond 
            /**  Create a @link NXOpen::RoutingCommon::SubdivideCurveBuilder NXOpen::RoutingCommon::SubdivideCurveBuilder@endlink  object.  @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::SubdivideCurveBuilder * CreateSubdivideCurveBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::NXObject * segment /** Routing segment to be subdivided */,
                const NXOpen::Point3d & pickPoint /** Location on the segment picked by the user */
            );
            /**  Create a @link NXOpen::RoutingCommon::SimplifyCurvesBuilder NXOpen::RoutingCommon::SimplifyCurvesBuilder@endlink  object.  @return  
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::SimplifyCurvesBuilder * CreateSimplifyCurvesBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::Assemblies::Component * workOcc /** the container component within which simplify is being done. It can be passed as null tag when not working in context. */,
                const std::vector<NXOpen::Routing::ISegment *> & segments /** Routing segments to combine */
            );
            /**  Creates a @link NXOpen::RoutingCommon::StockBuilder NXOpen::RoutingCommon::StockBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::StockBuilder * CreateStockBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component within which stock is being created */,
                const std::vector<NXOpen::NXObject *> & segmentsOrStocks /** Occurrences of Routing segments to assign
                                                                                                                    stock to or stock to be edited */
            );
            /**  Creates a @link NXOpen::RoutingCommon::SplitBuilder NXOpen::RoutingCommon::SplitBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::SplitBuilder * CreateSplitBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                const std::vector<NXOpen::Routing::ControlPoint *> & controlPoints /** selected Control Points for split stock components */
            );
            /**  Creates a @link NXOpen::RoutingCommon::ConnectBuilder NXOpen::RoutingCommon::ConnectBuilder@endlink  object. 
             <br>  @deprecated Deprecated in NX1847.0.0.  This method is no longer required. Use overloaded version of this method <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  This method is no longer required. Use overloaded version of this method") NXOpen::RoutingCommon::ConnectBuilder * CreateConnectBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                const std::vector<NXOpen::Assemblies::Component *> & components /** selected Components for Connect Path */
            );
            /**  Creates a @link NXOpen::RoutingCommon::ConnectBuilder NXOpen::RoutingCommon::ConnectBuilder@endlink  object. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::ConnectBuilder * CreateConnectBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component is part occ of subset/workpart in the workset/displayed part. It can be passed as null tag when not working in context. */,
                const std::vector<NXOpen::Assemblies::Component *> & components /** selected Components for Connect Path */
            );
            /**  Creates a @link NXOpen::RoutingCommon::MergeBuilder NXOpen::RoutingCommon::MergeBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::MergeBuilder * CreateMergeBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component within which merge stock is being performed. It can be passed as null tag when not working in context. */
            );
            /**  Create a @link NXOpen::RoutingCommon::MovePathBuilder NXOpen::RoutingCommon::MovePathBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::MovePathBuilder * CreateMovePathBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component within which move is performed. Can be NULL when work part is same as displayed part */
            );
            /**  Create a @link NXOpen::RoutingCommon::EditPointBuilder NXOpen::RoutingCommon::EditPointBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::EditPointBuilder * CreateEditPointBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component within which edit point is being performed. It can be passed as null tag when not working in context. */
            );
            /**  Create a @link NXOpen::RoutingCommon::TransformBlockBuilder NXOpen::RoutingCommon::TransformBlockBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::TransformBlockBuilder * CreateTransformBlockBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Creates a @link NXOpen::RoutingCommon::AssignCornerBuilder NXOpen::RoutingCommon::AssignCornerBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::AssignCornerBuilder * CreateAssignCornerBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component within which bend is being created. It can be passed as null tag when not working in context. */
            );
            /**  Create a @link NXOpen::RoutingCommon::CreatePathBuilder NXOpen::RoutingCommon::CreatePathBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::CreatePathBuilder * CreatePathBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component within which stock is being created */
            );
            /**  Creates a @link NXOpen::RoutingCommon::PartPlacementBuilder NXOpen::RoutingCommon::PartPlacementBuilder@endlink  object. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::PartPlacementBuilder * CreatePartPlacementBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component within which placement is being performed. It can be passed as null tag when not working in context. */
            );
            /**  Creates a @link NXOpen::RoutingCommon::EditPlacementBuilder NXOpen::RoutingCommon::EditPlacementBuilder@endlink  object. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::EditPlacementBuilder * CreateEditPlacementBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component within which edit is being performed. It can be passed as null tag when not working in context. */
            );
            /**  Creates a @link NXOpen::RoutingCommon::ManageInlineBehaviorBuilder NXOpen::RoutingCommon::ManageInlineBehaviorBuilder@endlink  object. 
             <br>  @deprecated Deprecated in NX1847.0.0.  This method is no longer required. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  This method is no longer required.") NXOpen::RoutingCommon::ManageInlineBehaviorBuilder * CreateManageInlineBehaviorBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );
            /**  Creates a @link NXOpen::RoutingCommon::ManageInlineBehaviorBuilder NXOpen::RoutingCommon::ManageInlineBehaviorBuilder@endlink  object. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::ManageInlineBehaviorBuilder * CreateManageInlineBehaviorBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::Assemblies::Component * workOcc /** the container component is part occ of subset/workpart in the workset/displayed part. It can be passed as null tag when not working in context. */
            );

            /// \cond NX_NO_DOC 
            /**  Create a @link NXOpen::RoutingCommon::SplineBuilder  NXOpen::RoutingCommon::SplineBuilder @endlink  object.  @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::SplineBuilder * CreateSplineBuilder
            (
                NXOpen::Part * part /** the part associated with the current work part. Cannot be NULL. */,
                NXOpen::Part * rootpart /** the part associated with the current display part. Cannot be NULL. */,
                NXOpen::Assemblies::Component * activePathComp /** the Active Path Component associated with the current display part. Cannot be NULL. */,
                NXOpen::Curve * spline /** The spline to edit. */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a @link NXOpen::RoutingCommon::SplinePointBuilder NXOpen::RoutingCommon::SplinePointBuilder@endlink  which creates extensions.  @return  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::SplinePointBuilder * CreateSplinePointBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */,
                NXOpen::RoutingCommon::SplineBuilder * splineBuilder /** the spline builder associated with the builder. Can be NULL. */
            );

            /// \endcond 
            /**  Create a @link NXOpen::RoutingCommon::ReparentPartsBuilder NXOpen::RoutingCommon::ReparentPartsBuilder@endlink  object. 
             <br>  Created in NX1899.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::ReparentPartsBuilder * CreateReparentPartsBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );

            /// \cond NX_NO_DOC 
            /**  Create a @link NXOpen::RoutingCommon::DerivedPathBuilder NXOpen::RoutingCommon::DerivedPathBuilder@endlink  object. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::RoutingCommon::DerivedPathBuilder * CreateDerivedPathBuilder
            (
                NXOpen::Part * part /** the part associated with the builder. Cannot be NULL. */
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
