#ifndef NXOpen_FEATURES_SYMMETRICBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SYMMETRICBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SymmetricBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FaceRecognitionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class SymmetricBuilder;
    }
    namespace Features
    {
        class FaceRecognitionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    class Plane;
    class SelectFace;
    class SelectISurface;
    namespace Features
    {
        class _SymmetricBuilderBuilder;
        class SymmetricBuilderImpl;
        /** Represents a @link NXOpen::Features::Symmetric NXOpen::Features::Symmetric@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateSymmetricBuilder  NXOpen::Features::FeatureCollection::CreateSymmetricBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        MoveAlongFace.CloneEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.CoaxialEnabled </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        MoveAlongFace.CoplanarAxesEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.CoplanarEnabled </term> <description> 
         
        True </description> </item> 

        <item><term> 
         
        MoveAlongFace.EqualDiameterEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.OffsetEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.ParallelEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.PatternEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.PerpendicularEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.SameEntryEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.SameEntrySurfaceEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.SameOrbitEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.SymmetricEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.TangentEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.ThicknessChainEnabled </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        MoveAlongFace.UseFaceBrowse </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        SymmetryPlaneOption </term> <description> 
         
        Existing </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  SymmetricBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Represents the plane options. */
            public: enum PlaneOptions
            {
                PlaneOptionsExisting/** existing plane */,
                PlaneOptionsNew/** new plane */
            };

            private: SymmetricBuilderImpl * m_symmetricbuilder_impl;
            private: friend class  _SymmetricBuilderBuilder;
            protected: SymmetricBuilder();
            public: ~SymmetricBuilder();
            /**Returns  the motion face.
                        The constraint is applied between the motion face and a stationary face.
                        The motion face is transformed when the constraint is applied. 
                      
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * MotionFace
            (
            );
            /**Returns  the symmetry plane option.
                        The plane of symmetry is the plane that defines symmetry between the stationary face and the motion face.
                        Either @link NXOpen::Features::SymmetricBuilder::PlaneOptionsExisting NXOpen::Features::SymmetricBuilder::PlaneOptionsExisting@endlink  or 
                        @link NXOpen::Features::SymmetricBuilder::PlaneOptionsNew NXOpen::Features::SymmetricBuilder::PlaneOptionsNew@endlink  
                        plane option could be employed to define the symmetry plane.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SymmetricBuilder::PlaneOptions SymmetryPlaneOption
            (
            );
            /**Sets  the symmetry plane option.
                        The plane of symmetry is the plane that defines symmetry between the stationary face and the motion face.
                        Either @link NXOpen::Features::SymmetricBuilder::PlaneOptionsExisting NXOpen::Features::SymmetricBuilder::PlaneOptionsExisting@endlink  or 
                        @link NXOpen::Features::SymmetricBuilder::PlaneOptionsNew NXOpen::Features::SymmetricBuilder::PlaneOptionsNew@endlink  
                        plane option could be employed to define the symmetry plane.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSymmetryPlaneOption
            (
                NXOpen::Features::SymmetricBuilder::PlaneOptions symmetryPlaneOption /** symmetryplaneoption */ 
            );
            /**Returns  the existing symmetry plane.
                        The @link NXOpen::SelectFace NXOpen::SelectFace@endlink  object is employed to select existing planar face or datum plane as the 
                        symmetry plane if plane option is set to @link NXOpen::Features::SymmetricBuilder::PlaneOptionsExisting NXOpen::Features::SymmetricBuilder::PlaneOptionsExisting@endlink .
                      
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectISurface * ExistingSymmetryPlane
            (
            );
            /**Returns  the new symmetry plane.
                        The @link NXOpen::Plane NXOpen::Plane@endlink  object is employed to define the symmetry plane if plane option is set to 
                        @link NXOpen::Features::SymmetricBuilder::PlaneOptionsNew NXOpen::Features::SymmetricBuilder::PlaneOptionsNew@endlink .            
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * NewSymmetryPlane
            (
            );
            /**Sets  the new symmetry plane.
                        The @link NXOpen::Plane NXOpen::Plane@endlink  object is employed to define the symmetry plane if plane option is set to 
                        @link NXOpen::Features::SymmetricBuilder::PlaneOptionsNew NXOpen::Features::SymmetricBuilder::PlaneOptionsNew@endlink .            
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNewSymmetryPlane
            (
                NXOpen::Plane * newSymmetryPlane /** newsymmetryplane */ 
            );
            /**Returns  the stationary face.
                        The constraint is applied between the stationary face and a motion face. 
                        The stationary face remains stationary when the constraint is applied.
                      
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFace * StationaryFace
            (
            );
            /**Returns  the move along face.
                        The @link NXOpen::Features::FaceRecognitionBuilder NXOpen::Features::FaceRecognitionBuilder@endlink  object is employed to collect tag-along faces.
                        When the motion face is selected it is used as a seed for recognition of tag-along faces.
                      
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FaceRecognitionBuilder * MoveAlongFace
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
