#ifndef NXOpen_AME_NAMINGSCHEMEASPECTNAMINGBUILDER_HXX_INCLUDED
#define NXOpen_AME_NAMINGSCHEMEASPECTNAMINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_NamingSchemeAspectNamingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_SelectClassificationBuilder.hxx>
#include <NXOpen/AME_SelectionBaseDefinitionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class NamingSchemeAspectNamingBuilder;
    }
    namespace AME
    {
        class SelectClassificationBuilder;
    }
    namespace AME
    {
        class SelectionBaseDefinitionBuilder;
    }
    class Builder;
    class NXObject;
    namespace AME
    {
        class _NamingSchemeAspectNamingBuilderBuilder;
        class NamingSchemeAspectNamingBuilderImpl;
        /**
                JA class for Naming Scheme Aspect Naming Builder
             <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateNamingSchemeAspectNamingBuilder  NXOpen::AME::AMEManager::CreateNamingSchemeAspectNamingBuilder @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  NamingSchemeAspectNamingBuilder : public NXOpen::Builder
        {
            private: NamingSchemeAspectNamingBuilderImpl * m_namingschemeaspectnamingbuilder_impl;
            private: friend class  _NamingSchemeAspectNamingBuilderBuilder;
            protected: NamingSchemeAspectNamingBuilder();
            public: ~NamingSchemeAspectNamingBuilder();
            /**Returns  the classification item 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectClassificationBuilder * ClassificationItem
            (
            );
            /**Returns  the library item 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectionBaseDefinitionBuilder * SelectLibraryObject
            (
            );
            /**Returns  the name in function aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString SameNameInAllAspect
            (
            );
            /**Sets  the name in function aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSameNameInAllAspect
            (
                const NXString & sameNameInAllAspect /** samenameinallaspect */ 
            );
            /**Sets  the name in function aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetSameNameInAllAspect
            (
                const char * sameNameInAllAspect /** samenameinallaspect */ 
            );
            /**Returns  the name in function aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString NameInFunction
            (
            );
            /**Sets  the name in function aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetNameInFunction
            (
                const NXString & nameInFunction /** nameinfunction */ 
            );
            /**Sets  the name in function aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetNameInFunction
            (
                const char * nameInFunction /** nameinfunction */ 
            );
            /**Returns  the name in location aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString NameInLocation
            (
            );
            /**Sets  the name in location aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetNameInLocation
            (
                const NXString & nameInLocation /** nameinlocation */ 
            );
            /**Sets  the name in location aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetNameInLocation
            (
                const char * nameInLocation /** nameinlocation */ 
            );
            /**Returns  the name in product aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString NameInProduct
            (
            );
            /**Sets  the name in product aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetNameInProduct
            (
                const NXString & nameInProduct /** nameinproduct */ 
            );
            /**Sets  the name in product aspect
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetNameInProduct
            (
                const char * nameInProduct /** nameinproduct */ 
            );
            /** Fills function aspect data 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void FillFunctionAspectData
            (
                int startIndex /** startindex */ ,
                int increment /** increment */ ,
                int displayDigits /** displaydigits */ 
            );
            /** Fills location aspect data 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void FillLocationAspectData
            (
                int startIndex /** startindex */ ,
                int increment /** increment */ ,
                int displayDigits /** displaydigits */ 
            );
            /** Fills product aspect data 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void FillProductAspectData
            (
                int startIndex /** startindex */ ,
                int increment /** increment */ ,
                int displayDigits /** displaydigits */ 
            );
            /** Create/Update naming rule 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CreateOrUpdateNamingRuleAndSetData
            (
            );
            /** Remove naming rule from list 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveNamingRule
            (
                NXOpen::NXObject * namingRuleTag /** namingruletag */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
