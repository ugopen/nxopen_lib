#ifndef NXOpen_CAE_XYPLOTDATATYPES_HXX_INCLUDED
#define NXOpen_CAE_XYPLOTDATATYPES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_XyplotDataTypes.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Xyplot
        {
            /** Represents the plot graph style */
            enum GraphStyle
            {
                GraphStyleLine/** Option to display plot in curve style */,
                GraphStyleBar/** Option to display plot in bar style  */,
                GraphStyleSurface/** Option to display plot in surface style */ = 3,
                GraphStyleScatter/** Option to display plot in scatter style */,
                GraphStyleColorBar/** Option to display plot in ColorBar style */,
                GraphStyleColorMap/** Option to display plot in ColorMap style */,
                GraphStyleBarChart/** Option to display plot in BarChart style */,
                GraphStyleVector/** Option to display plot in vector style */,
                GraphStyleMatrix2D/** Option to display plot in Matrix2D style */
            };

            /** Represents the 2D plot complex option */
            enum ComplexOption2D
            {
                ComplexOption2DMagnitude/** Magnitude of the complex data for 2D plot */,
                ComplexOption2DMagnitudePhase/** Magnitude and phase angle of complex data for 2D plot */,
                ComplexOption2DPhase/** Only the phase of the complex data for 2D plot */,
                ComplexOption2DReal/** Only the real part of the complex data for 2D plot */,
                ComplexOption2DRealImaginary/** Real and imaginary of the complex data for 2D plot */,
                ComplexOption2DRealImaginaryPhase/** Real, imaginary and phase angle of the complex data for 2D plot */,
                ComplexOption2DPolar/** Polar for 2D plot */,
                ComplexOption2DArgand/** Argand for 2D plot */,
                ComplexOption2DPolar3D/** Polar for 3D plot */,
                ComplexOption2DArgand3D/** Argand for 3D plot which z coordindate come from the x coordinate */,
                ComplexOption2DPhaseMagnitude/** Phase angle and Magnitude of complex data for 2D plot */,
                ComplexOption2DImaginaryReal/** Real and imaginary of the complex data for 2D plot */,
                ComplexOption2DPhaseRealImaginary/** Phase angle, real and imaginary of the complex data for 2D plot */,
                ComplexOption2DImaginaryRealPhase/** Imaginary, real and phase angle of the complex data for 2D plot */,
                ComplexOption2DPhaseImaginaryReal/** Phase angle, imaginary and real of the complex data for 2D plot */,
                ComplexOption2DNichols/** Nichols for 2D plot */,
                ComplexOption2DAtPhaseAngle/** At phase angle for 2D plot */,
                ComplexOption2DSignedMagnitude/** Signed magnitude for 2D plot */,
                ComplexOption2DDirectivity/** Directivity for 2D plot */,
                ComplexOption2DVector/** Vector for 2D plot */
            };

            /** Represents the 3D plot complex option */
            enum ComplexOption3D
            {
                ComplexOption3DMagnitude/** Magnitude of the complex data for 3D plot */,
                ComplexOption3DPhase/** Phase of the complex data for 3D plot */,
                ComplexOption3DReal/** Real part of the complex data for 3D plot */,
                ComplexOption3DImaginary/** Imaginary part of the complex data for 3D plot */,
                ComplexOption3DArgand/** Argand for 3D plot which use the real z coordindate */,
                ComplexOption3DOrbit/** Orbit for 3D plot */,
                ComplexOption3DNichols/** Nichols for 3D plot */,
                ComplexOption3DAtPhaseAngle/** At phase angle for 3D plot */,
                ComplexOption3DSignedMagnitude/** Signed magnitude for 3D plot */
            };

            /** Represents the 2D color contour plot complex option */
            enum ComplexOption2DColorContour
            {
                ComplexOption2DColorContourMagnitude/** Magnitude of the complex data for 2D color contour plot plot */,
                ComplexOption2DColorContourPhase/** Phase of the complex data for 2D color contour plot plot */,
                ComplexOption2DColorContourReal/** Real part of the complex data for 2D color contour plot plot */,
                ComplexOption2DColorContourImaginary/** Imaginary part of the complex data for 2D color contour plot plot */,
                ComplexOption2DColorContourAtPhaseAngle/** At phase angle for 2D color contour plot plot */,
                ComplexOption2DColorContourSignedMagnitude/** Signed magnitude for 2D color contour plot plot */
            };

            /** Represents the 2D bar chart plot complex option */
            enum ComplexOption2DBarChart
            {
                ComplexOption2DBarChartMagnitude/** Magnitude of the complex data for 2D bar chart plot */,
                ComplexOption2DBarChartPhase/** Phase of the complex data for 2D bar chart plot */,
                ComplexOption2DBarChartReal/** Real part of the complex data for 2D bar chart plot */,
                ComplexOption2DBarChartImaginary/** Imaginary part of the complex data for 2D bar chart plot */,
                ComplexOption2DBarChartAtPhaseAngle/** At phase angle for 2D bar chart plot */,
                ComplexOption2DBarChartSignedMagnitude/** Signed magnitude for 2D bar chart plot */
            };

            /** Represents the complex option for matrix plot 2D */
            enum ComplexOptionMatrix2D
            {
                ComplexOptionMatrix2DMagnitude/** Magnitude of the complex data for matrix 2D plot */,
                ComplexOptionMatrix2DPhase/** Phase of the complex data for matrix 2D plot */,
                ComplexOptionMatrix2DReal/** Real part of the complex data for matrix 2D plot */,
                ComplexOptionMatrix2DImaginary/** Imaginary part of the complex data for matrix 2D plot */,
                ComplexOptionMatrix2DAtPhaseAngle/** At phase angle for matrix 2D plot */,
                ComplexOptionMatrix2DSignedMagnitude/** Signed magnitude for matrix 2D plot */
            };

            /** Prepresents the phase range option */
            enum PhaseRangeOption
            {
                PhaseRangeOptionNegativeTwoPiToZero/** Displays phase between -360 and 0 */,
                PhaseRangeOptionZeroToTwoPi/** Displays phase between 0 and 360 */,
                PhaseRangeOptionNegativePiToPi/** Displays phase between -180 and 180 */,
                PhaseRangeOptionNegativeOneHalfPiToHalfPi/** Displays phase between -270 and 90 */,
                PhaseRangeOptionNegativeHalfPiToOneHalfPi/** Displays phase between -90 and 270 */
            };

            /** Represents the label text type */
            enum TextType
            {
                TextTypeNone/** Not defined type */,
                TextTypeTitle/** Title label */,
                TextTypeLegend/** Legend label */,
                TextTypeGraphName/** Graph name label */,
                TextTypePageNumber/** Page number label */,
                TextTypeMarker/** Marker label */,
                TextTypeNote/** Note label */,
                TextTypeProbingText/** Probing label */,
                TextTypeXLabel/** X Axis name label */,
                TextTypeYLabel/** Y Axis name label */,
                TextTypeZLabel/** Z Axis name label */,
                TextTypeXNumber/** X Axis number label */,
                TextTypeYNumber/** Y Axis number label */,
                TextTypeZNumber/** Z Axis number label */,
                TextTypeColorAxisLabel/** Color Axis name label  */,
                TextTypeColorAxisNumber/** Color Axis name number */,
                TextTypeUnknownResultText/** Obsoleted in NX13  */,
                TextTypeAngleAxisNumber/** Angle Axis name number */,
                TextTypeAnnotationText/** Annotation text in vector plot */,
                TextTypeArgumentAxisNumber/** Argument Axis number label */,
                TextTypeBarChartValueText/** Bar Chart Value text */,
                TextTypeLegendTableText/** Legend Table text */,
                TextTypeResultLegendText/** Result legend text, including unknown, overflow, underflow result  */,
                TextTypeFormulaGridValueText/** Formula Grid Value text */
            };

            /** Represents the font type */
            enum Fonttype
            {
                FonttypeNx/** NX Font */,
                FonttypeStandard/** Standard Font */
            };

            /** Represents the axis direction */
            enum AxisDirection
            {
                AxisDirectionX/** X-axis */,
                AxisDirectionY/** Y-axis */,
                AxisDirectionZ/** Z-axis */
            };

            /** Represents the swap axis  type */
            enum CoordinateType
            {
                CoordinateTypeXy/** no swap for 2d */,
                CoordinateTypeYx/** swap x and y */,
                CoordinateTypeXyz/** no swap for 3d*/,
                CoordinateTypeYxz/** swap x and y */,
                CoordinateTypeZyx/** swap x and z */,
                CoordinateTypeYzx/** swap x and y firstly and then swap y and z*/,
                CoordinateTypeXzy/** swap Z and y */,
                CoordinateTypeZxy/** swap x and y firstly and then swap X and z*/
            };

            /** Represents the text alignment */
            enum TextAlignment
            {
                TextAlignmentLeft/** Left align text */,
                TextAlignmentCenter/** Center align text */,
                TextAlignmentRight/** Right align text */
            };

            /** Represents the text orientation */
            enum TextOrientation
            {
                TextOrientationHorizontal/** Horizontal text orientation */,
                TextOrientationUpward/** Upward text orientation */,
                TextOrientationDownward/** Downward text orientation */
            };

            /** Represents the type of scale for X or Y axis */
            enum AxisType
            {
                AxisTypeAuto/** Automatic type */,
                AxisTypeLinear/** Linear type */,
                AxisTypeLog/** Log type */,
                AxisTypeDb/** Db type */,
                AxisTypeOctave/** Octave type */,
                AxisTypeOneThirdOctave/** 1/3 Octave type */,
                AxisTypeOneTwelfthOctave/** 1/12 Octave type */
            };

            /** Represents the DB scale for plot */
            enum AxisDBScale
            {
                AxisDBScaleTen/** Db 10 */,
                AxisDBScaleTwenty/** Db 20 */
            };

            /** Represents the grid style for plot */
            enum GridStyle
            {
                GridStyleNoGrid/** No grid displayed */,
                GridStyleGridOnly/** Only display grid */,
                GridStyleTicksOnly/** Only display tick */,
                GridStyleGridAndTicks/** Display both grid and tick */,
                GridStyleDenseGrid/** Display dense grid */
            };

            /** Represents the point marker */
            enum PointMarker
            {
                PointMarkerNone/** No marker */,
                PointMarkerPlus/** Plus marker */,
                PointMarkerDot/** Dot marker */,
                PointMarkerAsterisk/** Asterisk marker */,
                PointMarkerCircle/** Circle marker */,
                PointMarkerPoundsign/** Pound sign marker */,
                PointMarkerCross/** Cross marker */,
                PointMarkerSquare/** Square marker */,
                PointMarkerTriangle/** Triangle marker */,
                PointMarkerDiamond/** Diamond marker */,
                PointMarkerCenterLine/** Center line marker */
            };

            /** Represents the contouring range */
            enum ContouringRange
            {
                ContouringRangeBorderGrid/** Option to show contour range on the border of the grid */,
                ContouringRangeFullGrid/** Option to show contour range on the face of the grid */
            };

            /** Represents the direction option */
            enum Direction
            {
                DirectionX/** Option to show plot in the X axis direction */,
                DirectionZ/** Option to show plot in the Z axis direction */,
                DirectionXz/** Option to show plot in the both X and Z axis direction */
            };

            /** Represents the bar filling color option */
            enum BarColorOption
            {
                BarColorOptionFill/** Fill color or contour color with no shading */,
                BarColorOptionHidden/** Background color as fill */,
                BarColorOptionShaded/** Fill Color or contour color with shading */
            };

            /** Represents the plot type */
            enum PlotType
            {
                PlotTypePlot2D/** 2D plot */,
                PlotTypePlot2DInStack/** 2D plot in stacked sequence */,
                PlotTypePlot3D/** 3D plot */,
                PlotTypePlotColorBar/** ColorBar plot */,
                PlotTypePlotColorMap/** ColorMap plot */,
                PlotTypePlotBarChart/** BarChart plot */,
                PlotTypePlotMatrix2D/** Matrix 2D plot */,
                PlotTypePlotCampbell/** Campbell plot */
            };

            /** Represents the plate filling color option */
            enum PlateColorOption
            {
                PlateColorOptionFill/** Fill color with no shading */,
                PlateColorOptionHidden/** Background color as fill */,
                PlateColorOptionShaded/** Fill Color with shading */
            };

            /** Represents the surface filling color option */
            enum SurfaceColorOption
            {
                SurfaceColorOptionNone/** No shading */,
                SurfaceColorOptionHidden/** Background color as fill */,
                SurfaceColorOptionShaded/** Fill Color or contour color with shading */
            };

            /** Represents the decimal number format */
            enum DecimalFormat
            {
                DecimalFormatActual/** Show decimal automatically */,
                DecimalFormatX/** Displays one digit followed by period */,
                DecimalFormatXx/** Displays two digits followed by period */,
                DecimalFormatXxx/** Displays three digits followed by period */,
                DecimalFormatXxxx/** Displays four digits followed by period */,
                DecimalFormatXexx/** Scientific notation with one digit followed by period,for example: 5.3E+05 */,
                DecimalFormatXxexx/** Scientific notation with two digits followed by period */,
                DecimalFormatXxxexx/** Scientific notation with three digits followed by period */,
                DecimalFormatXxxxexx/** Scientific notation with four digits followed by period */
            };

            /** Represents the color for unknow result */
            enum UnknownResultColor
            {
                UnknownResultColorWhite/** white */,
                UnknownResultColorGrey/** grey */
            };

            /** Represents the color for flow result */
            enum FlowResultColor
            {
                FlowResultColorNone/** Uses the upper or lower color of color limits */,
                FlowResultColorShaded/** User defined color */
            };

            /** Represents the anchor position of a record display, which is used to position a note */
            enum AnchorType
            {
                AnchorTypeNone/** the normal marker without anchor type */,
                AnchorTypeStart/** the position of start point in a record display */,
                AnchorTypeEnd/** the position of end point in a record display */,
                AnchorTypeMaximumValue/** the position of the point which has maximum value in a record display */,
                AnchorTypeMinimumValue/** the position of the point which has minimum value in a record display */,
                AnchorTypeAbsPercentage/** the position of the point in the set abscissa percentage */
            };

            /** Represents the angle axis display value unit */
            enum AngleUnit
            {
                AngleUnitDegree/** Display angle in degree unit */,
                AngleUnitRadian/** Display angle in radian unit */,
                AngleUnitRev/** Display angle in rev unit */
            };

            /** Represents the model type */
            enum ModelType
            {
                ModelTypePlot/** plot */  = 1,
                ModelTypeGraph/** graph */ ,
                ModelTypeRecordDisplay/** record display */ ,
                ModelTypeMarker/** marker */ ,
                ModelTypeNote/** note */ ,
                ModelTypeTitle/** title */ ,
                ModelTypeGraphName/** graph name */ ,
                ModelTypeFunctionName/** the lable of a record for @link CAE::Xyplot::PlotTypePlotColorBar CAE::Xyplot::PlotTypePlotColorBar@endlink  */,
                ModelTypeXAxis/** xaxis */ ,
                ModelTypeXAxisLabel/** xaxis label */ ,
                ModelTypeXAxisNumber/** xaxis number */ ,
                ModelTypeYAxis/** yaxis */ ,
                ModelTypeYAxisLabel/** yaxis label */ ,
                ModelTypeYAxisNumber/** yaxis number */ ,
                ModelTypeZAxis/** zaxis */ ,
                ModelTypeZAxisLabel/** zaxis label */ ,
                ModelTypeZAxisNumber/** zaxis number */ ,
                ModelTypeColorAxis/** the color indicator for @link CAE::Xyplot::PlotTypePlotColorBar CAE::Xyplot::PlotTypePlotColorBar@endlink  and @link CAE::Xyplot::PlotTypePlotColorMap CAE::Xyplot::PlotTypePlotColorMap@endlink  */,
                ModelTypeColorAxisLabel/** color axis label */ ,
                ModelTypeColorAxisNumber/** color axis number */ ,
                ModelTypeAngleAxis/** the axis to display angle divisions on circle grids */,
                ModelTypeAngleAxisNumber/** the angle axis number */,
                ModelTypeUnknownResult/** Obsoleted in NX13 */,
                ModelTypePageNumber/** page number */ ,
                ModelTypeLegend/** legend */ ,
                ModelTypeLegendTable/** legend table */ ,
                ModelTypeResultLegend/** result legend */ ,
                ModelTypeFormulaGrid/** formula grid */ ,
                ModelTypeFormulaGridValueText/** formula grid value text */ ,
                ModelTypeCalculationLegendTable/** calculation legend table */ 
            };

            /** Represents the axis limits type */
            enum LimitsType
            {
                LimitsTypeFreeLimits/** Type to use source data limits as axis limits */,
                LimitsTypeOptimizedLimits/** Type to optimize source data limits to natural axis limits */,
                LimitsTypeFixedLimits/** Type to use customized data limits as axis limits */
            };

            /** Represents the position option of graph name */
            enum GraphNamePositionOption
            {
                GraphNamePositionOptionTopLeft/** Option to positon name on top left of grid plane     */,
                GraphNamePositionOptionTopCenter/** Option to positon name on top center of grid plane   */,
                GraphNamePositionOptionTopRight/** Option to positon name on top right of grid plane    */,
                GraphNamePositionOptionBottomLeft/** Option to positon name on bottom left of grid plane  */,
                GraphNamePositionOptionBottomCenter/** Option to positon name on bottom center of grid plane*/,
                GraphNamePositionOptionBottomRight/** Option to positon name on bottom right of grid plane */
            };

            /** Represents the margin position in a text box */
            enum TextBoxMarginOption
            {
                TextBoxMarginOptionLeft/** The left margin of text box     */,
                TextBoxMarginOptionTop/** The top margin of text box     */,
                TextBoxMarginOptionRight/** The right margin of text box    */,
                TextBoxMarginOptionBottom/** The bottom margin of text box   */
            };

            /** Represents the legend table position type */
            enum LegendTablePositionType
            {
                LegendTablePositionTypeFloating/**The position of legend table can be dragged */,
                LegendTablePositionTypeDocked/** The position of legend table is fixed  */
            };

            /** Represents the frequency band summation band type mode */
            enum FrequencyBandSummationBandTypeMode
            {
                FrequencyBandSummationBandTypeModeInfer/** Mode to follow the synchronization driven by current curve or other curves and axes */,
                FrequencyBandSummationBandTypeModeUserDefined/** Mode to change band type of current curve independently */
            };

            /** Represents the frequency band summation band type */
            enum FrequencyBandSummationBandType
            {
                FrequencyBandSummationBandTypeOctave/** Octave */,
                FrequencyBandSummationBandTypeOneThirdOctave/** 1/3 Octave */,
                FrequencyBandSummationBandTypeOneTwelfthOctave/** 1/12 Octave */
            };

            /** Represents the frequency band summation display mode */
            enum FrequencyBandSummationDisplayMode
            {
                FrequencyBandSummationDisplayModeStepLines/** Step Lines */,
                FrequencyBandSummationDisplayModeConnectCentralFrequencies/** Connect Central Frequencies */
            };

            /** Represents the layout mode for matrix plot 2D */
            enum MatrixPlot2DLayoutMode
            {
                MatrixPlot2DLayoutModeFillEachCellAsSquare/** Fill each cell as square */,
                MatrixPlot2DLayoutModeFillAllAvailableDisplayArea/** Fill all available display area */
            };

            /** Represents the size of Pan Tool in Pan mode */
            enum PanToolSize
            {
                PanToolSizeSmall/** small */ ,
                PanToolSizeNormal/** normal */ ,
                PanToolSizeLarge/** large */ 
            };

            /** Represents the moving direction in Pan mode */
            enum PanDirection
            {
                PanDirectionUp/** up */ ,
                PanDirectionDown/** down */ ,
                PanDirectionLeft/** left */ ,
                PanDirectionRight/** right */ 
            };

            /** Represents the color spectrum type */
            enum ColorSpectrum
            {
                ColorSpectrumStructural/** structural */ ,
                ColorSpectrumThermal/** thermal */ ,
                ColorSpectrumGrayscale/** grayscale */ ,
                ColorSpectrumStoplight/** stoplight */ 
            };

            /** Represents the formula grid type */
            enum FormulaGridType
            {
                FormulaGridTypeNone/** none */ ,
                FormulaGridTypeDiagonalLineInHaighDiagram/** diagonal line in haigh diagram */ 
            };

            /** Represents the function data accessor type*/
            enum FunctionDataAccessor
            {
                FunctionDataAccessorNone/** none */ ,
                FunctionDataAccessorXy/** xy */ ,
                FunctionDataAccessorXyz/** xyz */ ,
                FunctionDataAccessorArgand3D/** argand3d */ ,
                FunctionDataAccessorBarChart/** bar chart */ ,
                FunctionDataAccessorMatrix/** matrix */ ,
                FunctionDataAccessorCampbell/** campbell */ 
            };

            /** Represents the calculation function type */
            enum CalculationFunctionType
            {
                CalculationFunctionTypeMaxAmplitude/** This function has two calculation results, the first one is Maximum Amplitude value in Y axis, the second is the corresponding X value */,
                CalculationFunctionTypeMinAmplitude/** This function has two calculation results, the first one is Minimum Amplitude value in Y axis, the second is the corresponding X value */,
                CalculationFunctionTypeMaximumRange/** maximum range */ ,
                CalculationFunctionTypeRss/** rss */ ,
                CalculationFunctionTypeRms/** rms */ ,
                CalculationFunctionTypeLinearAveraging/** linear averaging */ ,
                CalculationFunctionTypeIntegratedValue/** integrated value */ ,
                CalculationFunctionTypeSignalPower/** signal power */ 
            };

            /** Represents the graph style for Campbell Plot */
            enum CampbellGraphType
            {
                CampbellGraphTypePoint/** Option to display Campbell Plot in Point style */,
                CampbellGraphTypeLine/** Option to display Campbell Plot in Line style */
            };

            /** Represents the point size type for Campbell Plot */
            enum CampbellPointSizeType
            {
                CampbellPointSizeTypeConst/** Option to display points with const diameters in Point style*/,
                CampbellPointSizeTypeVariable/** Option to display points with variable diameters correspond to result data in Point style*/
            };

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
