#ifndef NXOpen_TOOLING_VALIDDFMBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_VALIDDFMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ValidDFMBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ValidDFMBuilder;
    }
    class Builder;
    class ScCollector;
    namespace Tooling
    {
        class _ValidDFMBuilderBuilder;
        class ValidDFMBuilderImpl;
        /** 
            Represents a @link NXOpen::Tooling::ValidDFMBuilder NXOpen::Tooling::ValidDFMBuilder@endlink  used to run Sheet Metal Part Validation.
             <br> To create a new instance of this class, use @link NXOpen::Tooling::ValidDFMCollection::CreateValidDfmBuilder  NXOpen::Tooling::ValidDFMCollection::CreateValidDfmBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        BendClearance </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        CreatePersistentResult </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        CutoutCornerAngle </term> <description> 
         
        3.0 </description> </item> 

        <item><term> 
         
        CutoutCornerRadius </term> <description> 
         
        0.1 </description> </item> 

        <item><term> 
         
        CutoutSizeDoubleDLength </term> <description> 
         
        2 (millimeters part), 0.8 (inches part) </description> </item> 

        <item><term> 
         
        CutoutSizeDoubleDWidth </term> <description> 
         
        1 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        CutoutSizeHexagonLength </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CutoutSizeHexagonLengthMin </term> <description> 
         
        0.5 </description> </item> 

        <item><term> 
         
        CutoutSizeOblongLength </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        CutoutSizeOblongLengthMin </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CutoutSizeOblongRadius </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CutoutSizeOblongRadiusMin </term> <description> 
         
        0.1 </description> </item> 

        <item><term> 
         
        CutoutSizePartialCircularDiameter </term> <description> 
         
        t </description> </item> 

        <item><term> 
         
        CutoutSizePartialCircularWidth </term> <description> 
         
        1 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        CutoutSizeRectangleLength </term> <description> 
         
        4 </description> </item> 

        <item><term> 
         
        CutoutSizeRectangleLengthMin </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CutoutSizeRectangleRadius </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        CutoutSizeRectangleRadiusMin </term> <description> 
         
        0.1 </description> </item> 

        <item><term> 
         
        CutoutSizeRectangleWidth </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        CutoutSizeRectangleWidthMin </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CutoutSizeRoundRadius </term> <description> 
         
        5*t </description> </item> 

        <item><term> 
         
        CutoutSizeRoundRadiusMin </term> <description> 
         
        0.5*t </description> </item> 

        <item><term> 
         
        CutoutSizeSquareLength </term> <description> 
         
        2 </description> </item> 

        <item><term> 
         
        CutoutSizeSquareLengthMin </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        CutoutSizeSquareRadius </term> <description> 
         
        1.0 </description> </item> 

        <item><term> 
         
        CutoutSizeSquareRadiusMin </term> <description> 
         
        0.1 </description> </item> 

        <item><term> 
         
        DeviationBendBreakRadius </term> <description> 
         
        5*t </description> </item> 

        <item><term> 
         
        DisplayInCheckMate </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DistBendToBend </term> <description> 
         
        2*t </description> </item> 

        <item><term> 
         
        DistCutoutToBend </term> <description> 
         
        2*t </description> </item> 

        <item><term> 
         
        DistCutoutToCutout </term> <description> 
         
        2*t </description> </item> 

        <item><term> 
         
        DoubleMaxBendAngle </term> <description> 
         
        90 </description> </item> 

        <item><term> 
         
        DoubleMinBendAngle </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        EqThicknessTol </term> <description> 
         
        0.0001 (millimeters part), 0.000004 (inches part) </description> </item> 

        <item><term> 
         
        HemAngleTol </term> <description> 
         
        180.0 </description> </item> 

        <item><term> 
         
        HemClearance </term> <description> 
         
        0.1 </description> </item> 

        <item><term> 
         
        HemFactor </term> <description> 
         
        2*t+0.5 </description> </item> 

        <item><term> 
         
        HemLength </term> <description> 
         
        2*t </description> </item> 

        <item><term> 
         
        MaxThickness </term> <description> 
         
        10 (millimeters part), 0.4 (inches part) </description> </item> 

        <item><term> 
         
        MinThickness </term> <description> 
         
        0.1 (millimeters part), 0.04 (inches part) </description> </item> 

        <item><term> 
         
        NBendHeight </term> <description> 
         
        2*t+0.5 </description> </item> 

        <item><term> 
         
        ShowResult </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        StandardBendBreakRadius </term> <description> 
         
        0.5*t </description> </item> 

        <item><term> 
         
        TangentAngleTol </term> <description> 
         
        0.01 </description> </item> 

        </list> 

         <br>  Created in NX1953.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ValidDFMBuilder : public NXOpen::Builder
        {
            /** Represents the categories of sheet metal part validation checkers */
            public: enum CategoryType
            {
                CategoryTypeManufacturability/** Represents the manufacturability checker category */,
                CategoryTypeUnformability/** Represents the unformability checker category */,
                CategoryTypeFeatureCheck/** Represents the feature check category */,
                CategoryTypeCount/** Not used */
            };

            /** Represents the sheet metal part validation checker types. */
            public: enum CheckerType
            {
                CheckerTypeCheckBendAngle/** Represents checking bend angle */,
                CheckerTypeCheckBendRadius/** Represents checking the minimum value of inside bend radius */,
                CheckerTypeCheckBendHeight/** Represents checking the bend height */,
                CheckerTypeCheckBendDirection/** Represents checking whether all bends have the same direction */,
                CheckerTypeCheckCutoutCorner/** Represents checking the cutout corner radius and angle */,
                CheckerTypeCheckCutoutShape/** Represents checking whether a cutout has the standard shape */,
                CheckerTypeCheckCutoutSize/** Represents checking whether a cutout size meets the size criteria */,
                CheckerTypeCheckBendToBendDistance/** Represents checking the minimum distance between bends */,
                CheckerTypeCheckCutoutToBendDistance/** Represents checking the minimum distance between a cutout and a bend */,
                CheckerTypeCheckCutoutToCutoutDistance/** Represents checking the minimum distance between cutouts */,
                CheckerTypeCheckCylindricalBendFace/** Represents checking whether a bend face is a B-spline cylindrical face */,
                CheckerTypeCheckCoaxisForMultipleBends/** Represents checking whether the cylindrical bend faces are coaxial */,
                CheckerTypeCheckTangentBetweenBendAndTab/** Represents checking whether a bend face and adjacent tab faces are tangent */,
                CheckerTypeCheckBendThickness/** Represents checking whether the bend thickness is identical to the sheet metal part thickness */,
                CheckerTypeCheckInvalidAdjFaceToBend/** Represents checking whether the adjacent faces to bend are B-surfaces or non-planar faces */,
                CheckerTypeCheckHemClearance/** Represents checking whether the clearance of a hem feature meets the minimum clearance criterion */,
                CheckerTypeCheckBendSharpCorner/** Represents checking whether the inside bend has the sharp corner */,
                CheckerTypeCheckPartThickness/** Represents checking the sheet metal part thickness */,
                CheckerTypeCheckPartVolume/** Represents checking the sheet metal part volume */,
                CheckerTypeCount/** Not used */,
                CheckerTypeCheckNBend/** Represents checking the N Bend features */,
                CheckerTypeCheckZBend/** Represents checking the Z Bend features */,
                CheckerTypeCheckVBend/** Represents checking the V Bend features */
            };

            private: ValidDFMBuilderImpl * m_validdfmbuilder_impl;
            private: friend class  _ValidDFMBuilderBuilder;
            protected: ValidDFMBuilder();
            public: ~ValidDFMBuilder();
            /**Returns  the face select 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * FaceSelect
            (
            );
            /** Specifies an array of checker IDs for the selected checkers 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedCheckerIds
            (
                const std::vector<NXString> & selectedCheckerIds /** A list of checker ids */
            );
            /** Gets the checker IDs of selected checkers  @return  A list of checker ids 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetSelectedCheckerIds
            (
            );
            /** Specifies an array of indicies for the selected checkers in the dialog item 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSelectedCheckerIndicies
            (
                const std::vector<int> & selectedCheckerIndicies /** A list of checker indicies */
            );
            /** Gets the indicies of selected checking criteria  @return  A list of checker indicies 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetSelectedCheckerIndicies
            (
            );
            /** Specifies the logical flag to recognize the sheet metal features 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRecognizeSheetMetalFeatures
            (
                bool recognize /** recognize */ 
            );
            /** Gets the logical flag to recognize the sheet metal features 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetRecognizeSheetMetalFeatures
            (
            );
            /** Register the sheet metal part validation checkers 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void RegisterCheckers
            (
            );
            /** Specifies the logical flag to execute the sheet metal part validation 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCheckSheetMetalFeatures
            (
                bool check /** check */ 
            );
            /** Gets the logical flag that indicates whether to execute the sheet metal features 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetCheckSheetMetalFeatures
            (
            );
            /**Returns  the double min bend angle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleMinBendAngle
            (
            );
            /**Sets  the double min bend angle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDoubleMinBendAngle
            (
                double doubleMinBendAngle /** doubleminbendangle */ 
            );
            /**Returns  the double max bend angle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleMaxBendAngle
            (
            );
            /**Sets  the double max bend angle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDoubleMaxBendAngle
            (
                double doubleMaxBendAngle /** doublemaxbendangle */ 
            );
            /**Returns  the double standard bend break radius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StandardBendBreakRadius
            (
            );
            /**Sets  the double standard bend break radius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStandardBendBreakRadius
            (
                const NXString & standardBendBreakRadius /** standardbendbreakradius */ 
            );
            /**Sets  the double standard bend break radius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetStandardBendBreakRadius
            (
                const char * standardBendBreakRadius /** standardbendbreakradius */ 
            );
            /**Returns  the double deviation bend break radius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DeviationBendBreakRadius
            (
            );
            /**Sets  the double deviation bend break radius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDeviationBendBreakRadius
            (
                const NXString & deviationBendBreakRadius /** deviationbendbreakradius */ 
            );
            /**Sets  the double deviation bend break radius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetDeviationBendBreakRadius
            (
                const char * deviationBendBreakRadius /** deviationbendbreakradius */ 
            );
            /**Returns  the minimum bend height 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MinBendHeight
            (
            );
            /**Sets  the minimum bend height 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMinBendHeight
            (
                const NXString & minBendHeight /** minbendheight */ 
            );
            /**Sets  the minimum bend height 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetMinBendHeight
            (
                const char * minBendHeight /** minbendheight */ 
            );
            /**Returns  the double distBendToBend 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DistBendToBend
            (
            );
            /**Sets  the double distBendToBend 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDistBendToBend
            (
                const NXString & distBendToBend /** distbendtobend */ 
            );
            /**Sets  the double distBendToBend 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetDistBendToBend
            (
                const char * distBendToBend /** distbendtobend */ 
            );
            /**Returns  the double cutoutCornerRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutCornerRadius
            (
            );
            /**Sets  the double cutoutCornerRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutCornerRadius
            (
                double cutoutCornerRadius /** cutoutcornerradius */ 
            );
            /**Returns  the double cutoutCornerAngle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutCornerAngle
            (
            );
            /**Sets  the double cutoutCornerAngle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutCornerAngle
            (
                double cutoutCornerAngle /** cutoutcornerangle */ 
            );
            /**Returns  the double distCutoutToBend 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DistCutoutToBend
            (
            );
            /**Sets  the double distCutoutToBend 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDistCutoutToBend
            (
                const NXString & distCutoutToBend /** distcutouttobend */ 
            );
            /**Sets  the double distCutoutToBend 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetDistCutoutToBend
            (
                const char * distCutoutToBend /** distcutouttobend */ 
            );
            /**Returns  the double distCutoutToCutout 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DistCutoutToCutout
            (
            );
            /**Sets  the double distCutoutToCutout 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDistCutoutToCutout
            (
                const NXString & distCutoutToCutout /** distcutouttocutout */ 
            );
            /**Sets  the double distCutoutToCutout 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetDistCutoutToCutout
            (
                const char * distCutoutToCutout /** distcutouttocutout */ 
            );
            /**Returns  the double cutoutSizeRoundRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CutoutSizeRoundRadiusMin
            (
            );
            /**Sets  the double cutoutSizeRoundRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeRoundRadiusMin
            (
                const NXString & cutoutSizeRoundRadiusMin /** cutoutsizeroundradiusmin */ 
            );
            /**Sets  the double cutoutSizeRoundRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetCutoutSizeRoundRadiusMin
            (
                const char * cutoutSizeRoundRadiusMin /** cutoutsizeroundradiusmin */ 
            );
            /**Returns  the double cutoutSizeRoundRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CutoutSizeRoundRadius
            (
            );
            /**Sets  the double cutoutSizeRoundRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeRoundRadius
            (
                const NXString & cutoutSizeRoundRadius /** cutoutsizeroundradius */ 
            );
            /**Sets  the double cutoutSizeRoundRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetCutoutSizeRoundRadius
            (
                const char * cutoutSizeRoundRadius /** cutoutsizeroundradius */ 
            );
            /**Returns  the double cutoutSizeOblongRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeOblongRadiusMin
            (
            );
            /**Sets  the double cutoutSizeOblongRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeOblongRadiusMin
            (
                double cutoutSizeOblongRadiusMin /** cutoutsizeoblongradiusmin */ 
            );
            /**Returns  the double cutoutSizeOblongRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeOblongRadius
            (
            );
            /**Sets  the double cutoutSizeOblongRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeOblongRadius
            (
                double cutoutSizeOblongRadius /** cutoutsizeoblongradius */ 
            );
            /**Returns  the double cutoutSizeOblongLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeOblongLength
            (
            );
            /**Sets  the double cutoutSizeOblongLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeOblongLength
            (
                double cutoutSizeOblongLength /** cutoutsizeoblonglength */ 
            );
            /**Returns  the double cutoutSizeOblongLengthMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeOblongLengthMin
            (
            );
            /**Sets  the double cutoutSizeOblongLengthMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeOblongLengthMin
            (
                double cutoutSizeOblongLengthMin /** cutoutsizeoblonglengthmin */ 
            );
            /**Returns  the double cutoutSizeSquareRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeSquareRadiusMin
            (
            );
            /**Sets  the double cutoutSizeSquareRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeSquareRadiusMin
            (
                double cutoutSizeSquareRadiusMin /** cutoutsizesquareradiusmin */ 
            );
            /**Returns  the double cutoutSizeSquareRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeSquareRadius
            (
            );
            /**Sets  the double cutoutSizeSquareRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeSquareRadius
            (
                double cutoutSizeSquareRadius /** cutoutsizesquareradius */ 
            );
            /**Returns  the double cutoutSizeSquareLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeSquareLength
            (
            );
            /**Sets  the double cutoutSizeSquareLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeSquareLength
            (
                double cutoutSizeSquareLength /** cutoutsizesquarelength */ 
            );
            /**Returns  the double cutoutSizeSquareLengthMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeSquareLengthMin
            (
            );
            /**Sets  the double cutoutSizeSquareLengthMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeSquareLengthMin
            (
                double cutoutSizeSquareLengthMin /** cutoutsizesquarelengthmin */ 
            );
            /**Returns  the double cutoutSizeRectangleRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeRectangleRadiusMin
            (
            );
            /**Sets  the double cutoutSizeRectangleRadiusMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeRectangleRadiusMin
            (
                double cutoutSizeRectangleRadiusMin /** cutoutsizerectangleradiusmin */ 
            );
            /**Returns  the double cutoutSizeRectangleRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeRectangleRadius
            (
            );
            /**Sets  the double cutoutSizeRectangleRadius 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeRectangleRadius
            (
                double cutoutSizeRectangleRadius /** cutoutsizerectangleradius */ 
            );
            /**Returns  the double cutoutSizeRectangleLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeRectangleLength
            (
            );
            /**Sets  the double cutoutSizeRectangleLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeRectangleLength
            (
                double cutoutSizeRectangleLength /** cutoutsizerectanglelength */ 
            );
            /**Returns  the double cutoutSizeRectangleLengthMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeRectangleLengthMin
            (
            );
            /**Sets  the double cutoutSizeRectangleLengthMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeRectangleLengthMin
            (
                double cutoutSizeRectangleLengthMin /** cutoutsizerectanglelengthmin */ 
            );
            /**Returns  the double cutoutSizeRectangleWidth 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeRectangleWidth
            (
            );
            /**Sets  the double cutoutSizeRectangleWidth 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeRectangleWidth
            (
                double cutoutSizeRectangleWidth /** cutoutsizerectanglewidth */ 
            );
            /**Returns  the double cutoutSizeRectangleWidthMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeRectangleWidthMin
            (
            );
            /**Sets  the double cutoutSizeRectangleWidthMin 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeRectangleWidthMin
            (
                double cutoutSizeRectangleWidthMin /** cutoutsizerectanglewidthmin */ 
            );
            /**Returns  the double cutoutSizeHexagonLength  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeHexagonLength
            (
            );
            /**Sets  the double cutoutSizeHexagonLength  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeHexagonLength
            (
                double cutoutSizeHexagonLength /** cutoutsizehexagonlength */ 
            );
            /**Returns  the double cutoutSizeHexagonLengthMin  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeHexagonLengthMin
            (
            );
            /**Sets  the double cutoutSizeHexagonLengthMin  
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeHexagonLengthMin
            (
                double cutoutSizeHexagonLengthMin /** cutoutsizehexagonlengthmin */ 
            );
            /**Returns  the double cutoutSizePartialCircularDiameter 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CutoutSizePartialCircularDiameter
            (
            );
            /**Sets  the double cutoutSizePartialCircularDiameter 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizePartialCircularDiameter
            (
                const NXString & cutoutSizePartialCircularDiameter /** cutoutsizepartialcirculardiameter */ 
            );
            /**Sets  the double cutoutSizePartialCircularDiameter 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetCutoutSizePartialCircularDiameter
            (
                const char * cutoutSizePartialCircularDiameter /** cutoutsizepartialcirculardiameter */ 
            );
            /**Returns  the double cutoutSizePartialCircularWidth 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizePartialCircularWidth
            (
            );
            /**Sets  the double cutoutSizePartialCircularWidth 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizePartialCircularWidth
            (
                double cutoutSizePartialCircularWidth /** cutoutsizepartialcircularwidth */ 
            );
            /**Returns  the double cutoutSizeDoubleDLength 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeDoubleDLength
            (
            );
            /**Sets  the double cutoutSizeDoubleDLength 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeDoubleDLength
            (
                double cutoutSizeDoubleDLength /** cutoutsizedoubledlength */ 
            );
            /**Returns  the double cutoutSizeDoubleDWidth 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: double CutoutSizeDoubleDWidth
            (
            );
            /**Sets  the double cutoutSizeDoubleDWidth 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCutoutSizeDoubleDWidth
            (
                double cutoutSizeDoubleDWidth /** cutoutsizedoubledwidth */ 
            );
            /**Returns  the double minThickness 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double MinThickness
            (
            );
            /**Sets  the double minThickness 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMinThickness
            (
                double minThickness /** minthickness */ 
            );
            /**Returns  the double maxThickness 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double MaxThickness
            (
            );
            /**Sets  the double maxThickness 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMaxThickness
            (
                double maxThickness /** maxthickness */ 
            );
            /**Returns  the double eqThicknessTol 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double EqThicknessTol
            (
            );
            /**Sets  the double eqThicknessTol 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEqThicknessTol
            (
                double eqThicknessTol /** eqthicknesstol */ 
            );
            /**Returns  the double tangentAngleTol 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double TangentAngleTol
            (
            );
            /**Sets  the double tangentAngleTol 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetTangentAngleTol
            (
                double tangentAngleTol /** tangentangletol */ 
            );
            /**Returns  the double hemClearance 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double HemClearance
            (
            );
            /**Sets  the double hemClearance 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHemClearance
            (
                double hemClearance /** hemclearance */ 
            );
            /**Returns  the double hemFactor 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString HemFactor
            (
            );
            /**Sets  the double hemFactor 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHemFactor
            (
                const NXString & hemFactor /** hemfactor */ 
            );
            /**Sets  the double hemFactor 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetHemFactor
            (
                const char * hemFactor /** hemfactor */ 
            );
            /**Returns  the double hemLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXString HemLength
            (
            );
            /**Sets  the double hemLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHemLength
            (
                const NXString & hemLength /** hemlength */ 
            );
            /**Sets  the double hemLength 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetHemLength
            (
                const char * hemLength /** hemlength */ 
            );
            /**Returns  the double hemAngleTol 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double HemAngleTol
            (
            );
            /**Sets  the double hemAngleTol 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHemAngleTol
            (
                double hemAngleTol /** hemangletol */ 
            );
            /**Returns  the double bendClearance 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: double BendClearance
            (
            );
            /**Sets  the double bendClearance 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendClearance
            (
                double bendClearance /** bendclearance */ 
            );
            /**Returns  the N Bend Height 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NBendHeight
            (
            );
            /**Sets  the N Bend Height 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNBendHeight
            (
                const NXString & nBendHeight /** nbendheight */ 
            );
            /**Sets  the N Bend Height 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetNBendHeight
            (
                const char * nBendHeight /** nbendheight */ 
            );
            /**Returns  the option to show sheet metal features in Process Design Navigator 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowResult
            (
            );
            /**Sets  the option to show sheet metal features in Process Design Navigator 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetShowResult
            (
                bool showResult /** showresult */ 
            );
            /**Returns  the option to display results in Check-Mate 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayInCheckMate
            (
            );
            /**Sets  the option to display results in Check-Mate 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDisplayInCheckMate
            (
                bool displayInCheckMate /** displayincheckmate */ 
            );
            /**Returns  the option to create persistent validation result 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreatePersistentResult
            (
            );
            /**Sets  the option to create persistent validation result 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetCreatePersistentResult
            (
                bool createPersistentResult /** createpersistentresult */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
