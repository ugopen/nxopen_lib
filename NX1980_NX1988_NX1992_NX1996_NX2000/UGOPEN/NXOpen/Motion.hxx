#ifndef NXOpen_MOTION_HXX_INCLUDED
#define NXOpen_MOTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        /** Definitions of connector coefficient type  */
        enum ConnectorCoefficientTypes
        {
            ConnectorCoefficientTypesConstant/** constant type */,
            ConnectorCoefficientTypesSpline/** spline type */,
            ConnectorCoefficientTypesProfile2d/** 2D profile*/,
            ConnectorCoefficientTypesProfile3d/** 3D profile*/,
            ConnectorCoefficientTypesExpressionAndSpline/** expression and function*/,
            ConnectorCoefficientTypesExpressionAndProfile2d/** expression and 2D profile*/,
            ConnectorCoefficientTypesExpressionAndProfile3d/** expression and 3D profile*/
        };

        /** Definitions move type of general type bushing coefficient */
        enum BushingGeneralCoefficientMoveTypes
        {
            BushingGeneralCoefficientMoveTypesTranslational/** translational type */,
            BushingGeneralCoefficientMoveTypesTorsional/** torsional type */
        };

        /** Definitions of bushing general coefficient component type */
        enum BushingGeneralCoefficientTypes
        {
            BushingGeneralCoefficientTypesTranslationalStiffness/** translational stiffness component */,
            BushingGeneralCoefficientTypesTranslationalDamping/** translational damping component */,
            BushingGeneralCoefficientTypesTranslationalPreload/** translational preload component */,
            BushingGeneralCoefficientTypesTorsionalStiffness/** torsional stiffness component */,
            BushingGeneralCoefficientTypesTorsionalDamping/** torsional damping component */,
            BushingGeneralCoefficientTypesTorsionalPreload/** torsional preload component */
        };

        /** Definitions of bushing cylindrical coefficient component type */
        enum BushingCylindricalCoefficientTypes
        {
            BushingCylindricalCoefficientTypesStiffness/** stiffness type */,
            BushingCylindricalCoefficientTypesDamping/** damping type */,
            BushingCylindricalCoefficientTypesPreload/** preload type */
        };

        /** Definitions of bushing spherical coefficient component type */
        enum BushingSphericalCoefficientTypes
        {
            BushingSphericalCoefficientTypesStiffness/** stiffness type */,
            BushingSphericalCoefficientTypesDamping/** damping type */,
            BushingSphericalCoefficientTypesPreload/** preload type */
        };

        /** Defines function value type */
        enum ForceValueTypes
        {
            ForceValueTypesConstant/** constant type use constant value define force magnitude  */,
            ForceValueTypesFunction/** function type use function define force magnitude  */,
            ForceValueTypesProfile/** profile type use profiles to define force magnitude */
        };

        /** Defines 2-3 joint coupler joint movement type */
        enum GcouplerMovementTypes
        {
            GcouplerMovementTypesRotation/**Rotation movement type */,
            GcouplerMovementTypesTranslation/**Translation movement type */
        };

        /** Defines curve parameterized type */
        enum CurveParameterizedTypes
        {
            CurveParameterizedTypesCurvature/**Curvature based type */,
            CurveParameterizedTypesSpacing/**User defined spacing type */
        };

        /** Definitions of post animation and spreadsheet run play mode type*/
        enum PlayMode
        {
            PlayModePlayOnce/** Play once mode */,
            PlayModeLoop/** Loop mode */,
            PlayModeRetrace/** Retrace mode */
        };

        /** Definitions of the animation speed control type. */
        enum AnimationSpeedControlType
        {
            AnimationSpeedControlTypeRealTime/** Keep animation progress consistent with the real time */,
            AnimationSpeedControlTypeStepByStep/** Play step by step */
        };

        /** Definitions of post articulation and spreadsheet run active view type*/
        enum ActiveView
        {
            ActiveViewAll/** Articulation or Spreadsheet Run in all views */,
            ActiveViewWork/** Articulation or Spreadsheet Run in work view only */
        };

        /** Defines the redefine state of a property of an occurrence of an object in the assembly. */
        enum ParamOverrideState
        {
            ParamOverrideStateUndefined/** Parameter is not redefined*/,
            ParamOverrideStateOverride/** Parameter is overriden  */
        };

        /** Referenced data sources unit policy: Ignore / Apply units. */
        enum MathfunctionUnitConversionPolicy
        {
            MathfunctionUnitConversionPolicyIgnore/** ignore */ ,
            MathfunctionUnitConversionPolicyApply/** apply */ 
        };

        /** Defines the display variable type for plotting the solver inspection. */
        enum SolverPerformanceReportDisplayVariableType
        {
            SolverPerformanceReportDisplayVariableTypeSolverSummary/** Solver summary */,
            SolverPerformanceReportDisplayVariableTypeComputationSummary/** Computation summary */,
            SolverPerformanceReportDisplayVariableTypeEvaluateConstraints/** Evaluate constraint */,
            SolverPerformanceReportDisplayVariableTypeEvaluateRightHandSide/** Evaluate right hand side*/
        };

        /** Defines the report type of the plotting the solver inspection. */
        enum SolverPerformanceReportType
        {
            SolverPerformanceReportTypeTime/** Time */,
            SolverPerformanceReportTypePercentage/** Percentage */
        };

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#endif
