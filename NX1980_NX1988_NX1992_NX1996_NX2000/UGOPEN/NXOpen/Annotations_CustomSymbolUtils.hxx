#ifndef NXOpen_ANNOTATIONS_CUSTOMSYMBOLUTILS_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_CUSTOMSYMBOLUTILS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_CustomSymbolUtils.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class CustomSymbolUtils;
    }
    namespace Annotations
    {
        class CustomSymbolUtilsImpl;

        /// \cond NX_NO_DOC 
        /** This class is a utility class containing functions for CustomSymbol. 
         <br>  Created in NX1980.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  CustomSymbolUtils
        {
            private: CustomSymbolUtilsImpl * m_customsymbolutils_impl;
            public: ~CustomSymbolUtils();

            /// \cond NX_NO_DOC 
            /** Get the custom symbol list from given folder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void GetSymbolList
            (
                const NXString & path /** full directory path */,
                std::vector<NXString> & subFolderNames /** subfolder list */,
                std::vector<NXString> & symbolNames /** symbol list */,
                std::vector<NXString> & symbolIcons /** icon list */
            );
            /** Get the custom symbol list from given folder 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            void GetSymbolList
            (
                const char * path /** full directory path */,
                std::vector<NXString> & subFolderNames /** subfolder list */,
                std::vector<NXString> & symbolNames /** symbol list */,
                std::vector<NXString> & symbolIcons /** icon list */
            );

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
