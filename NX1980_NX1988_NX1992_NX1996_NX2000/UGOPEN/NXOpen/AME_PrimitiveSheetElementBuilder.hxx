#ifndef NXOpen_AME_PRIMITIVESHEETELEMENTBUILDER_HXX_INCLUDED
#define NXOpen_AME_PRIMITIVESHEETELEMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_PrimitiveSheetElementBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_PageObject.hxx>
#include <NXOpen/AME_PrimitiveSheetElementTypes.hxx>
#include <NXOpen/Diagramming_CannedAnnotationBuilder.hxx>
#include <NXOpen/Diagramming_SheetElement.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class PrimitiveSheetElementBuilder;
    }
    namespace AME
    {
        class PageObject;
    }
    class Builder;
    namespace Diagramming
    {
        class Annotation;
    }
    namespace Diagramming
    {
        class CannedAnnotationBuilder;
    }
    namespace Diagramming
    {
        class SheetElement;
    }
    namespace AME
    {
        class _PrimitiveSheetElementBuilderBuilder;
        class PrimitiveSheetElementBuilderImpl;
        /** Represents builder for  Primitive Sheet Element  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreatePrimitiveSheetElementBuilder  NXOpen::AME::AMEManager::CreatePrimitiveSheetElementBuilder @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  PrimitiveSheetElementBuilder : public NXOpen::Builder
        {
            /** represents the type of primitive sheet element */
            public: enum PrimitiveType
            {
                PrimitiveTypeLine/** line */ ,
                PrimitiveTypeCircle/** circle */ ,
                PrimitiveTypeRectangle/** rectangle */ ,
                PrimitiveTypeImage/** image */ ,
                PrimitiveTypeNote/** note */ 
            };

            private: PrimitiveSheetElementBuilderImpl * m_primitivesheetelementbuilder_impl;
            private: friend class  _PrimitiveSheetElementBuilderBuilder;
            protected: PrimitiveSheetElementBuilder();
            public: ~PrimitiveSheetElementBuilder();
            /** Set the locations on page. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetLocations
            (
                const std::vector<NXOpen::Point2d> & locations /** locations */ 
            );
            /** Method to create the Sheet Element 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::SheetElement * CreatePrimitiveSheetElement
            (
                NXOpen::AME::PageObject * pageObject /** pageobject */ 
            );
            /**Sets  the type of primitive 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetType
            (
                NXOpen::AME::PrimitiveSheetElementBuilder::PrimitiveType primitiveType /** primitivetype */ 
            );
            /**Returns  the type of primitive 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PrimitiveSheetElementBuilder::PrimitiveType Type
            (
            );
            /**Returns  the LetteringAngle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PrimitiveSheetElementBuilderOfNoteLetteringangle LetteringAngle
            (
            );
            /**Sets  the LetteringAngle 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetLetteringAngle
            (
                NXOpen::AME::PrimitiveSheetElementBuilderOfNoteLetteringangle letteringAngle /** letteringangle */ 
            );
            /**Returns  the TextAnchor 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PrimitiveSheetElementBuilderOfNoteAnchor Anchor
            (
            );
            /**Sets  the TextAnchor 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAnchor
            (
                NXOpen::AME::PrimitiveSheetElementBuilderOfNoteAnchor anchor /** anchor */ 
            );
            /**Returns  the AnnotationBuilder. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::CannedAnnotationBuilder * AnnotationBuilder
            (
            );
            /**Sets  the AnnotationBuilder. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAnnotationBuilder
            (
                NXOpen::Diagramming::CannedAnnotationBuilder * annotation /** annotation */ 
            );
            /**Returns  the path of image file which is being imported 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString FileToImport
            (
            );
            /**Sets  the path of image file which is being imported 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFileToImport
            (
                const NXString & fileToImport /** filetoimport */ 
            );
            /**Sets  the path of image file which is being imported 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetFileToImport
            (
                const char * fileToImport /** filetoimport */ 
            );
            /** The SelectedNodeTags 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SelectedNodesTag
            (
                const std::vector<NXOpen::Diagramming::Annotation *> & selectedNodes /** selectednodes */ 
            );
            /** The Compare Data list 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetCompareData
            (
                std::vector<NXString> & styleName /** stylename */ ,
                std::vector<NXString> & changedValues /** changedvalues */ ,
                std::vector<NXString> & isStyleChanged /** isstylechanged */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
