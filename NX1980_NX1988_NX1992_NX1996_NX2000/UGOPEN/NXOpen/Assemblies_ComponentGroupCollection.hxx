#ifndef NXOpen_ASSEMBLIES_COMPONENTGROUPCOLLECTION_HXX_INCLUDED
#define NXOpen_ASSEMBLIES_COMPONENTGROUPCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Assemblies_ComponentGroupCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_assemblies_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Assemblies
    {
        class ComponentGroupCollection;
    }
    class Part;
    namespace Assemblies
    {
        class ComponentGroup;
    }
    namespace Assemblies
    {
        class ComponentGroupCollectionImpl;
        /** 
             @brief  Contains a collection of Component Groups a @link NXOpen::Assemblies::ComponentGroup NXOpen::Assemblies::ComponentGroup@endlink 
            that are defined within an Assembly part.  

         
             <br> To obtain an instance of this class, refer to @link NXOpen::Part  NXOpen::Part @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_ASSEMBLIESEXPORT  ComponentGroupCollection : public NXOpen::TaggedObjectCollection
        {
            private: ComponentGroupCollectionImpl * m_componentgroupcollection_impl;
            private: NXOpen::Part* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ComponentGroupCollection(NXOpen::Part *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ComponentGroupCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Assemblies::ComponentGroupCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Assemblies::ComponentGroup *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Assemblies::ComponentGroupCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_ASSEMBLIESEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_ASSEMBLIESEXPORT  void next();
                NXOpen::Assemblies::ComponentGroupCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link  NXOpen::Assemblies::ComponentGroup   NXOpen::Assemblies::ComponentGroup @endlink  with the given identifier as recorded in a journal. 
                   An object may not return the same value as its JournalIdentifier in different versions of 
                   the software. However newer versions of the software should find the same object when 
                   FindObject is passed older versions of its journal identifier. In general, this method 
                   should not be used in handwritten code and exists to support record and playback of journals.

                   An exception will be thrown if no object can be found with the given journal identifier.  @return  ComponentGroup with this identifier 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::ComponentGroup * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the ComponentGroup you want */
            );
            /** Finds the @link  NXOpen::Assemblies::ComponentGroup   NXOpen::Assemblies::ComponentGroup @endlink  with the given identifier as recorded in a journal. 
                   An object may not return the same value as its JournalIdentifier in different versions of 
                   the software. However newer versions of the software should find the same object when 
                   FindObject is passed older versions of its journal identifier. In general, this method 
                   should not be used in handwritten code and exists to support record and playback of journals.

                   An exception will be thrown if no object can be found with the given journal identifier.  @return  ComponentGroup with this identifier 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Assemblies::ComponentGroup * FindObject
            (
                const char * journalIdentifier /** Identifier of the ComponentGroup you want */
            );
            /** Creates a @link NXOpen::Assemblies::ComponentGroup NXOpen::Assemblies::ComponentGroup@endlink  with the given name  @return  the ComponentGroup created 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            public: NXOpen::Assemblies::ComponentGroup * CreateComponentGroup
            (
                const NXString & name /** Name for the ComponentGroup */
            );
            /** Creates a @link NXOpen::Assemblies::ComponentGroup NXOpen::Assemblies::ComponentGroup@endlink  with the given name  @return  the ComponentGroup created 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : adv_assemblies ("ADVANCED ASSEMBLIES") */
            NXOpen::Assemblies::ComponentGroup * CreateComponentGroup
            (
                const char * name /** Name for the ComponentGroup */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
