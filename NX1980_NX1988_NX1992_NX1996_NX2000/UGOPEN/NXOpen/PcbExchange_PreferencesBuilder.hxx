#ifndef NXOpen_PCBEXCHANGE_PREFERENCESBUILDER_HXX_INCLUDED
#define NXOpen_PCBEXCHANGE_PREFERENCESBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PcbExchange_PreferencesBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PcbExchange_AreaMapping.hxx>
#include <NXOpen/PcbExchange_EntityFilter.hxx>
#include <NXOpen/libnxopencpp_pcbexchange_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PcbExchange
    {
        class PreferencesBuilder;
    }
    class Builder;
    class Expression;
    class NXColor;
    namespace PcbExchange
    {
        class AreaMapping;
    }
    namespace PcbExchange
    {
        class EntityFilter;
    }
    namespace PcbExchange
    {
        class _PreferencesBuilderBuilder;
        class PreferencesBuilderImpl;
        /** Represents a builder to create or edit PCB exchange preferences <br> To create a new instance of this class, use @link NXOpen::PcbExchange::Manager::CreatePreferencesBuilder  NXOpen::PcbExchange::Manager::CreatePreferencesBuilder @endlink  <br> 
         <br>  Created in NX1926.0.0.  <br>  
        */
        class NXOPENCPP_PCBEXCHANGEEXPORT  PreferencesBuilder : public NXOpen::Builder
        {
            /** Defines the setting source. */
            public: enum SettingsSourceTypeName
            {
                SettingsSourceTypeNameIniFiles/** ini files */ ,
                SettingsSourceTypeNameSpecifiedSettingsFolder/** specified settings folder */ ,
                SettingsSourceTypeNameCustomerDefaults/** customer defaults */ 
            };

            /** Defines how to create the PCA name. */
            public: enum DefaultPcaNameTypeName
            {
                DefaultPcaNameTypeNameCurrentNXModel/** current nxmodel */ ,
                DefaultPcaNameTypeNameECADModelName/** ecadmodel name */ ,
                DefaultPcaNameTypeNameSpecifyAtImport/** specify at import */ 
            };

            /** Defines the component load options. */
            public: enum ComponentLoadOptionsTypeName
            {
                ComponentLoadOptionsTypeNameLoadAndCreateAssemblyComponents/** load and create assembly components */ ,
                ComponentLoadOptionsTypeNameCreateBodiesOnly/** create bodies only */ ,
                ComponentLoadOptionsTypeNameLoadAssemblyComponentsCreateBodies/** load assembly components create bodies */ 
            };

            /** Defines the way to group components. */
            public: enum GroupEntityComponentsByTypeName
            {
                GroupEntityComponentsByTypeNameNone/** none */ ,
                GroupEntityComponentsByTypeNameType/** type */ ,
                GroupEntityComponentsByTypeNameLayer/** layer */ 
            };

            /** Defines the thickness source. */
            public: enum BoardThicknessSourceTypeName
            {
                BoardThicknessSourceTypeNameFromPart/** from part */ ,
                BoardThicknessSourceTypeNameSpecify/** specify */ 
            };

            /** Defines the options where new components are created. */
            public: enum CreateNewComponentsInTypeName
            {
                CreateNewComponentsInTypeNameDirectoryOfECADFiles/** directory of ecadfiles */ ,
                CreateNewComponentsInTypeNameDirectoryOfNXParts/** directory of nxparts */ ,
                CreateNewComponentsInTypeNameSpecify/** specify */ 
            };

            /** Defines the components height source. */
            public: enum ComponentsHeightFromTypeName
            {
                ComponentsHeightFromTypeNameFootprintDefinition/** footprint definition */ ,
                ComponentsHeightFromTypeNamePartDefinition/** part definition */ 
            };

            /** Defines the components model type for thermal model. 
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::PcbExchange::PreferencesBuilder::ResistorModelTypeName NXOpen::PcbExchange::PreferencesBuilder::ResistorModelTypeName@endlink  instead. <br>  
            */
            public: enum NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::PcbExchange::PreferencesBuilder::ResistorModelTypeName instead.") ComponentsModelTypeName
            {
                ComponentsModelTypeNameZeroResistor/** zero resistor */ ,
                ComponentsModelTypeNameOneResistor/** one resistor */ ,
                ComponentsModelTypeNameTwoResistor/** two resistor */ ,
                ComponentsModelTypeNameNone/** none */ 
            };

            /** Defines the default resistor model type for thermal simulations. */
            public: enum ResistorModelTypeName
            {
                ResistorModelTypeNameNone/** none */ ,
                ResistorModelTypeNameDissipationOnly/** dissipation only */ ,
                ResistorModelTypeNameThetaCB/** theta cb */ ,
                ResistorModelTypeNameThetaJCJB/** theta jcjb */ ,
                ResistorModelTypeNameThetaJCCB/** theta jccb */ 
            };

            /** Defines the components element size options. */
            public: enum ComponentsElementSizeOptionsTypeName
            {
                ComponentsElementSizeOptionsTypeNameAuto/** auto */ ,
                ComponentsElementSizeOptionsTypeNameSpecify/** specify */ 
            };

            /** Defines the components element thickness options. */
            public: enum ComponentsElementThicknessOptionsTypeName
            {
                ComponentsElementThicknessOptionsTypeNameNull/** null */ ,
                ComponentsElementThicknessOptionsTypeNameSpecify/** specify */ 
            };

            /** Defines the components material source. */
            public: enum ComponentsMaterialFromTypeName
            {
                ComponentsMaterialFromTypeNamePcb/** pcb */ ,
                ComponentsMaterialFromTypeNameNx/** nx */ 
            };

            /** Defines the import trace type. */
            public: enum ImportTraceMenuTypeName
            {
                ImportTraceMenuTypeNameCurves/** curves */ ,
                ImportTraceMenuTypeNameSheets/** sheets */ ,
                ImportTraceMenuTypeNameBodies/** bodies */ 
            };

            /** Defines the import pad type. */
            public: enum ImportPadMenuTypeName
            {
                ImportPadMenuTypeNameCurves/** curves */ ,
                ImportPadMenuTypeNameSheets/** sheets */ ,
                ImportPadMenuTypeNameBodies/** bodies */ 
            };

            /** Defines the import mask type. */
            public: enum ImportMaskMenuTypeName
            {
                ImportMaskMenuTypeNameCurves/** curves */ ,
                ImportMaskMenuTypeNameSheets/** sheets */ ,
                ImportMaskMenuTypeNameBodies/** bodies */ 
            };

            /** Defines the import generic type. */
            public: enum ImportGenericMenuTypeName
            {
                ImportGenericMenuTypeNameCurves/** curves */ ,
                ImportGenericMenuTypeNameSheets/** sheets */ ,
                ImportGenericMenuTypeNameBodies/** bodies */ 
            };

            /** Defines the mail protocol. */
            public: enum MailProtocolTypeName
            {
                MailProtocolTypeNameMapi/** mapi */ ,
                MailProtocolTypeNameSmtp/** smtp */ 
            };

            /** Defines the components connection to board type. */
            public: enum ComponentsConnectionToBoardTypeName
            {
                ComponentsConnectionToBoardTypeNameRbe2/** rbe2 */ ,
                ComponentsConnectionToBoardTypeNameRbe3/** rbe3 */ 
            };

            /** Defines the mesh element type for structural analysis. */
            public: enum ElementTypeForStructuralAnalysisTypeName
            {
                ElementTypeForStructuralAnalysisTypeNameCtria3/** ctria3 */ ,
                ElementTypeForStructuralAnalysisTypeNameCquad4/** cquad4 */ ,
                ElementTypeForStructuralAnalysisTypeNameCtria6/** ctria6 */ ,
                ElementTypeForStructuralAnalysisTypeNameCquad8/** cquad8 */ 
            };

            /** Defines the board thickness source for structural analysis. */
            public: enum ThicknessSourceForStructuralAnalysisTypeName
            {
                ThicknessSourceForStructuralAnalysisTypeNameFromPart/** from part */ ,
                ThicknessSourceForStructuralAnalysisTypeNameSpecify/** specify */ 
            };

            /** Defines the mesh type for structural analysis. */
            public: enum ModelForStructuralAnalysisTypeName
            {
                ModelForStructuralAnalysisTypeNameSingleLayer/** single layer */ ,
                ModelForStructuralAnalysisTypeNameMultiLayer/** multi layer */ 
            };

            /** Defines the mesh type for thermal analysis. */
            public: enum ModelForThermalAnalysisTypeName
            {
                ModelForThermalAnalysisTypeNameSingleLayer/** single layer */ ,
                ModelForThermalAnalysisTypeNameTopAndBottom/** top and bottom */ ,
                ModelForThermalAnalysisTypeNameMultiLayer/** multi layer */ ,
                ModelForThermalAnalysisTypeNameSolid/** solid */ 
            };

            /** Defines the algorithm for thermal analysis. */
            public: enum ThermalAlgorithmTypeName
            {
                ThermalAlgorithmTypeNameDiscretized/** discretized */ ,
                ThermalAlgorithmTypeNameEquivalent/** equivalent */ 
            };

            /** Defines the algorithm for structural analysis. */
            public: enum StructuralAlgorithmTypeName
            {
                StructuralAlgorithmTypeNameEquivalent/** equivalent */ 
            };

            private: PreferencesBuilderImpl * m_preferencesbuilder_impl;
            private: friend class  _PreferencesBuilderBuilder;
            protected: PreferencesBuilder();
            public: ~PreferencesBuilder();
            /**Returns  the settings source. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::SettingsSourceTypeName SettingsSource
            (
            );
            /**Sets  the settings source. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSettingsSource
            (
                NXOpen::PcbExchange::PreferencesBuilder::SettingsSourceTypeName mDefaultSettingsSources /** mdefaultsettingssources */ 
            );
            /**Returns  the ini directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SpecifiedSettingsFolder
            (
            );
            /**Sets  the ini directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecifiedSettingsFolder
            (
                const NXString & settingsFolder /** settingsfolder */ 
            );
            /**Sets  the ini directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetSpecifiedSettingsFolder
            (
                const char * settingsFolder /** settingsfolder */ 
            );
            /**Returns  the read/write directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ReadWriteDir
            (
            );
            /**Sets  the read/write directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReadWriteDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the read/write directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetReadWriteDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the ECAD files directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BrowseEcadFilesFromDir
            (
            );
            /**Sets  the ECAD files directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBrowseEcadFilesFromDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the ECAD files directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetBrowseEcadFilesFromDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the ECAD file pre processor text. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EcadFilePreProcessor
            (
            );
            /**Sets  the ECAD file pre processor text. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEcadFilePreProcessor
            (
                const NXString & mEcadFilePreProcessor /** mecadfilepreprocessor */ 
            );
            /**Sets  the ECAD file pre processor text. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetEcadFilePreProcessor
            (
                const char * mEcadFilePreProcessor /** mecadfilepreprocessor */ 
            );
            /**Returns  the ECAD file post processor text. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EcadFilePostProcessor
            (
            );
            /**Sets  the ECAD file post processor text. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEcadFilePostProcessor
            (
                const NXString & mEcadFilePostProcessor /** mecadfilepostprocessor */ 
            );
            /**Sets  the ECAD file post processor text. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetEcadFilePostProcessor
            (
                const char * mEcadFilePostProcessor /** mecadfilepostprocessor */ 
            );
            /**Returns  the IDF float width. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int IdfFloatWidth
            (
            );
            /**Sets  the IDF float width. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIdfFloatWidth
            (
                int mIdfFloatWidth /** midffloatwidth */ 
            );
            /**Returns  the IDF float precision. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int IdfFloatPrecision
            (
            );
            /**Sets  the IDF float precision. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetIdfFloatPrecision
            (
                int mIdfFloatPrecision /** midffloatprecision */ 
            );
            /**Returns  the ECAD float tolerance. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EcadFloatTolerance
            (
            );
            /**Returns  the error checking state. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ErrorChecking
            (
            );
            /**Sets  the error checking state. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetErrorChecking
            (
                bool mErrorChecking /** merrorchecking */ 
            );
            /**Returns  the flag indicating whether to automatically save all created parts. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool AutomaticallySaveAllCreatedParts
            (
            );
            /**Sets  the flag indicating whether to automatically save all created parts. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAutomaticallySaveAllCreatedParts
            (
                bool mAutomaticallySaveAllCreatedParts /** mautomaticallysaveallcreatedparts */ 
            );
            /**Returns  the flag indicating whether to compare primary pin locations. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ComparePrimaryPinLocations
            (
            );
            /**Sets  the flag indicating whether to compare primary pin locations. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComparePrimaryPinLocations
            (
                bool mComparePrimaryPinLocations /** mcompareprimarypinlocations */ 
            );
            /**Returns  the default PCA name. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::DefaultPcaNameTypeName DefaultPcaName
            (
            );
            /**Sets  the default PCA name. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultPcaName
            (
                NXOpen::PcbExchange::PreferencesBuilder::DefaultPcaNameTypeName mDefaultPcaName /** mdefaultpcaname */ 
            );
            /**Returns  the PCA name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PcaNamePrefix
            (
            );
            /**Sets  the PCA name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPcaNamePrefix
            (
                const NXString & mPcaNamePrefix /** mpcanameprefix */ 
            );
            /**Sets  the PCA name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPcaNamePrefix
            (
                const char * mPcaNamePrefix /** mpcanameprefix */ 
            );
            /**Returns  the PCA name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PcaNameSuffix
            (
            );
            /**Sets  the PCA name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPcaNameSuffix
            (
                const NXString & mPcaNameSuffix /** mpcanamesuffix */ 
            );
            /**Sets  the PCA name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPcaNameSuffix
            (
                const char * mPcaNameSuffix /** mpcanamesuffix */ 
            );
            /**Returns  the flag indicating whether to create the board as an assembly component. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool BoardAsAssemblyComponent
            (
            );
            /**Sets  the flag indicating whether to create the board as an assembly component. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardAsAssemblyComponent
            (
                bool mBoardAsAssemblyComponent /** mboardasassemblycomponent */ 
            );
            /**Returns  the board name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardNamePrefix
            (
            );
            /**Sets  the board name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardNamePrefix
            (
                const NXString & mBoardNamePrefix /** mboardnameprefix */ 
            );
            /**Sets  the board name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetBoardNamePrefix
            (
                const char * mBoardNamePrefix /** mboardnameprefix */ 
            );
            /**Returns  the board name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString BoardNameSuffix
            (
            );
            /**Sets  the board name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardNameSuffix
            (
                const NXString & mBoardNameSuffix /** mboardnamesuffix */ 
            );
            /**Sets  the board name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetBoardNameSuffix
            (
                const char * mBoardNameSuffix /** mboardnamesuffix */ 
            );
            /**Returns  the component load options. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ComponentLoadOptionsTypeName ComponentLoadOptions
            (
            );
            /**Sets  the component load options. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentLoadOptions
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentLoadOptionsTypeName mComponentLoadOptions /** mcomponentloadoptions */ 
            );
            /**Returns  the component name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ComponentNamePrefix
            (
            );
            /**Sets  the component name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentNamePrefix
            (
                const NXString & mComponentNamePrefix /** mcomponentnameprefix */ 
            );
            /**Sets  the component name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetComponentNamePrefix
            (
                const char * mComponentNamePrefix /** mcomponentnameprefix */ 
            );
            /**Returns  the component name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ComponentNameSuffix
            (
            );
            /**Sets  the component name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentNameSuffix
            (
                const NXString & mComponentNameSuffix /** mcomponentnamesuffix */ 
            );
            /**Sets  the component name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetComponentNameSuffix
            (
                const char * mComponentNameSuffix /** mcomponentnamesuffix */ 
            );
            /**Returns  the flag indicating whether to create areas as assembly components. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool AreasAsAssemblyComponents
            (
            );
            /**Sets  the flag indicating whether to create areas as assembly components. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAreasAsAssemblyComponents
            (
                bool mAreasAsAssemblyComponents /** mareasasassemblycomponents */ 
            );
            /**Returns  the area name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AreaNamePrefix
            (
            );
            /**Sets  the area name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAreaNamePrefix
            (
                const NXString & mAreaNamePrefix /** mareanameprefix */ 
            );
            /**Sets  the area name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetAreaNamePrefix
            (
                const char * mAreaNamePrefix /** mareanameprefix */ 
            );
            /**Returns  the area name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AreaNameSuffix
            (
            );
            /**Sets  the area name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAreaNameSuffix
            (
                const NXString & mAreaNameSuffix /** mareanamesuffix */ 
            );
            /**Sets  the area name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetAreaNameSuffix
            (
                const char * mAreaNameSuffix /** mareanamesuffix */ 
            );
            /**Returns  the group entity option. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::GroupEntityComponentsByTypeName GroupEntityComponentsBy
            (
            );
            /**Sets  the group entity option. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGroupEntityComponentsBy
            (
                NXOpen::PcbExchange::PreferencesBuilder::GroupEntityComponentsByTypeName mGroupEntityComponentsBy /** mgroupentitycomponentsby */ 
            );
            /**Returns  the board thickness source for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::BoardThicknessSourceTypeName BoardThicknessSource
            (
            );
            /**Sets  the board thickness source for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardThicknessSource
            (
                NXOpen::PcbExchange::PreferencesBuilder::BoardThicknessSourceTypeName mBoardThicknessSource /** mboardthicknesssource */ 
            );
            /**Returns  the board color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BoardColor
            (
            );
            /**Sets  the board color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardColor
            (
                NXOpen::NXColor * mBoardColor /** mboardcolor */ 
            );
            /**Returns  the board mesh element color for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * BoardElementColor
            (
            );
            /**Sets  the board mesh element color for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardElementColor
            (
                NXOpen::NXColor * mBoardElementColor /** mboardelementcolor */ 
            );
            /**Returns  the mesh element color for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ElementColorForStructuralAnalysis
            (
            );
            /**Sets  the mesh element color for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetElementColorForStructuralAnalysis
            (
                NXOpen::NXColor * mElementColorForStructuralAnalysis /** melementcolorforstructuralanalysis */ 
            );
            /**Returns  the board translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int BoardTranslucency
            (
            );
            /**Sets  the board translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardTranslucency
            (
                int mBoardTranslucency /** mboardtranslucency */ 
            );
            /**Returns  the board layer. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int BoardLayer
            (
            );
            /**Sets  the board layer. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBoardLayer
            (
                int mBoardLayer /** mboardlayer */ 
            );
            /**Returns  the board default thickness. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoardDefaultThickness
            (
            );
            /**Returns  the board mesh element size for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoardElementSize
            (
            );
            /**Returns  the specified board thickness for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoardThickness
            (
            );
            /**Returns  the trace thickness for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoardDefaultTraceThickness
            (
            );
            /**Returns  the plating thickness for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BoardDefaultPlatingThickness
            (
            );
            /**Returns  the default hole diameter. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * HolesDefaultDiameter
            (
            );
            /**Returns  the create new components option. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::CreateNewComponentsInTypeName CreateNewComponentsIn
            (
            );
            /**Sets  the create new components option. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCreateNewComponentsIn
            (
                NXOpen::PcbExchange::PreferencesBuilder::CreateNewComponentsInTypeName mCreateNewComponentsIn /** mcreatenewcomponentsin */ 
            );
            /**Returns  the directory where new components are created. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString CreateNewComponentInDir
            (
            );
            /**Sets  the directory where new components are created. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCreateNewComponentInDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the directory where new components are created. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetCreateNewComponentInDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the directory where new components are created if the option is 'Specify'. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SpecifyNewCompDir
            (
            );
            /**Sets  the directory where new components are created if the option is 'Specify'. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpecifyNewCompDir
            (
                const NXString & mSpecifyNewCompDir /** mspecifynewcompdir */ 
            );
            /**Sets  the directory where new components are created if the option is 'Specify'. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetSpecifyNewCompDir
            (
                const char * mSpecifyNewCompDir /** mspecifynewcompdir */ 
            );
            /**Returns  the component color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ComponentsColor
            (
            );
            /**Sets  the component color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsColor
            (
                NXOpen::NXColor * mComponentsColor /** mcomponentscolor */ 
            );
            /**Returns  the component translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int ComponentsTranslucency
            (
            );
            /**Sets  the component translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsTranslucency
            (
                int mComponentsTranslucency /** mcomponentstranslucency */ 
            );
            /**Returns  the component height source. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ComponentsHeightFromTypeName ComponentsHeightFrom
            (
            );
            /**Sets  the component height source. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsHeightFrom
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentsHeightFromTypeName mComponentsHeightFrom /** mcomponentsheightfrom */ 
            );
            /**Returns  the component default height. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsDefaultHeight
            (
            );
            /**Returns  the component model for thermal analysis. 
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::PcbExchange::PreferencesBuilder::ResistorModel NXOpen::PcbExchange::PreferencesBuilder::ResistorModel@endlink  instead. <br>  

             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::PcbExchange::PreferencesBuilder::ResistorModel instead.") NXOpen::PcbExchange::PreferencesBuilder::ComponentsModelTypeName ComponentsModel
            (
            );
            /**Sets  the component model for thermal analysis. 
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::PcbExchange::PreferencesBuilder::SetResistorModel NXOpen::PcbExchange::PreferencesBuilder::SetResistorModel@endlink  instead. <br>  

             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::PcbExchange::PreferencesBuilder::SetResistorModel instead.") void SetComponentsModel
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentsModelTypeName mComponentsModel /** mcomponentsmodel */ 
            );
            /**Returns  the resistor model for thermal analysis. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ResistorModelTypeName ResistorModel
            (
            );
            /**Sets  the resistor model for thermal analysis. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetResistorModel
            (
                NXOpen::PcbExchange::PreferencesBuilder::ResistorModelTypeName mComponentsModel /** mcomponentsmodel */ 
            );
            /**Returns  the component-to-board resistance for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsThetaCB
            (
            );
            /**Returns  the component-to-junction resistance for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsThetaJC
            (
            );
            /**Returns  the junction-to-board resistance for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsThetaJB
            (
            );
            /**Returns  the junction capacitance for thermal analysis. 
             <br>  @deprecated Deprecated in NX1980.0.0.  Use @link NXOpen::PcbExchange::PreferencesBuilder::ComponentsJunctionCapacitance NXOpen::PcbExchange::PreferencesBuilder::ComponentsJunctionCapacitance@endlink  instead. <br>  

             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1980.0.0.  Use NXOpen::PcbExchange::PreferencesBuilder::ComponentsJunctionCapacitance instead.") NXOpen::Expression * ComponentsJunctionCapacity
            (
            );
            /**Returns  the junction capacitance for thermal analysis. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsJunctionCapacitance
            (
            );
            /**Returns  the maximum component temperature for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsTmax
            (
            );
            /**Returns  the maximum case temperature for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsTmaxCase
            (
            );
            /**Returns  the maximum junction temperature for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsTmaxJunction
            (
            );
            /**Returns  the dissipation rate for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsDissipation
            (
            );
            /**Returns  the component mesh element size option for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ComponentsElementSizeOptionsTypeName ComponentsElementSizeOptions
            (
            );
            /**Sets  the component mesh element size option for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsElementSizeOptions
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentsElementSizeOptionsTypeName mComponentsElementSizeOptions /** mcomponentselementsizeoptions */ 
            );
            /**Returns  the component thickness option for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ComponentsElementThicknessOptionsTypeName ComponentsElementThicknessOptions
            (
            );
            /**Sets  the component thickness option for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsElementThicknessOptions
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentsElementThicknessOptionsTypeName mComponentsElementThicknessOptions /** mcomponentselementthicknessoptions */ 
            );
            /**Returns  the component mesh element size for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsElementSizeValue
            (
            );
            /**Returns  the component thickness for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsElementThicknessValue
            (
            );
            /**Returns  the component mesh element color for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * ComponentsElementColor
            (
            );
            /**Sets  the component mesh element color for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsElementColor
            (
                NXOpen::NXColor * mComponentsElementColor /** mcomponentselementcolor */ 
            );
            /**Returns  the source library for component materials. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ComponentsMaterialFromTypeName ComponentsMaterialFrom
            (
            );
            /**Sets  the source library for component materials. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsMaterialFrom
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentsMaterialFromTypeName mComponentsMaterialFrom /** mcomponentsmaterialfrom */ 
            );
            /**Returns  the component case material. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: int ComponentsCaseMaterial
            (
            );
            /**Sets  the component case material. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsCaseMaterial
            (
                int mMaterial /** mmaterial */ 
            );
            /**Returns  the component XML file. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ComponentXMLFileBrowse
            (
            );
            /**Sets  the component XML file. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentXMLFileBrowse
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the component XML file. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetComponentXMLFileBrowse
            (
                const char * filename /** filename */ 
            );
            /**Returns  the keepin area color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * KeepInColor
            (
            );
            /**Sets  the keepin area color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepInColor
            (
                NXOpen::NXColor * mKeepInColor /** mkeepincolor */ 
            );
            /**Returns  the keepin area translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepInTranslucency
            (
            );
            /**Sets  the keepin area translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepInTranslucency
            (
                int mKeepInTranslucency /** mkeepintranslucency */ 
            );
            /**Returns  the keepin area layer. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepInLayer
            (
            );
            /**Sets  the keepin area layer. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepInLayer
            (
                int mKeepInLayer /** mkeepinlayer */ 
            );
            /**Returns  the keepout area color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * KeepOutColor
            (
            );
            /**Sets  the keepout area color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepOutColor
            (
                NXOpen::NXColor * mKeepOutColor /** mkeepoutcolor */ 
            );
            /**Returns  the keepout area translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepOutTranslucency
            (
            );
            /**Sets  the keepout area translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepOutTranslucency
            (
                int mKeepOutTranslucency /** mkeepouttranslucency */ 
            );
            /**Returns  the keepout area layer. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int KeepOutLayer
            (
            );
            /**Sets  the keepout area layer. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetKeepOutLayer
            (
                int mKeepOutLayer /** mkeepoutlayer */ 
            );
            /**Returns  the other area color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * OtherColor
            (
            );
            /**Sets  the other area color. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOtherColor
            (
                NXOpen::NXColor * mOtherColor /** mothercolor */ 
            );
            /**Returns  the other area translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int OtherTranslucency
            (
            );
            /**Sets  the other area translucency. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOtherTranslucency
            (
                int mOtherTranslucency /** mothertranslucency */ 
            );
            /**Returns  the other area layer. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int OtherLayer
            (
            );
            /**Sets  the other area layer. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOtherLayer
            (
                int mOtherLayer /** motherlayer */ 
            );
            /**Returns  the flag indicating whether to import traces. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportTraceToggle
            (
            );
            /**Sets  the flag indicating whether to import traces. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportTraceToggle
            (
                bool mImportTraceToggle /** mimporttracetoggle */ 
            );
            /**Returns  the import trace type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ImportTraceMenuTypeName ImportTraceMenu
            (
            );
            /**Sets  the import trace type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportTraceMenu
            (
                NXOpen::PcbExchange::PreferencesBuilder::ImportTraceMenuTypeName mImportTraceMenu /** mimporttracemenu */ 
            );
            /**Returns  the trace max number. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int TraceMaxNumber
            (
            );
            /**Sets  the trace max number. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTraceMaxNumber
            (
                int mTraceMaxNumber /** mtracemaxnumber */ 
            );
            /**Returns  the trace name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TraceNamePrefix
            (
            );
            /**Sets  the trace name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTraceNamePrefix
            (
                const NXString & mTraceNamePrefix /** mtracenameprefix */ 
            );
            /**Sets  the trace name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetTraceNamePrefix
            (
                const char * mTraceNamePrefix /** mtracenameprefix */ 
            );
            /**Returns  the trace name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString TraceNameSuffix
            (
            );
            /**Sets  the trace name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTraceNameSuffix
            (
                const NXString & mtraceNameSuffix /** mtracenamesuffix */ 
            );
            /**Sets  the trace name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetTraceNameSuffix
            (
                const char * mtraceNameSuffix /** mtracenamesuffix */ 
            );
            /**Returns  the flag indicating whether to import pads. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportPadToggle
            (
            );
            /**Sets  the flag indicating whether to import pads. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportPadToggle
            (
                bool mImportPadToggle /** mimportpadtoggle */ 
            );
            /**Returns  the import pad type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ImportPadMenuTypeName ImportPadMenu
            (
            );
            /**Sets  the import pad type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportPadMenu
            (
                NXOpen::PcbExchange::PreferencesBuilder::ImportPadMenuTypeName mImportPadMenu /** mimportpadmenu */ 
            );
            /**Returns  the pad max number. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int PadMaxNumber
            (
            );
            /**Sets  the pad max number. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPadMaxNumber
            (
                int mPadMaxNumber /** mpadmaxnumber */ 
            );
            /**Returns  the pad name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PadNamePrefix
            (
            );
            /**Sets  the pad name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPadNamePrefix
            (
                const NXString & mPadNamePrefix /** mpadnameprefix */ 
            );
            /**Sets  the pad name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPadNamePrefix
            (
                const char * mPadNamePrefix /** mpadnameprefix */ 
            );
            /**Returns  the pad name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PadNameSuffix
            (
            );
            /**Sets  the pad name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPadNameSuffix
            (
                const NXString & mPadNameSuffix /** mpadnamesuffix */ 
            );
            /**Sets  the pad name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetPadNameSuffix
            (
                const char * mPadNameSuffix /** mpadnamesuffix */ 
            );
            /**Returns  the flag indicating whether to import masks. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportMaskToggle
            (
            );
            /**Sets  the flag indicating whether to import masks. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportMaskToggle
            (
                bool mImportMaskToggle /** mimportmasktoggle */ 
            );
            /**Returns  the import mask type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ImportMaskMenuTypeName ImportMaskMenu
            (
            );
            /**Sets  the import mask type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportMaskMenu
            (
                NXOpen::PcbExchange::PreferencesBuilder::ImportMaskMenuTypeName mImportMaskMenu /** mimportmaskmenu */ 
            );
            /**Returns  the mask max number. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int MaskMaxNumber
            (
            );
            /**Sets  the mask max number. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaskMaxNumber
            (
                int mMaskMaxNumber /** mmaskmaxnumber */ 
            );
            /**Returns  the mask name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MaskNamePrefix
            (
            );
            /**Sets  the mask name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaskNamePrefix
            (
                const NXString & mMaskNamePrefix /** mmasknameprefix */ 
            );
            /**Sets  the mask name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetMaskNamePrefix
            (
                const char * mMaskNamePrefix /** mmasknameprefix */ 
            );
            /**Returns  the mask name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MaskNameSuffix
            (
            );
            /**Sets  the mask name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaskNameSuffix
            (
                const NXString & mMaskNameSuffix /** mmasknamesuffix */ 
            );
            /**Sets  the mask name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetMaskNameSuffix
            (
                const char * mMaskNameSuffix /** mmasknamesuffix */ 
            );
            /**Returns  the flag indicating whether to import generic shapes. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportGenericToggle
            (
            );
            /**Sets  the flag indicating whether to import generic shapes. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportGenericToggle
            (
                bool mImportGenericToggle /** mimportgenerictoggle */ 
            );
            /**Returns  the import generic shapes type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ImportGenericMenuTypeName ImportGenericMenu
            (
            );
            /**Sets  the import generic shapes type. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportGenericMenu
            (
                NXOpen::PcbExchange::PreferencesBuilder::ImportGenericMenuTypeName mImportGenericMenu /** mimportgenericmenu */ 
            );
            /**Returns  the generic shapes max number. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: int GenericMaxNumber
            (
            );
            /**Sets  the generic shapes max number. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGenericMaxNumber
            (
                int mGenericMaxNumber /** mgenericmaxnumber */ 
            );
            /**Returns  the generic shapes name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GenericNamePrefix
            (
            );
            /**Sets  the generic shapes name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGenericNamePrefix
            (
                const NXString & mGenericNamePrefix /** mgenericnameprefix */ 
            );
            /**Sets  the generic shapes name prefix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetGenericNamePrefix
            (
                const char * mGenericNamePrefix /** mgenericnameprefix */ 
            );
            /**Returns  the generic shapes name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GenericNameSuffix
            (
            );
            /**Sets  the generic shapes name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGenericNameSuffix
            (
                const NXString & mGenericNameSuffix /** mgenericnamesuffix */ 
            );
            /**Sets  the generic shapes name suffix. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetGenericNameSuffix
            (
                const char * mGenericNameSuffix /** mgenericnamesuffix */ 
            );
            /**Returns  the flag indicating whether to group pads. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool GroupPads
            (
            );
            /**Sets  the flag indicating whether to group pads. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetGroupPads
            (
                bool mGroupPads /** mgrouppads */ 
            );
            /**Returns  the flag indicating whether to merge traces and pads. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MergeTracesAndPads
            (
            );
            /**Sets  the flag indicating whether to merge traces and pads. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMergeTracesAndPads
            (
                bool mMergeTracesAndPads /** mmergetracesandpads */ 
            );
            /**Returns  the flag indicating whether to import the negative copper shapes. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool Negative
            (
            );
            /**Sets  the flag indicating whether to import the negative copper shapes. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNegative
            (
                bool mNegative /** mnegative */ 
            );
            /**Returns  the flag indicating whether to import internal layers. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool InternalLayers
            (
            );
            /**Sets  the flag indicating whether to import internal layers. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInternalLayers
            (
                bool mInternalLayers /** minternallayers */ 
            );
            /**Returns  the flag indicating whether to import bends. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ImportBends
            (
            );
            /**Sets  the flag indicating whether to import bends. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportBends
            (
                bool mImportBends /** mimportbends */ 
            );
            /**Returns  the flag indicating whether to project the view. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProjectViewToggle
            (
            );
            /**Sets  the flag indicating whether to project the view. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProjectViewToggle
            (
                bool mProjectViewToggle /** mprojectviewtoggle */ 
            );
            /**Returns  the project view. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ProjectView
            (
            );
            /**Sets  the project view. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProjectView
            (
                const NXString & mProjectView /** mprojectview */ 
            );
            /**Sets  the project view. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetProjectView
            (
                const char * mProjectView /** mprojectview */ 
            );
            /**Returns  the flag indicating whether to export bends. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool ExportBends
            (
            );
            /**Sets  the flag indicating whether to export bends. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExportBends
            (
                bool mExportBends /** mexportbends */ 
            );
            /**Returns  the EDMD directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EdmdDir
            (
            );
            /**Sets  the EDMD directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEdmdDir
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the EDMD directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            void SetEdmdDir
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the flag indicating whether to monitor the EDMD directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MonitorEDMDToggle
            (
            );
            /**Sets  the flag indicating whether to monitor the EDMD directory. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMonitorEDMDToggle
            (
                bool mMonitorEDMDToggle /** mmonitoredmdtoggle */ 
            );
            /**Returns  the flag indicating whether to filter the MCAD model. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool FilterMcadToggle
            (
            );
            /**Sets  the flag indicating whether to filter the MCAD model. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilterMcadToggle
            (
                bool mFilterMcadToggle /** mfiltermcadtoggle */ 
            );
            /** Gets the MCAD entity filter. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EntityFilter * GetMcadEntityFilter
            (
            );
            /** Sets the MCAD entity filter. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetMcadEntityFilter
            (
                NXOpen::PcbExchange::EntityFilter * filter /** filter */ 
            );
            /**Returns  the flag indicating whether to filter the ECAD model. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool FilterEcadToggle
            (
            );
            /**Sets  the flag indicating whether to filter the ECAD model. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilterEcadToggle
            (
                bool mFilterEcadToggle /** mfilterecadtoggle */ 
            );
            /** Gets the ECAD entity filter. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::EntityFilter * GetEcadEntityFilter
            (
            );
            /** Sets the ECAD entity filter. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetEcadEntityFilter
            (
                NXOpen::PcbExchange::EntityFilter * filter /** filter */ 
            );
            /** Gets the area mapping. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::AreaMapping * GetAreaMapping
            (
            );
            /** Sets the area mapping. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : nx_pcbx_xpedition ("PCB Exchange for Xpedition") OR ug_pcb_modeler ("PCB Modeler") OR ug_pcbx_zuken ("PCB Exchange for Zuken") */
            public: void SetAreaMapping
            (
                NXOpen::PcbExchange::AreaMapping * areaMapping /** areamapping */ 
            );
            /**Returns  the flag indicating whether to send email notifications. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: bool MailNotify
            (
            );
            /**Sets  the flag indicating whether to send email notifications. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMailNotify
            (
                bool mMailNotify /** mmailnotify */ 
            );
            /**Returns  the email protocol. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::MailProtocolTypeName MailProtocol
            (
            );
            /**Sets  the email protocol. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMailProtocol
            (
                NXOpen::PcbExchange::PreferencesBuilder::MailProtocolTypeName mMailProtocol /** mmailprotocol */ 
            );
            /** Returns the email recipients. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetMailRecipients
            (
            );
            /** Sets the email recipients. 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMailRecipients
            (
                const std::vector<NXString> & mMailRecipients /** The mail recipient */
            );
            /**Returns  the default component mass for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ComponentsDefaultMass
            (
            );
            /**Returns  the mesh element size for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ElementSizeForStructuralAnalysis
            (
            );
            /**Returns  the board thickness for structural analysis when the thickness source is "Specify". 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ThicknessForStructuralAnalysis
            (
            );
            /**Returns  the board mesh type for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ModelForStructuralAnalysisTypeName ModelForStructuralAnalysis
            (
            );
            /**Sets  the board mesh type for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetModelForStructuralAnalysis
            (
                NXOpen::PcbExchange::PreferencesBuilder::ModelForStructuralAnalysisTypeName mModelForStructuralAnalysis /** mmodelforstructuralanalysis */ 
            );
            /**Returns  the board mesh type for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ModelForThermalAnalysisTypeName ModelForThermalAnalysis
            (
            );
            /**Sets  the board mesh type for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetModelForThermalAnalysis
            (
                NXOpen::PcbExchange::PreferencesBuilder::ModelForThermalAnalysisTypeName mModelForThermalAnalysis /** mmodelforthermalanalysis */ 
            );
            /**Returns  the algorithm to calculate board properties for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ThermalAlgorithmTypeName ThermalAlgorithm
            (
            );
            /**Sets  the algorithm to calculate board properties for thermal analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetThermalAlgorithm
            (
                NXOpen::PcbExchange::PreferencesBuilder::ThermalAlgorithmTypeName mThermalAlgorithm /** mthermalalgorithm */ 
            );
            /**Returns  the algorithm to calculate board properties for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::StructuralAlgorithmTypeName StructuralAlgorithm
            (
            );
            /**Sets  the algorithm to calculate board properties for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStructuralAlgorithm
            (
                NXOpen::PcbExchange::PreferencesBuilder::StructuralAlgorithmTypeName mStructuralAlgorithm /** mstructuralalgorithm */ 
            );
            /**Returns  the mesh element type for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ElementTypeForStructuralAnalysisTypeName ElementTypeForStructuralAnalysis
            (
            );
            /**Sets  the mesh element type for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetElementTypeForStructuralAnalysis
            (
                NXOpen::PcbExchange::PreferencesBuilder::ElementTypeForStructuralAnalysisTypeName mElementTypeForStructuralAnalysis /** melementtypeforstructuralanalysis */ 
            );
            /**Returns  the thickness source for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ThicknessSourceForStructuralAnalysisTypeName ThicknessSourceForStructuralAnalysis
            (
            );
            /**Sets  the thickness source for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetThicknessSourceForStructuralAnalysis
            (
                NXOpen::PcbExchange::PreferencesBuilder::ThicknessSourceForStructuralAnalysisTypeName mThicknessSourceForStructuralAnalysis /** mthicknesssourceforstructuralanalysis */ 
            );
            /**Returns  the method by which components are connected to the board for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PcbExchange::PreferencesBuilder::ComponentsConnectionToBoardTypeName ComponentsConnectionToBoard
            (
            );
            /**Sets  the method by which components are connected to the board for structural analysis. 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : None */
            public: void SetComponentsConnectionToBoard
            (
                NXOpen::PcbExchange::PreferencesBuilder::ComponentsConnectionToBoardTypeName mComponentsConnectionToBoard /** mcomponentsconnectiontoboard */ 
            );
            /**Returns  the flag indicating whether to associate areas as bodies. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssociateAreaBodies
            (
            );
            /**Sets  the flag indicating whether to associate areas as bodies. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociateAreaBodies
            (
                bool associateAreaBodies /** associateareabodies */ 
            );
            /**Returns  the flag indicating whether to associate components as bodies. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssociateComponentBodies
            (
            );
            /**Sets  the flag indicating whether to associate components as bodies. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociateComponentBodies
            (
                bool associateComponentBodies /** associatecomponentbodies */ 
            );
            /**Returns  the flag indicating whether to use component model with pads if the resistor model allows it. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: bool ConnectComponentsToPads
            (
            );
            /**Sets  the flag indicating whether to use component model with pads if the resistor model allows it. 
             <br>  Created in NX1980.0.0.  <br>  
             <br> License requirements : None */
            public: void SetConnectComponentsToPads
            (
                bool connectComponentsToPads /** connectcomponentstopads */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
