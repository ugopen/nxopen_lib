#ifndef NXOpen_VISUALIZATIONDEBUGSESSION_HXX_INCLUDED
#define NXOpen_VISUALIZATIONDEBUGSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualizationDebugSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_PrimTestBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopendebugsessioncpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class VisualizationDebugSession;
    class DebugSession;
    namespace Display
    {
        class PrimTestBuilder;
    }
    class Part;
    class View;
    class VisualizationDebugSessionImpl;

    /// \cond NX_NO_DOC 
    /** Represents a class that is used for NX Visuaalization Autotest.  This 
        class should not be made available to customers 
     <br> To obtain an instance of this class, refer to @link NXOpen::DebugSession  NXOpen::DebugSession @endlink  <br> 
     <br>  Created in NX12.0.1.  <br>  
    */
    class NXOPENDEBUGSESSIONCPPEXPORT  VisualizationDebugSession
    {

        /// \cond NX_NO_DOC 
         /** Contains information of primitives rendered in a 
                @link NXOpen::View NXOpen::View@endlink .
             */
        public:
        struct ViewStatistics
        {
            public: /** indicates if necessary data has been 
                                            loaded in the scene. If False, indicates
                                            that the statistics are incomplete. This
                                            may happen if the scene data is being 
                                            loaded in the background. */bool DataLoaded;
            public: /** number of facets */int NumFacets;
            public: /** number of vertices of facet  
                                               primitives such as triangle strips, 
                                               triangles. */int NumFacetVertices;
            public: /** number of face edge polylines. This will not
                                           match number of model edges. */int NumFaceEdges;
            public: /** number of smooth face edge polylines.  
                                                 This will not match number of smooth 
                                                 model edges. */int NumSmoothFaceEdges;
            public: /** number of polylines excluding face edge 
                                           polylines */int NumPolylines;
            public: ViewStatistics() :
                DataLoaded(),
                NumFacets(),
                NumFacetVertices(),
                NumFaceEdges(),
                NumSmoothFaceEdges(),
                NumPolylines()
            {
            }
            /** Constructor for the ViewStatistics struct. */ 
            public: ViewStatistics(bool dataLoadedInitial /** indicates if necessary data has been 
                                                    loaded in the scene. If False, indicates
                                                    that the statistics are incomplete. This
                                                    may happen if the scene data is being 
                                                    loaded in the background. */, 
                    int numFacetsInitial /** number of facets */, 
                    int numFacetVerticesInitial /** number of vertices of facet  
                                                       primitives such as triangle strips, 
                                                       triangles. */, 
                    int numFaceEdgesInitial /** number of face edge polylines. This will not
                                                   match number of model edges. */, 
                    int numSmoothFaceEdgesInitial /** number of smooth face edge polylines.  
                                                         This will not match number of smooth 
                                                         model edges. */, 
                    int numPolylinesInitial /** number of polylines excluding face edge 
                                                   polylines */) :
                DataLoaded(dataLoadedInitial),
                NumFacets(numFacetsInitial),
                NumFacetVertices(numFacetVerticesInitial),
                NumFaceEdges(numFaceEdgesInitial),
                NumSmoothFaceEdges(numSmoothFaceEdgesInitial),
                NumPolylines(numPolylinesInitial)
            {
            }
        };


        /// \endcond 
        private: VisualizationDebugSessionImpl * m_visualizationdebugsession_impl;
        private: NXOpen::DebugSession* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit VisualizationDebugSession(NXOpen::DebugSession *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~VisualizationDebugSession();

        /// \cond NX_NO_DOC 
        /** Gets view statistics. View must be currently displayed view; 
                otherwise suitable error code is returned. In order to get
                accurate view statistics, this will ensure that any pending
                part load and pending scene data is loaded. For example, 
                in case of threaded part load, it will wait for part load to
                finish. If facet data is being loaded in the background threads, 
                this method will ensure that the data gets loaded before 
                acquiring scene statistics.
             
         <br>  Created in NX12.0.1.  <br>  
         <br> License requirements : None */
        public: NXOpen::VisualizationDebugSession::ViewStatistics GetViewStatistics
        (
            NXOpen::View * view /** View to inquire statistics. If NULL is
                            specified, then statistics from all views 
                            is obtained. In that case, statistics will include 
                            views that may not be active displayed views. */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Applies visualization settings to the specified displayed part. 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void ApplyVisualizationSettings
        (
            const NXString & fileSpec /** File containing visualization settings */,
            NXOpen::Part * partEid /** Displayed part */
        );
        /** Applies visualization settings to the specified displayed part. 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void ApplyVisualizationSettings
        (
            const char * fileSpec /** File containing visualization settings */,
            NXOpen::Part * partEid /** Displayed part */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Creates primitive test builder  
         <br>  Created in NX1953.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::PrimTestBuilder * CreatePrimTestBuilder
        (
            NXOpen::Part * part /** the part that will own the builder */
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Loads session visualization settings to specified file 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void LoadSessionVisualizationSettings
        (
            const NXString & fileSpec /** filespec */ 
        );
        /** Loads session visualization settings to specified file 
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        void LoadSessionVisualizationSettings
        (
            const char * fileSpec /** filespec */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Ensure all scene data loaded  
         <br>  Created in NX12.0.2.  <br>  
         <br> License requirements : None */
        public: void FinishSceneDataLoad
        (
        );

        /// \endcond 
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
