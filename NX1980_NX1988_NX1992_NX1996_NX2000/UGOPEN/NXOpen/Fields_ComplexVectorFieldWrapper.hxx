#ifndef NXOpen_FIELDS_COMPLEXVECTORFIELDWRAPPER_HXX_INCLUDED
#define NXOpen_FIELDS_COMPLEXVECTORFIELDWRAPPER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_ComplexVectorFieldWrapper.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class ComplexVectorFieldWrapper;
    }
    class Expression;
    namespace Fields
    {
        class Field;
    }
    class NXObject;
    namespace Fields
    {
        class _ComplexVectorFieldWrapperBuilder;
        class ComplexVectorFieldWrapperImpl;
        /** This class defines a complex value that is internally 
                backed up by a  field or six expressions. 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  ComplexVectorFieldWrapper : public NXOpen::NXObject
        {
            private: ComplexVectorFieldWrapperImpl * m_complexvectorfieldwrapper_impl;
            private: friend class  _ComplexVectorFieldWrapperBuilder;
            protected: ComplexVectorFieldWrapper();
            public: ~ComplexVectorFieldWrapper();
            /** Returns the indicated implementation if the wrapper is backed up by expressions; 
                        NULL otherwise  @return  existing expression or NULL 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GetExpressionByIndex
            (
                int index /** 0, 1 or 2 */
            );
            /** Sets the implementation of the wrapper to the specified expressions 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetExpressions
            (
                const std::vector<NXOpen::Expression *> & expressions /** existing expressions that will be this wrapper's value */
            );
            /** Sets the implementation of the wrapper to the specified expressions 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImaginaryExpressions
            (
                const std::vector<NXOpen::Expression *> & expressions /** existing expressions that will be this wrapper's value */
            );
            /** Returns the indicated implementation if the wrapper is backed up by expressions; 
                        NULL otherwise  @return  existing expression or NULL 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * GetImaginaryExpressionByIndex
            (
                int index /** 0, 1 or 2 */
            );
            /** Sets the implementation of the wrapper to the specified field 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetField
            (
                NXOpen::Fields::Field * field /** an existing field that will be this wrapper's value */,
                double scaleFactor /** the field will be multiplied by this scale factor when being evaluated */
            );
            /** Returns the implementation if the wrapper is backed up by a field; 
                        NULL otherwise  @return  existing field or NULL 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::Field * GetField
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
