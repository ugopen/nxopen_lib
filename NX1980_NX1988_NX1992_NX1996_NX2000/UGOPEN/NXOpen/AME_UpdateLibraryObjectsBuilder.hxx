#ifndef NXOpen_AME_UPDATELIBRARYOBJECTSBUILDER_HXX_INCLUDED
#define NXOpen_AME_UPDATELIBRARYOBJECTSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_UpdateLibraryObjectsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class UpdateLibraryObjectsBuilder;
    }
    class Builder;
    class NXObject;
    namespace AME
    {
        class _UpdateLibraryObjectsBuilderBuilder;
        class UpdateLibraryObjectsBuilderImpl;
        /** Class to define Update Library Objects  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateUpdateLibraryObjectsBuilder  NXOpen::AME::AMEManager::CreateUpdateLibraryObjectsBuilder @endlink  <br> 
         <br>  Created in NX1953.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  UpdateLibraryObjectsBuilder : public NXOpen::Builder
        {
            private: UpdateLibraryObjectsBuilderImpl * m_updatelibraryobjectsbuilder_impl;
            private: friend class  _UpdateLibraryObjectsBuilderBuilder;
            protected: UpdateLibraryObjectsBuilder();
            public: ~UpdateLibraryObjectsBuilder();
            /**Sets  the select all option of update objects builder
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectAll
            (
                bool selectAll /** selectall */ 
            );
            /**Returns  the select all option of update objects builder
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool SelectAll
            (
            );
            /**Sets  the input type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectType
            (
                const NXString & type /** type */ 
            );
            /**Sets  the input type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetSelectType
            (
                const char * type /** type */ 
            );
            /**Returns  the input type 
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString SelectType
            (
            );
            /**Sets  the input type revision
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectTypeRevision
            (
                const NXString & typeRevision /** typerevision */ 
            );
            /**Sets  the input type revision
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetSelectTypeRevision
            (
                const char * typeRevision /** typerevision */ 
            );
            /**Returns  the input type revision
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString SelectTypeRevision
            (
            );
            /** Set objects to update
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetObjectsToUpdate
            (
                const std::vector<NXOpen::NXObject *> & objectsToUpdate /** objectstoupdate */ 
            );
            /** Get objects to update
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void GetObjectsToUpdate
            (
                std::vector<NXOpen::NXObject *> & objectsToUpdate /** objectstoupdate */ 
            );
            /** Load target revision part
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * LoadTargetTypeRevision
            (
                const NXString & typeRevision /** typerevision */ 
            );
            /** Load target revision part
             <br>  Created in NX1953.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::NXObject * LoadTargetTypeRevision
            (
                const char * typeRevision /** typerevision */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
