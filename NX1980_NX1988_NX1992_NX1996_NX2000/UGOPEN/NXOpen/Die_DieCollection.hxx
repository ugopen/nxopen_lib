#ifndef NXOpen_DIE_DIECOLLECTION_HXX_INCLUDED
#define NXOpen_DIE_DIECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Die_DieCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_die_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Die
    {
        class DieCollection;
    }
    namespace Features
    {
        class FeatureCollection;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Die
    {
        class AddSurfBuilder;
    }
    namespace Die
    {
        class AddendumSectionBuilder;
    }
    namespace Die
    {
        class AddendumSectionUserDefinedBuilder;
    }
    namespace Die
    {
        class CastRelief;
    }
    namespace Die
    {
        class CastReliefBuilder;
    }
    namespace Die
    {
        class ClampingSlot;
    }
    namespace Die
    {
        class ClampingSlotBuilder;
    }
    namespace Die
    {
        class Clearance;
    }
    namespace Die
    {
        class ClearanceBuilder;
    }
    namespace Die
    {
        class CompensateRoughDataBuilder;
    }
    namespace Die
    {
        class DieAttributesBuilder;
    }
    namespace Die
    {
        class DieBooleanBuilder;
    }
    namespace Die
    {
        class DieDirectionBuilder;
    }
    namespace Die
    {
        class DieLimitsBuilder;
    }
    namespace Die
    {
        class DieLocationBuilder;
    }
    namespace Die
    {
        class DieLocationsBuilder;
    }
    namespace Die
    {
        class DiePlaneBuilder;
    }
    namespace Die
    {
        class DieShoe;
    }
    namespace Die
    {
        class DieShoeBuilder;
    }
    namespace Die
    {
        class DrawBead;
    }
    namespace Die
    {
        class DrawBeadBuilder;
    }
    namespace Die
    {
        class DrawDiePunchBuilder;
    }
    namespace Die
    {
        class FaceSheetBuilder;
    }
    namespace Die
    {
        class FillArea;
    }
    namespace Die
    {
        class FillAreaBuilder;
    }
    namespace Die
    {
        class FillBuilder;
    }
    namespace Die
    {
        class FingerClearanceNotch;
    }
    namespace Die
    {
        class FingerClearanceNotchBuilder;
    }
    namespace Die
    {
        class FlangeTaskBuilder;
    }
    namespace Die
    {
        class FormTaskBuilder;
    }
    namespace Die
    {
        class HandlingCore;
    }
    namespace Die
    {
        class HandlingCoreBuilder;
    }
    namespace Die
    {
        class Heelpost;
    }
    namespace Die
    {
        class HeelpostBuilder;
    }
    namespace Die
    {
        class Keyway;
    }
    namespace Die
    {
        class KeywayBuilder;
    }
    namespace Die
    {
        class LineupBuilder;
    }
    namespace Die
    {
        class MachineRelief;
    }
    namespace Die
    {
        class MachineReliefBuilder;
    }
    namespace Die
    {
        class OutputCurvesBuilder;
    }
    namespace Die
    {
        class PierceTaskBuilder;
    }
    namespace Die
    {
        class QuickBinderBuilder;
    }
    namespace Die
    {
        class QuickBinderWrapBuilder;
    }
    namespace Die
    {
        class RotorBuilder;
    }
    namespace Die
    {
        class SpringbackCompensation;
    }
    namespace Die
    {
        class SpringbackCompensationBuilder;
    }
    namespace Die
    {
        class SteelInsertBuilder;
    }
    namespace Die
    {
        class TrimFlangeDieAssistantBuilder;
    }
    namespace Die
    {
        class TrimLineDevelopmentBuilder;
    }
    namespace Die
    {
        class TrimTaskBuilder;
    }
    namespace Die
    {
        class UncutRegionsBuilder;
    }
    namespace Features
    {
        class CompensateRoughData;
    }
    namespace Features
    {
        class QuickBinder;
    }
    namespace Die
    {
        class DieCollectionImpl;
        /** Represents a Die Engineering/Design feature builder.  <br> To obtain an instance of this class, refer to @link NXOpen::Features::FeatureCollection  NXOpen::Features::FeatureCollection @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_DIEEXPORT  DieCollection : public NXOpen::TaggedObjectCollection
        {
            private: DieCollectionImpl * m_diecollection_impl;
            private: NXOpen::Features::FeatureCollection* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit DieCollection(NXOpen::Features::FeatureCollection *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~DieCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Die::DieCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Features::Feature *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Die::DieCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_DIEEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_DIEEXPORT  void next();
                NXOpen::Die::DieCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates the draw die punch feature builder.  @return  Draw Die Punch feature builder. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DrawDiePunchBuilder * DrawDiePunch
            (
                NXOpen::Features::Feature * drawDiePunch /** Draw Die Punch to be edited, NULL if create. */
            );
            /** Creates/Edits the form task feature builder.  @return  Form Task feature builder. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FormTaskBuilder * FormTask
            (
                NXOpen::Features::Feature * formTask /** Form Task to be edited, NULL if create. */
            );
            /** Creates the die_rotor feature builder.  @return  Die Rotor feature builder. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::RotorBuilder * Rotor
            (
                NXOpen::Features::Feature * rotor /** Die Rotor to be edited, NULL if create. */
            );
            /** Creates/Edits the flange task feature builder.  @return  Flange Task feature builder
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FlangeTaskBuilder * FlangeTask
            (
                NXOpen::Features::Feature * flangeTask /** Flange Task to be edited, NULL if create. */
            );
            /** Creates/Edits the trim task feature builder.  @return  Trim Task feature builder
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::TrimTaskBuilder * TrimTask
            (
                NXOpen::Features::Feature * trimTask /** Trim Task to be edited, NULL if create. */
            );
            /** Creates/Edits the pierce task feature builder.  @return  Pierce Task feature builder
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::PierceTaskBuilder * PierceTask
            (
                NXOpen::Features::Feature * pierceTask /** Pierce Task to be edited, NULL if create. */
            );
            /** Creates a user defined addendum section builder.  @return  User Defined Section builder. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Die::AddendumSectionUserDefinedBuilder * CreateAddendumSectionUserDefinedBuilder
            (
            );
            /** Creates/Edits the addendum section builder.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Die::AddendumSectionBuilder * CreateAddendumSectionBuilder
            (
                NXOpen::Features::Feature * addSection /** the AddendumSection feature to be edited, NULL if create. */
            );
            /** Creates/Edits the die area fill feature builder.  @return  area fill feature builder
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FillBuilder * Fill
            (
                NXOpen::Features::Feature * fill /** area fill to be edited, NULL if create. */
            );
            /** Creates/Edits the die lineup feature builder.  @return  lineup feature builder
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::LineupBuilder * Lineup
            (
                NXOpen::Features::Feature * lineup /** lineup to be edited, NULL if create. */
            );
            /** Creates/Edits the die output curves feature builder.  @return  output curves feature builder
             <br>  Created in NX4.0.1.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::OutputCurvesBuilder * OutputCurves
            (
                NXOpen::Features::Feature * outcurves /** output curves feature to be edited, NULL if create. */
            );
            /** Creates/Edits the steel insert feature builder.  @return  Steel Insert feature builder
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::SteelInsertBuilder * Steelinsert
            (
                NXOpen::Features::Feature * steelInsert /** Steel Insert to be edited, NULL if create. */
            );
            /** Creates a @link NXOpen::Die::QuickBinderBuilder NXOpen::Die::QuickBinderBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Die::QuickBinderBuilder * CreateQuickBinderBuilder
            (
                NXOpen::Features::QuickBinder * quickBinder /** @link NXOpen::Features::QuickBinder NXOpen::Features::QuickBinder@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Die::QuickBinderWrapBuilder NXOpen::Die::QuickBinderWrapBuilder@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Die::QuickBinderWrapBuilder * CreateQuickBinderWrapBuilder
            (
                NXOpen::Features::Feature * quickBinderWrap /** the QuickBinderWrap feature to be edited, NULL if create. */
            );
            /** Creates a @link NXOpen::Die::TrimLineDevelopmentBuilder NXOpen::Die::TrimLineDevelopmentBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Die::TrimLineDevelopmentBuilder * CreateTrimLineDevelopmentBuilder
            (
                NXOpen::Features::Feature * trimLineDevelopment /** the TrimLineDevelopment feature to be edited, NULL if create. */
            );
            /** Creates a @link NXOpen::Die::AddSurfBuilder NXOpen::Die::AddSurfBuilder@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Die::AddSurfBuilder * CreateAddSurfBuilder
            (
                NXOpen::Features::Feature * addSurf /** the AddSurf feature to be edited, NULL if create. */
            );
            /** Creates a @link NXOpen::Die::FaceSheetBuilder NXOpen::Die::FaceSheetBuilder@endlink .  @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::FaceSheetBuilder * FaceSheet
            (
                NXOpen::Features::Feature * faceSheet /** @link NXOpen::Die::FaceSheetBuilder NXOpen::Die::FaceSheetBuilder@endlink  to be edited. */
            );
            /** Creates the trim/flange die assistant builder.  @return  Trim/Flange Die Assistant builder
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::TrimFlangeDieAssistantBuilder * TrimFlangeDieAssistant
            (
                NXOpen::Features::Feature * nullFeature /** must be NULL to create trim die. */
            );
            /** Creates a die_shoe feature builder @link NXOpen::Die::DieShoeBuilder NXOpen::Die::DieShoeBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieShoeBuilder * DieShoe
            (
                NXOpen::Die::DieShoe * dieShoe /** @link NXOpen::Die::DieShoe NXOpen::Die::DieShoe@endlink  to be edited. */
            );
            /** Creates a @link NXOpen::Die::DieAttributesBuilder NXOpen::Die::DieAttributesBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieAttributesBuilder * CreateDieAttribute
            (
            );
            /** Creates a @link NXOpen::Die::DieBooleanBuilder NXOpen::Die::DieBooleanBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieBooleanBuilder * CreateDieBoolean
            (
            );
            /** Creates a @link NXOpen::Die::DieDirectionBuilder NXOpen::Die::DieDirectionBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieDirectionBuilder * CreateDieDirection
            (
                NXOpen::Features::Feature * feature /** Parent NX Feature. */
            );
            /** Creates a @link NXOpen::Die::DiePlaneBuilder NXOpen::Die::DiePlaneBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DiePlaneBuilder * CreateDiePlane
            (
                NXOpen::Features::Feature * feature /** Parent NX Feature. */
            );
            /** Creates a clamping slot feature builder @link NXOpen::Die::ClampingSlotBuilder NXOpen::Die::ClampingSlotBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::ClampingSlotBuilder * ClampingSlot
            (
                NXOpen::Die::ClampingSlot * clampingSlot /** @link NXOpen::Die::ClampingSlot NXOpen::Die::ClampingSlot@endlink  to be edited. */
            );
            /** Creates a @link NXOpen::Die::CompensateRoughDataBuilder NXOpen::Die::CompensateRoughDataBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") */
            public: NXOpen::Die::CompensateRoughDataBuilder * CompensateRoughData
            (
                NXOpen::Features::CompensateRoughData * compensateRoughData /** @link NXOpen::Features::CompensateRoughData NXOpen::Features::CompensateRoughData@endlink  to be edited. */
            );
            /** Creates a keyway feature builder @link NXOpen::Die::KeywayBuilder NXOpen::Die::KeywayBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::KeywayBuilder * Keyway
            (
                NXOpen::Die::Keyway * keyway /** @link NXOpen::Die::Keyway NXOpen::Die::Keyway@endlink  to be edited. */
            );
            /** Creates a heelpost feature builder @link NXOpen::Die::HeelpostBuilder NXOpen::Die::HeelpostBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::HeelpostBuilder * Heelpost
            (
                NXOpen::Die::Heelpost * heelpost /** @link NXOpen::Die::Heelpost NXOpen::Die::Heelpost@endlink  to be edited. */
            );
            /** Creates a cast relief feature builder @link NXOpen::Die::CastReliefBuilder NXOpen::Die::CastReliefBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::CastReliefBuilder * CastRelief
            (
                NXOpen::Die::CastRelief * castRelief /** @link NXOpen::Die::CastRelief NXOpen::Die::CastRelief@endlink  to be edited. */
            );
            /** Creates a @link NXOpen::Die::UncutRegionsBuilder NXOpen::Die::UncutRegionsBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::UncutRegionsBuilder * CreateUncutRegionsBuilder
            (
            );
            /** Creates a @link NXOpen::Die::DieLocationBuilder NXOpen::Die::DieLocationBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieLocationBuilder * CreateDieLocation
            (
            );
            /** Creates a @link NXOpen::Die::DieLimitsBuilder NXOpen::Die::DieLimitsBuilder@endlink .  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Die::DieLimitsBuilder * CreateDieLimits
            (
            );
            /** Creates a @link NXOpen::Die::DieLocationsBuilder NXOpen::Die::DieLocationsBuilder@endlink .  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::DieLocationsBuilder * CreateDieLocations
            (
                NXOpen::Features::Feature * feature /** Parent NX Feature. */,
                bool allowSelection /** Is selection available? */,
                bool allowNewPoint /** Is specify point available? */,
                bool allowNewCoordinateSystem /** Is specify coordinate system available? */,
                bool allowNewVector /** Is specify vector available? */,
                bool allowNewPlane /** Is specify plane available? */,
                bool isRequired /** Is it required that something be specified, or is everything optional? */,
                bool allowMultipleSelection /** Can builder support multiple locations? */
            );
            /** Creates a fill area builder @link NXOpen::Die::FillAreaBuilder NXOpen::Die::FillAreaBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::FillAreaBuilder * CreateFillAreaBuilder
            (
                NXOpen::Die::FillArea * fillArea /** @link NXOpen::Die::FillArea NXOpen::Die::FillArea@endlink  to be edited. */
            );
            /** Creates a finger clearance notch builder @link NXOpen::Die::FingerClearanceNotchBuilder NXOpen::Die::FingerClearanceNotchBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::FingerClearanceNotchBuilder * CreateFingerClearanceNotchBuilder
            (
                NXOpen::Die::FingerClearanceNotch * fingerClearanceNotch /** @link NXOpen::Die::FingerClearanceNotch NXOpen::Die::FingerClearanceNotch@endlink  to be edited. */
            );
            /** Creates a clearance builder @link NXOpen::Die::ClearanceBuilder NXOpen::Die::ClearanceBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::ClearanceBuilder * CreateClearanceBuilder
            (
                NXOpen::Die::Clearance * clearance /** @link NXOpen::Die::Clearance NXOpen::Die::Clearance@endlink  to be edited. */
            );
            /** Creates a handling core builder @link NXOpen::Die::HandlingCoreBuilder NXOpen::Die::HandlingCoreBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::HandlingCoreBuilder * CreateHandlingCoreBuilder
            (
                NXOpen::Die::HandlingCore * handlingCore /** @link NXOpen::Die::HandlingCore NXOpen::Die::HandlingCore@endlink  to be edited. */
            );
            /** Creates a machine relief builder @link NXOpen::Die::MachineReliefBuilder NXOpen::Die::MachineReliefBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ug_die_design ("Die Design") */
            public: NXOpen::Die::MachineReliefBuilder * CreateMachineReliefBuilder
            (
                NXOpen::Die::MachineRelief * machineRelief /** @link NXOpen::Die::MachineRelief NXOpen::Die::MachineRelief@endlink  to be edited. */
            );
            /** Creates a draw bead builder @link NXOpen::Die::DrawBeadBuilder NXOpen::Die::DrawBeadBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Die::DrawBeadBuilder * CreateDrawBeadBuilder
            (
                NXOpen::Die::DrawBead * drawBead /** @link NXOpen::Die::DrawBead NXOpen::Die::DrawBead@endlink  to be edited. */
            );
            /** Creates a springback compensation builder @link NXOpen::Die::SpringbackCompensationBuilder NXOpen::Die::SpringbackCompensationBuilder@endlink .  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling") */
            public: NXOpen::Die::SpringbackCompensationBuilder * CreateSpringbackCompensationBuilder
            (
                NXOpen::Die::SpringbackCompensation * springbackCompensation /** @link NXOpen::Die::SpringbackCompensation NXOpen::Die::SpringbackCompensation@endlink  to be edited */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
