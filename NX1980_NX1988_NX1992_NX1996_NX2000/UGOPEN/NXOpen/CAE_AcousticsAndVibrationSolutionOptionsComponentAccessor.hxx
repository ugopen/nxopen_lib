#ifndef NXOpen_CAE_ACOUSTICSANDVIBRATIONSOLUTIONOPTIONSCOMPONENTACCESSOR_HXX_INCLUDED
#define NXOpen_CAE_ACOUSTICSANDVIBRATIONSOLUTIONOPTIONSCOMPONENTACCESSOR_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AcousticsAndVibrationSolutionOptionsComponentAccessor.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class AcousticsAndVibrationSolutionOptionsComponentAccessor;
    }
    class NXObject;
    namespace CAE
    {
        class _AcousticsAndVibrationSolutionOptionsComponentAccessorBuilder;
        class AcousticsAndVibrationSolutionOptionsComponentAccessorImpl;
        /**
            Builds a @link NXOpen::CAE::AcousticsAndVibrationSolutionOptionsComponentAccessor NXOpen::CAE::AcousticsAndVibrationSolutionOptionsComponentAccessor@endlink  object
             <br> There is no kf creator for this.  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  AcousticsAndVibrationSolutionOptionsComponentAccessor : public NXOpen::NXObject
        {
            /** the QUANTITY selection enum */
            public: enum CsysTypeEnum
            {
                CsysTypeEnumNative/** native */ ,
                CsysTypeEnumAbsolute/** absolute */ 
            };

            private: AcousticsAndVibrationSolutionOptionsComponentAccessorImpl * m_acousticsandvibrationsolutionoptionscomponentaccessor_impl;
            private: friend class  _AcousticsAndVibrationSolutionOptionsComponentAccessorBuilder;
            protected: AcousticsAndVibrationSolutionOptionsComponentAccessor();
            public: ~AcousticsAndVibrationSolutionOptionsComponentAccessor();
            /**Returns  the Csys Type choice
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::AcousticsAndVibrationSolutionOptionsComponentAccessor::CsysTypeEnum CsysType
            (
            );
            /**Sets  the Csys Type choice
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCsysType
            (
                NXOpen::CAE::AcousticsAndVibrationSolutionOptionsComponentAccessor::CsysTypeEnum selectionChoice /** selectionchoice */ 
            );
            /**Returns  the "Maximum Number of Functions on Nodes Records" paramater
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxNumOfExposedFunctions
            (
            );
            /**Sets  the "Maximum Number of Functions on Nodes Records" paramater
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetMaxNumOfExposedFunctions
            (
                int selectionChoice /** selectionchoice */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
