#ifndef NXOpen_FEATURES_VEHICLEDESIGN_STATICCURBBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_STATICCURBBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_StaticCurbBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class StaticCurbBuilder;
        }
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    class ScCollector;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _StaticCurbBuilderBuilder;
            class StaticCurbBuilderImpl;
            /**
                    Represents a @link NXOpen::Features::VehicleDesign::StaticCurb NXOpen::Features::VehicleDesign::StaticCurb@endlink  builder
                    used to create or edit static curb feature
                     <br> To create a new instance of this class, use @link NXOpen::Features::VehicleDesignCollection::CreateStaticCurbBuilder  NXOpen::Features::VehicleDesignCollection::CreateStaticCurbBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            Position </term> <description> 
             
            Front </description> </item> 

            <item><term> 
             
            RequirementsControl </term> <description> 
             
            StandardDriven </description> </item> 

            <item><term> 
             
            Visualization </term> <description> 
             
            Surface </description> </item> 

            </list> 

             <br>  Created in NX8.5.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  StaticCurbBuilder : public NXOpen::Features::FeatureBuilder
            {
                /** Represents the requirements control types to define the static curb. */
                public: enum RequirementsControlType
                {
                    RequirementsControlTypeStandardDriven/**Standard Driven*/,
                    RequirementsControlTypeUserDefined/**User Defined*/
                };

                /** Represents the static curb positions. */
                public: enum PositionType
                {
                    PositionTypeFront/**Front*/,
                    PositionTypeRear/**Rear*/,
                    PositionTypeBoth/**Both*/
                };

                /** Represents the visualization types of the output. */
                public: enum VisualizationType
                {
                    VisualizationTypeCurve/**Curve*/,
                    VisualizationTypeSurface/**Surface*/,
                    VisualizationTypeCurveandSurface/**Curves and Surface*/
                };

                private: StaticCurbBuilderImpl * m_staticcurbbuilder_impl;
                private: friend class  _StaticCurbBuilderBuilder;
                protected: StaticCurbBuilder();
                public: ~StaticCurbBuilder();
                /**Returns  the requirements control for standard driven or user defined. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::StaticCurbBuilder::RequirementsControlType RequirementsControl
                (
                );
                /**Sets  the requirements control for standard driven or user defined. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRequirementsControl
                (
                    NXOpen::Features::VehicleDesign::StaticCurbBuilder::RequirementsControlType requirementsControlType /** requirementscontroltype */ 
                );
                /**Returns  the standard used to define the static curb. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXString Standard
                (
                );
                /**Sets  the standard used to define the static curb. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetStandard
                (
                    const NXString & standard /** standard */ 
                );
                /**Sets  the standard used to define the static curb. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetStandard
                (
                    const char * standard /** standard */ 
                );
                /**Returns  the static curb position. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::StaticCurbBuilder::PositionType Position
                (
                );
                /**Sets  the static curb position. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPosition
                (
                    NXOpen::Features::VehicleDesign::StaticCurbBuilder::PositionType position /** position */ 
                );
                /**Returns  the loading applied to the vehicle front used in the static curb.
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXString FrontLoading
                (
                );
                /**Sets  the loading applied to the vehicle front used in the static curb.
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetFrontLoading
                (
                    const NXString & frontLoading /** frontloading */ 
                );
                /**Sets  the loading applied to the vehicle front used in the static curb.
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetFrontLoading
                (
                    const char * frontLoading /** frontloading */ 
                );
                /**Returns  the loading applied to the vehicle rear used in the static curb.
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXString RearLoading
                (
                );
                /**Sets  the loading applied to the vehicle rear used in the static curb.
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetRearLoading
                (
                    const NXString & rearLoading /** rearloading */ 
                );
                /**Sets  the loading applied to the vehicle rear used in the static curb.
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                void SetRearLoading
                (
                    const char * rearLoading /** rearloading */ 
                );
                /**Returns  the expression containing the front angle. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * FrontAngle
                (
                );
                /**Returns  the expression containing the front offset. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * FrontOffset
                (
                );
                /**Returns  the expression containing the rear angle. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * RearAngle
                (
                );
                /**Returns  the expression containing the rear offset. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Expression * RearOffset
                (
                );
                /**Returns  the selected front faces for measurement. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * FrontMeasuredFaces
                (
                );
                /**Returns  the selected rear faces for measurement. 
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * RearMeasuredFaces
                (
                );
                /**Returns  
                            the value to show distance measurement. 
                            True will show the distance measurement. False will hide the distance measurement.
                            
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: bool ShowDistanceMeasurement
                (
                );
                /**Sets  
                            the value to show distance measurement. 
                            True will show the distance measurement. False will hide the distance measurement.
                            
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetShowDistanceMeasurement
                (
                    bool showDistanceMeasurement /** showdistancemeasurement */ 
                );
                /**Returns  
                            the visualization type of the static curb output.
                            See @link NXOpen::Features::VehicleDesign::StaticCurbBuilder::VisualizationType NXOpen::Features::VehicleDesign::StaticCurbBuilder::VisualizationType@endlink  for valid values. 
                            
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::StaticCurbBuilder::VisualizationType Visualization
                (
                );
                /**Sets  
                            the visualization type of the static curb output.
                            See @link NXOpen::Features::VehicleDesign::StaticCurbBuilder::VisualizationType NXOpen::Features::VehicleDesign::StaticCurbBuilder::VisualizationType@endlink  for valid values. 
                            
                 <br>  Created in NX8.5.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetVisualization
                (
                    NXOpen::Features::VehicleDesign::StaticCurbBuilder::VisualizationType visualization /** visualization */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
