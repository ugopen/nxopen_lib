#ifndef NXOpen_CAE_IMPRINTBUILDER_HXX_INCLUDED
#define NXOpen_CAE_IMPRINTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ImprintBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ImprintBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class SelectDisplayableObjectList;
    namespace CAE
    {
        class _ImprintBuilderBuilder;
        class ImprintBuilderImpl;
        /** Builder for creating Imprint   <br> To create a new instance of this class, use @link NXOpen::CAE::AbstractionManager::CreateImprintBuilder  NXOpen::CAE::AbstractionManager::CreateImprintBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ImprintBuilder : public NXOpen::Builder
        {
            /** the imprint types */
            public: enum ImprintTypes
            {
                ImprintTypesFaceFaceImprint/** Face-Face Imprint*/,
                ImprintTypesEdgeFaceImprint/** Edge-Face Imprint*/
            };

            /** the projection directon type */
            public: enum ProjectionDirectionType
            {
                ProjectionDirectionTypeNaturalExtension/** natural extension */ ,
                ProjectionDirectionTypeAlongVector/** along vector */ ,
                ProjectionDirectionTypeNormalToFace/** normal to face */ 
            };

            private: ImprintBuilderImpl * m_imprintbuilder_impl;
            private: friend class  _ImprintBuilderBuilder;
            protected: ImprintBuilder();
            public: ~ImprintBuilder();
            /**Returns  the geom selection for Imprint
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * GeomSelection
            (
            );
            /**Returns  the target face selection for projection imprint
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * TargetFace
            (
            );
            /**Returns  the imprint type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ImprintBuilder::ImprintTypes ImprintType
            (
            );
            /**Sets  the imprint type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetImprintType
            (
                NXOpen::CAE::ImprintBuilder::ImprintTypes imprintType /** imprinttype */ 
            );
            /**Returns  the projection direction method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ImprintBuilder::ProjectionDirectionType ProjectionDirectionMethod
            (
            );
            /**Sets  the projection direction method 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetProjectionDirectionMethod
            (
                NXOpen::CAE::ImprintBuilder::ProjectionDirectionType projDirectionType /** projdirectiontype */ 
            );
            /**Returns  the projection vector direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * ProjectionVector
            (
            );
            /**Sets  the projection vector direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetProjectionVector
            (
                NXOpen::Direction * projectionVector /** projectionvector */ 
            );
            /**Returns  the stitch toggle state 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool StitchToggle
            (
            );
            /**Sets  the stitch toggle state 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetStitchToggle
            (
                bool stitchOption /** stitchoption */ 
            );
            /**Returns  the snap tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double SnapTolerance
            (
            );
            /**Sets  the snap tolerance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSnapTolerance
            (
                double dSnapTolerance /** dsnaptolerance */ 
            );
            /**Returns  the closest imprint Option state 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool ClosestImprintOption
            (
            );
            /**Sets  the closest imprint Option state 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetClosestImprintOption
            (
                bool stitchOption /** stitchoption */ 
            );
            /**Returns  the search distance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: double SearchDistance
            (
            );
            /**Sets  the search distance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSearchDistance
            (
                double stitchOption /** stitchoption */ 
            );
            /**Returns  the boolean value that defines the snap to boundary toggle state 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: bool SnapToggle
            (
            );
            /**Sets  the boolean value that defines the snap to boundary toggle state 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSnapToggle
            (
                bool snapOption /** snapoption */ 
            );
            /**Returns  the expression value that defines the snap distance to boundary 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * SnapDistance
            (
            );
            /**Sets  the expression value that defines the snap distance to boundary 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetSnapDistance
            (
                NXOpen::Expression * expSnapDistance /** expsnapdistance */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
