#ifndef NXOpen_TOOLING_INITPROJECTBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_INITPROJECTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_InitProjectBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_CloneObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class InitProjectBuilder;
    }
    class Body;
    class Builder;
    namespace Features
    {
        class Feature;
    }
    class NXObject;
    class Part;
    class SelectBodyList;
    namespace Tooling
    {
        class CloneObject;
    }
    namespace Tooling
    {
        class _InitProjectBuilderBuilder;
        class InitProjectBuilderImpl;
        /** Mold Wizard initialize project builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::InitProjectCollection::CreateBuilder  NXOpen::Tooling::InitProjectCollection::CreateBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        Configuration </term> <description> 
         
        Default </description> </item> 

        <item><term> 
         
        Material </term> <description> 
         
        None </description> </item> 

        <item><term> 
         
        Rename </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        Unit </term> <description> 
         
        Millimeter </description> </item> 

        </list> 

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  InitProjectBuilder : public NXOpen::Builder
        {
            /** the material type includes None and Nylon */
            public: enum MaterialId
            {
                MaterialIdNone/** None material is set */,
                MaterialIdNylon/** Nylon material type */
            };

            /** the configuration type includes default and orig */
            public: enum ConfigurationId
            {
                ConfigurationIdDefault/** Default configuration */,
                ConfigurationIdOrig/** Original configuration */
            };

            /** the unit type includes metric and inch project type */
            public: enum UnitId
            {
                UnitIdMillimeter/** metric project */,
                UnitIdInch/** english project */
            };

            private: InitProjectBuilderImpl * m_initprojectbuilder_impl;
            private: friend class  _InitProjectBuilderBuilder;
            protected: InitProjectBuilder();
            public: ~InitProjectBuilder();
            /**Returns  the body will be used as product to create Mold Wizard project 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * BodySelect
            (
            );
            /**Returns  the project path access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PathName
            (
            );
            /**Sets  the project path access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPathName
            (
                const NXString & pathName /** pathname */ 
            );
            /**Sets  the project path access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetPathName
            (
                const char * pathName /** pathname */ 
            );
            /**Returns  the project name access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ProjectName
            (
            );
            /**Sets  the project name access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProjectName
            (
                const NXString & projectName /** projectname */ 
            );
            /**Sets  the project name access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetProjectName
            (
                const char * projectName /** projectname */ 
            );
            /**Returns  the material access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InitProjectBuilder::MaterialId Material
            (
            );
            /**Sets  the material access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaterial
            (
                NXOpen::Tooling::InitProjectBuilder::MaterialId material /** material */ 
            );
            /**Returns  the shrinkage access functions
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXString Shrinkage
            (
            );
            /**Sets  the shrinkage access functions
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShrinkage
            (
                const NXString & shrinkage /** shrinkage */ 
            );
            /**Sets  the shrinkage access functions
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            void SetShrinkage
            (
                const char * shrinkage /** shrinkage */ 
            );
            /**Returns  the configuration access functions
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InitProjectBuilder::ConfigurationId Configuration
            (
            );
            /**Sets  the configuration access functions
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetConfiguration
            (
                NXOpen::Tooling::InitProjectBuilder::ConfigurationId configuration /** configuration */ 
            );
            /**Returns  the project unit access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::InitProjectBuilder::UnitId Unit
            (
            );
            /**Sets  the project unit access functions 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUnit
            (
                NXOpen::Tooling::InitProjectBuilder::UnitId unit /** unit */ 
            );
            /**Returns  the rename dialog allows users to define rename rules 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool Rename
            (
            );
            /**Sets  the rename dialog allows users to define rename rules 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRename
            (
                bool rename /** rename */ 
            );
            /** Creates Mold Wizard project. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Part * CreateProject
            (
                NXOpen::Tooling::CloneObject * cloneObject /** cloneobject */ 
            );
            /** Creates clone object.  @return  A @link NXOpen::Tooling::CloneObject NXOpen::Tooling::CloneObject@endlink  instance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Tooling::CloneObject * CreateCloneObject
            (
                const NXString & templatePartName /** templatepartname */ 
            );
            /** Creates clone object.  @return  A @link NXOpen::Tooling::CloneObject NXOpen::Tooling::CloneObject@endlink  instance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            NXOpen::Tooling::CloneObject * CreateCloneObject
            (
                const char * templatePartName /** templatepartname */ 
            );
            /** Ask the top part name to be cloned 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString AskInstallingPartName
            (
            );
            /** Check whether the product node exists in the current project, if not exist, just get the template part name of product node 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString CheckProductPartNodeExistence
            (
                bool* bProdNodeExist /** bprodnodeexist */ 
            );
            /** Rename the sub-assembly of product node, and add them under layout node  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Part * AddProductAssemblyNode
            (
                NXOpen::Tooling::CloneObject * cloneObject /** cloneobject */ 
            );
            /** Assign project attributes  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void AssignProjectAttributes
            (
                NXOpen::Part * topPart /** toppart */ ,
                NXOpen::Part * prodPart /** prodpart */ 
            );
            /** Set workpiece UDO ID  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetWorkPieceUdoClassId
            (
                int udoID /** udoid */ 
            );
            /** Set project path and project name  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetProjectPathAndName
            (
                const NXString & path /** path */ ,
                const NXString & projectName /** projectname */ 
            );
            /** Set project path and project name  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void SetProjectPathAndName
            (
                const char * path /** path */ ,
                const char * projectName /** projectname */ 
            );
            /** Ask the product part name to be cloned 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString AskProductTemplatePartName
            (
            );
            /** Populate data for family mold 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void PopulateFamilyMoldData
            (
                const NXString & topPartName /** toppartname */ 
            );
            /** Populate data for family mold 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void PopulateFamilyMoldData
            (
                const char * topPartName /** toppartname */ 
            );
            /** Post process for family mold 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void FamilyMoldPostProcess
            (
                const NXString & plasticPartName /** plasticpartname */ ,
                const std::vector<NXOpen::Body *> & productBody /** productbody */ ,
                NXOpen::Tooling::CloneObject * cloneObject /** cloneobject */ 
            );
            /** Post process for family mold 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void FamilyMoldPostProcess
            (
                const char * plasticPartName /** plasticpartname */ ,
                const std::vector<NXOpen::Body *> & productBody /** productbody */ ,
                NXOpen::Tooling::CloneObject * cloneObject /** cloneobject */ 
            );
            /**Returns  the current material name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MaterialName
            (
            );
            /**Sets  the current material name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetMaterialName
            (
                const NXString & materialName /** materialname */ 
            );
            /**Sets  the current material name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void SetMaterialName
            (
                const char * materialName /** materialname */ 
            );
            /**Returns  the current configuration name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ConfigurationName
            (
            );
            /**Sets  the current configuration name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetConfigurationName
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**Sets  the current configuration name 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void SetConfigurationName
            (
                const char * configurationName /** configurationname */ 
            );
            /** Ask all configuration names from database  @return  all configuration names in database
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: std::vector<NXString> AskConfigurationNames
            (
            );
            /** Ask shrikage values according the material  @return  shinkage value
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXString AskShrinkageFromMaterial
            (
                const NXString & materialName /** material name*/
            );
            /** Ask shrikage values according the material  @return  shinkage value
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            NXString AskShrinkageFromMaterial
            (
                const char * materialName /** material name*/
            );
            /** Ask project attributes or material data from database  @return  all project attribute values or shrinkage value based on the material
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: std::vector<NXString> AskProjectData
            (
                int type /** project data type, 0 for project attribute, 1 for material data*/,
                std::vector<NXString> & attrNameList /** all project attribute names or material names*/
            );
            /** Update the specified attribute value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void UpdateProjectAttribute
            (
                const NXString & attributeName /** attributename */ ,
                const NXString & attributeValue /** attributevalue */ 
            );
            /** Update the specified attribute value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void UpdateProjectAttribute
            (
                const char * attributeName /** attributename */ ,
                const char * attributeValue /** attributevalue */ 
            );
            /** Update the current configuration data 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void UpdateCurrentConfigData
            (
                const NXString & configName /** configname */ 
            );
            /** Update the current configuration data 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            void UpdateCurrentConfigData
            (
                const char * configName /** configname */ 
            );
            /** Separate selected objects to bodies and curves 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SeparateObjects
            (
                const std::vector<NXOpen::NXObject *> & selected /** selected */ ,
                const std::vector<NXOpen::NXObject *> & deselected /** deselected */ 
            );
            /**Returns  the status whether the pre-part is dragged from reuse library or not 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsDragFromReuseLib
            (
            );
            /**Sets  the status whether the pre-part is dragged from reuse library or not 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: void SetDragFromReuseLib
            (
                bool bDragFromReuse /** bdragfromreuse */ 
            );
            /** Ask the shrinkage feature and update the scale value  @return  the scale feature
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") */
            public: NXOpen::Features::Feature * AskShrinkageFeature
            (
                bool bUpdate /** need to update the scale value or not*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
