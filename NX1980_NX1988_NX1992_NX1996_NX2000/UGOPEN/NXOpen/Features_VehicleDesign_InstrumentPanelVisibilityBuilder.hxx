#ifndef NXOpen_FEATURES_VEHICLEDESIGN_INSTRUMENTPANELVISIBILITYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VEHICLEDESIGN_INSTRUMENTPANELVISIBILITYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VehicleDesign_InstrumentPanelVisibilityBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        namespace VehicleDesign
        {
            class InstrumentPanelVisibilityBuilder;
        }
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class SelectFeature;
    }
    class NXColor;
    class Plane;
    class Point;
    class ScCollector;
    namespace Features
    {
        namespace VehicleDesign
        {
            class _InstrumentPanelVisibilityBuilderBuilder;
            class InstrumentPanelVisibilityBuilderImpl;
            /**
                Represents a @link NXOpen::Features::VehicleDesign::InstrumentPanelVisibility NXOpen::Features::VehicleDesign::InstrumentPanelVisibility@endlink  builder
                 <br> To create a new instance of this class, use @link NXOpen::Features::VehicleDesignCollection::CreateInstrumentPanelVisibilityBuilder  NXOpen::Features::VehicleDesignCollection::CreateInstrumentPanelVisibilityBuilder @endlink  <br> 
            Default values.
            <list type="table"> 
             
            <listheader><term> 
            Property</term>  <description> 
            Value</description> </listheader>
            <item><term> 
             
            AnalysisType </term> <description> 
             
            SteeringWheelObstructionAnalysis </description> </item> 

            <item><term> 
             
            DefinitionMode </term> <description> 
             
            Plane </description> </item> 

            <item><term> 
             
            ModelType </term> <description> 
             
            Curves </description> </item> 

            <item><term> 
             
            PanelObstructionLayer </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            PanelObstructionToggle </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            PercentileUsed </term> <description> 
             
            Per95 </description> </item> 

            <item><term> 
             
            SwitchObstructionLayer </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            SwitchObstructionToggle </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            SwitchType </term> <description> 
             
            PlanarCurves </description> </item> 

            <item><term> 
             
            SwitchVisionLayer </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            SwitchVisionToggle </term> <description> 
             
            0 </description> </item> 

            <item><term> 
             
            WheelVisionLayer </term> <description> 
             
            1 </description> </item> 

            <item><term> 
             
            WheelVisionToggle </term> <description> 
             
            0 </description> </item> 

            </list> 

             <br>  Created in NX1926.0.0.  <br>  
            */
            class NXOPENCPP_FEATURESEXPORT  InstrumentPanelVisibilityBuilder : public NXOpen::Features::FeatureBuilder
            {
                /** if Eyellipse Percentile is VD_EYE_BOTH, user can choose VD_EYE_PER95 or VD_EYE_PER99 for using */
                public: enum PercentileUsedEnum
                {
                    PercentileUsedEnumPer95/** per95 */ ,
                    PercentileUsedEnumPer99/** per99 */ 
                };

                /** The definition mode type */
                public: enum DefinitionModeEnum
                {
                    DefinitionModeEnumPlane/** plane */ ,
                    DefinitionModeEnumFaces/** faces */ 
                };

                /** The analysis type */
                public: enum AnalysisTypeEnum
                {
                    AnalysisTypeEnumSteeringWheelObstructionAnalysis/** steering wheel obstruction analysis */ ,
                    AnalysisTypeEnumSmartSwitchesLeversObstructionAnalysis/** smart switches levers obstruction analysis */ ,
                    AnalysisTypeEnumCombinedObstructionAnalysis/** combined obstruction analysis */ 
                };

                /** The model type */
                public: enum ModelTypeEnum
                {
                    ModelTypeEnumCurves/** curves */ ,
                    ModelTypeEnumSolids/** solids */ 
                };

                /** The switch type */
                public: enum SwitchTypeEnum
                {
                    SwitchTypeEnumPlanarCurves/** planar curves */ ,
                    SwitchTypeEnumCurvesonaFace/** curvesona face */ ,
                    SwitchTypeEnumSolid/** solid */ 
                };

                private: InstrumentPanelVisibilityBuilderImpl * m_instrumentpanelvisibilitybuilder_impl;
                private: friend class  _InstrumentPanelVisibilityBuilderBuilder;
                protected: InstrumentPanelVisibilityBuilder();
                public: ~InstrumentPanelVisibilityBuilder();
                /**Returns  the select eyellipse 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::SelectFeature * SelectEyellipse
                (
                );
                /**Returns  the definition mode 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::PercentileUsedEnum PercentileUsed
                (
                );
                /**Sets  the definition mode 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPercentileUsed
                (
                    NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::PercentileUsedEnum percentileUsed /** percentileused */ 
                );
                /**Returns  the definition mode 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::DefinitionModeEnum DefinitionMode
                (
                );
                /**Sets  the definition mode 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetDefinitionMode
                (
                    NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::DefinitionModeEnum definitionMode /** definitionmode */ 
                );
                /**Returns  the specify plane 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Plane * SpecifyPlane
                (
                );
                /**Sets  the specify plane 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSpecifyPlane
                (
                    NXOpen::Plane * specifyPlane /** specifyplane */ 
                );
                /**Returns  the select faces 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectFaces
                (
                );
                /**Sets  the select faces 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectFaces
                (
                    NXOpen::ScCollector * selectFaces /** selectfaces */ 
                );
                /**Returns  the analysis type 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::AnalysisTypeEnum AnalysisType
                (
                );
                /**Sets  the analysis type 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetAnalysisType
                (
                    NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::AnalysisTypeEnum analysisType /** analysistype */ 
                );
                /**Returns  the model type 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::ModelTypeEnum ModelType
                (
                );
                /**Sets  the model type 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetModelType
                (
                    NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::ModelTypeEnum modelType /** modeltype */ 
                );
                /**Returns  the select solid rim 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectSolidRim
                (
                );
                /**Sets  the select solid rim 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectSolidRim
                (
                    NXOpen::ScCollector * selectSolidRim /** selectsolidrim */ 
                );
                /**Returns  the select solid hub 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectSolidHub
                (
                );
                /**Sets  the select solid hub 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectSolidHub
                (
                    NXOpen::ScCollector * selectSolidHub /** selectsolidhub */ 
                );
                /**Returns  the select outer rim 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectOuterRim
                (
                );
                /**Sets  the select outer rim 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectOuterRim
                (
                    NXOpen::ScCollector * selectOuterRim /** selectouterrim */ 
                );
                /**Returns  the select inner rim 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectInnerRim
                (
                );
                /**Sets  the select inner rim 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectInnerRim
                (
                    NXOpen::ScCollector * selectInnerRim /** selectinnerrim */ 
                );
                /**Returns  the select rim section 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectRimSection
                (
                );
                /**Sets  the select rim section 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectRimSection
                (
                    NXOpen::ScCollector * selectRimSection /** selectrimsection */ 
                );
                /**Returns  the select center point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Point * SelectCenterPoint
                (
                );
                /**Sets  the select center point 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSelectCenterPoint
                (
                    NXOpen::Point * selectCenterPoint /** selectcenterpoint */ 
                );
                /**Returns  the select hub curves 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectHubCurves
                (
                );
                /**Sets  the select hub curves 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectHubCurves
                (
                    NXOpen::ScCollector * selectHubCurves /** selecthubcurves */ 
                );
                /**Returns  the select hub Openings 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectHubOpenings
                (
                );
                /**Sets  the select hub Openings 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectHubOpenings
                (
                    NXOpen::ScCollector * selectHubOpenings /** selecthubopenings */ 
                );
                /**Returns  the switch type 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::SwitchTypeEnum SwitchType
                (
                );
                /**Sets  the switch type 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSwitchType
                (
                    NXOpen::Features::VehicleDesign::InstrumentPanelVisibilityBuilder::SwitchTypeEnum switchType /** switchtype */ 
                );
                /**Returns  the select planar curves 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectPlanarCurves
                (
                );
                /**Sets  the select planar curves 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectPlanarCurves
                (
                    NXOpen::ScCollector * selectPlanarCurves /** selectplanarcurves */ 
                );
                /**Returns  the select switch face 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectSwitchFace
                (
                );
                /**Sets  the select switch face 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectSwitchFace
                (
                    NXOpen::ScCollector * selectSwitchFace /** selectswitchface */ 
                );
                /**Returns  the select face curves 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectFaceCurves
                (
                );
                /**Sets  the select face curves 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectFaceCurves
                (
                    NXOpen::ScCollector * selectFaceCurves /** selectfacecurves */ 
                );
                /**Returns  the select switch solid 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SelectSwitchSolid
                (
                );
                /**Sets  the select switch solid 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetSelectSwitchSolid
                (
                    NXOpen::ScCollector * selectSwitchSolid /** selectswitchsolid */ 
                );
                /**Returns  the panel obstruction toggle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool PanelObstructionToggle
                (
                );
                /**Sets  the panel obstruction toggle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPanelObstructionToggle
                (
                    bool panelObstructionToggle /** panelobstructiontoggle */ 
                );
                /**Returns  the panel obstruction color 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * PanelObstructionColor
                (
                );
                /**Sets  the panel obstruction color 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPanelObstructionColor
                (
                    NXOpen::NXColor * panelObstructionColor /** panelobstructioncolor */ 
                );
                /**Returns  the panel obstruction layer 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int PanelObstructionLayer
                (
                );
                /**Sets  the panel obstruction layer 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetPanelObstructionLayer
                (
                    int panelObstructionLayer /** panelobstructionlayer */ 
                );
                /**Returns  the wheel vision toggle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool WheelVisionToggle
                (
                );
                /**Sets  the wheel vision toggle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWheelVisionToggle
                (
                    bool wheelVisionToggle /** wheelvisiontoggle */ 
                );
                /**Returns  the wheel vision color 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * WheelVisionColor
                (
                );
                /**Sets  the wheel vision color 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWheelVisionColor
                (
                    NXOpen::NXColor * wheelVisionColor /** wheelvisioncolor */ 
                );
                /**Returns  the wheel vision layer 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int WheelVisionLayer
                (
                );
                /**Sets  the wheel vision layer 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetWheelVisionLayer
                (
                    int wheelVisionLayer /** wheelvisionlayer */ 
                );
                /**Returns  the switch obstruction toggle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool SwitchObstructionToggle
                (
                );
                /**Sets  the switch obstruction toggle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSwitchObstructionToggle
                (
                    bool switchObstructionToggle /** switchobstructiontoggle */ 
                );
                /**Returns  the switch obstruction color 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * SwitchObstructionColor
                (
                );
                /**Sets  the switch obstruction color 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSwitchObstructionColor
                (
                    NXOpen::NXColor * switchObstructionColor /** switchobstructioncolor */ 
                );
                /**Returns  the switch obstruction layer 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int SwitchObstructionLayer
                (
                );
                /**Sets  the switch obstruction layer 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSwitchObstructionLayer
                (
                    int switchObstructionLayer /** switchobstructionlayer */ 
                );
                /**Returns  the switch vision toggle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: bool SwitchVisionToggle
                (
                );
                /**Sets  the switch vision toggle 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSwitchVisionToggle
                (
                    bool switchVisionToggle /** switchvisiontoggle */ 
                );
                /**Returns  the switch vision color 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::NXColor * SwitchVisionColor
                (
                );
                /**Sets  the switch vision color 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSwitchVisionColor
                (
                    NXOpen::NXColor * switchVisionColor /** switchvisioncolor */ 
                );
                /**Returns  the switch vision layer 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : None */
                public: int SwitchVisionLayer
                (
                );
                /**Sets  the switch vision layer 
                 <br>  Created in NX1926.0.0.  <br>  
                 <br> License requirements : nx_general_packaging ("NX General Packaging") */
                public: void SetSwitchVisionLayer
                (
                    int switchVisionLayer /** switchvisionlayer */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
