#ifndef NXOpen_GEOMETRICANALYSIS_DISTANCEANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_DISTANCEANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_DistanceAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricAnalysis_FaceAnalysisDataRangeBuilder.hxx>
#include <NXOpen/GeometricAnalysis_FaceAnalysisDisplayBuilder.hxx>
#include <NXOpen/GeometricAnalysis_FaceAnalysisNormalsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class DistanceAnalysisBuilder;
    }
    class Builder;
    namespace GeometricAnalysis
    {
        class FaceAnalysisDataRangeBuilder;
    }
    namespace GeometricAnalysis
    {
        class FaceAnalysisDisplayBuilder;
    }
    namespace GeometricAnalysis
    {
        class FaceAnalysisNormalsBuilder;
    }
    class Plane;
    class SelectDisplayableObjectList;
    namespace GeometricAnalysis
    {
        class _DistanceAnalysisBuilderBuilder;
        class DistanceAnalysisBuilderImpl;
        /** Represents a Distance Analysis builder.  <br> To create a new instance of this class, use @link NXOpen::GeometricAnalysis::AnalysisObjectCollectionEx::CreateDistanceAnalysisBuilder  NXOpen::GeometricAnalysis::AnalysisObjectCollectionEx::CreateDistanceAnalysisBuilder @endlink  <br> 
        Default values.
        <list type="table"> 
         
        <listheader><term> 
        Property</term>  <description> 
        Value</description> </listheader>
        <item><term> 
         
        DataRange.IsFixed </term> <description> 
         
        1 </description> </item> 

        <item><term> 
         
        DataRange.Max </term> <description> 
         
        0.010000 </description> </item> 

        <item><term> 
         
        DataRange.Middle </term> <description> 
         
        0.000000 </description> </item> 

        <item><term> 
         
        DataRange.MiddleScale </term> <description> 
         
        0.000000 </description> </item> 

        <item><term> 
         
        DataRange.Min </term> <description> 
         
        -0.010000 </description> </item> 

        <item><term> 
         
        DataRange.ZoomScale </term> <description> 
         
        8 </description> </item> 

        <item><term> 
         
        DisplayMode </term> <description> 
         
        Fringe </description> </item> 

        <item><term> 
         
        DisplaySettings.CanShowFacet </term> <description> 
         
        0 </description> </item> 

        <item><term> 
         
        DisplaySettings.ColorLegendOption </term> <description> 
         
        Blend </description> </item> 

        <item><term> 
         
        DisplaySettings.DisplayResolution.AngleTolerance </term> <description> 
         
        15.0 </description> </item> 

        <item><term> 
         
        DisplaySettings.DisplayResolution.EdgeTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplaySettings.DisplayResolution.FaceTolerance </term> <description> 
         
        0.005 </description> </item> 

        <item><term> 
         
        DisplaySettings.DisplayResolution.Resolution </term> <description> 
         
        Standard </description> </item> 

        <item><term> 
         
        DisplaySettings.DisplayResolution.WidthTolerance </term> <description> 
         
        0.3 </description> </item> 

        <item><term> 
         
        DisplaySettings.NumberOfColors </term> <description> 
         
        Seven </description> </item> 

        <item><term> 
         
        NumberOfContourLines </term> <description> 
         
        8 </description> </item> 

        <item><term> 
         
        SpikeLength </term> <description> 
         
        25.4 (millimeters part), 1.0 (inches part) </description> </item> 

        </list> 

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  DistanceAnalysisBuilder : public NXOpen::Builder
        {
            /** The display type. */
            public: enum DisplayModes
            {
                DisplayModesFringe/** Display in fringe. */,
                DisplayModesHedgehog/** Display in hedgehog. */,
                DisplayModesContourLines/** Display in contour lines. */
            };

            private: DistanceAnalysisBuilderImpl * m_distanceanalysisbuilder_impl;
            private: friend class  _DistanceAnalysisBuilderBuilder;
            protected: DistanceAnalysisBuilder();
            public: ~DistanceAnalysisBuilder();
            /**Returns  the face to apply distance analysis. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * Faces
            (
            );
            /**Returns  the reference plane for distance analysis.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * Plane
            (
            );
            /**Sets  the reference plane for distance analysis.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPlane
            (
                NXOpen::Plane * plane /** plane */ 
            );
            /**Returns  the display mode. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::DistanceAnalysisBuilder::DisplayModes DisplayMode
            (
            );
            /**Sets  the display mode. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayMode
            (
                NXOpen::GeometricAnalysis::DistanceAnalysisBuilder::DisplayModes displayMode /** displaymode */ 
            );
            /**Returns  the spike length. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double SpikeLength
            (
            );
            /**Sets  the spike length. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSpikeLength
            (
                double spikeLength /** spikelength */ 
            );
            /**Returns  the number of contour lines. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int NumberOfContourLines
            (
            );
            /**Sets  the number of contour lines. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNumberOfContourLines
            (
                int numberOfContourLines /** numberofcontourlines */ 
            );
            /**Returns  the distance analysis data range. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceAnalysisDataRangeBuilder * DataRange
            (
            );
            /**Returns  the distance analysis normals. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceAnalysisNormalsBuilder * Normals
            (
            );
            /**Returns  the distance analysis display settings. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::FaceAnalysisDisplayBuilder * DisplaySettings
            (
            );
            /** Update display after plane changes. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateDisplayOnPlaneChange
            (
            );
            /** Start distance analysis. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void StartDistanceAnalysis
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
