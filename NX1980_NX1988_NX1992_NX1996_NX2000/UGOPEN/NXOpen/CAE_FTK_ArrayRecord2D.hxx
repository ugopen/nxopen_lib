#ifndef NXOpen_CAE_FTK_ARRAYRECORD2D_HXX_INCLUDED
#define NXOpen_CAE_FTK_ARRAYRECORD2D_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_FTK_ArrayRecord2D.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_FTK_BaseUnit.hxx>
#include <NXOpen/CAE_FTK_BaseRecord.hxx>
#include <NXOpen/CAE_FTK_IApplicationDataOwner.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace FTK
        {
            class ArrayRecord2D;
        }
    }
    namespace CAE
    {
        namespace FTK
        {
            class BaseRecord;
        }
    }
    namespace CAE
    {
        namespace FTK
        {
            class BaseUnit;
        }
    }
    namespace CAE
    {
        namespace FTK
        {
            class IApplicationData;
        }
    }
    namespace CAE
    {
        namespace FTK
        {
            class IApplicationDataOwner;
        }
    }
    namespace CAE
    {
        namespace FTK
        {
            class _ArrayRecord2DBuilder;
            class ArrayRecord2DImpl;
            /** Manages the 2d array record  <br> Not support KF.  <br> 
             <br>  Created in NX7.5.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  ArrayRecord2D : public NXOpen::CAE::FTK::BaseRecord, public virtual NXOpen::CAE::FTK::IApplicationDataOwner
            {
                private: ArrayRecord2DImpl * m_arrayrecord2d_impl;
                private: friend class  _ArrayRecord2DBuilder;
                protected: ArrayRecord2D();
                public: ~ArrayRecord2D();
                /** Sets X-Coordinate unit 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: void SetXCoordinateUnit
                (
                    NXOpen::CAE::FTK::BaseUnit * xCoordinateUnit /** X-Coordinate unit */
                );
                /** Gets X-Coordinate unit  @return  X-Coordinate unit 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::FTK::BaseUnit * GetXCoordinateUnit
                (
                );
                /** Sets Y-Coordinate unit 
                 <br>  Created in NX7.5.0.  <br>  
                 <br> License requirements : None */
                public: void SetYCoordinateUnit
                (
                    NXOpen::CAE::FTK::BaseUnit * yCoordinateUnit /** Y-Coordinate unit */
                );
                /** Gets Y-Coordinate unit  @return  Y-Coordinate unit 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::CAE::FTK::BaseUnit * GetYCoordinateUnit
                (
                );
                /** Sets real points data 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetRealData
                (
                    const std::vector<double> & xCoordinatePoints /** X-Coordinate data */,
                    const std::vector<double> & yCoordinatePoints /** Y-Coordinate data */
                );
                /** Gets real points data  @return  X-Coordinate data 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<double> GetRealData
                (
                    std::vector<double> & yCoordinatePoints /** Y-Coordinate data */
                );
                /** Sets complex points data 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetComplexData
                (
                    const std::vector<double> & xCoordinatePoints /** X-Coordinate data */,
                    const std::vector<double> & yCoordinateReal /** Real part of Y-Coordinate data */,
                    const std::vector<double> & yCoordinateImag /** Imaginary part of Y-Coordinate data */
                );
                /** Gets complex points data  @return  X-Coordinate data 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: std::vector<double> GetComplexData
                (
                    std::vector<double> & yCoordinateReal /** Real part of Y-Coordinate data */,
                    std::vector<double> & yCoordinateImag /** Imaginary part of Y-Coordinate data */
                );
                /** Gets the title 
                 <br>  Created in NX9.0.0.  <br>  
                 <br> License requirements : None */
                public: NXString GetTitle
                (
                );
                /** Sets the point labels 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetPointLabels
                (
                    const std::vector<NXString> & pointLabels /** pointlabels */ 
                );
                /** Gets the application specific data associated with the record 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::FTK::IApplicationData * GetApplicationData
                (
                );
                /** Sets the application specific data to the record 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual void SetApplicationData
                (
                    NXOpen::CAE::FTK::IApplicationData * applicationData /** applicationdata */ 
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
