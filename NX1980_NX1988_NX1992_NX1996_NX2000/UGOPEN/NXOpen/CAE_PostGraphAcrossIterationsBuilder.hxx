#ifndef NXOpen_CAE_POSTGRAPHACROSSITERATIONSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_POSTGRAPHACROSSITERATIONSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_PostGraphAcrossIterationsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_BaseIteration.hxx>
#include <NXOpen/CAE_PostGraphBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class PostGraphAcrossIterationsBuilder;
    }
    namespace CAE
    {
        class BaseIteration;
    }
    namespace CAE
    {
        class PostGraphBuilder;
    }
    namespace CAE
    {
        class _PostGraphAcrossIterationsBuilderBuilder;
        class PostGraphAcrossIterationsBuilderImpl;
        /**
                Represents a @link NXOpen::CAE::PostGraphAcrossIterationsBuilder NXOpen::CAE::PostGraphAcrossIterationsBuilder@endlink 
             <br> This is an abstract class and cannot be instantiated  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  PostGraphAcrossIterationsBuilder : public NXOpen::CAE::PostGraphBuilder
        {
            /** Defines the Iteration labeling options */
            public: enum IterationLabelingOption
            {
                IterationLabelingOptionValue/** value */ ,
                IterationLabelingOptionId/** id */ 
            };

            /** Defines the methods that can be used to combine multiple values into a single value */
            public: enum CombinationMethod
            {
                CombinationMethodAverage/** average */ ,
                CombinationMethodMinimum/** minimum */ ,
                CombinationMethodMaximum/** maximum */ ,
                CombinationMethodSum/** sum */ ,
                CombinationMethodDifference/** difference */ ,
                CombinationMethodWeightedAverage/** weighted average */ ,
                CombinationMethodIntegral/** integral */ ,
                CombinationMethodAbsoluteMinimum/** absolute minimum */ ,
                CombinationMethodAbsoluteMaximum/** absolute maximum */ ,
                CombinationMethodSignedAbsoluteMinimum/** signed absolute minimum */ ,
                CombinationMethodSignedAbsoluteMaximum/** signed absolute maximum */ ,
                CombinationMethodRms/** rms */ ,
                CombinationMethodRss/** rss */ ,
                CombinationMethodWeightedRMS/** weighted rms */ ,
                CombinationMethodWeightedRSS/** weighted rss */ 
            };

            private: PostGraphAcrossIterationsBuilderImpl * m_postgraphacrossiterationsbuilder_impl;
            private: friend class  _PostGraphAcrossIterationsBuilderBuilder;
            protected: PostGraphAcrossIterationsBuilder();
            public: ~PostGraphAcrossIterationsBuilder();
            /**Returns  the select iteration type to be set as x axis 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAcrossIterationsBuilder::IterationLabelingOption IterationValueOption
            (
            );
            /**Sets  the select iteration type to be set as x axis 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetIterationValueOption
            (
                NXOpen::CAE::PostGraphAcrossIterationsBuilder::IterationLabelingOption iterationValue /** iterationvalue */ 
            );
            /** Set start iteration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetStartIteration
            (
                NXOpen::CAE::BaseIteration * iteration /** iteration */ 
            );
            /** Set end iteration 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetEndIteration
            (
                NXOpen::CAE::BaseIteration * iteration /** iteration */ 
            );
            /**Returns  the step spacing to be used between the start and end iteration. 
                        This option can be used to reduce the amount of data graphed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int IterationStepSpacing
            (
            );
            /**Sets  the step spacing to be used between the start and end iteration. 
                        This option can be used to reduce the amount of data graphed. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetIterationStepSpacing
            (
                int iterationStepSpacing /** iterationstepspacing */ 
            );
            /**Returns  the combine across entities method to be used if  @link NXOpen::CAE::PostGraphAcrossIterationsBuilder::CombineAcrossEntities NXOpen::CAE::PostGraphAcrossIterationsBuilder::CombineAcrossEntities@endlink  is True 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool CombineAcrossEntities
            (
            );
            /**Sets  the combine across entities method to be used if  @link NXOpen::CAE::PostGraphAcrossIterationsBuilder::CombineAcrossEntities NXOpen::CAE::PostGraphAcrossIterationsBuilder::CombineAcrossEntities@endlink  is True 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetCombineAcrossEntities
            (
                bool combineAcrossEntities /** combineacrossentities */ 
            );
            /**Returns  the set combine across entities option type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::PostGraphAcrossIterationsBuilder::CombinationMethod CombineValueFromEntitiesOption
            (
            );
            /**Sets  the set combine across entities option type 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetCombineValueFromEntitiesOption
            (
                NXOpen::CAE::PostGraphAcrossIterationsBuilder::CombinationMethod combineOption /** combineoption */ 
            );
            /**Returns  the set iteration value type filter 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::BaseIteration::IterationValueType IterationValueFilter
            (
            );
            /**Sets  the set iteration value type filter 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetIterationValueFilter
            (
                NXOpen::CAE::BaseIteration::IterationValueType iterValue /** itervalue */ 
            );
            /**Returns  the create entity label option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool CreateEntityLabelToggleValue
            (
            );
            /**Sets  the create entity label option 
             <br>  Created in NX1926.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void SetCreateEntityLabelToggleValue
            (
                bool toggleValue /** togglevalue */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
