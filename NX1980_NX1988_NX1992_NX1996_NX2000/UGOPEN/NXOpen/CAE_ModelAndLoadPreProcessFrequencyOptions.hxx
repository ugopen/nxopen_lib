#ifndef NXOpen_CAE_MODELANDLOADPREPROCESSFREQUENCYOPTIONS_HXX_INCLUDED
#define NXOpen_CAE_MODELANDLOADPREPROCESSFREQUENCYOPTIONS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelAndLoadPreProcessFrequencyOptions.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModelAndLoadPreProcessFrequencyOptions;
    }
    class Expression;
    class NXObject;
    namespace CAE
    {
        class _ModelAndLoadPreProcessFrequencyOptionsBuilder;
        class ModelAndLoadPreProcessFrequencyOptionsImpl;
        /** Represents a @link NXOpen::CAE::ModelAndLoadPreProcessFrequencyOptions NXOpen::CAE::ModelAndLoadPreProcessFrequencyOptions@endlink . 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModelAndLoadPreProcessFrequencyOptions : public NXOpen::NXObject
        {
            /** the frequency options definition types */
            public: enum Frequencyrangedefinitiontype
            {
                FrequencyrangedefinitiontypeIndividualFrequencies/** individual frequencies */ ,
                FrequencyrangedefinitiontypeLinearSweep/** linear sweep */ ,
                FrequencyrangedefinitiontypeLogarithmicSweep/** logarithmic sweep */ ,
                FrequencyrangedefinitiontypeOctave/** octave */ ,
                FrequencyrangedefinitiontypeOctave3/** octave3 */ ,
                FrequencyrangedefinitiontypeOctave12/** octave12 */ ,
                FrequencyrangedefinitiontypeUserFrequenciesFromInput/** user frequencies from input */ 
            };

            private: ModelAndLoadPreProcessFrequencyOptionsImpl * m_modelandloadpreprocessfrequencyoptions_impl;
            private: friend class  _ModelAndLoadPreProcessFrequencyOptionsBuilder;
            protected: ModelAndLoadPreProcessFrequencyOptions();
            public: ~ModelAndLoadPreProcessFrequencyOptions();
            /**Returns  the definition type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessFrequencyOptions::Frequencyrangedefinitiontype DefinitionType
            (
            );
            /**Sets  the definition type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetDefinitionType
            (
                NXOpen::CAE::ModelAndLoadPreProcessFrequencyOptions::Frequencyrangedefinitiontype definitionType /** definitiontype */ 
            );
            /** Returns the individual frequencies 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetIndividualFrequencies
            (
            );
            /** Sets the individual frequencies 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetIndividualFrequencies
            (
                const std::vector<NXString> & individualFrequencies /** individualfrequencies */ 
            );
            /**Returns  the start frequency linear 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * StartFrequencyLinear
            (
            );
            /**Returns  the end frequency linear 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * EndFrequencyLinear
            (
            );
            /**Returns  the step value linear 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StepValueLinear
            (
            );
            /**Returns  the start frequency logarithmic 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * StartFrequencyLogarithmic
            (
            );
            /**Returns  the end frequency logarithmic 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * EndFrequencyLogarithmic
            (
            );
            /**Returns  the num logarithmic intervals 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int NumLogarithmicIntervals
            (
            );
            /**Sets  the num logarithmic intervals 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetNumLogarithmicIntervals
            (
                int numLogarithmicIntervals /** numlogarithmicintervals */ 
            );
            /**Returns  the lower center frequency octave 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * LowerCenterFrequencyOctave
            (
            );
            /**Returns  the upper center frequency octave 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Expression * UpperCenterFrequencyOctave
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
