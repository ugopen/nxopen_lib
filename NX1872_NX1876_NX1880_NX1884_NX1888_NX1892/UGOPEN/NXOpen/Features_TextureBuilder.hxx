#ifndef NXOpen_FEATURES_TEXTUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_TEXTUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_TextureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_TransformerData.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class TextureBuilder;
    }
    class Builder;
    class Expression;
    namespace GeometricUtilities
    {
        class TransformerData;
    }
    namespace Features
    {
        class _TextureBuilderBuilder;
        class TextureBuilderImpl;
        /** Represents a Texture builder  <br> To create a new instance of this class, use @link NXOpen::Features::FreeformSurfaceCollection::CreateTextureBuilder  NXOpen::Features::FreeformSurfaceCollection::CreateTextureBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        MaximumOffset.Value </td> <td> 
         
        1 (millimeters part), 0.04 (inches part) </td> </tr> 

        <tr><td> 
         
        ScaleUniform </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  TextureBuilder : public NXOpen::Builder
        {
            /** the perserving type */
            public: enum ImprintImageValues
            {
                ImprintImageValuesDark/** dark */ ,
                ImprintImageValuesLight/** light */ 
            };

            private: TextureBuilderImpl * m_texturebuilder_impl;
            private: friend class  _TextureBuilderBuilder;
            protected: TextureBuilder();
            public: ~TextureBuilder();
            /**Returns  the image file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ImageFile
            (
            );
            /**Sets  the image file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetImageFile
            (
                const NXString & imageFileName /** imagefilename */ 
            );
            /**Sets  the image file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            void SetImageFile
            (
                const char * imageFileName /** imagefilename */ 
            );
            /**Returns  the Scale Uniform 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool ScaleUniform
            (
            );
            /**Sets  the Scale Uniform 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetScaleUniform
            (
                bool scaleUniform /** scaleuniform */ 
            );
            /**Returns  the flag indicating if image is patterned. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool PatternImage
            (
            );
            /**Sets  the flag indicating if image is patterned. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPatternImage
            (
                bool patternImage /** patternimage */ 
            );
            /**Returns  the number of image instances in direction 1 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int PatternCountDirection1
            (
            );
            /**Sets  the number of image instances in direction 1 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPatternCountDirection1
            (
                int patternCountX /** patterncountx */ 
            );
            /**Returns  the number of image instances in direction 2 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int PatternCountDirection2
            (
            );
            /**Sets  the number of image instances in direction 2 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPatternCountDirection2
            (
                int patternCountDirection2 /** patterncountdirection2 */ 
            );
            /**Returns  the flag indicating if image should be made monochromatic. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MakeMonochrome
            (
            );
            /**Sets  the flag indicating if image should be made monochromatic. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetMakeMonochrome
            (
                bool makeMonochrome /** makemonochrome */ 
            );
            /**Returns  the Overall Translucency 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int OverallTranslucency
            (
            );
            /**Sets  the Overall Translucency 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetOverallTranslucency
            (
                int overallTranslucency /** overalltranslucency */ 
            );
            /**Returns  the transformation tool. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TransformerData * Transformer
            (
            );
            /**Returns  the imprint type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::TextureBuilder::ImprintImageValues ImprintImageValue
            (
            );
            /**Sets  the imprint type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetImprintImageValue
            (
                NXOpen::Features::TextureBuilder::ImprintImageValues imprintImageValue /** imprintimagevalue */ 
            );
            /**Returns  the imprint offset dim 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumOffset
            (
            );
            /**Sets  the Smooth Edge 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetSmoothEdge
            (
                bool smoothEdge /** smoothedge */ 
            );
            /**Returns  the Smooth Edge 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : nx_polygon_modeling (" NX Polygon Modeling") */
            public: bool SmoothEdge
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
