#ifndef NXOpen_AME_ADDPLACEHOLDERBUILDER_HXX_INCLUDED
#define NXOpen_AME_ADDPLACEHOLDERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_AddPlaceholderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_SelectClassificationBuilder.hxx>
#include <NXOpen/AME_SelectionBaseDefinitionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class AddPlaceholderBuilder;
    }
    namespace AME
    {
        class SelectClassificationBuilder;
    }
    namespace AME
    {
        class SelectionBaseDefinitionBuilder;
    }
    class Builder;
    namespace AME
    {
        class _AddPlaceholderBuilderBuilder;
        class AddPlaceholderBuilderImpl;
        /** the builder for adding placeholder  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateAddPlaceholderBuilder  NXOpen::AME::AMEManager::CreateAddPlaceholderBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  AddPlaceholderBuilder : public NXOpen::Builder
        {
            /** the category */
            public: enum Category
            {
                CategoryConnections/** connections */ ,
                CategoryConnectionsA/** connections a */ ,
                CategoryConnectionsB/** connections b */ ,
                CategoryConnectionParents/** connection parents */ ,
                CategoryConnectionParentsA/** connection parents a */ ,
                CategoryConnectionParentsB/** connection parents b */ ,
                CategoryObjects/** objects */ ,
                CategoryObjectParents/** object parents */ ,
                CategoryObjectPortsA/** object ports a */ ,
                CategoryObjectPortsB/** object ports b */ ,
                CategorySources/** sources */ ,
                CategorySourceParents/** source parents */ ,
                CategorySourcePorts/** source ports */ ,
                CategoryTargets/** targets */ ,
                CategoryTargetsA/** targets a */ ,
                CategoryTargetsB/** targets b */ ,
                CategoryTargetParents/** target parents */ ,
                CategoryTargetParentsA/** target parents a */ ,
                CategoryTargetParentsB/** target parents b */ ,
                CategoryTargetPorts/** target ports */ ,
                CategoryTargetPortsA/** target ports a */ ,
                CategoryTargetPortsB/** target ports b */ ,
                CategoryPlaceholder/** placeholder */ 
            };

            /** the flp */
            public: enum Flp
            {
                FlpFunction/** function */ ,
                FlpLocation/** location */ ,
                FlpProduct/** product */ ,
                FlpAutomation/** automation */ 
            };

            /** the properties */
            public: enum Property
            {
                PropertyType/** type */ ,
                PropertyProduct/** product */ ,
                PropertyGeneral/** general */ ,
                PropertyAspect/** aspect */ ,
                PropertyPage/** page */ ,
                PropertyTag/** tag */ 
            };

            private: AddPlaceholderBuilderImpl * m_addplaceholderbuilder_impl;
            private: friend class  _AddPlaceholderBuilderBuilder;
            protected: AddPlaceholderBuilder();
            public: ~AddPlaceholderBuilder();
            /**Returns  the select classification builder 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectClassificationBuilder * SelectClassification
            (
            );
            /**Sets  the select classification builder 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSelectClassification
            (
                NXOpen::AME::SelectClassificationBuilder * selectClassification /** selectclassification */ 
            );
            /**Returns  the select category 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AddPlaceholderBuilder::Category CategorySelector
            (
            );
            /**Sets  the select category 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetCategorySelector
            (
                NXOpen::AME::AddPlaceholderBuilder::Category categoryValue /** categoryvalue */ 
            );
            /**Returns  the select flp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AddPlaceholderBuilder::Flp FLPSelector
            (
            );
            /**Sets  the select flp 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFLPSelector
            (
                NXOpen::AME::AddPlaceholderBuilder::Flp flpValue /** flpvalue */ 
            );
            /**Returns  the select property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::AddPlaceholderBuilder::Property PropertySelector
            (
            );
            /**Sets  the select property 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetPropertySelector
            (
                NXOpen::AME::AddPlaceholderBuilder::Property propertyValue /** propertyvalue */ 
            );
            /**Returns  the select library object
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectionBaseDefinitionBuilder * SelectLibraryObject
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
