#ifndef NXOpen_MARKUP_ANNOTATIONCOLLECTION_HXX_INCLUDED
#define NXOpen_MARKUP_ANNOTATIONCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Markup_AnnotationCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Markup_Circle.hxx>
#include <NXOpen/Markup_Ellipse.hxx>
#include <NXOpen/Markup_Freehand.hxx>
#include <NXOpen/Markup_Icon.hxx>
#include <NXOpen/Markup_Polyline.hxx>
#include <NXOpen/Markup_Rectangle.hxx>
#include <NXOpen/Markup_Text.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_markup_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Markup
    {
        class AnnotationCollection;
    }
    namespace Markup
    {
        class Layer;
    }
    namespace Markup
    {
        class Annotation;
    }
    namespace Markup
    {
        class Circle;
    }
    namespace Markup
    {
        class Ellipse;
    }
    namespace Markup
    {
        class Freehand;
    }
    namespace Markup
    {
        class Icon;
    }
    namespace Markup
    {
        class Polyline;
    }
    namespace Markup
    {
        class Rectangle;
    }
    namespace Markup
    {
        class Text;
    }
    class TaggedObject;
    namespace Markup
    {
        class AnnotationCollectionImpl;

        /// \cond NX_NO_DOC 
        /** This collects all the markups in the @link NXOpen::Markup::Layer NXOpen::Markup::Layer@endlink   <br> To obtain an instance of this class, refer to @link NXOpen::Markup::Layer  NXOpen::Markup::Layer @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_MARKUPEXPORT  AnnotationCollection : public NXOpen::TaggedObjectCollection
        {
            private: AnnotationCollectionImpl * m_annotationcollection_impl;
            private: NXOpen::Markup::Layer* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit AnnotationCollection(NXOpen::Markup::Layer *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~AnnotationCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Markup::AnnotationCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Markup::Annotation *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Markup::AnnotationCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_MARKUPEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_MARKUPEXPORT  void next();
                NXOpen::Markup::AnnotationCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the @link NXOpen::Markup::Annotation NXOpen::Markup::Annotation@endlink  with the given id in current layer.
                        An exception will be thrown if no object can be found with given name.  @return  @link NXOpen::Markup::Annotation NXOpen::Markup::Annotation@endlink  with this id 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Markup::Annotation * FindObject
            (
                const NXString & id /** The id of the @link NXOpen::Markup::Annotation NXOpen::Markup::Annotation@endlink  */
            );
            /** Finds the @link NXOpen::Markup::Annotation NXOpen::Markup::Annotation@endlink  with the given id in current layer.
                        An exception will be thrown if no object can be found with given name.  @return  @link NXOpen::Markup::Annotation NXOpen::Markup::Annotation@endlink  with this id 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Markup::Annotation * FindObject
            (
                const char * id /** The id of the @link NXOpen::Markup::Annotation NXOpen::Markup::Annotation@endlink  */
            );
            /** Creates a @link NXOpen::Markup::Circle NXOpen::Markup::Circle@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Markup::Circle * CreateCircle
            (
                const NXOpen::Point3d & center /** center */ ,
                double radius /** radius */ 
            );
            /** Creates a @link NXOpen::Markup::Ellipse NXOpen::Markup::Ellipse@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Markup::Ellipse * CreateEllipse
            (
                const NXOpen::Point3d & center /** center */ ,
                double major /** major */ ,
                double minor /** minor */ 
            );
            /** Creates a @link NXOpen::Markup::Rectangle NXOpen::Markup::Rectangle@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Markup::Rectangle * CreateRectangle
            (
                const NXOpen::Point3d & center /** center */ ,
                double length /** length */ ,
                double width /** width */ 
            );
            /** Creates a @link NXOpen::Markup::Polyline NXOpen::Markup::Polyline@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Markup::Polyline * CreatePolyline
            (
                const std::vector<NXOpen::Point3d> & points /** points */ 
            );
            /** Creates a @link NXOpen::Markup::Freehand NXOpen::Markup::Freehand@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Markup::Freehand * CreateFreehand
            (
                const std::vector<NXOpen::Point3d> & points /** points */ 
            );
            /** Creates a @link NXOpen::Markup::Text NXOpen::Markup::Text@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Markup::Text * CreateText
            (
                const NXOpen::Point3d & position /** position */ ,
                const NXString & textContent /** textcontent */ 
            );
            /** Creates a @link NXOpen::Markup::Text NXOpen::Markup::Text@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Markup::Text * CreateText
            (
                const NXOpen::Point3d & position /** position */ ,
                const char * textContent /** textcontent */ 
            );
            /** Creates a @link NXOpen::Markup::Icon NXOpen::Markup::Icon@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Markup::Icon * CreateIcon
            (
                const NXOpen::Point3d & position /** position */ ,
                const NXString & iconName /** iconname */ ,
                NXOpen::Markup::Icon::Size size /** size */ 
            );
            /** Creates a @link NXOpen::Markup::Icon NXOpen::Markup::Icon@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::Markup::Icon * CreateIcon
            (
                const NXOpen::Point3d & position /** position */ ,
                const char * iconName /** iconname */ ,
                NXOpen::Markup::Icon::Size size /** size */ 
            );
            /** Deletes a list of @link NXOpen::Markup::Annotation NXOpen::Markup::Annotation@endlink  
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteObjects
            (
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
        }; //lint !e1712 default constructor not defined for class  


        /// \endcond 
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
