#ifndef NXOpen_MOTION_BODYCONTACTSPHERETOCAD_HXX_INCLUDED
#define NXOpen_MOTION_BODYCONTACTSPHERETOCAD_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_BodyContactSphereToCAD.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class BodyContactSphereToCAD;
    }
    class Direction;
    class Expression;
    class ExternalFileReferenceAdapter;
    class IExternalFileReferencer;
    namespace Motion
    {
        class SelectLink;
    }
    class NXObject;
    namespace Motion
    {
        class _BodyContactSphereToCADBuilder;
        class BodyContactSphereToCADImpl;
        /** Represents a @link NXOpen::Motion::BodyContactSphereToCAD NXOpen::Motion::BodyContactSphereToCAD@endlink  
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  BodyContactSphereToCAD : public NXOpen::NXObject, public virtual NXOpen::IExternalFileReferencer
        {
            /** the enum for friction option  */
            public: enum CoulombFriction
            {
                CoulombFrictionOff/** off */ ,
                CoulombFrictionOn/** on */ 
            };

            private: BodyContactSphereToCADImpl * m_bodycontactspheretocad_impl;
            private: friend class  _BodyContactSphereToCADBuilder;
            protected: BodyContactSphereToCAD();
            public: ~BodyContactSphereToCAD();
            /**Returns  the sphere radius
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SphereRadius
            (
            );
            /**Returns  the partial sphere option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool PartialSphereOption
            (
            );
            /**Sets  the partial sphere option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPartialSphereOption
            (
                bool partialSphereOption /** partialsphereoption */ 
            );
            /**Returns  the partial sphere vector
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * PartialSphereVector
            (
            );
            /**Sets  the partial sphere vector
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPartialSphereVector
            (
                NXOpen::Direction * partialSphereVector /** partialspherevector */ 
            );
            /**Returns  the partial sphere angle
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * PartialSphereAngle
            (
            );
            /**Returns  the sphere max facet size
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * SphereMaxFacetSize
            (
            );
            /**Returns  the stiffness 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Stiffness
            (
            );
            /**Returns  the material damping 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaterialDamping
            (
            );
            /**Returns  the max penetration depth 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaxPenetrationDepth
            (
            );
            /**Returns  the force exponent 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * ForceExponent
            (
            );
            /**Returns  the coulomb friction option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::BodyContactSphereToCAD::CoulombFriction CoulombFrictionOption
            (
            );
            /**Sets  the coulomb friction option 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetCoulombFrictionOption
            (
                NXOpen::Motion::BodyContactSphereToCAD::CoulombFriction coulombFrictionOption /** coulombfrictionoption */ 
            );
            /**Returns  the static coefficient 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StaticCoefficient
            (
            );
            /**Returns  the stiction velocity 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StictionVelocity
            (
            );
            /**Returns  the dynamic coefficient 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DynamicCoefficient
            (
            );
            /**Returns  the friction velocity 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * FrictionVelocity
            (
            );
            /**Returns  the action distance tolerance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BodyDistanceTolerance
            (
            );
            /**Returns  the action angle tolerance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BodyAngleTolerance
            (
            );
            /**Returns  the action enable max facet size 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool BodyEnableMaxFacetSize
            (
            );
            /**Sets  the action enable max facet size 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetBodyEnableMaxFacetSize
            (
                bool actionEnableMaxFacetSize /** actionenablemaxfacetsize */ 
            );
            /**Returns  the action max facet size 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * BodyMaxFacetSize
            (
            );
            /**Returns  the tessellation file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool UseTessellationFile
            (
            );
            /**Sets  the tessellation file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetUseTessellationFile
            (
                bool fileOption /** fileoption */ 
            );
            /**Returns  the tessellation  file
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") NXString TessellationFile
            (
            );
            /**Sets  the tessellation  file
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::ExternalFileReferenceAdapter::EstablishReference NXOpen::ExternalFileReferenceAdapter::EstablishReference@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::ExternalFileReferenceAdapter::EstablishReference") void SetTessellationFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the tessellation  file
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::ExternalFileReferenceAdapter::EstablishReference NXOpen::ExternalFileReferenceAdapter::EstablishReference@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetTessellationFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns  the first super element motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * SuperElementLink
            (
            );
            /**Returns  the first super element increment 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int SuperElementIncrement
            (
            );
            /**Sets  the first super element increment 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSuperElementIncrement
            (
                int superElementIncrement /** superelementincrement */ 
            );
            /**Returns  the super element report instance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int SuperElementReportInstance
            (
            );
            /**Sets  the super element report instance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSuperElementReportInstance
            (
                int superElementReportInstance /** superelementreportinstance */ 
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
