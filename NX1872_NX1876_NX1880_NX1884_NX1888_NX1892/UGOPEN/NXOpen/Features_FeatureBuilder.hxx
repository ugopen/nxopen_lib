#ifndef NXOpen_FEATURES_FEATUREBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_FEATUREBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FeatureBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class FeatureBuilder;
    }
    class Body;
    class Builder;
    namespace Features
    {
        class Feature;
    }
    namespace Features
    {
        class _FeatureBuilderBuilder;
        class FeatureBuilderImpl;
        /**
        Represents a Feature Builder to be used in the creation and modification of features. Feature Builders
        manage the steps needed to correctly create features on a part. 
         <br> This is an abstract class, and cannot be instantiated.  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  FeatureBuilder : public NXOpen::Builder
        {
            private: FeatureBuilderImpl * m_featurebuilder_impl;
            private: friend class  _FeatureBuilderBuilder;
            protected: FeatureBuilder();
            public: ~FeatureBuilder();
            /** Commits the feature parameters and creates the feature  @return  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::Feature * CommitFeature
            (
            );
            /** Returns the feature currently being edited by this builder. If
                    a new feature is being created, and the builder has not yet
                    been commited, returns NULL.
                  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR cam_base ("CAM BASE") OR geometric_tol ("GDT") OR insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::Features::Feature * GetFeature
            (
            );
            /** Set the parent features which would be internal or slaves to the feature
                    being created or commited 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetParentFeatureInternal
            (
                NXOpen::Features::Feature * parentFeature /** Slave feature */
            );
            /**Sets  whether or not the latest timestamped parent feature of this feature
                should be made internal 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetParentFeatureInternal
            (
                bool isInternal /** True = internal, False = external */
            );
            /**Returns  whether or not the latest timestamped parent feature of this feature
                should be made internal 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: bool ParentFeatureInternal
            (
            );
            /** Set the internal parent feature of the feature being edited to external 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void UnsetParentFeatureInternal
            (
                NXOpen::Features::Feature * parentFeature /** Slave feature */
            );
            /** Unsuppress an internal parent feature (a slave feature) so it can be edited. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void ShowInternalParentFeatureForEdit
            (
                NXOpen::Features::Feature * parentFeature /** Slave feature */
            );
            /** Re-suppress an internal parent feature (a slave feature) after it has been edited. Note
                    that this method will do nothing if @link ShowInternalParentFeatureForEdit ShowInternalParentFeatureForEdit@endlink 
                    has not previously been called. Also note that this action will happen automatically when
                    the feature builder is destroyed so calling this method is not strictly necessary. 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void HideInternalParentFeatureAfterEdit
            (
                NXOpen::Features::Feature * parentFeature /** Slave feature */
            );

            /// \cond NX_NO_DOC 
            /**Returns  the patch solution flag 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool PatchSolutionFlag
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the patch solution flag 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPatchSolutionFlag
            (
                bool optionValue /** option value */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the patch surface filename 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXString PatchSurfaceFilename
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the patch surface filename 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetPatchSurfaceFilename
            (
                const NXString & surfaceFilename /** surface filename */ 
            );
            /**Sets  the patch surface filename 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            void SetPatchSurfaceFilename
            (
                const char * surfaceFilename /** surface filename */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the surrounding patch surface filename 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXString SurroundingPatchSurfaceFilename
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the surrounding patch surface filename 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetSurroundingPatchSurfaceFilename
            (
                const NXString & surroundingSurfaceFilename /** surrounding surface filename */ 
            );
            /**Sets  the surrounding patch surface filename 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            void SetSurroundingPatchSurfaceFilename
            (
                const char * surroundingSurfaceFilename /** surrounding surface filename */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Returns a list of preview bodies of the feature 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Body *> GetPreviewBody
            (
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
