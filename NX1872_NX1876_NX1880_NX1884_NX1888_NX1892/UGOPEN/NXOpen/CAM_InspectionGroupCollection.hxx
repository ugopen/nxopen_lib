#ifndef NXOpen_CAM_INSPECTIONGROUPCOLLECTION_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONGROUPCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionGroupCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_NCGroupCollection.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionGroupCollection;
    }
    namespace CAM
    {
        class InspectionSetup;
    }
    namespace CAM
    {
        class InspectionGroup;
    }
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class InspectionMethodBuilder;
    }
    namespace CAM
    {
        class InspectionProbeToolBuilder;
    }
    namespace CAM
    {
        class MachineGroupBuilder;
    }
    namespace CAM
    {
        class MachinePocketGroupBuilder;
    }
    namespace CAM
    {
        class MachineTurretGroupBuilder;
    }
    namespace CAM
    {
        class ProbeToolBuilder;
    }
    namespace CAM
    {
        class ProgramOrderGroupBuilder;
    }
    namespace CAM
    {
        class InspectionGroupCollectionImpl;
        /** Represents the group collection for CMM Inspection  <br> To obtain an instance of this class, refer to @link NXOpen::CAM::InspectionSetup  NXOpen::CAM::InspectionSetup @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionGroupCollection : public NXOpen::TaggedObjectCollection
        {
            private: InspectionGroupCollectionImpl * m_inspectiongroupcollection_impl;
            private: NXOpen::CAM::InspectionSetup* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit InspectionGroupCollection(NXOpen::CAM::InspectionSetup *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~InspectionGroupCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::CAM::InspectionGroupCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CAM::InspectionGroup *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::CAM::InspectionGroupCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_CAMEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_CAMEXPORT  void next();
                NXOpen::CAM::InspectionGroupCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the CAMInspectionGroup object with the given identifier as recorded in a journal. @return  the found object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionGroup * FindObject
            (
                const NXString & sid /** the name of the object */
            );
            /** Finds the CAMInspectionGroup object with the given identifier as recorded in a journal. @return  the found object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            NXOpen::CAM::InspectionGroup * FindObject
            (
                const char * sid /** the name of the object */
            );
            /** Create a program group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created program group; otherwise, the
                    specified name will be used. @return  the created program group 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionGroup * CreateProgram
            (
                NXOpen::CAM::InspectionGroup * parentGroup /** the parent group */,
                const NXString & typeName /** the name of the template type */,
                const NXString & subtypeName /** the name of the template subtype */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const NXString & newProgramName /** the name of the created program group,
                                                                                    only used when use_default_name == true. */
            );
            /** Create a program group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created program group; otherwise, the
                    specified name will be used. @return  the created program group 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            NXOpen::CAM::InspectionGroup * CreateProgram
            (
                NXOpen::CAM::InspectionGroup * parentGroup /** the parent group */,
                const char * typeName /** the name of the template type */,
                const char * subtypeName /** the name of the template subtype */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const char * newProgramName /** the name of the created program group,
                                                                                    only used when use_default_name == true. */
            );
            /** Create a method group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created method group; otherwise, the
                    specified name will be used. @return  the created method group 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionGroup * CreateMethod
            (
                NXOpen::CAM::InspectionGroup * parentGroup /** the parent group */,
                const NXString & typeName /** the name of the template type */,
                const NXString & subtypeName /** the name of the template subtype */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const NXString & newMethodName /** the name of the created method group,
                                                                                      only used when use_default_name == true  */
            );
            /** Create a method group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created method group; otherwise, the
                    specified name will be used. @return  the created method group 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            NXOpen::CAM::InspectionGroup * CreateMethod
            (
                NXOpen::CAM::InspectionGroup * parentGroup /** the parent group */,
                const char * typeName /** the name of the template type */,
                const char * subtypeName /** the name of the template subtype */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const char * newMethodName /** the name of the created method group,
                                                                                      only used when use_default_name == true  */
            );
            /** Create a tool group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created tool group; otherwise, the
                    specified name will be used. @return  the created tool group 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionGroup * CreateTool
            (
                NXOpen::CAM::InspectionGroup * parentGroup /** the parent group */,
                const NXString & typeName /** the name of the template type */,
                const NXString & subtypeName /** the name of the template subtype */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const NXString & newToolName /** the name of the created tool group,
                                                                                      only used when use_default_name == true */
            );
            /** Create a tool group of the specified type and subtype under the parent group. If the value of
                    use_default_name is true, default name will be used for the created tool group; otherwise, the
                    specified name will be used. @return  the created tool group 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            NXOpen::CAM::InspectionGroup * CreateTool
            (
                NXOpen::CAM::InspectionGroup * parentGroup /** the parent group */,
                const char * typeName /** the name of the template type */,
                const char * subtypeName /** the name of the template subtype */,
                NXOpen::CAM::NCGroupCollection::UseDefaultName useDefaultName /** use the default name or not */,
                const char * newToolName /** the name of the created tool group,
                                                                                      only used when use_default_name == true */
            );
            /** Creates a program order group builder for Inspection  @return  program order group builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::ProgramOrderGroupBuilder * CreateProgramOrderGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a CMM Inspection method builder  @return  CMM Inspection method builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionMethodBuilder * CreateInspectionMethodBuilder
            (
                NXOpen::CAM::CAMObject * param /** CMM Inspection method to be edited */
            );
            /** Creates a probe tool builder for Inspection  @return  probe tool builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::ProbeToolBuilder * CreateProbeToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** probe tool group to be edited */
            );
            /** Creates a probe tool builder for Inspection  @return  probe tool builder created 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::InspectionProbeToolBuilder * CreateInspectionProbeToolBuilder
            (
                NXOpen::CAM::CAMObject * param /** probe tool group to be edited */
            );
            /** Creates a machine group builder for Inspection  @return  builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::MachineGroupBuilder * CreateMachineGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a machine turret group builder for Inspection  @return  builder created 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::MachineTurretGroupBuilder * CreateMachineTurretGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
            /** Creates a machine pocket group builder for Inspection  @return  builder created 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: NXOpen::CAM::MachinePocketGroupBuilder * CreateMachinePocketGroupBuilder
            (
                NXOpen::CAM::CAMObject * param /** the object to be edited */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
