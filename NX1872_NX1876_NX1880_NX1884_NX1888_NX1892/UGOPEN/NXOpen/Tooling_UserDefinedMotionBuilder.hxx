#ifndef NXOpen_TOOLING_USERDEFINEDMOTIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_USERDEFINEDMOTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_UserDefinedMotionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class UserDefinedMotionBuilder;
    }
    class Axis;
    class Builder;
    class Direction;
    class SelectDisplayableObjectList;
    namespace Tooling
    {
        class _UserDefinedMotionBuilderBuilder;
        class UserDefinedMotionBuilderImpl;
        /** Represents a @link NXOpen::Tooling::UserDefinedMotionBuilder NXOpen::Tooling::UserDefinedMotionBuilder@endlink  to create user defined motion, which
            contains linear and rotary motion  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateUserDefinedMotionBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateUserDefinedMotionBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        LinearCurveType </td> <td> 
         
        Linear </td> </tr> 

        <tr><td> 
         
        MotionType </td> <td> 
         
        Linear </td> </tr> 

        <tr><td> 
         
        MoveDistance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PressStartAngle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        PressStopAngle </td> <td> 
         
        90 </td> </tr> 

        <tr><td> 
         
        ReturnStartAngle </td> <td> 
         
        180 </td> </tr> 

        <tr><td> 
         
        ReturnStopAngle </td> <td> 
         
        270 </td> </tr> 

        <tr><td> 
         
        RotaryCurveType </td> <td> 
         
        Rotary </td> </tr> 

        <tr><td> 
         
        RotationAngle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseControlData </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  UserDefinedMotionBuilder : public NXOpen::Builder
        {
            /** Specifies the motion types */
            public: enum MotionTypes
            {
                MotionTypesLinear/** Linear motion type */,
                MotionTypesRotary/** Rotary motion type */
            };

            /** Specifies the motion curve types when motion type is Linear */
            public: enum LinearCurveTypes
            {
                LinearCurveTypesLinear/** Linear motion curve type */,
                LinearCurveTypesFromFile/** Motion curve data read from file type */
            };

            /** Specifies the motion curve types when motion type is Rotary */
            public: enum RotaryCurveTypes
            {
                RotaryCurveTypesRotary/** Rotary motion curve type */,
                RotaryCurveTypesFromFile/** Motion curve data read from file type */
            };

            private: UserDefinedMotionBuilderImpl * m_userdefinedmotionbuilder_impl;
            private: friend class  _UserDefinedMotionBuilderBuilder;
            protected: UserDefinedMotionBuilder();
            public: ~UserDefinedMotionBuilder();
            /**Returns  the motion body 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * MotionBody
            (
            );
            /**Returns  the motion type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::UserDefinedMotionBuilder::MotionTypes MotionType
            (
            );
            /**Sets  the motion type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetMotionType
            (
                NXOpen::Tooling::UserDefinedMotionBuilder::MotionTypes motionType /** motiontype */ 
            );
            /**Returns  the linear motion vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * LinearMotionVector
            (
            );
            /**Sets  the linear motion vector 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetLinearMotionVector
            (
                NXOpen::Direction * linearMotionVector /** linearmotionvector */ 
            );
            /**Returns  the rotary motion axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Axis * RotaryMotionAxis
            (
            );
            /**Sets  the rotary motion axis 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetRotaryMotionAxis
            (
                NXOpen::Axis * rotaryMotionAxis /** rotarymotionaxis */ 
            );
            /**Returns  the linear curve type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::UserDefinedMotionBuilder::LinearCurveTypes LinearCurveType
            (
            );
            /**Sets  the linear curve type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetLinearCurveType
            (
                NXOpen::Tooling::UserDefinedMotionBuilder::LinearCurveTypes linearCurveType /** linearcurvetype */ 
            );
            /**Returns  the rotary curve type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::UserDefinedMotionBuilder::RotaryCurveTypes RotaryCurveType
            (
            );
            /**Sets  the rotary curve type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetRotaryCurveType
            (
                NXOpen::Tooling::UserDefinedMotionBuilder::RotaryCurveTypes rotaryCurveType /** rotarycurvetype */ 
            );
            /**Returns  the import motion 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ImportMotion
            (
            );
            /**Sets  the import motion 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetImportMotion
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the import motion 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            void SetImportMotion
            (
                const char * filename /** filename */ 
            );
            /**Returns  the press start angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double PressStartAngle
            (
            );
            /**Sets  the press start angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetPressStartAngle
            (
                double pressStartAngle /** pressstartangle */ 
            );
            /**Returns  the press stop angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double PressStopAngle
            (
            );
            /**Sets  the press stop angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetPressStopAngle
            (
                double pressStopAngle /** pressstopangle */ 
            );
            /**Returns  the return start angle
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double ReturnStartAngle
            (
            );
            /**Sets  the return start angle
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetReturnStartAngle
            (
                double returnStartAngle /** returnstartangle */ 
            );
            /**Returns  the return stop angle
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double ReturnStopAngle
            (
            );
            /**Sets  the return stop angle
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetReturnStopAngle
            (
                double returnStopAngle /** returnstopangle */ 
            );
            /**Returns  the move distance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double MoveDistance
            (
            );
            /**Sets  the move distance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetMoveDistance
            (
                double moveDistance /** movedistance */ 
            );
            /**Returns  the rotation angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double RotationAngle
            (
            );
            /**Sets  the rotation angle 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetRotationAngle
            (
                double rotationAngle /** rotationangle */ 
            );
            /**Returns  the motion name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString MotionName
            (
            );
            /**Sets  the motion name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetMotionName
            (
                const NXString & motionName /** motionname */ 
            );
            /**Sets  the motion name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            void SetMotionName
            (
                const char * motionName /** motionname */ 
            );
            /**Returns  the export motion 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ExportMotion
            (
            );
            /**Sets  the export motion 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetExportMotion
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the export motion 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            void SetExportMotion
            (
                const char * filename /** filename */ 
            );
            /**Returns  the use control data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseControlData
            (
            );
            /**Sets  the use control data 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetUseControlData
            (
                bool useControlData /** usecontroldata */ 
            );
            /** Delete a user defined motion 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void DeleteUserDefinedMotion
            (
                const NXString & motionName /** motionname */ 
            );
            /** Delete a user defined motion 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            void DeleteUserDefinedMotion
            (
                const char * motionName /** motionname */ 
            );
            /**Returns  the create kinematic component 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: bool CreateKinematicComponent
            (
            );
            /**Sets  the create kinematic component 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetCreateKinematicComponent
            (
                bool createKinematicComponent /** createkinematiccomponent */ 
            );
            /**Returns  the assembly component name 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXString AssemblyComponentName
            (
            );
            /**Sets  the assembly component name 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            public: void SetAssemblyComponentName
            (
                const NXString & assemblyComponentName /** assemblycomponentname */ 
            );
            /**Sets  the assembly component name 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") */
            void SetAssemblyComponentName
            (
                const char * assemblyComponentName /** assemblycomponentname */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
