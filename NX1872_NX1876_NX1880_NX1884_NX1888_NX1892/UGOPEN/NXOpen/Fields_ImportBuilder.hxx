#ifndef NXOpen_FIELDS_IMPORTBUILDER_HXX_INCLUDED
#define NXOpen_FIELDS_IMPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Fields_ImportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_fields_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Fields
    {
        class ImportBuilder;
    }
    class Builder;
    namespace Fields
    {
        class Field;
    }
    namespace Fields
    {
        class _ImportBuilderBuilder;
        class ImportBuilderImpl;
        /** Represents a @link Fields::ImportBuilder Fields::ImportBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Fields::FieldManager::CreateImportBuilder  NXOpen::Fields::FieldManager::CreateImportBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ConflictResolutionStrategy </td> <td> 
         
        AppendtoImportedFieldName </td> </tr> 

        <tr><td> 
         
        FilterOptions </td> <td> 
         
        All </td> </tr> 

        </table>  

         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_FIELDSEXPORT  ImportBuilder : public NXOpen::Builder
        {
            /** TODO: Add documentation for this enum and each of its members */
            public: enum ConflictType
            {
                ConflictTypeNoConflict/** no conflict */ ,
                ConflictTypeNameOnlyConflict/** name only conflict */ ,
                ConflictTypeNameOnlyConflictInUse/** name only conflict in use */ ,
                ConflictTypeCompatibleVariableConflict/** compatible variable conflict */ ,
                ConflictTypeCompatibleVariableConflictInUse/** compatible variable conflict in use */ ,
                ConflictTypeIncompatibleVariableConflict/** incompatible variable conflict */ ,
                ConflictTypeIncompatibleVariableConflictInUse/** incompatible variable conflict in use */ 
            };

            /** TODO: Add documentation for this enum and each of its members */
            public: enum ActionType
            {
                ActionTypeImport/** import */ ,
                ActionTypeDontImport/** dont import */ ,
                ActionTypeImportAppend/** import append */ ,
                ActionTypeReplace/** replace */ ,
                ActionTypeBackupAndReplace/** backup and replace */ ,
                ActionTypeImportPrepend/** import prepend */ 
            };

            /** TODO: Add documentation for this enum and each of its members */
            public: enum ImportConflictStrategy
            {
                ImportConflictStrategyAppendtoImportedFieldName/** appendto imported field name */ ,
                ImportConflictStrategyPrependStringtoImportedFieldName/** prepend stringto imported field name */ ,
                ImportConflictStrategyUserSpecifiedReplaceandorRename/** user specified replaceandor rename */ 
            };

            /** TODO: Add documentation for this enum and each of its members */
            public: enum ImportFilter
            {
                ImportFilterAll/** all */ ,
                ImportFilterFormula/** formula */ ,
                ImportFilterTable/** table */ ,
                ImportFilterLinkedField/** linked field */ ,
                ImportFilterTableofFields/** tableof fields */ ,
                ImportFilterFilterbyName/** filterby name */ ,
                ImportFilterFilterbyDomain/** filterby domain */ ,
                ImportFilterFilterbyDependentVariableName/** filterby dependent variable name */ ,
                ImportFilterFilterbyIndependentVariableName/** filterby independent variable name */ 
            };

            /** TODO: Add documentation for this enum and each of its members */
            public: enum ImportFieldStrategy
            {
                ImportFieldStrategySkip/** skip */ ,
                ImportFieldStrategyRenameExisting/** rename existing */ ,
                ImportFieldStrategyRenameImported/** rename imported */ ,
                ImportFieldStrategyReplace/** replace */ ,
                ImportFieldStrategyBackupReplace/** backup replace */ 
            };

            private: ImportBuilderImpl * m_importbuilder_impl;
            private: friend class  _ImportBuilderBuilder;
            protected: ImportBuilder();
            public: ~ImportBuilder();
            /**Returns  the import file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ImportFile
            (
            );
            /**Sets  the import file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the import file 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetImportFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the conflict resolution strategy 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ImportBuilder::ImportConflictStrategy ConflictResolutionStrategy
            (
            );
            /**Sets  the conflict resolution strategy 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetConflictResolutionStrategy
            (
                NXOpen::Fields::ImportBuilder::ImportConflictStrategy conflictResolutionStrategy /** conflictresolutionstrategy */ 
            );
            /**Returns  the prepend string 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PrependString
            (
            );
            /**Sets  the prepend string 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPrependString
            (
                const NXString & prependString /** prependstring */ 
            );
            /**Sets  the prepend string 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetPrependString
            (
                const char * prependString /** prependstring */ 
            );
            /**Returns  the filter options 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::ImportBuilder::ImportFilter FilterOptions
            (
            );
            /**Sets  the filter options 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilterOptions
            (
                NXOpen::Fields::ImportBuilder::ImportFilter filterOptions /** filteroptions */ 
            );
            /**Returns  the filter string 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString FilterString
            (
            );
            /**Sets  the filter string 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFilterString
            (
                const NXString & filterString /** filterstring */ 
            );
            /**Sets  the filter string 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetFilterString
            (
                const char * filterString /** filterstring */ 
            );
            /**Returns  the import field 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Fields::Field * ImportField
            (
            );
            /**Sets  the import field 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportField
            (
                NXOpen::Fields::Field * importField /** field to reload */
            );
            /** Set the import action 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImportAction
            (
                int nthField /** nthfield */ ,
                int action /** action */ 
            );
            /** Get the import action 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int GetImportAction
            (
                int nthField /** nthfield */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
