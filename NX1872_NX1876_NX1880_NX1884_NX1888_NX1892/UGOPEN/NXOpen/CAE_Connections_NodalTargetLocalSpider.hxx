#ifndef NXOpen_CAE_CONNECTIONS_NODALTARGETLOCALSPIDER_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_NODALTARGETLOCALSPIDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_NodalTargetLocalSpider.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_Location.hxx>
#include <NXOpen/CAE_Connections_MeshPointLocation.hxx>
#include <NXOpen/CAE_Connections_NodeLocation.hxx>
#include <NXOpen/CAE_Connections_PointLocation.hxx>
#include <NXOpen/CAE_Connections_SelectionRecipeLocation.hxx>
#include <NXOpen/CAE_Connections_Types.hxx>
#include <NXOpen/CAE_FENode.hxx>
#include <NXOpen/CAE_SelectionRecipe.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_Connections_INodalTargetCenter.hxx>
#include <NXOpen/CAE_Connections_INodalTargetCenterOption.hxx>
#include <NXOpen/CAE_Connections_INodalTargetLocalSpiderDefinition.hxx>
#include <NXOpen/CAE_Connections_NodalTarget.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class NodalTargetLocalSpider;
        }
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAE
    {
        namespace Connections
        {
            class INodalTargetCenter;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class INodalTargetCenterOption;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class INodalTargetLocalSpiderDefinition;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class Location;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class MeshPointLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class NodalTarget;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class NodeLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class PointLocation;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class SelectionRecipeLocation;
        }
    }
    namespace CAE
    {
        class FENode;
    }
    namespace CAE
    {
        class MeshPoint;
    }
    namespace CAE
    {
        class SelectionRecipe;
    }
    class Expression;
    class INXObject;
    class Point;
    class TaggedObject;
    namespace CAE
    {
        namespace Connections
        {
            class _NodalTargetLocalSpiderBuilder;
            class NodalTargetLocalSpiderImpl;
            /**  @brief  This is the Local Spider Nodal Target.  

              
             <br>  Created in NX1847.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  NodalTargetLocalSpider : public NXOpen::CAE::Connections::NodalTarget, public virtual NXOpen::CAE::Connections::INodalTargetCenter, public virtual NXOpen::CAE::Connections::INodalTargetCenterOption, public virtual NXOpen::CAE::Connections::INodalTargetLocalSpiderDefinition
            {
                private: NodalTargetLocalSpiderImpl * m_nodaltargetlocalspider_impl;
                private: friend class  _NodalTargetLocalSpiderBuilder;
                protected: NodalTargetLocalSpider();
                public: ~NodalTargetLocalSpider();
                /**Returns  the target center 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::TaggedObject * TargetCenter
                (
                );
                /**Sets  the target center 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetTargetCenter
                (
                    NXOpen::TaggedObject * center /** center */ 
                );
                /**Returns  the flag indicating to use Legs's Center of Gravity 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual bool UseLegsCog
                (
                );
                /**Sets  the flag indicating to use Legs's Center of Gravity 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetUseLegsCog
                (
                    bool useLegsCog /** uselegscog */ 
                );
                /**Returns  the Ring Search type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::RingSearchType RingSearchType
                (
                );
                /**Sets  the Ring Search type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRingSearchType
                (
                    NXOpen::CAE::Connections::RingSearchType ringSearchType /** ringsearchtype */ 
                );
                /**Returns  the Panel Search type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::PanelSearchType PanelSearchType
                (
                );
                /**Sets  the Panel Search type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetPanelSearchType
                (
                    NXOpen::CAE::Connections::PanelSearchType panelSearchType /** panelsearchtype */ 
                );
                /**Returns  the Maximum Distance 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxDistance
                (
                );
                /**Returns  the Expansion Radius 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ExpansionRadius
                (
                );
                /**Returns  the Expansion Radius Factor 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ExpansionRadiusFactor
                (
                );
                /**Returns  the Search Tolerance 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * SearchTolerance
                (
                );
                /** Get a location from the target locations list  @return  The location 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::Location * GetLocation
                (
                    int indexOfLocation /** The location index */
                );
                /** Get the number of locations in the target  @return  The number of locations 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual int GetNumberOfLocations
                (
                );
                /** Remove a location from the target locations list 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemoveLocation
                (
                    int indexOfLocation /** The location index */
                );
                /** Adds a node location to the target locations list  @return  The node type location 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::NodeLocation * AddLocationNode
                (
                    NXOpen::CAE::FENode * node /** Node used for location */
                );
                /** Adds a point location to the target locations list  @return  The created point type location 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::PointLocation * AddLocationPoint
                (
                    NXOpen::Point * point /** Point used for location creation */
                );
                /** Adds a mesh point location to the target locations list  @return  The created mesh point type location 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::MeshPointLocation * AddLocationMeshPoint
                (
                    NXOpen::CAE::MeshPoint * meshPoint /** Mesh Point used for location creation */
                );
                /** Adds a Selection Recipe to the target locations list  @return  The created selection recipe type location 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual NXOpen::CAE::Connections::SelectionRecipeLocation * AddLocationSelectionRecipe
                (
                    NXOpen::CAE::SelectionRecipe * selectionRecipe /** Selection Recipe used for location creation */
                );
                /** Gets regions entities in the target. 
                            These can be any combination of CAD (point, edge, face, body) or FE (node, edge, face, element and mesh) 
                            objects able to return nodes.  @return  Legs entities 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::TaggedObject *> GetRegionsEntities
                (
                );
                /** Add regions entities to the target. 
                            Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void AddRegionsEntities
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Regions entities */
                );
                /** Remove regions entities from the target. 
                            Changes are not applied till an update is performed by calling @link Update::DoUpdate Update::DoUpdate@endlink  
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemoveRegionsEntities
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Regions entities */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
