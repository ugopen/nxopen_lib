#ifndef NXOpen_ANNOTATIONS_BASENOTE_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_BASENOTE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_BaseNote.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Annotations_AssociatedObject.hxx>
#include <NXOpen/Annotations_IPmi.hxx>
#include <NXOpen/Annotations_NoteBase.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class BaseNote;
    }
    namespace Annotations
    {
        class Annotation;
    }
    namespace Annotations
    {
        class AssociatedObject;
    }
    namespace Annotations
    {
        class BusinessModifier;
    }
    namespace Annotations
    {
        class IPmi;
    }
    namespace Annotations
    {
        class NoteBase;
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    class INXObject;
    namespace Annotations
    {
        class _BaseNoteBuilder;
        class BaseNoteImpl;
        /** Represents a Note  <br> This is an abstract class and cannot be directly instantiated  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  BaseNote : public NXOpen::Annotations::NoteBase, public virtual NXOpen::Annotations::IPmi
        {
            private: BaseNoteImpl * m_basenote_impl;
            private: friend class  _BaseNoteBuilder;
            protected: BaseNote();
            public: ~BaseNote();
            /**Sets  a flag indicating whether the note is vertical.
                        When editing this, the changes are not applied to the system until
                        an update is performed.  An update can be performed by calling @link Update::DoUpdate Update::DoUpdate@endlink .

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated.
                        
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetVertical
            (
                bool isVertical /** is vertical */ 
            );
            /**Returns  a flag indicating whether the note is vertical.
                        When editing this, the changes are not applied to the system until
                        an update is performed.  An update can be performed by calling @link Update::DoUpdate Update::DoUpdate@endlink .

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated.
                        
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsVertical
            (
            );
            /** Updates the specified note from the KF rule. 
                     <br>   
                        The changes are not applied till an update is performed by 
                        calling @link Update::DoUpdate Update::DoUpdate@endlink  .
                     <br>  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void UpdateFromRule
            (
            );
            /** Returns the business modifiers  @return  List of business modifiers 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual std::vector<NXOpen::Annotations::BusinessModifier *> GetBusinessModifiers
            (
            );
            /** Sets the business modifiers.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetBusinessModifiers
            (
                const std::vector<NXOpen::Annotations::BusinessModifier *> & businessModifiers /** List of new business modifiers */
            );
            /** Adds the business modifiers. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual void AddBusinessModifiers
            (
                const std::vector<NXOpen::Annotations::BusinessModifier *> & businessModifiers /** List of new business modifiers */
            );
            /** Returns the associated object  @return  Associated object 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Annotations::AssociatedObject * GetAssociatedObject
            (
            );
            /** Returns the shared associated objects  @return  Shared associated objects 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Annotations::AssociatedObject * GetSharedAssociatedObject
            (
            );
            /** Sets the associated object.
                        NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetAssociatedObject
            (
                NXOpen::Annotations::AssociatedObject * assocObj /** New associated object */
            );
            /**Returns  the index. It is a unique integer assigned to a PMI object.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: virtual int Index
            (
            );
            /**Sets  the index. It is a unique integer assigned to a PMI object.

                        NOTE: The set method should not be used to edit a read-only object such as a Mirrored PMI object.
                              If it is, the changes will be overridden when the part is updated. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : geometric_tol ("GDT") */
            public: virtual void SetIndex
            (
                int index /** New integer for PMI object */
            );
            /**Returns  a flag indicating whether the annotation is mirrored 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual bool IsMirrored
            (
            );
            /**Returns  a flag indicating whether the pmi is wave linked 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual bool IsWaveLinked
            (
            );
            /**Returns  the source pmi of linked pmi which is linked via wave or mirror. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::Annotations::Annotation * LinkSource
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
