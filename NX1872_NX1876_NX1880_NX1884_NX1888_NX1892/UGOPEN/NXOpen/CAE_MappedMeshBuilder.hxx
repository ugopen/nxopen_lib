#ifndef NXOpen_CAE_MAPPEDMESHBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MAPPEDMESHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_MappedMeshBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class MappedMeshBuilder;
    }
    class Builder;
    class Expression;
    class NXObject;
    class SelectDisplayableObjectList;
    namespace CAE
    {
        class _MappedMeshBuilderBuilder;
        class MappedMeshBuilderImpl;
        /**
            Represents a Mapped Mesh Builder.  Used to create a @link NXOpen::CAE::MappedMesh NXOpen::CAE::MappedMesh@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::MeshManager::CreateMappedMeshBuilder  NXOpen::CAE::MeshManager::CreateMappedMeshBuilder @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  MappedMeshBuilder : public NXOpen::Builder
        {
            /** Mid-node placement options */
            public: enum MidNodeType
            {
                MidNodeTypeMixed/** Mixed    Option */,
                MidNodeTypeCurved/** Curved   Option */,
                MidNodeTypeStraight/** Straight Option */
            };

            private: MappedMeshBuilderImpl * m_mappedmeshbuilder_impl;
            private: friend class  _MappedMeshBuilderBuilder;
            protected: MappedMeshBuilder();
            public: ~MappedMeshBuilder();
            /** Returns the corner data 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<NXOpen::NXObject *> GetCornerData
            (
                NXOpen::NXObject ** face /** face */ 
            );
            /** Sets the corner data.
                    
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCornerData
            (
                NXOpen::NXObject * face /** face */ ,
                const std::vector<NXOpen::NXObject *> & vertexList /** vertex list */ 
            );
            /** Sets the corner data using array of edges and int array consists of if user
                        want start of an edge or an end of an edge.
                        This start of an edge map to the edge where 1 is start of an edge and 0 is 
                        end of an edge
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCornerDataWithEdges
            (
                NXOpen::NXObject * face /** face */ ,
                const std::vector<int> & start /** start */ ,
                const std::vector<NXOpen::NXObject *> & edge /** edge */ 
            );
            /**Returns  the elem type name. This name is solver environment dependent. These are
                        the same names that show up in the meshing dialogues. Refer to the 
                        release specific CAE user documentation to set a specific element name
                        desired for a specific solver environment in a given release, refer
                        to the release specific user manual  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXString ElementType
            (
            );
            /**Sets  the elem type name. This name is solver environment dependent. These are
                        the same names that show up in the meshing dialogues. Refer to the 
                        release specific CAE user documentation to set a specific element name
                        desired for a specific solver environment in a given release, refer
                        to the release specific user manual  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementType
            (
                const NXString & typeOfElement /** type of element */ 
            );
            /**Sets  the elem type name. This name is solver environment dependent. These are
                        the same names that show up in the meshing dialogues. Refer to the 
                        release specific CAE user documentation to set a specific element name
                        desired for a specific solver environment in a given release, refer
                        to the release specific user manual  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetElementType
            (
                const char * typeOfElement /** type of element */ 
            );
            /**Returns  the ECC automatic mode option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool EccAuto
            (
            );
            /**Sets  the ECC automatic mode option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetEccAuto
            (
                bool eccAutoOption /** ecc auto option */ 
            );
            /**Returns  the ECC name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EccName
            (
            );
            /**Sets  the ECC name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetEccName
            (
                const NXString & eccName /** eccname */ 
            );
            /**Sets  the ECC name 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            void SetEccName
            (
                const char * eccName /** eccname */ 
            );
            /**Returns  the selection face 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObjectList * SelectionFace
            (
            );
            /** Returns the edge density 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void ChangeEdgeDensity
            (
                NXOpen::NXObject * edge /** edge */ ,
                int numberElements /** number elements */ 
            );
            /**Returns  the element size 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double ElementSize
            (
            );
            /**Sets  the element size 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetElementSize
            (
                double elementSize /** element size */ 
            );
            /**  Auto-generated element size 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: double AutoSize
            (
            );
            /**Returns  the jacobian 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double Jacobian
            (
            );
            /**Sets  the jacobian 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetJacobian
            (
                double jacobian /** jacobian */ 
            );
            /**Returns  the mid node opt 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::MappedMeshBuilder::MidNodeType MidNodeOption
            (
            );
            /**Sets  the mid node opt 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMidNodeOption
            (
                NXOpen::CAE::MappedMeshBuilder::MidNodeType midNodeType /** mid node type */ 
            );
            /**Returns  the edge match toggle 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool EdgeMatchOption
            (
            );
            /**Sets  the edge match toggle 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetEdgeMatchOption
            (
                bool edgeMatchOption /** edge match option */ 
            );
            /**Returns  the edge match tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double EdgeMatchTolerance
            (
            );
            /**Sets  the edge match tolerance 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetEdgeMatchTolerance
            (
                double edgeMatchTolerance /** edge match tolerance */ 
            );
            /**Returns  the format mesh option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool FormatMesh
            (
            );
            /**Sets  the format mesh option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetFormatMesh
            (
                bool formatMeshOption /** format mesh option */ 
            );
            /**Returns  the quad only mesh option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool QuadOnlyMesh
            (
            );
            /**Sets  the quad only mesh option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetQuadOnlyMesh
            (
                bool quadOnlyMeshOption /** quad only mesh option */ 
            );
            /**Returns  the keep free meshes option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool KeepFreeMeshes
            (
            );
            /**Sets  the keep free meshes option 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetKeepFreeMeshes
            (
                bool quadOnlyMeshOption /** quad only mesh option */ 
            );
            /**Returns  the project vertices option 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool ProjectVertices
            (
            );
            /**Sets  the project vertices option 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetProjectVertices
            (
                bool projectVerticesOption /** project vertices option */ 
            );
            /**Returns  the flip diagonals option 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool FlipDiagonals
            (
            );
            /**Sets  the flip diagonals option 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetFlipDiagonals
            (
                bool flipDiagonalsOption /** flip diagonals option */ 
            );
            /**Returns  the merge edges option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool MergeEdges
            (
            );
            /**Sets  the merge edges option 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetMergeEdges
            (
                bool mergeEdgesOption /** merge edges option */ 
            );
            /**Returns  the edge merge angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: double EdgeMergeAngle
            (
            );
            /**Sets  the edge merge angle 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetEdgeMergeAngle
            (
                double edgeMergeAngle /** edge merge angle */ 
            );
            /** Previews the mapped mesh for further edit. After preview, corner definition is allowed. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void PreviewMesh
            (
            );
            /**Returns  the element size 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * ElementSizeExpression
            (
            );
            /** Returns selected edge densities as one object
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void ChangeEdgeDensityObject
            (
                const std::vector<NXOpen::NXObject *> & pEdgeTags /** pedgetags */ ,
                int numberElements /** number elements */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
