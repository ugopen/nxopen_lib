#ifndef NXOpen_PREFERENCES_SESSIONMODELING_HXX_INCLUDED
#define NXOpen_PREFERENCES_SESSIONMODELING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SessionModeling.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class SessionModeling;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        class SessionModelingImpl;
        /** Represents the set of Modeling preferences applicable to entire session <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::SessionPreferences  NXOpen::Preferences::SessionPreferences @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  SessionModeling
        {
            /** Describes whether the display of New Face properties inherits from body or part default */
            public: enum NewFacePropertiesInheritance
            {
                NewFacePropertiesInheritanceBody/** Indicates that display of new face properties inherits from body  */,
                NewFacePropertiesInheritancePartDefault/** Indicates that display of new face properties inherits from part default */
            };

            /** Describes whether the display of Boolean Face properties inherits from target body or tool body */
            public: enum BooleanFacePropertiesInheritance
            {
                BooleanFacePropertiesInheritanceTargetBody/** Indicates that display of boolean face properties inherits from target body */,
                BooleanFacePropertiesInheritanceToolBody/** Indicates that display of boolean face properties inherits from tool body */
            };

            /** Describes whether the display of linked and extracted geometry properties inherits from parent object or part default */
            public: enum LinkedAndExtractedGeometryPropertiesInheritance
            {
                LinkedAndExtractedGeometryPropertiesInheritanceParentObject/** Indicates that display of linked and extracted geometry properties inherits from parent object  */,
                LinkedAndExtractedGeometryPropertiesInheritancePartDefault/** Indicates that display of linked and extracted geometry properties inherits from part default */
            };

            /** Describes whether the Dynamic Update type is not selected or selected as incremental or continuous */
            public: enum DynamicUpdateType
            {
                DynamicUpdateTypeNone/** Indicates that Dynamic Update type is not selected, this option is deprecated from NX12.0 */,
                DynamicUpdateTypeIncremental/** Indicates that Dynamic Update type is incremental*/,
                DynamicUpdateTypeContinuous/** Indicates that Dynamic Update type is continuous */
            };

            /** Describes whether the Immediate Children type is selected for first level or for all */
            public: enum ImmediateChildrenType
            {
                ImmediateChildrenTypeFirstLevel/** Indicates that Immediate Children type is at first level */,
                ImmediateChildrenTypeAll/** Indicates that Immediate Children type is at all level  */
            };

            /** Describes whether the body type is solid or sheet */
            public: enum BodyTypeOption
            {
                BodyTypeOptionSolid/** Indicates Body Type is solid  */,
                BodyTypeOptionSheet/** Indicates Body Type is solid */
            };

            /** Describes whether the Free Form Construction Result is plane or B Surface  */
            public: enum FreeFormConstructionResultType
            {
                FreeFormConstructionResultTypePlane/** Indicates the construction result option is plane  */,
                FreeFormConstructionResultTypeBSurface/** Indicates the construction result option is B Surface  */
            };

            /** Specifies the command that should be invoked when double-clicking on a spline. 
                    The option applies to non-associative splines and Studio Spline features in the Shape Studio application only. 
             <br>  Created in NX7.0.0.  <br>  
            */
            public: enum SplineDefaultActionTypes
            {
                SplineDefaultActionTypesStudioSpline/** Specifies Studio Spline for editing a spline */,
                SplineDefaultActionTypesXform/** Specifies X-form for editing a spline */
            };

            /** Describes whether the Curve Fit Method type is selected as cubic or quintic or advanced */
            public: enum CurveFitMethodType
            {
                CurveFitMethodTypeCubic/** Indicates the Curve Fit Method type is cubic */,
                CurveFitMethodTypeQuintic/** Indicates the Curve Fit Method type is quintic */,
                CurveFitMethodTypeAdvanced/** Indicates the Curve Fit Method type is advanced */
            };

            /** Freeform preview resolutions */
            public: enum PreviewResolutionType
            {
                PreviewResolutionTypeNone/** none */ ,
                PreviewResolutionTypeCoarse/** coarse */ ,
                PreviewResolutionTypeStandard/** standard */ ,
                PreviewResolutionTypeFine/** fine */ ,
                PreviewResolutionTypeExtraFine/** extra fine */ ,
                PreviewResolutionTypeSuperFine/** super fine */ ,
                PreviewResolutionTypeUltraFine/** ultra fine */ 
            };

            /** Double click action for sketches */
            public: enum SketchDefaultActionType
            {
                SketchDefaultActionTypeEditWithRollback/** Edit sketch with rollback on double click */,
                SketchDefaultActionTypeEdit/** Edit sketch without rollback on double click */
            };

            /** Edit option for sketches */
            public: enum SketchEditType
            {
                SketchEditTypeInTaskEnvironment/** Edit sketch in task environment */,
                SketchEditTypeDirect/** Edit sketch without entering task environment */
            };

            /** Styles for polylines of B curves and B surfaces  */
            public: enum PolylineStyleType
            {
                PolylineStyleTypeSolid/** solid */  = 1,
                PolylineStyleTypeDashed/** dashed */ ,
                PolylineStyleTypePhantom/** phantom */ ,
                PolylineStyleTypeCenterline/** centerline */ ,
                PolylineStyleTypeDotted/** dotted */ ,
                PolylineStyleTypeLongdashed/** longdashed */ ,
                PolylineStyleTypeDotteddashed/** dotteddashed */ 
            };

            /** Styles for display poles of B curves and B surfaces  */
            public: enum PoleDisplayStyleType
            {
                PoleDisplayStyleTypeNone/** none */ ,
                PoleDisplayStyleTypeOpenCircle/** open circle */ ,
                PoleDisplayStyleTypeFilledCircle/** filled circle */ ,
                PoleDisplayStyleTypePlusSign/** plus sign */ ,
                PoleDisplayStyleTypeCross/** cross */ 
            };

            /** Styles for edit poles of B curves and B surfaces  */
            public: enum PoleEditStyleType
            {
                PoleEditStyleTypeSphere3d/** sphere3d */ ,
                PoleEditStyleTypeOpenCircle/** open circle */ ,
                PoleEditStyleTypeFilledCircle/** filled circle */ ,
                PoleEditStyleTypePlusSign/** plus sign */ ,
                PoleEditStyleTypeCross/** cross */ 
            };

            /** Styles for display endpoints of curves  */
            public: enum EndpointDisplayStyleType
            {
                EndpointDisplayStyleTypeOpenCircle/** open circle */ ,
                EndpointDisplayStyleTypeFilledCircle/** filled circle */ ,
                EndpointDisplayStyleTypePlusSign/** plus sign */ ,
                EndpointDisplayStyleTypeCross/** cross */ 
            };

            /** Options for saving a part file with sharing of geometry data to reduce file size  */
            public: enum ShareGeometriesOnSaveType
            {
                ShareGeometriesOnSaveTypeDontShare/** dont share */ ,
                ShareGeometriesOnSaveTypeShare/** share */ 
            };

            /** Options for controling how surfaces will be extended while moving geometry */
            public: enum SurfaceExtensionOption
            {
                SurfaceExtensionOptionLinear/** linear */ ,
                SurfaceExtensionOptionSoft/** soft */ ,
                SurfaceExtensionOptionReflective/** reflective */ ,
                SurfaceExtensionOptionNatural/** natural */ ,
                SurfaceExtensionOptionArc/** arc */ 
            };

            /** Options for controling what additional data needs to be saved in part file to enhance the feature edit */
            public: enum SaveDataForFeatureEditOption
            {
                SaveDataForFeatureEditOptionNone/** Indicates the no additional data is saved */,
                SaveDataForFeatureEditOptionFastRollback/** Indicates the additional parasolid data is saved for faster rollback */,
                SaveDataForFeatureEditOptionFastRollbackAndPreviousStateOfFailedFeature/** Indicates the additional parasolid data is saved for faster rollback and to show the previous state of failed feature */
            };

            /** Options for controling delete child features, including recipe curves, of a feature being deleted */
            public: enum DeleteChildFeaturesOptionType
            {
                DeleteChildFeaturesOptionTypeYes/** Delete child features including recipe curves, of a feature being deleted */ = 1,
                DeleteChildFeaturesOptionTypeNo/** Do not delete child features of feature being deleted */,
                DeleteChildFeaturesOptionTypeAsk/** Ask user "Do you want to delete child features?" */
            };

            private: SessionModelingImpl * m_sessionmodeling_impl;
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SessionModeling(NXOpen::Preferences::SessionPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SessionModeling();
            /**Returns  the boolean face properties inheritance. Specifies whether the boolean face properties inherit from target body or tool body 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::BooleanFacePropertiesInheritance BooleanFaceProperties
            (
            );
            /**Sets  the boolean face properties inheritance. Specifies whether the boolean face properties inherit from target body or tool body 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBooleanFaceProperties
            (
                NXOpen::Preferences::SessionModeling::BooleanFacePropertiesInheritance booleanFaceProperties /** boolean face properties */ 
            );
            /**Returns  the new face properties inheritance. Specifies whether new face properties inherits from body or part default 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::NewFacePropertiesInheritance NewFaceProperties
            (
            );
            /**Sets  the new face properties inheritance. Specifies whether new face properties inherits from body or part default 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNewFaceProperties
            (
                NXOpen::Preferences::SessionModeling::NewFacePropertiesInheritance newFaceProperties /** new face properties */ 
            );
            /**Returns  the linked and extracted geometry properties inheritance. Specifies whether linked and extracted geometry properties inherits from parent object or part default 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::LinkedAndExtractedGeometryPropertiesInheritance LinkedAndExtractedGeometryProperties
            (
            );
            /**Sets  the linked and extracted geometry properties inheritance. Specifies whether linked and extracted geometry properties inherits from parent object or part default 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLinkedAndExtractedGeometryProperties
            (
                NXOpen::Preferences::SessionModeling::LinkedAndExtractedGeometryPropertiesInheritance linkedAndExtractedGeometryProperties /** linked and extracted geometry properties */ 
            );
            /**Returns  the dynamic update. Specifies that the system dynamically displays in real time with each 
                updation of parent curves, splines, bridge curves, lines or arcs 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::DynamicUpdateType DynamicUpdate
            (
            );
            /**Sets  the dynamic update. Specifies that the system dynamically displays in real time with each 
                updation of parent curves, splines, bridge curves, lines or arcs 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicUpdate
            (
                NXOpen::Preferences::SessionModeling::DynamicUpdateType dynamicUpdate /** dynamic update */ 
            );
            /**Returns  the immediate children. Specifies to which level the dynamic updation is applicable. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::ImmediateChildrenType ImmediateChildren
            (
            );
            /**Sets  the immediate children. Specifies to which level the dynamic updation is applicable. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetImmediateChildren
            (
                NXOpen::Preferences::SessionModeling::ImmediateChildrenType immediateChildren /** immediate children */ 
            );
            /**Returns  the body type. Toggles between Solid and Sheet. When creating bodies through curves, the Body Type option provides
                 control to the type of body (for example, solid body vs. sheet body) that is created. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::BodyTypeOption BodyType
            (
            );
            /**Sets  the body type. Toggles between Solid and Sheet. When creating bodies through curves, the Body Type option provides
                 control to the type of body (for example, solid body vs. sheet body) that is created. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetBodyType
            (
                NXOpen::Preferences::SessionModeling::BodyTypeOption bodyType /** body type */ 
            );
            /**Returns  the toggle "Display Legacy Feature names" gives choice, how user wants feature name in "Name" Coulmn in Partnav
                 checked toggled(True) will show old feature names in "Name" column in Partnav, while
                 unchecked toggled(False) will show new translatable feature names in "Name" column in Partnav
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayLegacyFeatureName
            (
            );
            /**Sets  the toggle "Display Legacy Feature names" gives choice, how user wants feature name in "Name" Coulmn in Partnav
                 checked toggled(True) will show old feature names in "Name" column in Partnav, while
                 unchecked toggled(False) will show new translatable feature names in "Name" column in Partnav
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDisplayLegacyFeatureName
            (
                bool displayLegacyFeatureName /** preference to display_legacy_feature_name */
            );
            /**Returns  the curve fit method. Controls the fitting method used when curves must be approximated by splines. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::CurveFitMethodType CurveFitMethod
            (
            );
            /**Sets  the curve fit method. Controls the fitting method used when curves must be approximated by splines. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurveFitMethod
            (
                NXOpen::Preferences::SessionModeling::CurveFitMethodType bodyType /** body type */ 
            );
            /**Returns  the free form construction result. Controls free form feature creation when using the Through Curves, Through 
                Curve Mesh, Swept, and Ruled options. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::FreeFormConstructionResultType FreeFormConstructionResult
            (
            );
            /**Sets  the free form construction result. Controls free form feature creation when using the Through Curves, Through 
                Curve Mesh, Swept, and Ruled options. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFreeFormConstructionResult
            (
                NXOpen::Preferences::SessionModeling::FreeFormConstructionResultType freeFormConstrResult /** free form constr result */ 
            );
            /**Returns  the value indicating the default action for a spline. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::SplineDefaultActionTypes SplineDefaultActionType
            (
            );
            /**Sets  the value indicating the default action for a spline. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSplineDefaultActionType
            (
                NXOpen::Preferences::SessionModeling::SplineDefaultActionTypes action /** action */ 
            );
            /**Returns  the associative edit free form option. Specify whether the output of editing certain free form features remain 
                as free form features or as unparameterized features. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssociativeEditFreeForm
            (
            );
            /**Sets  the associative edit free form option. Specify whether the output of editing certain free form features remain 
                as free form features or as unparameterized features. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAssociativeEditFreeForm
            (
                bool associativeEditFreeForm /** associative edit free form */ 
            );
            /**Returns  the position color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int PositionColor
            (
            );
            /**Sets  the position color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPositionColor
            (
                int positionColor /** position color */ 
            );
            /**Returns  the tangent color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int TangentColor
            (
            );
            /**Sets  the tangent color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTangentColor
            (
                int tangentColor /** tangent color */ 
            );
            /**Returns  the curvature color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int CurvatureColor
            (
            );
            /**Sets  the curvature color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurvatureColor
            (
                int curvatureColor /** curvature color */ 
            );
            /**Returns  the acceleration color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int AccelerationColor
            (
            );
            /**Sets  the acceleration color 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetAccelerationColor
            (
                int accelerationColor /** acceleration color */ 
            );
            /**Returns  the pole color inherit option, for display with B curves. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool PoleDisplayInheritColor
            (
            );
            /**Sets  the pole color inherit option, for display with B curves. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPoleDisplayInheritColor
            (
                bool poleDisplayInheritColor /** pole display inherit color */ 
            );
            /**Returns  the polyline color inherit option, for display with B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool PolylineDisplayInheritColor
            (
            );
            /**Sets  the polyline color inherit option, for display with B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPolylineDisplayInheritColor
            (
                bool polylineDisplayInheritColor /** polyline display inherit color */ 
            );
            /**Returns  the endpoint color inherit option, for display with curves. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool EndpointDisplayInheritColor
            (
            );
            /**Sets  the endpoint color inherit option, for display with curves. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEndpointDisplayInheritColor
            (
                bool endpointDisplayInheritColor /** endpoint display inherit color */ 
            );
            /**Returns  the color for display poles for B curves. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int PoleDisplayColor
            (
            );
            /**Sets  the color for display poles for B curves. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPoleDisplayColor
            (
                int poleDisplayColor /** pole display color */ 
            );
            /**Returns  the color for display polylines for B curves and B surfaces 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int PolylineDisplayColor
            (
            );
            /**Sets  the color for display polylines for B curves and B surfaces 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPolylineDisplayColor
            (
                int polylineDisplayColor /** polyline display color */ 
            );
            /**Returns  the color for display endpoints for curves. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: int EndpointDisplayColor
            (
            );
            /**Sets  the color for display endpoints for curves. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEndpointDisplayColor
            (
                int endpointDisplayColor /** endpoint display color */ 
            );
            /**Returns  the style (3D ball, 2D disk, mark, etc.) of the poles for display of B curves. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PoleDisplayStyleType PoleDisplayStyle
            (
            );
            /**Sets  the style (3D ball, 2D disk, mark, etc.) of the poles for display of B curves. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPoleDisplayStyle
            (
                NXOpen::Preferences::SessionModeling::PoleDisplayStyleType poleDisplayStyle /** pole display style */ 
            );
            /**Returns  the style (solid, dashed, etc.) of the polylines display for B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PolylineStyleType PolylineDisplayStyle
            (
            );
            /**Sets  the style (solid, dashed, etc.) of the polylines display for B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPolylineDisplayStyle
            (
                NXOpen::Preferences::SessionModeling::PolylineStyleType polylineDisplayStyle /** polyline display style */ 
            );
            /**Returns  the style (2D disk, mark, etc.) of the endpoints for display of curves. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::EndpointDisplayStyleType EndpointDisplayStyle
            (
            );
            /**Sets  the style (2D disk, mark, etc.) of the endpoints for display of curves. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetEndpointDisplayStyle
            (
                NXOpen::Preferences::SessionModeling::EndpointDisplayStyleType endpointDisplayStyle /** endpoint display style */ 
            );
            /**Returns  the pole color inherit option, for editing B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool PoleEditInheritColor
            (
            );
            /**Sets  the pole color inherit option, for editing B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPoleEditInheritColor
            (
                bool poleEditInheritColor /** pole edit inherit color */ 
            );
            /**Returns  the polyline color inherit option, for editing B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool PolylineEditInheritColor
            (
            );
            /**Sets  the polyline color inherit option, for editing B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPolylineEditInheritColor
            (
                bool polylineEditInheritColor /** polyline edit inherit color */ 
            );
            /**Returns  the color for editing poles for B curves and B surfaces. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int PoleEditColor
            (
            );
            /**Sets  the color for editing poles for B curves and B surfaces. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPoleEditColor
            (
                int poleEditColor /** pole edit color */ 
            );
            /**Returns  the color for editing polylines for B curves and B surfaces. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int PolylineEditColor
            (
            );
            /**Sets  the color for editing polylines for B curves and B surfaces. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPolylineEditColor
            (
                int polylineEditColor /** polyline edit color */ 
            );
            /**Returns  the style (3D ball, 2D disk, mark, etc.) of the poles for editing B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PoleEditStyleType PoleEditStyle
            (
            );
            /**Sets  the style (3D ball, 2D disk, mark, etc.) of the poles for editing B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPoleEditStyle
            (
                NXOpen::Preferences::SessionModeling::PoleEditStyleType poleEditStyle /** pole edit style */ 
            );
            /**Returns  the style (solid, dashed, etc.) of the polylines for editing B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PolylineStyleType PolylineEditStyle
            (
            );
            /**Sets  the style (solid, dashed, etc.) of the polylines for editing B curves and B surfaces. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetPolylineEditStyle
            (
                NXOpen::Preferences::SessionModeling::PolylineStyleType polylineEditStyle /** polyline edit style */ 
            );
            /**Returns  the update delayed option.  If the option is true, then an edited
                feature does not update until @link NXOpen::Update::DoUpdate NXOpen::Update::DoUpdate@endlink  is
                explicitly called.  If the option is false, then the edited feature
                updates immediately.  The default is false. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: bool UpdateDelayed
            (
            );
            /**Sets  the update delayed option.  If the option is true, then an edited
                feature does not update until @link NXOpen::Update::DoUpdate NXOpen::Update::DoUpdate@endlink  is
                explicitly called.  If the option is false, then the edited feature
                updates immediately.  The default is false. 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetUpdateDelayed
            (
                bool option /** option */ 
            );
            /**Returns  the update pending option. This option only works when the NXOpen::Preferences::SessionModeling::UpdateDelayed option is true.
                If the option is true, there is an edited feature to be updated till @link NXOpen::Update::DoUpdate NXOpen::Update::DoUpdate@endlink  is explicitly called.  
                If the option is false, there is not an edited feature to be updated. The default is false. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: bool UpdatePending
            (
            );
            /**Sets  the update pending option. This option only works when the NXOpen::Preferences::SessionModeling::UpdateDelayed option is true.
                If the option is true, there is an edited feature to be updated till @link NXOpen::Update::DoUpdate NXOpen::Update::DoUpdate@endlink  is explicitly called.  
                If the option is false, there is not an edited feature to be updated. The default is false. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR geometric_tol ("GDT") */
            public: void SetUpdatePending
            (
                bool option /** option */ 
            );
            /**Sets  the preview resolution setting. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPreviewResolution
            (
                NXOpen::Preferences::SessionModeling::PreviewResolutionType resolution /** resolution */ 
            );
            /**Returns  the preview resolution setting. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::PreviewResolutionType PreviewResolution
            (
            );
            /**Sets  the enable trimmed animation setting. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEnableTrimmedAnimation
            (
                bool enable /** enable */ 
            );
            /**Returns  the enable trimmed animation setting. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableTrimmedAnimation
            (
            );
            /**Sets  the use triangular mesh setting setting. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUseTriangularMesh
            (
                bool use /** use */ 
            );
            /**Returns  the use triangular mesh setting setting. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseTriangularMesh
            (
            );
            /**Returns  the option "Edit with Rollback upon Double-Click" gives choice of what action to 
                be taken on feature upon Double clicking, either in partnavigator or in Graphics widow.
                if the option is true then edit with rollback will be happen upon Double-click.
                if the option is false then the previous default action will be executed 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool EditWithRollbackUponDoubleClick
            (
            );
            /**Sets  the option "Edit with Rollback upon Double-Click" gives choice of what action to 
                be taken on feature upon Double clicking, either in partnavigator or in Graphics widow.
                if the option is true then edit with rollback will be happen upon Double-click.
                if the option is false then the previous default action will be executed 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetEditWithRollbackUponDoubleClick
            (
                bool defaultEditOption /** preference to Edit with Rollback upon Double-Click */
            );
            /**Returns  the option " Notify on Delete " gives choice, whether the user wants a 
                 notification message when a feature is being deleted will effect other features.
                 if the option is true then it popup a notification message.
                 if the option is false then it will not popup any notification message 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: bool NotifyOnDelete
            (
            );
            /**Sets  the option " Notify on Delete " gives choice, whether the user wants a 
                 notification message when a feature is being deleted will effect other features.
                 if the option is true then it popup a notification message.
                 if the option is false then it will not popup any notification message 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : None */
            public: void SetNotifyOnDelete
            (
                bool notifyOnDelete /** preference to Notify on Delete */
            );
            /**Returns  the option "Save Data for Feature Edit" specifies what additional data will 
                     be saved in the part to enhance feature edit. Rollback data improves feature 
                     edit performance. Previous state data is a copy of a face or body input to a 
                     feature for visual reference while editing a failed feature. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::SaveDataForFeatureEditOption SaveDataForFeatureEdit
            (
            );
            /**Sets  the option "Save Data for Feature Edit" specifies what additional data will 
                     be saved in the part to enhance feature edit. Rollback data improves feature 
                     edit performance. Previous state data is a copy of a face or body input to a 
                     feature for visual reference while editing a failed feature. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSaveDataForFeatureEdit
            (
                NXOpen::Preferences::SessionModeling::SaveDataForFeatureEditOption saveDataForFeatureEdit /** preference to save data for feature edit */
            );
            /**Returns  the option " Share Geometry on Save " gives choice of whether to share geometries among Parasolid solid entities on save or not 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::ShareGeometriesOnSaveType ShareGeometriesOption
            (
            );
            /**Sets  the option " Share Geometry on Save " gives choice of whether to share geometries among Parasolid solid entities on save or not 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetShareGeometriesOption
            (
                NXOpen::Preferences::SessionModeling::ShareGeometriesOnSaveType shareGeometryOnSave /** preference to share geometries on save */
            );
            /**Returns  the option "Interrupt Update on Error" gives choice, whether the user 
                 wants the "Edit During Update" dialog to appear when features contain 
                 errors during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool InterruptUpdateOnError
            (
            );
            /**Sets  the option "Interrupt Update on Error" gives choice, whether the user 
                 wants the "Edit During Update" dialog to appear when features contain 
                 errors during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInterruptUpdateOnError
            (
                bool interruptOnError /** preference to Interrupt Update on Error */
            );
            /**Returns  the option "Interrupt Update on Warning" gives choice, whether the
                 user wants the "Edit During Update" dialog to appear when features contain 
                 warnings during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool InterruptUpdateOnWarning
            (
            );
            /**Sets  the option "Interrupt Update on Warning" gives choice, whether the
                 user wants the "Edit During Update" dialog to appear when features contain 
                 warnings during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetInterruptUpdateOnWarning
            (
                bool interruptOnWarning /** preference to Interrupt Update on Warning */
            );
            /**Returns  the option "Interrupt Update on Missing References" gives choice, whether the
                 user wants the "Edit During Update" dialog to appear when features contain 
                 missing references during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool InterruptUpdateOnMissingReferences
            (
            );
            /**Sets  the option "Interrupt Update on Missing References" gives choice, whether the
                 user wants the "Edit During Update" dialog to appear when features contain 
                 missing references during feature update/playback.
                 if the option is true then the dialog will appear.
                 if the option is false then dialog will not appear during feature update.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetInterruptUpdateOnMissingReferences
            (
                bool interruptOnMissingReferences /** preference to Interrupt Update on Missing References */
            );
            /**Returns  the option "Make Current on Error" gives choice, whether the user 
                 wants to make error feature current when features contain 
                 errors during feature update/playback.
                 If the option is true then the error feature will be made
                 current.
                 If the option is false then the error feature will not be made current feature
                  during feature update.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool MakeCurrentOnError
            (
            );
            /**Sets  the option "Make Current on Error" gives choice, whether the user 
                 wants to make error feature current when features contain 
                 errors during feature update/playback.
                 If the option is true then the error feature will be made
                 current.
                 If the option is false then the error feature will not be made current feature
                  during feature update.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMakeCurrentOnError
            (
                bool currentOnError /** preference to Make Error Feature Current on Error */
            );
            /**Returns  the option "Update Failure Report" gives choice, whether the
                 user wants the update failure report to be generated for the features that 
                 failed during current update cycle.
                 If the option is true then the update failure report will be launched at the end
                 of every update cycle. It will list only those features that failed in that update 
                 cycle. If the option is false then no such report will be launched.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: bool UpdateFailureReportPreference
            (
            );
            /**Sets  the option "Update Failure Report" gives choice, whether the
                 user wants the update failure report to be generated for the features that 
                 failed during current update cycle.
                 If the option is true then the update failure report will be launched at the end
                 of every update cycle. It will list only those features that failed in that update 
                 cycle. If the option is false then no such report will be launched.
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUpdateFailureReportPreference
            (
                bool updateFailureReport /** update failure report preference */
            );
            /**Returns  the option "allow_editing_of_dimension_of_internal_sketch" gives choice, 
                 whether or not the sketch dimensions will display and be possible to select and edit directly, 
                 without entering the Sketch task environment when a dialog (e.g. Extrude, Revolve, Hole etc.) is active 
                 which allows editing on an internal sketch.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool AllowEditingOfDimensionOfInternalSketch
            (
            );
            /**Sets  the option "allow_editing_of_dimension_of_internal_sketch" gives choice, 
                 whether or not the sketch dimensions will display and be possible to select and edit directly, 
                 without entering the Sketch task environment when a dialog (e.g. Extrude, Revolve, Hole etc.) is active 
                 which allows editing on an internal sketch.
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetAllowEditingOfDimensionOfInternalSketch
            (
                bool allowEditingOfDimensionOfInternalSketch /** allow sketch dim edit of internal sketch preference */
            );
            /**Returns  the option to specify whether simulation specific UI should show up in modeling 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool ShowSimuationUiInModeling
            (
            );
            /**Sets  the option to specify whether simulation specific UI should show up in modeling 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetShowSimuationUiInModeling
            (
                bool showSimuationUiInModeling /** allow simulation specific UI in modeling */
            );
            /**Returns  the option specifying whether to automatically make the datums internal during  
                 the sketch creation. If the option is true then datums are automatically made internal to child sketches, else
                 datums are not automatically made internal to child sketches. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool MakeDatumsInternal
            (
            );
            /**Sets  the option specifying whether to automatically make the datums internal during  
                 the sketch creation. If the option is true then datums are automatically made internal to child sketches, else
                 datums are not automatically made internal to child sketches. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMakeDatumsInternal
            (
                bool makeDatumsInternal /** Flag indicating whether to make datums internal */
            );
            /**Returns  the option specifying whether to automatically make sketch internal during  
                 feature creation. If the option is true then external sketches are automatically made internal to child features, else
                 external sketches are not automatically made internal to child features. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool MakeSketchesInternal
            (
            );
            /**Returns  the sketch default action 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::SketchDefaultActionType SketchDefaultAction
            (
            );
            /**Sets  the sketch default action 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSketchDefaultAction
            (
                NXOpen::Preferences::SessionModeling::SketchDefaultActionType sketchAction /** default action on sketches */
            );
            /**Returns  the option that determines whether or not task environment is used to edit the sketch 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::SketchEditType SketchEditOption
            (
            );
            /**Sets  the option that determines whether or not task environment is used to edit the sketch 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetSketchEditOption
            (
                NXOpen::Preferences::SessionModeling::SketchEditType sketchEditOption /** edit option on sketches */
            );
            /**Sets  the option specifying whether to automatically make sketch internal during  
                 feature creation. If the option is true then external sketches are automatically made internal to child features, else
                 external sketches are not automatically made internal to child features. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMakeSketchesInternal
            (
                bool makeSketchesInternal /** Flag indicating whether to make sketches internal */
            );
            /**Returns  the flag to activate the feature group with rollback or not, if the flag is true, the highest member feature will be made as current feature
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: bool ActivateFeatureGroupWithRollback
            (
            );
            /**Sets  the flag to activate the feature group with rollback or not, if the flag is true, the highest member feature will be made as current feature
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: void SetActivateFeatureGroupWithRollback
            (
                bool activateFeatureGroupWithRollback /** activatefeaturegroupwithrollback */ 
            );
            /**Returns  the surface extension option. Controls how surfaces will be extended while moving geometry 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::SurfaceExtensionOption SurfaceExtension
            (
            );
            /**Sets  the surface extension option. Controls how surfaces will be extended while moving geometry 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSurfaceExtension
            (
                NXOpen::Preferences::SessionModeling::SurfaceExtensionOption surfaceExtensionOption /** Surface extension option */
            );
            /**Returns  the option to treat single degree bspline as polyline 
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::Preferences::PartModeling::TreatOneDegreeBsplineAsPolyline NXOpen::Preferences::PartModeling::TreatOneDegreeBsplineAsPolyline@endlink  instead. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::Preferences::PartModeling::TreatOneDegreeBsplineAsPolyline instead.") bool TreatOneDegreeBsplineAsPolyline
            (
            );
            /**Sets  the option to treat single degree bspline as polyline 
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::Preferences::PartModeling::TreatOneDegreeBsplineAsPolyline NXOpen::Preferences::PartModeling::TreatOneDegreeBsplineAsPolyline@endlink  instead. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::Preferences::PartModeling::TreatOneDegreeBsplineAsPolyline instead.") void SetTreatOneDegreeBsplineAsPolyline
            (
                bool preference /** Flag if set to true will allow treatment of single degree bspline as polyline */
            );
            /**Returns  the distance tolerance for converting analytic body to Convergent body 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentDistanceTolerance NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentDistanceTolerance@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentDistanceTolerance instead.") double ConvertAnalyticToConvergentDistanceTolerance
            (
            );
            /**Sets  the distance tolerance for converting analytic body to Convergent body 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentDistanceTolerance NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentDistanceTolerance@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentDistanceTolerance instead.") void SetConvertAnalyticToConvergentDistanceTolerance
            (
                double dAnalyticToConvergentDistTol /** distance tolerance for converting analytic body to Convergent body */
            );
            /**Returns  the angular tolerance for converting analytic body to Convergent body 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentAngularTolerance NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentAngularTolerance@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentAngularTolerance instead.") double ConvertAnalyticToConvergentAngularTolerance
            (
            );
            /**Sets  the angular tolerance for converting analytic body to Convergent body 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentAngularTolerance NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentAngularTolerance@endlink  instead. <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use NXOpen::Preferences::PartModeling::ConvertAnalyticToConvergentAngularTolerance instead.") void SetConvertAnalyticToConvergentAngularTolerance
            (
                double dAnalyticToConvergentAngTol /** angular tolerance for converting analytic body to Convergent body */
            );
            /**Returns  the delete child features options   
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SessionModeling::DeleteChildFeaturesOptionType DeleteChildFeaturesOption
            (
            );
            /**Sets  the delete child features options   
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDeleteChildFeaturesOption
            (
                NXOpen::Preferences::SessionModeling::DeleteChildFeaturesOptionType deleteChildFeatureOption /** delete child features option */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
