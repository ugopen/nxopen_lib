#ifndef NXOpen_MOTION_TIREPROPERTYHIGHORDERPARAMETERS_HXX_INCLUDED
#define NXOpen_MOTION_TIREPROPERTYHIGHORDERPARAMETERS_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_TirePropertyHighOrderParameters.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class TirePropertyHighOrderParameters;
    }
    class Expression;
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Motion
    {
        class MotionFunction;
    }
    namespace Motion
    {
        class SelectFieldData;
    }
    namespace Motion
    {
        class _TirePropertyHighOrderParametersBuilder;
        class TirePropertyHighOrderParametersImpl;
        /** Represents a Tire Property builder for the High Order parameters used in Motorcycle and Basic properties.
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  TirePropertyHighOrderParameters : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** The block type can be Function when a spline curve is used or
                    Profile when a profile is used.
                    */
            public: enum UnloadingVertStiffType
            {
                UnloadingVertStiffTypeFunction/** function */ ,
                UnloadingVertStiffTypeProfile/** profile */ 
            };

            private: TirePropertyHighOrderParametersImpl * m_tirepropertyhighorderparameters_impl;
            private: friend class  _TirePropertyHighOrderParametersBuilder;
            protected: TirePropertyHighOrderParameters();
            public: ~TirePropertyHighOrderParameters();
            /**Returns  the vertical carcass effects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool VerticalCarcassEffects
            (
            );
            /**Sets  the vertical carcass effects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetVerticalCarcassEffects
            (
                bool inValue /** invalue */ 
            );
            /**Returns  the longitudinal effects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool LongitudinalEffects
            (
            );
            /**Sets  the longitudinal effects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetLongitudinalEffects
            (
                bool inValue /** invalue */ 
            );
            /**Returns  the lateral effects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool LateralEffects
            (
            );
            /**Sets  the lateral effects 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetLateralEffects
            (
                bool inValue /** invalue */ 
            );
            /**Returns  the longitudinal stiffness 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * LongStiffness
            (
            );
            /**Returns  the longitudinal damping 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * LongDamping
            (
            );
            /**Returns  the lateral stiffness.
                        This parameter is only used in the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink .
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * LateralStiffness
            (
            );
            /**Returns  the lateral damping.
                        This parameter is only used in the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink .
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * LateralDamping
            (
            );
            /**Returns  the roll moment.
                    This parameter is only used in the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink .
                    It is a flag that indicates whether or not the roll moment term introduced by the
                    lateral spring-damper should be calculated. This roll moment is caused by the
                    lateral displacement of the tire patch when a lateral spring-damper (lateral stiff)
                    is included in the tire model. If cornering table or cornering stiffness are used,
                    and roll moment is set to "True", lateral stiffness is used to determine a lateral
                    deflection that in turn is used to calculate a roll moment.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool RollMoment
            (
            );
            /**Sets  the roll moment.
                    This parameter is only used in the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink .
                    It is a flag that indicates whether or not the roll moment term introduced by the
                    lateral spring-damper should be calculated. This roll moment is caused by the
                    lateral displacement of the tire patch when a lateral spring-damper (lateral stiff)
                    is included in the tire model. If cornering table or cornering stiffness are used,
                    and roll moment is set to "True", lateral stiffness is used to determine a lateral
                    deflection that in turn is used to calculate a roll moment.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRollMoment
            (
                bool inValue /** invalue */ 
            );
            /**Returns  the carcass mass 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * CarcassMass
            (
            );
            /**Returns  the vertical stiffness transitional velocity stiffness 
                        This parameter is only used in the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink .
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * VerticalStiffnessTransVelocity
            (
            );
            /**Returns  the unloading vertical stiffness.
                        This parameter is only used in the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink .
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionFunction * UnloadingVerticalStiffness
            (
            );
            /**Sets  the unloading vertical stiffness.
                        This parameter is only used in the @link Motion::TirePropertyBasic Motion::TirePropertyBasic@endlink .
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetUnloadingVerticalStiffness
            (
                NXOpen::Motion::MotionFunction * func /** func */ 
            );
            /**Returns  the type.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::TirePropertyHighOrderParameters::UnloadingVertStiffType UnloadingVerticalStiffnessType
            (
            );
            /**Sets  the type.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetUnloadingVerticalStiffnessType
            (
                NXOpen::Motion::TirePropertyHighOrderParameters::UnloadingVertStiffType type /** type */ 
            );
            /**Returns  the Profile.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectFieldData * UnloadingVerticalStiffnessProfile
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
