#ifndef NXOpen_TOOLING_FREEFORMUNFORMBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_FREEFORMUNFORMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_FreeformUnformBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_GlobalShapingBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class FreeformUnformBuilder;
    }
    class Direction;
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class Point;
    class ScCollector;
    class Section;
    namespace Tooling
    {
        class _FreeformUnformBuilderBuilder;
        class FreeformUnformBuilderImpl;
        /**Represents a @link NXOpen::Tooling::FreeformUnformBuilder NXOpen::Tooling::FreeformUnformBuilder@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Features::ToolingCollection::CreateFreeformUnformBuilder  NXOpen::Features::ToolingCollection::CreateFreeformUnformBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  FreeformUnformBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** The types of bend  */
            public: enum UnformTypes
            {
                UnformTypesByCurve/** unform by curve type */,
                UnformTypesOverBend/** unform by over bend type */
            };

            /**Represents the rotation type. */
            public: enum RotationMethodType
            {
                RotationMethodTypeAngle/** Rotation specified by angle */,
                RotationMethodTypeDistance/** Rotation specified by distance */
            };

            /**Represents the rotation method type. */
            public: enum RotationMethod
            {
                RotationMethodConstant/** Constant anlge rotation */,
                RotationMethodLawControlled/** Law controlled rotation */,
                RotationMethodCurveDefined/** Curve interpolated rotation */
            };

            /**Represents the direction method type. */
            public: enum DirectionMethodType
            {
                DirectionMethodTypeSameAsProjection/** Overcrown is same as projection direction */,
                DirectionMethodTypeNormalToSheet/** Overcrown is normal to sheet */,
                DirectionMethodTypeNormalToBase/** Overcrown is normal to base surface */,
                DirectionMethodTypeNormalToControl/** Overcrown is normal to control surface */,
                DirectionMethodTypeSpecifiedDirection/** Overcrown is user specified direction */,
                DirectionMethodTypeNone/** Overcrown has no direction specified */
            };

            /**Represent sheet deformation type. */
            public: enum DeformBodyType
            {
                DeformBodyTypeSheetBodies/** Sheet bodies */,
                DeformBodyTypeFacetBodies/** Facet bodies */
            };

            private: FreeformUnformBuilderImpl * m_freeformunformbuilder_impl;
            private: friend class  _FreeformUnformBuilderBuilder;
            protected: FreeformUnformBuilder();
            public: ~FreeformUnformBuilder();
            /**Returns  the bend type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Tooling::FreeformUnformBuilder::UnformTypes UnformType
            (
            );
            /**Sets  the bend type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUnformType
            (
                NXOpen::Tooling::FreeformUnformBuilder::UnformTypes bendType /** bendtype */ 
            );
            /**Returns  the bend faces 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::ScCollector * BendFaces
            (
            );
            /**Sets  the bend faces 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBendFaces
            (
                NXOpen::ScCollector * bendFaces /** bendfaces */ 
            );
            /**Returns  the base curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * BaseCurve
            (
            );
            /**Sets  the base curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBaseCurve
            (
                NXOpen::Section * baseCurve /** basecurve */ 
            );
            /**Returns  the control curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * ControlCurve
            (
            );
            /**Sets  the control curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetControlCurve
            (
                NXOpen::Section * controlCurve /** controlcurve */ 
            );
            /**Returns  the target point offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * TargetPointOffset
            (
            );
            /**Returns  the target curve offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * TargetCurveOffset
            (
            );
            /**Returns  the first target curve offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * FirstTargetCurveOffset
            (
            );
            /**Returns  the second target curve offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * SecondTargetCurveOffset
            (
            );
            /**Returns  the rotation distance value 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * RotationDistance
            (
            );
            /**Returns  the region boundary offset 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * RegionToDeformOffset
            (
            );
            /**Returns  the taper start. Distance at the start to apply the taper. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * TaperStart
            (
            );
            /**Returns  the taper end. Distance at the end to apply the taper.  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * TaperEnd
            (
            );
            /**Returns  the rotation angle value 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * RotationAngle
            (
            );
            /**Returns  the radius reduction percent 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Expression * RadiusReductionPercent
            (
            );
            /**Returns  the target curve offset type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Features::GlobalShapingBuilder::OffsetMethod TargetCurveOffsetType
            (
            );
            /**Sets  the target curve offset type 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetCurveOffsetType
            (
                NXOpen::Features::GlobalShapingBuilder::OffsetMethod targetCurveOffsetType /** targetcurveoffsettype */ 
            );
            /**Returns  the transition shape control 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: double TransitionShapeControl
            (
            );
            /**Sets  the transition shape control 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTransitionShapeControl
            (
                double transitionShapeControl /** transitionshapecontrol */ 
            );
            /**Returns  the transition options 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Features::GlobalShapingBuilder::TransitionType TransitionOptions
            (
            );
            /**Sets  the transition options 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTransitionOptions
            (
                NXOpen::Features::GlobalShapingBuilder::TransitionType transitionOptions /** transitionoptions */ 
            );
            /**Returns  the modify input sheet 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: bool ModifyInputSheet
            (
            );
            /**Sets  the modify input sheet 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetModifyInputSheet
            (
                bool modifyInputSheet /** modifyinputsheet */ 
            );
            /**Returns  the equal arc length toggle 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: bool KeepBaseLength
            (
            );
            /**Sets  the equal arc length toggle 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetKeepBaseLength
            (
                bool keepBaseLength /** keepbaselength */ 
            );
            /**Returns  the start location of control curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * StartLocation
            (
            );
            /**Sets  the start location of control curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStartLocation
            (
                NXOpen::GeometricUtilities::OnPathDimensionBuilder * startLocation /** startlocation */ 
            );
            /**Returns  the distance tolerance 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the distance tolerance 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetDistanceTolerance
            (
                double distanceTolerance /** distancetolerance */ 
            );
            /**Returns  the angle tolerance 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: double AngleTolerance
            (
            );
            /**Sets  the angle tolerance 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAngleTolerance
            (
                double angleTolerance /** angletolerance */ 
            );
            /**Returns  the maximum iterations count used for approximating the deformed sheet. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: int IterationCount
            (
            );
            /**Sets  the maximum iterations count used for approximating the deformed sheet. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetIterationCount
            (
                int iterationCount /** iterationcount */ 
            );
            /**Returns  the bend curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * BendCurve
            (
            );
            /**Returns  the first region offset curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::ScCollector * FirstRegionOffsetCurve
            (
            );
            /**Sets  the first region offset curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFirstRegionOffsetCurve
            (
                NXOpen::ScCollector * firstRegionOffsetCurve /** firstregionoffsetcurve */ 
            );
            /**Returns  the second region offset curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::ScCollector * SecondRegionOffsetCurve
            (
            );
            /**Sets  the second region offset curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSecondRegionOffsetCurve
            (
                NXOpen::ScCollector * secondRegionOffsetCurve /** secondregionoffsetcurve */ 
            );
            /**Returns  the target sheet 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::ScCollector * TargetSheet
            (
            );
            /**Returns  the target point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Point * TargetPoint
            (
            );
            /**Sets  the target point 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTargetPoint
            (
                NXOpen::Point * targetPoint /** targetpoint */ 
            );
            /**Returns  the target curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * TargetCurve
            (
            );
            /**Returns  the first target curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::ScCollector * FirstTargetCurve
            (
            );
            /**Returns  the stretch direction 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Direction * StretchDirection
            (
            );
            /**Sets  the stretch direction 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStretchDirection
            (
                NXOpen::Direction * stretchDirection /** stretchdirection */ 
            );
            /**Returns  the second target curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::ScCollector * SecondTargetCurve
            (
            );
            /**Returns  the rotation target curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * RotationTargetCurve
            (
            );
            /**Returns  the sheet to deform 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::ScCollector * SheetToDeform
            (
            );
            /**Sets  the sheet to deform 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSheetToDeform
            (
                NXOpen::ScCollector * sheetToDeform /** sheettodeform */ 
            );
            /**Returns  the rotation angle reverse direction 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: bool RotationAngleReverseDirection
            (
            );
            /**Sets  the rotation angle reverse direction 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetRotationAngleReverseDirection
            (
                bool rotationAngleReverseDirection /** rotationanglereversedirection */ 
            );
            /**Returns  the first region limit curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * FirstRegionLimitCurve
            (
            );
            /**Sets  the first region limit curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFirstRegionLimitCurve
            (
                NXOpen::Section * firstRegionLimitCurve /** firstregionlimitcurve */ 
            );
            /**Returns  the second region limit curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::Section * SecondRegionLimitCurve
            (
            );
            /**Sets  the second region limit curve 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSecondRegionLimitCurve
            (
                NXOpen::Section * secondRegionLimitCurve /** secondregionlimitcurve */ 
            );

            /// \cond NX_NO_DOC 
            /** A function to create and copy NX facet body used in preview 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void CreatePreviewFacets
            (
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
