#ifndef NXOpen_AME_VALUESETBUILDER_HXX_INCLUDED
#define NXOpen_AME_VALUESETBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_ValueSetBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class ValueSetBuilder;
    }
    namespace AME
    {
        class AMEExtendedObject;
    }
    class Builder;
    class NXObject;
    namespace AME
    {
        class _ValueSetBuilderBuilder;
        class ValueSetBuilderImpl;
        /** Manages the value set by allowing them to be created and add new values  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateValueSetBuilder  NXOpen::AME::AMEManager::CreateValueSetBuilder @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  ValueSetBuilder : public NXOpen::Builder
        {
            private: ValueSetBuilderImpl * m_valuesetbuilder_impl;
            private: friend class  _ValueSetBuilderBuilder;
            protected: ValueSetBuilder();
            public: ~ValueSetBuilder();
            /**  The method allows the value set to be created 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * CreateValueSet
            (
            );
            /**  The method  to allow a new property to be added to the value set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * AddPropertyToValueSet
            (
                NXOpen::NXObject * valueSet /** valueset */ ,
                NXOpen::NXObject * propertyOwner /** propertyowner */ ,
                const NXString & propertyName /** propertyname */ ,
                const NXString & propertyCategory /** propertycategory */ 
            );
            /**  The method  to allow a new property to be added to the value set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::NXObject * AddPropertyToValueSet
            (
                NXOpen::NXObject * valueSet /** valueset */ ,
                NXOpen::NXObject * propertyOwner /** propertyowner */ ,
                const char * propertyName /** propertyname */ ,
                const char * propertyCategory /** propertycategory */ 
            );
            /**  A method that allows the value set to be used as default for a variant 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetAsDefault
            (
                NXOpen::NXObject * valueSet /** valueset */ 
            );
            /**  Method to delete existing value sets 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteValueSets
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /**  Method to delete existing value set property owners 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteValueSetPropertyOwners
            (
                const std::vector<NXOpen::NXObject *> & propertyOwners /** propertyowners */ 
            );
            /**  Method to delete existing value set properties 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteValueSetProperties
            (
                const std::vector<NXOpen::NXObject *> & properties /** properties */ 
            );
            /**  Method to set name of the value set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetValueSetName
            (
                NXOpen::NXObject * valueSetObject /** valuesetobject */ ,
                const NXString & newName /** newname */ 
            );
            /**  Method to set name of the value set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetValueSetName
            (
                NXOpen::NXObject * valueSetObject /** valuesetobject */ ,
                const char * newName /** newname */ 
            );
            /**  The method  to add or update product selection 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddOrUpdateProductSelection
            (
                NXOpen::NXObject * owningValueSet /** owningvalueset */ ,
                NXOpen::NXObject * inputDevice /** inputdevice */ ,
                const NXString & mainProductPart /** mainproductpart */ ,
                std::vector<NXString> & auxliaryProductParts /** auxliaryproductparts */ 
            );
            /**  The method  to add or update product selection 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void AddOrUpdateProductSelection
            (
                NXOpen::NXObject * owningValueSet /** owningvalueset */ ,
                NXOpen::NXObject * inputDevice /** inputdevice */ ,
                const char * mainProductPart /** mainproductpart */ ,
                std::vector<NXString> & auxliaryProductParts /** auxliaryproductparts */ 
            );
            /**  Method to apply value set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::AME::AMEExtendedObject *> ApplyValueSetInTemplate
            (
                NXOpen::NXObject * valueSet /** valueset */ 
            );
            /**  Method to apply value set in a project environment 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::AME::AMEExtendedObject *> ApplyValueSetInProject
            (
                NXOpen::NXObject * valueSet /** valueset */ ,
                const std::vector<NXOpen::NXObject *> & instanceSetTags /** instancesettags */ 
            );
            /**  Method to remove assigned main and auxiliary product selection from property owners 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveProductSelection
            (
                const std::vector<NXOpen::NXObject *> & propertyOwners /** propertyowners */ 
            );
            /**Returns  the option to exchange product by breaking unlocked template
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool BreakUnLockedTemplate
            (
            );
            /**Sets  the option to exchange product by breaking unlocked template
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetBreakUnLockedTemplate
            (
                bool breakUnLockedTemplate /** breakunlockedtemplate */ 
            );
            /**Returns  the option to exchange PLC relevant product on applying of value set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: bool ExchangePLCRelevantProduct
            (
            );
            /**Sets  the option to exchange PLC relevant product on applying of value set 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetExchangePLCRelevantProduct
            (
                bool exchangePLCRelevantProduct /** exchangeplcrelevantproduct */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
