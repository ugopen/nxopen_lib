#ifndef NXOpen_NXOBJECT_HXX_INCLUDED
#define NXOpen_NXOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     NXObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Update.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class NXObject;
    namespace Assemblies
    {
        class Component;
    }
    class AttributeIterator;
    class BasePart;
    class Expression;
    class INXObject;
    class Unit;
    class _NXObjectBuilder;
    class NXObjectImpl;
    /** A base class providing low-level services for most NXOpen classes.
         <br> For more information on NX rules for Names and Attributes, see 
        the Properties section of the Gateway Help. <br>   <br> This is an abstract class, and cannot be instantiated.  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  NXObject : public NXOpen::TaggedObject, public virtual NXOpen::INXObject
    {
        /** Specifies attribute type. 
                NOTE: Attributes of type reference are also string attributes. The reference type as such is deprecated.
            */
        public: enum AttributeType
        {
            AttributeTypeInvalid/** Invalid */,
            AttributeTypeNull/** Null */,
            AttributeTypeBoolean/** Boolean */,
            AttributeTypeInteger/** Integer */,
            AttributeTypeReal/** Real */,
            AttributeTypeString/** String */,
            AttributeTypeTime/** Time and Date */,
            AttributeTypeReference/** Deprecated. Do not use in new code. Previously used to denote string attributes holding a ReferenceValue */,
            AttributeTypeAny/** All types (used only for queries) */ = 100
        };

        /** Specifies the format of the date and time attribute. */
        public: enum DateAndTimeFormat
        {
            DateAndTimeFormatNumeric/** 2004/04/28 22:06:15  */,
            DateAndTimeFormatTextual/** 28-Apr-2004 22:06:15 */
        };

         /** Holds the computational time value of a time attribute.
                The time value held here is in the current time zone of the machine running the program. 
                This is the same format as that used by the NX UFUN API to represent a time attribute value */
        public:
        struct ComputationalTime
        {
            public: /** day */ int Day;
            public: /** minute */ int Minute;
            public: ComputationalTime() :
                Day(),
                Minute()
            {
            }
            /** Constructor for the ComputationalTime struct. */ 
            public: ComputationalTime(int dayInitial /** day */ , 
                    int minuteInitial /** minute */ ) :
                Day(dayInitial),
                Minute(minuteInitial)
            {
            }
        };

         /** Contains attribute information.
                All the data members of this struct are updated with values from the attribute (some possibly to NULL) when an attribute is read.

                The following data members of this struct are not used (they are ignored) when setting an attribute:
                    Alias
                    Inherited
                    Override
                    Required
                    Unset
                    Locked
                    OwnedBySystem
                    PdmBased

                The following data of an attribute cannot be edited once the attribute is set:
                    Type 
                    Title
                    TitleAlias
                    Array
                    ArrayElementIndex
                    The dimensionality of the Unit specification (cannot change from mm to microA, but from mm to cm is fine)
                    
                The following data of an attribute can be set and modified if and only if the attribute is not associated with a template:
                    Category 

                The following data of an attribute can be set if and only if the attribute is not associated with a template. It cannot be modified once set.
                    Array
             */
        public:
        struct AttributeInformation
        {
            public: /** Attribute type */NXOpen::NXObject::AttributeType Type;
            public: /** Attribute category (may be NULL) */NXString Category;
            public: /** Attribute title (for arrays, this is the array title without an appended index)*/NXString Title;
            public: /** Attribute title alias (may be NULL) (for arrays, this is the array title alias, without an appended index) */NXString TitleAlias;
            public: /** Boolean (logical) attribute value (the default value is returned when reading templates of non-set attributes) */bool BooleanValue;
            public: /** Integer attribute value (the default value is returned when reading templates of non-set attributes) */int IntegerValue;
            public: /** Real attribute value (the default value is returned when reading templates of non-set attributes)
                                                         If the attribute has units, it is returned in the display units of the attribute */double RealValue;
            public: /** String attribute value (the default value is returned when reading templates of non-set attributes). */NXString StringValue;
            public: /** Time/Date attribute value (the default value is returned when reading templates of non-set attributes).
                                                         See @link NXOpen::NXObject::DateAndTimeFormat NXOpen::NXObject::DateAndTimeFormat@endlink  for valid formats. 
                                                         The time value held here is in the current time zone of the machine running the program. 
                                                         NOTE: if both TimeValue and CompTimeValue are unset (NULL and (0,0), respectively) when the attribute is set,
                                                               then the attribute will be set to current time and date. */NXString TimeValue;
            public: /** Time/Date attribute value (the default value is returned when reading templates of non-set attributes).
                                                         The time value held here is in the current time zone of the machine running the program. */NXOpen::NXObject::ComputationalTime CompTimeValue;
            public: /** Reference string of a string type attribute (it is NULL if it is a 'normal' string attribute). 
                                                         Only supported if the expression reference is NULL. */NXString ReferenceValue;
            public: /** The attribute is inherited from another object and not overridden */bool Inherited;
            public: /** The attribute is overriding an inherited attribute */bool IsOverride;
            public: /** The attribute is locked.
                                                         When an existing attribute is read, this flag indicates that the attribute cannot currently be modified.
                                                         The flag is set if the attribute is created from a template that has the 'Locked' flag, or if
                                                         it is reserved by the system or by some other mechanism. 
                                                         When an unset attribute template is read, this flag indicates whether attributes created from the template will be
                                                         locked when the part is saved and reloaded. */bool Locked;
            public: /** This attribute is a reserved system attribute.
                                                         When this flag is set, the attribute can be set and removed only by the system. It is also created locked. It cannot be unlocked. */bool OwnedBySystem;
            public: /** The attribute is required on the given object */bool Required;
            public: /** The attribute has not been set (i.e. has no value) on the object (used when getting attribute information) */bool Unset;
            public: /** The attribute is an array attribute */bool Array;
            public: /** The attribute is PDM-based */bool PdmBased;
            public: /** The attribute is transient - it will not be saved on part save */bool NotSaved;
            public: /** If this struct represents an array attribute element, this is the index (numerical, starting with 0). 
                                                         After reading an attribute, it is valid only if 'Unset' is 'false' and 'Array' is 'true'.
                                                         The array size can be resized only one element at a time (adding or removing the last element). */int ArrayElementIndex;
            public: /** The display units, if any, if the attribute is a real-type attribute */NXOpen::Unit * Unit;
            public: /** The expresssion referenced by the attribute (only supported if the referenceValue is NULL) */NXOpen::Expression * Expression;
            public: AttributeInformation() :
                Type((NXOpen::NXObject::AttributeType)0),
                Category(),
                Title(),
                TitleAlias(),
                BooleanValue(),
                IntegerValue(),
                RealValue(),
                StringValue(),
                TimeValue(),
                CompTimeValue(),
                ReferenceValue(),
                Inherited(),
                IsOverride(),
                Locked(),
                OwnedBySystem(),
                Required(),
                Unset(),
                Array(),
                PdmBased(),
                NotSaved(),
                ArrayElementIndex(),
                Unit(),
                Expression()
            {
            }
            /** Constructor for the AttributeInformation struct. */ 
            public: AttributeInformation(NXOpen::NXObject::AttributeType typeInitial /** Attribute type */, 
                    const NXString &categoryInitial /** Attribute category (may be NULL) */, 
                    const NXString &titleInitial /** Attribute title (for arrays, this is the array title without an appended index)*/, 
                    const NXString &titleAliasInitial /** Attribute title alias (may be NULL) (for arrays, this is the array title alias, without an appended index) */, 
                    bool booleanValueInitial /** Boolean (logical) attribute value (the default value is returned when reading templates of non-set attributes) */, 
                    int integerValueInitial /** Integer attribute value (the default value is returned when reading templates of non-set attributes) */, 
                    double realValueInitial /** Real attribute value (the default value is returned when reading templates of non-set attributes)
                                                                 If the attribute has units, it is returned in the display units of the attribute */, 
                    const NXString &stringValueInitial /** String attribute value (the default value is returned when reading templates of non-set attributes). */, 
                    const NXString &timeValueInitial /** Time/Date attribute value (the default value is returned when reading templates of non-set attributes).
                                                                 See @link NXOpen::NXObject::DateAndTimeFormat NXOpen::NXObject::DateAndTimeFormat@endlink  for valid formats. 
                                                                 The time value held here is in the current time zone of the machine running the program. 
                                                                 NOTE: if both TimeValue and CompTimeValue are unset (NULL and (0,0), respectively) when the attribute is set,
                                                                       then the attribute will be set to current time and date. */, 
                    const NXOpen::NXObject::ComputationalTime &compTimeValueInitial /** Time/Date attribute value (the default value is returned when reading templates of non-set attributes).
                                                                 The time value held here is in the current time zone of the machine running the program. */, 
                    const NXString &referenceValueInitial /** Reference string of a string type attribute (it is NULL if it is a 'normal' string attribute). 
                                                                 Only supported if the expression reference is NULL. */, 
                    bool inheritedInitial /** The attribute is inherited from another object and not overridden */, 
                    bool isOverrideInitial /** The attribute is overriding an inherited attribute */, 
                    bool lockedInitial /** The attribute is locked.
                                                                 When an existing attribute is read, this flag indicates that the attribute cannot currently be modified.
                                                                 The flag is set if the attribute is created from a template that has the 'Locked' flag, or if
                                                                 it is reserved by the system or by some other mechanism. 
                                                                 When an unset attribute template is read, this flag indicates whether attributes created from the template will be
                                                                 locked when the part is saved and reloaded. */, 
                    bool ownedBySystemInitial /** This attribute is a reserved system attribute.
                                                                 When this flag is set, the attribute can be set and removed only by the system. It is also created locked. It cannot be unlocked. */, 
                    bool requiredInitial /** The attribute is required on the given object */, 
                    bool unsetInitial /** The attribute has not been set (i.e. has no value) on the object (used when getting attribute information) */, 
                    bool arrayInitial /** The attribute is an array attribute */, 
                    bool pdmBasedInitial /** The attribute is PDM-based */, 
                    bool notSavedInitial /** The attribute is transient - it will not be saved on part save */, 
                    int arrayElementIndexInitial /** If this struct represents an array attribute element, this is the index (numerical, starting with 0). 
                                                                 After reading an attribute, it is valid only if 'Unset' is 'false' and 'Array' is 'true'.
                                                                 The array size can be resized only one element at a time (adding or removing the last element). */, 
                    NXOpen::Unit * unitInitial /** The display units, if any, if the attribute is a real-type attribute */, 
                    NXOpen::Expression * expressionInitial /** The expresssion referenced by the attribute (only supported if the referenceValue is NULL) */) :
                Type(typeInitial),
                Category(categoryInitial),
                Title(titleInitial),
                TitleAlias(titleAliasInitial),
                BooleanValue(booleanValueInitial),
                IntegerValue(integerValueInitial),
                RealValue(realValueInitial),
                StringValue(stringValueInitial),
                TimeValue(timeValueInitial),
                CompTimeValue(compTimeValueInitial),
                ReferenceValue(referenceValueInitial),
                Inherited(inheritedInitial),
                IsOverride(isOverrideInitial),
                Locked(lockedInitial),
                OwnedBySystem(ownedBySystemInitial),
                Required(requiredInitial),
                Unset(unsetInitial),
                Array(arrayInitial),
                PdmBased(pdmBasedInitial),
                NotSaved(notSavedInitial),
                ArrayElementIndex(arrayElementIndexInitial),
                Unit(unitInitial),
                Expression(expressionInitial)
            {
            }
        };

        private: NXObjectImpl * m_nxobject_impl;
        private: friend class  _NXObjectBuilder;
        protected: NXObject();
        public: ~NXObject();
        /** Creates or modifies an attribute with the option to update or not. 
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, set the type to @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink  and specify a ReferenceValue.
                NOTE: To set an @link NXOpen::NXObject::AttributeTypeTime NXOpen::NXObject::AttributeTypeTime@endlink  attribute, either a formatted string or a computational value may be used.
                      If both are set (the string is not NULL and the computational value is not (0,0)), then the computational value will take precedence.
                      The time value in either case is in the current time zone of the machine running the program.

                The following data members of the Info structure are ignored by this method:
                    Alias
                    Inherited
                    Required
                    Unset
                    Locked
                    OwnedBySystem
                    PdmBased

                The following data members of an attribute cannot be edited once the attribute is set:
                    Type 
                    Title
                    TitleAlias
                    Array
                    ArrayElementIndex
                    The dimensionality of the Unit specification (cannot change from mm to microA, but from mm to cm is fine) 

                The following data of an attribute can be set if and only if the attribute is not associated with a template. It cannot be modified once set.
                    Array
                    Category
                    Transient

                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated.
                NOTE: The valid range for attributes of type date is from 01-Jan-1970 to 31-Dec-2105 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUserAttribute
        (
            const NXOpen::NXObject::AttributeInformation & info /** info */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies an integer attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ ,
            int value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies an integer attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ ,
            int value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a real attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ ,
            double value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a real attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ ,
            double value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a string attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ ,
            const NXString & value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a string attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ ,
            const char * value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a null attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a null attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a time attribute with the option to update or not. 
                The time value is assumed to be in the current time zone of the machine running the program. 
                NX will store the value in UTC. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated.        
                NOTE: The valid range for attributes of type date is from 01-Jan-1970 to 31-Dec-2105 
             
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTimeUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ ,
            const NXString & value /** The current date and time is used if the value is NULL.  
                                                See @link NXOpen::NXObject::DateAndTimeFormat NXOpen::NXObject::DateAndTimeFormat@endlink  for valid formats. */,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a time attribute with the option to update or not. 
                The time value is assumed to be in the current time zone of the machine running the program. 
                NX will store the value in UTC. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated.        
                NOTE: The valid range for attributes of type date is from 01-Jan-1970 to 31-Dec-2105 
             
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetTimeUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ ,
            const char * value /** The current date and time is used if the value is NULL.  
                                                See @link NXOpen::NXObject::DateAndTimeFormat NXOpen::NXObject::DateAndTimeFormat@endlink  for valid formats. */,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a time attribute with the option to update or not. 
                The time value is assumed to be in the current time zone of the machine running the program. 
                NX will store the value in UTC. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetTimeUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ ,
            const NXOpen::NXObject::ComputationalTime & value /** The current date and time is used if the value is (0,0).*/,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a time attribute with the option to update or not. 
                The time value is assumed to be in the current time zone of the machine running the program. 
                NX will store the value in UTC. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetTimeUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ ,
            const NXOpen::NXObject::ComputationalTime & value /** The current date and time is used if the value is (0,0).*/,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a boolean attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetBooleanUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ ,
            bool value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a boolean attribute with the option to update or not. 
                To set a non-array attribute, set the index = -1.
                Arrays can be extended only one element at a time.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetBooleanUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ ,
            bool value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Create an attribute iterator  @return  A new attribute iterator object 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::AttributeIterator * CreateAttributeIterator
        (
        );
        /** Determines if an attribute exists on the object, that satisfies the given iterator  @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool HasUserAttribute
        (
            NXOpen::AttributeIterator * iterator /** @link NXOpen::AttributeIterator NXOpen::AttributeIterator@endlink  */
        );
        /** Determines if an attribute with the given Title, Type and array Index is present on the object
                Unset attributes will not be detected by this function, as its purpose is to test for the actual presence of the attribute on the object.
                If the attribute to be found is not an array, set the index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool HasUserAttribute
        (
            const NXString & title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ ,
            int index /** index */ 
        );
        /** Determines if an attribute with the given Title, Type and array Index is present on the object
                Unset attributes will not be detected by this function, as its purpose is to test for the actual presence of the attribute on the object.
                If the attribute to be found is not an array, set the index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        bool HasUserAttribute
        (
            const char * title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ ,
            int index /** index */ 
        );
        /** Gets the count of set attributes on the object, if any, that satisfy the given iterator.
                Array elements are counted individually.  @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: int GetUserAttributeCount
        (
            NXOpen::AttributeIterator * iterator /** @link NXOpen::AttributeIterator NXOpen::AttributeIterator@endlink  */
        );
        /** Gets the count of set attributes on the object, if any, that satisfy the given iterator.
                Array elements are optionally counted individually.  @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: int GetUserAttributeCount
        (
            NXOpen::AttributeIterator * iterator /** @link NXOpen::AttributeIterator NXOpen::AttributeIterator@endlink  */,
            bool countArrayAsOneAttribute /** countarrayasoneattribute */ 
        );
        /** Gets the count of set attributes on the object, if any, of the given type.
                Will not include unset attributes. Array elements are counted individually.  @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: int GetUserAttributeCount
        (
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** Gets the count of attributes on the object, if any, of the given type.
                Includes option to include unset attributes (i.e. to count attribute templates with no associated attributes).
                Includes option to count arrays as one attribute or to count array elements individually.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .  @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: int GetUserAttributeCount
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            bool includeUnset /** includeunset */ ,
            bool countArrayAsOneAttribute /** countarrayasoneattribute */ 
        );
        /** Gets the size of the first attribute encountered on the object, if any, with a given Title and Type.
                For unset attributes (with or without templates), the returned size will be 0.
                For non-array set attributes, the returned size will be 1.
                For array attributes, the returned size will be the count of array elements that have been set.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .  @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: int GetUserAttributeSize
        (
            const NXString & title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** Gets the size of the first attribute encountered on the object, if any, with a given Title and Type.
                For unset attributes (with or without templates), the returned size will be 0.
                For non-array set attributes, the returned size will be 1.
                For array attributes, the returned size will be the count of array elements that have been set.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .  @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        int GetUserAttributeSize
        (
            const char * title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** Gets the next attribute encountered on the object, if any, that satisfies the given iterator.  @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetNextUserAttribute
        (
            NXOpen::AttributeIterator * iterator /** @link NXOpen::AttributeIterator NXOpen::AttributeIterator@endlink  */,
            NXOpen::NXObject::AttributeInformation* info /** info */ 
        );
        /** Gets the first attribute encountered on the object, if any, with a given Title, Type and array Index.
                This function will return data for unset attributes.
                For non-string attribute types, the string-converted value is returned as well for convenience.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                If an unset attribute is read, then the index returned has no meaning.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .
                The date format set by the Customer Defaults is used for attributes of type time.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .
                      For reference type string attributes, both the ReferenceValue and the calculated StringValue are returned.  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::NXObject::AttributeInformation GetUserAttribute
        (
            const NXString & title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ ,
            int index /** index */ 
        );
        /** Gets the first attribute encountered on the object, if any, with a given Title, Type and array Index.
                This function will return data for unset attributes.
                For non-string attribute types, the string-converted value is returned as well for convenience.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                If an unset attribute is read, then the index returned has no meaning.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .
                The date format set by the Customer Defaults is used for attributes of type time.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .
                      For reference type string attributes, both the ReferenceValue and the calculated StringValue are returned.  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        NXOpen::NXObject::AttributeInformation GetUserAttribute
        (
            const char * title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ ,
            int index /** index */ 
        );
        /** Gets a boolean attribute by Title and array Index.
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetBooleanUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ 
        );
        /** Gets a boolean attribute by Title and array Index.
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        bool GetBooleanUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ 
        );
        /** Gets an integer attribute by Title and array Index.
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: int GetIntegerUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ 
        );
        /** Gets an integer attribute by Title and array Index.
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        int GetIntegerUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ 
        );
        /** Gets a real attribute by Title and array Index.
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: double GetRealUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ 
        );
        /** Gets a real attribute by Title and array Index.
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        double GetRealUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ 
        );
        /** Gets a string attribute by Title and array Index.
                For reference type string attributes, the calculated StringValue is returned.
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink . @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetStringUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ 
        );
        /** Gets a string attribute by Title and array Index.
                For reference type string attributes, the calculated StringValue is returned.
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink . @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        NXString GetStringUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ 
        );
        /** Gets a time attribute by Title and array Index.
                The date format set by the Customer Defaults is used.
                The time value returned is in the current time zone of the machine running the program. 
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .
                NOTE: The returned string must be deleted by the caller  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetTimeUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ 
        );
        /** Gets a time attribute by Title and array Index.
                The date format set by the Customer Defaults is used.
                The time value returned is in the current time zone of the machine running the program. 
                This function will not look for unset attributes.
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .
                NOTE: The returned string must be deleted by the caller  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        NXString GetTimeUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ 
        );
        /** Gets a time attribute by Title and array Index.
                The time value returned will be in the current time zone of the machine running the program. 
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .  @return  The time in the local time zone 
         <br>  Created in NX8.5.2.  <br>  
         <br> License requirements : None */
        public: NXOpen::NXObject::ComputationalTime GetComputationalTimeUserAttribute
        (
            const NXString & title /** title */ ,
            int index /** index */ 
        );
        /** Gets a time attribute by Title and array Index.
                The time value returned will be in the current time zone of the machine running the program. 
                If the attribute to be found is not an array, set the Index to -1, otherwise set it to the desired index.
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .  @return  The time in the local time zone 
         <br>  Created in NX8.5.2.  <br>  
         <br> License requirements : None */
        NXOpen::NXObject::ComputationalTime GetComputationalTimeUserAttribute
        (
            const char * title /** title */ ,
            int index /** index */ 
        );
        /** Gets all the attributes that have been set on the given object, if any, that satisfy the given iterator.
                The results will not include information from associated attribute templates of unset attributes.
                The elements of array attributes are returned individually in order of increasing indices. 
                The returned Title of an array element is the array title (without index). The Index data member holds the index.
                The date format set by the Customer Defaults is used.
                Reference type attributes are returned as being of type @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink ,
                and both the ReferenceValue and the calculated StringValue are returned.  @return   
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::NXObject::AttributeInformation> GetUserAttributes
        (
            NXOpen::AttributeIterator * iterator /** @link NXOpen::AttributeIterator NXOpen::AttributeIterator@endlink  */
        );
        /** Gets all the attributes that have been set on the given object.
                The results will not include information from associated attribute templates of unset attributes.
                The elements of array attributes are returned individually in order of increasing indices. 
                The returned Title of an array element is the array title (without index). The Index data member holds the index.
                The date format set by the Customer Defaults is used.
                Reference type attributes are returned as being of type @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink ,
                and both the ReferenceValue and the calculated StringValue are returned.  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::NXObject::AttributeInformation> GetUserAttributes
        (
        );
        /** Gets all the attributes of the given object.
                Includes option to return information also from associated attribute templates of unset attributes.
                The values returned for unset attributes are the default values from the templates.
                The elements of array attributes are returned individually in order of increasing indices. 
                The returned Title of an array element is the array title (without index). The Index data member holds the index.
                The date format set by the Customer Defaults is used.
                Reference type attributes are returnes as being of type @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink ,
                and both the ReferenceValue and the calculated StringValue are returned.  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::NXObject::AttributeInformation> GetUserAttributes
        (
            bool includeUnset /** includeunset */ 
        );
        /** Gets the first attribute encountered on the object, if any, with a given title, type and array index.
                The value of the attribute is converted to and returned as a string.
                If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .
                The date format set by the Customer Defaults is used for attributes of type time.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .
                      For reference type string attributes, the calculated StringValue is returned.  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetUserAttributeAsString
        (
            const NXString & title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ ,
            int index /** index */ 
        );
        /** Gets the first attribute encountered on the object, if any, with a given title, type and array index.
                The value of the attribute is converted to and returned as a string.
                If the attribute is not an array, the Index is ignored (if this is known beforehand, we recommend setting the Index to -1 to save time).
                The first element of an array has Index 0 (zero).
                To get all the array elements of an array, please use @link NXOpen::NXObject::GetUserAttributes NXOpen::NXObject::GetUserAttributes@endlink .
                The date format set by the Customer Defaults is used for attributes of type time.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .
                      For reference type string attributes, the calculated StringValue is returned.  @return   
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        NXString GetUserAttributeAsString
        (
            const char * title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ ,
            int index /** index */ 
        );
        /** Deletes the attributes on the object, if any, that satisfy the given iterator 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteUserAttributes
        (
            NXOpen::AttributeIterator * iterator /** @link NXOpen::AttributeIterator NXOpen::AttributeIterator@endlink  */,
            NXOpen::Update::Option option /** option */ 
        );
        /** Deletes the first attribute encountered with the given Type, Title.
                If a candidate attribute is not an array attribute, the DeleteEntireArray input is ignored,
                If a candidate attribute is an array attribute and DeleteEntireArray input is 'false', then the last element of the array is deleted.
                If a candidate attribute is an array attribute and DeleteEntireArray input is 'true', then the entire array is deleted.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink . 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteUserAttribute
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            const NXString & title /** title */ ,
            bool deleteEntireArray /** delete entire array */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Deletes the first attribute encountered with the given Type, Title.
                If a candidate attribute is not an array attribute, the DeleteEntireArray input is ignored,
                If a candidate attribute is an array attribute and DeleteEntireArray input is 'false', then the last element of the array is deleted.
                If a candidate attribute is an array attribute and DeleteEntireArray input is 'true', then the entire array is deleted.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink . 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void DeleteUserAttribute
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            const char * title /** title */ ,
            bool deleteEntireArray /** delete entire array */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Deletes the attributes encountered with the given Type with option to update or not.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink . 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void DeleteUserAttributes
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Lock or unlock the given attribute.
                For array attributes, the Title should be set to the array title, without the appended index.
                Individual array elements cannot be separately locked.
                NOTE: Attributes that are reserved (OwnedBySystem), cannot be unlocked.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUserAttributeLock
        (
            const NXString & title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ ,
            bool lock /** lock */ 
        );
        /** Lock or unlock the given attribute.
                For array attributes, the Title should be set to the array title, without the appended index.
                Individual array elements cannot be separately locked.
                NOTE: Attributes that are reserved (OwnedBySystem), cannot be unlocked.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        void SetUserAttributeLock
        (
            const char * title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ ,
            bool lock /** lock */ 
        );
        /** Determine the lock of the given attribute.
                For array attributes, the Title should be set to the array title, without the appended index.
                Individual array elements cannot be separately locked  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: bool GetUserAttributeLock
        (
            const NXString & title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** Determine the lock of the given attribute.
                For array attributes, the Title should be set to the array title, without the appended index.
                Individual array elements cannot be separately locked  @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        bool GetUserAttributeLock
        (
            const char * title /** title */ ,
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** 
               Returns an array of objects from which this object presents attributes. 
               The order of the array is in inheritance order so earlier objects may be able to override objects at 
               higher indices in the array allowing for the rules set up for the particular attributes involved. 
               If this object itself can own attributes it will also be in the array.
            
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: std::vector<NXOpen::NXObject *> GetUserAttributeSourceObjects
        (
        );
        /**  @brief Sets the value of PDM Reference attribute on the object.  

          User should provide attribute title and alias
                value that is displayed on UI. If reference attribute is of Array type it will be ignored.
                Alias string will be converted to internal value (i.e. session identifier) and internal value will be set on given object.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetPdmReferenceAttribute
        (
            const NXString & attributeTitle /** attributetitle */ ,
            const NXString & attributeValue /** attributevalue */ 
        );
        /**  @brief Sets the value of PDM Reference attribute on the object.  

          User should provide attribute title and alias
                value that is displayed on UI. If reference attribute is of Array type it will be ignored.
                Alias string will be converted to internal value (i.e. session identifier) and internal value will be set on given object.
            
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        void SetPdmReferenceAttribute
        (
            const char * attributeTitle /** attributetitle */ ,
            const char * attributeValue /** attributevalue */ 
        );
        /**  @brief Gets the value of PDM Reference attribute for given object.  

          
                 User should provide attribute title and displayed value will be returned.
             @return   
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetPdmReferenceAttributeValue
        (
            const NXString & attributeTitle /** attributetitle */ 
        );
        /**  @brief Gets the value of PDM Reference attribute for given object.  

          
                 User should provide attribute title and displayed value will be returned.
             @return   
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        NXString GetPdmReferenceAttributeValue
        (
            const char * attributeTitle /** attributetitle */ 
        );
        /** Gets the first attribute (or attribute array) encountered on the object, if any, with a given Title and Type.
                This function will optionally return data for unset attributes.
                For non-string attribute types, the string-converted value is returned as well for convenience.
                If the attribute cannot be found, but a template is found, then a single struct is returned with information from the template.
                If neither an attribute nor a template can be found, then no struct is returned (NULL)).
                If a non-array attribute is found, a single struct is returned with information from that attribute.
                If an array attribute is found, then an array of structs is returned with information from each of the array elements of the attribute.
                Array elements are returned in order of increasing indices.
                The first element of an array has Index 0 (zero).
                The date format set by the Customer Defaults is used for attributes of type time.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .
                      For reference type string attributes, both the ReferenceValue and the calculated StringValue are returned.  @return   
         <br>  @deprecated Deprecated in NX11.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use GetUserAttribute instead.") std::vector<NXOpen::NXObject::AttributeInformation> GetUserAttribute
        (
            const NXString & title /** title */ ,
            bool includeUnset /** includeunset */ ,
            bool addStringValues /** addstringvalues */ ,
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** Gets the first attribute (or attribute array) encountered on the object, if any, with a given Title and Type.
                This function will optionally return data for unset attributes.
                For non-string attribute types, the string-converted value is returned as well for convenience.
                If the attribute cannot be found, but a template is found, then a single struct is returned with information from the template.
                If neither an attribute nor a template can be found, then no struct is returned (NULL)).
                If a non-array attribute is found, a single struct is returned with information from that attribute.
                If an array attribute is found, then an array of structs is returned with information from each of the array elements of the attribute.
                Array elements are returned in order of increasing indices.
                The first element of an array has Index 0 (zero).
                The date format set by the Customer Defaults is used for attributes of type time.
                NOTE: This method does not support the use of @link NXOpen::NXObject::AttributeTypeReference NXOpen::NXObject::AttributeTypeReference@endlink .
                      Instead, use @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink .
                      For reference type string attributes, both the ReferenceValue and the calculated StringValue are returned.  @return   
         <br>  @deprecated Deprecated in NX11.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : None */
        std::vector<NXOpen::NXObject::AttributeInformation> GetUserAttribute
        (
            const char * title /** title */ ,
            bool includeUnset /** includeunset */ ,
            bool addStringValues /** addstringvalues */ ,
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** Gets all the attributes of the given object.
                Includes option to return information also from associated attribute templates of unset attributes.
                The values returned for unset attributes are the default values from the templates.
                Includes an option to return the value not only in the natural type, but also converted to a string (effective only for non-string attributes).
                The elements of array attributes are returned individually in order of increasing indices. 
                The returned Title of an array element is the array title (without index). The Index data member holds the index.
                The date format set by the Customer Defaults is used.
                Reference type attributes are returned as being of type @link NXOpen::NXObject::AttributeTypeString NXOpen::NXObject::AttributeTypeString@endlink ,
                and both the ReferenceValue and the calculated StringValue are returned.  @return   
         <br>  @deprecated Deprecated in NX11.0.0.  Use @link GetUserAttributes GetUserAttributes@endlink  instead. <br>  

         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use GetUserAttributes instead.") std::vector<NXOpen::NXObject::AttributeInformation> GetUserAttributes
        (
            bool includeUnset /** includeunset */ ,
            bool addStringValues /** addstringvalues */ 
        );
        /** Deletes all attributes of a specific type.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink .
                If a candidate attribute is an array attribute, this method will delete all the array elements.
                NOTE: If the input specifies reference type, then this function will delete
                      string type non-array attributes that have a reference value. The reference type is used only
                      to single out string type non-array attributes that contain a reference value. 
                      The use of reference type in this function is deprecated. Please use string type instead. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link DeleteUserAttributes DeleteUserAttributes@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use DeleteUserAttributes instead.") void DeleteAllAttributesByType
        (
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** Deletes all attributes of a specific type with the option to update or not.
                If a candidate attribute is an array attribute, this method will delete all the array elements. 
                NOTE: If the input specifies reference type, then this function will delete
                      string type non-array attributes that have a reference value. The reference type is used only
                      to single out string type non-array attributes that contain a reference value. 
                      The use of reference type in this function is deprecated. Please use string type instead. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link DeleteUserAttributes DeleteUserAttributes@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use DeleteUserAttributes instead.") void DeleteAllAttributesByType
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies an integer attribute.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetAttribute
        (
            const NXString & title /** title */ ,
            int value /** value */ 
        );
        /** Creates or modifies an integer attribute.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetAttribute
        (
            const char * title /** title */ ,
            int value /** value */ 
        );
        /** Creates or modifies an integer attribute with the option to update or not. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetAttribute
        (
            const NXString & title /** title */ ,
            int value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies an integer attribute with the option to update or not. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        void SetAttribute
        (
            const char * title /** title */ ,
            int value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a real attribute.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetAttribute
        (
            const NXString & title /** title */ ,
            double value /** value */ 
        );
        /** Creates or modifies a real attribute.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetAttribute
        (
            const char * title /** title */ ,
            double value /** value */ 
        );
        /** Creates or modifies a real attribute with the option to update or not. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetAttribute
        (
            const NXString & title /** title */ ,
            double value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a real attribute with the option to update or not. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        void SetAttribute
        (
            const char * title /** title */ ,
            double value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a string attribute.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetAttribute
        (
            const NXString & title /** title */ ,
            const NXString & value /** value */ 
        );
        /** Creates or modifies a string attribute.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetAttribute
        (
            const char * title /** title */ ,
            const char * value /** value */ 
        );
        /** Creates or modifies a string attribute with the option to update or not. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetAttribute
        (
            const NXString & title /** title */ ,
            const NXString & value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a string attribute with the option to update or not. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        void SetAttribute
        (
            const char * title /** title */ ,
            const char * value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a null attribute which is an attribute with a title and no value.
                This method performs an immediate update except when the object is a 
                @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetAttribute
        (
            const NXString & title /** title */ 
        );
        /** Creates or modifies a null attribute which is an attribute with a title and no value.
                This method performs an immediate update except when the object is a 
                @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetAttribute
        (
            const char * title /** title */ 
        );
        /** Creates or modifies a null attribute with the option to update or not. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetAttribute
        (
            const NXString & title /** title */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a null attribute with the option to update or not. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        void SetAttribute
        (
            const char * title /** title */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a time attribute.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                The time value is assumed to be in the current time zone of the machine running the program. 
                NX will store the value in UTC. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetTimeAttribute
        (
            const NXString & title /** title */ ,
            const NXString & value /** The current date and time is used if
                                                  the value is NULL.  See
                                                  @link NXOpen::NXObject::DateAndTimeFormat NXOpen::NXObject::DateAndTimeFormat@endlink 
                                                  for valid formats. */
        );
        /** Creates or modifies a time attribute.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink . 
                The time value is assumed to be in the current time zone of the machine running the program. 
                NX will store the value in UTC. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetTimeAttribute
        (
            const char * title /** title */ ,
            const char * value /** The current date and time is used if
                                                  the value is NULL.  See
                                                  @link NXOpen::NXObject::DateAndTimeFormat NXOpen::NXObject::DateAndTimeFormat@endlink 
                                                  for valid formats. */
        );
        /** Creates or modifies a time attribute with the option to update or not. 
                The time value is assumed to be in the current time zone of the machine running the program. 
                NX will store the value in UTC. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetTimeAttribute
        (
            const NXString & title /** title */ ,
            const NXString & value /** The current date and time is used if
                                                the value is NULL.  See
                                                @link NXOpen::NXObject::DateAndTimeFormat NXOpen::NXObject::DateAndTimeFormat@endlink 
                                                for valid formats. */,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a time attribute with the option to update or not. 
                The time value is assumed to be in the current time zone of the machine running the program. 
                NX will store the value in UTC. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        void SetTimeAttribute
        (
            const char * title /** title */ ,
            const char * value /** The current date and time is used if
                                                the value is NULL.  See
                                                @link NXOpen::NXObject::DateAndTimeFormat NXOpen::NXObject::DateAndTimeFormat@endlink 
                                                for valid formats. */,
            NXOpen::Update::Option option /** option */ 
        );
        /** Gets an integer attribute by title. 
                This method does not support array attributes.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use GetUserAttribute instead.") int GetIntegerAttribute
        (
            const NXString & title /** title */ 
        );
        /** Gets an integer attribute by title. 
                This method does not support array attributes.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        int GetIntegerAttribute
        (
            const char * title /** title */ 
        );
        /** Gets a real attribute by title. 
                This method does not support array attributes.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use GetUserAttribute instead.") double GetRealAttribute
        (
            const NXString & title /** title */ 
        );
        /** Gets a real attribute by title. 
                This method does not support array attributes.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        double GetRealAttribute
        (
            const char * title /** title */ 
        );
        /** Gets a string attribute value by title.
                For string attributes that use reference strings, this function returns the calculated value, not the reference string. 
                This method does not support array attributes.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use GetUserAttribute instead.") NXString GetStringAttribute
        (
            const NXString & title /** title */ 
        );
        /** Gets a string attribute value by title.
                For string attributes that use reference strings, this function returns the calculated value, not the reference string. 
                This method does not support array attributes.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString GetStringAttribute
        (
            const char * title /** title */ 
        );
        /** Gets a time attribute by title. 
                The time returned will be in the current time zone of the machine running the program. 
                This method does not support array attributes.
                This method is deprecated.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use GetUserAttribute instead.") NXString GetTimeAttribute
        (
            NXOpen::NXObject::DateAndTimeFormat format /** format */ ,
            const NXString & title /** title */ 
        );
        /** Gets a time attribute by title. 
                The time returned will be in the current time zone of the machine running the program. 
                This method does not support array attributes.
                This method is deprecated.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString GetTimeAttribute
        (
            NXOpen::NXObject::DateAndTimeFormat format /** format */ ,
            const char * title /** title */ 
        );
        /** Gets the reference string (not the calculated value) of a string attribute that uses a reference string. Get the attribute by title.
                For the calculated value, please use @link NXOpen::NXObject::GetUserAttribute NXOpen::NXObject::GetUserAttribute@endlink  
                This method does not support array attributes.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use GetUserAttribute instead.") NXString GetReferenceAttribute
        (
            const NXString & title /** title */ 
        );
        /** Gets the reference string (not the calculated value) of a string attribute that uses a reference string. Get the attribute by title.
                For the calculated value, please use @link NXOpen::NXObject::GetUserAttribute NXOpen::NXObject::GetUserAttribute@endlink  
                This method does not support array attributes.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttribute GetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        NXString GetReferenceAttribute
        (
            const char * title /** title */ 
        );
        /** Deletes an attribute by type and title.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink .
                If a candidate attribute is an array attribute, this method will delete all the array elements.
                NOTE: If the input specifies reference type, then this function will delete
                      string type attributes that have a reference value. The reference type is used only
                      to single out string type attributes that contain a reference value. 
                      The use of reference type in this function is discouraged. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link DeleteUserAttribute DeleteUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use DeleteUserAttribute instead.") void DeleteAttributeByTypeAndTitle
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            const NXString & title /** title */ 
        );
        /** Deletes an attribute by type and title.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink .
                If a candidate attribute is an array attribute, this method will delete all the array elements.
                NOTE: If the input specifies reference type, then this function will delete
                      string type attributes that have a reference value. The reference type is used only
                      to single out string type attributes that contain a reference value. 
                      The use of reference type in this function is discouraged. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link DeleteUserAttribute DeleteUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void DeleteAttributeByTypeAndTitle
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            const char * title /** title */ 
        );
        /** Deletes an attribute by type and title with the option to update or not.
                If a candidate attribute is an array attribute, this method will delete all the array elements. 
                NOTE: If the input specifies reference type, then this function will delete
                      string type attributes that have a reference value. The reference type is used only
                      to single out string type attributes that contain a reference value. 
                      The use of reference type in this function is discouraged. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link DeleteUserAttribute DeleteUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use DeleteUserAttribute instead.") void DeleteAttributeByTypeAndTitle
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            const NXString & title /** title */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Deletes an attribute by type and title with the option to update or not.
                If a candidate attribute is an array attribute, this method will delete all the array elements. 
                NOTE: If the input specifies reference type, then this function will delete
                      string type attributes that have a reference value. The reference type is used only
                      to single out string type attributes that contain a reference value. 
                      The use of reference type in this function is discouraged. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link DeleteUserAttribute DeleteUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        void DeleteAttributeByTypeAndTitle
        (
            NXOpen::NXObject::AttributeType type /** type */ ,
            const char * title /** title */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a string attribute which uses a reference string.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink .
                NOTE: The input value must be a valid reference string. 
                This method does not support array attributes. 
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetReferenceAttribute
        (
            const NXString & title /** title */ ,
            const NXString & value /** value */ 
        );
        /** Creates or modifies a string attribute which uses a reference string.  This method performs an immediate update
                except when the object is a @link NXOpen::Features::Feature NXOpen::Features::Feature@endlink .
                NOTE: The input value must be a valid reference string. 
                This method does not support array attributes. 
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        void SetReferenceAttribute
        (
            const char * title /** title */ ,
            const char * value /** value */ 
        );
        /** Creates or modifies a string attribute which uses a reference string, with the option to update or not.
                NOTE: The input value must be a valid reference string. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use SetUserAttribute instead.") void SetReferenceAttribute
        (
            const NXString & title /** title */ ,
            const NXString & value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Creates or modifies a string attribute which uses a reference string, with the option to update or not.
                NOTE: The input value must be a valid reference string. 
                This method does not support array attributes.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link SetUserAttribute SetUserAttribute@endlink  instead. <br>  

         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : None */
        void SetReferenceAttribute
        (
            const char * title /** title */ ,
            const char * value /** value */ ,
            NXOpen::Update::Option option /** option */ 
        );
        /** Gets all the attribute titles of a specific type.
                Only Title and Type are set in the returned struct. No values are returned.
                Array attributes are supported. The Title returned is the array title, with no index appended. Only one title is returned per array.
                This function does not return the titles of unset attributes.
                NOTE: If the input specifies reference type, then this function will get
                      string type attributes that have a reference value. The reference type is used only
                      to single out string type attributes that contain a reference value. 
                      The use of reference type in this function is deprecated. Please use string type instead.  @return   
         <br>  @deprecated Deprecated in NX8.0.0.  Use @link GetUserAttributes GetUserAttributes@endlink  instead. <br>  

         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.0.0.  Use GetUserAttributes instead.") std::vector<NXOpen::NXObject::AttributeInformation> GetAttributeTitlesByType
        (
            NXOpen::NXObject::AttributeType type /** type */ 
        );
        /** Gets all the attributes that have been set on the given object.
                The values are returned as strings.
                The elements of array attributes are returned individually in order of increasing indices. 
                The returned Title of an array element is the array title (without index). The Index data member holds the index.
                Reference type attributes return the calculated StringValue.
                The date format set by the Customer Defaults is used.  @return   
         <br>  @deprecated Deprecated in NX8.5.0.  Use @link GetUserAttributes GetUserAttributes@endlink  instead. <br>  

         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : None */
        public: NX_DEPRECATED("Deprecated in NX8.5.0.  Use GetUserAttributes instead.") std::vector<NXString> GetUserAttributesAsStrings
        (
        );
        /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual NXOpen::INXObject * FindObject
        (
            const NXString & journalIdentifier /** Journal identifier of the object */
        );
        /** Finds the @link  NXOpen::NXObject   NXOpen::NXObject @endlink  with the given identifier as recorded in a journal. 
            An object may not return the same value as its JournalIdentifier in different versions of 
            the software. However newer versions of the software should find the same object when 
            FindObject is passed older versions of its journal identifier. In general, this method 
            should not be used in handwritten code and exists to support record and playback of journals.

            An exception will be thrown if no object can be found with the given journal identifier.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        virtual NXOpen::INXObject * FindObject
        (
            const char * journalIdentifier /** Journal identifier of the object */
        );
        /**Returns  the identifier that would be recorded in a journal for this object. 
            This may not be the same across different releases of the software. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual NXString JournalIdentifier
        (
        );
        /**Returns  whether this object is an occurrence or not. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual bool IsOccurrence
        (
        );
        /**Returns  the prototype of this object if it is an occurrence. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual NXOpen::INXObject * Prototype
        (
        );
        /**Returns  the owning component, if this object is an occurrence. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual NXOpen::Assemblies::Component * OwningComponent
        (
        );
        /**Returns  the owning part of this object 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual NXOpen::BasePart * OwningPart
        (
        );
        /** Prints a representation of this object to the system log file.
             
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual void Print
        (
        );
        /**Returns  the custom name of the object.  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual NXString Name
        (
        );
        /** Sets the custom name of the object.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: virtual void SetName
        (
            const NXString & name /** name */ 
        );
        /** Sets the custom name of the object.
                NOTE: This method should not be used to edit a read-only object such as a Mirrored PMI object.
                      If it is, the changes will be overridden when the part is updated. 
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        virtual void SetName
        (
            const char * name /** name */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
