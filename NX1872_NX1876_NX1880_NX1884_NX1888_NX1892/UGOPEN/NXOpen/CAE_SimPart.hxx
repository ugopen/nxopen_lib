#ifndef NXOpen_CAE_SIMPART_HXX_INCLUDED
#define NXOpen_CAE_SIMPART_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimPart.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_CaePart.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SimPart;
    }
    namespace CAE
    {
        class CaePart;
    }
    namespace CAE
    {
        class FEModelOccurrence;
    }
    namespace CAE
    {
        class ImportSimulationBuilder;
    }
    namespace CAE
    {
        class SimSimulation;
    }
    namespace CAE
    {
        class _SimPartBuilder;
        class SimPartImpl;
        /**  @brief  Represents an NX part of type .sim.  

           <br> Use the @link NXOpen::PartCollection NXOpen::PartCollection@endlink  class to load or create a part.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SimPart : public NXOpen::CAE::CaePart
        {
             /** Contains information about which entities to be imported */
            public:
            struct ImportOptions
            {
                public: /** true when importing loads, if not false */bool ImportLoads;
                public: /** true when importing constraints, if not false */bool ImportConstraints;
                public: /** true when importing simulation objects, if not false */bool ImportSimulationobjects;
                public: /** true when importing materials, if not false */bool ImportMaterials;
                public: /** true when importing fields, if not false */bool ImportFields;
                public: /** true when importing modeling objects, if not false */bool ImportModelingobjects;
                public: /** true when importing physicals, if not false */bool ImportPhysicals;
                public: /** true when importing groups, if not false */bool ImportGroups;
                public: /** true when importing regions, if not false */bool ImportRegions;
                public: /** true when importing solutions, if not false */bool ImportSolutions;
                public: /** true when importing dofsets, if not false */bool ImportDofsets;
                public: /** true when importing all entities, if not false */bool ImportAll;
                public: ImportOptions() :
                    ImportLoads(),
                    ImportConstraints(),
                    ImportSimulationobjects(),
                    ImportMaterials(),
                    ImportFields(),
                    ImportModelingobjects(),
                    ImportPhysicals(),
                    ImportGroups(),
                    ImportRegions(),
                    ImportSolutions(),
                    ImportDofsets(),
                    ImportAll()
                {
                }
                /** Constructor for the ImportOptions struct. */ 
                public: ImportOptions(bool importLoadsInitial /** true when importing loads, if not false */, 
                        bool importConstraintsInitial /** true when importing constraints, if not false */, 
                        bool importSimulationobjectsInitial /** true when importing simulation objects, if not false */, 
                        bool importMaterialsInitial /** true when importing materials, if not false */, 
                        bool importFieldsInitial /** true when importing fields, if not false */, 
                        bool importModelingobjectsInitial /** true when importing modeling objects, if not false */, 
                        bool importPhysicalsInitial /** true when importing physicals, if not false */, 
                        bool importGroupsInitial /** true when importing groups, if not false */, 
                        bool importRegionsInitial /** true when importing regions, if not false */, 
                        bool importSolutionsInitial /** true when importing solutions, if not false */, 
                        bool importDofsetsInitial /** true when importing dofsets, if not false */, 
                        bool importAllInitial /** true when importing all entities, if not false */) :
                    ImportLoads(importLoadsInitial),
                    ImportConstraints(importConstraintsInitial),
                    ImportSimulationobjects(importSimulationobjectsInitial),
                    ImportMaterials(importMaterialsInitial),
                    ImportFields(importFieldsInitial),
                    ImportModelingobjects(importModelingobjectsInitial),
                    ImportPhysicals(importPhysicalsInitial),
                    ImportGroups(importGroupsInitial),
                    ImportRegions(importRegionsInitial),
                    ImportSolutions(importSolutionsInitial),
                    ImportDofsets(importDofsetsInitial),
                    ImportAll(importAllInitial)
                {
                }
            };

             /** Contains list of error codes for import of each entity type */
            public:
            struct ImportErrorCodes
            {
                public: /** returns error code for import of loads */int Importloads;
                public: /** returns error code for import of constraints */int Importconstraints;
                public: /** returns error code for import of simulation objects */int Importsimulationobjects;
                public: /** returns error code for import of materials */int Importmaterials;
                public: /** returns error code for import of fields */int Importfields;
                public: /** returns error code for import of modeling objects */int Importmodelingobjects;
                public: /** returns error code for import of physicals */int Importphysicals;
                public: /** returns error code for import of groups */int Importgroups;
                public: /** returns error code for import of regions */int Importregions;
                public: /** returns error code for import of solutions */int Importsolutions;
                public: /** returns error code for import of dofsets */int Importdofsets;
                public: ImportErrorCodes() :
                    Importloads(),
                    Importconstraints(),
                    Importsimulationobjects(),
                    Importmaterials(),
                    Importfields(),
                    Importmodelingobjects(),
                    Importphysicals(),
                    Importgroups(),
                    Importregions(),
                    Importsolutions(),
                    Importdofsets()
                {
                }
                /** Constructor for the ImportErrorCodes struct. */ 
                public: ImportErrorCodes(int importloadsInitial /** returns error code for import of loads */, 
                        int importconstraintsInitial /** returns error code for import of constraints */, 
                        int importsimulationobjectsInitial /** returns error code for import of simulation objects */, 
                        int importmaterialsInitial /** returns error code for import of materials */, 
                        int importfieldsInitial /** returns error code for import of fields */, 
                        int importmodelingobjectsInitial /** returns error code for import of modeling objects */, 
                        int importphysicalsInitial /** returns error code for import of physicals */, 
                        int importgroupsInitial /** returns error code for import of groups */, 
                        int importregionsInitial /** returns error code for import of regions */, 
                        int importsolutionsInitial /** returns error code for import of solutions */, 
                        int importdofsetsInitial /** returns error code for import of dofsets */) :
                    Importloads(importloadsInitial),
                    Importconstraints(importconstraintsInitial),
                    Importsimulationobjects(importsimulationobjectsInitial),
                    Importmaterials(importmaterialsInitial),
                    Importfields(importfieldsInitial),
                    Importmodelingobjects(importmodelingobjectsInitial),
                    Importphysicals(importphysicalsInitial),
                    Importgroups(importgroupsInitial),
                    Importregions(importregionsInitial),
                    Importsolutions(importsolutionsInitial),
                    Importdofsets(importdofsetsInitial)
                {
                }
            };

            private: SimPartImpl * m_simpart_impl;
            private: friend class  _SimPartBuilder;
            protected: SimPart();
            public: ~SimPart();
            /**Returns  the @link NXOpen::CAE::SimSimulation NXOpen::CAE::SimSimulation@endlink  object
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimSimulation * Simulation
            (
            );
            /** Finalizes the creation of the sim part file. 
                        This method should be called immediately after
                        creating the sim part file.
                        This method should be called only once for
                        each sim part file. The second call to the
                        method will raise an error. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void FinalizeCreation
            (
                NXOpen::CAE::CaePart * femPart /** the fem part file @link NXOpen::CAE::FemPart NXOpen::CAE::FemPart@endlink  */,
                std::vector<NXString> & description /** description */
            );
            /** Finalizes the creation of the sim part file. 
                        This method should be called immediately after
                        creating the sim part file.
                        This method should be called only once for
                        each sim part file. The second call to the
                        method will raise an error. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void FinalizeCreation
            (
                NXOpen::CAE::CaePart * femPart /** the fem part file @link NXOpen::CAE::FemPart NXOpen::CAE::FemPart@endlink  */,
                int femLayerOpt /** layer option. -1 = USE_ORIGINAL, 0 = USE_WORK */,
                std::vector<NXString> & description /** description */
            );
            /**Returns  the fem part associated with the sim part
                    
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaePart * FemPart
            (
            );
            /** Imports all entities of selected type from the source sim into the current (target) sim.
                        The FeModelOccurrence of the target sim onto which the user needs to import needs to be
                        passed in. The input will be an array of FeModelOccurrences, if user wants
                        to import the same source sim onto multiple FeModelOccurrences of the target sim.  @return  list of generated error codes during import 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimPart::ImportErrorCodes ImportSim
            (
                const NXString & fileName /** name of the source simulation file */,
                const NXString & prependString /** string to prepend imported simulation entity names, can be NULL or empty  */,
                const NXOpen::CAE::SimPart::ImportOptions & selOptions /** options indicating the types of entities to be imported */,
                const std::vector<NXOpen::CAE::FEModelOccurrence *> & selectedFemoccs /** Array of FeModelOccurrences to import onto @link NXOpen::CAE::FEModelOccurrence NXOpen::CAE::FEModelOccurrence@endlink  */
            );
            /** Imports all entities of selected type from the source sim into the current (target) sim.
                        The FeModelOccurrence of the target sim onto which the user needs to import needs to be
                        passed in. The input will be an array of FeModelOccurrences, if user wants
                        to import the same source sim onto multiple FeModelOccurrences of the target sim.  @return  list of generated error codes during import 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimPart::ImportErrorCodes ImportSim
            (
                const char * fileName /** name of the source simulation file */,
                const char * prependString /** string to prepend imported simulation entity names, can be NULL or empty  */,
                const NXOpen::CAE::SimPart::ImportOptions & selOptions /** options indicating the types of entities to be imported */,
                const std::vector<NXOpen::CAE::FEModelOccurrence *> & selectedFemoccs /** Array of FeModelOccurrences to import onto @link NXOpen::CAE::FEModelOccurrence NXOpen::CAE::FEModelOccurrence@endlink  */
            );
            /** Creates ImportSimulationBuilder. 
                    This imports selected entities of different type from the source sim into the current (target) sim. @return  The ImportSimulationBuilder object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::ImportSimulationBuilder * CreateImportSimBuilder
            (
            );
            /** Relabels the csys, physical, and group labels by the specified offset value
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void RelabelByOffsets
            (
                int csysOffset /** csys offset */,
                int physOffset /** physical offset */,
                int groupOffset /** group offset */
            );
            /** Compress the labels of csys, physical, and groups 
                     
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void CompressLabels
            (
                bool compressCsysLabels /** compress the csys labels */,
                bool compressPhysLabels /** compress the physical labels */,
                bool compressGroupLabels /** compress the group labels */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
