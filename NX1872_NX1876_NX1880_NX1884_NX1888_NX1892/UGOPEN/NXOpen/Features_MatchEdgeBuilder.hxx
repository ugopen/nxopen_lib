#ifndef NXOpen_FEATURES_MATCHEDGEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_MATCHEDGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_MatchEdgeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Features_FaceRecognitionBuilder.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_ControlPoleManagerData.hxx>
#include <NXOpen/GeometricUtilities_CurveRangeBuilder.hxx>
#include <NXOpen/GeometricUtilities_DegreesAndSegmentsOrPatchesBuilder.hxx>
#include <NXOpen/GeometricUtilities_DepthSkewBuilder.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimensionBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class MatchEdgeBuilder;
    }
    class Direction;
    class Edge;
    class Expression;
    class Face;
    namespace Features
    {
        class FaceRecognitionBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class ControlPoleManagerData;
    }
    namespace GeometricUtilities
    {
        class CurveRangeBuilder;
    }
    namespace GeometricUtilities
    {
        class DegreesAndSegmentsOrPatchesBuilder;
    }
    namespace GeometricUtilities
    {
        class DepthSkewBuilder;
    }
    namespace GeometricUtilities
    {
        class OnPathDimensionBuilder;
    }
    class SelectDisplayableObjectList;
    class SelectNXObject;
    namespace Features
    {
        class _MatchEdgeBuilderBuilder;
        class MatchEdgeBuilderImpl;
        /**
            Represents a @link NXOpen::Features::MatchEdge NXOpen::Features::MatchEdge@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateMatchEdgeBuilder  NXOpen::Features::FeatureCollection::CreateMatchEdgeBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Blend.Value </td> <td> 
         
        100 </td> </tr> 

        <tr><td> 
         
        CanUseFaceFinder </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DegreePatches.Degree </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        DegreePatches.SegmentsOrPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        DegreePatches.UDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        DegreePatches.UPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        DegreePatches.VDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        DegreePatches.VPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        EdgeLimit.AnchorPosition </td> <td> 
         
        Start </td> </tr> 

        <tr><td> 
         
        EndEdgeConstraint </td> <td> 
         
        Linked </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.CoaxialEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.CoplanarAxesEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.CoplanarEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.EqualDiameterEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.OffsetEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.ParallelEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.PerpendicularEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.SymmetricEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.TangentEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.ThicknessChainEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FaceRecognizer.UseFaceBrowse </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IsBlendEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsEditPoleEnabled </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsEndEdgeLocked </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsEndPoleFixed </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsG0Continuity </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IsG1Continuity </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IsG2Continuity </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsG3Continuity </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsKeepSelected </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsMatchEndToEnd </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsStartEdgeLocked </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsStartPoleFixed </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MatchExactType </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        PartialMatch </td> <td> 
         
        100 </td> </tr> 

        <tr><td> 
         
        PoleMoveDirectionEnum </td> <td> 
         
        X </td> </tr> 

        <tr><td> 
         
        PoleMovementConstraintType </td> <td> 
         
        Project </td> </tr> 

        <tr><td> 
         
        StartEdgeConstraint </td> <td> 
         
        Free </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  MatchEdgeBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Match Edge match types.  The match to datum type is deprecated in NX7.0. */
            public: enum Types
            {
                TypesMatchEdgeToEdge/** Edge to Edge match type  */,
                TypesMatchEdgeToFace/** Edge to Face match type  */,
                TypesMatchEdgeToCurve/** Edge to Curve match type */,
                TypesMatchEdgeToDatum/** Edge to Datum match type.
                                                                                        This type deprecated in NX7.0. 
                                                                                        Use @link NXOpen::Features::EdgeSymmetry NXOpen::Features::EdgeSymmetry@endlink  feature instead. */
            };

            /** Match Exact types */
            public: enum MatchExact
            {
                MatchExactExact/** Match exact                                 */,
                MatchExactAlign/** Match align without change degree and patch */,
                MatchExactNone/** Don't match exact                           */
            };

            /** Pole movement type  */
            public: enum PoleMovementConstraintEnumType
            {
                PoleMovementConstraintEnumTypeWCS/** Along WCS X/Y/Z direction */,
                PoleMovementConstraintEnumTypeView/** Along view                */,
                PoleMovementConstraintEnumTypeVector/** Along user defined vector */,
                PoleMovementConstraintEnumTypeNormal/** Normal                    */,
                PoleMovementConstraintEnumTypeProject/** Project                   */,
                PoleMovementConstraintEnumTypeInherit/** Inherit                   */,
                PoleMovementConstraintEnumTypeFixStart/** Fix start                 */,
                PoleMovementConstraintEnumTypeFixEnd/** Fix end                   */,
                PoleMovementConstraintEnumTypeStartAndEnd/** Fix start and end         */
            };

            /** Pole movement direction */
            public: enum PoleMoveDirection
            {
                PoleMoveDirectionX/** Along XC direction          */,
                PoleMoveDirectionY/** Along YC direction          */,
                PoleMoveDirectionZ/** Along ZC direction          */
            };

            /** Edge constraint type */
            public: enum EdgeConstraintType
            {
                EdgeConstraintTypeLinked/** Linked, available for end edge only */,
                EdgeConstraintTypeFree/** Free                                */,
                EdgeConstraintTypePerpendicular/** Perpendicular                       */,
                EdgeConstraintTypeIsoU/** Iso u                               */,
                EdgeConstraintTypeIsoV/** Iso v                               */,
                EdgeConstraintTypeLinear/** Linear                              */
            };

            private: MatchEdgeBuilderImpl * m_matchedgebuilder_impl;
            private: friend class  _MatchEdgeBuilderBuilder;
            protected: MatchEdgeBuilder();
            public: ~MatchEdgeBuilder();
            /**Returns  the edge to edit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectNXObject * ObjectToEdit
            (
            );
            /** Loads editing edge related internal data and should be called after selection of edge or face to match to 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void LoadEditEdge
            (
            );
            /**Returns  the face recognition 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FaceRecognitionBuilder * FaceRecognizer
            (
            );
            /**Returns  the synchronous mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CanUseFaceFinder
            (
            );
            /**Sets  the synchronous mode 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetCanUseFaceFinder
            (
                bool canUseFaceFinder /** canusefacefinder */ 
            );
            /**Returns  the target object that the edge is matching to 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::SelectDisplayableObjectList * TargetObjects
            (
            );
            /**Returns  the g0 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsG0Continuity
            (
            );
            /**Sets  the g0 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetG0Continuity
            (
                bool g0Continuity /** g0continuity */ 
            );
            /**Returns  the g1 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsG1Continuity
            (
            );
            /**Sets  the g1 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetG1Continuity
            (
                bool g1Continuity /** g1continuity */ 
            );
            /**Returns  the g2 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsG2Continuity
            (
            );
            /**Sets  the g2 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetG2Continuity
            (
                bool g2Continuity /** g2continuity */ 
            );
            /**Returns  the g3 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsG3Continuity
            (
            );
            /**Sets  the g3 continuity 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetG3Continuity
            (
                bool g3Continuity /** g3continuity */ 
            );
            /**Returns  the start continuity constraint for matched surface 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::Continuity * OppositeEdgeConstraint
            (
            );
            /**Returns  the degree and patches 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::DegreesAndSegmentsOrPatchesBuilder * DegreePatches
            (
            );
            /**Returns  the start edge locked state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsStartEdgeLocked
            (
            );
            /**Sets  the start edge locked state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetStartEdgeLocked
            (
                bool isStartEdgeLocked /** isstartedgelocked */ 
            );
            /**Returns  the end edge locked state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsEndEdgeLocked
            (
            );
            /**Sets  the end edge locked state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetEndEdgeLocked
            (
                bool lockEndEdge /** lockendedge */ 
            );
            /**Returns  the match end to end state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool IsMatchEndToEnd
            (
            );
            /**Sets  the match end to end state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetMatchEndToEnd
            (
                bool isMatchEndToEnd /** ismatchendtoend */ 
            );
            /**Returns  the edge limit 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * EdgeLimit
            (
            );
            /**Returns  the edge offset position 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::OnPathDimensionBuilder * EdgeOffsetPosition
            (
            );
            /**Returns  the pole move direction vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Direction * PoleMoveDirectionVector
            (
            );
            /**Sets  the pole move direction vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPoleMoveDirectionVector
            (
                NXOpen::Direction * poleMoveDirectionVector /** polemovedirectionvector */ 
            );
            /**Returns  the value indicating if start pole is fixed  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsStartPoleFixed
            (
            );
            /**Sets  the value indicating if start pole is fixed  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetStartPoleFixed
            (
                bool fixStartPole /** fixstartpole */ 
            );
            /**Returns  the value indicating if end pole is fixed  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsEndPoleFixed
            (
            );
            /**Sets  the value indicating if end pole is fixed  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetEndPoleFixed
            (
                bool fixEndPole /** fixendpole */ 
            );
            /**Returns  the control pole manager 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::GeometricUtilities::ControlPoleManagerData * ControlPoleManager
            (
            );
            /**Returns  the type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::MatchEdgeBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetType
            (
                NXOpen::Features::MatchEdgeBuilder::Types type /** type */ 
            );
            /** Sets up surface pole editing. This should be called before getting into 
                        pole editing function to prepare necessary settings to start surface pole edit.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetupPoleEditing
            (
            );
            /** Updates surface during edit pole. This function is used only in pole editing stage 
                        and after poles are moved to new positions. This function updates the surface according to
                        the new pole positions.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void EditPoleUpdateSurface
            (
            );
            /**Returns  the poles edit state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: bool IsEditPoleEnabled
            (
            );
            /**Sets  the poles edit state 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetEditPoleEnabled
            (
                bool enable /** enable */ 
            );
            /**Returns  the new copy of match edge surface 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: bool IsCreateCopy
            (
            );
            /**Sets  the new copy of match edge surface 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetCreateCopy
            (
                bool createCopy /** createcopy */ 
            );
            /**Returns  the value indicating type of pole movement constraint 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: NXOpen::Features::MatchEdgeBuilder::PoleMovementConstraintEnumType PoleMovementConstraintType
            (
            );
            /**Sets  the value indicating type of pole movement constraint 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") */
            public: void SetPoleMovementConstraintType
            (
                NXOpen::Features::MatchEdgeBuilder::PoleMovementConstraintEnumType poleMovementConstraint /** polemovementconstraint */ 
            );
            /**Returns  the value indicating type of exact match  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MatchEdgeBuilder::MatchExact MatchExactType
            (
            );
            /**Sets  the value indicating type of exact match  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetMatchExactType
            (
                NXOpen::Features::MatchEdgeBuilder::MatchExact matchExact /** matchexact */ 
            );
            /**Returns  the value indicating the direction of pole movement  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MatchEdgeBuilder::PoleMoveDirection PoleMoveDirectionEnum
            (
            );
            /**Sets  the value indicating the direction of pole movement  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPoleMoveDirectionEnum
            (
                NXOpen::Features::MatchEdgeBuilder::PoleMoveDirection poleMoveDirectionEnum /** polemovedirectionenum */ 
            );
            /**Returns  the value indicating type of the start edge constraint  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MatchEdgeBuilder::EdgeConstraintType StartEdgeConstraint
            (
            );
            /**Sets  the value indicating type of the start edge constraint  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetStartEdgeConstraint
            (
                NXOpen::Features::MatchEdgeBuilder::EdgeConstraintType startEdgeConstraint /** startedgeconstraint */ 
            );
            /**Returns  the value indicating type of the end edge constraint  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::MatchEdgeBuilder::EdgeConstraintType EndEdgeConstraint
            (
            );
            /**Sets  the value indicating type of the end edge constraint  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetEndEdgeConstraint
            (
                NXOpen::Features::MatchEdgeBuilder::EdgeConstraintType endEdgeConstraint /** endedgeconstraint */ 
            );
            /** Resets surface during edit pole. This function resets the surface control poles 
                        to their initial positions. 
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void ResetEditPoles
            (
            );
            /**Returns  the value indicating if the matching is to be performed with blending  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsBlendEnabled
            (
            );
            /**Sets  the value indicating if the matching is to be performed with blending  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetBlendEnabled
            (
                bool isBlendEnabled /** isblendenabled */ 
            );
            /**Returns  the blend 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Blend
            (
            );
            /**Returns  the depth skew 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * DepthSkew
            (
            );
            /**Returns  the tangent direction vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * TangentDirectionVector
            (
            );
            /**Sets  the tangent direction vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetTangentDirectionVector
            (
                NXOpen::Direction * tangentDirectionVector /** tangentdirectionvector */ 
            );
            /**Returns  the partial match 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int PartialMatch
            (
            );
            /**Sets  the partial match 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetPartialMatch
            (
                int partialMatch /** partialmatch */ 
            );
            /**Returns  the value indicating if the selections are to be maintained across the sessions of the command  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsKeepSelected
            (
            );
            /**Sets  the value indicating if the selections are to be maintained across the sessions of the command  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetKeepSelected
            (
                bool isKeepSelected /** iskeepselected */ 
            );
            /**Returns  the tolerance for extracting BSurface from a face 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: double DistanceTolerance
            (
            );
            /**Sets  the tolerance for extracting BSurface from a face 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetDistanceTolerance
            (
                double tolerance /** tolerance */ 
            );
            /** Sets edge and face 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetSelectedEditEdgeAndFace
            (
                NXOpen::Edge * edge /** edge */,
                NXOpen::Face * face /** face */
            );
            /** Update original match surface geometry 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateOriginalMatchSurface
            (
            );
            /**Sets  the target curve projection orientation 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetFlipTargetCurveOrientation
            (
                bool flip /** flip */ 
            );
            /**Returns  the target curve projection orientation 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: bool FlipTargetCurveOrientation
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
