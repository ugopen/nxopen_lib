#ifndef NXOpen_PID_PORTEQUIPMENTBUILDER_HXX_INCLUDED
#define NXOpen_PID_PORTEQUIPMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_PortEquipmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_Port.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PDM_LogicalElementRevision.hxx>
#include <NXOpen/PDM_SheetRevision.hxx>
#include <NXOpen/PID_DataType.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class PortEquipmentBuilder;
    }
    class Builder;
    namespace Diagramming
    {
        class Port;
    }
    class NXObject;
    namespace PID
    {
        class Equipment;
    }
    namespace PID
    {
        class Sheet;
    }
    namespace PID
    {
        class _PortEquipmentBuilderBuilder;
        class PortEquipmentBuilderImpl;
        /**  @brief 
            Builder used to model a piece of PortEquipment.  

         
             <br> To create a new instance of this class, use @link NXOpen::PID::PidManager::CreatePortEquipmentBuilder  NXOpen::PID::PidManager::CreatePortEquipmentBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        SymbolSourceType </td> <td> 
         
        ReuseLibrary </td> </tr> 

        </table>  

         <br>  Created in NX11.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  PortEquipmentBuilder : public NXOpen::Builder
        {
            private: PortEquipmentBuilderImpl * m_portequipmentbuilder_impl;
            private: friend class  _PortEquipmentBuilderBuilder;
            protected: PortEquipmentBuilder();
            public: ~PortEquipmentBuilder();
            /**Returns  the symbol source type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::SymbolSourceOption SymbolSourceType
            (
            );
            /**Sets  the symbol source type 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetSymbolSourceType
            (
                NXOpen::PID::SymbolSourceOption symbolSourceType /** symbolsourcetype */ 
            );
            /**Returns  the symbol ID of this port equipment. It is only applicable when @link PID::PortEquipmentBuilder::SymbolSourceType PID::PortEquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionReuseLibrary PID::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXString SymbolId
            (
            );
            /**Sets  the symbol ID of this port equipment. It is only applicable when @link PID::PortEquipmentBuilder::SymbolSourceType PID::PortEquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionReuseLibrary PID::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetSymbolId
            (
                const NXString & symbolId /** symbolid */ 
            );
            /**Sets  the symbol ID of this port equipment. It is only applicable when @link PID::PortEquipmentBuilder::SymbolSourceType PID::PortEquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionReuseLibrary PID::SymbolSourceOptionReuseLibrary@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetSymbolId
            (
                const char * symbolId /** symbolid */ 
            );
            /**Returns  the current port ID of this port equipment. It works only in edit mode, it's optional and the first port ID stored in the port equipment will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXString PortId
            (
            );
            /**Sets  the current port ID of this port equipment. It works only in edit mode, it's optional and the first port ID stored in the port equipment will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetPortId
            (
                const NXString & portId /** portid */ 
            );
            /**Sets  the current port ID of this port equipment. It works only in edit mode, it's optional and the first port ID stored in the port equipment will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetPortId
            (
                const char * portId /** portid */ 
            );
            /**Returns  the symbol from foundation window. It is only applicable when @link PID::PortEquipmentBuilder::SymbolSourceType PID::PortEquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionExistingSymbol PID::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::Diagramming::Port * ExistingSymbol
            (
            );
            /**Sets  the symbol from foundation window. It is only applicable when @link PID::PortEquipmentBuilder::SymbolSourceType PID::PortEquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionExistingSymbol PID::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetExistingSymbol
            (
                NXOpen::Diagramming::Port * existingSymbol /** existingsymbol */ 
            );
            /**Returns  the owning sheet of this sheet element. Its setting method works only in creation mode. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::Sheet * OwningSheet
            (
            );
            /**Sets  the owning sheet of this sheet element. Its setting method works only in creation mode. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetOwningSheet
            (
                NXOpen::PID::Sheet * owningSheet /** owningsheet */ 
            );
            /**Returns  the option to place a duplicate symbol. It is only applicable when @link PID::PortEquipmentBuilder::SymbolSourceType PID::PortEquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionExistingSymbol PID::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: bool UseExistingID
            (
            );
            /**Sets  the option to place a duplicate symbol. It is only applicable when @link PID::PortEquipmentBuilder::SymbolSourceType PID::PortEquipmentBuilder::SymbolSourceType@endlink  is @link PID::SymbolSourceOptionExistingSymbol PID::SymbolSourceOptionExistingSymbol@endlink .
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetUseExistingID
            (
                bool useExistingID /** useexistingid */ 
            );
            /**Returns  the option to lock the aspect ratio. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: bool LockAspectRatio
            (
            );
            /**Sets  the option to lock the aspect ratio. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetLockAspectRatio
            (
                bool lockAspectRatio /** lockaspectratio */ 
            );
            /**Returns  the scale value. It is only applicable when @link PID::PortEquipmentBuilder::LockAspectRatio PID::PortEquipmentBuilder::LockAspectRatio@endlink  is true.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double Scale
            (
            );
            /**Sets  the scale value. It is only applicable when @link PID::PortEquipmentBuilder::LockAspectRatio PID::PortEquipmentBuilder::LockAspectRatio@endlink  is true.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetScale
            (
                double scale /** scale */ 
            );
            /**Returns  the x scale value. It is only applicable when @link PID::PortEquipmentBuilder::LockAspectRatio PID::PortEquipmentBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double ScaleX
            (
            );
            /**Sets  the x scale value. It is only applicable when @link PID::PortEquipmentBuilder::LockAspectRatio PID::PortEquipmentBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetScaleX
            (
                double scaleX /** scalex */ 
            );
            /**Returns  the y scale value. It is only applicable when @link PID::PortEquipmentBuilder::LockAspectRatio PID::PortEquipmentBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double ScaleY
            (
            );
            /**Sets  the y scale value. It is only applicable when @link PID::PortEquipmentBuilder::LockAspectRatio PID::PortEquipmentBuilder::LockAspectRatio@endlink  is false.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetScaleY
            (
                double scaleY /** scaley */ 
            );
            /**Returns  the tag of this port equipment. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXString Label
            (
            );
            /** Get the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetNode
            (
                NXOpen::PID::Equipment ** equipment /** equipment */ ,
                NXString* nodeId /** nodeid */ 
            );
            /** Set the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetNode
            (
                NXOpen::PID::Equipment * equipment /** equipment */ ,
                const NXString & nodeId /** nodeid */ 
            );
            /** Set the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetNode
            (
                NXOpen::PID::Equipment * equipment /** equipment */ ,
                const char * nodeId /** nodeid */ 
            );
            /**Returns  the X percentage of location relative to the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double RelativePercentX
            (
            );
            /**Sets  the X percentage of location relative to the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetRelativePercentX
            (
                double percentX /** percentx */ 
            );
            /**Returns  the Y percentage of location relative to the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double RelativePercentY
            (
            );
            /**Sets  the Y percentage of location relative to the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetRelativePercentY
            (
                double percentY /** percenty */ 
            );
            /**Returns  the X offset value of location relative to the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double RelativeValueX
            (
            );
            /**Sets  the X offset value of location relative to the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetRelativeValueX
            (
                double valueX /** valuex */ 
            );
            /**Returns  the Y offset value of location relative to the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: double RelativeValueY
            (
            );
            /**Sets  the Y offset value of location relative to the node. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetRelativeValueY
            (
                double valueY /** valuey */ 
            );
            /**Returns  the owner of need attributes group.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::NXObject * NeedAttrOwner
            (
            );
            /** Get the port object of the PortEquipment builder. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::Diagramming::Port * GetPort
            (
            );
            /** Sets the fulfillment data of the symbol. The input symbol should be a 3D one and in the same category with the entity of the builder
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetFulfillment
            (
                const NXString & symbolID /** symbolid */ 
            );
            /** Sets the fulfillment data of the symbol. The input symbol should be a 3D one and in the same category with the entity of the builder
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetFulfillment
            (
                const char * symbolID /** symbolid */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
