#ifndef NXOpen_DIAGRAMMING_TABLES_TABLEBUILDER_HXX_INCLUDED
#define NXOpen_DIAGRAMMING_TABLES_TABLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Diagramming_Tables_TableBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_Annotation.hxx>
#include <NXOpen/Diagramming_RenderingPropertiesBuilder.hxx>
#include <NXOpen/Diagramming_Tables_CellBuilder.hxx>
#include <NXOpen/Diagramming_Tables_CellRangeBuilder.hxx>
#include <NXOpen/Diagramming_Tables_CellSettingsBuilder.hxx>
#include <NXOpen/Diagramming_Tables_ColumnBuilder.hxx>
#include <NXOpen/Diagramming_Tables_ContinuationDataBuilder.hxx>
#include <NXOpen/Diagramming_Tables_RowBuilder.hxx>
#include <NXOpen/Diagramming_Tables_TableSettingsBuilder.hxx>
#include <NXOpen/Diagramming_AnnotationBuilder.hxx>
#include <NXOpen/libnxopencpp_diagramming_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Diagramming
    {
        namespace Tables
        {
            class TableBuilder;
        }
    }
    namespace Diagramming
    {
        class Annotation;
    }
    namespace Diagramming
    {
        class AnnotationBuilder;
    }
    namespace Diagramming
    {
        class RenderingPropertiesBuilder;
    }
    namespace Diagramming
    {
        namespace Tables
        {
            class CellBuilder;
        }
    }
    namespace Diagramming
    {
        namespace Tables
        {
            class CellRangeBuilder;
        }
    }
    namespace Diagramming
    {
        namespace Tables
        {
            class CellSettingsBuilder;
        }
    }
    namespace Diagramming
    {
        namespace Tables
        {
            class ColumnBuilder;
        }
    }
    namespace Diagramming
    {
        namespace Tables
        {
            class ContinuationDataBuilder;
        }
    }
    namespace Diagramming
    {
        namespace Tables
        {
            class RowBuilder;
        }
    }
    namespace Diagramming
    {
        namespace Tables
        {
            class TableSettingsBuilder;
        }
    }
    class NXColor;
    namespace Diagramming
    {
        namespace Tables
        {
            class _TableBuilderBuilder;
            class TableBuilderImpl;
            /**
                    Represents a TableBuilder.
                     <br> To create a new instance of this class, use @link NXOpen::Diagramming::Tables::TableCollection::CreateTableBuilder  NXOpen::Diagramming::Tables::TableCollection::CreateTableBuilder @endlink  <br> 
             <br>  Created in NX10.0.0.  <br>  
            */
            class NXOPENCPP_DIAGRAMMINGEXPORT  TableBuilder : public NXOpen::Diagramming::AnnotationBuilder
            {
                /** Represents the inherit option.
                            
                 <br>  Created in NX11.0.0.  <br>  
                */
                public: enum InheritOption
                {
                    InheritOptionPreferences/** Setting the inherit from preferences option*/,
                    InheritOptionCustomerDefaults/** Setting the inherit from customer defaults option*/,
                    InheritOptionSelection/** Setting the inherit from selection option*/
                };

                private: TableBuilderImpl * m_tablebuilder_impl;
                private: friend class  _TableBuilderBuilder;
                protected: TableBuilder();
                public: ~TableBuilder();
                /**Returns  the default cell border settings. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::Tables::CellSettingsBuilder * CellSettingsBuilder
                (
                );
                /**Returns  the table settings. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::Tables::TableSettingsBuilder * TableSettingsBuilder
                (
                );
                /**Returns  the continuation data. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::Tables::ContinuationDataBuilder * ContinuationDataBuilder
                (
                );
                /**Returns  the bottom border rendering properties. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::RenderingPropertiesBuilder * BottomBorder
                (
                );
                /**Returns  the left border rendering properties. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::RenderingPropertiesBuilder * LeftBorder
                (
                );
                /**Returns  the right border rendering properties. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::RenderingPropertiesBuilder * RightBorder
                (
                );
                /**Returns  the top border rendering properties. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::RenderingPropertiesBuilder * TopBorder
                (
                );
                /**Returns  the initial width of column. 
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: double InitialColumnWidth
                (
                );
                /**Sets  the initial width of column. 
                 <br>  Created in NX11.0.1.  <br>  
                 <br> License requirements : None */
                public: void SetInitialColumnWidth
                (
                    double columnWidth /** columnwidth */ 
                );
                /** Returns the initial number of columns. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetNumberOfColumns
                (
                );
                /** Returns the number of headers. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetNumberOfHeaders
                (
                );
                /** Returns the number of rows. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: int GetNumberOfRows
                (
                );
                /** The method to insert the given number of headers after the given header index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void InsertHeaders
                (
                    int headerIndex /** headerindex */ ,
                    int numHeaders /** numheaders */ 
                );
                /** The method to insert the given number of columns after the given column index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void InsertColumns
                (
                    int columnIndex /** columnindex */ ,
                    int numColumns /** numcolumns */ 
                );
                /** The method to insert the given number of rows after the given row index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void InsertRows
                (
                    int rowIndex /** rowindex */ ,
                    int numRows /** numrows */ 
                );
                /** The method to remove the given number of headers starting with the given header index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void RemoveHeaders
                (
                    int headerIndex /** headerindex */ ,
                    int numHeaders /** numheaders */ 
                );
                /** The method to remove the given number of columns starting with the given column index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void RemoveColumns
                (
                    int columnIndex /** columnindex */ ,
                    int numColumns /** numcolumns */ 
                );
                /** The method to remove the given number of rows starting with the given row index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void RemoveRows
                (
                    int rowIndex /** rowindex */ ,
                    int numRows /** numrows */ 
                );
                /** The method to get the header cell at the given row and column indexes. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::Tables::CellBuilder * GetHeaderCell
                (
                    int rowIndex /** rowindex */ ,
                    int columnIndex /** columnindex */ 
                );
                /** The method to get the cell at the given row and column indexes. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::Tables::CellBuilder * GetCell
                (
                    int rowIndex /** rowindex */ ,
                    int columnIndex /** columnindex */ 
                );
                /** The method to get the header at the given header index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::Tables::CellRangeBuilder * GetHeader
                (
                    int headerIndex /** headerindex */ 
                );
                /** The method to get the column at the given column index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::Tables::ColumnBuilder * GetColumn
                (
                    int columnIndex /** columnindex */ 
                );
                /** The method to get the row at the given row index. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::Tables::RowBuilder * GetRow
                (
                    int rowIndex /** rowindex */ 
                );
                /** The method to get the fill color. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void GetFillColor
                (
                    NXOpen::NXColor ** color /** color */ ,
                    double* opacity /** opacity */ 
                );
                /** The method to set the fill color. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetFillColor
                (
                    NXOpen::NXColor * color /** color */ ,
                    double opacity /** opacity */ 
                );
                /**Returns  the locked flag. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: bool Locked
                (
                );
                /**Sets  the locked flag. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void SetLocked
                (
                    bool locked /** locked */ 
                );
                /** The method to merge the header cells in the given ranges. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void MergeHeaderCells
                (
                    int topRow /** toprow */ ,
                    int leftColumn /** leftcolumn */ ,
                    int bottomRow /** bottomrow */ ,
                    int rightColumn /** rightcolumn */ 
                );
                /** The method to merge the cells in the given ranges. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void MergeCells
                (
                    int topRow /** toprow */ ,
                    int leftColumn /** leftcolumn */ ,
                    int bottomRow /** bottomrow */ ,
                    int rightColumn /** rightcolumn */ 
                );
                /** The method to unmerge the header cell at the given row and column indexes. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void UnMergeHeaderCell
                (
                    int rowIndex /** rowindex */ ,
                    int columnIndex /** columnindex */ 
                );
                /** The method to unmerge the cell at the given row and column indexes. 
                 <br>  Created in NX10.0.0.  <br>  
                 <br> License requirements : None */
                public: void UnMergeCell
                (
                    int rowIndex /** rowindex */ ,
                    int columnIndex /** columnindex */ 
                );
                /** Inherit. 
                 <br>  Created in NX11.0.0.  <br>  
                 <br> License requirements : None */
                public: void Inherit
                (
                    NXOpen::Diagramming::Tables::TableBuilder::InheritOption inheritOption /** inheritoption */ ,
                    NXOpen::Diagramming::Annotation * annotation /** annotation */ 
                );
                /**Returns  the default right border rendering properties. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::RenderingPropertiesBuilder * DefaultRightBorder
                (
                );
                /**Returns  the default bottom border rendering properties. 
                 <br>  Created in NX1872.0.0.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Diagramming::RenderingPropertiesBuilder * DefaultBottomBorder
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
