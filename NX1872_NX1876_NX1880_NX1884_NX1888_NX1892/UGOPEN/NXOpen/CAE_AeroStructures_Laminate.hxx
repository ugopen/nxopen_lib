#ifndef NXOpen_CAE_AEROSTRUCTURES_LAMINATE_HXX_INCLUDED
#define NXOpen_CAE_AEROSTRUCTURES_LAMINATE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_AeroStructures_Laminate.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeneralScalarTable.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace AeroStructures
        {
            class Laminate;
        }
    }
    namespace CAE
    {
        namespace AeroStructures
        {
            class LocalLaminate;
        }
    }
    class GeneralScalarTable;
    class PhysicalMaterial;
    namespace CAE
    {
        namespace AeroStructures
        {
            class LaminateImpl;
            /** Represents a @link NXOpen::CAE::AeroStructures::Laminate NXOpen::CAE::AeroStructures::Laminate@endlink  object.  <br> No support for KF  <br> 
             <br>  Created in NX1847.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Laminate : public NXOpen::TransientObject
            {
                /** Represents the laminate reference location */
                public: enum LamRefLoc
                {
                    LamRefLocTop/** top */ ,
                    LamRefLocMiddle/** middle */ ,
                    LamRefLocBottom/** bottom */ ,
                    LamRefLocSpecify/** specify */ 
                };

                private: LaminateImpl * m_laminate_impl;
                /// \cond NX_NO_DOC 
                public: explicit Laminate(void *ptr);
                /// \endcond 
                /** Frees the object from memory.  After this method is called, it is
                            illegal to use the object. In .NET, this method is automatically
                            called when the object is deleted by the garbage collector. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual ~Laminate();
                /** Create an editable copy of the laminate 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::CAE::AeroStructures::LocalLaminate * CreateLocalLaminateByCopy
                (
                );
                /**Returns  the name of the laminate physical property. 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXString PhysPropName
                (
                );
                /**Returns  the number of plies 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: int NumPlies
                (
                );
                /** Top|Middle|Bottom|Specify 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::CAE::AeroStructures::Laminate::LamRefLoc GetReferencePlane
                (
                );
                /** Fetch the bottom fiber distance 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double GetBottomFiberDistance
                (
                );
                /** Fetch the reference temperature 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double GetReferenceTemperature
                (
                );
                /** Ply Id 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: int GetPlyId
                (
                    int plyIndex /** ply index */ 
                );
                /** Ply thickness 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double GetPlyThickness
                (
                    int plyIndex /** ply index */ 
                );
                /** Ply angle 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double GetPlyAngle
                (
                    int plyIndex /** ply index */ 
                );
                /** Ply material name 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXString GetPlyMaterialName
                (
                    int plyIndex /** ply index */ 
                );
                /** Ply material 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::PhysicalMaterial * GetPlyMaterial
                (
                    int plyIndex /** ply index */ 
                );
                /** If this ply uses a ply material 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: bool IsUsingPlyMaterial
                (
                    int plyIndex /** ply index */ 
                );
                /** Ply Ids 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetPlyIds
                (
                    std::vector<int> & ids /** ids */ 
                );
                /** Ply thicknesses 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetPlyThicknesses
                (
                    std::vector<double> & values /** values */ 
                );
                /** Ply angles 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetPlyAngles
                (
                    std::vector<double> & values /** values */ 
                );
                /** Ply material names 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetPlyMaterialNames
                (
                    std::vector<NXString> & names /** names */ 
                );
                /** Ply materials 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetPlyMaterials
                (
                    std::vector<NXOpen::PhysicalMaterial *> & materials /** materials */ 
                );
                /** If plies use ply materials 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void IsUsingPlyMaterials
                (
                    std::vector<bool> & usingPlyMaterials /** using ply materials */ 
                );
                /** Fetch the laminate angle in radians 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double GetLaminateAngle
                (
                );
                /** Ask if the ply signs are inverted 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: bool IsInverted
                (
                );
                /** Ask if the ply order is reversed 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: bool IsReversed
                (
                );
                /** The A section of the ABD matrix 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetStiffnessA
                (
                );
                /** The B section of the ABD matrix 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetStiffnessB
                (
                );
                /** The D section of the ABD matrix 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetStiffnessD
                (
                );
                /** The ABD matrix 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetABD
                (
                );
                /** The transverse shear matrix 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetTransverseShear
                (
                );
                /**Returns  the total thickness of the composite 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double TotalThickness
                (
                );
                /**Returns  the mass per unit area 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double MassPerUnitArea
                (
                );
                /**Returns  the mass density 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double MassDensity
                (
                );
                /** Write out laminate information 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void PrintLaminateInfo
                (
                    bool plies /** plies */ ,
                    bool props /** props */ ,
                    bool mats /** mats */ 
                );
                /** Obtain stress values per ply per LC 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetStressPerPly
                (
                    bool usePlyCoordinates /** true for ply coordinates, false for laminate coordinates */,
                    const std::vector<double> & opTemp /** operating temperature per loadcase */,
                    const std::vector<double> & nxx /** one value per loadcase */,
                    const std::vector<double> & nyy /** nyy */ ,
                    const std::vector<double> & nxy /** nxy */ ,
                    const std::vector<double> & mxx /** Bending moment */,
                    const std::vector<double> & myy /** myy */ ,
                    const std::vector<double> & mxy /** mxy */ ,
                    NXOpen::GeneralScalarTable ** xxStress /** num_load_cases rows  and num_plies columns */,
                    NXOpen::GeneralScalarTable ** yyStress /** yy stress */ ,
                    NXOpen::GeneralScalarTable ** xyStress /** xy stress */ 
                );
                /** Obtain strain values per ply per LC 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetStrainPerPly
                (
                    bool usePlyCoordinates /** true for ply coordinates, false for laminate coordinates */,
                    const std::vector<double> & opTemp /** operating temperature per loadcase */,
                    const std::vector<double> & nxx /** one value per loadcase */,
                    const std::vector<double> & nyy /** nyy */ ,
                    const std::vector<double> & nxy /** nxy */ ,
                    const std::vector<double> & mxx /** Bending moment */,
                    const std::vector<double> & myy /** myy */ ,
                    const std::vector<double> & mxy /** mxy */ ,
                    NXOpen::GeneralScalarTable ** xxStrain /** num_load_cases rows  and num_plies columns */,
                    NXOpen::GeneralScalarTable ** yyStrain /** yy strain */ ,
                    NXOpen::GeneralScalarTable ** xyStrain /** xy strain */ 
                );
                /** Obtain interlaminar values per ply per LC (stress_yz, stress_zx)
                            
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetInterlaminarShearStress
                (
                    bool usePlyCoordinates /** true for ply coordinates, false for laminate coordinates */,
                    const std::vector<double> & opTemp /** operating temperature per loadcase */,
                    const std::vector<double> & nxx /** one value per loadcase */,
                    const std::vector<double> & nyy /** nyy */ ,
                    const std::vector<double> & nxy /** nxy */ ,
                    const std::vector<double> & mxx /** Bending moment */,
                    const std::vector<double> & myy /** myy */ ,
                    const std::vector<double> & mxy /** mxy */ ,
                    const std::vector<double> & tsx /** Transverse shear force */,
                    const std::vector<double> & tsy /** tsy */ ,
                    NXOpen::GeneralScalarTable ** stressYz /** num_load_cases rows  and num_plies columns */,
                    NXOpen::GeneralScalarTable ** stressZx /** stress zx */ 
                );
                /**Returns  the number of distinct materials used 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: int NumMaterials
                (
                );
                /** The list of material names 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetMaterialNames
                (
                    std::vector<NXString> & materialNames /** material names */ 
                );
                /** The list of orientations used 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetOrientations
                (
                    std::vector<double> & orientations /** orientations */ 
                );
                /** Number of plies per orientation using given material (index) 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetMaterialPlyCount
                (
                    int materialIndex /** material index */ ,
                    std::vector<int> & plies /** plies */ 
                );
                /** Thickness of plies per orientation using given material (index) 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: void GetMaterialThickness
                (
                    int materialIndex /** material index */ ,
                    std::vector<double> & thicknesses /** thicknesses */ 
                );
                /**Returns  the laminate is symmetric 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: bool IsSymmetric
                (
                );
                /**Returns  the laminate is balanced 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: bool IsBalanced
                (
                );
                /** Youngs Modulus 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetYoungsModulus
                (
                );
                /** Bending Youngs Modulus 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetBendingYoungsModulus
                (
                );
                /** Poissons Ratio 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetPoissonsRatio
                (
                );
                /** Shear Modulus 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetShearModulus
                (
                );
                /** Bending Shear Modulus 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double GetBendingShearModulus
                (
                );
                /** Thermal Expansion Coefficient 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetThermalExpansionCoeff
                (
                );
                /** Thermal Conductivity Coefficient 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetThermalConductivityCoeff
                (
                );
                /** Specific Heat 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: double GetSpecificHeat
                (
                );
                /** Mid1 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetMid1
                (
                );
                /** Mid2 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetMid2
                (
                );
                /** Mid3 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetMid3
                (
                );
                /** Mid4 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : sc_aero_environment ("Simcenter AeroStructures Environment"), sc_margin_safety ("Simcenter Margin Of Safety") */
                public: NXOpen::GeneralScalarTable * GetMid4
                (
                );
            }; //lint !e1712 default constructor not defined for class  

        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
