#ifndef NXOpen_EXTERNALFILEREFERENCE_HXX_INCLUDED
#define NXOpen_EXTERNALFILEREFERENCE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ExternalFileReference.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ExternalFileReference;
    class NXObject;
    class ExternalFileReferenceImpl;

    /// \cond NX_NO_DOC 
    /** Represents an external file reference class  <br> Use @link NXOpen::ExternalFileReferenceManager::GetExternalFileReferences NXOpen::ExternalFileReferenceManager::GetExternalFileReferences@endlink  to get instance of this class.  <br> 
     <br>  Created in NX1847.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ExternalFileReference : public NXOpen::TransientObject
    {
        private: ExternalFileReferenceImpl * m_externalfilereference_impl;
        /// \cond NX_NO_DOC 
        public: explicit ExternalFileReference(void *ptr);
        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Free resources associated with the instance. After this method
                is called, it is illegal to use the object.  In .NET, this method
                is automatically called when the object is deleted by the garbage collector
            
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~ExternalFileReference();

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Gets the file spec for the external file
            
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetExternalFileSpec
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Gets the file name for the external file
            
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetExternalFileName
        (
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Gets all the application objects that are referencing this external file reference.
            
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void GetReferencingApplicationObjects
        (
            std::vector<NXOpen::NXObject *> & objects /** objects */ 
        );

        /// \endcond 

        /// \cond NX_NO_DOC 
        /** Gets the time stamp data for the external file in the format: 28-Apr-2001 22:06:15.
                Also evaulates the status of the list of ExternalFileReference objects.
                If the status has not changed then the status is 0.
                Some of the other status codes that can be returned are-
                580165 - Out of date reference
                1020001 - File not found
            
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: NXString GetTimeStampWithStatus
        (
            int* status /** status */ 
        );

        /// \endcond 
    }; //lint !e1712 default constructor not defined for class  


    /// \endcond 
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
