#ifndef NXOpen_FEATURES_SPINECURVEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_SPINECURVEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_SpineCurveBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class SpineCurveBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class SpinePlaneBuilderList;
    }
    class Point;
    namespace Features
    {
        class _SpineCurveBuilderBuilder;
        class SpineCurveBuilderImpl;
        /**
            Represents a @link Features::SpineCurve Features::SpineCurve@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FreeformCurveCollection::CreateSpineCurveBuilder  NXOpen::Features::FreeformCurveCollection::CreateSpineCurveBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Associative </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Closed </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  SpineCurveBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** This enum represents the arc segments types */
            public: enum ArcSegmentsTypes
            {
                ArcSegmentsTypesSimple/** simple */ ,
                ArcSegmentsTypesSmooth/** smooth */ 
            };

            private: SpineCurveBuilderImpl * m_spinecurvebuilder_impl;
            private: friend class  _SpineCurveBuilderBuilder;
            protected: SpineCurveBuilder();
            public: ~SpineCurveBuilder();
            /**Returns  the start point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * StartPoint
            (
            );
            /**Sets  the start point 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStartPoint
            (
                NXOpen::Point * startPoint /** startpoint */ 
            );
            /**Returns  the plane list containing the through planes. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::SpinePlaneBuilderList * ThroughPlanesList
            (
            );
            /**Returns  the flag indicating if starting direction of the curve should be opposite to the first plane normal. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseStartDirection
            (
            );
            /**Sets  the flag indicating if starting direction of the curve should be opposite to the first plane normal. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReverseStartDirection
            (
                bool direction /** direction */ 
            );
            /**Returns  the flag indicating if a closed curve should be created if possible. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Closed
            (
            );
            /**Sets  the flag indicating if a closed curve should be created if possible. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetClosed
            (
                bool closed /** closed */ 
            );
            /**Returns  the flag indicating if an associative Spine Curve (Feature) should be created. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool Associative
            (
            );
            /**Sets  the flag indicating if an associative Spine Curve (Feature) should be created. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetAssociative
            (
                bool associative /** associative */ 
            );
            /**Returns  the option indicating type of shape 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::SpineCurveBuilder::ArcSegmentsTypes ArcSegmentsType
            (
            );
            /**Sets  the option indicating type of shape 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetArcSegmentsType
            (
                NXOpen::Features::SpineCurveBuilder::ArcSegmentsTypes curveOption /** curveoption */ 
            );
            /** Evaluates the curve 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void Evaluate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
