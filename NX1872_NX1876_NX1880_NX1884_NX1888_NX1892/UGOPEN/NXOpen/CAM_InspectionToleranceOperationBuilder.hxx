#ifndef NXOpen_CAM_INSPECTIONTOLERANCEOPERATIONBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONTOLERANCEOPERATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionToleranceOperationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_InspectionMethodBuilder.hxx>
#include <NXOpen/CAM_OperationBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionToleranceOperationBuilder;
    }
    namespace CAM
    {
        class InspectionDatumPlaneFittingModeBuilder;
    }
    namespace CAM
    {
        class InspectionLimitsOfSizeModeBuilder;
    }
    namespace CAM
    {
        class InspectionProfileDispositionModeBuilder;
    }
    namespace CAM
    {
        class InspectionSurfaceProfileModeBuilder;
    }
    namespace CAM
    {
        class OperationBuilder;
    }
    class Direction;
    class SelectNXObject;
    namespace CAM
    {
        class _InspectionToleranceOperationBuilderBuilder;
        class InspectionToleranceOperationBuilderImpl;
        /** this class creates the tolerance operation  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionToleranceOperationBuilder  NXOpen::CAM::InspectionOperationCollection::CreateInspectionToleranceOperationBuilder @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionToleranceOperationBuilder : public NXOpen::CAM::OperationBuilder
        {
            /** Tolerance types */
            public: enum TolType
            {
                TolTypeDistanceBetween/** Distance Between */,
                TolTypeAngleBetween/** Angle Between */,
                TolTypeCoordinateTolerance/** Coordinate */,
                TolTypeDiameter/** Diameter */,
                TolTypeRadius/** Radius */,
                TolTypeWidth/** Width */,
                TolTypeConeAngle/** Angle of Cone */,
                TolTypeDatumDefinition/** Datum Definition */,
                TolTypeFlatness/** Flatness */,
                TolTypeStraightness/** Straightness */,
                TolTypeCircularity/** Circularity */,
                TolTypeCylindricity/** Cylindricity */,
                TolTypeLineProfile/** Profile of Line */,
                TolTypeSurfaceProfile/** Profile of Surface */,
                TolTypeAngularity/** Angularity */,
                TolTypeParallelism/** Parallelism */,
                TolTypePerpendicularity/** Perpendicularity */,
                TolTypePosition/** Position */,
                TolTypeConcentricity/** Concentricity */,
                TolTypeSymmetry/** Symmetry */,
                TolTypeCircularRunout/** Circular Runout */,
                TolTypeTotalRunout/** Total Runout */,
                TolTypeDatumTarget/** datum target */ 
            };

            /** X/Y/Z axis */
            public: enum ParamXYZAxis
            {
                ParamXYZAxisXAxis/** X Axis */,
                ParamXYZAxisYAxis/** Y Axis */,
                ParamXYZAxisZAxis/** Z Axis */,
                ParamXYZAxisMajorAxis/** Major Axis */,
                ParamXYZAxisMinorAxis/** Minor Axis */
            };

            /** Subtypes */
            public: enum ParamSubType
            {
                ParamSubTypeSurface/** Surface */,
                ParamSubTypeAxis/** Axis */
            };

            /** Extent */
            public: enum ParamExtent
            {
                ParamExtentTotal/** Total */,
                ParamExtentUnitAreaLength/** Unit Area Length */
            };

            /** Unit basis extent */
            public: enum UnitBasisExtent
            {
                UnitBasisExtentTotalOnly/** None */,
                UnitBasisExtentLengthOnly/** Length */,
                UnitBasisExtentTotalAndLength/** Total and Length */,
                UnitBasisExtentRectangularArea/** Rectangular Area */,
                UnitBasisExtentTotalAndRectangularArea/** Total and Rectangular Area */,
                UnitBasisExtentCircularArea/** Circular Area */,
                UnitBasisExtentTotalAndCircularArea/** Total and Circular Area */,
                UnitBasisExtentSphericalArea/** Spherical Area */,
                UnitBasisExtentTotalAndSphericalArea/** Total and Spherical Area */,
                UnitBasisExtentSquareArea/** Square Area */,
                UnitBasisExtentTotalAndSquareArea/** Total and Square Area */
            };

            /** Tolerance zone shape */
            public: enum ParamTolZoneShape
            {
                ParamTolZoneShapeNone/** None */,
                ParamTolZoneShapeCylindrical/** Cylindrical */,
                ParamTolZoneShapeCircular/** Circular */,
                ParamTolZoneShapeSpherical/** Spherical */,
                ParamTolZoneShapeRadial/** Radial */,
                ParamTolZoneShapeAngular/** Angular */
            };

            /** Distance Between calculation mode */
            public: enum ParamTolDistbCalcMode
            {
                ParamTolDistbCalcModeAverage/** Average */,
                ParamTolDistbCalcModeMinimum/** Minimum */,
                ParamTolDistbCalcModeMaximum/** Maximum */
            };

            /** Width direction mode */
            public: enum ParamTolWidthDirectionMode
            {
                ParamTolWidthDirectionModeNone/** None */,
                ParamTolWidthDirectionModeLength/** Length */,
                ParamTolWidthDirectionModeWidth/** Width */,
                ParamTolWidthDirectionModeVector/** Vector */
            };

            /** Material Condition modifiers */
            public: enum ParamTolMatModifier
            {
                ParamTolMatModifierNone/** None */,
                ParamTolMatModifierMmc/** Maximum Material Condition */,
                ParamTolMatModifierLmc/** Least Material Condition */,
                ParamTolMatModifierRfs/** Regardless of Feature Size */
            };

            /** Material Condition modifiers */
            public: enum ParamTolMatModifierDup
            {
                ParamTolMatModifierDupNone/** None */,
                ParamTolMatModifierDupMmc/** Maximum Material Condition */,
                ParamTolMatModifierDupLmc/** Least Material Condition */,
                ParamTolMatModifierDupRfs/** Regardless of Feature Size */
            };

            /** Default datum symbols */
            public: enum ParamPriDatum
            {
                ParamPriDatumA/** A */,
                ParamPriDatumB/** B */,
                ParamPriDatumC/** C */
            };

            /** Primary datum material modifiers */
            public: enum ParamPriDatumModifier
            {
                ParamPriDatumModifierNone/** None */,
                ParamPriDatumModifierMmc/** Maximum Material Condition */,
                ParamPriDatumModifierLmc/** Least Material Condition */,
                ParamPriDatumModifierRfs/** Regardless of Feature Size */
            };

            /** Default datum symbols */
            public: enum ParamSecDatum
            {
                ParamSecDatumA/** A */,
                ParamSecDatumB/** B */,
                ParamSecDatumC/** C */
            };

            /** Secondary datum material modifiers */
            public: enum ParamSecDatumModifier
            {
                ParamSecDatumModifierNone/** None */,
                ParamSecDatumModifierMmc/** Maximum Material Condition */,
                ParamSecDatumModifierLmc/** Least Material Condition */,
                ParamSecDatumModifierRfs/** Regardless of Feature Size */
            };

            /** Default datum symbols */
            public: enum ParamTerDatum
            {
                ParamTerDatumA/** A */,
                ParamTerDatumB/** B */,
                ParamTerDatumC/** C */
            };

            /** Tertiary datum material modifiers */
            public: enum ParamTerDatumModifier
            {
                ParamTerDatumModifierNone/** None */,
                ParamTerDatumModifierMmc/** Maximum Material Condition */,
                ParamTerDatumModifierLmc/** Least Material Condition */,
                ParamTerDatumModifierRfs/** Regardless of Feature Size */
            };

            /** PCS or absolute coordinate sysytem */
            public: enum SirVecPCSABS
            {
                SirVecPCSABSRelativetoPCS/** Relative to PCS */,
                SirVecPCSABSAbsolute/** Absolute */
            };

            /** Angle format */
            public: enum AngleFormat
            {
                AngleFormatDecimalDegree/** Decimal Degrees */,
                AngleFormatDegMinSec/** Degrees/Minutes/Seconds */
            };

            /** Tolerance Source */
            public: enum ToleranceSource
            {
                ToleranceSourceUnknown/** Unknown Source */,
                ToleranceSourcePmi/** PMI */,
                ToleranceSourceCheckedGdt/** Checked Gdt */,
                ToleranceSourceGeometry/** Geometry */,
                ToleranceSourceTwoDAnnot/** 2D Annotation */,
                ToleranceSourceUser/** User */
            };

            private: InspectionToleranceOperationBuilderImpl * m_inspectiontoleranceoperationbuilder_impl;
            private: friend class  _InspectionToleranceOperationBuilderBuilder;
            protected: InspectionToleranceOperationBuilder();
            public: ~InspectionToleranceOperationBuilder();
            /**Returns  the tolerance type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::TolType TolOpType
            (
            );
            /**Sets  the tolerance type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetTolOpType
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::TolType tolOpType /** toloptype */ 
            );
            /**Returns  the is composite flag 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsComposite
            (
            );
            /**Sets  the is composite flag 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetComposite
            (
                bool isComposite /** iscomposite */ 
            );
            /**Returns  the PMI selection 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectionPMI
            (
            );
            /**Returns  the string datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringDatumLetter
            (
            );
            /**Sets  the string datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringDatumLetter
            (
                const NXString & stringDatumLetter /** stringdatumletter */ 
            );
            /**Sets  the string datum letter 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringDatumLetter
            (
                const char * stringDatumLetter /** stringdatumletter */ 
            );
            /**Returns  the enum parameter xyzaxis 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamXYZAxis EnumParamXYZAxis
            (
            );
            /**Sets  the enum parameter xyzaxis 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamXYZAxis
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamXYZAxis enumParamXYZAxis /** enumparamxyzaxis */ 
            );
            /**Returns  the enum torus characteristic 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamXYZAxis EnumTorusCharacteristic
            (
            );
            /**Sets  the enum torus characteristic 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumTorusCharacteristic
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamXYZAxis enumTorusCharacteristic /** enumtoruscharacteristic */ 
            );
            /**Returns  the nominal tolerance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleNominal
            (
            );
            /**Sets  the nominal tolerance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleNominal
            (
                double doubleNominal /** doublenominal */ 
            );
            /**Returns  the upper tolerance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleUpper
            (
            );
            /**Sets  the upper tolerance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleUpper
            (
                double doubleUpper /** doubleupper */ 
            );
            /**Returns  the lower tolerance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleLower
            (
            );
            /**Sets  the lower tolerance 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleLower
            (
                double doubleLower /** doublelower */ 
            );
            /**Returns  the enum parameter sub type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSubType EnumParamSubType
            (
            );
            /**Sets  the enum parameter sub type 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamSubType
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSubType enumParamSubType /** enumparamsubtype */ 
            );
            /**Returns  the enum parameter extent 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamExtent EnumParameterExtent
            (
            );
            /**Sets  the enum parameter extent 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParameterExtent
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamExtent enumParameterExtent /** enumparameterextent */ 
            );
            /**Returns  the double parameter extent length 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleParamExtLength
            (
            );
            /**Sets  the double parameter extent length 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamExtLength
            (
                double doubleParamExtLength /** doubleparamextlength */ 
            );
            /**Returns  the double parameter extent area 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleParamExtArea
            (
            );
            /**Sets  the double parameter extent area 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamExtArea
            (
                double doubleParamExtArea /** doubleparamextarea */ 
            );
            /**Returns  the enum parameter tolerance zone shape 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolZoneShape EnumParamTolZoneShape
            (
            );
            /**Sets  the enum parameter tolerance zone shape 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolZoneShape
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolZoneShape enumParamTolZoneShape /** enumparamtolzoneshape */ 
            );
            /**Returns  the enum parameter tolerance distance between calculation mode 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolDistbCalcMode EnumParamTolDistbCalcMode
            (
            );
            /**Sets  the enum parameter tolerance distance between calculation mode 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolDistbCalcMode
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolDistbCalcMode enumParamTolDistbCalcMode /** enumparamtoldistbcalcmode */ 
            );
            /**Returns  the enum parameter tolerance width direction mode 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolWidthDirectionMode EnumParamTolWidthDirectionMode
            (
            );
            /**Sets  the enum parameter tolerance width direction mode 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolWidthDirectionMode
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolWidthDirectionMode enumParamTolWidthDirectionMode /** enumparamtolwidthdirectionmode */ 
            );
            /**Returns  the double parameter tolerance value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleParamTolValue
            (
            );
            /**Sets  the double parameter tolerance value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamTolValue
            (
                double doubleParamTolValue /** doubleparamtolvalue */ 
            );
            /**Returns  the enum parameter tolerance material modifier 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifier EnumParamTolMatModifier
            (
            );
            /**Sets  the enum parameter tolerance material modifier 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolMatModifier
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifier enumParamTolMatModifier /** enumparamtolmatmodifier */ 
            );
            /**Returns  the enum parameter tolerance material modifier dup 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifierDup EnumParamTolMatModifierDup
            (
            );
            /**Sets  the enum parameter tolerance material modifier dup 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolMatModifierDup
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifierDup enumParamTolMatModifierDup /** enumparamtolmatmodifierdup */ 
            );
            /**Returns  the double parameter outer profile 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleParamOuterProfile
            (
            );
            /**Sets  the double parameter outer profile 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamOuterProfile
            (
                double doubleParamOuterProfile /** doubleparamouterprofile */ 
            );
            /**Returns  the string primary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringPriDatum
            (
            );
            /**Sets  the string primary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringPriDatum
            (
                const NXString & stringPriDatum /** stringpridatum */ 
            );
            /**Sets  the string primary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringPriDatum
            (
                const char * stringPriDatum /** stringpridatum */ 
            );
            /**Returns  the enum parameter primary material modifier 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamPriDatumModifier EnumParamPriMatModifier
            (
            );
            /**Sets  the enum parameter primary material modifier 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamPriMatModifier
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamPriDatumModifier enumParamPriMatModifier /** enumparamprimatmodifier */ 
            );
            /**Returns  the string secondary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringSecDatum
            (
            );
            /**Sets  the string secondary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringSecDatum
            (
                const NXString & stringSecDatum /** stringsecdatum */ 
            );
            /**Sets  the string secondary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringSecDatum
            (
                const char * stringSecDatum /** stringsecdatum */ 
            );
            /**Returns  the enum parameter secondary material modifier 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSecDatumModifier EnumParamSecMatModifier
            (
            );
            /**Sets  the enum parameter secondary material modifier 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamSecMatModifier
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSecDatumModifier enumParamSecMatModifier /** enumparamsecmatmodifier */ 
            );
            /**Returns  the string tertiary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringTerDatum
            (
            );
            /**Sets  the string tertiary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTerDatum
            (
                const NXString & stringTerDatum /** stringterdatum */ 
            );
            /**Sets  the string tertiary datum 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringTerDatum
            (
                const char * stringTerDatum /** stringterdatum */ 
            );
            /**Returns  the enum parameter tertiary material modifier 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTerDatumModifier EnumParamTerMatModifier
            (
            );
            /**Sets  the enum parameter tertiary material modifier 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTerMatModifier
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTerDatumModifier enumParamTerMatModifier /** enumparamtermatmodifier */ 
            );
            /**Returns  the enum parameter tolerance zone shape1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolZoneShape EnumParamTolZoneShape1
            (
            );
            /**Sets  the enum parameter tolerance zone shape1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolZoneShape1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolZoneShape enumParamTolZoneShape1 /** enumparamtolzoneshape1 */ 
            );
            /**Returns  the double parameter tolerance value1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleParamTolValue1
            (
            );
            /**Sets  the double parameter tolerance value1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleParamTolValue1
            (
                double doubleParamTolValue1 /** doubleparamtolvalue1 */ 
            );
            /**Returns  the double lower parameter outer profile 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleLowerParamOuterProfile
            (
            );
            /**Sets  the double lower parameter outer profile 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleLowerParamOuterProfile
            (
                double doubleLowerParamOuterProfile /** doublelowerparamouterprofile */ 
            );
            /**Returns  the enum parameter tolerance material modifier1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifier EnumParamTolMatModifier1
            (
            );
            /**Sets  the enum parameter tolerance material modifier1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTolMatModifier1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTolMatModifier enumParamTolMatModifier1 /** enumparamtolmatmodifier1 */ 
            );
            /**Returns  the string primary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringPriDatum1
            (
            );
            /**Sets  the string primary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringPriDatum1
            (
                const NXString & stringPriDatum1 /** stringpridatum1 */ 
            );
            /**Sets  the string primary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringPriDatum1
            (
                const char * stringPriDatum1 /** stringpridatum1 */ 
            );
            /**Returns  the enum parameter primary material modifier1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamPriDatumModifier EnumParamPriMatModifier1
            (
            );
            /**Sets  the enum parameter primary material modifier1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamPriMatModifier1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamPriDatumModifier enumParamPriMatModifier1 /** enumparamprimatmodifier1 */ 
            );
            /**Returns  the string secondary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringSecDatum1
            (
            );
            /**Sets  the string secondary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringSecDatum1
            (
                const NXString & stringSecDatum1 /** stringsecdatum1 */ 
            );
            /**Sets  the string secondary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringSecDatum1
            (
                const char * stringSecDatum1 /** stringsecdatum1 */ 
            );
            /**Returns  the enum parameter secondary material modifier1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSecDatumModifier EnumParamSecMatModifier1
            (
            );
            /**Sets  the enum parameter secondary material modifier1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamSecMatModifier1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamSecDatumModifier enumParamSecMatModifier1 /** enumparamsecmatmodifier1 */ 
            );
            /**Returns  the string tertiary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringTerDatum1
            (
            );
            /**Sets  the string tertiary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTerDatum1
            (
                const NXString & stringTerDatum1 /** stringterdatum1 */ 
            );
            /**Sets  the string tertiary datum1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringTerDatum1
            (
                const char * stringTerDatum1 /** stringterdatum1 */ 
            );
            /**Returns  the enum parameter tertiary material modifier1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTerDatumModifier EnumParamTerMatModifier1
            (
            );
            /**Sets  the enum parameter tertiary material modifier1 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumParamTerMatModifier1
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ParamTerDatumModifier enumParamTerMatModifier1 /** enumparamtermatmodifier1 */ 
            );
            /**Returns  the vector view vec 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * VectorViewVec
            (
            );
            /**Sets  the vector view vec 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVectorViewVec
            (
                NXOpen::Direction * vectorViewVec /** vectorviewvec */ 
            );
            /**Returns  the double view vec i 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleViewVecI
            (
            );
            /**Sets  the double view vec i 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleViewVecI
            (
                double doubleViewVecI /** doubleviewveci */ 
            );
            /**Returns  the double view vec j 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleViewVecJ
            (
            );
            /**Sets  the double view vec j 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleViewVecJ
            (
                double doubleViewVecJ /** doubleviewvecj */ 
            );
            /**Returns  the double view vec k 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleViewVecK
            (
            );
            /**Sets  the double view vec k 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleViewVecK
            (
                double doubleViewVecK /** doubleviewveck */ 
            );
            /**Returns  the selection toleranced feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectionTolerancedFeature
            (
            );
            /**Returns  the string toleranced feat 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringTolerancedFeat
            (
            );
            /**Sets  the string toleranced feat 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTolerancedFeat
            (
                const NXString & stringTolerancedFeat /** stringtolerancedfeat */ 
            );
            /**Sets  the string toleranced feat 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringTolerancedFeat
            (
                const char * stringTolerancedFeat /** stringtolerancedfeat */ 
            );
            /**Returns  the selection origin feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectionOriginFeature
            (
            );
            /**Returns  the string origin feat name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringOriginFeatName
            (
            );
            /**Sets  the string origin feat name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringOriginFeatName
            (
                const NXString & stringOriginFeatName /** stringoriginfeatname */ 
            );
            /**Sets  the string origin feat name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringOriginFeatName
            (
                const char * stringOriginFeatName /** stringoriginfeatname */ 
            );
            /**Returns  the vector direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * VectorDirection
            (
            );
            /**Sets  the vector direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetVectorDirection
            (
                NXOpen::Direction * vectorDirection /** vectordirection */ 
            );
            /**Returns  the is Align Vector Flag
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsAlignVector
            (
            );
            /**Sets  the is Align Vector Flag
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetAlignVector
            (
                bool isAlignVector /** isalignvector */ 
            );
            /**Returns  the enum pcsabs 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::SirVecPCSABS EnumPCSABS
            (
            );
            /**Sets  the enum pcsabs 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetEnumPCSABS
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::SirVecPCSABS enumPCSABS /** enumpcsabs */ 
            );
            /**Returns  the selected vector for tolerance direction 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * DirVec
            (
            );
            /**Sets  the selected vector for tolerance direction 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDirVec
            (
                NXOpen::Direction * dirVec /** dirvec */ 
            );
            /**Returns  the double dir vec i 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleDirVecI
            (
            );
            /**Sets  the double dir vec i 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleDirVecI
            (
                double doubleDirVecI /** doubledirveci */ 
            );
            /**Returns  the double dir vec j 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleDirVecJ
            (
            );
            /**Sets  the double dir vec j 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleDirVecJ
            (
                double doubleDirVecJ /** doubledirvecj */ 
            );
            /**Returns  the double dir vec k 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: double DoubleDirVecK
            (
            );
            /**Sets  the double dir vec k 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDoubleDirVecK
            (
                double doubleDirVecK /** doubledirveck */ 
            );
            /**Returns  the selection feature 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * SelectionFeature
            (
            );
            /**Returns  the string datum feat name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringDatumFeatName
            (
            );
            /**Sets  the string datum feat name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringDatumFeatName
            (
                const NXString & stringDatumFeatName /** stringdatumfeatname */ 
            );
            /**Sets  the string datum feat name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringDatumFeatName
            (
                const char * stringDatumFeatName /** stringdatumfeatname */ 
            );
            /**Returns  the x translation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode XTranslationDOFMode
            (
            );
            /**Sets  the x translation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXTranslationDOFMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode xTranslationDOFMode /** xtranslationdofmode */ 
            );
            /**Returns  the x translation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double XTranslationUpperLimit
            (
            );
            /**Sets  the x translation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXTranslationUpperLimit
            (
                double xTranslationUpperLimit /** xtranslationupperlimit */ 
            );
            /**Returns  the x translation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double XTranslationLowerLimit
            (
            );
            /**Sets  the x translation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXTranslationLowerLimit
            (
                double xTranslationLowerLimit /** xtranslationlowerlimit */ 
            );
            /**Returns  the y translation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode YTranslationDOFMode
            (
            );
            /**Sets  the y translation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYTranslationDOFMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode yTranslationDOFMode /** ytranslationdofmode */ 
            );
            /**Returns  the y translation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double YTranslationUpperLimit
            (
            );
            /**Sets  the y translation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYTranslationUpperLimit
            (
                double yTranslationUpperLimit /** ytranslationupperlimit */ 
            );
            /**Returns  the y translation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double YTranslationLowerLimit
            (
            );
            /**Sets  the y translation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYTranslationLowerLimit
            (
                double yTranslationLowerLimit /** ytranslationlowerlimit */ 
            );
            /**Returns  the z translation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode ZTranslationDOFMode
            (
            );
            /**Sets  the z translation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZTranslationDOFMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode zTranslationDOFMode /** ztranslationdofmode */ 
            );
            /**Returns  the z translation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double ZTranslationUpperLimit
            (
            );
            /**Sets  the z translation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZTranslationUpperLimit
            (
                double zTranslationUpperLimit /** ztranslationupperlimit */ 
            );
            /**Returns  the z translation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double ZTranslationLowerLimit
            (
            );
            /**Sets  the z translation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZTranslationLowerLimit
            (
                double zTranslationLowerLimit /** ztranslationlowerlimit */ 
            );
            /**Returns  the x rotation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode XRotationDOFMode
            (
            );
            /**Sets  the x rotation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXRotationDOFMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode xRotationDOFMode /** xrotationdofmode */ 
            );
            /**Returns  the x rotation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double XRotationUpperLimit
            (
            );
            /**Sets  the x rotation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXRotationUpperLimit
            (
                double xRotationUpperLimit /** xrotationupperlimit */ 
            );
            /**Returns  the x rotation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double XRotationLowerLimit
            (
            );
            /**Sets  the x rotation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetXRotationLowerLimit
            (
                double xRotationLowerLimit /** xrotationlowerlimit */ 
            );
            /**Returns  the y rotation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode YRotationDOFMode
            (
            );
            /**Sets  the y rotation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYRotationDOFMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode yRotationDOFMode /** yrotationdofmode */ 
            );
            /**Returns  the y rotation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double YRotationUpperLimit
            (
            );
            /**Sets  the y rotation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYRotationUpperLimit
            (
                double yRotationUpperLimit /** yrotationupperlimit */ 
            );
            /**Returns  the y rotation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double YRotationLowerLimit
            (
            );
            /**Sets  the y rotation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetYRotationLowerLimit
            (
                double yRotationLowerLimit /** yrotationlowerlimit */ 
            );
            /**Returns  the z rotation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode ZRotationDOFMode
            (
            );
            /**Sets  the z rotation dofmode 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZRotationDOFMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomMode zRotationDOFMode /** zrotationdofmode */ 
            );
            /**Returns  the z rotation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double ZRotationUpperLimit
            (
            );
            /**Sets  the z rotation upper limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZRotationUpperLimit
            (
                double zRotationUpperLimit /** zrotationupperlimit */ 
            );
            /**Returns  the z rotation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : None */
            public: double ZRotationLowerLimit
            (
            );
            /**Sets  the z rotation lower limit 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetZRotationLowerLimit
            (
                double zRotationLowerLimit /** zrotationlowerlimit */ 
            );
            /**Returns  the string tolerance name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringTolName
            (
            );
            /**Sets  the string tolerance name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetStringTolName
            (
                const NXString & stringTolName /** stringtolname */ 
            );
            /**Sets  the string tolerance name 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetStringTolName
            (
                const char * stringTolName /** stringtolname */ 
            );
            /**Returns  the deg/min flag for angle between 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::AngleFormat UseDegMin
            (
            );
            /**Sets  the deg/min flag for angle between 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUseDegMin
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::AngleFormat useDegMinSec /** usedegminsec */ 
            );
            /**Returns  the string for anglb nominal DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NominalDMS
            (
            );
            /**Sets  the string for anglb nominal DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNominalDMS
            (
                const NXString & stringNominalDMS /** stringnominaldms */ 
            );
            /**Sets  the string for anglb nominal DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetNominalDMS
            (
                const char * stringNominalDMS /** stringnominaldms */ 
            );
            /**Returns  the string for anglb upper DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString UpperDMS
            (
            );
            /**Sets  the string for anglb upper DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUpperDMS
            (
                const NXString & stringUpperDMS /** stringupperdms */ 
            );
            /**Sets  the string for anglb upper DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetUpperDMS
            (
                const char * stringUpperDMS /** stringupperdms */ 
            );
            /**Returns  the string for anglb upper DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXString LowerDMS
            (
            );
            /**Sets  the string for anglb upper DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLowerDMS
            (
                const NXString & stringLowerDMS /** stringlowerdms */ 
            );
            /**Sets  the string for anglb upper DMS 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetLowerDMS
            (
                const char * stringLowerDMS /** stringlowerdms */ 
            );
            /** Updates Inspection tolerance parameters based on selected annotation. 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void UpdateParameters
            (
            );
            /**Returns  the Datum Plane Fitting Mode Builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionDatumPlaneFittingModeBuilder * DatumPlaneFittingModeBuilder
            (
            );
            /**Returns  the Limits of Size Mode Builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionLimitsOfSizeModeBuilder * LimitsOfSizeModeBuilder
            (
            );
            /**Returns  the Surface Profile Mode Builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionSurfaceProfileModeBuilder * SurfaceProfileModeBuilder
            (
            );
            /**Returns  the Profile Disposition Mode Builder 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionProfileDispositionModeBuilder * ProfileDispositionModeBuilder
            (
            );
            /**Returns  the Nominal Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource NominalSource
            (
            );
            /**Sets  the Nominal Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetNominalSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource nominalSource /** nominalsource */ 
            );
            /**Returns  the Upper Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource UpperSource
            (
            );
            /**Sets  the Upper Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUpperSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource upperSource /** uppersource */ 
            );
            /**Returns  the Lower Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource LowerSource
            (
            );
            /**Sets  the Lower Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLowerSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource lowerSource /** lowersource */ 
            );
            /**Returns  the GDT Tolerance Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource ToleranceValueSource
            (
            );
            /**Sets  the GDT Tolerance Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetToleranceValueSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource toleranceValueSource /** tolerancevaluesource */ 
            );
            /**Returns  the GDT Composite Lower Tolerance Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource CompositeToleranceValueSource
            (
            );
            /**Sets  the GDT Composite Lower Tolerance Value Source 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCompositeToleranceValueSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource compositeToleranceValueSource /** compositetolerancevaluesource */ 
            );
            /**Returns  the Degree of Freedom Coordinate System Mode 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomCsysMode DofCsysMode
            (
            );
            /**Sets  the Degree of Freedom Coordinate System Mode 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetDofCsysMode
            (
                NXOpen::CAM::InspectionMethodBuilder::ToleranceDegreeOfFreedomCsysMode dofCsysMode /** dofcsysmode */ 
            );
            /**Returns  the unit basis extent type 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::UnitBasisExtent UnitBasisExtentType
            (
            );
            /**Sets  the unit basis extent type 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisExtentType
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::UnitBasisExtent extentType /** extenttype */ 
            );
            /**Returns  the unit basis extent type source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource UnitBasisExtentTypeSource
            (
            );
            /**Sets  the unit basis extent type source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisExtentTypeSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource source /** source */ 
            );
            /**Returns  the unit basis extent length 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: double UnitBasisExtentLength
            (
            );
            /**Sets  the unit basis extent length 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisExtentLength
            (
                double length /** length */ 
            );
            /**Returns  the unit basis extent length source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource UnitBasisExtentLengthSource
            (
            );
            /**Sets  the unit basis extent length source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisExtentLengthSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource source /** source */ 
            );
            /**Returns  the unit basis extent width 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: double UnitBasisExtentWidth
            (
            );
            /**Sets  the unit basis extent width 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisExtentWidth
            (
                double width /** width */ 
            );
            /**Returns  the unit basis extent width source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource UnitBasisExtentWidthSource
            (
            );
            /**Sets  the unit basis extent width source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisExtentWidthSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource source /** source */ 
            );
            /**Returns  the unit basis extent area 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: double UnitBasisExtentDiameter
            (
            );
            /**Sets  the unit basis extent area 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisExtentDiameter
            (
                double area /** area */ 
            );
            /**Returns  the unit basis extent area source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource UnitBasisExtentDiameterSource
            (
            );
            /**Sets  the unit basis extent area source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisExtentDiameterSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource source /** source */ 
            );
            /**Returns  the unit basis tolerance value 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: double UnitBasisTolValue
            (
            );
            /**Sets  the unit basis tolerance value 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisTolValue
            (
                double tolerance /** tolerance */ 
            );
            /**Returns  the unit basis tolerance value source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource UnitBasisTolValueSource
            (
            );
            /**Sets  the unit basis tolerance value source 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetUnitBasisTolValueSource
            (
                NXOpen::CAM::InspectionToleranceOperationBuilder::ToleranceSource source /** source */ 
            );
            /**Returns  the coordinate tolerance PCS label 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXString CoordinateTolerancePCSLabel
            (
            );
            /**Sets  the coordinate tolerance PCS label 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetCoordinateTolerancePCSLabel
            (
                const NXString & cortolPcsLabel /** cortolpcslabel */ 
            );
            /**Sets  the coordinate tolerance PCS label 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetCoordinateTolerancePCSLabel
            (
                const char * cortolPcsLabel /** cortolpcslabel */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
