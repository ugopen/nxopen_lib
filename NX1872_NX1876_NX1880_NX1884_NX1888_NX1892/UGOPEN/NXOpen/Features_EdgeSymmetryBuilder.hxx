#ifndef NXOpen_FEATURES_EDGESYMMETRYBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EDGESYMMETRYBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_EdgeSymmetryBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/GeometricUtilities_Continuity.hxx>
#include <NXOpen/GeometricUtilities_ControlPoleManagerData.hxx>
#include <NXOpen/GeometricUtilities_DegreesAndSegmentsOrPatchesBuilder.hxx>
#include <NXOpen/GeometricUtilities_DepthSkewBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class EdgeSymmetryBuilder;
    }
    class Expression;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace GeometricUtilities
    {
        class Continuity;
    }
    namespace GeometricUtilities
    {
        class ControlPoleManagerData;
    }
    namespace GeometricUtilities
    {
        class DegreesAndSegmentsOrPatchesBuilder;
    }
    namespace GeometricUtilities
    {
        class DepthSkewBuilder;
    }
    class Plane;
    class SelectNXObject;
    namespace Features
    {
        class _EdgeSymmetryBuilderBuilder;
        class EdgeSymmetryBuilderImpl;
        /**
            Represents a @link NXOpen::Features::EdgeSymmetry NXOpen::Features::EdgeSymmetry@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateEdgeSymmetryBuilder  NXOpen::Features::FeatureCollection::CreateEdgeSymmetryBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        IsG0 </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IsG1 </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        MovementDirection </td> <td> 
         
        X </td> </tr> 

        <tr><td> 
         
        MovementMethod </td> <td> 
         
        Project </td> </tr> 

        <tr><td> 
         
        Parameterization.Degree </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        Parameterization.SegmentsOrPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Parameterization.UDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        Parameterization.UPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Parameterization.VDegree </td> <td> 
         
        5 </td> </tr> 

        <tr><td> 
         
        Parameterization.VPatches </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        SymmetryPlaneOption </td> <td> 
         
        XZ </td> </tr> 

        </table>  

         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  EdgeSymmetryBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Symmetry plane options */
            public: enum SymmetryPlaneOptions
            {
                SymmetryPlaneOptionsYZ/** Uses YC-ZC plane as plane of symmetry */,
                SymmetryPlaneOptionsXZ/** Uses XC-ZC plane as plane of symmetry */,
                SymmetryPlaneOptionsXY/** Uses XC-YC plane as plane of symmetry */,
                SymmetryPlaneOptionsArbitrary/** Uses an arbitrary plane as plane of symmetry */
            };

            /** Matching method options */
            public: enum MovementMethods
            {
                MovementMethodsNormal/** Does a normal match */,
                MovementMethodsProject/** Does a match by projecting poles corresponding to target edge of the surface */,
                MovementMethodsWCS/** Does a match by moving poles along a WCS principal axis direction */
            };

            /** Movement directions */
            public: enum MovementDirections
            {
                MovementDirectionsX/** Along XC direction */,
                MovementDirectionsY/** Along YC direction */,
                MovementDirectionsZ/** Along ZC direction */
            };

            private: EdgeSymmetryBuilderImpl * m_edgesymmetrybuilder_impl;
            private: friend class  _EdgeSymmetryBuilderBuilder;
            protected: EdgeSymmetryBuilder();
            public: ~EdgeSymmetryBuilder();
            /**Returns  the object to edit 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * ObjectToEdit
            (
            );
            /**Returns  the symmetry plane option 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EdgeSymmetryBuilder::SymmetryPlaneOptions SymmetryPlaneOption
            (
            );
            /**Sets  the symmetry plane option 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetSymmetryPlaneOption
            (
                NXOpen::Features::EdgeSymmetryBuilder::SymmetryPlaneOptions symmetryPlaneOption /** symmetryplaneoption */ 
            );
            /**Returns  the value indicating offset distance to be used with absolute principal symmetry plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Offset
            (
            );
            /**Returns  the symmetry plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * SymmetryPlane
            (
            );
            /**Sets  the symmetry plane 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetSymmetryPlane
            (
                NXOpen::Plane * symmetryPlane /** symmetryplane */ 
            );
            /**Returns  the surface parameterization 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DegreesAndSegmentsOrPatchesBuilder * Parameterization
            (
            );
            /**Returns  the pole movement method to be used in matching process 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EdgeSymmetryBuilder::MovementMethods MovementMethod
            (
            );
            /**Sets  the pole movement method to be used in matching process 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetMovementMethod
            (
                NXOpen::Features::EdgeSymmetryBuilder::MovementMethods movementMethod /** movementmethod */ 
            );
            /**Returns  the opposite edge continuity 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::Continuity * OppositeEdgeContinuity
            (
            );
            /**Returns  the value indicating if start edge in edge direction is locked 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsStartLocked
            (
            );
            /**Sets  the value indicating if start edge in edge direction is locked 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetStartLocked
            (
                bool isStartLocked /** isstartlocked */ 
            );
            /**Returns  the value indicating if end edge in edge direction is locked 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsEndLocked
            (
            );
            /**Sets  the value indicating if end edge in edge direction is locked 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetEndLocked
            (
                bool isEndLocked /** isendlocked */ 
            );
            /**Returns  the value indicating if poles are to edited manually 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsEditPolesEnabled
            (
            );
            /**Sets  the value indicating if poles are to edited manually 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetEditPolesEnabled
            (
                bool enabled /** enabled */ 
            );
            /**Returns  the pole manager. The pole manager is used to edit the pole manually. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ControlPoleManagerData * PoleManager
            (
            );
            /**Returns  the value indicating if matching to be performed with the blend value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool CanBlend
            (
            );
            /**Sets  the value indicating if matching to be performed with the blend value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetCanBlend
            (
                bool canBlend /** canblend */ 
            );
            /**Returns  the value indicating constraint on the surface poles in the depth direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Blend
            (
            );
            /**Returns  the depth and skew value 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::DepthSkewBuilder * DepthSkew
            (
            );
            /**Returns  the value indicating if G0 continuity is enforced 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsG0
            (
            );
            /**Sets  the value indicating if G0 continuity is enforced 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetG0
            (
                bool isG0 /** isg0 */ 
            );
            /**Returns  the value indicating if G1 continuity is enforced 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsG1
            (
            );
            /**Sets  the value indicating if G1 continuity is enforced 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetG1
            (
                bool isG1 /** isg1 */ 
            );
            /**Returns  the value indicating if G2 continuity is enforced 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsG2
            (
            );
            /**Sets  the value indicating if G2 continuity is enforced 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetG2
            (
                bool isG2 /** isg2 */ 
            );
            /**Returns  the value indicating if G3 continuity is enforced 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsG3
            (
            );
            /**Sets  the value indicating if G3 continuity is enforced 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetG3
            (
                bool isG3 /** isg3 */ 
            );
            /** Resets the pole editing to initial matched state 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void ResetPoleEditing
            (
            );
            /**Returns  whether the operation is applied to a copy of the face there by creating new body 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool CanCreateNewBody
            (
            );
            /**Sets  whether the operation is applied to a copy of the face there by creating new body 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetCanCreateNewBody
            (
                bool newBody /** newbody */ 
            );
            /** Updates surface using @link NXOpen::GeometricUtilities::ControlPoleManagerData NXOpen::GeometricUtilities::ControlPoleManagerData@endlink . 
                        Use this method to update the surface when poles are edited using pole manager.
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void UpdateSurfacePostPoleEditing
            (
            );
            /**Returns  the value indicating the direction of pole movement during match 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EdgeSymmetryBuilder::MovementDirections MovementDirection
            (
            );
            /**Sets  the value indicating the direction of pole movement during match 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") OR studio_free_form ("STUDIO FREE FORM") */
            public: void SetMovementDirection
            (
                NXOpen::Features::EdgeSymmetryBuilder::MovementDirections movementDirection /** movementdirection */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
