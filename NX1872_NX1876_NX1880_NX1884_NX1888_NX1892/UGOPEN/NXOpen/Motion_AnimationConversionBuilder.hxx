#ifndef NXOpen_MOTION_ANIMATIONCONVERSIONBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_ANIMATIONCONVERSIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_AnimationConversionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class AnimationConversionBuilder;
    }
    namespace Assemblies
    {
        class Component;
    }
    class Builder;
    class NXObject;
    namespace Motion
    {
        class _AnimationConversionBuilderBuilder;
        class AnimationConversionBuilderImpl;
        /** Represents a @link NXOpen::Motion::AnimationConversionBuilder NXOpen::Motion::AnimationConversionBuilder@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Motion::MotionSession::CreateAnimationConversionBuilder  NXOpen::Motion::MotionSession::CreateAnimationConversionBuilder @endlink  <br> 
         <br>  Created in NX12.0.2.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  AnimationConversionBuilder : public NXOpen::Builder
        {
            private: AnimationConversionBuilderImpl * m_animationconversionbuilder_impl;
            private: friend class  _AnimationConversionBuilderBuilder;
            protected: AnimationConversionBuilder();
            public: ~AnimationConversionBuilder();
            /** Makes all physics items active. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void ActiveAll
            (
            );
            /** Makes all physics items inactive. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void DeactiveAll
            (
            );
            /** Gets all physics items and their status. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void GetPhysics
            (
                std::vector<NXOpen::NXObject *> & physicsProto /** physicsproto */ ,
                std::vector<NXOpen::Assemblies::Component *> & partOccurrence /** partoccurrence */ ,
                std::vector<bool> & active /** active */ 
            );
            /** Makes part of the physics items active or inactive. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void UpdateStatus
            (
                const std::vector<NXOpen::NXObject *> & physicsProto /** physicsproto */ ,
                const std::vector<NXOpen::Assemblies::Component *> & partOccurrence /** partoccurrence */ ,
                bool active /** active */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
