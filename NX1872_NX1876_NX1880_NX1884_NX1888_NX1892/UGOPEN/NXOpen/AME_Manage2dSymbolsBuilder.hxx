#ifndef NXOpen_AME_MANAGE2DSYMBOLSBUILDER_HXX_INCLUDED
#define NXOpen_AME_MANAGE2DSYMBOLSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_Manage2dSymbolsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEBaseBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class Manage2dSymbolsBuilder;
    }
    namespace AME
    {
        class AMEBaseBuilder;
    }
    namespace AME
    {
        class SelectINodeObjectList;
    }
    class TaggedObject;
    namespace AME
    {
        class _Manage2dSymbolsBuilderBuilder;
        class Manage2dSymbolsBuilderImpl;
        /** Represents a Manage2dSymbolsBuilder class Builder   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateManage2dSymbolsBuilder  NXOpen::AME::AMEManager::CreateManage2dSymbolsBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        SymbolRepresentationType </td> <td> 
         
        MultiLineSchematic </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  Manage2dSymbolsBuilder : public NXOpen::AME::AMEBaseBuilder
        {
            /** Representation type of symbol */
            public: enum SymbolRepresentationTypes
            {
                SymbolRepresentationTypesMultiLineSchematic/** multi line schematic */ ,
                SymbolRepresentationTypesSingleLineSchematic/** single line schematic */ ,
                SymbolRepresentationTypesBusTopologyDiagram/** bus topology diagram */ ,
                SymbolRepresentationTypesPowerSupplyTopologyDiagram/** power supply topology diagram */ ,
                SymbolRepresentationTypesGenericSchematic/** generic schematic */ 
            };

            private: Manage2dSymbolsBuilderImpl * m_manage2dsymbolsbuilder_impl;
            private: friend class  _Manage2dSymbolsBuilderBuilder;
            protected: Manage2dSymbolsBuilder();
            public: ~Manage2dSymbolsBuilder();
            /**Returns  the Target node selection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::SelectINodeObjectList * SelectedObjects
            (
            );
            /**Returns  the representation type which could be of @link NXOpen::AME::Manage2dSymbolsBuilder::SymbolRepresentationTypes NXOpen::AME::Manage2dSymbolsBuilder::SymbolRepresentationTypes@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::Manage2dSymbolsBuilder::SymbolRepresentationTypes SymbolRepresentationType
            (
            );
            /**Sets  the representation type which could be of @link NXOpen::AME::Manage2dSymbolsBuilder::SymbolRepresentationTypes NXOpen::AME::Manage2dSymbolsBuilder::SymbolRepresentationTypes@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetSymbolRepresentationType
            (
                NXOpen::AME::Manage2dSymbolsBuilder::SymbolRepresentationTypes symbolRepresentationType /** symbolrepresentationtype */ 
            );
            /** Get assigned symbols 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXString> GetAssignedSymbols
            (
                NXOpen::TaggedObject * objTag /** objtag */ 
            );
            /** Sets the given 2d symbol as default on the input object  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDefaultSymbol
            (
                const NXString & symbolNameString /** symbolnamestring */ 
            );
            /** Sets the given 2d symbol as default on the input object  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetDefaultSymbol
            (
                const char * symbolNameString /** symbolnamestring */ 
            );
            /** Gets the default 2d symbol assigned to the input object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString GetDefaultSymbol
            (
                NXOpen::TaggedObject * inputObject /** inputobject */ 
            );
            /** Reset the default 2d symbol from the associated @link NXOpen::AME::ProductDefinition NXOpen::AME::ProductDefinition@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ResetDefaultSymbol
            (
            );
            /** Adds the given 2d symbol to the assigned symbols list 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddAssignedSymbol
            (
                const NXString & symbolNameString /** symbolnamestring */ 
            );
            /** Adds the given 2d symbol to the assigned symbols list 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void AddAssignedSymbol
            (
                const char * symbolNameString /** symbolnamestring */ 
            );
            /** Removes the given 2d symbol from the assigned symbols list 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemoveAssignedSymbol
            (
                const NXString & symbolNameString /** symbolnamestring */ 
            );
            /** Removes the given 2d symbol from the assigned symbols list 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void RemoveAssignedSymbol
            (
                const char * symbolNameString /** symbolnamestring */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
