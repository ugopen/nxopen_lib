#ifndef NXOpen_CAM_INSPECTIONSAVETOLAYERBUILDER_HXX_INCLUDED
#define NXOpen_CAM_INSPECTIONSAVETOLAYERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_InspectionSaveToLayerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class InspectionSaveToLayerBuilder;
    }
    class Builder;
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class _InspectionSaveToLayerBuilderBuilder;
        class InspectionSaveToLayerBuilderImpl;
        /** Inspection Analyze Save to Layer dialog builder  <br> To create a new instance of this class, use @link NXOpen::CAM::InspectionOperationCollection::CreateInspectionSaveToLayerBuilderSel  NXOpen::CAM::InspectionOperationCollection::CreateInspectionSaveToLayerBuilderSel @endlink  <br> 
         <br>  Created in NX9.0.1.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  InspectionSaveToLayerBuilder : public NXOpen::Builder
        {
            private: InspectionSaveToLayerBuilderImpl * m_inspectionsavetolayerbuilder_impl;
            private: friend class  _InspectionSaveToLayerBuilderBuilder;
            protected: InspectionSaveToLayerBuilder();
            public: ~InspectionSaveToLayerBuilder();
            /**Returns  the destination layer 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: int Layer
            (
            );
            /**Sets  the destination layer 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetLayer
            (
                int layer /** layer */ 
            );
            /**Returns  the destination group name 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: NXString GroupName
            (
            );
            /**Sets  the destination group name 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetGroupName
            (
                const NXString & groupName /** groupname */ 
            );
            /**Sets  the destination group name 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            void SetGroupName
            (
                const char * groupName /** groupname */ 
            );
            /** Returns the selected operations.  @return  Selected operation tags 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAM::CAMObject *> GetSelectedOps
            (
            );
            /** Sets the selected operations. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SetSelectedOps
            (
                const std::vector<NXOpen::CAM::CAMObject *> & selectedOps /** Selected operation tags */
            );
            /** Saves measured data to a layer. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : insp_programming ("INSPECTION PROGRAMMING") */
            public: void SaveToLayer
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
