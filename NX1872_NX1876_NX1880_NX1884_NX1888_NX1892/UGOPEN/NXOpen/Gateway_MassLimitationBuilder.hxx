#ifndef NXOpen_GATEWAY_MASSLIMITATIONBUILDER_HXX_INCLUDED
#define NXOpen_GATEWAY_MASSLIMITATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Gateway_MassLimitationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_gateway_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Gateway
    {
        class MassLimitationBuilder;
    }
    class Builder;
    class Expression;
    class SelectNXObjectList;
    namespace Gateway
    {
        class _MassLimitationBuilderBuilder;
        class MassLimitationBuilderImpl;
        /** Represents a @link NXOpen::Gateway::MassLimitationBuilder NXOpen::Gateway::MassLimitationBuilder@endlink  builder.  <br> To create a new instance of this class, use @link NXOpen::Gateway::MassCollection::CreateLimitationBuilder  NXOpen::Gateway::MassCollection::CreateLimitationBuilder @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class NXOPENCPP_GATEWAYEXPORT  MassLimitationBuilder : public NXOpen::Builder
        {
            private: MassLimitationBuilderImpl * m_masslimitationbuilder_impl;
            private: friend class  _MassLimitationBuilderBuilder;
            protected: MassLimitationBuilder();
            public: ~MassLimitationBuilder();

            /// \cond NX_NO_DOC 
            /**Returns  the objects 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * Objects
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum mass status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumMassStatus
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum mass status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumMassStatus
            (
                bool massLimitStatus /** masslimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum mass 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumMass
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum mass status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumMassStatus
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum mass status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumMassStatus
            (
                bool massLimitStatus /** masslimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum mass 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumMass
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum density status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumDensityStatus
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum density status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumDensityStatus
            (
                bool densityLimitStatus /** densitylimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum density 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumDensity
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum density status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumDensityStatus
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum density status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumDensityStatus
            (
                bool densityLimitStatus /** densitylimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum density 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumDensity
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum volume status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumVolumeStatus
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum volume status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumVolumeStatus
            (
                bool volumeLimitStatus /** volumelimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum volume 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumVolume
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum volume status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumVolumeStatus
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum volume status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumVolumeStatus
            (
                bool volumeLimitStatus /** volumelimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum volume 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumVolume
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum area status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumAreaStatus
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum area status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumAreaStatus
            (
                bool areaLimitStatus /** arealimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum area 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumArea
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum area status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumAreaStatus
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum area status 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumAreaStatus
            (
                bool areaLimitStatus /** arealimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum area 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumArea
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum gravity center status X 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumGravityCenterStatusX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum gravity center status X 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumGravityCenterStatusX
            (
                bool gravityCenterLimitStatus /** gravitycenterlimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum gravity center X
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumGravityCenterX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum gravity center status X 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumGravityCenterStatusX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum gravity center status X 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumGravityCenterStatusX
            (
                bool gravityCenterLimitStatus /** gravitycenterlimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum gravity center X
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumGravityCenterX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum gravity center status Y 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumGravityCenterStatusY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum gravity center status Y 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumGravityCenterStatusY
            (
                bool gravityCenterLimitStatus /** gravitycenterlimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum gravity center Y
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumGravityCenterY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum gravity center status Y 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumGravityCenterStatusY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum gravity center status Y 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumGravityCenterStatusY
            (
                bool gravityCenterLimitStatus /** gravitycenterlimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum gravity center Y
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumGravityCenterY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum gravity center status Z
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumGravityCenterStatusZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum gravity center status Z
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumGravityCenterStatusZ
            (
                bool gravityCenterLimitStatus /** gravitycenterlimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum gravity center Z
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumGravityCenterZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum gravity center status Z
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumGravityCenterStatusZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum gravity center status Z
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumGravityCenterStatusZ
            (
                bool gravityCenterLimitStatus /** gravitycenterlimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum gravity center Z
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumGravityCenterZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum moments inertia status XX
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumMomentsInertiaStatusXX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum moments inertia status XX
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumMomentsInertiaStatusXX
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum moments inertia XX
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumMomentsInertiaXX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum moments inertia status XX
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumMomentsInertiaStatusXX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum moments inertia status XX
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumMomentsInertiaStatusXX
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum moments inertia XX
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumMomentsInertiaXX
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum moments inertia status YY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumMomentsInertiaStatusYY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum moments inertia status YY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumMomentsInertiaStatusYY
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum moments inertia YY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumMomentsInertiaYY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum moments inertia status YY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumMomentsInertiaStatusYY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum moments inertia status YY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumMomentsInertiaStatusYY
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum moments inertia YY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumMomentsInertiaYY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum moments inertia status ZZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumMomentsInertiaStatusZZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum moments inertia status ZZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumMomentsInertiaStatusZZ
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum moments inertia ZZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumMomentsInertiaZZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum moments inertia status ZZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumMomentsInertiaStatusZZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum moments inertia status ZZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumMomentsInertiaStatusZZ
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum moments inertia ZZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumMomentsInertiaZZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum products inertia status XY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumProductsInertiaStatusXY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum products inertia status XY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumProductsInertiaStatusXY
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum products inertia XY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumProductsInertiaXY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum products inertia status XY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumProductsInertiaStatusXY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum products inertia status XY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumProductsInertiaStatusXY
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum product inertia XY
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumProductsInertiaXY
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum products inertia status XZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumProductsInertiaStatusXZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum products inertia status XZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumProductsInertiaStatusXZ
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum products inertia XZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumProductsInertiaXZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum products inertia status XZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumProductsInertiaStatusXZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum products inertia status XZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumProductsInertiaStatusXZ
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum product inertia XZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumProductsInertiaXZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum products inertia status YZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MaximumProductsInertiaStatusYZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the maximum products inertia status YZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMaximumProductsInertiaStatusYZ
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the maximum products inertia YZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MaximumProductsInertiaYZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum products inertia status YZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: bool MinimumProductsInertiaStatusYZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the minimum products inertia status YZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMinimumProductsInertiaStatusYZ
            (
                bool inertiaLimitStatus /** inertialimitstatus */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Returns  the minimum product inertia YZ
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MinimumProductsInertiaYZ
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the limitation of the root part or user selected object, and save to the builder . 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void GetLimitationValues
            (
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
