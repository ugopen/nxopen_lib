#ifndef NXOpen_CAE_ELEMENTTYPES_HXX_INCLUDED
#define NXOpen_CAE_ELEMENTTYPES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ElementTypes.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ElementTypes;
    }
    namespace CAE
    {
        class ElementTypesImpl;
        /** Represents an @link NXOpen::CAE::ElementTypes NXOpen::CAE::ElementTypes@endlink  class. 
              <br> No Creator this holds an enum  shared by other classes  <br> 
         <br>  Created in NX6.0.3.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ElementTypes
        {
            /** Specifies different CAE Element Order types  */
            public: enum Order
            {
                OrderUndefined/** Undefined  */,
                OrderLinear/** Linear  */,
                OrderParabolic/** Parabolic  */,
                OrderMixed/** Mixed  */
            };

            /** Specifies different CAE Element Shape types  */
            public: enum Shape
            {
                ShapeUndefined/** Undefined  */ = -1,
                ShapePoint/** Point  */,
                ShapeLine/** Line  */,
                ShapeTri/** Triagular  */,
                ShapeQuad/** Quadralateral  */,
                ShapeTet/** Tetrahedral  */,
                ShapePyr/** Pyramid  */,
                ShapeWed/** Wedge  */,
                ShapeHex/** Hexagonal  */,
                ShapeSpider/** Spider  */,
                ShapeMatrix/** Matrix  */,
                ShapeRspline/** Rspline */
            };

            /** Specifies different CAE Element Dimension types  */
            public: enum Dimension
            {
                DimensionUndefined/** Undefined  */ = -1,
                DimensionPoint/** Point (0D)  */,
                DimensionBeam/** Beam (1D)  */,
                DimensionShell/** Shell (2D)  */,
                DimensionSolid/** Solid (3D)  */,
                DimensionMatrix/** Matrix  */,
                DimensionAll/** All  */
            };

            /** Specifies different CAE Element Neutral types  */
            public: enum NeutralType
            {
                NeutralTypeUndefined/** Undefined element neutral type  */,
                NeutralTypeConcentratedMass/** Concentrated mass element  */,
                NeutralTypeBar/** Bar element  */,
                NeutralTypeBeam/** Beam element  */,
                NeutralTypeRod/** Rod element  */,
                NeutralTypeRigidLink/** Rigid link element  */,
                NeutralTypeSpring/** Spring element  */,
                NeutralTypeMass/** Distributed mass element  */,
                NeutralTypeHeatBody/** Heat body element  */,
                NeutralTypeQuad4/** Quadrilateral element with 4 nodes  */,
                NeutralTypeTri3/** Triangular element with 3 nodes  */,
                NeutralTypeQuad8/** Quadrilateral element with 8 nodes  */,
                NeutralTypeTri6/** Triangular element with 6 nodes  */,
                NeutralTypeTet4/** Tetrahedral element with 4 nodes  */,
                NeutralTypeTet10/** Tetrahedral element with 10 nodes  */,
                NeutralTypeContact1d/** 1D contact element between 2 bodies  */,
                NeutralTypeHex8/** Hexahedral element with 8 nodes  */,
                NeutralTypeHex20/** Hexahedral element with 20 nodes  */,
                NeutralTypeWed6/** Wedge element with 6 nodes  */,
                NeutralTypeWed15/** Wedge element with 15 nodes  */,
                NeutralTypeContact2d/** 2D contact element between 2 faces  */,
                NeutralTypeWeld/** weld element  */,
                NeutralTypeEdgeFaceContact/** Edge to face connection element  */,
                NeutralTypeMeshMatingFree/** Not an element type but useful as mesh mating free connection  */,
                NeutralTypeMeshMatingGlue/** Not an element type but useful as mesh mating glue connection  */,
                NeutralTypeRigidBody3/** RBE3 element with 1 core node (first node) and multiple leg nodes  */,
                NeutralTypePyramid5/** Pyramid element with 5 nodes  */,
                NeutralTypePyramid9/** Pyramid element with 9 nodes  */,
                NeutralTypePyramid13/** Pyramid element with 13 nodes  */,
                NeutralTypeNodeGround1d/** 1D node to ground elements with 1 node  */,
                NeutralTypePlotElement1d/** 1D plot element with 2 nodes  */,
                NeutralTypeMass1d/** 1D mass element with 2 nodes  */,
                NeutralTypePyramidMixedOrder/** Pyramid element mixed order  */,
                NeutralTypeTETMixedOrder/** Tetrahedral element mixed order  */,
                NeutralTypeBearing1d/** 1D bearing element  */,
                NeutralTypeHEXCohesive8/** Cohesive element with 8 nodes  */,
                NeutralTypeHEXCohesive20/** Cohesive element with 20 nodes  */,
                NeutralTypeWEDCohesive6/** Cohesive element with 6 nodes  */,
                NeutralTypeWEDCohesive15/** Cohesive element with 15 nodes  */,
                NeutralTypeMultipointConstraint/** Multipoint constraint element with 1 core node (first node) and multiple leg nodes  */,
                NeutralTypeMatrix/** Matrix element with nodes and/or scalar points  */,
                NeutralTypeJoint1d/** Joint element  */,
                NeutralTypeRspline/** Rspline element  */
            };

            private: ElementTypesImpl * m_elementtypes_impl;
            public: ~ElementTypes();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
