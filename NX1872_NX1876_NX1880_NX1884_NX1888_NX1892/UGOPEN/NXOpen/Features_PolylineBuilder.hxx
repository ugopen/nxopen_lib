#ifndef NXOpen_FEATURES_POLYLINEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_POLYLINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_PolylineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_GeometricConstraintDataManager.hxx>
#include <NXOpen/GeometricUtilities_TransformerData.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class PolylineBuilder;
    }
    class CoordinateSystem;
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class GeometricConstraintDataManager;
    }
    namespace GeometricUtilities
    {
        class TransformerData;
    }
    class NXObject;
    class Plane;
    namespace Features
    {
        class _PolylineBuilderBuilder;
        class PolylineBuilderImpl;
        /** Polyline builder class.  <br> To create a new instance of this class, use @link NXOpen::Features::FreeformCurveCollection::CreatePolylineBuilder  NXOpen::Features::FreeformCurveCollection::CreatePolylineBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        DrawingPlaneOption </td> <td> 
         
        View </td> </tr> 

        <tr><td> 
         
        MovementMethod </td> <td> 
         
        View </td> </tr> 

        <tr><td> 
         
        WCSOption </td> <td> 
         
        X </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  PolylineBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** Drawing plane options */
            public: enum DrawingPlaneOptions
            {
                DrawingPlaneOptionsView/** View plane */,
                DrawingPlaneOptionsXY/** XY plane */,
                DrawingPlaneOptionsYZ/** YZ plane */,
                DrawingPlaneOptionsXZ/** XZ plane */,
                DrawingPlaneOptionsGeneral/** General plane */
            };

            /** Points movement types */
            public: enum MovementMethodType
            {
                MovementMethodTypeWCS/** Movement along WCS principal axis or plane */,
                MovementMethodTypeView/** Movement in view plane */,
                MovementMethodTypeVector/** Movement along arbitrary direction */,
                MovementMethodTypePlane/** Movement in arbitrary plane */,
                MovementMethodTypeSegment/** Movement along a segment of the polyline */
            };

            /** WCS principal axis or plane types */
            public: enum WCSOptionType
            {
                WCSOptionTypeX/** Along X axis */,
                WCSOptionTypeY/** Along Y axis */,
                WCSOptionTypeZ/** Along Z axis */,
                WCSOptionTypeYZ/** In YZ plane */,
                WCSOptionTypeXZ/** In XZ plane */,
                WCSOptionTypeXY/** In XY plane */
            };

            private: PolylineBuilderImpl * m_polylinebuilder_impl;
            private: friend class  _PolylineBuilderBuilder;
            protected: PolylineBuilder();
            public: ~PolylineBuilder();
            /**Returns  the periodicity 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsPeriodic
            (
            );
            /**Sets  the periodicity 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetPeriodic
            (
                bool periodicity /** periodicity */ 
            );
            /**Returns  a drawing plane option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::PolylineBuilder::DrawingPlaneOptions DrawingPlaneOption
            (
            );
            /**Sets  a drawing plane option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetDrawingPlaneOption
            (
                NXOpen::Features::PolylineBuilder::DrawingPlaneOptions planeOption /** planeoption */ 
            );
            /**Returns  the drawing plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * DrawingPlane
            (
            );
            /**Sets  the drawing plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetDrawingPlane
            (
                NXOpen::Plane * drawingPlane /** drawingplane */ 
            );
            /**Returns  the movement method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::PolylineBuilder::MovementMethodType MovementMethod
            (
            );
            /**Sets  the movement method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetMovementMethod
            (
                NXOpen::Features::PolylineBuilder::MovementMethodType movementMethod /** movementmethod */ 
            );
            /**Returns  the WCS option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::PolylineBuilder::WCSOptionType WCSOption
            (
            );
            /**Sets  the WCS option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetWCSOption
            (
                NXOpen::Features::PolylineBuilder::WCSOptionType wcsOption /** wcsoption */ 
            );
            /**Returns  the transformation tool. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::TransformerData * Transformer
            (
            );
            /**Returns  the movement vector 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * MovementVector
            (
            );
            /**Sets  the movement vector 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetMovementVector
            (
                NXOpen::Direction * movementVector /** movementvector */ 
            );
            /**Returns  the movement plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Plane * MovementPlane
            (
            );
            /**Sets  the movement plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetMovementPlane
            (
                NXOpen::Plane * movementPlane /** movementplane */ 
            );
            /**Returns  the constraint manager 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::GeometricConstraintDataManager * ConstraintManager
            (
            );
            /** Sets a non-parametric polyline for editing 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void EditPolyline
            (
                NXOpen::NXObject * polyline /** polyline */ 
            );
            /** Inserts a point in the middle of a segment 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void InsertPoint
            (
                int afterIndex /** Index of a point after which to insert new point */
            );
            /** Evaluates the polyline 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void Evaluate
            (
            );
            /**Returns  the flag indicating if polyline has plane constraint 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool HasPlaneConstraint
            (
            );
            /**Sets  the flag indicating if polyline has plane constraint 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetHasPlaneConstraint
            (
                bool hasConstraint /** hasconstraint */ 
            );
            /**Returns  the coordinate system defining plane constraint 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * ConstraintPlane
            (
            );
            /**Sets  the coordinate system defining plane constraint 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetConstraintPlane
            (
                NXOpen::CoordinateSystem * coordinateSystem /** coordinatesystem */ 
            );
            /** Updates polyline based on constraint plane 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void UpdateOnConstraintPlane
            (
            );
            /**Returns  the flag indicating if WCS like tool should be deployed when a point or pole handle is selected 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CanUseOrientationTool
            (
            );
            /**Sets  the flag indicating if WCS like tool should be deployed when a point or pole handle is selected 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : features_modeling ("FEATURES MODELING") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCanUseOrientationTool
            (
                bool useOrientationTool /** useorientationtool */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
