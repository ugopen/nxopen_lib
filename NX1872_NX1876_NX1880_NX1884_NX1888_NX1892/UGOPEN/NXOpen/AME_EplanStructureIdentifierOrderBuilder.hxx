#ifndef NXOpen_AME_EPLANSTRUCTUREIDENTIFIERORDERBUILDER_HXX_INCLUDED
#define NXOpen_AME_EPLANSTRUCTUREIDENTIFIERORDERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_EplanStructureIdentifierOrderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class EplanStructureIdentifierOrderBuilder;
    }
    class Builder;
    namespace AME
    {
        class _EplanStructureIdentifierOrderBuilderBuilder;
        class EplanStructureIdentifierOrderBuilderImpl;
        /**Represents a Eplan Structure identifier order Builder  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateEplanStructureIdentifierOrderBuilder  NXOpen::AME::AMEManager::CreateEplanStructureIdentifierOrderBuilder @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  EplanStructureIdentifierOrderBuilder : public NXOpen::Builder
        {
            private: EplanStructureIdentifierOrderBuilderImpl * m_eplanstructureidentifierorderbuilder_impl;
            private: friend class  _EplanStructureIdentifierOrderBuilderBuilder;
            protected: EplanStructureIdentifierOrderBuilder();
            public: ~EplanStructureIdentifierOrderBuilder();
            /** The structure order index for function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXString> GetFunctionIdentifierOrder
            (
            );
            /** The structure order index for function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFunctionIdentifierOrder
            (
                std::vector<NXString> & rowStrings /** rowstrings */ 
            );
            /** The structure order index for location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXString> GetLocationIdentifierOrder
            (
            );
            /** The structure order index for location 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetLocationIdentifierOrder
            (
                std::vector<NXString> & rowStrings /** rowstrings */ 
            );
            /** The structure order index for functional assignment 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXString> GetFunctionalAssignmentIdentifierOrder
            (
            );
            /** The structure order index for functional assignment 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFunctionalAssignmentIdentifierOrder
            (
                std::vector<NXString> & rowStrings /** rowstrings */ 
            );
            /** The structure order index for installation site 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXString> GetInstallationSiteIdentifierOrder
            (
            );
            /** The structure order index for installation site 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetInstallationSiteIdentifierOrder
            (
                std::vector<NXString> & rowStrings /** rowstrings */ 
            );
            /** Update structure identifier order. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateStructureIdentifierOrder
            (
            );
            /** The structure order index for document type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXString> GetDocumentTypeIdentifierOrder
            (
            );
            /** The structure order index for document type 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetDocumentTypeIdentifierOrder
            (
                std::vector<NXString> & rowStrings /** rowstrings */ 
            );
            /** The structure order index for user-defined structure 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXString> GetUserDefinedStructureIdentifierOrder
            (
            );
            /** The structure order index for user-defined structure 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetUserDefinedStructureIdentifierOrder
            (
                std::vector<NXString> & rowStrings /** rowstrings */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
