#ifndef NXOpen_ANNOTATIONS_HOLETABLESETTINGSFORMATBUILDER_HXX_INCLUDED
#define NXOpen_ANNOTATIONS_HOLETABLESETTINGSFORMATBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Annotations_HoleTableSettingsFormatBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_annotations_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Annotations
    {
        class HoleTableSettingsFormatBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace Annotations
    {
        class _HoleTableSettingsFormatBuilderBuilder;
        class HoleTableSettingsFormatBuilderImpl;
        /** Represents a @link NXOpen::Annotations::HoleTableSettingsFormatBuilder NXOpen::Annotations::HoleTableSettingsFormatBuilder@endlink  
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_ANNOTATIONSEXPORT  HoleTableSettingsFormatBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /** Represents Show Columns options */
            public: enum ShowColumnsType
            {
                ShowColumnsTypeXy/** X and Y */,
                ShowColumnsTypeXyz/** X, Y and Z */,
                ShowColumnsTypeAll/** All */
            };

            /** Represents Size Format options */
            public: enum SizeFormatType
            {
                SizeFormatTypeDisplayInSummaryRows/** Display in Summary Rows */,
                SizeFormatTypeDisplayInColumn/** Display in Column */
            };

            /** Represents Deleted Holes Display options */
            public: enum DeletedHolesDisplayType
            {
                DeletedHolesDisplayTypeStrikethrough/** Strikethrough */,
                DeletedHolesDisplayTypeHideText/** HideText */,
                DeletedHolesDisplayTypeRemove/** Remove */
            };

            /** Represents Depth Measurement Datum options */
            public: enum DepthMeasurementDatumType
            {
                DepthMeasurementDatumTypeTopBottomFace/** top bottom face */ ,
                DepthMeasurementDatumTypeBaseFace/** base face */ ,
                DepthMeasurementDatumTypeStepFace/** step face */ 
            };

            private: HoleTableSettingsFormatBuilderImpl * m_holetablesettingsformatbuilder_impl;
            private: friend class  _HoleTableSettingsFormatBuilderBuilder;
            protected: HoleTableSettingsFormatBuilder();
            public: ~HoleTableSettingsFormatBuilder();
            /**Returns  the show columns 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HoleTableSettingsFormatBuilder::ShowColumnsType ShowColumns
            (
            );
            /**Sets  the show columns 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowColumns
            (
                NXOpen::Annotations::HoleTableSettingsFormatBuilder::ShowColumnsType showColumns /** showcolumns */ 
            );
            /**Returns  the size format 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HoleTableSettingsFormatBuilder::SizeFormatType SizeFormat
            (
            );
            /**Sets  the size format 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSizeFormat
            (
                NXOpen::Annotations::HoleTableSettingsFormatBuilder::SizeFormatType sizeFormat /** sizeformat */ 
            );
            /**Returns  the merge cells with same size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool MergeCellsWithSameSize
            (
            );
            /**Sets  the merge cells with same size 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMergeCellsWithSameSize
            (
                bool mergeCellsWithSameSize /** mergecellswithsamesize */ 
            );
            /**Returns  the display all text in upper case 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayAllTextInUpperCase
            (
            );
            /**Sets  the display all text in upper case 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayAllTextInUpperCase
            (
                bool displayAllTextInUpperCase /** displayalltextinuppercase */ 
            );
            /**Returns  the report tap hole size for threaded holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReportTapHoleSizeForThreadedHoles
            (
            );
            /**Sets  the report tap hole size for threaded holes 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetReportTapHoleSizeForThreadedHoles
            (
                bool reportTapHoleSizeForThreadedHoles /** reporttapholesizeforthreadedholes */ 
            );
            /**Returns  the decimal places 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int DecimalPlaces
            (
            );
            /**Sets  the decimal places 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDecimalPlaces
            (
                int decimalPlaces /** decimalplaces */ 
            );
            /**Returns  the deleted holes display 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HoleTableSettingsFormatBuilder::DeletedHolesDisplayType DeletedHolesDisplay
            (
            );
            /**Sets  the deleted holes display 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDeletedHolesDisplay
            (
                NXOpen::Annotations::HoleTableSettingsFormatBuilder::DeletedHolesDisplayType deletedHolesDisplay /** deletedholesdisplay */ 
            );
            /**Returns  the depth measurement datum 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Annotations::HoleTableSettingsFormatBuilder::DepthMeasurementDatumType DepthMeasurementDatum
            (
            );
            /**Sets  the depth measurement datum 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDepthMeasurementDatum
            (
                NXOpen::Annotations::HoleTableSettingsFormatBuilder::DepthMeasurementDatumType depthMeasurementDatum /** depthmeasurementdatum */ 
            );
            /**Returns  the display part and body name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayPartBodyName
            (
            );
            /**Sets  the display part and body name 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayPartBodyName
            (
                bool displayPartBodyName /** displaypartbodyname */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
