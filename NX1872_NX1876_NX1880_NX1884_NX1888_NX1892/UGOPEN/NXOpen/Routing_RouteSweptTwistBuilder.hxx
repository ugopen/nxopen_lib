#ifndef NXOpen_ROUTING_ROUTESWEPTTWISTBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_ROUTESWEPTTWISTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_RouteSweptTwistBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_OnPathDimWithValueBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class RouteSweptTwistBuilder;
    }
    class Builder;
    class Curve;
    namespace GeometricUtilities
    {
        class OnPathDimWithValueBuilder;
    }
    class Point;
    class SelectNXObject;
    class TaggedObjectList;
    namespace Routing
    {
        class _RouteSweptTwistBuilderBuilder;
        class RouteSweptTwistBuilderImpl;
        /**  <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateRouteSweptTwistBuilder  NXOpen::Routing::RouteManager::CreateRouteSweptTwistBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  RouteSweptTwistBuilder : public NXOpen::Builder
        {
            private: RouteSweptTwistBuilderImpl * m_routeswepttwistbuilder_impl;
            private: friend class  _RouteSweptTwistBuilderBuilder;
            protected: RouteSweptTwistBuilder();
            public: ~RouteSweptTwistBuilder();
            /**Returns  the stock 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::SelectNXObject * Stock
            (
            );
            /**Returns  the twist point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Point * TwistPoint
            (
            );
            /**Sets  the twist point 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void SetTwistPoint
            (
                NXOpen::Point * twistPoint /** twistpoint */ 
            );
            /**Returns  the twist point list 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::TaggedObjectList * TwistPointList
            (
            );
            /** Creates a new spine point  @return  OnPathDimWithValueBuilder Object 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::GeometricUtilities::OnPathDimWithValueBuilder * CreateSpinePoint
            (
            );
            /** Creates a new spine 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void CreateSpine
            (
            );
            /**Returns  the spine 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: NXOpen::Curve * Spine
            (
            );
            /** The twist data i.e locations and angles 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_harness ("Routing Harness") */
            public: void AskExistingTwistData
            (
                std::vector<double> & locations /** Number of locations */,
                std::vector<double> & angles /** Number of angles */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
