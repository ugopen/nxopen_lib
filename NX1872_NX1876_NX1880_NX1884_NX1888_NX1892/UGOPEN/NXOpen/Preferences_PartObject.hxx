#ifndef NXOpen_PREFERENCES_PARTOBJECT_HXX_INCLUDED
#define NXOpen_PREFERENCES_PARTOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_PartObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Preferences_ViewVisualizationSpecialEffects.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class PartObject;
    }
    namespace Preferences
    {
        class PartPreferences;
    }
    namespace Preferences
    {
        class PartObjectImpl;
        /** Represents the set of object preferences applicable to entire part. All the preferences available at 
            UG GUI for object can be set by using this class except work layer. Work Layer should be set by using 
            @link NXOpen::Layer::LayerManager NXOpen::Layer::LayerManager@endlink  class which holds a work layer property.  <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::PartPreferences  NXOpen::Preferences::PartPreferences @endlink  <br> 
         <br>  Created in NX3.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  PartObject
        {
            /** Describes whether color of object is not changed or it is default color or it is defined by user */
            public: enum ColorSelection
            {
                ColorSelectionNoChange/** No Change */,
                ColorSelectionDefaultColor/** Default Color */,
                ColorSelectionColor/** User Defined Color */
            };

            /** Describes all available Types for object selection */
            public: enum ObjectType
            {
                ObjectTypeGeneral/** Default Type Value */,
                ObjectTypeLine/** Line */,
                ObjectTypeArc/** Arc */,
                ObjectTypeConic/** Conic */,
                ObjectTypeSpline/** Spline */,
                ObjectTypeSolidbody/** Solid Body */,
                ObjectTypeSheetbody/** Sheet Body */,
                ObjectTypeDatum/** Datum */,
                ObjectTypePoint/** Point */,
                ObjectTypeCoordinateSystem/** Coordinate System */,
                ObjectTypeAllButDefault/** All But Default */,
                ObjectTypeDatumCsys/** Datum CSYS Feature */,
                ObjectTypeTraceline/** Traceline */,
                ObjectTypeInfiniteLine/** Infinite Line */,
                ObjectTypePointCloud/** Point Cloud */
            };

            /** Represents the available types for font */
            public: enum LineFontType
            {
                LineFontTypePartDefault/** Default Value from Part*/ = 1,
                LineFontTypeSolid/** Solid */,
                LineFontTypeDashed/** Dashed */,
                LineFontTypePhantom/** Phantom */,
                LineFontTypeCenterline/** Centerline */,
                LineFontTypeDotted/** Dotted */,
                LineFontTypeLongDashed/** Long Dashed */,
                LineFontTypeDottedDashed/** Dotted Dashed */
            };

            /** Describes the available types for width */
            public: enum WidthType
            {
                WidthTypePartDefault/** Default Value from Part */ = 1,
                WidthTypeThinWidth/** Thin Width */,
                WidthTypeNormalWidth/** Normal Width */,
                WidthTypeThickWidth/** Thick Width */,
                WidthTypeWidthOne/** width one */ ,
                WidthTypeWidthTwo/** width two */ ,
                WidthTypeWidthThree/** width three */ ,
                WidthTypeWidthFour/** width four */ ,
                WidthTypeWidthFive/** width five */ ,
                WidthTypeWidthSix/** width six */ ,
                WidthTypeWidthSeven/** width seven */ ,
                WidthTypeWidthEight/** width eight */ ,
                WidthTypeWidthNine/** width nine */ 
            };

            private: PartObjectImpl * m_partobject_impl;
            private: NXOpen::Preferences::PartPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PartObject(NXOpen::Preferences::PartPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~PartObject();
            /** Returns the current color value for specified type. 
                    The equivalent RGB values can be found by calling 
                    @link ConvertColorNumberToRGBValue ConvertColorNumberToRGBValue@endlink 

                    Red Component is ((((216 - color_number) % 36)/6)* 51)
                    Green component is (((216 - color_number)/36) * 51)
                    Blue is (((216 - color_number) % 6)* 51). 
                    So for example if returned color value is 47 then 
                    Red is ((((216 - 47) % 36)/6)* 51) = (((169 % 36)/6)* 51) = ((25/6)* 51) = 4*51 = 204
                    Green is (((216 - 47)/36) * 51) = ((169/36) * 51) = 4*51 = 204
                    Blue is (((216 - 47) % 6)* 51) = ((169 % 6)* 51) = 1*51 = 51
                     @return   
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int GetColor
            (
                NXOpen::Preferences::PartObject::ObjectType type /** type */ 
            );
            /** Sets the color. For Default color pass -2 as color value and for no change pass -1. 
                    For other color calculate the color in RGB format.  
                    If you pass R value of Red component G value of Green and B value of Blue the color will be:
                    color = (((255-R)/51)*6 + ((255-G)/51)*36 + ((255-B)/51)*1) + 1 ;
                    Where R G and B values are between 0 and 255 . So for Green (0,255,0)we will pass
                    color = (((255-0)/51)*6 + ((255-255)/51)*36 + ((255-0)/51)*1) + 1 = 30+0+5+1 = 36
                    The equivalent color number value can be found by calling 
                    @link ConvertRGBValueToColorNumber ConvertRGBValueToColorNumber@endlink 
                    
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetColor
            (
                NXOpen::Preferences::PartObject::ObjectType type /** type */ ,
                int color /** Specified Color */
            );
            /** Returns the current line font for specified object type  @return   
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartObject::LineFontType GetLineFont
            (
                NXOpen::Preferences::PartObject::ObjectType type /** type */ 
            );
            /** Sets line font for specified object type 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLineFont
            (
                NXOpen::Preferences::PartObject::ObjectType type /** type */ ,
                NXOpen::Preferences::PartObject::LineFontType lineFont /** line font */ 
            );
            /** Returns the current width for specified object type  @return   
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::PartObject::WidthType GetWidth
            (
                NXOpen::Preferences::PartObject::ObjectType type /** type */ 
            );
            /** Sets width for specified object type  
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWidth
            (
                NXOpen::Preferences::PartObject::ObjectType type /** type */ ,
                NXOpen::Preferences::PartObject::WidthType width /** width */ 
            );
            /**Returns  the partially shaded flag for Solid and Sheets 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool PartiallyShaded
            (
            );
            /**Sets  the partially shaded flag for Solid and Sheets 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPartiallyShaded
            (
                bool partiallyShaded /** partially shaded */ 
            );
            /**Returns  the face analysis flag for Solid and Sheets 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: bool FaceAnalysis
            (
            );
            /**Sets  the face analysis flag for Solid and Sheets 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFaceAnalysis
            (
                bool faceAnalysis /** face analysis */ 
            );
            /**Returns  the translucency value 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int Translucency
            (
            );
            /**Sets  the translucency value 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTranslucency
            (
                int translucency /** translucency */ 
            );
            /** Converts color number to RGB constituents. The color number passed should be between 1 to 216  @return  Equivalent RGB constituents 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::ViewVisualizationSpecialEffects::ColorRGB ConvertColorNumberToRGBValue
            (
                int colorNumber /** Color value*/
            );
            /** Converts RGB color constituents to color number. The Red, Green and Blue color constituents
                    should be between 0 to 255.  @return  Equivalent color value 
             <br>  Created in NX3.0.0.  <br>  
             <br> License requirements : None */
            public: int ConvertRGBValueToColorNumber
            (
                const NXOpen::Preferences::ViewVisualizationSpecialEffects::ColorRGB & fogColorRgbValue /** fog color rgb value */ 
            );
            /** Gets line width map that is used to convert legacy line widths to
                        new line widths.

                        Following widths are considered as legacy line widths.
                        @link Preferences::PartObject::WidthTypeThinWidth Preferences::PartObject::WidthTypeThinWidth@endlink 
                        @link Preferences::PartObject::WidthTypeNormalWidth Preferences::PartObject::WidthTypeNormalWidth@endlink 
                        @link Preferences::PartObject::WidthTypeThickWidth Preferences::PartObject::WidthTypeThickWidth@endlink 

                        New line widths contain corresponding line widths for above three
                        legacy line widths respectively. New line widths start at
                        @link Preferences::PartObject::WidthTypeWidthOne Preferences::PartObject::WidthTypeWidthOne@endlink .
                      
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetLegacyLineWidthMap
            (
                std::vector<NXOpen::Preferences::PartObject::WidthType> & newLineWidths /** 
                                Array of 3 new widths each corresponding to a legacy width.
                                First element corresponds to Thin width
                                Second element corresponds to Normal width
                                Third element corresponds to Thick width. */
            );
            /** Sets line width map that is used to convert legacy line widths to
                        new line widths.

                        See @link Preferences::PartObject::GetLegacyLineWidthMap Preferences::PartObject::GetLegacyLineWidthMap@endlink  
                        
                        The new line widths used to map legacy line width are in logical order; 
                        i.e.; @link Preferences::PartObject::WidthTypeThinWidth Preferences::PartObject::WidthTypeThinWidth@endlink 
                        maps to a smaller width value compared to 
                        @link Preferences::PartObject::WidthTypeNormalWidth Preferences::PartObject::WidthTypeNormalWidth@endlink  and
                        so on. Otherwise, the legacy line width map will be rejected.
                      
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetLegacyLineWidthMap
            (
                const std::vector<NXOpen::Preferences::PartObject::WidthType> & newLineWidths /** 
                                Array of 3 new widths each corresponding to a legacy width.
                                First element corresponds to Thin width
                                Second element corresponds to Normal width
                                Third element corresponds to Thick width. */
            );
            /** Migrates line width attributes stored in the part file to 
                        corresponding new line widths. The migration is performed
                        based on the legacy line width map stored in the part file.

                        See @link Preferences::PartObject::GetLegacyLineWidthMap Preferences::PartObject::GetLegacyLineWidthMap@endlink  
                        
                        Line widths of various displayable objects such as solids,
                        wireframe, drawing views etc. will be updated to new line widths.
                        Display is regenerated if necessary to reflect the changes.
                        A displayable object, that already has new line width assigned to
                        it, is not affected.
                       @return  At least one legacy line width 
                                                         attribute has been migrated. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool MigrateLegacyLineWidths
            (
            );
            /**Returns  the point symbol for Point 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: int PointSymbol
            (
            );
            /**Sets  the point symbol for Point 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPointSymbol
            (
                int pointSymbol /** pointsymbol */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
