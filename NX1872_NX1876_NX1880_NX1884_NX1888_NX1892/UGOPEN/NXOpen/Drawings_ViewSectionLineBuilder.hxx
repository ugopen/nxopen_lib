#ifndef NXOpen_DRAWINGS_VIEWSECTIONLINEBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWSECTIONLINEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewSectionLineBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/LineColorFontWidthBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewSectionLineBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class LineColorFontWidthBuilder;
    class NXObject;
    class SelectTaggedObject;
    namespace Drawings
    {
        class _ViewSectionLineBuilderBuilder;
        class ViewSectionLineBuilderImpl;
        /** 
             Represents a @link NXOpen::Drawings::ViewSectionLineBuilder NXOpen::Drawings::ViewSectionLineBuilder@endlink 
            
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewSectionLineBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            /**specifies the show section line options*/
            public: enum ShowSectionLineType
            {
                ShowSectionLineTypeWithSectionView/** with section view */ ,
                ShowSectionLineTypeWithoutSectionView/** without section view */ 
            };

            /**specifies the section line symbol display */
            public: enum DisplayType
            {
                DisplayTypeArrowsAwayfromLine/** arrows awayfrom line */ ,
                DisplayTypeArrowstowardsLine/** arrowstowards line */ ,
                DisplayTypeThickEndsArrowstowardsLine/** thick ends arrowstowards line */ ,
                DisplayTypeThickEndsArrowsAwayfromLine/** thick ends arrows awayfrom line */ 
            };

            /** specifies the section line arrowhead style */
            public: enum StyleType
            {
                StyleTypeOpen/** open */ ,
                StyleTypeClosed/** closed */ ,
                StyleTypeFilled/** filled */ 
            };

            /** specifies the label location for ISO128 section lines. */
            public: enum LocationType
            {
                LocationTypeOnArrow/** on arrow */ ,
                LocationTypeOnEnd/** on end */ 
            };

            private: ViewSectionLineBuilderImpl * m_viewsectionlinebuilder_impl;
            private: friend class  _ViewSectionLineBuilderBuilder;
            protected: ViewSectionLineBuilder();
            public: ~ViewSectionLineBuilder();
            /**Returns  the value to show section line with or without view
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewSectionLineBuilder::ShowSectionLineType ShowSectionLine
            (
            );
            /**Sets  the value to show section line with or without view
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetShowSectionLine
            (
                NXOpen::Drawings::ViewSectionLineBuilder::ShowSectionLineType showSectionLine /** showsectionline */ 
            );
            /**Returns  the section line symbol display 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewSectionLineBuilder::DisplayType TypeStandard
            (
            );
            /**Sets  the section line symbol display 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTypeStandard
            (
                NXOpen::Drawings::ViewSectionLineBuilder::DisplayType typeStandard /** typestandard */ 
            );
            /**Returns  the line color font width 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * LineColorFontWidth
            (
            );
            /**Returns  the section line arrowhead style 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewSectionLineBuilder::StyleType Style
            (
            );
            /**Sets  the section line arrowhead style 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetStyle
            (
                NXOpen::Drawings::ViewSectionLineBuilder::StyleType style /** style */ 
            );
            /**Returns  the arrowhead length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowheadLength
            (
            );
            /**Sets  the arrowhead length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowheadLength
            (
                double arrowheadLength /** arrowheadlength */ 
            );
            /**Returns  the included angle for the arrowhead 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowheadAngle
            (
            );
            /**Sets  the included angle for the arrowhead 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowheadAngle
            (
                double arrowheadAngle /** arrowheadangle */ 
            );
            /**Returns  the arrow length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowLength
            (
            );
            /**Sets  the arrow length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowLength
            (
                double arrowLength /** arrowlength */ 
            );
            /**Returns  the border to arrow distance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double BorderToArrowDistance
            (
            );
            /**Sets  the border to arrow distance 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBorderToArrowDistance
            (
                double borderToArrowDistance /** bordertoarrowdistance */ 
            );
            /**Returns  the stub length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double Overhang
            (
            );
            /**Sets  the stub length 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetOverhang
            (
                double overhang /** overhang */ 
            );
            /**Returns  the use line length in case of ESKD section line 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseLineLength
            (
            );
            /**Sets  the use line length in case of ESKD section line 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUseLineLength
            (
                bool uselineLength /** uselinelength */ 
            );
            /**Returns  the length of the end of the ESKD section line 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double LineLength
            (
            );
            /**Sets  the length of the end of the ESKD section line 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLineLength
            (
                double lineLength /** linelength */ 
            );
            /**Returns  the display 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool Display
            (
            );
            /**Sets  the display 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplay
            (
                bool display /** display */ 
            );
            /**Returns  the label location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewSectionLineBuilder::LocationType LabelLocation
            (
            );
            /**Sets  the label location 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetLabelLocation
            (
                NXOpen::Drawings::ViewSectionLineBuilder::LocationType labelLocation /** labellocation */ 
            );
            /**Returns  the display letters on bends 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayLettersOnBends
            (
            );
            /**Sets  the display letters on bends 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayLettersOnBends
            (
                bool displayLettersOnBends /** displaylettersonbends */ 
            );
            /**Returns  the display rotation letter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplayRotationLetter
            (
            );
            /**Sets  the display rotation letter 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplayRotationLetter
            (
                bool displayRotationLetter /** displayrotationletter */ 
            );
            /**Returns  the selected objected should be note type only which is the desired location of the rotation point of the section line specified 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObject * SelectRotationLetter
            (
            );
            /**Returns  the use offset 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseOffset
            (
            );
            /**Sets  the use offset 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetUseOffset
            (
                bool useOffset /** useoffset */ 
            );
            /**Returns  the gap 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double Gap
            (
            );
            /**Sets  the gap 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetGap
            (
                double gap /** gap */ 
            );
            /** Inherit Settings From Selected Objects 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void InheritSettingsFromSelectedObjects
            (
                NXOpen::NXObject * selectedObject /** The selected annotation or table or view instance object. 
                                                                               NULL is not allowed. */
            );
            /** Inherit Settings From Customer Default 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void InheritSettingsFromCustomerDefault
            (
            );
            /** Inherit Settings From Preference 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void InheritSettingsFromPreferences
            (
            );
            /**Returns  the section line bend and end segment width factor 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: double BendAndEndSegmentWidthFactor
            (
            );
            /**Sets  the section line bend and end segment width factor 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBendAndEndSegmentWidthFactor
            (
                double bendAndEndSegmentWidthFactor /** bendandendsegmentwidthfactor */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
