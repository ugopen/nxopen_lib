#ifndef NXOpen_ROUTING_CONTROLPOINTCOLLECTION_HXX_INCLUDED
#define NXOpen_ROUTING_CONTROLPOINTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_ControlPointCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class ControlPointCollection;
    }
    namespace Routing
    {
        class RouteManager;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    class IBaseCurve;
    class Point;
    namespace Routing
    {
        class IRoutePosition;
    }
    namespace Routing
    {
        class Port;
    }
    class TaggedObject;
    namespace Routing
    {
        class ControlPointCollectionImpl;
        /** @brief  Represents a collection of @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  objects.  

         

            Iterating this collection only returns live uncondemned objects contained in the owning part
            of the collection. Note that @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  is a smart object and many smart objects are condemned as they 
            only exist to support other objects and are not displayed. <br> To obtain an instance of this class, refer to @link NXOpen::Routing::RouteManager  NXOpen::Routing::RouteManager @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  ControlPointCollection : public NXOpen::TaggedObjectCollection
        {
            /** Option for searching for an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  
                        when attempting to create an new @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink . */
            public: enum CheckExisting
            {
                CheckExistingDontSearch/** Don't search for an exising object, 
                                                                            always create a new object. */,
                CheckExistingSearch/** Search for an existing object, don't 
                                                                            create a new object if one exists at the 
                                                                            correct location. */
            };

            /** Whether @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  returned from the creator 
                        methods was an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  or a new
                        @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink . */
            public: enum FoundExisting
            {
                FoundExistingBrandNew/** Object is a new object. */,
                FoundExistingExisting/** Object existed already. */
            };

            private: ControlPointCollectionImpl * m_controlpointcollection_impl;
            private: NXOpen::Routing::RouteManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit ControlPointCollection(NXOpen::Routing::RouteManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~ControlPointCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Routing::ControlPointCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Routing::ControlPoint *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(nullptr), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Routing::ControlPointCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(nullptr), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_ROUTINGEXPORT  value_type operator * () const;
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_ROUTINGEXPORT  void next();
                NXOpen::Routing::ControlPointCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  at the given ABS coordinates within
                        the given tolerance.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * FindControlPoint
            (
                const NXOpen::Point3d & position /** ABS coordinates */,
                double tolerance /** Distance tolerance, smallest useful tolerance
                                                                        is returned from 
                                                                        @link NXOpen::Routing::RouteManager::GetLengthTolerance NXOpen::Routing::RouteManager::GetLengthTolerance@endlink . */
            );
            /** Creates a dumb @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  object.  The @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 's 
                        position is not associative to any other object.   @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                const NXOpen::Point3d & position /** ABS coordinates*/,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a smart @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  object.  The @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 's 
                        position is associative to the input @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink .   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::Routing::Port * port /** port */ ,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  at the given object and normalized parameter.
                        Supports curves [includes segments], ports and circular edges.   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::TaggedObject * object /** object */ ,
                double objectParm /** object parm */ ,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a smart @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  object.  The @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 's 
                        position is associative to the input @link NXOpen::Point NXOpen::Point@endlink .   @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::Point * point /** point */ ,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a smart @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  object.  The @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 's 
                        position is associative to a @link NXOpen::Point NXOpen::Point@endlink  that is defined at the center
                        of a @link NXOpen::IBaseCurve NXOpen::IBaseCurve@endlink  object.   @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::IBaseCurve * conic /** conic */ ,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a dumb @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  object.  The @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 's 
                        position is not associative to any other object.  The position of the object is located at
                        the XC, YC, ZC offset (using the work coordinate system) from the input 
                        @link NXOpen::Routing::IRoutePosition NXOpen::Routing::IRoutePosition@endlink   object.   @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::Routing::IRoutePosition * startObject /** Starting position. */,
                const NXOpen::Vector3d & offset /** Offset values. */,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
            /** Creates a smart @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  object.  The @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 's 
                        position is smart point that is associative to a @link NXOpen::Point NXOpen::Point@endlink  that is associative
                        to a @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  occurrence.  @return  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * CreateControlPoint
            (
                NXOpen::Routing::ControlPoint * cpOcc /** Occurrence of a 
                                                                                            @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  object.*/,
                NXOpen::Routing::ControlPointCollection::CheckExisting checkExisting /** Return an existing @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink 
                                                                        object if one exists at the same location as the
                                                                        position. */,
                NXOpen::Routing::ControlPointCollection::FoundExisting* foundExisting /** Returned @link NXOpen::Routing::ControlPoint NXOpen::Routing::ControlPoint@endlink  is
                                                                        an existing control point. */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
