#ifndef NXOpen_VIRTUALLABIMPORTER_HXX_INCLUDED
#define NXOpen_VIRTUALLABIMPORTER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VirtuallabImporter.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class VirtuallabImporter;
    class Builder;
    class _VirtuallabImporterBuilder;
    class VirtuallabImporterImpl;
    /**
        Represents a @link VirtuallabImporter VirtuallabImporter@endlink  to be used when importing the Virtuallab Data
        This class is created using @link DexManager DexManager@endlink .
        NULL object will be returned from Commit()  <br> To create a new instance of this class, use @link NXOpen::DexManager::CreateVirtuallabImporter  NXOpen::DexManager::CreateVirtuallabImporter @endlink  <br> 
    Default values.
    <table border="1"> 
     
    <tr><th> 
    Property</th>  <th> 
    Value</th> </tr>
    <tr><td> 
     
    UseFileDirectory </td> <td> 
     
    1 </td> </tr> 

    </table>  

     <br>  Created in NX12.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  VirtuallabImporter : public NXOpen::Builder
    {
        private: VirtuallabImporterImpl * m_virtuallabimporter_impl;
        private: friend class  _VirtuallabImporterBuilder;
        protected: VirtuallabImporter();
        public: ~VirtuallabImporter();
        /** Save the settings - this will save the settings to a file specified 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveSettings
        (
            const NXString & filename /** filename */ 
        );
        /** Save the settings - this will save the settings to a file specified 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        void SaveSettings
        (
            const char * filename /** filename */ 
        );
        /**Returns  the settings file - definition file for default options
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXString SettingsFile
        (
        );
        /**Sets  the settings file - definition file for default options
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSettingsFile
        (
            const NXString & filename /** filename */ 
        );
        /**Sets  the settings file - definition file for default options
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        void SetSettingsFile
        (
            const char * filename /** filename */ 
        );
        /**Returns  the use file directory - if set to true then sim files will be created in the same directory as the input file 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: bool UseFileDirectory
        (
        );
        /**Sets  the use file directory - if set to true then sim files will be created in the same directory as the input file 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetUseFileDirectory
        (
            bool useFileDirectory /** usefiledirectory */ 
        );
        /**Returns  the output directory - where the sim file will be created 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: NXString OutputDirectory
        (
        );
        /**Sets  the output directory - where the sim file will be created 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetOutputDirectory
        (
            const NXString & outputDirectory /** outputdirectory */ 
        );
        /**Sets  the output directory - where the sim file will be created 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        void SetOutputDirectory
        (
            const char * outputDirectory /** outputdirectory */ 
        );
        /**Returns  the skip translated parts option - if set to true then CATParts that have already been translated will not be re-translated 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: bool SkipTranslatedParts
        (
        );
        /**Sets  the skip translated parts option - if set to true then CATParts that have already been translated will not be re-translated 
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSkipTranslatedParts
        (
            bool skipTranslatedParts /** skiptranslatedparts */ 
        );
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
