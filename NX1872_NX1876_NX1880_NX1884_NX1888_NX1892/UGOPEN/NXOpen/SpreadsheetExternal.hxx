#ifndef NXOpen_SPREADSHEETEXTERNAL_HXX_INCLUDED
#define NXOpen_SPREADSHEETEXTERNAL_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     SpreadsheetExternal.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/SpreadsheetCellData.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class SpreadsheetExternal;
    class SpreadsheetCellData;
    /** Alignment style */
    enum AlignmentStyleT
    {
    };

    /** Underline style */
    enum UnderlineStyleT
    {
    };

    /** text alignment mode */
    enum TextAlignmentModeT
    {
    };

    /** border line style */
    enum BorderLineStyleT
    {
    };

    /** excel file format */
    enum ExcelFileFormatT
    {
    };

    class SpreadsheetExternalImpl;
    /** Represents a class for external spreadsheet.
    To call functions from this class, use @link SpreadsheetExternal SpreadsheetExternal@endlink  object returned by @link NXOpen::SpreadsheetManager::OpenFile  NXOpen::SpreadsheetManager::OpenFile @endlink . 
     <br>  Usable only on Windows <br> 
     <br>  Created in NX11.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  SpreadsheetExternal : public NXOpen::TransientObject
    {
        private: SpreadsheetExternalImpl * m_spreadsheetexternal_impl;
        /// \cond NX_NO_DOC 
        public: explicit SpreadsheetExternal(void *ptr);
        /// \endcond 
        /** Free resources associated with the instance. After this method
            is called, it is illegal to use the object.  In .NET, this method
            is automatically called when the object is deleted by the garbage
            collector.  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: virtual ~SpreadsheetExternal();
        /** Closes an excel file with an option to save the file before close. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void CloseFile
        (
            bool save /** If true, the file will be saved. If false, the file will not be saved.  */
        );
        /** Returns worksheet ID. @return  worksheet ID 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: int GetWorksheetIndex
        (
            const NXString & sheetname /** Sheet name to get Index*/
        );
        /** Returns worksheet ID. @return  worksheet ID 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        int GetWorksheetIndex
        (
            const char * sheetname /** Sheet name to get Index*/
        );
        /** Reads a named range. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ReadNamedRange
        (
            int worksheet /** worksheet ID */,
            const NXString & rangename /** Range name*/,
            std::vector<NXOpen::SpreadsheetCellData *> & v2 /** Data list for given range name */
        );
        /** Reads a named range. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        void ReadNamedRange
        (
            int worksheet /** worksheet ID */,
            const char * rangename /** Range name*/,
            std::vector<NXOpen::SpreadsheetCellData *> & v2 /** Data list for given range name */
        );
        /** Reads the spreadsheet file and returns the data in the specified ranges 
            of the cells.
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void ReadRange
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            std::vector<NXOpen::SpreadsheetCellData *> & v2 /** Data list for given range */
        );
        /** Appends a new row of data to the Excel file. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void AppendRow
        (
            int worksheet /** Worksheet ID */,
            const std::vector<NXOpen::SpreadsheetCellData *> & data /** The append data list.*/
        );
        /** Writes the data to the specified range of the spreadsheet. 
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : None */
        public: void WriteRange
        (
            const std::vector<NXOpen::SpreadsheetCellData *> & data /** The data list to be written to external Excel worksheet.*/
        );
        /** Sets the background color to the specified range of the spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRangeBackgroundColor
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            const std::vector<double> & cellBackgroundColor /** Array of 3 RGB values*/
        );
        /** Sets the background color to the specified worksheet tab of the spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetSheetTabBackgroundColor
        (
            int worksheet /** Worksheet ID  */,
            const std::vector<double> & tabBackgroundColor /** Array of 3 RGB values*/
        );
        /** Merges cells to the specified range of the spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void MergeCellRange
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */
        );
        /** Add worksheet name in spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetWorksheetName
        (
            int worksheet /** Worksheet ID  */,
            const NXString & sheetname /** Sheet name to be set*/
        );
        /** Add worksheet name in spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void SetWorksheetName
        (
            int worksheet /** Worksheet ID  */,
            const char * sheetname /** Sheet name to be set*/
        );
        /** Add worksheet in excel.  @return  Worksheet ID
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: int AddWorksheet
        (
            const NXString & sheetname /** Sheet name to be set*/
        );
        /** Add worksheet in excel.  @return  Worksheet ID
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        int AddWorksheet
        (
            const char * sheetname /** Sheet name to be set*/
        );
        /** Sets range alignment. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRangeAlignment
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            NXOpen::AlignmentStyleT alignStyle /** Align Style */,
            NXOpen::TextAlignmentModeT alignMode /** Align Mode */
        );
        /** Sets the borders property to the specified range of the spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRangeBordersProperty
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            const std::vector<double> & cellBorderColor /** Array of 3 RGB values*/,
            NXOpen::BorderLineStyleT borderLineStyle /** Border line style*/
        );
        /** Sets the font property to the specified range of the spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SetRangeFontProperty
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            const NXString & fontName /** Sheet name to be set*/,
            int fontSize /** font size */,
            const std::vector<double> & cellFontColor /** Array of 3 RGB values*/,
            bool bold /** If true, the letters will be bold. */,
            bool italic /** If true,  the letters will be bItalic. */,
            NXOpen::UnderlineStyleT underline /** underline*/,
            bool strikethrough /** If true,  the letters will be bStrikethrough. */,
            bool superscript /** If true,  the letters will be bSuperscript. */,
            bool subscript /** If true,  the letters will be bSubscript. */
        );
        /** Sets the font property to the specified range of the spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void SetRangeFontProperty
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            const char * fontName /** Sheet name to be set*/,
            int fontSize /** font size */,
            const std::vector<double> & cellFontColor /** Array of 3 RGB values*/,
            bool bold /** If true, the letters will be bold. */,
            bool italic /** If true,  the letters will be bItalic. */,
            NXOpen::UnderlineStyleT underline /** underline*/,
            bool strikethrough /** If true,  the letters will be bStrikethrough. */,
            bool superscript /** If true,  the letters will be bSuperscript. */,
            bool subscript /** If true,  the letters will be bSubscript. */
        );
        /** Saves excel file. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void SaveAs
        (
            int worksheet /** Worksheet ID  */,
            const NXString & fileName /** File name to be set*/,
            NXOpen::ExcelFileFormatT fileFormat /** File format to be set*/
        );
        /** Saves excel file. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void SaveAs
        (
            int worksheet /** Worksheet ID  */,
            const char * fileName /** File name to be set*/,
            NXOpen::ExcelFileFormatT fileFormat /** File format to be set*/
        );
        /** Inserts image in specified range of the spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void InsertImage
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            const NXString & imagepath /** Image path to be inserted*/
        );
        /** Inserts image in specified range of the spreadsheet. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        void InsertImage
        (
            int worksheet /** Worksheet ID  */,
            int rowstart /** Starting row of the range */,
            int colstart /** Starting column of the range */,
            int rowend /** Ending row of the range */,
            int colend /** Ending column of the range */,
            const char * imagepath /** Image path to be inserted*/
        );
        /** Autofits columns in excel. 
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: void AutofitColumns
        (
            int worksheet /** Worksheet ID  */,
            int colstart /** Starting column*/,
            int colend /** Ending column*/
        );
        /** GetWorkSheetCount in excel.  @return  num Of sheets
         <br>  Created in NX1847.0.0.  <br>  
         <br> License requirements : None */
        public: int GetNumberofsheets
        (
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
