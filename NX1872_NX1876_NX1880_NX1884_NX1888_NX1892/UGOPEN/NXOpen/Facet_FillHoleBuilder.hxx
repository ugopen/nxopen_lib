#ifndef NXOpen_FACET_FILLHOLEBUILDER_HXX_INCLUDED
#define NXOpen_FACET_FILLHOLEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Facet_FillHoleBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_facet_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Facet
    {
        class FillHoleBuilder;
    }
    class Builder;
    class DisplayableObject;
    namespace Facet
    {
        class SelectFacetedBody;
    }
    class ICurve;
    class SelectDisplayableObject;
    class SelectICurveList;
    namespace Facet
    {
        class _FillHoleBuilderBuilder;
        class FillHoleBuilderImpl;
        /** This class finds and fills holes to a prescribed boundary smoothness condition.
                Inputs to this class can be convergent objects.  <br> To create a new instance of this class, use @link NXOpen::Facet::FacetedBodyCollection::CreateFillHoleBuilder  NXOpen::Facet::FacetedBodyCollection::CreateFillHoleBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        IsEditCopy </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MaxEdges </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SmoothType </td> <td> 
         
        Linear </td> </tr> 

        <tr><td> 
         
        TargetType </td> <td> 
         
        UserDefined </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_FACETEXPORT  FillHoleBuilder : public NXOpen::Builder
        {
            /** Hole filling type options. */
            public: enum Types
            {
                TypesFillHole/** Fills individual hole(s). */,
                TypesFillIsland/** Fills a hole defined by inner island and outer facet body. */,
                TypesBridgeGap/** Bridges some open boundary edges with a linear fill. */
            };

            /** Options defining how to target holes for filling. */
            public: enum TargetTypes
            {
                TargetTypesUserDefined/** Fills user-defined target holes. */,
                TargetTypesByNumberOfEdges/** Automatically target holes based on number of edges. */
            };

            /** Smoothness and boundary continuity options. */
            public: enum SmoothTypes
            {
                SmoothTypesLinear/** Linear (triangulated) fill. */,
                SmoothTypesRefined/** Smooth internal fill. */,
                SmoothTypesTangentBased/** Smooth fill, boundary is based on facet body tangent. */,
                SmoothTypesCurvatureBased/** Smooth fill, boundary is based on facet body curvature. */
            };

            private: FillHoleBuilderImpl * m_fillholebuilder_impl;
            private: friend class  _FillHoleBuilderBuilder;
            protected: FillHoleBuilder();
            public: ~FillHoleBuilder();
            /** Removes all holes, deletes associated hole polylines. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void ClearHoles
            (
            );
            /** Locates holes in the mesh and creates polylines around them. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void FindHoles
            (
            );
            /** Cleans up local meshes associated with each fill. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void ClearHoleFills
            (
            );
            /** Fills targeted holes.  @return  updated input facet body 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject * FillHoles
            (
                bool globalUpdate /** If true, update the entire input facet body.  If
                                                  false, GetHoleFillsOnly() may be used to get a facet body
                                                  that contains only the new facets of the filled holes. */
            );
            /** Switches boundary edge mapping based on the filling type (holes, island, bridge)
                        When filling holes or islands, each hole is defined by a polyline.  When bridging holes,
                        each individual open edge has its own polyline.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SwitchHoleFillType
            (
            );
            /** Builds a facet body that contains only the facets of the filled holes. @return  the fill facet body 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::DisplayableObject * GetHoleFillsOnly
            (
            );
            /** Gets a list of all holes (represented by polylines). 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAllHoles
            (
                std::vector<NXOpen::DisplayableObject *> & holeCurveTags /** Hole polylines. */
            );
            /** Gets the number of holes in the target facet body. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int GetNumberOfHoles
            (
            );
            /** Gets a hole given an index into the list of holes.  @return  Equals NULL if not found 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ICurve * GetHoleByIndex
            (
                int index /** Index into the list of all holes */
            );
            /** Gets a list of targeted holes (represented by polylines) based on number of edges. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void GetTargetHolesByEdgeNumber
            (
                int numMaxEdges /** Targets polylines that have this many edges or less. */,
                std::vector<NXOpen::DisplayableObject *> & holeCurveTags /** Hole polylines. */
            );
            /**Returns  the facet body we will be filling. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectDisplayableObject * TargetBody
            (
            );
            /**Returns  the facet body we will be filling. 
             <br>  @deprecated Deprecated in NX11.0.0.  Use @link NXOpen::Facet::FillHoleBuilder::TargetBody NXOpen::Facet::FillHoleBuilder::TargetBody@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX11.0.0.  Use NXOpen::Facet::FillHoleBuilder::TargetBody instead.") NXOpen::Facet::SelectFacetedBody * TargetFacetBody
            (
            );
            /**Returns  the hole target type when filling holes. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::FillHoleBuilder::TargetTypes TargetType
            (
            );
            /**Sets  the hole target type when filling holes. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTargetType
            (
                NXOpen::Facet::FillHoleBuilder::TargetTypes targetType /** target type */ 
            );
            /**Returns  the hole curves using Fill Hole, User Defined. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurveList * TargetHole
            (
            );
            /**Returns  the Inner Hole in island filling. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurveList * InnerHole
            (
            );
            /**Returns  the Outer Hole in island filling. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurveList * OuterHole
            (
            );
            /**Returns  the first list of edges when bridging holes. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurveList * BridgeEdges1
            (
            );
            /**Returns  the second list of edges when bridging holes. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectICurveList * BridgeEdges2
            (
            );
            /**Returns  the maximum number of edges that a targeted hole can have. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: int MaxEdges
            (
            );
            /**Sets  the maximum number of edges that a targeted hole can have. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetMaxEdges
            (
                int maxEdges /** max edges */ 
            );
            /**Returns  the boundary smoothness. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::FillHoleBuilder::SmoothTypes SmoothType
            (
            );
            /**Sets  the boundary smoothness. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSmoothType
            (
                NXOpen::Facet::FillHoleBuilder::SmoothTypes smoothType /** smooth type */ 
            );
            /**Returns  the hole filling type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Facet::FillHoleBuilder::Types Type
            (
            );
            /**Sets  the hole filling type. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetType
            (
                NXOpen::Facet::FillHoleBuilder::Types type /** type */ 
            );
            /**Returns  the flag indicating if the hole filling is on the copy of the input facet body. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsEditCopy
            (
            );
            /**Sets  the flag indicating if the hole filling is on the copy of the input facet body. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetEditCopy
            (
                bool isEditCopy /** iseditcopy */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
