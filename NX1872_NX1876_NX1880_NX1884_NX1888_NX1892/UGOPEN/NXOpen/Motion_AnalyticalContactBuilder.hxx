#ifndef NXOpen_MOTION_ANALYTICALCONTACTBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_ANALYTICALCONTACTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_AnalyticalContactBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/Motion.hxx>
#include <NXOpen/Motion_FlexSurfaceBuilder.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/Motion_MotionBuilder.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class AnalyticalContactBuilder;
    }
    class Direction;
    class Expression;
    class ExternalFileReferenceAdapter;
    class IExternalFileReferencer;
    namespace Motion
    {
        class FlexSurfaceBuilder;
    }
    namespace Motion
    {
        class MotionBuilder;
    }
    namespace Motion
    {
        class MotionFunction;
    }
    namespace Motion
    {
        class SelectAnalyticalContactProperty;
    }
    namespace Motion
    {
        class SelectLink;
    }
    class Point;
    class Section;
    class SelectNXObjectList;
    namespace Motion
    {
        class _AnalyticalContactBuilderBuilder;
        class AnalyticalContactBuilderImpl;
        /** Represents a @link Motion::AnalyticalContact Motion::AnalyticalContact@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Motion::AnalyticalContactCollection::CreateAnalyticalContactBuilder  NXOpen::Motion::AnalyticalContactCollection::CreateAnalyticalContactBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ContactType </td> <td> 
         
        SphereToSphere </td> </tr> 

        <tr><td> 
         
        EffectiveContactDepth.Value </td> <td> 
         
        1000 (millimeters part), 39.3701 (inches part) </td> </tr> 

        <tr><td> 
         
        ExtrusionGeometryData </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ExtrusionMaterialSide </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        FindAllRoots </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        FirstSuperElementIncrement </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        InfiniteExtrusion </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        InfiniteSweep </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MaxTesselationLength.Value </td> <td> 
         
        5 (millimeters part), 0.19685 (inches part) </td> </tr> 

        <tr><td> 
         
        NumberOfContactsToReport.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Profile </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        RadiusOfExclusion.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        RailGeometryData </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RailMaterialSide </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RevolutionGeometryData </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RevolutionMaterialSide </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        SecondRevolutionGeometryData </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SecondRevolutionMaterialSide </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        SecondSphereRadius.Value </td> <td> 
         
        1000 (millimeters part), 39.3701 (inches part) </td> </tr> 

        <tr><td> 
         
        SecondSuperElementIncrement </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        SphereRadius.Value </td> <td> 
         
        1000 (millimeters part), 39.3701 (inches part) </td> </tr> 

        <tr><td> 
         
        SuperElementReportInstance </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  AnalyticalContactBuilder : public NXOpen::Motion::MotionBuilder, public virtual NXOpen::IExternalFileReferencer
        {
            /** Contact type */
            public: enum ContactTypeOption
            {
                ContactTypeOptionSphereToSphere/** sphere to sphere */ ,
                ContactTypeOptionSphereToExtrusion/** sphere to extrusion */ ,
                ContactTypeOptionSphereToRevolution/** sphere to revolution */ ,
                ContactTypeOptionExtrusionToRevolution/** extrusion to revolution */ ,
                ContactTypeOptionRevolutionToRevolution/** revolution to revolution */ ,
                ContactTypeOptionSphereToRail/** sphere to rail */ ,
                ContactTypeOptionSphereToFlexible/** sphere to flexible */ ,
                ContactTypeOptionFlexibleToFlexible/** flexible to flexible */ 
            };

            /** Profile Type */
            public: enum ProfileType
            {
                ProfileTypeNone/** none */ ,
                ProfileTypeCircular/** circular */ ,
                ProfileTypeRoad/** road */ 
            };

            /** Search method Type */
            public: enum SearchMethodType
            {
                SearchMethodTypeFast/** fast */ ,
                SearchMethodTypeRobust/** robust */ 
            };

            /** the enum for external file reference object id of analytical contact */
            public: enum ReferenceObjectId
            {
                ReferenceObjectIdExtrusionGeometryDataFile/** extrusion geometry data file */ ,
                ReferenceObjectIdRevolutionGeometryDataFile/** revolution geometry data file */ ,
                ReferenceObjectIdSecondRevolutionGeometryDataFile/** second revolution geometry data file */ ,
                ReferenceObjectIdRailGeometryDataFile/** rail geometry data file */ 
            };

            private: AnalyticalContactBuilderImpl * m_analyticalcontactbuilder_impl;
            private: friend class  _AnalyticalContactBuilderBuilder;
            protected: AnalyticalContactBuilder();
            public: ~AnalyticalContactBuilder();
            /**Returns  the type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::AnalyticalContactBuilder::ContactTypeOption ContactType
            (
            );
            /**Sets  the type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetContactType
            (
                NXOpen::Motion::AnalyticalContactBuilder::ContactTypeOption type /** type */ 
            );
            /**Returns  the sphere motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * SphereLink
            (
            );
            /**Returns   @brief the override state of sphere motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SphereLinkOvrCtrl
            (
            );
            /**Sets   @brief the override state of sphere motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSphereLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the sphere point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Point * SpherePoint
            (
            );
            /**Sets  the sphere point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSpherePoint
            (
                NXOpen::Point * spherePoint /** spherepoint */ 
            );
            /**Returns   @brief the override state of sphere point 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SpherePointOvrCtrl
            (
            );
            /**Sets   @brief the override state of sphere point 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSpherePointOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the second sphere motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * SecondSphereLink
            (
            );
            /**Returns   @brief the override state of second sphere motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SecondSphereLinkOvrCtrl
            (
            );
            /**Sets   @brief the override state of second sphere motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondSphereLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the second sphere point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Point * SecondSpherePoint
            (
            );
            /**Sets  the second sphere point 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondSpherePoint
            (
                NXOpen::Point * secondSpherePoint /** secondspherepoint */ 
            );
            /**Returns   @brief the override state of second sphere point 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SecondSpherePointOvrCtrl
            (
            );
            /**Sets   @brief the override state of second sphere point 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondSpherePointOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the extrusion motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * ExtrusionLink
            (
            );
            /**Returns   @brief the override state of extrusion motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState ExtrusionLinkOvrCtrl
            (
            );
            /**Sets   @brief the override state of extrusion motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetExtrusionLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the extrusion bodies 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::SelectNXObjectList * ExtrusionBodies
            (
            );
            /**Returns   @brief the override state of extrusion bodies 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState ExtrusionBodiesOvrCtrl
            (
            );
            /**Sets   @brief the override state of extrusion bodies 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetExtrusionBodiesOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the extrusion line-arc file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool ExtrusionGeometryData
            (
            );
            /**Sets  the extrusion line-arc file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetExtrusionGeometryData
            (
                bool geometryDataOption /** geometrydataoption */ 
            );
            /**Returns   @brief the override state of extrusion line-arc file option 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState ExtrusionGeometryDataOvrCtrl
            (
            );
            /**Sets   @brief the override state of extrusion line-arc file option 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetExtrusionGeometryDataOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the extrusion line-arc file.
                        This is a file containing information describing the extrusion profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") NXString ExtrusionGeometryDataFile
            (
            );
            /**Sets  the extrusion line-arc file.
                        This is a file containing information describing the extrusion profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") void SetExtrusionGeometryDataFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the extrusion line-arc file.
                        This is a file containing information describing the extrusion profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetExtrusionGeometryDataFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns   @brief the override state of extrusion line-arc file 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState ExtrusionGeometryDataFileOvrCtrl
            (
            );
            /**Sets   @brief the override state of extrusion line-arc file 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetExtrusionGeometryDataFileOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the revolution motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * RevolutionLink
            (
            );
            /**Returns   @brief the override state of revolution motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RevolutionLinkOvrCtrl
            (
            );
            /**Sets   @brief the override state of revolution motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRevolutionLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the revolution bodies 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::SelectNXObjectList * RevolutionBodies
            (
            );
            /**Returns   @brief the override state of revolution bodies 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RevolutionBodiesOvrCtrl
            (
            );
            /**Sets   @brief the override state of revolution bodies 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRevolutionBodiesOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the revolution line-arc file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool RevolutionGeometryData
            (
            );
            /**Sets  the revolution line-arc file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRevolutionGeometryData
            (
                bool geometryDataOption /** geometrydataoption */ 
            );
            /**Returns   @brief the override state of revolution line-arc file option 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RevolutionGeometryDataOvrCtrl
            (
            );
            /**Sets   @brief the override state of revolution line-arc file option 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRevolutionGeometryDataOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the revolution line-arc file.
                        This is a file containing information describing the revolution profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") NXString RevolutionGeometryDataFile
            (
            );
            /**Sets  the revolution line-arc file.
                        This is a file containing information describing the revolution profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") void SetRevolutionGeometryDataFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the revolution line-arc file.
                        This is a file containing information describing the revolution profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetRevolutionGeometryDataFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns   @brief the override state of revolution line-arc file 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RevolutionGeometryDataFileOvrCtrl
            (
            );
            /**Sets   @brief the override state of revolution line-arc file 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRevolutionGeometryDataFileOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the second revolution motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * SecondRevolutionLink
            (
            );
            /**Returns   @brief the override state of second revolution motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SecondRevolutionLinkOvrCtrl
            (
            );
            /**Sets   @brief the override state of second revolution motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondRevolutionLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the second revolution bodies 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::SelectNXObjectList * SecondRevolutionBodies
            (
            );
            /**Returns   @brief the override state of second revolution bodies 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SecondRevolutionBodiesOvrCtrl
            (
            );
            /**Sets   @brief the override state of second revolution bodies 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondRevolutionBodiesOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the second revolution line-arc file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool SecondRevolutionGeometryData
            (
            );
            /**Sets  the second revolution line-arc file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondRevolutionGeometryData
            (
                bool geometryDataOption /** geometrydataoption */ 
            );
            /**Returns   @brief the override state of second revolution line-arc file option 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SecondRevolutionGeometryDataOvrCtrl
            (
            );
            /**Sets   @brief the override state of second revolution line-arc file option 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondRevolutionGeometryDataOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the second revolution line-arc file.
                        This is a file containing information describing the second revolution profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") NXString SecondRevolutionGeometryDataFile
            (
            );
            /**Sets  the second revolution line-arc file.
                        This is a file containing information describing the second revolution profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") void SetSecondRevolutionGeometryDataFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the second revolution line-arc file.
                        This is a file containing information describing the second revolution profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetSecondRevolutionGeometryDataFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns   @brief the override state of second revolution line-arc file 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SecondRevolutionGeometryDataFileOvrCtrl
            (
            );
            /**Sets   @brief the override state of second revolution line-arc file 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondRevolutionGeometryDataFileOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the rail motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * RailLink
            (
            );
            /**Returns   @brief the override state of rail motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RailLinkOvrCtrl
            (
            );
            /**Sets   @brief the override state of rail motion body 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailLinkOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the rail bodies 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::SelectNXObjectList * RailBodies
            (
            );
            /**Returns   @brief the override state of rail bodies 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RailBodiesOvrCtrl
            (
            );
            /**Sets   @brief the override state of rail bodies 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailBodiesOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the rail curve 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Section * RailCurve
            (
            );
            /**Returns   @brief the override state of rail curve 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RailCurveOvrCtrl
            (
            );
            /**Sets   @brief the override state of rail curve 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailCurveOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the rail line-arc file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool RailGeometryData
            (
            );
            /**Sets  the rail line-arc file option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailGeometryData
            (
                bool geometryDataOption /** geometrydataoption */ 
            );
            /**Returns   @brief the override state of rail line-arc file option 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RailGeometryDataOvrCtrl
            (
            );
            /**Sets   @brief the override state of rail line-arc file option 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailGeometryDataOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the rail line-arc file.
                        This is a file containing information describing the rail profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") NXString RailGeometryDataFile
            (
            );
            /**Sets  the rail line-arc file.
                        This is a file containing information describing the rail profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") void SetRailGeometryDataFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the rail line-arc file.
                        This is a file containing information describing the rail profile.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetRailGeometryDataFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns   @brief the override state of rail line-arc file 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RailGeometryDataFileOvrCtrl
            (
            );
            /**Sets   @brief the override state of rail line-arc file 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailGeometryDataFileOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the sphere radius 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * SphereRadius
            (
            );
            /**Returns  the partial sphere option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool PartialSphereOption
            (
            );
            /**Sets  the partial sphere option
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPartialSphereOption
            (
                bool partialSphereOption /** partialsphereoption */ 
            );
            /**Returns  the partial sphere vector
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Direction * PartialSphereVector
            (
            );
            /**Sets  the partial sphere vector
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetPartialSphereVector
            (
                NXOpen::Direction * partialSphereVector /** partialspherevector */ 
            );
            /**Returns  the partial sphere angle
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * PartialSphereAngle
            (
            );
            /**Returns  the second sphere radius 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * SecondSphereRadius
            (
            );
            /**Returns  the max penetration depth 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * EffectiveContactDepth
            (
            );
            /**Returns  the radius of exclusion 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * RadiusOfExclusion
            (
            );
            /**Returns  the infinite extrusion 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool InfiniteExtrusion
            (
            );
            /**Sets  the infinite extrusion 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInfiniteExtrusion
            (
                bool infiniteExtrusion /** infiniteextrusion */ 
            );
            /**Returns  the infinite sweep for rail 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool InfiniteSweep
            (
            );
            /**Sets  the infinite sweep for rail 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetInfiniteSweep
            (
                bool infiniteSweep /** infinitesweep */ 
            );
            /**Returns  the spline function toggle for rail 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool RailSplineFunctions
            (
            );
            /**Sets  the spline function toggle for rail 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailSplineFunctions
            (
                bool functionsToggle /** functionstoggle */ 
            );
            /**Returns  the RailX function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionFunction * RailXCurve
            (
            );
            /**Sets  the RailX function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailXCurve
            (
                NXOpen::Motion::MotionFunction * railCurve /** railcurve */ 
            );
            /**Returns  the RailY function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionFunction * RailYCurve
            (
            );
            /**Sets  the RailY function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailYCurve
            (
                NXOpen::Motion::MotionFunction * railCurve /** railcurve */ 
            );
            /**Returns  the RailZ function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionFunction * RailZCurve
            (
            );
            /**Sets  the RailZ function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailZCurve
            (
                NXOpen::Motion::MotionFunction * railCurve /** railcurve */ 
            );
            /**Returns  the RailRollAngle function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::MotionFunction * RailRollAngleCurve
            (
            );
            /**Sets  the RailRollAngle function 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailRollAngleCurve
            (
                NXOpen::Motion::MotionFunction * railCurve /** railcurve */ 
            );
            /**Returns  the max tesselation length 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * MaxTesselationLength
            (
            );
            /**Returns  the profile 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::AnalyticalContactBuilder::ProfileType Profile
            (
            );
            /**Sets  the profile 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetProfile
            (
                NXOpen::Motion::AnalyticalContactBuilder::ProfileType profileType /** profiletype */ 
            );
            /**Returns  the find all roots 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool FindAllRoots
            (
            );
            /**Sets  the find all roots 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFindAllRoots
            (
                bool findAllRoots /** findallroots */ 
            );
            /**Returns  the contact property 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectAnalyticalContactProperty * ContactProperty
            (
            );
            /**Returns  the first super element motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * FirstSuperElementLink
            (
            );
            /**Returns  the first super element increment 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int FirstSuperElementIncrement
            (
            );
            /**Sets  the first super element increment 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetFirstSuperElementIncrement
            (
                int firstSuperElementIncrement /** firstsuperelementincrement */ 
            );
            /**Returns  the second super element motion body 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::SelectLink * SecondSuperElementLink
            (
            );
            /**Returns  the second super element increment 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int SecondSuperElementIncrement
            (
            );
            /**Sets  the second super element increment 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondSuperElementIncrement
            (
                int sSecondSuperElementIncrement /** ssecondsuperelementincrement */ 
            );
            /**Returns  the super element report instance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: int SuperElementReportInstance
            (
            );
            /**Sets  the super element report instance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSuperElementReportInstance
            (
                int superElementReportInstance /** superelementreportinstance */ 
            );
            /**Returns  the string name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the string name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the string name 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**Returns  the material side toggle for extrusion 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool ExtrusionMaterialSide
            (
            );
            /**Sets  the material side toggle for extrusion 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetExtrusionMaterialSide
            (
                bool matSide /** matside */ 
            );
            /**Returns   @brief the override state of material side for extrusion 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState ExtrusionDirectionButtonOvrCtrl
            (
            );
            /**Sets   @brief the override state of material side for extrusion 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetExtrusionDirectionButtonOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the material side toggle for revolution 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool RevolutionMaterialSide
            (
            );
            /**Sets  the material side toggle for revolution 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRevolutionMaterialSide
            (
                bool matSide /** matside */ 
            );
            /**Returns   @brief the override state of material side for revolution 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RevolutionDirectionButtonOvrCtrl
            (
            );
            /**Sets   @brief the override state of material side for revolution 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRevolutionDirectionButtonOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the material side toggle for second revolution 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool SecondRevolutionMaterialSide
            (
            );
            /**Sets  the material side toggle for second revolution 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondRevolutionMaterialSide
            (
                bool matSide /** matside */ 
            );
            /**Returns   @brief the override state of material side for second revolution 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState SecondRevolutionDirectionButtonOvrCtrl
            (
            );
            /**Sets   @brief the override state of material side for second revolution 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSecondRevolutionDirectionButtonOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the material side toggle for rail 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool RailMaterialSide
            (
            );
            /**Sets  the material side toggle for rail 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailMaterialSide
            (
                bool matSide /** matside */ 
            );
            /**Returns   @brief the override state of material side for rail 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::ParamOverrideState RailDirectionButtonOvrCtrl
            (
            );
            /**Sets   @brief the override state of material side for rail 

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRailDirectionButtonOvrCtrl
            (
                NXOpen::Motion::ParamOverrideState overrideState /** overridestate */ 
            );
            /**Returns  the flexible patch 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::FlexSurfaceBuilder * FlexiblePatch
            (
            );
            /**Returns  the second flexible patch 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Motion::FlexSurfaceBuilder * SecondFlexiblePatch
            (
            );
            /**Returns  the search method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Motion::AnalyticalContactBuilder::SearchMethodType SearchMethod
            (
            );
            /**Sets  the search method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetSearchMethod
            (
                NXOpen::Motion::AnalyticalContactBuilder::SearchMethodType profileType /** profiletype */ 
            );
            /**Returns  the number of contacts to report 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * NumberOfContactsToReport
            (
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
