#ifndef NXOpen_MOTION_TIREPROPERTYFTBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_TIREPROPERTYFTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_TirePropertyFtBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExternalFileReferenceAdapter.hxx>
#include <NXOpen/IExternalFileReferencer.hxx>
#include <NXOpen/Motion_TirePropertyBuilder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class TirePropertyFtBuilder;
    }
    class Expression;
    class ExternalFileReferenceAdapter;
    class IExternalFileReferencer;
    namespace Motion
    {
        class TirePropertyBuilder;
    }
    namespace Motion
    {
        class _TirePropertyFtBuilderBuilder;
        class TirePropertyFtBuilderImpl;
        /** Represents a Builder for Motion Ftire Tire Property  <br> To create a new instance of this class, use @link NXOpen::Motion::TirePropertyFtCollection::CreateTirePropertyFtBuilder  NXOpen::Motion::TirePropertyFtCollection::CreateTirePropertyFtBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        IdRoad.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        Radius.Value </td> <td> 
         
        300.0 (millimeters part), 11.811 (inches part) </td> </tr> 

        <tr><td> 
         
        RunInParallel </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StaticHold </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        StaticVerticalStiffness.Value </td> <td> 
         
        0.0 (millimeters part), 0.0 (inches part) </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  TirePropertyFtBuilder : public NXOpen::Motion::TirePropertyBuilder, public virtual NXOpen::IExternalFileReferencer
        {
            private: TirePropertyFtBuilderImpl * m_tirepropertyftbuilder_impl;
            private: friend class  _TirePropertyFtBuilderBuilder;
            protected: TirePropertyFtBuilder();
            public: ~TirePropertyFtBuilder();
            /**Returns  the Radius.
                        It represents the undeformed radius of the tire. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * Radius
            (
            );
            /**Returns  the IdRoad.
                        It is a Road type identification number.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * IdRoad
            (
            );
            /**Returns  the static hold.
                        It controls holding forces during static analysis.
                        These holding forces are applied to prevent tire spin and gross chassis motion
                        (X and Y translation and yaw with respect to the road "up" vector). 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool StaticHold
            (
            );
            /**Sets  the static hold.
                        It controls holding forces during static analysis.
                        These holding forces are applied to prevent tire spin and gross chassis motion
                        (X and Y translation and yaw with respect to the road "up" vector). 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetStaticHold
            (
                bool staticHold /** statichold */ 
            );
            /**Returns  the "run in parallel" parameter.
                        This specifies if the FTire will automatically launch itself in parallel.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool RunInParallel
            (
            );
            /**Sets  the "run in parallel" parameter.
                        This specifies if the FTire will automatically launch itself in parallel.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetRunInParallel
            (
                bool runInParallel /** runinparallel */ 
            );
            /**Returns  the static vertical stiffness.
                        It specifies the vertical stiffness only used in static equilibrating force calculations 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXOpen::Expression * StaticVerticalStiffness
            (
            );
            /**Returns  the FTire file.
                        This is a file containing information describing the FTire tire.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter@endlink  <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::IExternalFileReferencer::GetExternalFileReferenceAdapter") NXString FtireFile
            (
            );
            /**Sets  the FTire file.
                        This is a file containing information describing the FTire tire.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::ExternalFileReferenceAdapter::EstablishReference NXOpen::ExternalFileReferenceAdapter::EstablishReference@endlink  <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NX_DEPRECATED("Deprecated in NX1847.0.0.  Use NXOpen::ExternalFileReferenceAdapter::EstablishReference") void SetFtireFile
            (
                const NXString & fileName /** filename */ 
            );
            /**Sets  the FTire file.
                        This is a file containing information describing the FTire tire.
             <br>  @deprecated Deprecated in NX1847.0.0.  Use @link NXOpen::ExternalFileReferenceAdapter::EstablishReference NXOpen::ExternalFileReferenceAdapter::EstablishReference@endlink  <br>  

             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetFtireFile
            (
                const char * fileName /** filename */ 
            );
            /**Returns  the name.
                        It is a uniqe name within tire properties.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the name.
                        It is a uniqe name within tire properties.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** name */ 
            );
            /**Sets  the name.
                        It is a uniqe name within tire properties.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** name */ 
            );
            /**  Returns the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to return the correct external file adapter.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * GetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */
            );
            /**  Sets the external file reference object. In case the referencer object has multiple external references,
                     use referenceObjectId to set the correct reference. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual void SetExternalFileReferenceAdapter
            (
                int referenceObjectId /** the unique identifier of the external reference required in case where referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /**  Gets the file definition to use for external file adapter. 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXString GetExternalFileDefinitionKey
            (
                NXOpen::ExternalFileReferenceAdapter * adapter /** external file reference object */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const NXString & externalFileSpec /** the external file specification. */
            );
            /** Establish the external reference to the given file specification.  @return  external file reference object 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            virtual NXOpen::ExternalFileReferenceAdapter * EstablishReference
            (
                int referenceObjectId /** the unique identifier to use for this reference if referencer has multiple external references */,
                NXOpen::ExternalFileReferenceAdapter::Type referenceType /** the kind of reference to establish */,
                const char * externalFileSpec /** the external file specification. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
