#ifndef NXOpen_TOOLING_FORCECALCULATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_FORCECALCULATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ForceCalculationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ForceCalculationBuilder;
    }
    class Builder;
    class ScCollector;
    class SelectFaceList;
    namespace Tooling
    {
        class _ForceCalculationBuilderBuilder;
        class ForceCalculationBuilderImpl;
        /**
             Represents a @link NXOpen::Tooling::ForceCalculationBuilder NXOpen::Tooling::ForceCalculationBuilder@endlink 
             Force Calculation Design is to calculate force of process
             <br> To create a new instance of this class, use @link NXOpen::Tooling::ForceCalculationCollection::CreateForceCalculationBuilder  NXOpen::Tooling::ForceCalculationCollection::CreateForceCalculationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CalculationType </td> <td> 
         
        Normal </td> </tr> 

        <tr><td> 
         
        DecimalPlaces </td> <td> 
         
        3 </td> </tr> 

        <tr><td> 
         
        ProcessType </td> <td> 
         
        AngularBlanking </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ForceCalculationBuilder : public NXOpen::Builder
        {
            /** The process type. */
            public: enum ProcessTypes
            {
                ProcessTypesCatalog/** catalog */,
                ProcessTypesAngularBlanking/** angular blanking */,
                ProcessTypesAngularEmbossing/** angular embossing */,
                ProcessTypesAngularPiercing/** angular piercing */,
                ProcessTypesBending/** bending */,
                ProcessTypesBlanking/** blanking */,
                ProcessTypesBurring/** burring */,
                ProcessTypesCircularDrawing/** circular drawing */,
                ProcessTypesCounterboring/** counterboring */,
                ProcessTypesCountersinking/** countersinking */,
                ProcessTypesCylindricalIroning/** cylindrical ironing */,
                ProcessTypesFlanging/** flanging */,
                ProcessTypesPiercing/** piercing */,
                ProcessTypesRoundEmbossing/** round embossing */,
                ProcessTypesSquareDrawing/** square drawing */,
                ProcessTypesUBending/** U bending */,
                ProcessTypesVBending/** V bending */,
                ProcessTypesVBendingTree/** V bending tree */,
                ProcessTypesZBending/** Z bending */
            };

            /** The calculation type. */
            public: enum CalculationTypes
            {
                CalculationTypesNormal/** calculate force considering pre-stations effects*/,
                CalculationTypesIsolated/** calculate force in isolation, without considering other processes*/
            };

            private: ForceCalculationBuilderImpl * m_forcecalculationbuilder_impl;
            private: friend class  _ForceCalculationBuilderBuilder;
            protected: ForceCalculationBuilder();
            public: ~ForceCalculationBuilder();
            /**Returns  the face of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ProcessFace
            (
            );
            /**Returns  the process name. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ProcessName
            (
            );
            /**Sets  the process name. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetProcessName
            (
                const NXString & processName /** processname */ 
            );
            /**Sets  the process name. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetProcessName
            (
                const char * processName /** processname */ 
            );
            /**Returns  the process type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ForceCalculationBuilder::ProcessTypes ProcessType
            (
            );
            /**Sets  the process type. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetProcessType
            (
                NXOpen::Tooling::ForceCalculationBuilder::ProcessTypes processType /** processtype */ 
            );
            /**Returns  the parameter expression to calculate the process force. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString Parameter
            (
            );
            /**Sets  the parameter expression to calculate the process force. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetParameter
            (
                const NXString & parameterExp /** parameterexp */ 
            );
            /**Sets  the parameter expression to calculate the process force. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetParameter
            (
                const char * parameterExp /** parameterexp */ 
            );
            /**Returns  the process used to calculate force. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * ForceProcess
            (
            );
            /**Returns  the process force of the calculated result. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ProcessForce
            (
            );
            /**Sets  the process force of the calculated result. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetProcessForce
            (
                const NXString & processForce /** Indicates the string of process force */
            );
            /**Sets  the process force of the calculated result. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetProcessForce
            (
                const char * processForce /** Indicates the string of process force */
            );
            /**Returns  the pressure-pad-force of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString HoldingForce
            (
            );
            /**Sets  the pressure-pad-force of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetHoldingForce
            (
                const NXString & holdingForce /** Indicates the string of holding force */
            );
            /**Sets  the pressure-pad-force of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetHoldingForce
            (
                const char * holdingForce /** Indicates the string of holding force */
            );
            /**Returns  the cutting perimeter length for EDM of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString CuttingPerimeter
            (
            );
            /**Sets  the cutting perimeter length for EDM of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCuttingPerimeter
            (
                const NXString & cuttingPerimeter /** Indicates the string of cutting perimeter length */
            );
            /**Sets  the cutting perimeter length for EDM of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetCuttingPerimeter
            (
                const char * cuttingPerimeter /** Indicates the string of cutting perimeter length */
            );
            /**Returns  the gravity center of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString GravityCenter
            (
            );
            /**Sets  the gravity center of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetGravityCenter
            (
                const NXString & gravityCenter /** Indicates the string of process gravity center */
            );
            /**Sets  the gravity center of the process. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetGravityCenter
            (
                const char * gravityCenter /** Indicates the string of process gravity center */
            );
            /**Returns  the total force of the calculated processes .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString TotalForce
            (
            );
            /**Sets  the total force of the calculated processes .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTotalForce
            (
                const NXString & totalForce /** Indicates the string of total process force */
            );
            /**Sets  the total force of the calculated processes .
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetTotalForce
            (
                const char * totalForce /** Indicates the string of total process force */
            );
            /**Returns  the total force center of the calculated processes . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString TotalForceCenter
            (
            );
            /**Sets  the total force center of the calculated processes . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTotalForceCenter
            (
                const NXString & totalForceCenter /** Indicates the string of total process force center */
            );
            /**Sets  the total force center of the calculated processes . 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetTotalForceCenter
            (
                const char * totalForceCenter /** Indicates the string of total process force center */
            );
            /**Returns  the calculation method. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ForceCalculationBuilder::CalculationTypes CalculationType
            (
            );
            /**Sets  the calculation method. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCalculationType
            (
                NXOpen::Tooling::ForceCalculationBuilder::CalculationTypes calculationType /** calculationtype */ 
            );
            /**Returns  the decimal places of the calculated force result. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: int DecimalPlaces
            (
            );
            /**Sets  the decimal places of the calculated force result. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetDecimalPlaces
            (
                int decimalPlaces /** decimalplaces */ 
            );
            /**Returns  the parameter text. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParameterText
            (
            );
            /**Sets  the parameter text. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetParameterText
            (
                const NXString & parameterText /** parametertext */ 
            );
            /**Sets  the parameter text. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void SetParameterText
            (
                const char * parameterText /** parametertext */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
