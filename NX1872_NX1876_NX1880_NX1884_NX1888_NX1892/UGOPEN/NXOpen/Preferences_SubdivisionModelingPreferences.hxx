#ifndef NXOpen_PREFERENCES_SUBDIVISIONMODELINGPREFERENCES_HXX_INCLUDED
#define NXOpen_PREFERENCES_SUBDIVISIONMODELINGPREFERENCES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Preferences_SubdivisionModelingPreferences.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_preferences_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Preferences
    {
        class SubdivisionModelingPreferences;
    }
    namespace Preferences
    {
        class SessionPreferences;
    }
    namespace Preferences
    {
        class SubdivisionModelingPreferencesImpl;
        /** Represents the set of Modeling preferences applicable to entire session <br> To obtain an instance of this class, refer to @link NXOpen::Preferences::SessionPreferences  NXOpen::Preferences::SessionPreferences @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_PREFERENCESEXPORT  SubdivisionModelingPreferences
        {
            /** Vertex display style. */
            public: enum VertexStyleTypes
            {
                VertexStyleTypesSquare/** square */ ,
                VertexStyleTypesTriangle/** triangle */ ,
                VertexStyleTypesCircle/** circle */ ,
                VertexStyleTypesPlus/** plus */ ,
                VertexStyleTypesCross/** cross */ 
            };

            /** Vertex size type. */
            public: enum VertexSizeTypes
            {
                VertexSizeTypesSmall/** small */ ,
                VertexSizeTypesMedium/** medium */ ,
                VertexSizeTypesLarge/** large */ 
            };

            /** Display modes of subdivision cage and resulting body. */
            public: enum DisplayModes
            {
                DisplayModesCageAndBody/** Display both cage and body */,
                DisplayModesCageOnly/** Display cage only */,
                DisplayModesBodyOnly/** Display body only */
            };

            /** Cage polyline vertex style. */
            public: enum CagePolylineVertexStyles
            {
                CagePolylineVertexStylesNone/** none */ ,
                CagePolylineVertexStylesSquare/** square */ ,
                CagePolylineVertexStylesTriangle/** triangle */ ,
                CagePolylineVertexStylesCircle/** circle */ ,
                CagePolylineVertexStylesPlus/** plus */ ,
                CagePolylineVertexStylesCross/** cross */ 
            };

            /** Cage polyline vertex size type. */
            public: enum CagePolylineVertexSizes
            {
                CagePolylineVertexSizesSmall/** small */ ,
                CagePolylineVertexSizesMedium/** medium */ ,
                CagePolylineVertexSizesLarge/** large */ 
            };

            private: SubdivisionModelingPreferencesImpl * m_subdivisionmodelingpreferences_impl;
            private: NXOpen::Preferences::SessionPreferences* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SubdivisionModelingPreferences(NXOpen::Preferences::SessionPreferences *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SubdivisionModelingPreferences();
            /**Returns  the line color. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int LineColor
            (
            );
            /**Sets  the line color. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetLineColor
            (
                int lineColor /** linecolor */ 
            );
            /**Returns  the smooth edge line font. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int LineFont
            (
            );
            /**Sets  the smooth edge line font. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetLineFont
            (
                int lineFont /** linefont */ 
            );
            /**Returns  the sharp edge line font. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int SharpEdgeLineFont
            (
            );
            /**Sets  the sharp edge line font. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetSharpEdgeLineFont
            (
                int lineFont /** linefont */ 
            );
            /**Returns  the line width. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int LineWidth
            (
            );
            /**Sets  the line width. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetLineWidth
            (
                int lineWidth /** linewidth */ 
            );
            /**Returns  the vertex color. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int VertexColor
            (
            );
            /**Sets  the vertex color. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetVertexColor
            (
                int vertexColor /** vertexcolor */ 
            );
            /**Returns  the vertex style. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SubdivisionModelingPreferences::VertexStyleTypes VertexStyle
            (
            );
            /**Sets  the vertex style. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetVertexStyle
            (
                NXOpen::Preferences::SubdivisionModelingPreferences::VertexStyleTypes vertexStyle /** vertexstyle */ 
            );
            /**Returns  the vertex size. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SubdivisionModelingPreferences::VertexSizeTypes VertexSize
            (
            );
            /**Sets  the vertex size. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetVertexSize
            (
                NXOpen::Preferences::SubdivisionModelingPreferences::VertexSizeTypes vertexSize /** vertexsize */ 
            );
            /**Returns  the constrained entity color. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int ConstraintColor
            (
            );
            /**Sets  the constrained entity color. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetConstraintColor
            (
                int color /** color */ 
            );
            /**Returns  the flag indicating if the hidden edge of the cage are visible or not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsXRayCage
            (
            );
            /**Sets  the flag indicating if the hidden edge of the cage are visible or not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetXRayCage
            (
                bool isXRayCage /** isxraycage */ 
            );
            /**Returns  the flag indicating if the edge weights are displayed or not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool CanShowWeight
            (
            );
            /**Sets  the flag indicating if the edge weights are displayed or not. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCanShowWeight
            (
                bool showWeight /** showweight */ 
            );
            /**Returns  the percentage translucency of the highlighted face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: int HighlightFaceTranslucency
            (
            );
            /**Sets  the percentage translucency of the highlighted face. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetHighlightFaceTranslucency
            (
                int highlightLineTranslucency /** highlightlinetranslucency */ 
            );
            /**Returns  the flag indicating if the hidden topology selection is allowed or not. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CanAllowBackSideSelection
            (
            );
            /**Sets  the flag indicating if the hidden topology selection is allowed or not. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCanAllowBackSideSelection
            (
                bool allow /** allow */ 
            );
            /**Returns  the mesh and solid body display option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SubdivisionModelingPreferences::DisplayModes DisplayMode
            (
            );
            /**Sets  the mesh and solid body display option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetDisplayMode
            (
                NXOpen::Preferences::SubdivisionModelingPreferences::DisplayModes displayOption /** displayoption */ 
            );
            /**Returns  the cage polyline color. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int CagePolylineColor
            (
            );
            /**Sets  the cage polyline color. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCagePolylineColor
            (
                int lineColor /** linecolor */ 
            );
            /**Returns  the cage polyline font. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int CagePolylineFont
            (
            );
            /**Sets  the cage polyline font. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCagePolylineFont
            (
                int lineFont /** linefont */ 
            );
            /**Returns  the cage polyline width. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int CagePolylineWidth
            (
            );
            /**Sets  the cage polyline width. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCagePolylineWidth
            (
                int lineWidth /** linewidth */ 
            );
            /**Returns  the cage polyline vertex color. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int CagePolylineVertexColor
            (
            );
            /**Sets  the cage polyline vertex color. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCagePolylineVertexColor
            (
                int vertexColor /** vertexcolor */ 
            );
            /**Returns  the cage polyline vertex style. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SubdivisionModelingPreferences::CagePolylineVertexStyles CagePolylineVertexStyle
            (
            );
            /**Sets  the cage polyline vertex style. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCagePolylineVertexStyle
            (
                NXOpen::Preferences::SubdivisionModelingPreferences::CagePolylineVertexStyles vertexStyle /** vertexstyle */ 
            );
            /**Returns  the cage polyline vertex size. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Preferences::SubdivisionModelingPreferences::CagePolylineVertexSizes CagePolylineVertexSize
            (
            );
            /**Sets  the cage polyline vertex size. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_subdivision (" NX SUBDIVISION") OR nx_polygon_modeling (" NX Polygon Modeling") */
            public: void SetCagePolylineVertexSize
            (
                NXOpen::Preferences::SubdivisionModelingPreferences::CagePolylineVertexSizes vertexSize /** vertexsize */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
