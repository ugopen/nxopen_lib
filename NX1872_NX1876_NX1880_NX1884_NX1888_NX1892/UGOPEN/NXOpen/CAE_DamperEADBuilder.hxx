#ifndef NXOpen_CAE_DAMPEREADBUILDER_HXX_INCLUDED
#define NXOpen_CAE_DAMPEREADBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DamperEADBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DamperEADBuilder;
    }
    class Builder;
    namespace CAE
    {
        class PhysicalPropertyTable;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    class Expression;
    namespace CAE
    {
        class _DamperEADBuilderBuilder;
        class DamperEADBuilderImpl;
        /** This class provides Damper Associated Data Support  <br> To create a new instance of this class, use @link NXOpen::CAE::NodeElementManager::CreateDamperEadBuilder  NXOpen::CAE::NodeElementManager::CreateDamperEadBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        RotationalViscousDamping.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        TranslationalViscousDamping.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        ViscousDampingState </td> <td> 
         
        Apply </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DamperEADBuilder : public NXOpen::Builder
        {
            /** indicates to apply or clear the viscous damping property upon commit */
            public: enum State
            {
                StateApply/** apply the property */,
                StateClear/** clear the property */,
                StateIgnore/** ignore the property */
            };

            /** indicates which translational degree of freedom to use as component end */
            public: enum TranslationalComponentEnd
            {
                TranslationalComponentEndX/** X translational */,
                TranslationalComponentEndY/** Y translational */,
                TranslationalComponentEndZ/** Z translational */
            };

            /** indicates which rotational degree of freedom to use as component end */
            public: enum RotationalComponentEnd
            {
                RotationalComponentEndRx/** RX rotational */,
                RotationalComponentEndRy/** RY rotational */,
                RotationalComponentEndRz/** RZ rotational */
            };

            private: DamperEADBuilderImpl * m_dampereadbuilder_impl;
            private: friend class  _DamperEADBuilderBuilder;
            protected: DamperEADBuilder();
            public: ~DamperEADBuilder();
            /**Returns  the select element operator selects elements 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::SelectElementsBuilder * Elements
            (
            );
            /**Returns  the expression viscous damping operator gets damper translational viscous damping value 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * TranslationalViscousDamping
            (
            );
            /**Returns  the expression rotational viscous damping operator gets damper rotational viscous damping value 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::Expression * RotationalViscousDamping
            (
            );
            /**Returns  the viscous damping state drives the action upon commit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DamperEADBuilder::State ViscousDampingState
            (
            );
            /**Sets  the viscous damping state drives the action upon commit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetViscousDampingState
            (
                NXOpen::CAE::DamperEADBuilder::State viscousDampingState /** viscousdampingstate */ 
            );
            /**Returns  the physical property table state state drives the action upon commit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DamperEADBuilder::State PhysicalPropertyTableState
            (
            );
            /**Sets  the physical property table state state drives the action upon commit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPhysicalPropertyTableState
            (
                NXOpen::CAE::DamperEADBuilder::State physicalPropertyTableState /** physicalpropertytablestate */ 
            );
            /**Returns  the physical property table of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::PhysicalPropertyTable * PhysicalPropertyTable
            (
            );
            /**Sets  the physical property table of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetPhysicalPropertyTable
            (
                NXOpen::CAE::PhysicalPropertyTable * physicalPropertyTable /** physicalpropertytable */ 
            );
            /**Returns  the component end a state drives the action upon commit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DamperEADBuilder::State ComponentEndAState
            (
            );
            /**Sets  the component end a state drives the action upon commit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetComponentEndAState
            (
                NXOpen::CAE::DamperEADBuilder::State componentEndAState /** componentendastate */ 
            );
            /**Returns  the component end b state drives the action upon commit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DamperEADBuilder::State ComponentEndBState
            (
            );
            /**Sets  the component end b state drives the action upon commit 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetComponentEndBState
            (
                NXOpen::CAE::DamperEADBuilder::State componentEndBState /** componentendbstate */ 
            );
            /**Returns  the translational component end A of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DamperEADBuilder::TranslationalComponentEnd TranslationalComponentEndA
            (
            );
            /**Sets  the translational component end A of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTranslationalComponentEndA
            (
                NXOpen::CAE::DamperEADBuilder::TranslationalComponentEnd translationalComponentEndA /** translationalcomponentenda */ 
            );
            /**Returns  the translational component end B of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DamperEADBuilder::TranslationalComponentEnd TranslationalComponentEndB
            (
            );
            /**Sets  the translational component end B of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetTranslationalComponentEndB
            (
                NXOpen::CAE::DamperEADBuilder::TranslationalComponentEnd translationalComponentEndB /** translationalcomponentendb */ 
            );
            /**Returns  the rotational component end A of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DamperEADBuilder::RotationalComponentEnd RotationalComponentEndA
            (
            );
            /**Sets  the rotational component end A of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetRotationalComponentEndA
            (
                NXOpen::CAE::DamperEADBuilder::RotationalComponentEnd rotationalComponentEndA /** rotationalcomponentenda */ 
            );
            /**Returns  the rotational component end B of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::DamperEADBuilder::RotationalComponentEnd RotationalComponentEndB
            (
            );
            /**Sets  the rotational component end B of the damper element 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetRotationalComponentEndB
            (
                NXOpen::CAE::DamperEADBuilder::RotationalComponentEnd rotationalComponentEndB /** rotationalcomponentendb */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
