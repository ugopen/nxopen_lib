#ifndef NXOpen_CAE_CONNECTIONS_IMASSCONNECTIVITY_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_IMASSCONNECTIVITY_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_IMassConnectivity.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_Types.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class IMassConnectivity;
        }
    }
    class Expression;
    class INXObject;
    class TaggedObject;
    namespace CAE
    {
        namespace Connections
        {
            /**  @brief  This class represents an Interface to the Lumped Mass panel connection parameters.  

              
             <br>  Created in NX1847.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  IMassConnectivity : public virtual NXOpen::INXObject
            {
                public: virtual ~IMassConnectivity() {}
                /**Returns  the mass connection type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::MassConnectivityType MassConnectivityType
                (
                ) = 0;
                /**Sets  the mass connection type 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetMassConnectivityType
                (
                    NXOpen::CAE::Connections::MassConnectivityType type /** Mass connect type */
                ) = 0;
                /**Returns  the maximum distance from definition point to center of support element 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * MaxDistanceTolerance
                (
                ) = 0;
                /**Returns  the expansion radius 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ExpansionRadiusTolerance
                (
                ) = 0;
                /**Returns  the expansion radius factor 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ExpansionRadiusFactorTolerance
                (
                ) = 0;
                /**Returns  the search tolerance type
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::RingSearchType RingSearchType
                (
                ) = 0;
                /**Sets  the search tolerance type
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRingSearchType
                (
                    NXOpen::CAE::Connections::RingSearchType type /** Ring search type */
                ) = 0;
                /**Returns  the panel search distance 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * PanelSearchDistance
                (
                ) = 0;
                /**Returns  the panel search type
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::PanelSearchType PanelSearchType
                (
                ) = 0;
                /**Sets  the panel search type
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetPanelSearchType
                (
                    NXOpen::CAE::Connections::PanelSearchType type /** Panel search type */
                ) = 0;
                /** Gets panels  @return  Panels entities 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::TaggedObject *> GetPanels
                (
                ) = 0;
                /** Add panels 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void AddPanels
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Panels entities */
                ) = 0;
                /** Remove panels 
                 <br>  Created in NX1847.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void RemovePanels
                (
                    const std::vector<NXOpen::TaggedObject *> & entities /** Panels entities */
                ) = 0;
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
