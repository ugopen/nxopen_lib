#ifndef NXOpen_TDP_PUBLISHERBUILDER_HXX_INCLUDED
#define NXOpen_TDP_PUBLISHERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     TDP_PublisherBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libtdpopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace TDP
    {
        class PublisherBuilder;
    }
    class Builder;
    class SelectViewList;
    namespace TDP
    {
        class _PublisherBuilderBuilder;
        class PublisherBuilderImpl;
        /** 
                This builder is used to publish Technical Data Package, or TDP for short.
                It collects all the necessary inputs from a TDP template and other user options
                before publishing TDP.
             <br> To create a new instance of this class, use @link NXOpen::TDP::Manager::CreateTdpPublisherBuilder  NXOpen::TDP::Manager::CreateTdpPublisherBuilder @endlink  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class TDPOPENCPPEXPORT  PublisherBuilder : public NXOpen::Builder
        {
            /** This enum indicates how the views are selected for publishing TDP.*/
            public: enum ViewSelectionType
            {
                ViewSelectionTypeSelectedViews/** selected views */ ,
                ViewSelectionTypeAllDisclosedViews/** all disclosed views */ ,
                ViewSelectionTypeAllUserDefinedViews/** all user defined views */ ,
                ViewSelectionTypeAllViews/** all views */ 
            };

            /** This enum indicates the level of accuracy for publishing a 3D PDF TDP.*/
            public: enum ModelAccuracyType
            {
                ModelAccuracyTypeMaximum/** maximum */ ,
                ModelAccuracyTypeHigh/** high */ ,
                ModelAccuracyTypeMedium/** medium */ ,
                ModelAccuracyTypeLow/** low */ 
            };

            /** This enum indicates the results of publishing the TDP.*/
            public: enum PublishResult
            {
                PublishResultSuccess/** success */ ,
                PublishResultSuccessWithInconsistency/** success with inconsistency */ ,
                PublishResultSuccessWithError/** success with error */ ,
                PublishResultFail/** fail */ 
            };

            private: PublisherBuilderImpl * m_publisherbuilder_impl;
            private: friend class  _PublisherBuilderBuilder;
            protected: PublisherBuilder();
            public: ~PublisherBuilder();
            /** This method publishes the TDP with builder's data.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_tdp (" NX Technical Data Package") */
            public: NXOpen::TDP::PublisherBuilder::PublishResult Publish
            (
            );
            /** This method returns the name of the template file that is being worked on.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString GetWorkTemplateFilename
            (
            );
            /** This method sets the template to publish TDP and repopulates the text table.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetWorkTemplateFile
            (
                const NXString & templateFilename /** templatefilename */ 
            );
            /** This method sets the template to publish TDP and repopulates the text table.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetWorkTemplateFile
            (
                const char * templateFilename /** templatefilename */ 
            );
            /** This method sets the value of the text with the given label, if the text exists.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool SetTextValueOfLabel
            (
                const NXString & label /** label */ ,
                const NXString & value /** value */ 
            );
            /** This method sets the value of the text with the given label, if the text exists.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            bool SetTextValueOfLabel
            (
                const char * label /** label */ ,
                const char * value /** value */ 
            );
            /** This method checks to see if a text with the given label exists for the selected template.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool HasTextOfLabel
            (
                const NXString & label /** label */ 
            );
            /** This method checks to see if a text with the given label exists for the selected template.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            bool HasTextOfLabel
            (
                const char * label /** label */ 
            );
            /** This method returns the value of the text with the given label, if the text exists.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool GetTextValueOfLabel
            (
                const NXString & label /** label */ ,
                NXString* value /** value */ 
            );
            /** This method returns the value of the text with the given label, if the text exists.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            bool GetTextValueOfLabel
            (
                const char * label /** label */ ,
                NXString* value /** value */ 
            );
            /** This method returns the list of text labels.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetTextLabels
            (
                std::vector<NXString> & labels /** labels */ 
            );
            /** This method sets the password.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetPassword
            (
                const NXString & password /** password */ 
            );
            /** This method sets the password.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetPassword
            (
                const char * password /** password */ 
            );
            /**Returns  the view selection method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TDP::PublisherBuilder::ViewSelectionType ViewSelection
            (
            );
            /**Sets  the view selection method 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetViewSelection
            (
                NXOpen::TDP::PublisherBuilder::ViewSelectionType viewSelection /** viewselection */ 
            );
            /**Returns  
                        the selected views to publish TDP for, if the view selection method is set to 
                        @link NXOpen::TDP::PublisherBuilder::ViewSelectionTypeSelectedViews NXOpen::TDP::PublisherBuilder::ViewSelectionTypeSelectedViews@endlink 
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectViewList * SelectedViews
            (
            );
            /**Returns  the output filename for the TDP 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputFilename
            (
            );
            /**Sets  the output filename for the TDP 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetOutputFilename
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the output filename for the TDP 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void SetOutputFilename
            (
                const char * filename /** filename */ 
            );
            /**Returns  the flag whether to use password or not 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool UsePassword
            (
            );
            /**Sets  the flag whether to use password or not 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetUsePassword
            (
                bool usePassword /** usepassword */ 
            );
            /**Returns  
                        the 3D PDF model accuracy, if the template to be published is a 3D PDF template
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TDP::PublisherBuilder::ModelAccuracyType ModelAccuracy
            (
            );
            /**Sets  
                        the 3D PDF model accuracy, if the template to be published is a 3D PDF template
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetModelAccuracy
            (
                NXOpen::TDP::PublisherBuilder::ModelAccuracyType modelAccuracy /** modelaccuracy */ 
            );
            /**Returns  
                        the flag whether to use lossy compression for 3D PDF model, 
                        if the template to be published is a 3D PDF template
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool Compression
            (
            );
            /**Sets  
                        the flag whether to use lossy compression for 3D PDF model, 
                        if the template to be published is a 3D PDF template
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCompression
            (
                bool compression /** compression */ 
            );
            /** This method adds the new attachment filename to the end of the attachment list.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void AddAttachment
            (
                const NXString & filename /** filename */ 
            );
            /** This method adds the new attachment filename to the end of the attachment list.
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            void AddAttachment
            (
                const char * filename /** filename */ 
            );
            /** 
                        This method deletes the attachment filenames at the indicated indices 
                        and re-populate the attachment filename list with new continuous indices. 
                    
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void DeleteAttachmentAtIndices
            (
                const std::vector<int> & indices /** indices */ 
            );
            /** This method returns the list of attachment filenames 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAttachments
            (
                std::vector<NXString> & attachments /** attachments */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
