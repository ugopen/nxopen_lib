#ifndef NXOpen_POSITIONING_CONSTRAINT_HXX_INCLUDED
#define NXOpen_POSITIONING_CONSTRAINT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Positioning_Constraint.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/Positioning_ConstraintReference.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_positioning_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Positioning
    {
        class Constraint;
    }
    class Expression;
    class NXObject;
    namespace Positioning
    {
        class ConstraintReference;
    }
    namespace Positioning
    {
        class DisplayedConstraint;
    }
    namespace Positioning
    {
        class _ConstraintBuilder;
        class ConstraintImpl;
        /**
                Constraints for use in positioning objects in NX.

                For constraints between components, the subclass @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  should be used by preference.
             <br> 
                Some constraint types have an @link NXOpen::Expression NXOpen::Expression@endlink  associated with them, which the user can change to determine the value 
                of that constraint. This expression applies to distance and angle constraints, and all joint types. The user can choose for this expression 
                value to be driven by the system, so it will not have a fixed value set by the user.  
             <br> 
             <br>         
                Some constraint types with values can be given limits. If the constraint is driven, the solver will always try to solve it to remain within 
                those limits, and the constraint will fail if this is not possible. If the constraint is driving, it will have a failure status if its value 
                is set to violate those limits (though it will still solve the model). 
             <br> 
         <br> To create a new instance of this class, use @link NXOpen::Positioning::Positioner::CreateConstraint  NXOpen::Positioning::Positioner::CreateConstraint @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_POSITIONINGEXPORT  Constraint : public NXOpen::NXObject
        {
            /** Specifies the type of a constraint. */
            public: enum Type
            {
                TypeUndefined/** No type */,
                TypeTouch/** Two geometries touch */,
                TypeConcentric/** Two geometries share a center and plane */,
                TypeFix/** One movable object fixed */,
                TypeDistance/** Two geometries have a specified distance between them */,
                TypeParallel/** Two geometries are parallel */,
                TypePerpendicular/** Two geometries are perpendicular */,
                TypeCenter12/** One geometry is positioned mid-way between two others */,
                TypeCenter22/** An implicit plane between two geometries of one movable object is positioned mid-way between two others */,
                TypeAngle/** Two geometries have a specified angle between them */,
                TypeFit/** Two geometries are coincident */,
                TypeBond/** A number of movable objects form a rigid group */,
                TypeOrientAngle/** Two geometries have a specified angle between them about an axis */,
                TypeSplineData/** A spline and its defining points */,
                TypeSplineLength/** Constrains the curve length of a spline */,
                TypeLinearPattern/** For internal use only */,
                TypeCircularPattern/** For internal use only */,
                TypeLinear2dPattern/** For internal use only */,
                TypeRadiantPattern/** For internal use only */,
                TypeAlignLock/** Two geometries are constrained to have a common axis and no rotation about it */,
                TypeCommonOffsetTransform/** For internal use only */,
                TypeHinge/** Two objects along an axis of rotation */,
                TypeSlider/** Two objects along a linear axis */,
                TypeCylindrical/** Two objects along a rotatable linear axis */,
                TypeBall/** Two objects at a shared point */,
                TypeScrew/** For internal use only */,
                TypeGear/** For internal use only */,
                TypeRackPinion/** For internal use only */,
                TypeCable/** For internal use only */
            };

            /** Specifies alignment of directed geometries used in a constraint. */
            public: enum Alignment
            {
                AlignmentInferAlign/** Allow the solver to decide the alignment */,
                AlignmentCoAlign/** Directions are the same */,
                AlignmentContraAlign/** Directions are opposite */
            };

            /** Specifies the status of a constraint. */
            public: enum SolverStatus
            {
                SolverStatusNewlyCreated/** Not evaluated or suppressed since creation */,
                SolverStatusSuppressed/** Constraint is suppressed */,
                SolverStatusOutOfDate/** Needs evaluation */,
                SolverStatusOverConstrained/** Conflicts with other constraints */,
                SolverStatusNotConsistentDims/** Cannot solve with current dimension values. Model fully defined */,
                SolverStatusNotConsistentOther/** Cannot find a solution. Model underdefined */,
                SolverStatusNotConsistentUnknown/** Cannot find a solution */,
                SolverStatusBetweenFixed/** Attempt to put constraint between two fixed objects */,
                SolverStatusNotSolved/** Not evaluated because other parts of the model are over defined or inconsistent */,
                SolverStatusSolved/** The constraint is solved and satisfied */,
                SolverStatusCannotSolve/** The constraint has invalid geometry and could not be passed to the solver */,
                SolverStatusDelayed/** The constraint is delayed and will not solve */,
                SolverStatusIgnoredInArrangement/** The current arrangement ignores all constraints and they will not solve */,
                SolverStatusInternallyInconsistent/** The constraint references invalid geometry for this constraint type */,
                SolverStatusUnloadedGeometry/** The constraint could not solve as some geometry is unloaded */,
                SolverStatusPendingConvertedMc/** The constraint has been converted from a mating condition and has not solved since conversion */,
                SolverStatusConflictingWithWave/** The constraint has been suppressed because it's conflicting with WAVE */,
                SolverStatusInconsistentLimits/** The constraint has limits that are inconsistent and it could not be passed to the solver */,
                SolverStatusBeyondLimits/** The value of the expression of the constraint is beyond its limits and it could not be passed to the solver */
            };

            /** Specifies how the spline points define the shape of the spline. */
            public: enum SplineType
            {
                SplineTypeByPoles/** Spline points define control points. */,
                SplineTypeByPoints/** Spline points define interpolation/through points. */,
                SplineTypeInvalid/** Not a valid spline constraint. */
            };

            private: ConstraintImpl * m_constraint_impl;
            private: friend class  _ConstraintBuilder;
            protected: Constraint();
            public: ~Constraint();
            /** 
                    Gets all the @link NXOpen::Positioning::ConstraintReference NXOpen::Positioning::ConstraintReference@endlink s for the 
                    constraint.
                 @return  ConstraintReferences used by this constraint 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: std::vector<NXOpen::Positioning::ConstraintReference *> GetReferences
            (
            );
            /** 
                    Removes a @link NXOpen::Positioning::ConstraintReference NXOpen::Positioning::ConstraintReference@endlink  from the constraint. 
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void DeleteConstraintReference
            (
                NXOpen::Positioning::ConstraintReference * constraintReference /** The constraint reference to remove. A list 
                                                                                                  of references can be obtained via
                                                                                                  @link NXOpen::Positioning::Constraint::GetReferences NXOpen::Positioning::Constraint::GetReferences@endlink . */
            );
            /** 
                    Adds geometry to a constraint and sets the movable object
                    to be constrained.
                 @return  The new @link NXOpen::Positioning::ConstraintReference NXOpen::Positioning::ConstraintReference@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ConstraintReference * CreateConstraintReference
            (
                NXOpen::NXObject * movableObject /** Object to be positioned by constraint */,
                NXOpen::NXObject * geometry /** Geometry used to define constraint */,
                bool usesAxis /** Use axis of geometry */,
                bool isIndirect /** Geometry is to be used indirectly to identify geometry in another part */
            );
            /** 
                    Adds geometry to a constraint and sets the movable object
                    to be constrained.  
                 @return  The new @link NXOpen::Positioning::ConstraintReference NXOpen::Positioning::ConstraintReference@endlink  
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ConstraintReference * CreateConstraintReference
            (
                NXOpen::NXObject * movableObject /** Object to be positioned by constraint */,
                NXOpen::NXObject * geometry /** Geometry used to define constraint */,
                bool usesAxis /** Use axis of geometry */,
                bool isIndirect /** Geometry is to be used indirectly to identify geometry in another part */,
                bool usePortRotate /** Use rotate vector of @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink . */
            );
            /** 
                    Adds geometry to a constraint and sets the movable object
                    to be constrained, replacing the properties of an existing
                    reference of the constraint.
                
             <br>  Created in NX5.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EditConstraintReference
            (
                NXOpen::Positioning::ConstraintReference * constraintReference /** The @link NXOpen::Positioning::ConstraintReference NXOpen::Positioning::ConstraintReference@endlink  whose properties are to be changed */,
                NXOpen::NXObject * movableObject /** Object to be positioned by constraint */,
                NXOpen::NXObject * geometry /** Geometry used to define constraint */,
                bool usesAxis /** Use axis of geometry */,
                bool isIndirect /** Geometry is to be used indirectly to identify geometry in another part */,
                bool usePortRotate /** Use rotate vector of @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink . */
            );
            /**Returns  
                    the constraint type.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::Type ConstraintType
            (
            );
            /**Sets  
                    the constraint type.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConstraintType
            (
                NXOpen::Positioning::Constraint::Type constraintType /** constraint type */ 
            );
            /**Sets  
                    the alignment behavior for the constraint.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConstraintAlignment
            (
                NXOpen::Positioning::Constraint::Alignment alignment /** Alignment behavior for constraint */
            );
            /**Returns  
                    the alignment behavior for the constraint.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::Alignment ConstraintAlignment
            (
            );
            /** 
                    Reverses the constraint alignment if this is possible.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void FlipAlignment
            (
            );
            /**Sets  
                    the suppression state for the constraint. In a @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  this is the state in the @link NXOpen::Positioning::ComponentPositioner::PrimaryArrangement NXOpen::Positioning::ComponentPositioner::PrimaryArrangement @endlink and @link NXOpen::Positioning::ComponentPositioner::SetPrimaryArrangement NXOpen::Positioning::ComponentPositioner::SetPrimaryArrangement @endlink ."
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSuppressed
            (
                bool suppressed /**  The suppression state */
            );
            /**Returns  
                    the suppression state for the constraint. In a @link NXOpen::Positioning::ComponentConstraint NXOpen::Positioning::ComponentConstraint@endlink  this is the state in the @link NXOpen::Positioning::ComponentPositioner::PrimaryArrangement NXOpen::Positioning::ComponentPositioner::PrimaryArrangement @endlink and @link NXOpen::Positioning::ComponentPositioner::SetPrimaryArrangement NXOpen::Positioning::ComponentPositioner::SetPrimaryArrangement @endlink ."
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Suppressed
            (
            );
            /** 
                    The @link NXOpen::Expression NXOpen::Expression@endlink  of a constraint - only used if this 
                    constraint type supports an expression, such as a distance or angle constraint,
                    or a joint. 
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetExpression
            (
                const NXString & expression /** Name of expression used in the constraint */
            );
            /** 
                    The @link NXOpen::Expression NXOpen::Expression@endlink  of a constraint - only used if this 
                    constraint type supports an expression, such as a distance or angle constraint,
                    or a joint. 
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetExpression
            (
                const char * expression /** Name of expression used in the constraint */
            );
            /**Returns  
                    the @link NXOpen::Expression NXOpen::Expression@endlink  of a constraint.
                    The expression will be unused unless this constraint type supports an expression, 
                    such as a distance or angle constraint, or a joint.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * Expression
            (
            );
            /** 
                    Returns the solver status of a constraint.
                 @return  The solver status of the constraint 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::SolverStatus GetConstraintStatus
            (
            );
            /** 
                    Set a hint as to which alignment should be used by the
                    solver for this constraint.
                    
                    If the constraint does not solve using this alignment
                    then the hint will be ignored.                
                    
                    The hint can only have an effect when the alignment of
                    the constraint, as returned by @link NXOpen::Positioning::Constraint::ConstraintAlignment NXOpen::Positioning::Constraint::ConstraintAlignment@endlink ,
                    is @link NXOpen::Positioning::Constraint::AlignmentInferAlign NXOpen::Positioning::Constraint::AlignmentInferAlign@endlink .
                    
                    The hint can only have an effect when the constraint has been
                    explicitly added to a @link NXOpen::Positioning::Network NXOpen::Positioning::Network@endlink .
                    
                    Passing in @link NXOpen::Positioning::Constraint::AlignmentInferAlign NXOpen::Positioning::Constraint::AlignmentInferAlign@endlink  as the alignment
                    argument will have no effect.
                    
                    The hint is forgotten after an update.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAlignmentHint
            (
                NXOpen::Positioning::Constraint::Alignment alignment /** The alignment hint */
            );
            /**Sets  
                    the persistent state of the constraint.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPersistent
            (
                bool persistent /**  The persistent state */
            );
            /**Returns  
                    the persistent state of the constraint.
                
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Persistent
            (
            );
            /**Sets  the flag marking the constraint as an "automatic" constraint.  Automatic constraints are
                    constraints created by the system, but are visible and editable by the user.  Automatic
                    constraints are automatically deleted when one of the referenced objects are deleted
                    by update. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAutomatic
            (
                bool isauto /** The automatic state */
            );
            /**Returns  the flag marking the constraint as an "automatic" constraint.  Automatic constraints are
                    constraints created by the system, but are visible and editable by the user.  Automatic
                    constraints are automatically deleted when one of the referenced objects are deleted
                    by update. 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool Automatic
            (
            );
            /**
                    Returns a textual conversion report this constraint from when it was converted from a
                    Mating Constraint to an Assembly Constraint. If this isn't a converted constraint
                    or there were no problems converting this constraint, then an empty string is returned.
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GenerateConversionReport
            (
                std::vector<NXString> & lines /** The text lines of the conversion report */
            );
            /** 
                    Reverses the constraint direction.  This operation reverses the @link NXOpen::Positioning::ConstraintReference::Order NXOpen::Positioning::ConstraintReference::Order@endlink 
                    on each @link NXOpen::Positioning::ConstraintReference NXOpen::Positioning::ConstraintReference@endlink .
                    So "Inside" becomes "Outside", "Outside" becomes "Inside" and "Unknown" remains as it is.
                
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ReverseDirection
            (
            );
            /**Returns  the type of the spline.  Only valid if the type of the constraint is
                  set to @link NXOpen::Positioning::Constraint::TypeSplineData NXOpen::Positioning::Constraint::TypeSplineData@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::SplineType SplinePointsType
            (
            );
            /**Sets  the type of the spline.  Only valid if the type of the constraint is
                  set to @link NXOpen::Positioning::Constraint::TypeSplineData NXOpen::Positioning::Constraint::TypeSplineData@endlink . 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSplinePointsType
            (
                NXOpen::Positioning::Constraint::SplineType splineType /** spline type */ 
            );
            /**
                    Gets the @link NXOpen::Positioning::DisplayedConstraint NXOpen::Positioning::DisplayedConstraint@endlink  that is in the same part as that of the constraint.

                    Note that this will be NULL if the part has not been the displayed part since the constraint was created.
                
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::DisplayedConstraint * GetDisplayedConstraint
            (
            );
            /**Returns  
                    the driven state of the expression of a constraint.
                    The value of a driven expression can change. Driven expression values are controlled 
                    by the solver and cannot be edited by the user. Only certain constraints with an expression
                    can have their expression made driven, such as a distance or angle constraint, or a joint.
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool ExpressionDriven
            (
            );
            /**Sets  
                    the driven state of the expression of a constraint.
                    The value of a driven expression can change. Driven expression values are controlled 
                    by the solver and cannot be edited by the user. Only certain constraints with an expression
                    can have their expression made driven, such as a distance or angle constraint, or a joint.
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetExpressionDriven
            (
                bool expressionDriven /** Whether or not the expression is driven. */
            );
            /**Returns  
                    the upper limit of the expression of a constraint. 
                    The limit expression will only be used for certain constraint types, and they must have an expression.  
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool UpperLimitEnabled
            (
            );
            /**Sets  
                    the upper limit of the expression of a constraint. 
                    The limit expression will only be used for certain constraint types, and they must have an expression.  
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetUpperLimitEnabled
            (
                bool hasLimit /** Whether or not the upper limit of the expression is enabled. */
            );
            /**Returns  
                    the lower limit of the expression of a constraint. 
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool LowerLimitEnabled
            (
            );
            /**Sets  
                    the lower limit of the expression of a constraint. 
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLowerLimitEnabled
            (
                bool hasLimit /** Whether or not the lower limit of the expression is enabled. */
            );
            /**Returns  
                    the upper limit of the expression of a constraint. 
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * UpperLimitExpression
            (
            );
            /**Returns  
                    the upper limit of the expression right hand side of a constraint.
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString UpperLimitRightHandSide
            (
            );
            /**Sets  
                    the upper limit of the expression right hand side of a constraint.
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetUpperLimitRightHandSide
            (
                const NXString & limitRightHandSide /** The expression to be applied to the upper limit of the expression. */
            );
            /**Sets  
                    the upper limit of the expression right hand side of a constraint.
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetUpperLimitRightHandSide
            (
                const char * limitRightHandSide /** The expression to be applied to the upper limit of the expression. */
            );
            /**Returns  
                    the lower limit of the expression of a constraint.
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * LowerLimitExpression
            (
            );
            /**Returns  
                    the lower limit of the expression right hand side of a constraint. 
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString LowerLimitRightHandSide
            (
            );
            /**Sets  
                    the lower limit of the expression right hand side of a constraint. 
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetLowerLimitRightHandSide
            (
                const NXString & limitRightHandSide /** The expression to be applied to the lower limit of the expression. */
            );
            /**Sets  
                    the lower limit of the expression right hand side of a constraint. 
                    The limit expression will only be used for certain constraint types, and they must have an expression. 
                
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetLowerLimitRightHandSide
            (
                const char * limitRightHandSide /** The expression to be applied to the lower limit of the expression. */
            );
            /** Changes the constraint to solve with the latest version of the constraint code. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void Renew
            (
            );
            /**Returns  
                    the second @link NXOpen::Expression NXOpen::Expression@endlink  of a constraint. 
                    The second expression will be unused unless this constraint type supports a second expression. 
                    This only applies to cylindrical joints.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * SecondExpression
            (
            );
            /**Returns  
                    the second expression right hand side of a constraint. 
                    The second expression right hand side will be unused unless this constraint type supports a second expression. 
                    This only applies to cylindrical joints.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString SecondExpressionRightHandSide
            (
            );
            /**Sets  
                    the second expression right hand side of a constraint. 
                    The second expression right hand side will be unused unless this constraint type supports a second expression. 
                    This only applies to cylindrical joints.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSecondExpressionRightHandSide
            (
                const NXString & secondExpressionRightHandSide /** The second expression to be applied to the constraint. */
            );
            /**Sets  
                    the second expression right hand side of a constraint. 
                    The second expression right hand side will be unused unless this constraint type supports a second expression. 
                    This only applies to cylindrical joints.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetSecondExpressionRightHandSide
            (
                const char * secondExpressionRightHandSide /** The second expression to be applied to the constraint. */
            );
            /**Returns  
                    the driven state of the second expression of a constraint.
                    The value of the driven second expression can change. Driven second expression values are controlled 
                    by the solver and cannot be edited by the user. This only applies to cylindrical joints.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool SecondExpressionDriven
            (
            );
            /**Sets  
                    the driven state of the second expression of a constraint.
                    The value of the driven second expression can change. Driven second expression values are controlled 
                    by the solver and cannot be edited by the user. This only applies to cylindrical joints.
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSecondExpressionDriven
            (
                bool secondExpressionDriven /** Whether or not the second expression is driven. */
            );
            /**Returns  
                    the upper limit of the second expression of a constraint. 
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool SecondUpperLimitEnabled
            (
            );
            /**Sets  
                    the upper limit of the second expression of a constraint. 
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSecondUpperLimitEnabled
            (
                bool hasLimit /** Whether or not the upper limit of the second expression is enabled. */
            );
            /**Returns  
                    the lower limit of the second expression of a constraint. 
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool SecondLowerLimitEnabled
            (
            );
            /**Sets  
                    the lower limit of the second expression of a constraint. 
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSecondLowerLimitEnabled
            (
                bool hasLimit /** Whether or not the lower limit of the second expression is enabled. */
            );
            /**Returns  
                    the upper limit of the second expression of a constraint. 
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * SecondUpperLimitExpression
            (
            );
            /**Returns  
                    the upper limit of the second expression right hand side of a constraint.
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString SecondUpperLimitRightHandSide
            (
            );
            /**Sets  
                    the upper limit of the second expression right hand side of a constraint.
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSecondUpperLimitRightHandSide
            (
                const NXString & limitRightHandSide /** The expression to be applied to the upper limit of the second expression. */
            );
            /**Sets  
                    the upper limit of the second expression right hand side of a constraint.
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetSecondUpperLimitRightHandSide
            (
                const char * limitRightHandSide /** The expression to be applied to the upper limit of the second expression. */
            );
            /**Returns  
                    the lower limit of the second expression of a constraint.
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * SecondLowerLimitExpression
            (
            );
            /**Returns  
                    the lower limit of the second expression right hand side of a constraint. 
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString SecondLowerLimitRightHandSide
            (
            );
            /**Sets  
                    the lower limit of the second expression right hand side of a constraint. 
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSecondLowerLimitRightHandSide
            (
                const NXString & limitRightHandSide /** The expression to be applied to the lower limit of the second expression. */
            );
            /**Sets  
                    the lower limit of the second expression right hand side of a constraint. 
                    The second limit expression will only be used for certain constraint types, and they must have a second expression. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetSecondLowerLimitRightHandSide
            (
                const char * limitRightHandSide /** The expression to be applied to the lower limit of the second expression. */
            );
            /**Returns  
                    the offset of a constraint.
                    The offset will only be used for coupler constraint types. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Expression * OffsetExpression
            (
            );
            /**Returns  
                    the offset right hand side of a constraint. 
                    The offset right hand side will only be used for coupler constraint types. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXString OffsetRightHandSide
            (
            );
            /**Sets  
                    the offset right hand side of a constraint. 
                    The offset right hand side will only be used for coupler constraint types. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetOffsetRightHandSide
            (
                const NXString & offset /** The offset to be applied to the constraint. */
            );
            /**Sets  
                    the offset right hand side of a constraint. 
                    The offset right hand side will only be used for coupler constraint types. 
                
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetOffsetRightHandSide
            (
                const char * offset /** The offset to be applied to the constraint. */
            );
            /** 
                    Adds constraint reference to a coupler.
                 @return  The new @link NXOpen::Positioning::ConstraintReference NXOpen::Positioning::ConstraintReference@endlink  
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::ConstraintReference * CreateCouplerReference
            (
                NXOpen::NXObject * coupledConstraint /** The @link NXOpen::Positioning::Constraint NXOpen::Positioning::Constraint@endlink  to be coupled */
            );
            /** 
                    Edit coupler reference so that it is replaced with another constraint.
                
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void EditCouplerReference
            (
                NXOpen::Positioning::ConstraintReference * couplerReference /** The @link NXOpen::Positioning::ConstraintReference NXOpen::Positioning::ConstraintReference@endlink  whose properties are to be changed*/,
                NXOpen::NXObject * coupledConstraint /** The @link NXOpen::Positioning::Constraint NXOpen::Positioning::Constraint@endlink  to be coupled instead */
            );
            /**Sets  
                    the second alignment behavior for the constraint.
                
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConstraintSecondAlignment
            (
                NXOpen::Positioning::Constraint::Alignment secondAlignment /** Second alignment behavior for constraint */
            );
            /**Returns  
                    the second alignment behavior for the constraint.
                
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NXOpen::Positioning::Constraint::Alignment ConstraintSecondAlignment
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
