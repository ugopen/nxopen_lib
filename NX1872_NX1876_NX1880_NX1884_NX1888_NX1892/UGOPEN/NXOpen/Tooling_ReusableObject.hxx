#ifndef NXOpen_TOOLING_REUSABLEOBJECT_HXX_INCLUDED
#define NXOpen_TOOLING_REUSABLEOBJECT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ReusableObject.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TransientObject.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ReusableObject;
    }
    class NXObject;
    namespace Tooling
    {
        class ReusableObjectImpl;
        /**
            Represents a @link NXOpen::Tooling::ReusableObject NXOpen::Tooling::ReusableObject@endlink 
             <br> To create a new instance of this class, use @link NXOpen::Tooling::ToolingManager::CreateReusableObject  NXOpen::Tooling::ToolingManager::CreateReusableObject @endlink  <br> 
         <br>  Created in NX7.5.2.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ReusableObject : public NXOpen::TransientObject
        {
            private: ReusableObjectImpl * m_reusableobject_impl;
            /// \cond NX_NO_DOC 
            public: explicit ReusableObject(void *ptr);
            /// \endcond 
            /** Dispose the part infomation to be cloned 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: virtual ~ReusableObject();
            /**Returns  the descriptive name 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXString DescriptiveName
            (
            );
            /**Sets  the descriptive name 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetDescriptiveName
            (
                const NXString & descriptiveName /** descriptivename */ 
            );
            /**Sets  the descriptive name 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            void SetDescriptiveName
            (
                const char * descriptiveName /** descriptivename */ 
            );
            /**Returns  the name of the group of objects which are saved through UDO 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXString ObjectGroupName
            (
            );
            /**Sets  the name of the group of objects which are saved through UDO 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetObjectGroupName
            (
                const NXString & groupName /** groupname */ 
            );
            /**Sets  the name of the group of objects which are saved through UDO 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            void SetObjectGroupName
            (
                const char * groupName /** groupname */ 
            );
            /**Returns  the preview image file 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXString PreviewImageFile
            (
            );
            /**Sets  the preview image file 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetPreviewImageFile
            (
                const NXString & imageFile /** imagefile */ 
            );
            /**Sets  the preview image file 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            void SetPreviewImageFile
            (
                const char * imageFile /** imagefile */ 
            );
            /** Gets the objects 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::NXObject *> GetObjects
            (
            );
            /** Sets the objects 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetObjects
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /**Returns  the part file which owns this reusable object 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXString PartFile
            (
            );
            /**Sets  the part file which owns this reusable object 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetPartFile
            (
                const NXString & partFile /** partfile */ 
            );
            /**Sets  the part file which owns this reusable object 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            void SetPartFile
            (
                const char * partFile /** partfile */ 
            );
            /**Returns  a flag indicating whether this object is saved in original part 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: bool IsSavedInOriginalPart
            (
            );
            /**Sets  a flag indicating whether this object is saved in original part 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetSavedInOriginalPart
            (
                bool saveInOriginalPart /** saveinoriginalpart */ 
            );
            /**Returns  the file which contains the reusable objects, could be part file or XML file 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: NXString ContainerFile
            (
            );
            /**Sets  the file which contains the reusable objects, could be part file or XML file 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            public: void SetContainerFile
            (
                const NXString & containerFile /** containerfile */ 
            );
            /**Sets  the file which contains the reusable objects, could be part file or XML file 
             <br>  Created in NX7.5.2.  <br>  
             <br> License requirements : None */
            void SetContainerFile
            (
                const char * containerFile /** containerfile */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
