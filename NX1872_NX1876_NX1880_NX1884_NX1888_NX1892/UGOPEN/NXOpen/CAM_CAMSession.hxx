#ifndef NXOpen_CAM_CAMSESSION_HXX_INCLUDED
#define NXOpen_CAM_CAMSESSION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_CAMSession.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class CAMSession;
    }
    class Session;
    namespace CAM
    {
        class CAMObject;
    }
    namespace CAM
    {
        class PathDisplay;
    }
    namespace CAM
    {
        class Preferences;
    }
    namespace CAM
    {
        class Utils;
    }
    class Part;
    namespace CAM
    {
        class CAMSessionImpl;
        /** Represents cam session  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  CAMSession
        {
            /** the template subtype class */
            public: enum ObjectSubtype
            {
                ObjectSubtypeSetup/** Setup */,
                ObjectSubtypeOperation/** Operations */,
                ObjectSubtypeProgram/** NC Program */,
                ObjectSubtypeTool/** Machine Tools and Cutters */,
                ObjectSubtypeMethod/** Machining Method*/,
                ObjectSubtypeGeometry/** Geometry */
            };

            private: CAMSessionImpl * m_camsession_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit CAMSession(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CAMSession();
            /** Specify the configuration file of the current cam session
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SpecifyConfiguration
            (
                const NXString & configFile /** the name of the configuration file */
            );
            /** Specify the configuration file of the current cam session
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            void SpecifyConfiguration
            (
                const char * configFile /** the name of the configuration file */
            );
            /** Get the names of the available template types.  @return  the names of the template types 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXString> GetTemplateTypes
            (
            );
            /** Get the names of the available template subypes for the specified template type. Only
                        those subtypes have the specified subtype class are returned. @return  the names of available subtypes 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: std::vector<NXString> GetTemplateSubtypes
            (
                const NXString & typeName /** the name of the template type*/,
                NXOpen::CAM::CAMSession::ObjectSubtype subtypeClass /** the subtype class*/
            );
            /** Get the names of the available template subypes for the specified template type. Only
                        those subtypes have the specified subtype class are returned. @return  the names of available subtypes 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            std::vector<NXString> GetTemplateSubtypes
            (
                const char * typeName /** the name of the template type*/,
                NXOpen::CAM::CAMSession::ObjectSubtype subtypeClass /** the subtype class*/
            );
            /** Create Cam Preferences builder.  @return  created cam preferences builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Preferences * CreateCamPreferences
            (
            );
            /** Set MCS display 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMcsDisplay
            (
                bool displayMCS /** whether the MCS should be displayed */
            );
            /** Get MCS display  @return  whether the MCS should be displayed 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: bool GetMcsDisplay
            (
            );

            /// \cond NX_NO_DOC 
            /** Initialize the dialog customization process, the input
                        directory is where the customization file will be created, the file name will be
                        "CustomizationData.bin" and will be deleted and recreated if it already exists
                        in the folder provided, this API is only for internal use and so will not be documented
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void InitializeSystemDialogCustomization
            (
                const NXString & locationForCustomizationFile /** locationforcustomizationfile */ 
            );
            /** Initialize the dialog customization process, the input
                        directory is where the customization file will be created, the file name will be
                        "CustomizationData.bin" and will be deleted and recreated if it already exists
                        in the folder provided, this API is only for internal use and so will not be documented
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void InitializeSystemDialogCustomization
            (
                const char * locationForCustomizationFile /** locationforcustomizationfile */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** End the dialog customization process, this API is only for internal use and so will not be documented
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void EndSystemDialogCustomization
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Capture the customization in the part as system customization, 
                        this API is only for internal use and so will not be documented 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void MakeSystemDialogs
            (
                const NXString & templateType /** templatetype */ ,
                NXOpen::Part * part /** part */ 
            );
            /** Capture the customization in the part as system customization, 
                        this API is only for internal use and so will not be documented 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            void MakeSystemDialogs
            (
                const char * templateType /** templatetype */ ,
                NXOpen::Part * part /** part */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Check if the object has dialog customization, this API is only for internal use and so will not be documented 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsSystemDialog
            (
                NXOpen::CAM::CAMObject * paramObj /** paramobj */ 
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Get the dialog customization, this API is only for internal use and so will not be documented 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetDialogCustomization
            (
                NXOpen::CAM::CAMObject * paramObj /** paramobj */ ,
                std::vector<int> & itemIds /** itemids */ ,
                std::vector<NXString> & itemLabels /** itemlabels */ 
            );

            /// \endcond 


            /** Returns the @link NXOpen::CAM::PathDisplay NXOpen::CAM::PathDisplay@endlink  belonging to this cam session 
             <br>  Created in NX10.0.2.  <br>  
            */
            public: NXOpen::CAM::PathDisplay *PathDisplay();

            /// \cond NX_NO_DOC 
            /** Returns the @link NXOpen::CAM::Utils NXOpen::CAM::Utils@endlink  belonging to this cam session 
             <br>  Created in NX1872.0.0.  <br>  
            */
            public: NXOpen::CAM::Utils *Utils();

            /// \endcond 
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
