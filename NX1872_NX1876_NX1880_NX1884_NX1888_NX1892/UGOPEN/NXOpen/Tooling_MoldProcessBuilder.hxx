#ifndef NXOpen_TOOLING_MOLDPROCESSBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_MOLDPROCESSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_MoldProcessBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_StandardPartBatchData.hxx>
#include <NXOpen/Tooling_StandardPartData.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class MoldProcessBuilder;
    }
    class Builder;
    class NXObject;
    class SelectNXObjectList;
    class SelectPoint;
    namespace Tooling
    {
        class StandardPartBatchData;
    }
    namespace Tooling
    {
        class StandardPartData;
    }
    namespace Tooling
    {
        class _MoldProcessBuilderBuilder;
        class MoldProcessBuilderImpl;
        /** Represents a Tooling::MoldProcessBuilder builder  <br> To create a new instance of this class, use @link NXOpen::Tooling::MoldProcessCollection::CreateMoldProcessBuilder  NXOpen::Tooling::MoldProcessCollection::CreateMoldProcessBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Rename </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  MoldProcessBuilder : public NXOpen::Builder
        {
            private: MoldProcessBuilderImpl * m_moldprocessbuilder_impl;
            private: friend class  _MoldProcessBuilderBuilder;
            protected: MoldProcessBuilder();
            public: ~MoldProcessBuilder();
            /**Returns  the concept objects selected to be edited. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * ConceptObjects
            (
            );
            /**Returns  the component selected to be edited. The edition will start Standard Part Management dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectPoint * CompSelect
            (
            );
            /**Returns  the rename toggle let users choose whether to run Part Name Management dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: bool Rename
            (
            );
            /**Sets  the rename toggle let users choose whether to run Part Name Management dialog 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRename
            (
                bool rename /** rename */ 
            );
            /** Sets the selected standard part records to process 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetSelectedRecords
            (
                std::vector<NXString> & partNames /** The names of the currently selected standard part records to process */,
                std::vector<NXString> & sketchNames /** The sketch names of the currently selected standard part records */
            );
            /** Gets standard part batch data  @return  A @link NXOpen::Tooling::StandardPartBatchData NXOpen::Tooling::StandardPartBatchData@endlink  instance 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::StandardPartBatchData * GetStandardPartBatchData
            (
            );
            /** Sets standard part batch data. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SetStandardPartBatchData
            (
                NXOpen::Tooling::StandardPartBatchData * batchData /** A @link NXOpen::Tooling::StandardPartBatchData NXOpen::Tooling::StandardPartBatchData@endlink  instance */
            );
            /** Finds the library where the standard part which is represented by the specified concept object can be found  @return  A @link NXOpen::Tooling::StandardPartData NXOpen::Tooling::StandardPartData@endlink  instance 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: NXOpen::Tooling::StandardPartData * FindMatchedLibraryOfConceptObject
            (
                NXOpen::NXObject * conceptObject /** The concept object used to find a library */
            );
            /** Saves name changes in attributes of the concept object 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SaveNameChangesToConceptObject
            (
                NXOpen::NXObject * conceptObject /** The concept object to save name changes */,
                const NXString & assemblyName /** Assembly name for creating new parts */,
                const NXString & assemblyPartNumber /** Part number of the assembly in managed mode NX */,
                const NXString & assemblyItemType /** Item Type of the assembly in managed mode NX */,
                std::vector<NXString> & childrenNames /** Names of the children */
            );
            /** Saves name changes in attributes of the concept object 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            void SaveNameChangesToConceptObject
            (
                NXOpen::NXObject * conceptObject /** The concept object to save name changes */,
                const char * assemblyName /** Assembly name for creating new parts */,
                const char * assemblyPartNumber /** Part number of the assembly in managed mode NX */,
                const char * assemblyItemType /** Item Type of the assembly in managed mode NX */,
                std::vector<NXString> & childrenNames /** Names of the children */
            );
            /** Restores the unique attributes with cooling component handle information which should not be overridden 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design") */
            public: void SaveCoolingConceptObjectHandles
            (
                NXOpen::NXObject * conceptObject /** The concept object with cooling component handle information */,
                const std::vector<NXOpen::NXObject *> & instanceObjects /** Instances of the specified concept object */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
