#ifndef NXOpen_MECHATRONICS_SHMSIGNALPROVIDERBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_SHMSIGNALPROVIDERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_SHMSignalProviderBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class SHMSignalProviderBuilder;
    }
    class Builder;
    class NXObject;
    namespace Mechatronics
    {
        class _SHMSignalProviderBuilderBuilder;
        class SHMSignalProviderBuilderImpl;
        /** Represents a @link NXOpen::Mechatronics::SHMSignalProviderBuilder NXOpen::Mechatronics::SHMSignalProviderBuilder@endlink   <br> This class is sub-object of another builder, and cannot be directly instantiated.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  SHMSignalProviderBuilder : public NXOpen::Builder
        {
             /**  @brief  Represents SHMProviderSignal info definition structure.  

              
                    */
            public:
            struct SignalInfo
            {
                public: /** Signal Object         */NXOpen::NXObject * SignalTag;
                public: /**Signal Checked Status  */bool BChecked;
                public: /** Adress value          */NXString Address;
                public: SignalInfo() :
                    SignalTag(),
                    BChecked(),
                    Address()
                {
                }
                /** Constructor for the SignalInfo struct. */ 
                public: SignalInfo(NXOpen::NXObject * signalTagInitial /** Signal Object         */, 
                        bool bCheckedInitial /**Signal Checked Status  */, 
                        const NXString &addressInitial /** Adress value          */) :
                    SignalTag(signalTagInitial),
                    BChecked(bCheckedInitial),
                    Address(addressInitial)
                {
                }
            };

            private: SHMSignalProviderBuilderImpl * m_shmsignalproviderbuilder_impl;
            private: friend class  _SHMSignalProviderBuilderBuilder;
            protected: SHMSignalProviderBuilder();
            public: ~SHMSignalProviderBuilder();
            /**  @brief  Get SHMProvider Signals Infomation  

               @return  Array of SignalInfos 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::Mechatronics::SHMSignalProviderBuilder::SignalInfo> GetSHMSignals
            (
            );
            /**  @brief  Set SHMProvider Signals Infomation  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSHMSignals
            (
                const std::vector<NXOpen::Mechatronics::SHMSignalProviderBuilder::SignalInfo> & signalInfos /** Array of SignalInfos */
            );
            /**Returns   @brief  Get the SHM Name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString ShmName
            (
            );
            /**Sets   @brief  Get the SHM Name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShmName
            (
                const NXString & name /** name */ 
            );
            /**Sets   @brief  Get the SHM Name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetShmName
            (
                const char * name /** name */ 
            );
            /**Returns   @brief  Ge the SHM Mutex.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString ShmMutex
            (
            );
            /**Sets   @brief  Ge the SHM Mutex.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetShmMutex
            (
                const NXString & shmmutex /** shmmutex */ 
            );
            /**Sets   @brief  Ge the SHM Mutex.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetShmMutex
            (
                const char * shmmutex /** shmmutex */ 
            );
            /**Returns   @brief  Get the Ceate SHM toggle status.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool CreateShm
            (
            );
            /**Sets   @brief  Get the Ceate SHM toggle status.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetCreateShm
            (
                bool createSHM /** createshm */ 
            );
            /**Returns   @brief  the endian type.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: bool IsLittleEndian
            (
            );
            /**Sets   @brief  the endian type.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetLittleEndian
            (
                bool isLittleEndian /** islittleendian */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
