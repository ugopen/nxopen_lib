#ifndef NXOpen_JOIN_POINTJOINBUILDER_HXX_INCLUDED
#define NXOpen_JOIN_POINTJOINBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Join_PointJoinBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Join_JoinBuilder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libjoinopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Join
    {
        class PointJoinBuilder;
    }
    namespace Join
    {
        class JoinBuilder;
    }
    class Point;
    class SelectPointList;
    class TaggedObject;
    namespace Join
    {
        class _PointJoinBuilderBuilder;
        class PointJoinBuilderImpl;
        /**
            Represents a @link NXOpen::Join::PointJoin NXOpen::Join::PointJoin@endlink  builder.
             <br> To create a new instance of this class, use @link NXOpen::Join::JoinManager::CreatePointJoinBuilder  NXOpen::Join::JoinManager::CreatePointJoinBuilder @endlink  <br> 
         <br>  Created in NX1872.0.0.  <br>  
        */
        class JOINOPENCPPEXPORT  PointJoinBuilder : public NXOpen::Join::JoinBuilder
        {
            /** the visualization geometry type */
            public: enum VisualizationGeometryType
            {
                VisualizationGeometryTypeSphere/** sphere */ ,
                VisualizationGeometryTypeCylinder/** cylinder */ ,
                VisualizationGeometryTypeCone/** cone */ ,
                VisualizationGeometryTypePrism/** prism */ 
            };

            /** the hole type */
            public: enum HoleTypes
            {
                HoleTypesSimple/** simple */ ,
                HoleTypesCounterbored/** counterbored */ ,
                HoleTypesCountersunk/** countersunk */ 
            };

            private: PointJoinBuilderImpl * m_pointjoinbuilder_impl;
            private: friend class  _PointJoinBuilderBuilder;
            protected: PointJoinBuilder();
            public: ~PointJoinBuilder();
            /**Returns  the selected points 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::SelectPointList * PointSelPoints
            (
            );
            /**Returns  the stackup alignment 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::TaggedObject * StackupAlignment
            (
            );
            /**Sets  the stackup alignment 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStackupAlignment
            (
                NXOpen::TaggedObject * stackupAlignment /** stackupalignment */ 
            );
            /**Returns  the stackup on surface tolerance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double StackupOnSurfaceTolerance
            (
            );
            /**Sets  the stackup on surface tolerance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStackupOnSurfaceTolerance
            (
                double onSurfaceTolerance /** onsurfacetolerance */ 
            );
            /**Returns  the gap tolerance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double StackupGapTolerance
            (
            );
            /**Sets  the gap tolerance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStackupGapTolerance
            (
                double stackupGapTolerance /** stackupgaptolerance */ 
            );
            /**Returns  the gap limit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double StackupGapLimit
            (
            );
            /**Sets  the gap limit 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStackupGapLimit
            (
                double stackupGapLimit /** stackupgaplimit */ 
            );
            /**Returns  the overlap tolerance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double StackupOverlapTolerance
            (
            );
            /**Sets  the overlap tolerance 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStackupOverlapTolerance
            (
                double stackupOverlapTolerance /** stackupoverlaptolerance */ 
            );
            /**Returns  the reverse stackup direction flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool StackupReverseDirection
            (
            );
            /**Sets  the reverse stackup direction flag 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetStackupReverseDirection
            (
                bool toReverse /** toreverse */ 
            );
            /**Returns  the visualization diameter 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double VisualizationDiameter
            (
            );
            /**Sets  the visualization diameter 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetVisualizationDiameter
            (
                double visualizationDiameter /** visualizationdiameter */ 
            );
            /**Returns  the visualization color value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: int VisualizationColor
            (
            );
            /**Sets  the visualization color value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetVisualizationColor
            (
                int visualizationColor /** visualizationcolor */ 
            );
            /**Returns  the visualization geometry type value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Join::PointJoinBuilder::VisualizationGeometryType VisualizationGeometry
            (
            );
            /**Sets  the visualization geometry type value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetVisualizationGeometry
            (
                NXOpen::Join::PointJoinBuilder::VisualizationGeometryType visualizationGeometry /** visualizationgeometry */ 
            );
            /**Returns  the hole type value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: NXOpen::Join::PointJoinBuilder::HoleTypes HoleType
            (
            );
            /**Sets  the hole type value 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleType
            (
                NXOpen::Join::PointJoinBuilder::HoleTypes holeType /** holetype */ 
            );
            /**Returns  the hole diameter 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double HoleDiameter
            (
            );
            /**Sets  the hole diameter 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the Countersink diameter 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double HoleCounterSinkDiameter
            (
            );
            /**Sets  the Countersink diameter 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleCounterSinkDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the Counterbore diameter 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double HoleCounterBoreDiameter
            (
            );
            /**Sets  the Counterbore diameter 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleCounterBoreDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the Countersink angle 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double HoleCounterSinkAngle
            (
            );
            /**Sets  the Countersink angle 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleCounterSinkAngle
            (
                double angle /** angle */ 
            );
            /**Returns  the Counterbore depth 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: double HoleCounterBoreDepth
            (
            );
            /**Sets  the Counterbore depth 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleCounterBoreDepth
            (
                double depth /** depth */ 
            );
            /**Returns  the hole creation status. If true, holes should be created in connected bodies. If false, holes should be removed (or not created) from connected bodies 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool HoleCreate
            (
            );
            /**Sets  the hole creation status. If true, holes should be created in connected bodies. If false, holes should be removed (or not created) from connected bodies 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHoleCreate
            (
                bool status /** status */ 
            );
            /** Set hardware pin information from name. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHardwarePin
            (
                const NXString & pinName /** pinname */ 
            );
            /** Set hardware pin information from name. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetHardwarePin
            (
                const char * pinName /** pinname */ 
            );
            /** Set hardware for head side parts. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHeadSideParts
            (
                std::vector<NXString> & headNames /** List of names */
            );
            /** Set hardware for tail side parts. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTailSideParts
            (
                std::vector<NXString> & tailNames /** List of names */
            );
            /** Gets the points created by the Reference Sheet Points builder. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void GetReferenceSheetPoints
            (
                std::vector<NXOpen::Point *> & points /**The array of points created by Reference Sheet Builder. */
            );
            /**Returns  the load hardware flag. If true, hardware should be loaded into assembly. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: bool HardwareLoad
            (
            );
            /**Sets  the load hardware flag. If true, hardware should be loaded into assembly. 
             <br>  Created in NX1872.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetHardwareLoad
            (
                bool status /** status */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
