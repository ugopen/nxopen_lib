#ifndef NXOpen_MECHATRONICS_PROFINETCLIENTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_PROFINETCLIENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_ProfinetClientBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_SignalBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class ProfinetClientBuilder;
    }
    class Builder;
    class Part;
    namespace Mechatronics
    {
        class _ProfinetClientBuilderBuilder;
        class ProfinetClientBuilderImpl;
        /** Represents a @link Mechatronics::ProfinetClientBuilder Mechatronics::ProfinetClientBuilder@endlink  builder  <br> This class is sub-object of another builder, and cannot be directly instantiated.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  ProfinetClientBuilder : public NXOpen::Builder
        {
             /**  @brief  Represents Profinet signal  definition structure.  

              
                    */
            public:
            struct TagInfo
            {
                public: /** Signal Object       */NXString StrName;
                public: /**Signal Data Type     */NXOpen::Mechatronics::SignalBuilder::DataType EDataType;
                public: /**Signal IO Type       */NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType EIOType;
                public: /** Adress value        */NXString Address;
                public: /** A mark for int DataType ,if true means int32 */bool BDint;
                public: TagInfo() :
                    StrName(),
                    EDataType((NXOpen::Mechatronics::SignalBuilder::DataType)0),
                    EIOType((NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType)0),
                    Address(),
                    BDint()
                {
                }
                /** Constructor for the TagInfo struct. */ 
                public: TagInfo(const NXString &strNameInitial /** Signal Object       */, 
                        NXOpen::Mechatronics::SignalBuilder::DataType eDataTypeInitial /**Signal Data Type     */, 
                        NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType eIOTypeInitial /**Signal IO Type       */, 
                        const NXString &addressInitial /** Adress value        */, 
                        bool bDintInitial /** A mark for int DataType ,if true means int32 */) :
                    StrName(strNameInitial),
                    EDataType(eDataTypeInitial),
                    EIOType(eIOTypeInitial),
                    Address(addressInitial),
                    BDint(bDintInitial)
                {
                }
            };

             /**  @brief  Represents Profinet signal  definition structure.  

              */
            public:
            struct TagInfoEx
            {
                public: /** Signal Object        */NXString StrName;
                public: /**Signal Data Type Name */NXString StrDataType;
                public: /**Signal IO Type        */NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType EIOType;
                public: /** Adress value         */NXString Address;
                public: TagInfoEx() :
                    StrName(),
                    StrDataType(),
                    EIOType((NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType)0),
                    Address()
                {
                }
                /** Constructor for the TagInfoEx struct. */ 
                public: TagInfoEx(const NXString &strNameInitial /** Signal Object        */, 
                        const NXString &strDataTypeInitial /**Signal Data Type Name */, 
                        NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType eIOTypeInitial /**Signal IO Type        */, 
                        const NXString &addressInitial /** Adress value         */) :
                    StrName(strNameInitial),
                    StrDataType(strDataTypeInitial),
                    EIOType(eIOTypeInitial),
                    Address(addressInitial)
                {
                }
            };

            private: ProfinetClientBuilderImpl * m_profinetclientbuilder_impl;
            private: friend class  _ProfinetClientBuilderBuilder;
            protected: ProfinetClientBuilder();
            public: ~ProfinetClientBuilder();
            /**Returns   @brief  the instance name  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: NXString InstanceName
            (
            );
            /**Sets   @brief  the instance name  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetInstanceName
            (
                const NXString & name /** name */ 
            );
            /**Sets   @brief  the instance name  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetInstanceName
            (
                const char * name /** name */ 
            );
            /**  @brief  Set Profinet Client Infomation  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetTags
            (
                const std::vector<NXOpen::Mechatronics::ProfinetClientBuilder::TagInfo> & tagInfos /** Array of TagInfos */
            );
            /**  @brief  Get Profinet Client Infomation  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::Mechatronics::ProfinetClientBuilder::TagInfo> GetTags
            (
            );
            /**  @brief  Set Profinet Client Infomation  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetTagsEx
            (
                const std::vector<NXOpen::Mechatronics::ProfinetClientBuilder::TagInfoEx> & tagInfos /** Array of TagInfos */
            );
            /**  @brief  Get Profinet Client Infomation  

              
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: std::vector<NXOpen::Mechatronics::ProfinetClientBuilder::TagInfoEx> GetTagsEx
            (
            );
            /**Returns   @brief  the selected configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedConfigurationName
            (
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationName
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSelectedConfigurationName
            (
                const char * configurationName /** configurationname */ 
            );
            /**Returns   @brief  the selected configuration part.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * SelectedConfigurationPart
            (
            );
            /**Sets   @brief  the selected configuration part.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationPart
            (
                NXOpen::Part * ownerPart /** ownerpart */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
