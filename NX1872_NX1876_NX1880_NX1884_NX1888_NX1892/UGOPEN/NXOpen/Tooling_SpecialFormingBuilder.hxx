#ifndef NXOpen_TOOLING_SPECIALFORMINGBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_SPECIALFORMINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_SpecialFormingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class SpecialFormingBuilder;
    }
    class Builder;
    class Expression;
    class NXObject;
    class ScCollector;
    class Section;
    class SelectBody;
    class SelectNXObjectList;
    namespace Tooling
    {
        class _SpecialFormingBuilderBuilder;
        class SpecialFormingBuilderImpl;
        /** Creates special forming insert builder for progressive die. No entity is returned.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateSpecialFormingBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateSpecialFormingBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BoundedBlockOrUserDefined </td> <td> 
         
        BoundedBlock </td> </tr> 

        <tr><td> 
         
        BoxClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EndLimit.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        FirstClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        InsertType </td> <td> 
         
        Punch </td> </tr> 

        <tr><td> 
         
        NeedFirstClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NeedSecondClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NeedThirdClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Parent </td> <td> 
         
        PrjDie </td> </tr> 

        <tr><td> 
         
        RenameComponent </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SecondClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StartLimit.Value </td> <td> 
         
        0 (millimeters part), 0 (inches part) </td> </tr> 

        <tr><td> 
         
        ThirdClearance </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseExistingSheetBody </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        WithoutFalseBody </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  SpecialFormingBuilder : public NXOpen::Builder
        {
            /** Specifies the main page type. */
            public: enum Types
            {
                TypesCreateBasicInsert/** create basic insert */ ,
                TypesExtendCurveAndCreateBox/** extend curve and create box */ ,
                TypesTrimInsert/** trim insert */ ,
                TypesModifyInsert/** modify insert */ ,
                TypesDeleteInsert/** delete insert */ 
            };

            /** Specifies the main page type. */
            public: enum ParentValue
            {
                ParentValuePrjDie/** prj die */ ,
                ParentValuePrjDb/** prj db */ ,
                ParentValuePrjSub/** prj sub */ 
            };

            /** Specifies the main page type. */
            public: enum PunchOrDie
            {
                PunchOrDiePunch/** punch */ ,
                PunchOrDieDie/** die */ 
            };

            /** the block type */
            public: enum BlockType
            {
                BlockTypeBoundedBlock/** bounded block */ ,
                BlockTypeUserDefined/** user defined */ 
            };

            private: SpecialFormingBuilderImpl * m_specialformingbuilder_impl;
            private: friend class  _SpecialFormingBuilderBuilder;
            protected: SpecialFormingBuilder();
            public: ~SpecialFormingBuilder();
            /**Returns  the select face 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectFace
            (
            );
            /**Returns  the parent 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SpecialFormingBuilder::ParentValue Parent
            (
            );
            /**Sets  the parent 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParent
            (
                NXOpen::Tooling::SpecialFormingBuilder::ParentValue parent /** parent */ 
            );
            /**Returns  the insert type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SpecialFormingBuilder::PunchOrDie InsertType
            (
            );
            /**Sets  the insert type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetInsertType
            (
                NXOpen::Tooling::SpecialFormingBuilder::PunchOrDie insertType /** inserttype */ 
            );
            /** Create forming insert 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateFormingInsert
            (
            );
            /**Returns  the rename component 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RenameComponent
            (
            );
            /**Sets  the rename component 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRenameComponent
            (
                bool renameComponent /** renamecomponent */ 
            );
            /**Returns  the use existing sheet body 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseExistingSheetBody
            (
            );
            /**Sets  the use existing sheet body 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetUseExistingSheetBody
            (
                bool useExistingSheetBody /** useexistingsheetbody */ 
            );
            /**Returns  the without false body 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool WithoutFalseBody
            (
            );
            /**Sets  the without false body 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWithoutFalseBody
            (
                bool withoutFalseBody /** withoutfalsebody */ 
            );
            /**Returns  the select sheet body 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * SelectSheetBody
            (
            );
            /**Returns  the select forming block 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * SelectFormingBlock
            (
            );
            /**Returns  the bounded block or user defined 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SpecialFormingBuilder::BlockType BoundedBlockOrUserDefined
            (
            );
            /**Sets  the bounded block or user defined 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBoundedBlockOrUserDefined
            (
                NXOpen::Tooling::SpecialFormingBuilder::BlockType boundedBlockOrUserDefined /** boundedblockoruserdefined */ 
            );
            /**Returns  the box clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double BoxClearance
            (
            );
            /**Sets  the box clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBoxClearance
            (
                double boxClearance /** boxclearance */ 
            );
            /**Returns  the select curves 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * SelectCurves
            (
            );
            /**Returns  the offset value linear dimension positive x 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionPositiveX
            (
            );
            /**Returns  the offset value linear dimension negative x 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionNegativeX
            (
            );
            /**Returns  the offset value linear dimension positive y 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionPositiveY
            (
            );
            /**Returns  the offset value linear dimension negative y 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionNegativeY
            (
            );
            /**Returns  the offset value linear dimension positive z 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionPositiveZ
            (
            );
            /**Returns  the offset value linear dimension negative z 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetValueLinearDimensionNegativeZ
            (
            );
            /**Returns  the start limit 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StartLimit
            (
            );
            /**Returns  the end limit 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * EndLimit
            (
            );
            /**Returns  the need first clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool NeedFirstClearance
            (
            );
            /**Sets  the need first clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNeedFirstClearance
            (
                bool needFirstClearance /** needfirstclearance */ 
            );
            /**Returns  the first clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double FirstClearance
            (
            );
            /**Sets  the first clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFirstClearance
            (
                double firstClearance /** firstclearance */ 
            );
            /**Returns  the need second clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool NeedSecondClearance
            (
            );
            /**Sets  the need second clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNeedSecondClearance
            (
                bool needSecondClearance /** needsecondclearance */ 
            );
            /**Returns  the second clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double SecondClearance
            (
            );
            /**Sets  the second clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSecondClearance
            (
                double secondClearance /** secondclearance */ 
            );
            /**Returns  the need third clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool NeedThirdClearance
            (
            );
            /**Sets  the need third clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetNeedThirdClearance
            (
                bool needThirdClearance /** needthirdclearance */ 
            );
            /**Returns  the third clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double ThirdClearance
            (
            );
            /**Sets  the third clearance 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetThirdClearance
            (
                double thirdClearance /** thirdclearance */ 
            );
            /**Returns  the select insert to delete 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * SelectInsertToDelete
            (
            );
            /**Returns  the type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::SpecialFormingBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::SpecialFormingBuilder::Types type /** type */ 
            );
            /**Returns  the wizard type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /**Returns  the position of csys for box. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point3d BoxPosition
            (
            );
            /**Sets  the position of csys for box. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBoxPosition
            (
                const NXOpen::Point3d & csysOrigin /** csysorigin */ 
            );
            /** Sets box csys matrix. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetBoxMatrixAndPosition
            (
                const NXOpen::Matrix3x3 & matrix /** matrix */ ,
                const NXOpen::Point3d & position /** position */ 
            );
            /** Calculate box size and set directions, edge length, lower point position. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CalculateBoxSize
            (
            );
            /** Sew wave linked face and guided extension sheet. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SewWaveLinkedFaceAndGuidedExtensionSheet
            (
            );
            /** Create bound box. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateBoundBox
            (
            );
            /** Edit bound box. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void EditBoundBox
            (
            );
            /** Extrude curves to true body and false body. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void ExtrudeCurvesToTrueBodyAndFalseBody
            (
            );
            /** Edit extrude curves. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void EditExtrudeCurves
            (
            );
            /** Trim true body with sewed sheet. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void TrimTrueBodyWithSewedSheet
            (
            );
            /** Move objects to undisplayable layer. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void MoveObjectsToUndisplayableLayer
            (
            );
            /** Assign clearance. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AssignClearance
            (
            );
            /**Returns  the is edit guided extension 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsEditGuidedExtension
            (
            );
            /**Sets  the is edit guided extension 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEditGuidedExtension
            (
                bool isEditGuidedExtension /** iseditguidedextension */ 
            );
            /** Add insert part into assembly. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: NXOpen::NXObject * AddInsertPartIntoAssembly
            (
                NXOpen::NXObject * parentPart /** parentpart */ ,
                const NXString & templatePartName /** templatepartname */ ,
                const NXOpen::Point3d & origin /** origin */ 
            );
            /** Add insert part into assembly. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            NXOpen::NXObject * AddInsertPartIntoAssembly
            (
                NXOpen::NXObject * parentPart /** parentpart */ ,
                const char * templatePartName /** templatepartname */ ,
                const NXOpen::Point3d & origin /** origin */ 
            );
            /** Set forming region. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetFormingRegion
            (
                const std::vector<NXOpen::NXObject *> & faces /** faces */ 
            );
            /** Wave forming region. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void WaveFormingRegion
            (
            );
            /** Create offset datum plane for sketch. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void CreateOffsetDatumPlaneForSketch
            (
            );
            /** Assign attribute for sketch feature. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void AssignAttributeForSketchFeature
            (
                NXOpen::NXObject * sketchFeatureTag /** sketchfeaturetag */ 
            );
            /** Delete selected insert. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void DeleteSelectedInsert
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
