#ifndef NXOpen_VISUALREPORTING_VISUALREPORTMANAGER_HXX_INCLUDED
#define NXOpen_VISUALREPORTING_VISUALREPORTMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     VisualReporting_VisualReportManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/VisualReporting_Property.hxx>
#include <NXOpen/VisualReporting_SpecifyDateBuilder.hxx>
#include <NXOpen/VisualReporting_VisualReport.hxx>
#include <NXOpen/VisualReporting_VisualReportBuilder.hxx>
#include <NXOpen/libnxopencpp_visualreporting_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace VisualReporting
    {
        class VisualReportManager;
    }
    class Session;
    class NXObject;
    namespace VisualReporting
    {
        class SpecifyDateBuilder;
    }
    namespace VisualReporting
    {
        class VisualReport;
    }
    namespace VisualReporting
    {
        class VisualReportBuilder;
    }
    namespace VisualReporting
    {
        class VisualReportCollection;
    }
    namespace VisualReporting
    {
        class VisualReportExplorer;
    }
    namespace VisualReporting
    {
        class VisualReportManagerImpl;
        /**
                A manager for load, creation and activation of visual reports.
             <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_VISUALREPORTINGEXPORT  VisualReportManager
        {
            public: /** User defined method that is called when ask an string type property value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            typedef NXOpen::Callback1<NXString, NXOpen::NXObject *> GetStringTypePropertyValue;
            public: /** User defined method that is called when ask an integer type property value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            typedef NXOpen::Callback1<int, NXOpen::NXObject *> GetIntegerTypePropertyValue;
            public: /** User defined method that is called when ask an double type property value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            typedef NXOpen::Callback1<double, NXOpen::NXObject *> GetRealTypePropertyValue;
            public: /** User defined method that is called when ask an boolean property value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            typedef NXOpen::Callback1<bool, NXOpen::NXObject *> GetBooleanTypePropertyValue;
            public: /** User defined method that is called when ask an date property value. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            typedef NXOpen::Callback1<NXOpen::NXObject::ComputationalTime, NXOpen::NXObject *> GetDateTypePropertyValue;
            private: VisualReportManagerImpl * m_visualreportmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit VisualReportManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~VisualReportManager();
            /** Creates a @link NXOpen::VisualReporting::VisualReportBuilder NXOpen::VisualReporting::VisualReportBuilder@endlink  and starts
                        editing a copy of the given @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                     @return  The created builder 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReportBuilder * CreateVisualReportBuilder
            (
                NXOpen::VisualReporting::VisualReport * visualReport /** The VisualReport for which this builder is being created. Can be NULL */
            );
            /** Opens an existing @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink , but does not set it to be the 
                        @link NXOpen::VisualReporting::VisualReportManager::Current NXOpen::VisualReporting::VisualReportManager::Current@endlink  visual report or activate it.
                        If the visual report file cannot be opened, or if there is a problem parsing the file,
                        then an exception will be raised.

                        If opening a managed report then it is recommended to use @link NXOpen::VisualReporting::VisualReportManager::OpenReports NXOpen::VisualReporting::VisualReportManager::OpenReports@endlink 
                        which can take a container path and list of dataset names
                     @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport * Open
            (
                const NXString & filename /** The filename of the visual report to open */
            );
            /** Opens an existing @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink , but does not set it to be the 
                        @link NXOpen::VisualReporting::VisualReportManager::Current NXOpen::VisualReporting::VisualReportManager::Current@endlink  visual report or activate it.
                        If the visual report file cannot be opened, or if there is a problem parsing the file,
                        then an exception will be raised.

                        If opening a managed report then it is recommended to use @link NXOpen::VisualReporting::VisualReportManager::OpenReports NXOpen::VisualReporting::VisualReportManager::OpenReports@endlink 
                        which can take a container path and list of dataset names
                     @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            NXOpen::VisualReporting::VisualReport * Open
            (
                const char * filename /** The filename of the visual report to open */
            );
            /** Unloads an opened  @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                    
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void Unload
            (
                NXOpen::VisualReporting::VisualReport * visualReport /** visualreport */ 
            );
            /** Opens existing @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink , but does not set them to be the 
                        @link NXOpen::VisualReporting::VisualReportManager::Current NXOpen::VisualReporting::VisualReportManager::Current@endlink  visual report or activate them.
                        If the visual report file cannot be opened, or if there is a problem parsing the file,
                        then an exception will be raised.

                        This can be used in native mode by sending in a folder path and filenames, or in
                        managed mode using a container path and dataset names.
                     @return  array of opened reports 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: std::vector<NXOpen::VisualReporting::VisualReport *> OpenReports
            (
                std::vector<NXString> & folders /** array of folders to be searched */,
                std::vector<NXString> & names /** array of report names */
            );
            /**  Activates the @link NXOpen::VisualReporting::VisualReportManager::Current NXOpen::VisualReporting::VisualReportManager::Current@endlink  visual report. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void ActivateCurrentVisualReport
            (
            );
            /**  Deactivates the @link NXOpen::VisualReporting::VisualReportManager::Current NXOpen::VisualReporting::VisualReportManager::Current@endlink  visual report. 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void DeactivateCurrentVisualReport
            (
            );
            /**Returns  
                        the current @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::VisualReport * Current
            (
            );
            /**Sets  
                        the current @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                    
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetCurrent
            (
                NXOpen::VisualReporting::VisualReport * visualReport /** visualreport */ 
            );
            /** Merges multiple existing @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  into one @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink , but does not set them to be the 
                        @link NXOpen::VisualReporting::VisualReportManager::Current NXOpen::VisualReporting::VisualReportManager::Current@endlink  visual report or activate them, and does not save the merged @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                     @return  merged report 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: NXOpen::VisualReporting::VisualReport * MergeReports
            (
                const std::vector<NXOpen::VisualReporting::VisualReport *> & visualReports /** array of existing reports */,
                const NXString & mergedReportName /** name of the merged report */,
                const NXString & mergedReportDescription /** description of the merged report */
            );
            /** Merges multiple existing @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink  into one @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink , but does not set them to be the 
                        @link NXOpen::VisualReporting::VisualReportManager::Current NXOpen::VisualReporting::VisualReportManager::Current@endlink  visual report or activate them, and does not save the merged @link NXOpen::VisualReporting::VisualReport NXOpen::VisualReporting::VisualReport@endlink .
                     @return  merged report 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            NXOpen::VisualReporting::VisualReport * MergeReports
            (
                const std::vector<NXOpen::VisualReporting::VisualReport *> & visualReports /** array of existing reports */,
                const char * mergedReportName /** name of the merged report */,
                const char * mergedReportDescription /** description of the merged report */
            );
            /** Creates a @link NXOpen::VisualReporting::SpecifyDateBuilder NXOpen::VisualReporting::SpecifyDateBuilder@endlink .
                     @return  The created builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::VisualReporting::SpecifyDateBuilder * CreateSpecifyDateBuilder
            (
            );
            /** Registers a string type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void RegisterProperty
            (
                const NXString & propertyKey /** property key */,
                const NXString & propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetStringTypePropertyValue&  getStringTypePropertyValue /** callback function that returns a string type property value */
            );
            /** Registers a string type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void RegisterProperty
            (
                const char * propertyKey /** property key */,
                const char * propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetStringTypePropertyValue&  getStringTypePropertyValue /** callback function that returns a string type property value */
            );
            /** Registers an integer type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void RegisterProperty
            (
                const NXString & propertyKey /** property key */,
                const NXString & propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetIntegerTypePropertyValue&  getIntegerTypePropertyValue /** callback function that returns a integer type property value */
            );
            /** Registers an integer type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void RegisterProperty
            (
                const char * propertyKey /** property key */,
                const char * propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetIntegerTypePropertyValue&  getIntegerTypePropertyValue /** callback function that returns a integer type property value */
            );
            /** Registers a double type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void RegisterProperty
            (
                const NXString & propertyKey /** property key */,
                const NXString & propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetRealTypePropertyValue&  getRealTypePropertyValue /** callback function that returns a double type property value */
            );
            /** Registers a double type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void RegisterProperty
            (
                const char * propertyKey /** property key */,
                const char * propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetRealTypePropertyValue&  getRealTypePropertyValue /** callback function that returns a double type property value */
            );
            /** Registers a boolean type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void RegisterProperty
            (
                const NXString & propertyKey /** property key */,
                const NXString & propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetBooleanTypePropertyValue&  getBooleanTypePropertyValue /** callback function that returns a bool property value */
            );
            /** Registers a boolean type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void RegisterProperty
            (
                const char * propertyKey /** property key */,
                const char * propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetBooleanTypePropertyValue&  getBooleanTypePropertyValue /** callback function that returns a bool property value */
            );
            /** Registers a @link NXOpen::NXObject::ComputationalTime NXOpen::NXObject::ComputationalTime@endlink  type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void RegisterProperty
            (
                const NXString & propertyKey /** property key */,
                const NXString & propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetDateTypePropertyValue&  getDateTypePropertyValue /** callback function that returns a @link NXOpen::NXObject::ComputationalTime NXOpen::NXObject::ComputationalTime@endlink  type property value */
            );
            /** Registers a @link NXOpen::NXObject::ComputationalTime NXOpen::NXObject::ComputationalTime@endlink  type property.
                    
                        The property key and property name should be unique in current session.
                        Parameters 'isValidInNative' and 'isValidInTeamcenter' shouldn't be 'false' at the same time.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void RegisterProperty
            (
                const char * propertyKey /** property key */,
                const char * propertyName /** property name */,
                NXOpen::VisualReporting::VisualReport::ScopeTypeOption scopeType /** property scope type */,
                const std::vector<NXOpen::VisualReporting::VisualReport::ObjectTypeOption> & objectTypes /** object types*/,
                NXOpen::VisualReporting::Property::DatatypeOption dataType /** property data type */,
                bool isValidInNative /** is property valid in native mode */,
                bool isValidInTeamcenter /** is property valid in Teamcenter mode */,
                const NXOpen::VisualReporting::VisualReportManager::GetDateTypePropertyValue&  getDateTypePropertyValue /** callback function that returns a @link NXOpen::NXObject::ComputationalTime NXOpen::NXObject::ComputationalTime@endlink  type property value */
            );
            /** Unregisters a property.
                    
                        When the library which the property resides in is unloaded from NX session, this method should be called to unregister the property.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            public: void UnregisterProperty
            (
                const NXString & propertyKey /** property key */
            );
            /** Unregisters a property.
                    
                        When the library which the property resides in is unloaded from NX session, this method should be called to unregister the property.
                    
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_visual_reporting ("Visual Reporting") */
            void UnregisterProperty
            (
                const char * propertyKey /** property key */
            );


            /** Returns the @link NXOpen::VisualReporting::VisualReportCollection NXOpen::VisualReporting::VisualReportCollection@endlink  belonging to this visual report manager 
             <br>  Created in NX7.0.0.  <br>  
            */
            public: NXOpen::VisualReporting::VisualReportCollection *VisualReports();
            /** Returns the @link NXOpen::VisualReporting::VisualReportExplorer NXOpen::VisualReporting::VisualReportExplorer@endlink  belonging to this visual report manager 
             <br>  Created in NX7.5.0.  <br>  
            */
            public: NXOpen::VisualReporting::VisualReportExplorer *VisualReportExplorer();
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
