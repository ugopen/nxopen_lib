#ifndef NXOpen_CAE_MODELANDLOADPREPROCESSTIMESIGNALBUILDER_HXX_INCLUDED
#define NXOpen_CAE_MODELANDLOADPREPROCESSTIMESIGNALBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_ModelAndLoadPreProcessTimeSignalBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/CAE_ModelAndLoadPreProcessOperationBuilder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class ModelAndLoadPreProcessTimeSignalBuilder;
    }
    namespace CAE
    {
        class ModelAndLoadPreProcessOperationBuilder;
    }
    class Expression;
    namespace CAE
    {
        class _ModelAndLoadPreProcessTimeSignalBuilderBuilder;
        class ModelAndLoadPreProcessTimeSignalBuilderImpl;
        /** Represents a @link NXOpen::CAE::ModelAndLoadPreProcessTimeSignal NXOpen::CAE::ModelAndLoadPreProcessTimeSignal@endlink  builder  <br> There is no kf creator for this.  <br> 
         <br>  Created in NX1847.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  ModelAndLoadPreProcessTimeSignalBuilder : public NXOpen::CAE::ModelAndLoadPreProcessOperationBuilder
        {
            /** Possible types of the time range limits */
            public: enum TimeLimitEnum
            {
                TimeLimitEnumNone/** none */ ,
                TimeLimitEnumTime/** time */ ,
                TimeLimitEnumSamples/** samples */ 
            };

            /** Represent different Windowing Types */
            public: enum WindowTypeEnum
            {
                WindowTypeEnumRectangular/** rectangular */ ,
                WindowTypeEnumHanning/** hanning */ ,
                WindowTypeEnumHamming/** hamming */ ,
                WindowTypeEnumKaiserBessel/** kaiser bessel */ ,
                WindowTypeEnumBlackman/** blackman */ ,
                WindowTypeEnumFlatTop/** flat top */ 
            };

            /** Represents Correction Modes. Currently only Amplitude is supported. */
            public: enum CorrectionModeEnum
            {
                CorrectionModeEnumAmplitude/** amplitude */ 
            };

            /** Represents different averaging modes */
            public: enum AveragingTypeEnum
            {
                AveragingTypeEnumAmplitudePhaseLinear/** amplitude phase linear */ ,
                AveragingTypeEnumMaximumPeakHold/** maximum peak hold */ ,
                AveragingTypeEnumRMSEnergy/** rmsenergy */ ,
                AveragingTypeEnumRealImaginaryLinear/** real imaginary linear */ 
            };

            private: ModelAndLoadPreProcessTimeSignalBuilderImpl * m_modelandloadpreprocesstimesignalbuilder_impl;
            private: friend class  _ModelAndLoadPreProcessTimeSignalBuilderBuilder;
            protected: ModelAndLoadPreProcessTimeSignalBuilder();
            public: ~ModelAndLoadPreProcessTimeSignalBuilder();
            /**Returns  the type of specification of the lower-limit 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::TimeLimitEnum LowerLimitType
            (
            );
            /**Sets  the type of specification of the lower-limit 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLowerLimitType
            (
                NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::TimeLimitEnum lowerLimitType /** lowerlimittype */ 
            );
            /**Returns  the lower-limit of the input-signal range, in sample units (when type is TimeLimitEnum_Samples) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int LowerSampleLimit
            (
            );
            /**Sets  the lower-limit of the input-signal range, in sample units (when type is TimeLimitEnum_Samples) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetLowerSampleLimit
            (
                int lowerSampleLimit /** lowersamplelimit */ 
            );
            /**Returns  the lower limit, in time-units (seconds) (when type is TimeLimitEnum_Time) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LowerTimeLimit
            (
            );
            /**Returns  the type of the upper-limit range specification 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::TimeLimitEnum UpperLimitType
            (
            );
            /**Sets  the type of the upper-limit range specification 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUpperLimitType
            (
                NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::TimeLimitEnum upperLimitType /** upperlimittype */ 
            );
            /**Returns  the upper limit, in sample units 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int UpperSampleLimit
            (
            );
            /**Sets  the upper limit, in sample units 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetUpperSampleLimit
            (
                int upperSampleLimit /** uppersamplelimit */ 
            );
            /**Returns  the upper limit, in time units (seconds) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UpperTimeLimit
            (
            );
            /**Returns  the flag which controls whether time-segmentation should be enabled or not. If not enabled, then the entire signal is processed at once.
                        If enabled, then the signal is split into fixed-size intervals (see BlockSize), with a configurable overlap percentage.
                        The last segment, if smaller than the block size, is discarded.
                        
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableTimeSegmentation
            (
            );
            /**Sets  the flag which controls whether time-segmentation should be enabled or not. If not enabled, then the entire signal is processed at once.
                        If enabled, then the signal is split into fixed-size intervals (see BlockSize), with a configurable overlap percentage.
                        The last segment, if smaller than the block size, is discarded.
                        
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEnableTimeSegmentation
            (
                bool enableTimeSegmentation /** enabletimesegmentation */ 
            );
            /**Returns  the block size to use, when segmentation is enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: int BlockSize
            (
            );
            /**Sets  the block size to use, when segmentation is enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetBlockSize
            (
                int blockSize /** blocksize */ 
            );
            /**Returns  the overlap factor (in percents) to use, when segmentation is enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: double Overlap
            (
            );
            /**Sets  the overlap factor (in percents) to use, when segmentation is enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetOverlap
            (
                double overlap /** overlap */ 
            );
            /**Returns  the flags that enables time-to-frequency domain transform (Fast-Fourier-Transform)  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableFFT
            (
            );
            /**Sets  the flags that enables time-to-frequency domain transform (Fast-Fourier-Transform)  
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEnableFFT
            (
                bool enableFFT /** enablefft */ 
            );
            /**Returns  the Windowing type to be used when FFT is enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::WindowTypeEnum WindowType
            (
            );
            /**Sets  the Windowing type to be used when FFT is enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetWindowType
            (
                NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::WindowTypeEnum windowType /** windowtype */ 
            );
            /**Returns  the Windowing Correction mode, used when FFT is enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::CorrectionModeEnum CorrectionMode
            (
            );
            /**Sets  the Windowing Correction mode, used when FFT is enabled 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCorrectionMode
            (
                NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::CorrectionModeEnum correctionMode /** correctionmode */ 
            );
            /**Returns  the flag which enables limiting the lower-range of the resulting frequency spectrum 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableLowerFrequencyLimit
            (
            );
            /**Sets  the flag which enables limiting the lower-range of the resulting frequency spectrum 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEnableLowerFrequencyLimit
            (
                bool enableLowerFrequencyLimit /** enablelowerfrequencylimit */ 
            );
            /**Returns  the lower limit of the frequency range, in Hz (when enabled) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LowerFrequencyLimit
            (
            );
            /**Returns  the flag which enables limiting the upper-range of the resulting frequency spectrum 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableUpperFrequencyLimit
            (
            );
            /**Sets  the flag which enables limiting the upper-range of the resulting frequency spectrum 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEnableUpperFrequencyLimit
            (
                bool enableUpperFrequencyLimit /** enableupperfrequencylimit */ 
            );
            /**Returns  the upper limit of the frequency range, in Hz (when enabled) 
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * UpperFrequencyLimit
            (
            );
            /**Returns  the flags which enables averaging of the multiple spectra resulted by the time-segmentation (time-segmentation must be also enabled)
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: bool EnableAveraging
            (
            );
            /**Sets  the flags which enables averaging of the multiple spectra resulted by the time-segmentation (time-segmentation must be also enabled)
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetEnableAveraging
            (
                bool enableAveraging /** enableaveraging */ 
            );
            /**Returns  the type of averaging to be used (when enabled)
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::AveragingTypeEnum AveragingType
            (
            );
            /**Sets  the type of averaging to be used (when enabled)
             <br>  Created in NX1847.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetAveragingType
            (
                NXOpen::CAE::ModelAndLoadPreProcessTimeSignalBuilder::AveragingTypeEnum averagingType /** averagingtype */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
