#ifndef NXOpen_DRAWINGS_SHEETBORDERSETTINGSBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_SHEETBORDERSETTINGSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_SheetBorderSettingsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/BordersAndZones.hxx>
#include <NXOpen/LineColorFontWidthBuilder.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class SheetBorderSettingsBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    class LineColorFontWidthBuilder;
    class NXColor;
    namespace Drawings
    {
        class _SheetBorderSettingsBuilderBuilder;
        class SheetBorderSettingsBuilderImpl;
        /**
            Represents a @link  NXOpen::Drawings::SheetBorderSettingsBuilder  NXOpen::Drawings::SheetBorderSettingsBuilder@endlink .
            This class queries and sets sheet border settings preferences when creating a sheet border.
            
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  SheetBorderSettingsBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: SheetBorderSettingsBuilderImpl * m_sheetbordersettingsbuilder_impl;
            private: friend class  _SheetBorderSettingsBuilderBuilder;
            protected: SheetBorderSettingsBuilder();
            public: ~SheetBorderSettingsBuilder();
            /**Returns  the method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::Method Method
            (
            );
            /**Sets  the method 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetMethod
            (
                NXOpen::Drawings::Method method /** method */ 
            );
            /**Returns  the create borders 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateBorders
            (
            );
            /**Sets  the create borders 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateBorders
            (
                bool createBorders /** createborders */ 
            );
            /**Returns  the border line width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double BorderLineWidth
            (
            );
            /**Sets  the border line width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetBorderLineWidth
            (
                double borderLineWidth /** borderlinewidth */ 
            );
            /**Returns  the inner border line's color, font and width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * InnerLineCFW
            (
            );
            /**Returns  the outer border line's color, font and width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * OuterLineCFW
            (
            );
            /**Returns  the display sheet size in border 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool DisplaySheetSizeInBorder
            (
            );
            /**Sets  the display sheet size in border 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDisplaySheetSizeInBorder
            (
                bool displaySheetSizeInBorder /** displaysheetsizeinborder */ 
            );
            /**Returns  the centering marks horizontal 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::HorizontalCenteringMarkType CenteringMarksHorizontal
            (
            );
            /**Sets  the centering marks horizontal 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCenteringMarksHorizontal
            (
                NXOpen::Drawings::HorizontalCenteringMarkType centeringMarksHorizontal /** centeringmarkshorizontal */ 
            );
            /**Returns  the centering marks vertical 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::VerticalCenteringMarkType CenteringMarksVertical
            (
            );
            /**Sets  the centering marks vertical 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCenteringMarksVertical
            (
                NXOpen::Drawings::VerticalCenteringMarkType centeringMarksVertical /** centeringmarksvertical */ 
            );
            /**Returns  the centering marks extension 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double CenteringMarksExtension
            (
            );
            /**Sets  the centering marks extension 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCenteringMarksExtension
            (
                double centeringMarksExtension /** centeringmarksextension */ 
            );
            /**Returns  the centering marks color width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::LineColorFontWidthBuilder * CenteringMarksColorWidth
            (
            );
            /**Returns  the arrow style 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ArrowStyleType ArrowStyle
            (
            );
            /**Sets  the arrow style 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowStyle
            (
                NXOpen::Drawings::ArrowStyleType arrowStyle /** arrowstyle */ 
            );
            /**Returns  the arrow length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowLength
            (
            );
            /**Sets  the arrow length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowLength
            (
                double arrowLength /** arrowlength */ 
            );
            /**Returns  the arrow angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowAngle
            (
            );
            /**Sets  the arrow angle 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowAngle
            (
                double arrowAngle /** arrowangle */ 
            );
            /**Returns  the arrow direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ArrowDirectionType ArrowDirection
            (
            );
            /**Sets  the arrow direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowDirection
            (
                NXOpen::Drawings::ArrowDirectionType arrowDirection /** arrowdirection */ 
            );
            /**Returns  the distance from inner border 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double DistanceFromInnerBorder
            (
            );
            /**Sets  the distance from inner border 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetDistanceFromInnerBorder
            (
                double distanceInFromInnerBorder /** distanceinfrominnerborder */ 
            );
            /**Returns  the trimming mark style 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::TrimmingMarkStyleType TrimmingMarkStyle
            (
            );
            /**Sets  the trimming mark style 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTrimmingMarkStyle
            (
                NXOpen::Drawings::TrimmingMarkStyleType trimmingMarkStyle /** trimmingmarkstyle */ 
            );
            /**Returns  the trimming mark length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double TrimmingMarkLength
            (
            );
            /**Sets  the trimming mark length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTrimmingMarkLength
            (
                double trimmingMarkLength /** trimmingmarklength */ 
            );
            /**Returns  the trimming mark width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double TrimmingMarkWidth
            (
            );
            /**Sets  the trimming mark width 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTrimmingMarkWidth
            (
                double trimmingMarkWidth /** trimmingmarkwidth */ 
            );
            /**Returns  the trimming mark color 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXColor * TrimmingMarkColor
            (
            );
            /**Sets  the trimming mark color 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetTrimmingMarkColor
            (
                NXOpen::NXColor * trimmingMarkColor /** trimmingmarkcolor */ 
            );
            /**Returns  the centering mark length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double CenteringMarkLength
            (
            );
            /**Sets  the centering mark length 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCenteringMarkLength
            (
                double centeringMarkLength /** centeringmarklength */ 
            );
            /**Returns  the create trimming marks 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateTrimmingMarks
            (
            );
            /**Sets  the create trimming marks 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCreateTrimmingMarks
            (
                bool createTrimmingMarks /** createtrimmingmarks */ 
            );
            /**Returns  the arrowhead tail 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double ArrowHeadTail
            (
            );
            /**Sets  the arrowhead tail 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetArrowHeadTail
            (
                double arrowHeadTail /** arrowheadtail */ 
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
