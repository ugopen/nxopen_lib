#ifndef NXOpen_MODELINGVIEW_HXX_INCLUDED
#define NXOpen_MODELINGVIEW_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ModelingView.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Display_DynamicSection.hxx>
#include <NXOpen/View.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class ModelingView;
    namespace Display
    {
        class DynamicSection;
    }
    class ModelingViewHighQualityImage;
    class View;
    class _ModelingViewBuilder;
    class ModelingViewImpl;
    /** Represents a Modeling View <br> Modeling Views may only be created by Save As.  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  ModelingView : public NXOpen::View
    {
        private: ModelingViewImpl * m_modelingview_impl;
        private: friend class  _ModelingViewBuilder;
        protected: ModelingView();
        public: ~ModelingView();
        /** Changes the set of lights used in the given view to the
                "Default" set, which for now is the Scene Ambient,
                Scene Left Top and Scene Right Top lights.  If the definition
                of the "Default" set should ever change, the implementation
                of this method would change accordingly.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void UseDefaultLights
        (
        );
        /** Changes the set of lights used in the given view to the
                "Scene" set, which for now includes the eight predefined
                scene lights (including the Scene Ambient light).
                If the definition of the "Scene" set should ever change,
                the implementation of this method would change accordingly.
            
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void UseSceneLights
        (
        );
        /**Returns  the toggle between enabling or disabling the Dynamic Sectioning viewing 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: bool DisplaySectioningToggle
        (
        );
        /**Sets  the toggle between enabling or disabling the Dynamic Sectioning viewing 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDisplaySectioningToggle
        (
            bool newState /** To enable or disable dyanamic Sectioning on display */
        );
        /**Returns  the active dynamic section object in the modeling view.
                 <br> 
                Each modeling view can contain one and only one active dynamic section. Trying
                to reset the active dynamic section in the view by specifying NULL 
                dynamic section will raise an error.
                 <br> 
             
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Display::DynamicSection * ActiveDynamicSection
        (
        );
        /**Sets  the active dynamic section object in the modeling view.
                 <br> 
                Each modeling view can contain one and only one active dynamic section. Trying
                to reset the active dynamic section in the view by specifying NULL 
                dynamic section will raise an error.
                 <br> 
             
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetActiveDynamicSection
        (
            NXOpen::Display::DynamicSection * dynamicSection /** Dynamic section object. Specify NULL to reset active dynamic section. */
        );
        /** Returns if the specified dynamic section object is visible
                in this view.
                
                 <br> 
                When dynamic section object is visible, the section curves
                are shown in the view.
                 <br> 
              @return  Visibility flag 
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: bool IsDynamicSectionVisible
        (
            NXOpen::Display::DynamicSection * dynamicSection /** Dynamic section object */
        );
        /** Sets the specified dynamic section object is visible/invisible
                in this view. 
                
                 <br> 
                When dynamic section object is visible, the section curves
                are shown in the view. Showing section objects in a view is a
                performance intensive operation. In involves cutting all visible
                bodies in the view with the section object definition.        
                 <br> 
             
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: void SetDynamicSectionVisible
        (
            NXOpen::Display::DynamicSection * dynamicSection /** Dynamic section object */,
            bool visible /** Visibility flag */
        );
        /**Returns  a flag indicating whether the model view is mirrored 
         <br>  Created in NX8.5.0.  <br>  
         <br> License requirements : None */
        public: bool IsMirrored
        (
        );
        /** Expand or collapse the node for the specified Model View in the Part Navigator. 
         <br>  Created in NX9.0.3.  <br>  
         <br> License requirements : None */
        public: void ExpandCollapseNode
        (
            bool expand /** expand */ 
        );


        /** Returns the High Quality Image instance belonging to a view 
         <br>  Created in NX3.0.0.  <br>  
        */
        public: NXOpen::ModelingViewHighQualityImage *HiqhQualityImage();
    };
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
