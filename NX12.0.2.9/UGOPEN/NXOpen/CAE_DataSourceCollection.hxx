#ifndef NXOpen_CAE_DATASOURCECOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_DATASOURCECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_DataSourceCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_DataSource.hxx>
#include <NXOpen/CAE_DataSourceBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class DataSourceCollection;
    }
    namespace CAE
    {
        class PostScenarioManager;
    }
    namespace CAE
    {
        class DataSource;
    }
    namespace CAE
    {
        class DataSourceBuilder;
    }
    namespace CAE
    {
        class DataSourceCollectionImpl;
        /**  @brief  This class is a collection of @link NXOpen::CAE::DataSource NXOpen::CAE::DataSource@endlink .  

           <br> To obtain an instance of this class, refer to @link NXOpen::CAE::PostScenarioManager  NXOpen::CAE::PostScenarioManager @endlink  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  DataSourceCollection : public NXOpen::TaggedObjectCollection
        {
            private: DataSourceCollectionImpl * m_datasourcecollection_impl;
            private: NXOpen::CAE::PostScenarioManager* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit DataSourceCollection(NXOpen::CAE::PostScenarioManager *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~DataSourceCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::CAE::DataSourceCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CAE::DataSource *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::CAE::DataSourceCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_CAEEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_CAEEXPORT  void next();
                NXOpen::CAE::DataSourceCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds a @link NXOpen::CAE::DataSource NXOpen::CAE::DataSource@endlink  with the specified name.  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::DataSource * FindObject
            (
                const NXString & name /** name of the layout state  */
            );
            /** Finds a @link NXOpen::CAE::DataSource NXOpen::CAE::DataSource@endlink  with the specified name.  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::DataSource * FindObject
            (
                const char * name /** name of the layout state  */
            );
            /**Creates a @link NXOpen::CAE::DataSourceBuilder NXOpen::CAE::DataSourceBuilder@endlink  that will be used to create a data source @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::DataSourceBuilder * CreateDataSourceBuilder
            (
            );
            /**Creates a @link NXOpen::CAE::DataSourceBuilder NXOpen::CAE::DataSourceBuilder@endlink  that will be used to edit a data source @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::DataSourceBuilder * EditDataSourceBuilder
            (
                NXOpen::CAE::DataSource * source /** source */ 
            );
            /**Deletes a @link NXOpen::CAE::DataSource NXOpen::CAE::DataSource@endlink 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void DeleteDataSource
            (
                NXOpen::CAE::DataSource * source /** source */ 
            );
            /**Refreshes any cache held by Application Specific Post Processing with regards to the managed Data Sources.
                       Application Specific Post Processing caches some information about the referenced Data Sources for performance
                       reasons, and under specific circumstances (e.g. modifying data sources outside the Pre/Post environment),
                       this cached information might no longer be up to date. This method purges this information cache.
                      
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Refresh
            (
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
