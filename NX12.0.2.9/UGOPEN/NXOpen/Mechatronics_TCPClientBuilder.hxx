#ifndef NXOpen_MECHATRONICS_TCPCLIENTBUILDER_HXX_INCLUDED
#define NXOpen_MECHATRONICS_TCPCLIENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mechatronics_TCPClientBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Mechatronics_SignalBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_mechatronics_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mechatronics
    {
        class TCPClientBuilder;
    }
    class Builder;
    class Part;
    namespace Mechatronics
    {
        class _TCPClientBuilderBuilder;
        class TCPClientBuilderImpl;
        /**  @brief  Represents a @link Mechatronics::TCPClientBuilder Mechatronics::TCPClientBuilder@endlink  builder.  

          
             <br> This class is sub-object of another builder, and cannot be directly instantiated.  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_MECHATRONICSEXPORT  TCPClientBuilder : public NXOpen::Builder
        {
             /**  @brief  Represents TCP signal definition structure.  

              
                    */
            public:
            struct Signal
            {
                public: /** Signal Name */NXString Name;
                public: /** Signal IO type */NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType EIOType;
                public: /** Signal Data type */NXOpen::Mechatronics::SignalBuilder::DataType EDataType;
                public: /** Signal offset */NXString Offset;
                public: Signal() :
                    Name(),
                    EIOType((NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType)0),
                    EDataType((NXOpen::Mechatronics::SignalBuilder::DataType)0),
                    Offset()
                {
                }
                /** Constructor for the Signal struct. */ 
                public: Signal(const NXString &nameInitial /** Signal Name */, 
                        NXOpen::Mechatronics::SignalBuilder::ExternalSignalIOType eIOTypeInitial /** Signal IO type */, 
                        NXOpen::Mechatronics::SignalBuilder::DataType eDataTypeInitial /** Signal Data type */, 
                        const NXString &offsetInitial /** Signal offset */) :
                    Name(nameInitial),
                    EIOType(eIOTypeInitial),
                    EDataType(eDataTypeInitial),
                    Offset(offsetInitial)
                {
                }
            };

            private: TCPClientBuilderImpl * m_tcpclientbuilder_impl;
            private: friend class  _TCPClientBuilderBuilder;
            protected: TCPClientBuilder();
            public: ~TCPClientBuilder();
            /**  @brief  Gets TCP connection names  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void GetConnectionNames
            (
                std::vector<NXOpen::Part *> & ownerParts /** ownerparts */ ,
                std::vector<NXString> & names /** names */ 
            );
            /**  @brief  Sets TCP connection names  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConnectionNames
            (
                const std::vector<NXOpen::Part *> & ownerParts /** ownerparts */ ,
                std::vector<NXString> & names /** names */ 
            );
            /**  @brief  Gets TCP connection information  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void GetConnectionInformation
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                NXString* remoteIP /** remoteip */ ,
                int* remotePort /** remoteport */ ,
                NXString* localIP /** localip */ ,
                int* rcvBufSize /** rcvbufsize */ ,
                int* sendBufSize /** sendbufsize */ ,
                double* updateTime /** updatetime */ ,
                std::vector<NXOpen::Mechatronics::TCPClientBuilder::Signal> & signals /** Array of Signal */
            );
            /**  @brief  Gets TCP connection information  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void GetConnectionInformation
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                NXString* remoteIP /** remoteip */ ,
                int* remotePort /** remoteport */ ,
                NXString* localIP /** localip */ ,
                int* rcvBufSize /** rcvbufsize */ ,
                int* sendBufSize /** sendbufsize */ ,
                double* updateTime /** updatetime */ ,
                std::vector<NXOpen::Mechatronics::TCPClientBuilder::Signal> & signals /** Array of Signal */
            );
            /**  @brief  Sets TCP connection information  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetConnectionInformation
            (
                const NXString & instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const NXString & remoteIP /** remoteip */ ,
                int remotePort /** remoteport */ ,
                const NXString & localIP /** localip */ ,
                int rcvBufSize /** rcvbufsize */ ,
                int sendBufSize /** sendbufsize */ ,
                double updateTime /** updatetime */ ,
                const std::vector<NXOpen::Mechatronics::TCPClientBuilder::Signal> & signals /** Array of Signal */
            );
            /**  @brief  Sets TCP connection information  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetConnectionInformation
            (
                const char * instanceName /** instancename */ ,
                NXOpen::Part * ownerPart /** ownerpart */ ,
                const char * remoteIP /** remoteip */ ,
                int remotePort /** remoteport */ ,
                const char * localIP /** localip */ ,
                int rcvBufSize /** rcvbufsize */ ,
                int sendBufSize /** sendbufsize */ ,
                double updateTime /** updatetime */ ,
                const std::vector<NXOpen::Mechatronics::TCPClientBuilder::Signal> & signals /** Array of Signal */
            );
            /**Returns   @brief  the selected configuration name.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SelectedConfigurationName
            (
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationName
            (
                const NXString & configurationName /** configurationname */ 
            );
            /**Sets   @brief  the selected configuration name.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            void SetSelectedConfigurationName
            (
                const char * configurationName /** configurationname */ 
            );
            /**Returns   @brief  the selected configuration part.  

              
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Part * SelectedConfigurationPart
            (
            );
            /**Sets   @brief  the selected configuration part.  

              
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : nx_mcd_core ("Mechatronics Concept Designer") */
            public: void SetSelectedConfigurationPart
            (
                NXOpen::Part * ownerPart /** ownerpart */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
