#ifndef NXOpen_CAM_BOUNDARYTURNBLANK_HXX_INCLUDED
#define NXOpen_CAM_BOUNDARYTURNBLANK_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_BoundaryTurnBlank.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_Boundary.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class BoundaryTurnBlank;
    }
    class Builder;
    namespace CAM
    {
        class Boundary;
    }
    class Point;
    namespace CAM
    {
        class _BoundaryTurnBlankBuilder;
        class BoundaryTurnBlankImpl;
        /**
            Represents a @link NXOpen::CAM::BoundaryTurnBlank NXOpen::CAM::BoundaryTurnBlank@endlink 
             <br> This builder cannot be instantiated separately.  <br> 
         <br>  Created in NX9.0.2.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  BoundaryTurnBlank : public NXOpen::Builder
        {
            /** the blank types available */
            public: enum Type
            {
                TypeBar/** bar */ ,
                TypeTube/** tube */ ,
                TypeCurve/** curve */ ,
                TypeWorkspace/** workspace */ 
            };

            /** the mounting direction types available */
            public: enum Position
            {
                PositionAtHeadstock/** at headstock */ ,
                PositionAwayfromHeadstock/** awayfrom headstock */ 
            };

            private: BoundaryTurnBlankImpl * m_boundaryturnblank_impl;
            private: friend class  _BoundaryTurnBlankBuilder;
            protected: BoundaryTurnBlank();
            public: ~BoundaryTurnBlank();
            /**Returns  the workpiece type 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BoundaryTurnBlank::Type BlankType
            (
            );
            /**Sets  the workpiece type 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetBlankType
            (
                NXOpen::CAM::BoundaryTurnBlank::Type stockType /** stocktype */ 
            );
            /**Returns  the mounting position 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::BoundaryTurnBlank::Position MountingPosition
            (
            );
            /**Sets  the mounting position 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetMountingPosition
            (
                NXOpen::CAM::BoundaryTurnBlank::Position mountPos /** mountpos */ 
            );
            /**Returns  the head stock position 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * Point
            (
            );
            /**Sets  the head stock position 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetPoint
            (
                NXOpen::Point * headStockPosition /** headstockposition */ 
            );
            /**Returns  the length of the bar or tube 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: double Length
            (
            );
            /**Sets  the length of the bar or tube 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetLength
            (
                double length /** length */ 
            );
            /**Returns  the diameter of the bar 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: double Diameter
            (
            );
            /**Sets  the diameter of the bar 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetDiameter
            (
                double diameter /** diameter */ 
            );
            /**Returns  the outer diameter of the tube 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: double OuterDiameter
            (
            );
            /**Sets  the outer diameter of the tube 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetOuterDiameter
            (
                double outerDiameter /** outerdiameter */ 
            );
            /**Returns  the inner diameter of the tube 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: double InnerDiameter
            (
            );
            /**Sets  the inner diameter of the tube 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetInnerDiameter
            (
                double innerDiameter /** innerdiameter */ 
            );
            /**Returns  the equidistant stock 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: double EquidistantStock
            (
            );
            /**Sets  the equidistant stock 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetEquidistantStock
            (
                double equidistantStock /** equidistantstock */ 
            );
            /**Returns  the face stock 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: double FaceStock
            (
            );
            /**Sets  the face stock 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFaceStock
            (
                double faceStock /** facestock */ 
            );
            /**Returns  the radial stock 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: double RadialStock
            (
            );
            /**Sets  the radial stock 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetRadialStock
            (
                double radialStock /** radialstock */ 
            );
            /**Returns  the automatic position flag 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: bool AutoPosition
            (
            );
            /**Sets  the automatic position flag 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetAutoPosition
            (
                bool autoPosition /** autoposition */ 
            );
            /**Returns  the reference point 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * ReferencePoint
            (
            );
            /**Sets  the reference point 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetReferencePoint
            (
                NXOpen::Point * referencePoint /** referencepoint */ 
            );
            /**Returns  the target point 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * TargetPoint
            (
            );
            /**Sets  the target point 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetTargetPoint
            (
                NXOpen::Point * targetPoint /** targetpoint */ 
            );
            /**Returns  the flip direction flag 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: bool FlipDirection
            (
            );
            /**Sets  the flip direction flag 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void SetFlipDirection
            (
                bool flipDirection /** flipdirection */ 
            );
            /**Returns  the boundary 
             <br>  Created in NX9.0.2.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAM::Boundary * Boundary
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
