#ifndef NXOpen_PDM_OBJECTCREATEBUILDER_HXX_INCLUDED
#define NXOpen_PDM_OBJECTCREATEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_ObjectCreateBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/ErrorList.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/IAttributeSourceObjectBuilder.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class ObjectCreateBuilder;
    }
    class Builder;
    class ErrorList;
    class IAttributeSourceObjectBuilder;
    class NXObject;
    namespace PDM
    {
        class GenericObjectAttributeHolder;
    }
    namespace PDM
    {
        class LogicalObject;
    }
    namespace PDM
    {
        class _ObjectCreateBuilderBuilder;
        class ObjectCreateBuilderImpl;
        /** Represents a builder class that perofrms create operation <br> To create a new instance of this class, use @link NXOpen::PDM::PdmSession::CreateObjectCreateBuilder  NXOpen::PDM::PdmSession::CreateObjectCreateBuilder @endlink  <br> 
         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  ObjectCreateBuilder : public NXOpen::Builder, public virtual NXOpen::IAttributeSourceObjectBuilder
        {
            private: ObjectCreateBuilderImpl * m_objectcreatebuilder_impl;
            private: friend class  _ObjectCreateBuilderBuilder;
            protected: ObjectCreateBuilder();
            public: ~ObjectCreateBuilder();
            /** Set Types for which AttributeHolderObject needs to be created.
                       This method will remove all previously set types.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetTypes
            (
                std::vector<NXString> & tcTypes /** tctypes */ ,
                std::vector<NXString> & baseTCTypes /** basetctypes */ 
            );
            /** Creates Pre-Creation LogicalObjects 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void CreateLogicalObjects
            (
                std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /** Returns an array of AttributeHolderObjects created as part of commit. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetAttributeHolderObjects
            (
                std::vector<NXOpen::PDM::GenericObjectAttributeHolder *> & attributeHolderObjects /** attributeholderobjects */ 
            );
            /**Returns  the default destination folder string for the object being created.
                    The default destination folder string can be &lt;username&gt;:&lt;folder&gt;:&lt;folder&gt;, or :&lt;folder&gt;:&lt;folder&gt; means username is optional.
                    In case of :&lt;folder&gt;:&lt;folder&gt;, the first : indicates Home, for example, :Newstuff, is the Newstuff folder in current user's Home container.
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultDestinationFolder
            (
            );
            /**Sets  the default destination folder string for the object being created.
                    The default destination folder string can be &lt;username&gt;:&lt;folder&gt;:&lt;folder&gt;, or :&lt;folder&gt;:&lt;folder&gt; means username is optional.
                    In case of :&lt;folder&gt;:&lt;folder&gt;, the first : indicates Home, for example, :Newstuff, is the Newstuff folder in current user's Home container.
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDefaultDestinationFolder
            (
                const NXString & defaultDestinationFolder /** defaultdestinationfolder */ 
            );
            /**Sets  the default destination folder string for the object being created.
                    The default destination folder string can be &lt;username&gt;:&lt;folder&gt;:&lt;folder&gt;, or :&lt;folder&gt;:&lt;folder&gt; means username is optional.
                    In case of :&lt;folder&gt;:&lt;folder&gt;, the first : indicates Home, for example, :Newstuff, is the Newstuff folder in current user's Home container.
                     
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            void SetDefaultDestinationFolder
            (
                const char * defaultDestinationFolder /** defaultdestinationfolder */ 
            );
            /**  Auto assigns the attributes for a given array of objects and returns an array of objects that failed to auto assign.
                @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributes
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ 
            );
            /**  Auto assigns the attributes for a given object and returns an array of objects that failed to auto assign.
                    properties needs to be created using @link CreateAttributeTitleToNamingPatternMap CreateAttributeTitleToNamingPatternMap@endlink 
                @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::ErrorList * AutoAssignAttributesWithNamingPattern
            (
                const std::vector<NXOpen::NXObject *> & objects /** objects */ ,
                const std::vector<NXOpen::NXObject *> & properties /** properties */ 
            );
            /** Creates a map object of attribute titles to their corresponding naming pattern  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: virtual NXOpen::NXObject * CreateAttributeTitleToNamingPatternMap
            (
                std::vector<NXString> & attributeTitles /** attributetitles */ ,
                std::vector<NXString> & titlePatterns /** titlepatterns */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
