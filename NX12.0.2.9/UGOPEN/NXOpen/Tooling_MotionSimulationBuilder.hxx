#ifndef NXOpen_TOOLING_MOTIONSIMULATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_MOTIONSIMULATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_MotionSimulationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class MotionSimulationBuilder;
    }
    class Builder;
    class Direction;
    class Expression;
    class NXObject;
    class SelectBody;
    class SelectBodyList;
    namespace Tooling
    {
        class _MotionSimulationBuilderBuilder;
        class MotionSimulationBuilderImpl;
        /** Represents a @link NXOpen::Tooling::MotionSimulationBuilder NXOpen::Tooling::MotionSimulationBuilder@endlink  to support dynamic interference check.  <br> To create a new instance of this class, use @link NXOpen::Tooling::MotionSimulationCollection::CreateMotionSimulationBuilder  NXOpen::Tooling::MotionSimulationCollection::CreateMotionSimulationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        AvoidMountChildren </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CamDefinitionMethod (deprecated) </td> <td> 
         
        AutomaticalDefinedCam </td> </tr> 

        <tr><td> 
         
        CrankRadius.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        CsysVisibility </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DiePitch.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        DiePitch02.Value </td> <td> 
         
        10.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        EjectionStartAngle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        EjectorMoveOption </td> <td> 
         
        After </td> </tr> 

        <tr><td> 
         
        HideMotionItem </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IncludeBlank </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsDataFileValid </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        IsRemoveCurrentKinematicModel </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LiftHeight.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        LiftHeight02.Value </td> <td> 
         
        10.0 (millimeters part), 1.0 (inches part) </td> </tr> 

        <tr><td> 
         
        MachineStroke.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        MoldOpenAngle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RelativeMotion </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RenameComponents </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StripTravel.Value </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        StrokeAngleStep.Value </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        StrokePerMinute </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        TransferEndAngle.Value </td> <td> 
         
        250 </td> </tr> 

        <tr><td> 
         
        TransferStartAngle.Value </td> <td> 
         
        110 </td> </tr> 

        </table>  

         <br>  Created in NX7.5.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  MotionSimulationBuilder : public NXOpen::Builder
        {
            /** Specifies the operation options of motion simulation. */
            public: enum Types
            {
                TypesAddKinematicModel/** Adds kinematic model */,
                TypesMountComponent/** Mounts die components to kinematic components*/
            };

            /** Specifies the style type of moldbase, two-plate style or three-plate style */
            public: enum MoldbaseStyleType
            {
                MoldbaseStyleTypeTwo/**  Specifies two-plate style moldbase */,
                MoldbaseStyleTypeThree/** Specifies three-plate style moldbase */
            };

            /** Specifies the ejector move type, after or while */
            public: enum EjectorMoveOptions
            {
                EjectorMoveOptionsAfter/** Eject product after mold fully opened*/,
                EjectorMoveOptionsWhile/** Eject product while mold opening*/
            };

            /** Specifies the way to define cam, automatically or manually. */
            public: enum CamDefinitionType
            {
                CamDefinitionTypeAutomaticalDefinedCam/** Defines cam automatically */,
                CamDefinitionTypeUserDefinedCam/** Defines cam interactively */
            };

            private: MotionSimulationBuilderImpl * m_motionsimulationbuilder_impl;
            private: friend class  _MotionSimulationBuilderBuilder;
            protected: MotionSimulationBuilder();
            public: ~MotionSimulationBuilder();
            /**Returns  the kinematic model name. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXString KinematicModelName
            (
            );
            /**Sets  the kinematic model name. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void SetKinematicModelName
            (
                const NXString & kinematicModelname /** kinematicmodelname */ 
            );
            /**Sets  the kinematic model name. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            void SetKinematicModelName
            (
                const char * kinematicModelname /** kinematicmodelname */ 
            );
            /**Returns  the selected number of kinematic model list. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: int ModelListSelectedNumber
            (
            );
            /**Sets  the selected number of kinematic model list. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void SetModelListSelectedNumber
            (
                int modelListSelectedNumber /** modellistselectednumber */ 
            );
            /**Returns  the target directory to save cloned kinematic model. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString TargetDirectory
            (
            );
            /**Sets  the target directory to save cloned kinematic model. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetTargetDirectory
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the target directory to save cloned kinematic model. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetTargetDirectory
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the renaming rule to clone kinematic model. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") NXString RenameRule
            (
            );
            /**Sets  the renaming rule to clone kinematic model. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") void SetRenameRule
            (
                const NXString & renameRule /** renamerule */ 
            );
            /**Sets  the renaming rule to clone kinematic model. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetRenameRule
            (
                const char * renameRule /** renamerule */ 
            );
            /**Returns  the rename kinematic model components. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: bool RenameComponents
            (
            );
            /**Sets  the rename kinematic model components. 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: void SetRenameComponents
            (
                bool renameComponents /** renamecomponents */ 
            );
            /**Returns  the csys visibility to specify if hide csys in kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool CsysVisibility
            (
            );
            /**Sets  the csys visibility to specify if hide csys in kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetCsysVisibility
            (
                bool csysVisibility /** csysvisibility */ 
            );
            /**Returns  the include blank flag to specify if blanked bodies need to be mounted to kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeBlank
            (
            );
            /**Sets  the include blank flag to specify if blanked bodies need to be mounted to kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetIncludeBlank
            (
                bool includeBlank /** includeblank */ 
            );
            /**Returns  the component to assign die components mounted to a kinematic component. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBodyList * Component
            (
            );
            /**Returns  the kinematic model to specify whose parameters need to be modified. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectBody * KinematicModel
            (
            );
            /**Returns  the moldbase style to control the visibility of process parameters for mold 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::MotionSimulationBuilder::MoldbaseStyleType MoldbaseStyle
            (
            );
            /**Sets  the moldbase style to control the visibility of process parameters for mold 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetMoldbaseStyle
            (
                NXOpen::Tooling::MotionSimulationBuilder::MoldbaseStyleType moldbaseStyle /** moldbasestyle */ 
            );
            /**Returns  the machine stroke to calculate controller data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * MachineStroke
            (
            );
            /**Returns  the crank radius to calculate controller data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * CrankRadius
            (
            );
            /**Returns  the strip travel to calculate controller data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StripTravel
            (
            );
            /**Returns  the lift height to calculate controller data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LiftHeight
            (
            );
            /**Returns  the lift height for second strip, it's used to calculate controller data. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * LiftHeight02
            (
            );
            /**Returns  the die pitch to calculate controller data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DiePitch
            (
            );
            /**Returns  the die pitch value for second strip, it's used to calculate controller data. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * DiePitch02
            (
            );
            /**Returns  the angle to specify when transfer starts moving. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TransferStartAngle
            (
            );
            /**Returns  the angle to specify when transfer stops moving. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * TransferEndAngle
            (
            );
            /**Returns  the stroke angle step to calculate controller data. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * StrokeAngleStep
            (
            );
            /**Returns  the stroke per minute 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: double StrokePerMinute
            (
            );
            /**Sets  the stroke per minute 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStrokePerMinute
            (
                double strokePerMinute /** strokeperminute */ 
            );
            /**Returns  the ejector move option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::MotionSimulationBuilder::EjectorMoveOptions EjectorMoveOption
            (
            );
            /**Sets  the ejector move option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEjectorMoveOption
            (
                NXOpen::Tooling::MotionSimulationBuilder::EjectorMoveOptions ejectorMoveOption /** ejectormoveoption */ 
            );
            /**Returns  the hydraulic motion option 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double MoldOpenAngle
            (
            );
            /**Sets  the hydraulic motion option 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetMoldOpenAngle
            (
                double moldOpenAngle /** moldopenangle */ 
            );
            /**Returns  the hydraulic motion angle 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: double EjectionStartAngle
            (
            );
            /**Sets  the hydraulic motion angle 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetEjectionStartAngle
            (
                double ejectionStartAngle /** ejectionstartangle */ 
            );
            /**Returns  the hide motion item toggle, which specifies whether to remove the motion item from the tree list if there is no mounted component in it 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool RelativeMotion
            (
            );
            /**Sets  the hide motion item toggle, which specifies whether to remove the motion item from the tree list if there is no mounted component in it 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRelativeMotion
            (
                bool relativeMotion /** relativemotion */ 
            );
            /**Returns  the constrol data to import to kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXString ControlDataFile
            (
            );
            /**Sets  the constrol data to import to kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetControlDataFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the constrol data to import to kinematic model 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            void SetControlDataFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the attribute value, which specifies whether the control data file is valid or not 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsDataFileValid
            (
            );
            /**Sets  the attribute value, which specifies whether the control data file is valid or not 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetDataFileValid
            (
                bool isDataFileValid /** isdatafilevalid */ 
            );
            /**Returns  the export file of kinematic model control data 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ExportControlData
            (
            );
            /**Sets  the export file of kinematic model control data 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetExportControlData
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the export file of kinematic model control data 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetExportControlData
            (
                const char * filename /** filename */ 
            );
            /**Returns  the selected mount type. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: NXString SelectedMountType
            (
            );
            /**Sets  the selected mount type. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void SetSelectedMountType
            (
                const NXString & selectedMountType /** selectedmounttype */ 
            );
            /**Sets  the selected mount type. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            void SetSelectedMountType
            (
                const char * selectedMountType /** selectedmounttype */ 
            );
            /**Returns  the cam definition method, automatically or manually. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") NXOpen::Tooling::MotionSimulationBuilder::CamDefinitionType CamDefinitionMethod
            (
            );
            /**Sets  the cam definition method, automatically or manually. 
             <br>  @deprecated Deprecated in NX10.0.0.  This functionality is no longer supported. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.0.  This functionality is no longer supported.") void SetCamDefinitionMethod
            (
                NXOpen::Tooling::MotionSimulationBuilder::CamDefinitionType camDefinitionMethod /** camdefinitionmethod */ 
            );
            /**Returns  the strip feeding direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * StripVector
            (
            );
            /**Sets  the strip feeding direction 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetStripVector
            (
                NXOpen::Direction * stripVector /** stripvector */ 
            );
            /**Returns  the hide motion item toggle, which specifies whether to remove the motion item from the tree list if there is no mounted component in it 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : None */
            public: bool HideMotionItem
            (
            );
            /**Sets  the hide motion item toggle, which specifies whether to remove the motion item from the tree list if there is no mounted component in it 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetHideMotionItem
            (
                bool hideMotionItem /** hidemotionitem */ 
            );
            /**Returns  the avoid mount children toggle, which specifies whether to avoid mounting children components from subassembly 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: bool AvoidMountChildren
            (
            );
            /**Sets  the avoid mount children toggle, which specifies whether to avoid mounting children components from subassembly 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetAvoidMountChildren
            (
                bool avoidMountChildren /** avoidmountchildren */ 
            );
            /**Returns  the type to specify which operation of motion simulation takes effect. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::MotionSimulationBuilder::Types Type
            (
            );
            /**Sets  the type to specify which operation of motion simulation takes effect. 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: void SetType
            (
                NXOpen::Tooling::MotionSimulationBuilder::Types type /** type */ 
            );
            /** Mount kinematic components 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void MountKinematicComponents
            (
            );
            /** Mount component 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void MountComponent
            (
                const std::vector<NXOpen::NXObject *> & componentsArray /** componentsarray */ 
            );
            /**Returns  the attribute value, which specifies whether to remove current kinamatic model or not 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: bool IsRemoveCurrentKinematicModel
            (
            );
            /**Sets  the attribute value, which specifies whether to remove current kinamatic model or not 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRemoveCurrentKinematicModel
            (
                bool isRemoveCurrentKinematicModel /** isremovecurrentkinematicmodel */ 
            );
            /** Gets the mounted body objects in kinamatic model. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            public: void GetMountedBodyObjects
            (
                const NXString & mountType /** mounttype */ ,
                std::vector<NXOpen::NXObject *> & mountedBodyObjects /**The array of mounted body objects. */
            );
            /** Gets the mounted body objects in kinamatic model. 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : None */
            void GetMountedBodyObjects
            (
                const char * mountType /** mounttype */ ,
                std::vector<NXOpen::NXObject *> & mountedBodyObjects /**The array of mounted body objects. */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
