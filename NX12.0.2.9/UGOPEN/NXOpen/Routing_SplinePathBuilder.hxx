#ifndef NXOpen_ROUTING_SPLINEPATHBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_SPLINEPATHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_SplinePathBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/Positioning_Constraint.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class SplinePathBuilder;
    }
    class Builder;
    class Curve;
    class Direction;
    class Expression;
    class Point;
    namespace Routing
    {
        class AssignTangencyBuilder;
    }
    namespace Routing
    {
        class ControlPoint;
    }
    namespace Routing
    {
        class Stock;
    }
    namespace Routing
    {
        class _SplinePathBuilderBuilder;
        class SplinePathBuilderImpl;
        /** Represents a @link NXOpen::Routing::SplinePathBuilder NXOpen::Routing::SplinePathBuilder@endlink  object.
                The builder allows for creating and editing D-Cubed constrained splines, adding extensions,
                adding stock offset points, adding stock, locking length, adding slack, and locking to other
                D-Cubed constrained objects.
             <br> To create a new instance of this class, use @link NXOpen::Routing::RouteManager::CreateSplinePathBuilder  NXOpen::Routing::RouteManager::CreateSplinePathBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  SplinePathBuilder : public NXOpen::Builder
        {
            /** Specifies how the spline points define the shape of the spline. */
            public: enum DefiningTypes
            {
                DefiningTypesUnsupported/** The defining type is unsupported. */,
                DefiningTypesInterpolation/** The defining type represents a C1-continuous, interpolation spline. */,
                DefiningTypesParametric/** The defining type represents a G1-continuous, parametric curve. */,
                DefiningTypesBezier/** The defining type represents a G1-continuous, piecewise cubic Bezier. */,
                DefiningTypesBezierSlack/** The defining type represents a G1-continuous, piecewise cubic Bezier with pseudo gravity slack. */,
                DefiningTypesBezierMaxCurvature/** The defining type represents a G1-continuous, piecewise cubic Bezier with bounded maximum curvature. */,
                DefiningTypesBezierMaxCurvatureSlacked/** The defining type represents a G1-continuous, piecewise cubic Bezier with bounded maximum curvature with pseudo gravity slack. */
            };

            /** Specifies if a new point should be created when adding a point to the spline. */
            public: enum DefiningPointMethod
            {
                DefiningPointMethodCreatePoint/** create point */ ,
                DefiningPointMethodUseExisting/** use existing */ 
            };

            /** Specifies if drag network is active when updating the position of a defining point. */
            public: enum DragMode
            {
                DragModeActive/** The drag network is active */,
                DragModeInactive/** The drag network is inactive */
            };

            /** Describes the type of slack to be applied to the spline. */
            public: enum SplinePathSlackType
            {
                SplinePathSlackTypePercentLength/** The length of the spline is increased by a percentage of the spline length. */,
                SplinePathSlackTypeAdditionalLength/** The length of the spline is increased by an additional length. */,
                SplinePathSlackTypeLockLength/** The length of the spline is slacking to a specified and locked length. */,
                SplinePathSlackTypeTotalPercentage/** Slack value is ratio of extra length. Non-end defining points relaxed down */,
                SplinePathSlackTypeTotalAdditional/** Slack value is extra length. Non-end defining points relaxed down */,
                SplinePathSlackTypeUndefined/** Slack length is undefined. */
            };

            /** Describes user attribute methods options.
                        These value are used to set minimum checking method.
                        If checking method is ratio to diameter than allowable radius will be computed by
                        ratioToDiameter x Stock Diameter.
                    */
            public: enum SplinePathAttributeOptions
            {
                SplinePathAttributeOptionsRadius/** A radius method option for spline user attribute  */,
                SplinePathAttributeOptionsRatioToDiameter/** A ratio to diameter method option for spline user attribute. */
            };

            /** Describes the method for the constrained curvature spline to be defined as.*/
            public: enum SplinePathRadiusSource
            {
                SplinePathRadiusSourceExpression/** Specify radius by value. */,
                SplinePathRadiusSourceRatioToDiameter/** Specify radius by ratio to stock.*/,
                SplinePathRadiusSourceAttribute/** Specify radius by attribute. */
            };

            private: SplinePathBuilderImpl * m_splinepathbuilder_impl;
            private: friend class  _SplinePathBuilderBuilder;
            protected: SplinePathBuilder();
            public: ~SplinePathBuilder();
            /** Adds a defining point to the current spline or creates the first point of the new
                        spline.
                     @return  Returns the index the point was added along the spline.
                                                                                                     For example, if 3 points exist on the spline and the new point
                                                                                                     was added between points 0 and 1 this variable would be set to 1.
                                                                                                 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: int AddDefiningPointToSpline
            (
                NXOpen::Point * point /** Point to add. */,
                bool createNewPoint /** Should the builder create a new point based on the one provided? */
            );
            /** Adds a point to the spline.
                        The point will be the new endpoint of the spline.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AddDefiningPointAtAbsoluteCoords
            (
                const NXOpen::Point3d & point /** The Point to add. */
            );
            /** Updates the position of a point on the spline.  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateDefiningPointPositionAtIndex
            (
                int index /** The index of the point to update position.. */,
                NXOpen::Point * point /** The point representing the new position. */,
                bool inDrag /** Is the point currently being dragged? */
            );
            /** Updates the position of a point on the spline.  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateDefiningPoint
            (
                int index /** The index of the point to update position.. */,
                NXOpen::Point * point /** The point representing the new position. */,
                bool inDrag /** Is the point currently being dragged? */,
                const NXOpen::Vector3d & translation /** Translation to redefine the point. */
            );
            /** Deletes a defining point from the spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DeleteDefiningPointAtIndex
            (
                int index /** Index of the point to delete. */
            );
            /** Sets the defining method of the spline. 
             <br>  @deprecated Deprecated in NX11.0.2.  Use @link Routing::SplinePathBuilder::DefiningTypes Routing::SplinePathBuilder::DefiningTypes@endlink  instead. <br>  

             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX11.0.2.  Use Routing::SplinePathBuilder::DefiningTypes instead.") void SetSplineMethod
            (
                NXOpen::Positioning::Constraint::SplineType splineMethod /** the defining method of the spline. */
            );
            /** Sets whether the spline will attempt to lock points to selected object.
                        This flag is only checked when adding a point to a spline by passing in a smart point to
                        derive a new dumb spline point from.
                        If the smart point is derived from a Port, ControlPoint, or other Routing Object, the
                        new spline defining point will lock to that object.
                        This flag is also checked during commit, where endpoint associativity is applied.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetLockToSelectedFlag
            (
                bool lockSelected /** True to lock to selected objects. */
            );
            /** Sets whether or not additional points will be added to a spline which is created as the
                        result of a subdivide.
                        If true, new points will be added to maintain a shape similar to the original curve.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetAddPointsOnSubdivideFlag
            (
                bool addPoints /** True to add points to subdivided splines. */
            );
            /** Sets whether or not additional the newly created spline will be made tangent to
                        connecting splines.
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetCreateTangencyFlag
            (
                bool createTangency /** True to add tangency. */
            );
            /** Gets the current length of the spline.  @return  The length of the current spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetSplineLength
            (
            );
            /** Gets the current length of the spline without shaping applied.  @return  The length of the current spline without shaping. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetSplineLengthNoShaping
            (
            );
            /** Locks the length of the current spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void LockSplineLengthWithShaping
            (
                NXOpen::Expression * length /** The length to lock the spline. */,
                NXOpen::Direction * slackDirection /** The direction to apply slack.*/
            );
            /** Adds slack to the spline without locking the length.
                        This will move the interior defining points of the spline in the slack direction
                        until the given length is reached.
                    
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void ShapeByAdditionalLengthMovingPoints
            (
                NXOpen::Expression * length /** The length of the spline. */,
                NXOpen::Routing::SplinePathBuilder::SplinePathSlackType slackType /** The type of slack. */,
                NXOpen::Direction * slackDirection /** The direction to apply slack.*/
            );
            /** Locks the length of the current spline. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void LockSplineLengthNoShaping
            (
                NXOpen::Expression * length /** The length to lock the spline. */
            );
            /** Removes all shaping applied to the spline (Lock length, slacking). 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void RemoveAllShaping
            (
            );
            /** Is the spline length locked? 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void IsLengthLocked
            (
                NXOpen::Expression ** length /** The locked length of the spline. */,
                bool* isLocked /** Is the spline length locked? */,
                NXOpen::Direction ** slackDirection /** The direction to apply slack. */
            );
            /** 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AddSlackToSpline
            (
                NXOpen::Routing::SplinePathBuilder::SplinePathSlackType slackType /** The type of slack to add. */,
                NXOpen::Expression * slackValue /** The amount of slack to add. */,
                NXOpen::Direction * slackDirection /** The direction to apply slack.*/
            );
            /** 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void IsSplineSlacked
            (
                bool* slacked /** Is slack applied to the spline? */,
                NXOpen::Routing::SplinePathBuilder::SplinePathSlackType* slackType /** The type of slack. */,
                NXOpen::Expression ** slackValue /** The added amount of slack. */,
                NXOpen::Direction ** downDir /** The slack direction. */
            );
            /** Initialize the D-Cubed dragging functionality for the point at index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void InitializeDrag
            (
                int index /** Index of the point to drag. */
            );
            /** Clears the current drag network. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void CommitDrag
            (
                NXOpen::Point * definingPoint /** Optional UI point defining the position of the spline point. */
            );
            /** Assigns an extension to the point at pointIndex. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignExtension
            (
                int pointIndex /** Index of the point to assing extension. */,
                NXOpen::Direction * direction /** Direction of the extension. */,
                NXOpen::Expression * forwardLength /** Forward Length of the extension. */,
                NXOpen::Expression * backwardLength /** Backward Length of the extension. */
            );
            /** Assigns an extension to the point at pointIndex for Heal Path. 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignHealPathExtension
            (
                int pointIndex /** Index of the point to assing extension. */,
                NXOpen::Direction * direction /** Direction of the extension. */,
                NXOpen::Expression * forwardLength /** Length of the forward extension. */,
                NXOpen::Expression * backwardLength /** Length of the backward extension. */
            );
            /** When a spline is selected for editing, the builder will analyze the spline
                        and gather all of the defining data. The dialog will use this function
                        to retrieve the defining data from the builder to populate its fields.
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AskDefiningData
            (
                std::vector<NXOpen::Point *> & points /** Defining points of the spline. */
            );
            /** Get the extension expressions at the given index. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetExtensionDataForPointAtIndex
            (
                int index /** Index of the defining point to query. */,
                NXOpen::Expression ** forwardLength /** Forward extension length. */,
                NXOpen::Expression ** backwardLength /** Backward extension length. */,
                NXOpen::Vector3d* extDirection /** Extension direction. */
            );
            /** Gets the positions of the defining points as an array of doubles.
                        Each point's XYZ coordinates are represented by three doubles.
                        X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, ...   
                    
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetDefiningPointPositions
            (
                std::vector<double> & pointPositions /** array of doubles representing the defining points. */
            );
            /** Gets the positions of the defining points as an array of Point3d coordinates. 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetDefiningPointPositionsAsPoints
            (
                std::vector<NXOpen::Point3d> & pointPositions /** array of points representing the defining points. */
            );
            /** Gets the routing segment managed by the builder, if it exists.  @return  Visible Routing BCurve Segment. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Curve * GetRouteSegment
            (
            );
            /** Gets the RCPs managed by the builder, if they exist.  @return  The target ControlPoint. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::ControlPoint * GetStartAndEndRcp
            (
                NXOpen::Routing::ControlPoint ** startRcp /** The source ControlPoint. */
            );
            /** Detaches the point at the selected index from all objects its attached to using a Touch
                    constraint. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void DetachPoint
            (
                int index /** Index of point to detach. */
            );
            /** Returns the Stock Offset data associated with a given point. Output can be NULL if the
                    associated point is not a stock offset point. 
             <br>  Created in NX6.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void GetOffsetData
            (
                int index /** Index of point to detach. */,
                int* method /** The type of offset object.
                                                                                                         0 = Not Offset,
                                                                                                         1 = Stock Offset Point,
                                                                                                         2 = Stock Offset Surface. */,
                NXOpen::Point ** basePoint /** The base point frim the offset object. */,
                NXOpen::Direction ** offDir /** The offset direction. */,
                NXString* exp /** The expression defining the offset distance. */
            );
            /** Returns the stock with the largest on the current segment. @return  The stock with the largest diameter. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::Stock * GetLargestDiameterStock
            (
            );
            /** Blanks all the stocks on the current segment and returns the stock with the largest
                    diameter.  @return  The stock with the largest diameter. 
             <br>  @deprecated Deprecated in NX12.0.0.  Use @link Routing::SplinePathBuilder::GetLargestDiameterStock Routing::SplinePathBuilder::GetLargestDiameterStock@endlink  instead. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  Use Routing::SplinePathBuilder::GetLargestDiameterStock instead.") NXOpen::Routing::Stock * BlankStockAndGetLargestDia
            (
            );
            /** Unblanks stocks which were blanked by calling BlankStockAndGetLargestDia
             <br>  @deprecated Deprecated in NX12.0.0.  There is no need for this method. <br>  

             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NX_DEPRECATED("Deprecated in NX12.0.0.  There is no need for this method.") void UnblankStocks
            (
            );
            /** Returns the minimum length of the spline.  The minimum length is the straight line
                    distance between all defining points, including extensions.  @return  The minimum length of the spline. 
             <br>  Created in NX7.5.4.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: double GetLockedSplineMinimumLength
            (
            );
            /**Returns  whether the spline minimum radius value should be checked or not on this spline.
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool UseMinimumCheckingValue
            (
            );
            /**Sets  whether the spline minimum radius value should be checked or not on this spline.
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetUseMinimumCheckingValue
            (
                bool useMinRadius /** useminradius */ 
            );
            /**Returns  the minimum checking method for this spline.
                    See @link NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions@endlink  for valid
                    options 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions MinimumCheckingMethod
            (
            );
            /**Sets  the minimum checking method for this spline.
                    See @link NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions@endlink  for valid
                    options 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetMinimumCheckingMethod
            (
                NXOpen::Routing::SplinePathBuilder::SplinePathAttributeOptions routeCheckingMethod /** routecheckingmethod */ 
            );
            /**Returns  the minimum radius allowed for this spline. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * MinimumCheckingAllowableValue
            (
            );
            /**Returns  the minimum ratio allowed for this spline
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Expression * MinimumCheckingAllowableRatio
            (
            );
            /**Returns  whether the spline minimum radius value should be displayed or not. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: bool ShowSplineMinimumRadius
            (
            );
            /**Sets  whether the spline minimum radius value should be displayed or not. 
             <br>  Created in NX9.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetShowSplineMinimumRadius
            (
                bool allowDisplay /** allowdisplay */ 
            );
            /** Update the extension orientation at the point index. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateExtensionDirectionForPointAtIndex
            (
                int index /** Index of the point to analyze. */,
                const NXOpen::Vector3d & deltaTrans /** Translation to transform. */,
                const NXOpen::Matrix3x3 & orientation /** Delta rotation transform. */,
                bool inDrag /** the geometry is currently being dragged? */
            );
            /** Update the extension orientation at the point index. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void UpdateExtensionDirectionAtIndex
            (
                int index /** Index of the point to analyze. */,
                const NXOpen::Vector3d & direction /** Direction to assign the extension. */
            );
            /** Assigns the extension direction and expressions tangent to the spline path at the given
                    point index. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignTangentExtensionForPointAtIndex
            (
                int index /** Index of the point to use. */,
                NXOpen::Expression * forwardLength /** Length of the forward extension. */,
                NXOpen::Expression * backwardLength /** Length of the backward extension. */,
                NXOpen::Vector3d* tangent /** Extension direction. */,
                NXOpen::Vector3d* normal /** Curve normal. */,
                NXOpen::Direction ** extensionDir /** Direction object. */
            );
            /** Assigns an extension to the point at pointIndex. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void AssignExtension
            (
                int pointIndex /** Index of the point to assign extension. */,
                NXOpen::Direction * direction /** Direction of extension. */,
                NXOpen::Expression * forwardLength /** Forward length of extension. */,
                NXOpen::Expression * backwardLength /** Backward length of extension. */,
                bool forceDeleteOnZeroExpression /** forcedeleteonzeroexpression */ 
            );
            /**Returns  the minimum radius allowed for this spline. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::Expression * BoundedCurvatureRadius
            (
            );
            /**Returns  the minimum radius allowed for this spline as a ratio to diameter. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::Expression * BoundedCurvatureRatio
            (
            );
            /**Returns  whether the spline maximum bounded radius value should be used. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: bool BoundedCurvature
            (
            );
            /**Sets  whether the spline maximum bounded radius value should be used. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetBoundedCurvature
            (
                bool useBoundedCurvature /** useboundedcurvature */ 
            );
            /**Returns  the type which specifies the shape of the spline.
                    See @link NXOpen::Routing::SplinePathBuilder::DefiningTypes NXOpen::Routing::SplinePathBuilder::DefiningTypes@endlink  for valid options 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::SplinePathBuilder::DefiningTypes DefiningType
            (
            );
            /**Sets  the type which specifies the shape of the spline.
                    See @link NXOpen::Routing::SplinePathBuilder::DefiningTypes NXOpen::Routing::SplinePathBuilder::DefiningTypes@endlink  for valid options 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: void SetDefiningType
            (
                NXOpen::Routing::SplinePathBuilder::DefiningTypes definingType /** definingtype */ 
            );
            /** Creates a @link NXOpen::Routing::AssignTangencyBuilder NXOpen::Routing::AssignTangencyBuilder@endlink  object.  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::AssignTangencyBuilder * CreateAssignTangencyBuilder
            (
            );
            /** Get a @link NXOpen::Routing::AssignTangencyBuilder NXOpen::Routing::AssignTangencyBuilder@endlink  object.  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_base ("Routing Basic") */
            public: NXOpen::Routing::AssignTangencyBuilder * GetAssignTangencyBuilder
            (
            );
            /**Returns  the driving expression, value, or attribute of the bounded radius. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: NXOpen::Routing::SplinePathBuilder::SplinePathRadiusSource RadiusSource
            (
            );
            /**Sets  the driving expression, value, or attribute of the bounded radius. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetRadiusSource
            (
                NXOpen::Routing::SplinePathBuilder::SplinePathRadiusSource source /** The type of bounded curvature. */
            );
            /** Sets the driving diameter of the current stock for the ratio-to-diameter bounded curvature. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetStockBoundedDiameter
            (
                double value /** value */ 
            );
            /** Sets the default port extension length to be used when creating or editing points at port
                    locations that do not already have an extension . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced") */
            public: void SetDefaultPortExtensionLength
            (
                double value /** value */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
