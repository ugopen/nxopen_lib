#ifndef NXOpen_WELD_WELDMANAGER_HXX_INCLUDED
#define NXOpen_WELD_WELDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Weld_WeldManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/Weld_CharacteristicsBuilder.hxx>
#include <NXOpen/Weld_UserDefinedWeldBuilder.hxx>
#include <NXOpen/libnxopencpp_weld_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Weld
    {
        class WeldManager;
    }
    namespace Features
    {
        class FeatureCollection;
    }
    namespace Features
    {
        class Feature;
    }
    namespace Annotations
    {
        class Annotation;
    }
    class Curve;
    class NXObject;
    namespace Weld
    {
        class AutoPointBuilder;
    }
    namespace Weld
    {
        class AutoWeldSymbolsBuilder;
    }
    namespace Weld
    {
        class CharacteristicsBuilder;
    }
    namespace Weld
    {
        class CompoundWeld;
    }
    namespace Weld
    {
        class CompoundWeldBuilder;
    }
    namespace Weld
    {
        class ConnectedFaceFinderBuilder;
    }
    namespace Weld
    {
        class DatumPin;
    }
    namespace Weld
    {
        class DatumPinBuilder;
    }
    namespace Weld
    {
        class DatumSurface;
    }
    namespace Weld
    {
        class DatumSurfaceBuilder;
    }
    namespace Weld
    {
        class EasyPatternBuilder;
    }
    namespace Weld
    {
        class EdgePrep;
    }
    namespace Weld
    {
        class EdgePrepBuilder;
    }
    namespace Weld
    {
        class EdgePrepValuesBuilder;
    }
    namespace Weld
    {
        class ExportWeldBuilder;
    }
    namespace Weld
    {
        class ExportWeldJointBuilder;
    }
    namespace Weld
    {
        class Fill;
    }
    namespace Weld
    {
        class FilletBuilder;
    }
    namespace Weld
    {
        class GrooveBuilder;
    }
    namespace Weld
    {
        class InformationBuilder;
    }
    namespace Weld
    {
        class JointExitBuilder;
    }
    namespace Weld
    {
        class Jointmark;
    }
    namespace Weld
    {
        class JointmarkBuilder;
    }
    namespace Weld
    {
        class LocatorReferenceBuilder;
    }
    namespace Weld
    {
        class PlugSlotBuilder;
    }
    namespace Weld
    {
        class PointMark;
    }
    namespace Weld
    {
        class PointMarkBuilder;
    }
    namespace Weld
    {
        class PointMarkPoint;
    }
    namespace Weld
    {
        class SurfaceWeld;
    }
    namespace Weld
    {
        class SurfaceWeldBuilder;
    }
    namespace Weld
    {
        class Transform;
    }
    namespace Weld
    {
        class TransformBuilder;
    }
    namespace Weld
    {
        class UserDefinedWeldBuilder;
    }
    namespace Weld
    {
        class WeldAdvisorBuilder;
    }
    namespace Weld
    {
        class WeldBeadBuilder;
    }
    namespace Weld
    {
        class WeldFillBuilder;
    }
    namespace Weld
    {
        class WeldGrooveBuilder;
    }
    namespace Weld
    {
        class WeldImportBuilder;
    }
    namespace Weld
    {
        class WeldJoint;
    }
    namespace Weld
    {
        class WeldJointBuilder;
    }
    namespace Weld
    {
        class WeldLabelBuilder;
    }
    namespace Weld
    {
        class WeldObjectBuilder;
    }
    namespace Weld
    {
        class WeldPmiBuilder;
    }
    namespace Weld
    {
        class WeldPointBuilder;
    }
    namespace Weld
    {
        class WeldPointExitBuilder;
    }
    namespace Weld
    {
        class WeldPreferenceBuilder;
    }
    namespace Weld
    {
        class WeldManagerImpl;
        /** Manages weld features and assistant tools.  <br> To obtain an instance of this class, refer to @link NXOpen::Features::FeatureCollection  NXOpen::Features::FeatureCollection @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_WELDEXPORT  WeldManager : public NXOpen::TaggedObjectCollection
        {
            private: WeldManagerImpl * m_weldmanager_impl;
            private: NXOpen::Features::FeatureCollection* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit WeldManager(NXOpen::Features::FeatureCollection *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~WeldManager();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::Weld::WeldManager::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Features::Feature *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::Weld::WeldManager *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_WELDEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_WELDEXPORT  void next();
                NXOpen::Weld::WeldManager *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a @link NXOpen::Weld::GrooveBuilder NXOpen::Weld::GrooveBuilder@endlink  object.  @return  WeldGroove feature builder
             <br>  @deprecated Deprecated in NX9.0.0.  Use @link NXOpen::Weld::WeldGrooveBuilder NXOpen::Weld::WeldGrooveBuilder@endlink instead. <br>  

             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use NXOpen::Weld::WeldGrooveBuilderinstead.") NXOpen::Weld::GrooveBuilder * CreateWeldGrooveBuilder
            (
                NXOpen::Features::Feature * weldGroove /** Groove Weld to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Weld::WeldPointBuilder NXOpen::Weld::WeldPointBuilder@endlink  object.  @return  WeldPoint feature builder
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointBuilder * CreateWeldPointBuilder
            (
                NXOpen::Features::Feature * weldPoint /** @link NXOpen::Weld::WeldPointBuilder NXOpen::Weld::WeldPointBuilder@endlink 
                                                                          to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::Weld::WeldImportBuilder NXOpen::Weld::WeldImportBuilder@endlink  object.  @return  Import weld builder 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::Weld::WeldImportBuilder * CreateImportBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::WeldJointBuilder NXOpen::Weld::WeldJointBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::WeldJointBuilder * CreateJointBuilder
            (
                NXOpen::Weld::WeldJoint * weldJoint /** @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Weld::JointExitBuilder NXOpen::Weld::JointExitBuilder@endlink   @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::JointExitBuilder * CreateJointExitBuilder
            (
                NXOpen::Weld::WeldJoint * weldJoint /** @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Weld::JointExitBuilder NXOpen::Weld::JointExitBuilder@endlink  using the curve of a @link NXOpen::Weld::WeldJoint NXOpen::Weld::WeldJoint@endlink   @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::JointExitBuilder * CreateJointExitBuilderCurve
            (
                NXOpen::Curve * curve /** curve */ 
            );
            /** Creates a @link NXOpen::Weld::ExportWeldBuilder NXOpen::Weld::ExportWeldBuilder@endlink  object.  @return  ExportWeld assistant builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") OR structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::ExportWeldBuilder * CreateExportWeldBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::EdgePrepValuesBuilder NXOpen::Weld::EdgePrepValuesBuilder@endlink  object.  @return  Edge Prep Values builder
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::EdgePrepValuesBuilder * CreateEdgePrepValuesBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::AutoPointBuilder NXOpen::Weld::AutoPointBuilder@endlink  object.  @return  AutoPoint assistant builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::AutoPointBuilder * CreateAutoPointBuilder
            (
                NXOpen::Features::Feature * unused /** Builder only creates */
            );
            /** Creates a @link NXOpen::Weld::WeldPreferenceBuilder NXOpen::Weld::WeldPreferenceBuilder@endlink  object.  @return  WeldPref assistant builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPreferenceBuilder * CreatePreferenceBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::UserDefinedWeldBuilder NXOpen::Weld::UserDefinedWeldBuilder@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::UserDefinedWeldBuilder * CreateUserDefinedWeldBuilder
            (
                NXOpen::Features::Feature * featureSet /** Builder only creates */
            );
            /** Creates a @link NXOpen::Weld::CharacteristicsBuilder NXOpen::Weld::CharacteristicsBuilder@endlink , used to specify
                   welding characteristics for any welding feature.  @return  
             <br>  @deprecated Deprecated in NX9.0.0.  Use overloaded function with enum instead. <br>  

             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") OR structure_weld ("STRUCTURE WELD") */
            public: NX_DEPRECATED("Deprecated in NX9.0.0.  Use overloaded function with enum instead.") NXOpen::Weld::CharacteristicsBuilder * CreateCharacteristicsBuilder
            (
                NXOpen::NXObject * object /** object having attributes to be edited. */,
                int weldType /** type of weld feature being created/edited, see uf_weld_types.h. */
            );
            /** Creates a @link NXOpen::Weld::CharacteristicsBuilder NXOpen::Weld::CharacteristicsBuilder@endlink , used to specify
                   welding characteristics for any welding feature.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") OR structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::CharacteristicsBuilder * CreateCharacteristicsBuilder
            (
                NXOpen::NXObject * object /** object having attributes to be edited. */,
                NXOpen::Weld::CharacteristicsBuilder::Type charxType /** The type of characteristics being processed */
            );
            /** Creates a @link NXOpen::Weld::WeldAdvisorBuilder NXOpen::Weld::WeldAdvisorBuilder@endlink  object.  @return  Weld Advisor builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldAdvisorBuilder * CreateWeldAdvisorBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::WeldFillBuilder NXOpen::Weld::WeldFillBuilder@endlink , used to create or edit
                a @link NXOpen::Weld::Fill NXOpen::Weld::Fill@endlink  feature.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldFillBuilder * CreateFillBuilder
            (
                NXOpen::Weld::Fill * fillFeature /** @link NXOpen::Weld::Fill NXOpen::Weld::Fill@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Weld::WeldBeadBuilder NXOpen::Weld::WeldBeadBuilder@endlink  object.  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldBeadBuilder * CreateWeldBeadBuilder
            (
                NXOpen::Features::Feature * beadFeature /** Weld Bead to be edited */
            );
            /** Creates a @link NXOpen::Weld::EasyPatternBuilder NXOpen::Weld::EasyPatternBuilder@endlink  object.  @return  EasyPattern assistant builder
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::EasyPatternBuilder * CreateEasyPatternBuilder
            (
                NXOpen::Features::Feature * patternFeatureSet /** Pattern feature set.  */
            );
            /** Creates a @link NXOpen::Weld::PlugSlotBuilder NXOpen::Weld::PlugSlotBuilder@endlink  object.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::PlugSlotBuilder * CreatePlugSlotBuilder
            (
                NXOpen::Features::Feature * feature /** Weld PlugSlott to be edited */
            );
            /** Creates a @link NXOpen::Weld::FilletBuilder NXOpen::Weld::FilletBuilder@endlink  object.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::FilletBuilder * CreateFilletBuilder
            (
                NXOpen::Features::Feature * feature /** Weld Fillet to be edited */
            );
            /** Creates a @link NXOpen::Weld::EdgePrepBuilder NXOpen::Weld::EdgePrepBuilder@endlink  object.  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::EdgePrepBuilder * CreateEdgePrepBuilder
            (
                NXOpen::Weld::EdgePrep * edgePrepFeature /** Weld Edge Prep Feature to be edited */
            );
            /** Creates a @link NXOpen::Weld::AutoWeldSymbolsBuilder NXOpen::Weld::AutoWeldSymbolsBuilder@endlink  object.  @return  Auto Weld Symbol assistant builder
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") OR structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::AutoWeldSymbolsBuilder * CreateAutoWeldSymbolsBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::WeldObjectBuilder NXOpen::Weld::WeldObjectBuilder@endlink  object.  @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : ugweld ("UG WELD") OR structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::WeldObjectBuilder * CreateWeldObjectBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::ExportWeldJointBuilder NXOpen::Weld::ExportWeldJointBuilder@endlink  object.  @return  Export Weld Joint builder
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::ExportWeldJointBuilder * CreateExportWeldJointBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::DatumSurfaceBuilder NXOpen::Weld::DatumSurfaceBuilder@endlink  object.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::DatumSurfaceBuilder * CreateDatumSurfaceBuilder
            (
                NXOpen::Weld::DatumSurface * feature /** @link NXOpen::Weld::DatumSurface NXOpen::Weld::DatumSurface@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Weld::DatumPinBuilder NXOpen::Weld::DatumPinBuilder@endlink  object.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::DatumPinBuilder * CreateDatumPinBuilder
            (
                NXOpen::Weld::DatumPin * feature /** @link NXOpen::Weld::DatumPin NXOpen::Weld::DatumPin@endlink  to be edited */
            );
            /** The welding annotation to edit, otherwise if NULL, then create a new one  @return  weld label builder
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") OR structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::WeldLabelBuilder * CreateWeldLabelBuilder
            (
                NXOpen::Annotations::Annotation * annotation /** The Welding annotation. */
            );
            /** Creates a @link NXOpen::Weld::WeldGrooveBuilder NXOpen::Weld::WeldGrooveBuilder@endlink  object.  @return      
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldGrooveBuilder * CreateWeldGroove1Builder
            (
                NXOpen::Features::Feature * grooveFeature /** Weld Groove to be edited */
            );
            /** Creates a @link NXOpen::Weld::WeldPointExitBuilder NXOpen::Weld::WeldPointExitBuilder@endlink  object.  @return  
             <br>  Created in NX8.0.2.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::WeldPointExitBuilder * CreateWeldPointExitBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::JointmarkBuilder NXOpen::Weld::JointmarkBuilder@endlink  object.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::JointmarkBuilder * CreateJointmarkBuilder
            (
                NXOpen::Weld::Jointmark * jointmarkFeature /** Jointmark to be edited */
            );
            /** Creates a @link NXOpen::Weld::JointmarkBuilder NXOpen::Weld::JointmarkBuilder@endlink  object from a single element feature.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::JointmarkBuilder * EditSingleJointmarkFeature
            (
                NXOpen::Features::Feature * elementFeature /** Single jointmark element to be edited */
            );
            /** Creates a @link NXOpen::Weld::SurfaceWeldBuilder NXOpen::Weld::SurfaceWeldBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::SurfaceWeldBuilder * CreateSurfaceWeldBuilder
            (
                NXOpen::Weld::SurfaceWeld * surfaceWeld /** @link NXOpen::Weld::SurfaceWeld NXOpen::Weld::SurfaceWeld@endlink  to be edited. NULL to create a new surface weld. */
            );
            /** Creates a builder for running the Connected Face Finder utility.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::ConnectedFaceFinderBuilder * CreateConnectedFaceFinderOperation
            (
            );
            /** Creates a builder for running the Connected Face Finder utility.
                Only used internally for Mirror or Transform on the fly.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::ConnectedFaceFinderBuilder * CreateConnectedFaceFinderBuilder
            (
                const std::vector<NXOpen::Features::Feature *> & weldFeatures /** MUST be an set of weld features used for Mirror or Translate on the fly. */
            );
            /** Creates a @link NXOpen::Weld::CompoundWeldBuilder NXOpen::Weld::CompoundWeldBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::CompoundWeldBuilder * CreateCompoundWeldBuilder
            (
                NXOpen::Weld::CompoundWeld * compoundWeld /** @link NXOpen::Weld::CompoundWeld NXOpen::Weld::CompoundWeld@endlink  to be edited */
            );
            /** Creates a @link NXOpen::Weld::InformationBuilder NXOpen::Weld::InformationBuilder@endlink   @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") OR structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::InformationBuilder * CreateInformationBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::WeldPmiBuilder NXOpen::Weld::WeldPmiBuilder@endlink  object. @return  weld PMI builder
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") OR structure_weld ("STRUCTURE WELD") */
            public: NXOpen::Weld::WeldPmiBuilder * CreateWeldPmiBuilder
            (
            );
            /** Creates a @link NXOpen::Weld::PointMarkBuilder NXOpen::Weld::PointMarkBuilder@endlink  object.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::PointMarkBuilder * CreatePointMarkBuilder
            (
                NXOpen::Weld::PointMark * pointMarkFeature /** PointMark feature to be edited */
            );
            /** Creates a @link NXOpen::Weld::PointMarkBuilder NXOpen::Weld::PointMarkBuilder@endlink  object from a single element feature.  @return  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::PointMarkBuilder * EditSinglePointMarkFeature
            (
                NXOpen::Weld::PointMarkPoint * elementFeature /** Single PointMarkPoints element to be edited */
            );
            /** Creates a @link NXOpen::Weld::LocatorReferenceBuilder NXOpen::Weld::LocatorReferenceBuilder@endlink   @return  
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::LocatorReferenceBuilder * CreateLocatorReferenceBuilder
            (
            );
            /** Create a Weld Bead Design Feature part and make it the session work part.
                   The design feature will be created in the active subset work part. 
             <br>  Created in NX10.0.3.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: void CreateBeadDesignFeature
            (
            );
            /** Creates a @link NXOpen::Weld::TransformBuilder NXOpen::Weld::TransformBuilder@endlink  object.  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : ugweld ("UG WELD") */
            public: NXOpen::Weld::TransformBuilder * CreateTransformBuilder
            (
                NXOpen::Weld::Transform * feature /** Feature to be edited */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
