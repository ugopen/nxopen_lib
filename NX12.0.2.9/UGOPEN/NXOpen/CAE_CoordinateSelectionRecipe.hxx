#ifndef NXOpen_CAE_COORDINATESELECTIONRECIPE_HXX_INCLUDED
#define NXOpen_CAE_COORDINATESELECTIONRECIPE_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CoordinateSelectionRecipe.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_AttributeSelectionRecipe.hxx>
#include <NXOpen/CAE_SelectionRecipe.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CoordinateSelectionRecipe;
    }
    namespace CAE
    {
        class SelectionRecipe;
    }
    namespace CAE
    {
        class _CoordinateSelectionRecipeBuilder;
        class CoordinateSelectionRecipeImpl;
        /**  @brief  Represents a single node selection recipe based on coordinates  

          <br> To obtain an instance of this object use one of the creators in @link NXOpen::CAE::SelectionRecipeCollection NXOpen::CAE::SelectionRecipeCollection@endlink .  <br> 
         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CoordinateSelectionRecipe : public NXOpen::CAE::SelectionRecipe
        {
            private: CoordinateSelectionRecipeImpl * m_coordinateselectionrecipe_impl;
            private: friend class  _CoordinateSelectionRecipeBuilder;
            protected: CoordinateSelectionRecipe();
            public: ~CoordinateSelectionRecipe();
            /**Returns  the target coordinates. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::Point3d Coordinates
            (
            );
            /**Returns  the tolerance. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: double Tolerance
            (
            );
            /** Set the target coordinates. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetCoordinatesAndTolerance
            (
                const NXOpen::Point3d & coordinates /** coordinates */ ,
                double tolerance /** tolerance */ 
            );
            /**Returns  the high label preference. False by default.If set to true, the node with the higher label will be picked, in case the recipe finds multiple nodes within tolerance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: bool HighLabelPreference
            (
            );
            /** Set the high label preference. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void SetHighLabelPreference
            (
                bool useHighLabel /** usehighlabel */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
