#ifndef NXOpen_GEOMETRICANALYSIS_FACEANALYSISDATARANGEBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_FACEANALYSISDATARANGEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_FaceAnalysisDataRangeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_IComponentBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class FaceAnalysisDataRangeBuilder;
    }
    namespace GeometricUtilities
    {
        class IComponentBuilder;
    }
    namespace GeometricAnalysis
    {
        class _FaceAnalysisDataRangeBuilderBuilder;
        class FaceAnalysisDataRangeBuilderImpl;
        /** Represents data range functions used by Face Analysis. 
         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  FaceAnalysisDataRangeBuilder : public NXOpen::TaggedObject, public virtual NXOpen::GeometricUtilities::IComponentBuilder
        {
            private: FaceAnalysisDataRangeBuilderImpl * m_faceanalysisdatarangebuilder_impl;
            private: friend class  _FaceAnalysisDataRangeBuilderBuilder;
            protected: FaceAnalysisDataRangeBuilder();
            public: ~FaceAnalysisDataRangeBuilder();
            /**Returns  the value indicating the range is fixed or not. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool IsFixed
            (
            );
            /**Sets  the value indicating the range is fixed or not. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetFixed
            (
                bool isFixed /** isfixed */ 
            );
            /**Returns  the minimum data range. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double Min
            (
            );
            /**Sets  the minimum data range. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMin
            (
                double min /** min */ 
            );
            /**Returns  the middle value scale for data range. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double MiddleScale
            (
            );
            /**Sets  the middle value scale for data range. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMiddleScale
            (
                double middleScale /** middlescale */ 
            );
            /**Returns  the middle data range value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double Middle
            (
            );
            /**Sets  the middle data range value. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMiddle
            (
                double middle /** middle */ 
            );
            /**Returns  the maximum data range. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double Max
            (
            );
            /**Sets  the maximum data range. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMax
            (
                double max /** max */ 
            );
            /**Returns  the zoom scale. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double ZoomScale
            (
            );
            /**Sets  the zoom scale. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void SetZoomScale
            (
                double scaleSlider /** scaleslider */ 
            );
            /** Resets data range. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void ResetData
            (
            );
            /** Validate whether the inputs to the component are sufficient for 
                        commit to be called.  If the component is not in a state to commit
                        then an exception is thrown.  For example, if the component requires
                        you to set some property, this method will throw an exception if
                        you haven't set it.  This method throws a not-yet-implemented
                        NXException for some components.
                     @return  Was self validation successful 
             <br>  Created in NX3.0.1.  <br>  
             <br> License requirements : None */
            public: virtual bool Validate
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
