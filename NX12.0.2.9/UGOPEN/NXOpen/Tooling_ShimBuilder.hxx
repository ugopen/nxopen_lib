#ifndef NXOpen_TOOLING_SHIMBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_SHIMBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_ShimBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/Tooling_ShimInnerProfileSetBuilder.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class ShimBuilder;
    }
    namespace Assemblies
    {
        class SelectComponent;
    }
    namespace Assemblies
    {
        class SelectComponentList;
    }
    class Builder;
    class Expression;
    class SelectFaceList;
    namespace Tooling
    {
        class ShimInnerProfileSetBuilder;
    }
    namespace Tooling
    {
        class ShimInnerProfileSetBuilderList;
    }
    namespace Tooling
    {
        class _ShimBuilderBuilder;
        class ShimBuilderImpl;
        /** Shim Builder of PDW and EDW. A Body is returned by this builder.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateShimBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateShimBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ParentNode </td> <td> 
         
        NoParent </td> </tr> 

        <tr><td> 
         
        RenameToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SideAttributeValue </td> <td> 
         
        None </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  ShimBuilder : public NXOpen::Builder
        {
            /** Specify the shim operation type. */
            public: enum Types
            {
                TypesAddInsert/** add insert */ ,
                TypesEditInsert/** edit insert */ ,
                TypesDeleteInsert/** delete insert */ 
            };

            /** Specify the parent node. */
            public: enum ParentOption
            {
                ParentOptionNoParent/** no parent */ 
            };

            /** Specifies the value of side attribute. */
            public: enum SideAttributeValues
            {
                SideAttributeValuesNone/** the NONE value */,
                SideAttributeValuesTop/** the TOP value */,
                SideAttributeValuesBottom/** the BOTTOM value */
            };

            private: ShimBuilderImpl * m_shimbuilder_impl;
            private: friend class  _ShimBuilderBuilder;
            protected: ShimBuilder();
            public: ~ShimBuilder();
            /**Returns  the type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ShimBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetType
            (
                NXOpen::Tooling::ShimBuilder::Types type /** type */ 
            );
            /** Create a inner profile set builder object.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ShimInnerProfileSetBuilder * CreateInnerProfileSetBuilder
            (
            );
            /**Returns  the face for doing shim body 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * ShimFace
            (
            );
            /**Returns  the parent node which shim part will be insert to 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ShimBuilder::ParentOption ParentNode
            (
            );
            /**Sets  the parent node which shim part will be insert to 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentNode
            (
                NXOpen::Tooling::ShimBuilder::ParentOption parentNode /** parentnode */ 
            );
            /**Returns  the offset distance of outer loop 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * OffsetOuterDistance
            (
            );
            /**Returns  the height of shim body 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Expression * Height
            (
            );
            /**Returns  the outer rough offset 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool OuterRoughOffset
            (
            );
            /**Sets  the outer rough offset 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetOuterRoughOffset
            (
                bool outerRoughOffset /** outerroughoffset */ 
            );
            /**Returns  the list containing the inner profiles which need to offset.
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ShimInnerProfileSetBuilderList * SlugholeProfile
            (
            );
            /**Returns  the shim component that needs to be edit 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponent * InsertToEdit
            (
            );
            /**Returns  the shim component that needs to be deleted 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Assemblies::SelectComponentList * InsertToDelete
            (
            );
            /**Returns  the toggle to indicate whether to rename shim part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool RenameToggle
            (
            );
            /**Sets  the toggle to indicate whether to rename shim part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetRenameToggle
            (
                bool renameToggle /** renametoggle */ 
            );
            /**Returns  the side attribute value for shim. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Tooling::ShimBuilder::SideAttributeValues SideAttributeValue
            (
            );
            /**Sets  the side attribute value for shim. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: void SetSideAttributeValue
            (
                NXOpen::Tooling::ShimBuilder::SideAttributeValues sideAttributeValue /** Indicates the side attribute value for shim */
            );
            /**Returns  the parent part name of shim part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ParentPartName
            (
            );
            /**Sets  the parent part name of shim part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetParentPartName
            (
                const NXString & parentPartName /** parentpartname */ 
            );
            /**Sets  the parent part name of shim part 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            void SetParentPartName
            (
                const char * parentPartName /** parentpartname */ 
            );
            /**Returns  the wizard type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int WizardType
            (
            );
            /**Sets  the wizard type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetWizardType
            (
                int wizardType /** wizardtype */ 
            );
            /** Returns the item name Of Set List 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: void GetItemName
            (
                std::vector<int> & itemName /**the item name*/
            );
            /** Sets the item name of Set List 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetItemName
            (
                const std::vector<int> & itemName /**the item name*/
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
