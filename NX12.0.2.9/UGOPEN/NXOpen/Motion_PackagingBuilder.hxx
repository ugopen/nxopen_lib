#ifndef NXOpen_MOTION_PACKAGINGBUILDER_HXX_INCLUDED
#define NXOpen_MOTION_PACKAGINGBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Motion_PackagingBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_motion_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Motion
    {
        class PackagingBuilder;
    }
    class Builder;
    class DisplayableObject;
    namespace Motion
    {
        class _PackagingBuilderBuilder;
        class PackagingBuilderImpl;
        /** This class an abstract class and base class for @link  NXOpen::Motion::PackagingMeasureBuilder   NXOpen::Motion::PackagingMeasureBuilder @endlink , 
            @link  NXOpen::Motion::PackagingTraceBuilder   NXOpen::Motion::PackagingTraceBuilder @endlink  and @link  NXOpen::Motion::PackagingInterferenceBuilder   NXOpen::Motion::PackagingInterferenceBuilder @endlink . 
            It to be used in the creation and editing of subobjects of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  . <br> This is an abstract class, and cannot be created.  <br> 
         <br>  Created in NX4.0.0.  <br>  
        */
        class NXOPENCPP_MOTIONEXPORT  PackagingBuilder : public NXOpen::Builder
        {
            private: PackagingBuilderImpl * m_packagingbuilder_impl;
            private: friend class  _PackagingBuilderBuilder;
            protected: PackagingBuilder();
            public: ~PackagingBuilder();
            /**Returns  the name of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: NXString Name
            (
            );
            /**Sets  the name of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetName
            (
                const NXString & name /** The Name of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object. */
            );
            /**Sets  the name of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            void SetName
            (
                const char * name /** The Name of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object. */
            );
            /**Returns  the enable flag of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object.
                    This attribute indicates whether the packaging option is to be executed 
                    during analysis post-processing. If TRUE, the packaging option is executed. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: bool Enable
            (
            );
            /**Sets  the enable flag of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object.
                    This attribute indicates whether the packaging option is to be executed 
                    during analysis post-processing. If TRUE, the packaging option is executed. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetEnable
            (
                bool enable /** Enable flag of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object. */
            );
            /** Returns geometry list 1 of @link  NXOpen::Motion::Packaging   NXOpen::Motion::Packaging @endlink  object.
                    Interference and Measure can have one or two lists defined.
                    If the user defines only one list, then interference or measure
                    checks will be done between each of the objects in list 1.
                    Trace only uses one list definition.  @return  The list pointer 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: std::vector<NXOpen::DisplayableObject *> GetList1
            (
            );
            /** Sets geometry list 1. 
             <br>  Created in NX4.0.0.  <br>  
             <br> License requirements : mechanisms ("MECHANISMS") */
            public: void SetList1
            (
                const std::vector<NXOpen::DisplayableObject *> & list1 /** The list pointer */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
