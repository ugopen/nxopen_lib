#ifndef NXOpen_TOOLDESIGNER_SELECTFIXTUREUNITSBUILDER_HXX_INCLUDED
#define NXOpen_TOOLDESIGNER_SELECTFIXTUREUNITSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ToolDesigner_SelectFixtureUnitsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libtooldesigneropencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace ToolDesigner
    {
        class SelectFixtureUnitsBuilder;
    }
    class Builder;
    class SelectTaggedObject;
    class SelectTaggedObjectList;
    class TaggedObject;
    namespace ToolDesigner
    {
        class _SelectFixtureUnitsBuilderBuilder;
        class SelectFixtureUnitsBuilderImpl;
        /** SelectFixtureUnitsBuilder   <br> To create a new instance of this class, use @link NXOpen::ToolDesigner::ToolDesignerManager::CreateSelectFixtureUnitsBuilder  NXOpen::ToolDesigner::ToolDesignerManager::CreateSelectFixtureUnitsBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CloneUnitToggle </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        SearchTypes </td> <td> 
         
        Name </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class TOOLDESIGNEROPENCPPEXPORT  SelectFixtureUnitsBuilder : public NXOpen::Builder
        {
            /** SearchTypes */
            public: enum SearchTypeEnum
            {
                SearchTypeEnumId/** ID */,
                SearchTypeEnumName/** Name */
            };

            private: SelectFixtureUnitsBuilderImpl * m_selectfixtureunitsbuilder_impl;
            private: friend class  _SelectFixtureUnitsBuilderBuilder;
            protected: SelectFixtureUnitsBuilder();
            public: ~SelectFixtureUnitsBuilder();
            /**Returns  the datum selection 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::SelectTaggedObject * DatumSelection
            (
            );
            /**Returns  the selectable tableEditors selected items (for all tables) 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::SelectTaggedObjectList * InvisibleSelection
            (
            );
            /**Returns  the flip gun direction 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool CloneUnitToggle
            (
            );
            /**Sets  the flip gun direction 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SetCloneUnitToggle
            (
                bool cloneUnitToggle /** cloneunittoggle */ 
            );
            /**Returns  the SearchTypes 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXOpen::ToolDesigner::SelectFixtureUnitsBuilder::SearchTypeEnum SearchTypes
            (
            );
            /**Sets  the SearchTypes 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SetSearchTypes
            (
                NXOpen::ToolDesigner::SelectFixtureUnitsBuilder::SearchTypeEnum val /** val */ 
            );
            /**Returns  the SearchValue 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: NXString SearchValue
            (
            );
            /**Sets  the SearchValue 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void SetSearchValue
            (
                const NXString & searchValue /** searchvalue */ 
            );
            /**Sets  the SearchValue 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            void SetSearchValue
            (
                const char * searchValue /** searchvalue */ 
            );
            /** Perform Search Button 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void PerformSearchButton
            (
            );
            /** Prev Search Button 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void PrevSearchResultsButton
            (
            );
            /** GetCurrentSearchResultsPageNumber  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: int GetCurrentSearchResultsPageNumber
            (
            );
            /** Next Search Button 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void NextSearchResultsButton
            (
            );
            /** GetCurrentSearchResultsPageResults 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void GetCurrentSearchResultsPageResults
            (
                std::vector<NXOpen::TaggedObject *> & resultUnits /** resultunits */ 
            );
            /** ClearCurrentSearchResultsPageResults 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void ClearCurrentSearchResultsPageResults
            (
            );
            /** HasPreviousSearchResultsPage  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool HasPreviousSearchResultsPage
            (
            );
            /** HasNextSearchReultsPage  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool HasNextSearchReultsPage
            (
            );
            /** CollectSelectedUnits 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void CollectSelectedUnits
            (
                std::vector<NXOpen::TaggedObject *> & units /** units */ 
            );
            /** ClearLoadedUnits 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void ClearLoadedUnits
            (
            );
            /** ClearUnitsToUnassociate 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void ClearUnitsToUnassociate
            (
            );
            /** ClearLoadedUnits 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void GetConnectedUnitsAndLoadToSessions
            (
                NXOpen::TaggedObject * datum /** datum */ ,
                std::vector<NXOpen::TaggedObject *> & units /** units */ 
            );
            /** IsAssigned  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool IsAssigned
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** IsAddedFromSearchResults  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: bool IsAddedFromSearchResults
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** GetConnectedDatumsNumber  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: int GetConnectedDatumsNumber
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** LoadUnitToFixture 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void LoadUnitToFixture
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** UnloadUnitFromFixture 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void UnloadUnitFromFixture
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** ClearSelectedUnits 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void ClearSelectedUnits
            (
            );
            /** ClearUnselectedUnits 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void ClearUnselectedUnits
            (
            );
            /** LoadSearchedUnitToFixture 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void LoadSearchedUnitToFixture
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** RemoveSearchedUnitAssociation 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void RemoveSearchedUnitAssociation
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** RemoveAndUnassociateUnit 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void RemoveAndUnassociateUnit
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** UnassociateUnit 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void UnassociateUnit
            (
                NXOpen::TaggedObject * unit /** unit */ 
            );
            /** DeleteSelectedSearchResults 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : fp_fixture_planner ("FULL FIXTURE PLANNER") */
            public: void DeleteSelectedSearchResults
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
