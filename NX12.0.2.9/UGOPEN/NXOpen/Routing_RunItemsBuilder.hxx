#ifndef NXOpen_ROUTING_RUNITEMSBUILDER_HXX_INCLUDED
#define NXOpen_ROUTING_RUNITEMSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Routing_RunItemsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_routing_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Routing
    {
        class RunItemsBuilder;
    }
    class Builder;
    class SelectNXObjectList;
    class TaggedObject;
    namespace Routing
    {
        class _RunItemsBuilderBuilder;
        class RunItemsBuilderImpl;
        /** The builder for creating the list item of RunItems  <br> To create a new instance of this class, use @link NXOpen::Routing::DefineRunBuilder::CreateRunItemsBuilder  NXOpen::Routing::DefineRunBuilder::CreateRunItemsBuilder @endlink  <br> 
         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_ROUTINGEXPORT  RunItemsBuilder : public NXOpen::Builder
        {
            private: RunItemsBuilderImpl * m_runitemsbuilder_impl;
            private: friend class  _RunItemsBuilderBuilder;
            protected: RunItemsBuilder();
            public: ~RunItemsBuilder();
            /**Returns  the list item of run From/To item 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::SelectNXObjectList * RunItems
            (
            );
            /**Returns  the virtual reference Id for FROM/TO items of a run. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXString VirtualReferenceId
            (
            );
            /**Sets  the virtual reference Id for FROM/TO items of a run. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetVirtualReferenceId
            (
                const NXString & virtualRefIdFrom /** ReferenceId to create a stub item as FROM/TO item of a run. */
            );
            /**Sets  the virtual reference Id for FROM/TO items of a run. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetVirtualReferenceId
            (
                const char * virtualRefIdFrom /** ReferenceId to create a stub item as FROM/TO item of a run. */
            );
            /**Returns  the ports of FROM/TO item of the run. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::TaggedObject * CurrentSelectedPort
            (
            );
            /**Sets  the ports of FROM/TO item of the run. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetCurrentSelectedPort
            (
                NXOpen::TaggedObject * selectedPort /** selectedport */ 
            );
            /** The selected items data of the run 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: void SetSelectedItemData
            (
                NXOpen::TaggedObject * scopedObject /** scopedobject */ ,
                const NXString & referenceId /** referenceid */ ,
                const NXString & portName /** portname */ ,
                const std::vector<NXOpen::TaggedObject *> & availablePorts /** availableports */ 
            );
            /** The selected items data of the run 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            void SetSelectedItemData
            (
                NXOpen::TaggedObject * scopedObject /** scopedobject */ ,
                const char * referenceId /** referenceid */ ,
                const char * portName /** portname */ ,
                const std::vector<NXOpen::TaggedObject *> & availablePorts /** availableports */ 
            );
            /** A virtual stub item to be used as From/To item.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            public: NXOpen::TaggedObject * GetVirtualStubItem
            (
                const NXString & virtualReferenceId /** virtualreferenceid */ 
            );
            /** A virtual stub item to be used as From/To item.  @return  
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
            NXOpen::TaggedObject * GetVirtualStubItem
            (
                const char * virtualReferenceId /** virtualreferenceid */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
