#ifndef NXOpen_FEATURES_EMBEDMANAGERBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_EMBEDMANAGERBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_EmbedManagerBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class EmbedManagerBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class _EmbedManagerBuilderBuilder;
        class EmbedManagerBuilderImpl;
        /**
            Used to manage the interaction to Embed, Replace, Rename and Delete embedded
            file information in the part file.
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateEmbedManagerBuilder  NXOpen::Features::FeatureCollection::CreateEmbedManagerBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Area </td> <td> 
         
        MathWorksheet </td> </tr> 

        <tr><td> 
         
        Location </td> <td> 
         
        OperatingSystem </td> </tr> 

        <tr><td> 
         
        Task </td> <td> 
         
        Embed </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  EmbedManagerBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** The area in the part file where the file is to be stored. */
            public: enum UsageAreaTypes
            {
                UsageAreaTypesMathWorksheet/** Used by Symbolica and Maple applications. */
            };

            /** The task to perform on the file. */
            public: enum TaskTypes
            {
                TaskTypesEmbed/** Embed operating system file in part. */,
                TaskTypesReplace/** Replace the existing embedded file. */,
                TaskTypesRename/** Rename the existing embedded file. */,
                TaskTypesDelete/** Delete the existing embedded file. */
            };

            /** The option to specify where the file exists. */
            public: enum LocationTypes
            {
                LocationTypesOperatingSystem/** File exists on the native OS. */,
                LocationTypesTeamcenter/** File exists in Teamcenter. */
            };

            private: EmbedManagerBuilderImpl * m_embedmanagerbuilder_impl;
            private: friend class  _EmbedManagerBuilderBuilder;
            protected: EmbedManagerBuilder();
            public: ~EmbedManagerBuilder();
            /**Returns  the area in the parts file which matches the application usage. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EmbedManagerBuilder::UsageAreaTypes Area
            (
            );
            /**Sets  the area in the parts file which matches the application usage. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetArea
            (
                NXOpen::Features::EmbedManagerBuilder::UsageAreaTypes area /** area */ 
            );
            /**Returns  the task to be performed. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EmbedManagerBuilder::TaskTypes Task
            (
            );
            /**Sets  the task to be performed. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetTask
            (
                NXOpen::Features::EmbedManagerBuilder::TaskTypes type /** type */ 
            );
            /** Get the index of the embedded file to process. May be multiple when deleting embedded data.  @return  Index of embedded file to be processed 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<int> GetEmbeddedFile
            (
            );
            /** Set the index of the embedded file to process. May be multiple when deleting embedded data. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEmbeddedFile
            (
                const std::vector<int> & embeddedFileIndex /** Index of embedded file to process */
            );
            /** Get the embedded file names. The order is consistent with @link NXOpen::Features::EmbedManagerBuilder::GetEmbeddedFile NXOpen::Features::EmbedManagerBuilder::GetEmbeddedFile@endlink  indices.  @return  Embedded file names corresponding to index usage. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetEmbeddedFileNames
            (
            );
            /**Returns  the new name for the embedded file. Used when renaming the embedded file storage. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NewNameFile
            (
            );
            /**Sets  the new name for the embedded file. Used when renaming the embedded file storage. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetNewNameFile
            (
                const NXString & newNameFile /** newnamefile */ 
            );
            /**Sets  the new name for the embedded file. Used when renaming the embedded file storage. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetNewNameFile
            (
                const char * newNameFile /** newnamefile */ 
            );
            /**Returns  the source location of the file.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::EmbedManagerBuilder::LocationTypes Location
            (
            );
            /**Sets  the source location of the file.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetLocation
            (
                NXOpen::Features::EmbedManagerBuilder::LocationTypes location /** location */ 
            );
            /**Returns  the file browser to embed a new file into the part. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EmbedFileBrowser
            (
            );
            /**Sets  the file browser to embed a new file into the part. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEmbedFileBrowser
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the file browser to embed a new file into the part. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetEmbedFileBrowser
            (
                const char * filename /** filename */ 
            );
            /**Returns  the native OS file browser to embed a new file into the part. Used when the session is Teamcenter, but the location is @link NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem@endlink . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString EmbedNativeFileBrowser
            (
            );
            /**Sets  the native OS file browser to embed a new file into the part. Used when the session is Teamcenter, but the location is @link NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem@endlink . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetEmbedNativeFileBrowser
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the native OS file browser to embed a new file into the part. Used when the session is Teamcenter, but the location is @link NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem@endlink . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetEmbedNativeFileBrowser
            (
                const char * filename /** filename */ 
            );
            /**Returns  the file browser to replace an embedded file into the part. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ReplaceFileBrowser
            (
            );
            /**Sets  the file browser to replace an embedded file into the part. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReplaceFileBrowser
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the file browser to replace an embedded file into the part. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetReplaceFileBrowser
            (
                const char * filename /** filename */ 
            );
            /**Returns  the native OS file browser to replace an embedded file into the part. Used when the session is Teamcenter, but the location is @link NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem@endlink . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ReplaceNativeFileBrowser
            (
            );
            /**Sets  the native OS file browser to replace an embedded file into the part. Used when the session is Teamcenter, but the location is @link NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem@endlink . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            public: void SetReplaceNativeFileBrowser
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the native OS file browser to replace an embedded file into the part. Used when the session is Teamcenter, but the location is @link NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem NXOpen::Features::EmbedManagerBuilder::LocationTypesOperatingSystem@endlink . 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : solid_modeling ("SOLIDS MODELING") */
            void SetReplaceNativeFileBrowser
            (
                const char * filename /** filename */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
