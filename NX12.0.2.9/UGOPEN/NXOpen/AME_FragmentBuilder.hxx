#ifndef NXOpen_AME_FRAGMENTBUILDER_HXX_INCLUDED
#define NXOpen_AME_FRAGMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_FragmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AspectDetailsBuilder.hxx>
#include <NXOpen/AME_FragmentAttributeHolder.hxx>
#include <NXOpen/AME_PageBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class FragmentBuilder;
    }
    namespace AME
    {
        class AspectDetailsBuilder;
    }
    namespace AME
    {
        class FragmentAttributeHolder;
    }
    class Builder;
    namespace AME
    {
        class _FragmentBuilderBuilder;
        class FragmentBuilderImpl;
        /** Represents a Fragment creation class Builder   <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateFragmentBuilder  NXOpen::AME::AMEManager::CreateFragmentBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  FragmentBuilder : public NXOpen::Builder
        {
            private: FragmentBuilderImpl * m_fragmentbuilder_impl;
            private: friend class  _FragmentBuilderBuilder;
            protected: FragmentBuilder();
            public: ~FragmentBuilder();
            /**Returns  the fragment type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::PageBuilder::Types Type
            (
            );
            /**Sets  the fragment type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetType
            (
                NXOpen::AME::PageBuilder::Types fragmentType /** fragmenttype */ 
            );
            /**Returns  the fragment name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString FragmentName
            (
            );
            /**Sets  the fragment name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFragmentName
            (
                const NXString & fragmentName /** fragmentname */ 
            );
            /**Sets  the fragment name 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetFragmentName
            (
                const char * fragmentName /** fragmentname */ 
            );
            /**Returns  the fragment description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXString FragmentDescription
            (
            );
            /**Sets  the fragment description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFragmentDescription
            (
                const NXString & fragmentDescription /** fragmentdescription */ 
            );
            /**Sets  the fragment description 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            void SetFragmentDescription
            (
                const char * fragmentDescription /** fragmentdescription */ 
            );
            /**Returns  the fragment aspect details
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::AME::AspectDetailsBuilder * AspectDetailsBuilder
            (
            );
            /**Returns  the attribute holder 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::FragmentAttributeHolder * FragmentAttributeHolder
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
