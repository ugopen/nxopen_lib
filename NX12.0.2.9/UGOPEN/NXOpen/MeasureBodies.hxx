#ifndef NXOpen_MEASUREBODIES_HXX_INCLUDED
#define NXOpen_MEASUREBODIES_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     MeasureBodies.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/MeasureManager.hxx>
#include <NXOpen/GenericMeasure.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class MeasureBodies;
    class GenericMeasure;
    class Measure;
    class Scalar;
    class MeasureBodiesImpl;
    /** Represents the measurement specific mass properties for a set of bodies  <br> To create or edit an instance of this class, use @link NXOpen::MeasureFaceBuilder  NXOpen::MeasureFaceBuilder @endlink  <br> 
     <br>  Created in NX4.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  MeasureBodies : public NXOpen::GenericMeasure
    {
        /** Indicates the type of embedded measurement to create */
        public: enum ActiveValue
        {
            ActiveValueVolume/** volume */ ,
            ActiveValueArea/** area */ ,
            ActiveValueMass/** mass */ ,
            ActiveValueRadiusOfGyration/** radius of gyration */ ,
            ActiveValueWeight/** weight */ ,
            ActiveValueCentroid/** centroid */ 
        };

        /** Indicates the family of units used in mass property information listings */
        public: enum AnalysisUnit
        {
            AnalysisUnitPoundInch/** pound inch */ ,
            AnalysisUnitPoundFoot/** pound foot */ ,
            AnalysisUnitGramMillimeter/** gram millimeter */ ,
            AnalysisUnitGramCentimeter/** gram centimeter */ ,
            AnalysisUnitKilogramMeter/** kilogram meter */ ,
            AnalysisUnitKilogramMillimeter/** kilogram millimeter */ ,
            AnalysisUnitCustomUnit/** custom unit */ 
        };

        private: MeasureBodiesImpl * m_measurebodies_impl;
        /// \cond NX_NO_DOC 
        public: explicit MeasureBodies(void *ptr);
        /// \endcond 
        /**Returns  the family of units for mass properties in the information window 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::MeasureBodies::AnalysisUnit InformationUnit
        (
        );
        /**Sets  the family of units for mass properties in the information window 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: void SetInformationUnit
        (
            NXOpen::MeasureBodies::AnalysisUnit unitValue /** unit value */ 
        );
        /**Returns  the value for volume of the measurement 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double Volume
        (
        );
        /**Returns  the value for area of the measurement 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double Area
        (
        );
        /**Returns  the value for mass of the measurement 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double Mass
        (
        );
        /**Returns  the value for radius of gyration of the measurement 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double RadiusOfGyration
        (
        );
        /**Returns  the value for weight of the measurement 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: double Weight
        (
        );
        /**Returns  the centroid point of the measurement 
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point3d Centroid
        (
        );
        /** Creates and returns a measurement feature to obtain mass properties of solid bodies  @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Measure * CreateFeature
        (
        );
        /** Creates and returns an embedded measurement expression. 
          Deprecated: Use CreateEmbeddedObject instead   @return  
         <br>  @deprecated Deprecated in NX5.0.1.  Use @link NXOpen::MeasureBodies::CreateEmbeddedObject NXOpen::MeasureBodies::CreateEmbeddedObject@endlink  instead. <br>  

         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NX_DEPRECATED("Deprecated in NX5.0.1.  Use NXOpen::MeasureBodies::CreateEmbeddedObject instead.") NXString CreateEmbedded
        (
            NXOpen::MeasureBodies::ActiveValue measurementType /** measurement type */ 
        );
        /** Creates an embedded measurement.
          The name of the measurement can be used in an expression formula.  @return  the measurement 
         <br>  Created in NX5.0.1.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") */
        public: NXOpen::Scalar * CreateEmbeddedObject
        (
            NXOpen::MeasureBodies::ActiveValue measurementType /** measurement type */ ,
            NXString* name /** the name of the measurement */
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
