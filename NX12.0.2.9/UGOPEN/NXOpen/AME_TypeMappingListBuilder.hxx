#ifndef NXOpen_AME_TYPEMAPPINGLISTBUILDER_HXX_INCLUDED
#define NXOpen_AME_TYPEMAPPINGLISTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_TypeMappingListBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_TypeMappingBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class TypeMappingListBuilder;
    }
    namespace AME
    {
        class TypeMappingBuilder;
    }
    namespace AME
    {
        class TypeMappingBuilderList;
    }
    class Builder;
    namespace AME
    {
        class _TypeMappingListBuilderBuilder;
        class TypeMappingListBuilderImpl;
        /** Type Mapping List Builder  <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateTypeMappingListBuilder  NXOpen::AME::AMEManager::CreateTypeMappingListBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  TypeMappingListBuilder : public NXOpen::Builder
        {
            private: TypeMappingListBuilderImpl * m_typemappinglistbuilder_impl;
            private: friend class  _TypeMappingListBuilderBuilder;
            protected: TypeMappingListBuilder();
            public: ~TypeMappingListBuilder();
            /**Returns  the pair list 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TypeMappingBuilderList * List
            (
            );
            /** Create a new type mapping  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::AME::TypeMappingBuilder * CreateTypeMapping
            (
            );
            /** Delete type mapping 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteTypeMapping
            (
                NXOpen::AME::TypeMappingBuilder * mappingBuilder /** mappingbuilder */ 
            );
            /** Loads the Ld types linked to the given AD type @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::AME::TypeMappingBuilder *> LoadAd
            (
                const NXString & adPath /** adpath */ 
            );
            /** Loads the Ld types linked to the given AD type @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            std::vector<NXOpen::AME::TypeMappingBuilder *> LoadAd
            (
                const char * adPath /** adpath */ 
            );
            /** Loads the Ld types in the project @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: std::vector<NXOpen::AME::TypeMappingBuilder *> LoadAllLdTypes
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
