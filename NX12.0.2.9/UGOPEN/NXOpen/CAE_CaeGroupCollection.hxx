#ifndef NXOpen_CAE_CAEGROUPCOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_CAEGROUPCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_CaeGroupCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_GroupByBoundaryBuilder.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class CaeGroupCollection;
    }
    namespace CAE
    {
        class CaePart;
    }
    namespace CAE
    {
        class CaeGroup;
    }
    namespace CAE
    {
        class GroupByBoundaryBuilder;
    }
    namespace CAE
    {
        class Mesh;
    }
    class TaggedObject;
    namespace CAE
    {
        class CaeGroupCollectionImpl;
        /**  @brief  Provides methods for managing set @link NXOpen::CAE::CaeGroup NXOpen::CAE::CaeGroup@endlink  

           <br> To obtain an instance of this class, refer to @link NXOpen::CAE::CaePart  NXOpen::CAE::CaePart @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  CaeGroupCollection : public NXOpen::TaggedObjectCollection
        {
            /** Entity type */
            public: enum EntityType
            {
                EntityTypeNode/** node */ ,
                EntityTypeElement/** element */ 
            };

             /** Contains information about the types by which we do auto grouping */
            public:
            struct AutoGroupTypes
            {
                public: /** true if meshes are to be grouped by material */bool ByMaterial;
                public: /** true if meshes are to be grouped by physical property table */bool ByPpt;
                public: /** true if meshes are to be grouped by color */bool ByColor;
                public: /** true if meshes are to be grouped by 1-D section */bool BySection;
                public: /** true if meshes are to be grouped by laminate */bool ByLaminate;
                public: /** true if meshes are to be grouped by dimension */bool ByDimension;
                public: /** true if meshes are to be grouped by mesh collector type */bool ByMeshcolltype;
                public: /** related to meshes_by_meshcolltype, true if we also want to group by mesh subtype */bool ByMeshsubtype;
                public: /** true if nodes that are connected across components are to be grouped */bool ConnectedcompNodes;
                public: AutoGroupTypes() :
                    ByMaterial(),
                    ByPpt(),
                    ByColor(),
                    BySection(),
                    ByLaminate(),
                    ByDimension(),
                    ByMeshcolltype(),
                    ByMeshsubtype(),
                    ConnectedcompNodes()
                {
                }
                /** Constructor for the AutoGroupTypes struct. */ 
                public: AutoGroupTypes(bool byMaterialInitial /** true if meshes are to be grouped by material */, 
                        bool byPptInitial /** true if meshes are to be grouped by physical property table */, 
                        bool byColorInitial /** true if meshes are to be grouped by color */, 
                        bool bySectionInitial /** true if meshes are to be grouped by 1-D section */, 
                        bool byLaminateInitial /** true if meshes are to be grouped by laminate */, 
                        bool byDimensionInitial /** true if meshes are to be grouped by dimension */, 
                        bool byMeshcolltypeInitial /** true if meshes are to be grouped by mesh collector type */, 
                        bool byMeshsubtypeInitial /** related to meshes_by_meshcolltype, true if we also want to group by mesh subtype */, 
                        bool connectedcompNodesInitial /** true if nodes that are connected across components are to be grouped */) :
                    ByMaterial(byMaterialInitial),
                    ByPpt(byPptInitial),
                    ByColor(byColorInitial),
                    BySection(bySectionInitial),
                    ByLaminate(byLaminateInitial),
                    ByDimension(byDimensionInitial),
                    ByMeshcolltype(byMeshcolltypeInitial),
                    ByMeshsubtype(byMeshsubtypeInitial),
                    ConnectedcompNodes(connectedcompNodesInitial)
                {
                }
            };

             /** Contains the prefix seed names to be given to auto created groups by type
                        If a seed value is passed as NULL, then the auto created groups by that type will be given a default prefix
                        List of default prefixes are as follows:
                        MAT- for material_seed
                        PPT- for ppt_seed
                        Color-   for color_seed
                        XSECT-   for section_seed
                        LAM-     for laminate seed
                        DIM-     for dimension seed
                        FE_TYPE- for meshcolltype_seed  
                        ACROSS-  for connected across assembly component seed */
            public:
            struct AutoGroupSeedNames
            {
                public: /** prefix seed name for auto groups grouped by material */NXString MaterialSeed;
                public: /** prefix seed name for auto groups grouped by physical property table */NXString PptSeed;
                public: /** prefix seed name for auto groups grouped by color */NXString ColorSeed;
                public: /** prefix seed name for auto groups grouped by 1-D section */NXString SectionSeed;
                public: /** prefix seed name for auto groups grouped by laminate */NXString LaminateSeed;
                public: /** prefix seed name for auto groups grouped by dimension */NXString DimensionSeed;
                public: /** prefix seed name for auto groups grouped by mesh collector type */NXString MeshcolltypeSeed;
                public: /** prefix seed name for auto groups grouped if across connected assembly component */NXString ConnectedcompSeed;
                public: AutoGroupSeedNames() :
                    MaterialSeed(),
                    PptSeed(),
                    ColorSeed(),
                    SectionSeed(),
                    LaminateSeed(),
                    DimensionSeed(),
                    MeshcolltypeSeed(),
                    ConnectedcompSeed()
                {
                }
                /** Constructor for the AutoGroupSeedNames struct. */ 
                public: AutoGroupSeedNames(const NXString &materialSeedInitial /** prefix seed name for auto groups grouped by material */, 
                        const NXString &pptSeedInitial /** prefix seed name for auto groups grouped by physical property table */, 
                        const NXString &colorSeedInitial /** prefix seed name for auto groups grouped by color */, 
                        const NXString &sectionSeedInitial /** prefix seed name for auto groups grouped by 1-D section */, 
                        const NXString &laminateSeedInitial /** prefix seed name for auto groups grouped by laminate */, 
                        const NXString &dimensionSeedInitial /** prefix seed name for auto groups grouped by dimension */, 
                        const NXString &meshcolltypeSeedInitial /** prefix seed name for auto groups grouped by mesh collector type */, 
                        const NXString &connectedcompSeedInitial /** prefix seed name for auto groups grouped if across connected assembly component */) :
                    MaterialSeed(materialSeedInitial),
                    PptSeed(pptSeedInitial),
                    ColorSeed(colorSeedInitial),
                    SectionSeed(sectionSeedInitial),
                    LaminateSeed(laminateSeedInitial),
                    DimensionSeed(dimensionSeedInitial),
                    MeshcolltypeSeed(meshcolltypeSeedInitial),
                    ConnectedcompSeed(connectedcompSeedInitial)
                {
                }
            };

             /** Contains list of error codes for each auto group type */
            public:
            struct AutoGroupErrorCodes
            {
                public: /** returns error code for meshes by material */int ByMaterial;
                public: /** returns error code for meshes by physical property table */int ByPpt;
                public: /** returns error code for meshes by color */int ByColor;
                public: /** returns error code for meshes by 1-D section */int BySection;
                public: /** returns error code for meshes by laminate */int ByLaminate;
                public: /** returns error code for meshes by dimension */int ByDimension;
                public: /** returns error code for meshes by mesh collector type */int ByMeshcolltype;
                public: /** returns error code for meshes by mesh collector type and also mesh subtype */int ByMeshsubtype;
                public: /** returns error code for nodes connected across assembly components */int ConnectedcompNodes;
                public: AutoGroupErrorCodes() :
                    ByMaterial(),
                    ByPpt(),
                    ByColor(),
                    BySection(),
                    ByLaminate(),
                    ByDimension(),
                    ByMeshcolltype(),
                    ByMeshsubtype(),
                    ConnectedcompNodes()
                {
                }
                /** Constructor for the AutoGroupErrorCodes struct. */ 
                public: AutoGroupErrorCodes(int byMaterialInitial /** returns error code for meshes by material */, 
                        int byPptInitial /** returns error code for meshes by physical property table */, 
                        int byColorInitial /** returns error code for meshes by color */, 
                        int bySectionInitial /** returns error code for meshes by 1-D section */, 
                        int byLaminateInitial /** returns error code for meshes by laminate */, 
                        int byDimensionInitial /** returns error code for meshes by dimension */, 
                        int byMeshcolltypeInitial /** returns error code for meshes by mesh collector type */, 
                        int byMeshsubtypeInitial /** returns error code for meshes by mesh collector type and also mesh subtype */, 
                        int connectedcompNodesInitial /** returns error code for nodes connected across assembly components */) :
                    ByMaterial(byMaterialInitial),
                    ByPpt(byPptInitial),
                    ByColor(byColorInitial),
                    BySection(bySectionInitial),
                    ByLaminate(byLaminateInitial),
                    ByDimension(byDimensionInitial),
                    ByMeshcolltype(byMeshcolltypeInitial),
                    ByMeshsubtype(byMeshsubtypeInitial),
                    ConnectedcompNodes(connectedcompNodesInitial)
                {
                }
            };

            private: CaeGroupCollectionImpl * m_caegroupcollection_impl;
            private: NXOpen::CAE::CaePart* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit CaeGroupCollection(NXOpen::CAE::CaePart *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~CaeGroupCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::CAE::CaeGroupCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CAE::CaeGroup *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::CAE::CaeGroupCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_CAEEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_CAEEXPORT  void next();
                NXOpen::CAE::CaeGroupCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Create a Group @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateGroup
            (
                const NXString & setName /**  Name of a Set */,
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            /** Create a Group @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeGroup * CreateGroup
            (
                const char * setName /**  Name of a Set */,
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            /** Create a Group @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateGroup
            (
                const NXString & setName /**  Name of a Set */,
                int label /** The group label must be >=0 and be unique */,
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            /** Create a Group @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeGroup * CreateGroup
            (
                const char * setName /**  Name of a Set */,
                int label /** The group label must be >=0 and be unique */,
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            /** Create a Union of Groups @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateUnionGroup
            (
                const NXString & setName /**  Name of the Union group. If no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a Union of Groups @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeGroup * CreateUnionGroup
            (
                const char * setName /**  Name of the Union group. If no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a Intersection of Groups @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateIntersectionGroup
            (
                const NXString & setName /**  Name of the Intersection group. If no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a Intersection of Groups @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeGroup * CreateIntersectionGroup
            (
                const char * setName /**  Name of the Intersection group. If no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a XOR of Groups @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateExclusiveOrGroup
            (
                const NXString & setName /**  Name of the exclusive or group. If no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a XOR of Groups @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeGroup * CreateExclusiveOrGroup
            (
                const char * setName /**  Name of the exclusive or group. If no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                const std::vector<NXOpen::CAE::CaeGroup *> & objects /** objects */ 
            );
            /** Create a Subtraction of two Groups @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateSubtractGroup
            (
                const NXString & setName /**  Name of the subtraction group. If no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                NXOpen::CAE::CaeGroup * fromGroup /** The Set that will be substracted */,
                NXOpen::CAE::CaeGroup * excludedGroup /** The Set that will be used for substraction */
            );
            /** Create a Subtraction of two Groups @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeGroup * CreateSubtractGroup
            (
                const char * setName /**  Name of the subtraction group. If no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                NXOpen::CAE::CaeGroup * fromGroup /** The Set that will be substracted */,
                NXOpen::CAE::CaeGroup * excludedGroup /** The Set that will be used for substraction */
            );
            /** Copies the input group, which must come from the same part as the collection. @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CopyGroup
            (
                const NXString & setName /**  New group name, if no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                NXOpen::CAE::CaeGroup * sourceGroup /** must come from the same part as the collection */
            );
            /** Copies the input group, which must come from the same part as the collection. @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeGroup * CopyGroup
            (
                const char * setName /**  New group name, if no name is input 
                                                             or the input name is invalid, a 
                                                             name will be generated. */,
                NXOpen::CAE::CaeGroup * sourceGroup /** must come from the same part as the collection */
            );
            /** Create a Output Group @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateOutputGroup
            (
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            /** Create a Node/Element Group from node/element IDs @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateGroupFromEntityIds
            (
                const NXString & setName /**  Name of a Set */,
                NXOpen::CAE::CaeGroupCollection::EntityType entityType /** entitytype */ ,
                const std::vector<int> & entityID /** entityid */ 
            );
            /** Create a Node/Element Group from node/element IDs @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::CaeGroup * CreateGroupFromEntityIds
            (
                const char * setName /**  Name of a Set */,
                NXOpen::CAE::CaeGroupCollection::EntityType entityType /** entitytype */ ,
                const std::vector<int> & entityID /** entityid */ 
            );
            /** Finds the @link  NXOpen::CAE::CaeGroup   NXOpen::CAE::CaeGroup @endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.

                        An exception will be thrown if no object can be found with the given journal identifier.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CaeGroup * FindObject
            (
                const NXString & journalIdentifier /** Identifier of the Set you want */
            );
            /** Finds the @link  NXOpen::CAE::CaeGroup   NXOpen::CAE::CaeGroup @endlink  with the given identifier as recorded in a journal. 
                        An object may not return the same value as its JournalIdentifier in different versions of 
                        the software. However newer versions of the software should find the same object when 
                        FindObject is passed older versions of its journal identifier. In general, this method 
                        should not be used in handwritten code and exists to support record and playback of journals.

                        An exception will be thrown if no object can be found with the given journal identifier.  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            NXOpen::CAE::CaeGroup * FindObject
            (
                const char * journalIdentifier /** Identifier of the Set you want */
            );
            /** Query Groups list
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void QueryGroupList
            (
                std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
            /** Creates element group representing volume.
                     @return   
             <br>  Created in NX10.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::GroupByBoundaryBuilder * CreateGroupByBoundaryBuilder
            (
            );
            /** Auto group CAE entities based on attributes
                        Types (attribute types) by which auto grouping needs to be done should be specified using
                        the JA CAE_GROUP_COLLECTION_auto_group_types structure. The number of auto created groups
                        and the array of auto created groups will be returned. Errors if any are returned by auto
                        group type through the JA CAE_GROUP_COLLECTION_auto_group_error_codes structure.  @return  list of generated error codes for each auto group type 
             <br>  Created in NX7.5.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroupCollection::AutoGroupErrorCodes CreateAutoGroups
            (
                const NXOpen::CAE::CaeGroupCollection::AutoGroupTypes & autoGroupTypes /** types specifying which attributes to group by */,
                const NXOpen::CAE::CaeGroupCollection::AutoGroupSeedNames & autoGroupSeeds /** prefix seed names for auto created groups by type. If this argument is NULL or if any seed name is NULL, default prefixes are given */,
                std::vector<NXOpen::CAE::CaeGroup *> & autoGroups /** output array of auto created groups */
            );
            /** Auto group CAE entities based on attributes
                        Types (attribute types) by which auto grouping needs to be done should be specified using
                        the JA CAE_GROUP_COLLECTION_auto_group_types structure. The number of auto created groups
                        and the array of auto created groups will be returned. Errors if any are returned by auto
                        group type through the JA CAE_GROUP_COLLECTION_auto_group_error_codes structure.  @return  list of generated error codes for each auto group type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: NXOpen::CAE::CaeGroupCollection::AutoGroupErrorCodes CreateAutoGroups
            (
                const std::vector<NXOpen::CAE::Mesh *> & ptMeshes /** ptmeshes */ ,
                const NXOpen::CAE::CaeGroupCollection::AutoGroupTypes & autoGroupTypes /** types specifying which attributes to group by */,
                const NXOpen::CAE::CaeGroupCollection::AutoGroupSeedNames & autoGroupSeeds /** prefix seed names for auto created groups by type. If this argument is NULL or if any seed name is NULL, default prefixes are given */,
                std::vector<NXOpen::CAE::CaeGroup *> & autoGroups /** output array of auto created groups */
            );
            /** Create a Hidden Group
                        This Group is not seen in the navigator or the Group Manager UI.
                        This Group is only available within the part it was created (e.g., it is not occurrenced).
                        This Group is not visible via enumeration methods of the @link NXOpen::CAE::CaeGroupCollection NXOpen::CAE::CaeGroupCollection@endlink .
                        This is a Group that can be referenced by a UDOBJ using a link_type == 3.
                        Applications can use it to store and manage references to anything that can be managed by a @link NXOpen::CAE::CaeGroup NXOpen::CAE::CaeGroup@endlink .
                        Whenever the part that holds onto this group is loaded, this Hidden Group will be destroyed 
                        from the part if there are no references to it.  @return  
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::CaeGroup * CreateGroupHidden
            (
                const std::vector<NXOpen::TaggedObject *> & objects /** objects */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
