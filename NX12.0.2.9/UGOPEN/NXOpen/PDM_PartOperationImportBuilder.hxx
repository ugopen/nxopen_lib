#ifndef NXOpen_PDM_PARTOPERATIONIMPORTBUILDER_HXX_INCLUDED
#define NXOpen_PDM_PARTOPERATIONIMPORTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PDM_PartOperationImportBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/PDM_PartOperationBuilder.hxx>
#include <NXOpen/PDM_LogicalObject.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/libnxopencpp_pdm_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PDM
    {
        class PartOperationImportBuilder;
    }
    namespace PDM
    {
        class LogicalObject;
    }
    namespace PDM
    {
        class PartOperationBuilder;
    }
    namespace PDM
    {
        class _PartOperationImportBuilderBuilder;
        class PartOperationImportBuilderImpl;
        /** Represents a builder class that performs Create operations  <br> To create a new instance of this class, use @link NXOpen::PDM::PdmSession::CreateImportOperationBuilder  NXOpen::PDM::PdmSession::CreateImportOperationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ConversionType </td> <td> 
         
        AsID </td> </tr> 

        <tr><td> 
         
        DefaultAction </td> <td> 
         
        Overwrite </td> </tr> 

        <tr><td> 
         
        IncludeComponentParts </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        IncludeDependentParts </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        NumberingSource </td> <td> 
         
        PartIDGenerator </td> </tr> 

        <tr><td> 
         
        UseItemTypeFromPartFile </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ValidationAbortImportOnFail </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ValidationMode </td> <td> 
         
        Off </td> </tr> 

        <tr><td> 
         
        ValidationRuleSetBrowseOption </td> <td> 
         
        Native </td> </tr> 

        <tr><td> 
         
        ValidationTreatOutdatedAsPass </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ValidationTreatWarningAsPass </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_PDMEXPORT  PartOperationImportBuilder : public NXOpen::PDM::PartOperationBuilder
        {
            /** This enum is used to specify the default action for import. */
            public: enum ExistingPartAction
            {
                ExistingPartActionOverwrite/** overwrite */ ,
                ExistingPartActionUseExisting/** use existing */ ,
                ExistingPartActionNewRevision/** new revision */ ,
                ExistingPartActionDefault/** default */ 
            };

            /** This enum is used to specify the default behavior for auto assign. */
            public: enum NumberingSourceOption
            {
                NumberingSourceOptionPartIDGenerator/** part idgenerator */ ,
                NumberingSourceOptionOSFilename/** osfilename */ ,
                NumberingSourceOptionAttribute/** attribute */ 
            };

            /** This enum is used to specify the conversion rule for @link NXOpen::PDM::PartOperationImportBuilder::NumberingSourceOptionOSFilename NXOpen::PDM::PartOperationImportBuilder::NumberingSourceOptionOSFilename@endlink . */
            public: enum ConversionRule
            {
                ConversionRuleAsID/** as id */ ,
                ConversionRuleAsIDandRevision/** as idand revision */ ,
                ConversionRuleWithPrefix/** with prefix */ ,
                ConversionRuleWithSuffix/** with suffix */ ,
                ConversionRuleWithReplaceString/** with replace string */ 
            };

            /** This enum is used to specify the validation mode. */
            public: enum Validation
            {
                ValidationOff/** off */ ,
                ValidationImportFromPart/** import from part */ ,
                ValidationRunValidation/** run validation */ ,
                ValidationRunValidationHybrid/** run validation hybrid */ ,
                ValidationDefault/** default */ 
            };

            /** This enum is used to specify the option to browse the validation rule set file from. */
            public: enum ValidationRuleSetFileBrowseOption
            {
                ValidationRuleSetFileBrowseOptionNative/** native */ ,
                ValidationRuleSetFileBrowseOptionTeamcenter/** teamcenter */ 
            };

            private: PartOperationImportBuilderImpl * m_partoperationimportbuilder_impl;
            private: friend class  _PartOperationImportBuilderBuilder;
            protected: PartOperationImportBuilder();
            public: ~PartOperationImportBuilder();
            /** Add parts to import 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddParts
            (
                std::vector<NXString> & parts /** parts */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ 
            );
            /** Add parts using log file either clone log file or import log file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddPartsUsingLogFile
            (
                const NXString & logFilePath /** logfilepath */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ 
            );
            /** Add parts using log file either clone log file or import log file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void AddPartsUsingLogFile
            (
                const char * logFilePath /** logfilepath */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ 
            );
            /** Add parts to import from selected folder 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void AddPartsFromFolder
            (
                const NXString & folderPath /** folderpath */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ 
            );
            /** Add parts to import from selected folder 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void AddPartsFromFolder
            (
                const char * folderPath /** folderpath */ ,
                std::vector<NXString> & errorMsgs /** errormsgs */ 
            );
            /** Gets the updated logical object objects for the parts after item type, relation type or
                        master part for nonmaster is set or changed. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetUpdatedLogicalObjects
            (
                std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /** Gets the known logical object for the given part filename.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::LogicalObject * GetLogicalObjectForPart
            (
                const NXString & partFilename /** part filename */ 
            );
            /** Gets the known logical object for the given part filename.  @return  
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            NXOpen::PDM::LogicalObject * GetLogicalObjectForPart
            (
                const char * partFilename /** part filename */ 
            );
            /**Returns  the include component parts 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeComponentParts
            (
            );
            /**Sets  the include component parts 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIncludeComponentParts
            (
                bool includeComponentParts /** includecomponentparts */ 
            );
            /**Returns  the include dependent parts 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool IncludeDependentParts
            (
            );
            /**Sets  the include dependent parts 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetIncludeDependentParts
            (
                bool includeDependentParts /** includedependentparts */ 
            );
            /**Returns  the sync arrangements 
             <br>  @deprecated Deprecated in NX10.0.2.  It is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.2.  It is no longer supported.") bool SyncArrangements
            (
            );
            /**Sets  the sync arrangements 
             <br>  @deprecated Deprecated in NX10.0.2.  It is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NX_DEPRECATED("Deprecated in NX10.0.2.  It is no longer supported.") void SetSyncArrangements
            (
                bool syncArrangements /** syncarrangements */ 
            );
            /**Returns  the product interfaces 
             <br>  @deprecated Deprecated in NX10.0.2.  It is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NX_DEPRECATED("Deprecated in NX10.0.2.  It is no longer supported.") bool ProductInterfaces
            (
            );
            /**Sets  the product interfaces 
             <br>  @deprecated Deprecated in NX10.0.2.  It is no longer supported. <br>  

             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: NX_DEPRECATED("Deprecated in NX10.0.2.  It is no longer supported.") void SetProductInterfaces
            (
                bool productInterfaces /** productinterfaces */ 
            );
            /** Clear all attributes from the selected logical objects 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ResetAttributes
            (
                const std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /** Execute the dry run 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ExecuteDryRun
            (
            );
            /**Returns  the default action 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationImportBuilder::ExistingPartAction DefaultAction
            (
            );
            /**Sets  the default action 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultAction
            (
                NXOpen::PDM::PartOperationImportBuilder::ExistingPartAction defaultAction /** defaultaction */ 
            );
            /**Returns  the default item type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultItemType
            (
            );
            /**Sets  the default item type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultItemType
            (
                const NXString & defaultItemType /** defaultitemtype */ 
            );
            /**Sets  the default item type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultItemType
            (
                const char * defaultItemType /** defaultitemtype */ 
            );
            /**Returns  the add non master to import 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : None */
            public: bool AddCAENonMastersToImport
            (
            );
            /**Sets  the add non master to import 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAddCAENonMastersToImport
            (
                bool addCAENonMasters /** addcaenonmasters */ 
            );
            /**Returns  the default name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultName
            (
            );
            /**Sets  the default name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultName
            (
                const NXString & defaultName /** defaultname */ 
            );
            /**Sets  the default name 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultName
            (
                const char * defaultName /** defaultname */ 
            );
            /**Returns  the default description 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultDescription
            (
            );
            /**Sets  the default description 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultDescription
            (
                const NXString & defaultDescription /** defaultdescription */ 
            );
            /**Sets  the default description 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultDescription
            (
                const char * defaultDescription /** defaultdescription */ 
            );
            /**Returns  the numbering source 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationImportBuilder::NumberingSourceOption NumberingSource
            (
            );
            /**Sets  the numbering source 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetNumberingSource
            (
                NXOpen::PDM::PartOperationImportBuilder::NumberingSourceOption numberingSource /** numberingsource */ 
            );
            /**Returns  the conversion type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationImportBuilder::ConversionRule ConversionType
            (
            );
            /**Sets  the conversion type 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetConversionType
            (
                NXOpen::PDM::PartOperationImportBuilder::ConversionRule conversionType /** conversiontype */ 
            );
            /**Returns  the prefix str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString PrefixStr
            (
            );
            /**Sets  the prefix str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPrefixStr
            (
                const NXString & prefixStr /** prefixstr */ 
            );
            /**Sets  the prefix str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetPrefixStr
            (
                const char * prefixStr /** prefixstr */ 
            );
            /**Returns  the suffix str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString SuffixStr
            (
            );
            /**Sets  the suffix str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetSuffixStr
            (
                const NXString & suffixStr /** suffixstr */ 
            );
            /**Sets  the suffix str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetSuffixStr
            (
                const char * suffixStr /** suffixstr */ 
            );
            /**Returns  the string to replace 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString StringToReplace
            (
            );
            /**Sets  the string to replace 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetStringToReplace
            (
                const NXString & stringToReplace /** stringtoreplace */ 
            );
            /**Sets  the string to replace 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetStringToReplace
            (
                const char * stringToReplace /** stringtoreplace */ 
            );
            /**Returns  the replace with str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ReplaceWithStr
            (
            );
            /**Sets  the replace with str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetReplaceWithStr
            (
                const NXString & replaceWithStr /** replacewithstr */ 
            );
            /**Sets  the replace with str 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetReplaceWithStr
            (
                const char * replaceWithStr /** replacewithstr */ 
            );
            /**Returns  the number attr 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString NumberAttr
            (
            );
            /**Sets  the number attr 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetNumberAttr
            (
                const NXString & numberAttr /** numberattr */ 
            );
            /**Sets  the number attr 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetNumberAttr
            (
                const char * numberAttr /** numberattr */ 
            );
            /**Returns  the revision attr 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString RevisionAttr
            (
            );
            /**Sets  the revision attr 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetRevisionAttr
            (
                const NXString & revisionAttr /** revisionattr */ 
            );
            /**Sets  the revision attr 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetRevisionAttr
            (
                const char * revisionAttr /** revisionattr */ 
            );
            /**Returns  the output log file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString OutputLogFile
            (
            );
            /**Sets  the output log file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetOutputLogFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the output log file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetOutputLogFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the associated files root directory 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString AssociatedFilesRootDirectory
            (
            );
            /**Sets  the associated files root directory 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAssociatedFilesRootDirectory
            (
                const NXString & foldername /** foldername */ 
            );
            /**Sets  the associated files root directory 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetAssociatedFilesRootDirectory
            (
                const char * foldername /** foldername */ 
            );
            /**Returns  the default owning user 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultOwningUser
            (
            );
            /**Sets  the default owning user 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultOwningUser
            (
                const NXString & defaultOwningUser /** defaultowninguser */ 
            );
            /**Sets  the default owning user 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultOwningUser
            (
                const char * defaultOwningUser /** defaultowninguser */ 
            );
            /**Returns  the default owning group 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultOwningGroup
            (
            );
            /**Sets  the optional information publishing 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetPublishOptionalInfo
            (
                bool publishOptionalInfo /** publishoptionalinfo */ 
            );
            /**Returns  the optional information publishing 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool PublishOptionalInfo
            (
            );
            /**Sets  the default owning group 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultOwningGroup
            (
                const NXString & defaultOwningGroup /** defaultowninggroup */ 
            );
            /**Sets  the default owning group 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultOwningGroup
            (
                const char * defaultOwningGroup /** defaultowninggroup */ 
            );
            /** Get default projects information 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void GetDefaultProjectInformation
            (
                std::vector<NXString> & projectNames /** names of the projects */,
                std::vector<NXOpen::Session::ProjectAssignmentState> & assignmentStates /** assignment states */
            );
            /** Set default projects information 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultProjectInformation
            (
                std::vector<NXString> & projectNames /** names of the projects to assign */,
                const std::vector<NXOpen::Session::ProjectAssignmentState> & assignmentStates /** assignment states */
            );
            /**Returns  the validation mode 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationImportBuilder::Validation ValidationMode
            (
            );
            /**Sets  the validation mode 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetValidationMode
            (
                NXOpen::PDM::PartOperationImportBuilder::Validation validationMode /** validationmode */ 
            );
            /**Returns  the validation rule set browse option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::PDM::PartOperationImportBuilder::ValidationRuleSetFileBrowseOption ValidationRuleSetBrowseOption
            (
            );
            /**Sets  the validation rule set browse option 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetValidationRuleSetBrowseOption
            (
                NXOpen::PDM::PartOperationImportBuilder::ValidationRuleSetFileBrowseOption validationRuleSetBrowseOption /** validationrulesetbrowseoption */ 
            );
            /**Returns  the validation rule set file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXString ValidationRuleSetFile
            (
            );
            /**Sets  the validation rule set file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetValidationRuleSetFile
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the validation rule set file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetValidationRuleSetFile
            (
                const char * filename /** filename */ 
            );
            /**Returns  the validation treat warning as pass 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ValidationTreatWarningAsPass
            (
            );
            /**Sets  the validation treat warning as pass 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetValidationTreatWarningAsPass
            (
                bool validationTreatWarningAsPass /** validationtreatwarningaspass */ 
            );
            /**Returns  the validation treat outdated as pass 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ValidationTreatOutdatedAsPass
            (
            );
            /**Sets  the validation treat outdated as pass 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetValidationTreatOutdatedAsPass
            (
                bool validationTreatOutdatedAsPass /** validationtreatoutdatedaspass */ 
            );
            /**Returns  the validation abort import on fail 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool ValidationAbortImportOnFail
            (
            );
            /**Sets  the validation abort import on fail 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetValidationAbortImportOnFail
            (
                bool validationAbortImportOnFail /** validationabortimportonfail */ 
            );
            /**Returns  the add dfa mixins 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: bool AddDfaMixins
            (
            );
            /**Sets  the add dfa mixins 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAddDfaMixins
            (
                bool addDfaMixins /** adddfamixins */ 
            );
            /** Get the dfa files 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void GetDfaFiles
            (
                std::vector<NXString> & dfaFiles /** dfafiles */ 
            );
            /** Set the dfa files 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDfaFiles
            (
                std::vector<NXString> & dfaFiles /** dfafiles */ 
            );
            /** Remove the dfa file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void RemoveDfaFile
            (
                const NXString & filename /** filename */ 
            );
            /** Remove the dfa file 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void RemoveDfaFile
            (
                const char * filename /** filename */ 
            );
            /** Set attributes of existing part on the given logical object so that 
                        the part gets imported into specified existing item based on action. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetExistingPartAttributes
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const NXString & existingPartCliSpec /** existingpartclispec */ 
            );
            /** Set attributes of existing part on the given logical object so that 
                        the part gets imported into specified existing item based on action. 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetExistingPartAttributes
            (
                NXOpen::PDM::LogicalObject * logicalObject /** logicalobject */ ,
                const char * existingPartCliSpec /** existingpartclispec */ 
            );
            /** Validate the user inputs for following things:
                        - Validates whether the input property values are valid according to defined naming rules and specified user exits for the input property.
                        - Check for duplicate Ids/Mfk-Ids
                        - Check if all required attributes have been set
                        - Check for cyclic references
                        - Check if the part to import already exists in database and has no read access
                        - Check if the part to import already exists in database and belong to an invalid type for import(e.g. Shape Design)
                        - Check for duplicate non-master dataset names under same master
                        - Check if it is trying to create two new revisions of same item.
                        - Check if the final name given to the imported part already open in session
                        - Validate master for a non-master being imported; the master should be present in import operation or has to exist in database for successful creation of non-master.
                        - Validate validation parameters e.g. user has selected Run Validation option which requires the user to specify the validation rule set file.
                        - Update Teamcenter information attribute on logical objects
                    
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void ValidateLogicalObjects
            (
            );
            /** Update the Teamcenter information string attribute TCIN_IMPORT_TEAMCENTER_INFORMATION on given logical objects 
             <br>  Created in NX10.0.1.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void UpdateTeamcenterInformation
            (
                const std::vector<NXOpen::PDM::LogicalObject *> & logicalObjects /** logicalobjects */ 
            );
            /**Sets  the flag to specify if Import can use the Item Type already present in the part during import 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetUseItemTypeFromPartFile
            (
                bool useItemTypeFromPartFile /** useitemtypefrompartfile */ 
            );
            /**Returns  the flag to specify if Import can use the Item Type already present in the part during import 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: bool UseItemTypeFromPartFile
            (
            );
            /**Returns  the method returns the IdContext to be used while assigning alternate IDs during import 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultAlternateIdContext
            (
            );
            /**Sets  the method returns the IdContext to be used while assigning alternate IDs during import 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultAlternateIdContext
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the method returns the IdContext to be used while assigning alternate IDs during import 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultAlternateIdContext
            (
                const char * filename /** filename */ 
            );
            /**Returns  the method returns the IdType to be used while assigning alternate IDs during import
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXString DefaultAlternateIdType
            (
            );
            /**Sets  the method returns the IdType to be used while assigning alternate IDs during import
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetDefaultAlternateIdType
            (
                const NXString & filename /** filename */ 
            );
            /**Sets  the method returns the IdType to be used while assigning alternate IDs during import
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            void SetDefaultAlternateIdType
            (
                const char * filename /** filename */ 
            );
            /**Returns  the method returns the value indicating whether alternate IDs should be created during import 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool AssignAlternateIds
            (
            );
            /**Sets  the method returns the value indicating whether alternate IDs should be created during import 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : assemblies ("ASSEMBLIES MODULE") */
            public: void SetAssignAlternateIds
            (
                bool createAlternateIDs /** createalternateids */ 
            );

            /// \cond NX_NO_DOC 
            /** The method needs to be called if the dialog's cancel operation needs to be simulated. This is not to be called as part of regular destruction of the Import Builder. 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : None */
            public: void OnCancel
            (
            );

            /// \endcond 
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
