#ifndef NXOpen_CAM_MOVECOLLECTION_HXX_INCLUDED
#define NXOpen_CAM_MOVECOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_MoveCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class MoveCollection;
    }
    namespace CAM
    {
        class Operation;
    }
    namespace CAM
    {
        class Move;
    }
    namespace CAM
    {
        class AlongMachineAxisMoveBuilder;
    }
    namespace CAM
    {
        class AlongMcsAxisMoveBuilder;
    }
    namespace CAM
    {
        class AlongToolAxisMoveBuilder;
    }
    namespace CAM
    {
        class AngularAboutAxisMoveBuilder;
    }
    namespace CAM
    {
        class CircularAboutAxisMoveBuilder;
    }
    namespace CAM
    {
        class ContainerMoveBuilder;
    }
    namespace CAM
    {
        class DeltaMoveBuilder;
    }
    namespace CAM
    {
        class FollowCurveMoveBuilder;
    }
    namespace CAM
    {
        class FollowPartMoveBuilder;
    }
    namespace CAM
    {
        class LaserCircleCutout;
    }
    namespace CAM
    {
        class LaserHexagonCutout;
    }
    namespace CAM
    {
        class LaserLinearMove;
    }
    namespace CAM
    {
        class LaserProfileMove;
    }
    namespace CAM
    {
        class LaserRectangleCutout;
    }
    namespace CAM
    {
        class LaserSlotCutout;
    }
    namespace CAM
    {
        class LinearLocalCsysMoveBuilder;
    }
    namespace CAM
    {
        class MachineLimitMoveBuilder;
    }
    namespace CAM
    {
        class MoveToPointBuilder;
    }
    namespace CAM
    {
        class NormalToToolAxisMoveBuilder;
    }
    namespace CAM
    {
        class ProbeCalibrateLengthMoveBuilder;
    }
    namespace CAM
    {
        class ProbeCalibrateSphereMoveBuilder;
    }
    namespace CAM
    {
        class ProbeCalibrateStylusMoveBuilder;
    }
    namespace CAM
    {
        class ProbeClearanceMoveBuilder;
    }
    namespace CAM
    {
        class ProbeInspectBorebossMoveBuilder;
    }
    namespace CAM
    {
        class ProbeInspectPointMoveBuilder;
    }
    namespace CAM
    {
        class ProbeInspectSurfacePointMoveBuilder;
    }
    namespace CAM
    {
        class RobotCartesianMove;
    }
    namespace CAM
    {
        class RobotMountMove;
    }
    namespace CAM
    {
        class RobotPoseMove;
    }
    namespace CAM
    {
        class RotaryPointMoveBuilder;
    }
    namespace CAM
    {
        class RotaryPolarMoveBuilder;
    }
    namespace CAM
    {
        class RotateToolMoveBuilder;
    }
    namespace CAM
    {
        class TeachmodeEngageSettingsBuilder;
    }
    namespace CAM
    {
        class TeachmodeLinearMoveBuilder;
    }
    namespace CAM
    {
        class TeachmodeProfileMoveBuilder;
    }
    namespace CAM
    {
        class TeachmodeRetractSettingsBuilder;
    }
    namespace CAM
    {
        class ToolChangePositionBuilder;
    }
    namespace CAM
    {
        class ToolTrackingPointBuilder;
    }
    namespace CAM
    {
        class TurnMoveToPointBuilder;
    }
    namespace CAM
    {
        class TurnProbeClearanceBuilder;
    }
    namespace CAM
    {
        class TurnProbeInspectPointMoveBuilder;
    }
    namespace CAM
    {
        class UdeMoveBuilder;
    }
    namespace CAM
    {
        class UserDefinedMoveBuilder;
    }
    namespace CAM
    {
        class VectorDistanceMoveBuilder;
    }
    namespace CAM
    {
        class MoveCollectionImpl;
        /** Represents the move collection  <br> To obtain an instance of this class, refer to @link NXOpen::CAM::Operation  NXOpen::CAM::Operation @endlink  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  MoveCollection : public NXOpen::TaggedObjectCollection
        {
            private: MoveCollectionImpl * m_movecollection_impl;
            private: NXOpen::CAM::Operation* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit MoveCollection(NXOpen::CAM::Operation *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~MoveCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::CAM::MoveCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CAM::Move *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::CAM::MoveCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_CAMEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_CAMEXPORT  void next();
                NXOpen::CAM::MoveCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Finds the CAM.Operation object with the given identifier as recorded in a journal. @return  the found object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::Move * FindObject
            (
                const NXString & sid /** the name of the object */
            );
            /** Finds the CAM.Operation object with the given identifier as recorded in a journal. @return  the found object 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            NXOpen::CAM::Move * FindObject
            (
                const char * sid /** the name of the object */
            );
            /** Create a Move to Point.   @return  Move To Point Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MoveToPointBuilder * CreateMoveToPointBuilder
            (
                NXOpen::CAM::Move * param /** Move Object*/
            );
            /** Create a Delta Move.   @return  Delta Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::DeltaMoveBuilder * CreateDeltaMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Vector Distance Move.   @return  Delta Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::VectorDistanceMoveBuilder * CreateVectorDistanceMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Move Along Tool Axis  @return  Along Tool Axis Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::AlongToolAxisMoveBuilder * CreateAlongToolAxisMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Move Normal to Tool Axis    @return  Normal To Tool Axis Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::NormalToToolAxisMoveBuilder * CreateNormalToToolAxisMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Move to MCS Position   @return  MCS Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::AlongMcsAxisMoveBuilder * CreateAlongMcsAxisMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Rotary Move to Point.   @return  Rotary Point Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RotaryPointMoveBuilder * CreateRotaryPointMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Rotary Polar Move.   @return  Rotary Polar Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RotaryPolarMoveBuilder * CreateRotaryPolarMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Circular Move.   @return  
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::CircularAboutAxisMoveBuilder * CreateCircularAboutAxisMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Move To Machine Position.   @return  Machine Position Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::AlongMachineAxisMoveBuilder * CreateAlongMachineAxisMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a UDE Move.   @return  Ude Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::UdeMoveBuilder * CreateUdeMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Create a Rotate Tool Move.   @return  Rotate Tool Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RotateToolMoveBuilder * CreateRotateToolMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */,
                NXOpen::CAM::Move * insertAfterTag /** Preceeding move  */
            );
            /** Create a Probe Calibrate Length Move.   @return  Probe Calibrate Length Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeCalibrateLengthMoveBuilder * CreateProbeCalibrateLengthMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Probe Calibrate Stylus Move.   @return  Probe Calibrate Stylus Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeCalibrateStylusMoveBuilder * CreateProbeCalibrateStylusMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Probe Calibrate on Sphere Move.   @return  Probe Calibrate Sphere Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeCalibrateSphereMoveBuilder * CreateProbeCalibrateSphereMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Probe Inspect Point Move.   @return  Probe Inspect Point Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeInspectPointMoveBuilder * CreateProbeInspectPointMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Probe Inspect Surface Point Move.   @return  Probe Inspect Surface Point Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeInspectSurfacePointMoveBuilder * CreateProbeInspectSurfacePointMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Probe Inspect Bore-Boss Move.   @return  Probe Inspect Bore-boss Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeInspectBorebossMoveBuilder * CreateProbeInspectBorebossMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Probe Clearance Plane Change.   @return  Probe Clearance Move Builder 
             <br>  Created in NX5.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ProbeClearanceMoveBuilder * CreateProbeClearanceMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Teachmode Linear Move.   @return  Teachmode Linear Move Builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TeachmodeLinearMoveBuilder * CreateTeachmodeLinearMoveBuilder
            (
                NXOpen::CAM::Move * param /** Teachmode Suboperation object */
            );
            /** Create a Teachmode Engage Settings.   @return  Teachmode Engage Settings Builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TeachmodeEngageSettingsBuilder * CreateTeachmodeEngageSettingsBuilder
            (
                NXOpen::CAM::Move * param /** Teachmode Suboperation object */
            );
            /** Create a Teachmode Retract Settings.   @return  Teachmode Retract Settings Builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TeachmodeRetractSettingsBuilder * CreateTeachmodeRetractSettingsBuilder
            (
                NXOpen::CAM::Move * param /** Teachmode Suboperation object */
            );
            /** Create a Teachmode Profile Move.   @return  Teachmode Profile Move Builder 
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TeachmodeProfileMoveBuilder * CreateTeachmodeProfileMoveBuilder
            (
                NXOpen::CAM::Move * param /** Teachmode Suboperation object */
            );
            /** Create Follow Curve Move.   @return  Builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FollowCurveMoveBuilder * CreateFollowCurveMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create Follow Part Move.   @return  Builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::FollowPartMoveBuilder * CreateFollowPartMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create User Defined Move.   @return  Builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::UserDefinedMoveBuilder * CreateUserDefinedMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */,
                const NXString & typeName /** Type of the User Defined Move to create. When editing the move this will not be used */
            );
            /** Create User Defined Move.   @return  Builder 
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            NXOpen::CAM::UserDefinedMoveBuilder * CreateUserDefinedMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */,
                const char * typeName /** Type of the User Defined Move to create. When editing the move this will not be used */
            );
            /** Create Tracking Point Move.   @return  Builder 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ToolTrackingPointBuilder * CreateToolTrackingPointBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Turn Probe Inspect Point Move.   @return  Probe Inspect Point Move Builder 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnProbeInspectPointMoveBuilder * CreateTurnProbeInspectPointMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Turn Probe Clearance Move.   @return  Turn Probe Clearance Builder 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnProbeClearanceBuilder * CreateTurnProbeClearanceBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Turn Linear Move.   @return  Turn Move To Point Builder 
             <br>  Created in NX8.5.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::TurnMoveToPointBuilder * CreateTurnMoveToPointBuilder
            (
                NXOpen::CAM::Move * param /** Move object */
            );
            /** Create a Laser Linear Move.   @return  Laser Linear Move 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LaserLinearMove * CreateLaserLinearMove
            (
                NXOpen::CAM::Move * param /** Laser move object */
            );
            /** Create a Laser Circle Cutout.   @return  Laser Circle Cutout 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LaserCircleCutout * CreateLaserCircleCutout
            (
                NXOpen::CAM::Move * param /** Laser move object */
            );
            /** Create a Laser Rectangle Cutout.   @return  Laser Rectangle Cutout 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LaserRectangleCutout * CreateLaserRectangleCutout
            (
                NXOpen::CAM::Move * param /** Laser move object */
            );
            /** Create a Laser Slot Cutout.   @return  Laser Slot Cutout 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LaserSlotCutout * CreateLaserSlotCutout
            (
                NXOpen::CAM::Move * param /** Laser move object */
            );
            /** Create a Laser Hexagon Cutout.   @return  Laser Hexagon Cutout 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LaserHexagonCutout * CreateLaserHexagonCutout
            (
                NXOpen::CAM::Move * param /** Laser move object */
            );
            /** Create a Laser Profile Move.   @return  Laser Profile Move 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LaserProfileMove * CreateLaserProfileMove
            (
                NXOpen::CAM::Move * param /** Laser move object */
            );

            /// \cond NX_NO_DOC 
            /** Create a Robotic Cartesian Move.  @return  Robotic Cartesian Move 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RobotCartesianMove * CreateRobotCartesianMove
            (
                NXOpen::CAM::Move * param /** Move Object */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create a Robotic Pose Move.   @return  Robotic Pose Move 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RobotPoseMove * CreateRobotPoseMove
            (
                NXOpen::CAM::Move * param /** Move Object */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create a Robotic Mount Move.   @return  Robotic Mount Move 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::RobotMountMove * CreateRobotMountMove
            (
                NXOpen::CAM::Move * param /** Move Object */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a container move.   @return  Builder 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ContainerMoveBuilder * CreateContainerMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */,
                int moveType /** the move type */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Creates a tool change position move.   @return  the tool change position builder 
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::ToolChangePositionBuilder * CreateToolChangePositionBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /** Create a machine limit move.   @return  the machine limit move builder 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::MachineLimitMoveBuilder * CreateMachineLimitMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );

            /// \endcond 
            /** Creates an angular circular move.   @return  An angular circular move builder 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::AngularAboutAxisMoveBuilder * CreateAngularCircularMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Creates an angular helical move.   @return  An angular helical move builder 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::AngularAboutAxisMoveBuilder * CreateAngularHelicalMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Creates an angular spiral move.   @return  An angular spiral move builder 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::AngularAboutAxisMoveBuilder * CreateAngularSpiralMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Creates an angular conical move.   @return  An angular conical move builder 
             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::AngularAboutAxisMoveBuilder * CreateAngularConicalMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Creates a linear local CSYS move builder for a relational move.   @return  Linear local CSYS Move Builder 
             <br>  @deprecated Deprecated in NX12.0.2.  Please use @link CAM::MoveCollection::CreateLinearLocalCsysMoveBuilder CAM::MoveCollection::CreateLinearLocalCsysMoveBuilder@endlink  instead. <br>  

             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NX_DEPRECATED("Deprecated in NX12.0.2.  Please use CAM::MoveCollection::CreateLinearLocalCsysMoveBuilder instead.") NXOpen::CAM::LinearLocalCsysMoveBuilder * CreateLinearGoDeltaMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Creates a linear local CSYS move builder for an absolute move.   @return  Linear local CSYS Move Builder 
             <br>  @deprecated Deprecated in NX12.0.2.  Please use @link CAM::MoveCollection::CreateLinearLocalCsysMoveBuilder CAM::MoveCollection::CreateLinearLocalCsysMoveBuilder@endlink  instead. <br>  

             <br>  Created in NX12.0.1.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NX_DEPRECATED("Deprecated in NX12.0.2.  Please use CAM::MoveCollection::CreateLinearLocalCsysMoveBuilder instead.") NXOpen::CAM::LinearLocalCsysMoveBuilder * CreateLinearGotoMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
            /** Creates a linear local CSYS move builder.   @return  Linear local CSYS Move Builder 
             <br>  Created in NX12.0.2.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: NXOpen::CAM::LinearLocalCsysMoveBuilder * CreateLinearLocalCsysMoveBuilder
            (
                NXOpen::CAM::Move * param /** Move Object */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
