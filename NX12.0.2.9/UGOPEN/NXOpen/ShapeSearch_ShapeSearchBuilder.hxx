#ifndef NXOpen_SHAPESEARCH_SHAPESEARCHBUILDER_HXX_INCLUDED
#define NXOpen_SHAPESEARCH_SHAPESEARCHBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     ShapeSearch_ShapeSearchBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_shapesearch_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace ShapeSearch
    {
        class ShapeSearchBuilder;
    }
    class Builder;
    class SelectNXObjectList;
    namespace ShapeSearch
    {
        class _ShapeSearchBuilderBuilder;
        class ShapeSearchBuilderImpl;
        /** This class provides the methods to execute shape search and get the searched results.
                The operation that this builder supports has three types: (set by @link ShapeSearch::ShapeSearchBuilder::SetSearchType ShapeSearch::ShapeSearchBuilder::SetSearchType@endlink )
                <ol>
                   <li> Search by attributes.
                   <ul>
                      <li> @link ShapeSearch::ShapeSearchBuilder::SetInputAttributesName ShapeSearch::ShapeSearchBuilder::SetInputAttributesName@endlink  </li>
                      <li> @link ShapeSearch::ShapeSearchBuilder::SetInputAttributesFilter ShapeSearch::ShapeSearchBuilder::SetInputAttributesFilter@endlink  </li>
                   </ul>
                   </li>
                       
                   <li>Search by body combined attributes with shape similarity and shape size condition. Support multiple bodies.
                   <ul>
                      <li> @link ShapeSearch::ShapeSearchBuilder::InputBody ShapeSearch::ShapeSearchBuilder::InputBody@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetInputAttributesName ShapeSearch::ShapeSearchBuilder::SetInputAttributesName@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetInputAttributesFilter ShapeSearch::ShapeSearchBuilder::SetInputAttributesFilter@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetSearchShapeSimilarity ShapeSearch::ShapeSearchBuilder::SetSearchShapeSimilarity@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetSearchShapeSize ShapeSearch::ShapeSearchBuilder::SetSearchShapeSize@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetUseCustomShapeSize ShapeSearch::ShapeSearchBuilder::SetUseCustomShapeSize@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetCustomShapeSizeLowerLimit ShapeSearch::ShapeSearchBuilder::SetCustomShapeSizeLowerLimit@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetCustomShapeSizeUpperLimit ShapeSearch::ShapeSearchBuilder::SetCustomShapeSizeUpperLimit@endlink  </li>
                   </ul>
                   </li>
                       
                   <li>Search by part combined attributes with shape similarity and shape size condition. Support loaded part, OS part, Teamcenter part and component.
                   <ul>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetInputPart ShapeSearch::ShapeSearchBuilder::SetInputPart@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetInputAttributesName ShapeSearch::ShapeSearchBuilder::SetInputAttributesName@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetInputAttributesFilter ShapeSearch::ShapeSearchBuilder::SetInputAttributesFilter@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetReferenceSetName ShapeSearch::ShapeSearchBuilder::SetReferenceSetName@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetSearchShapeSimilarity ShapeSearch::ShapeSearchBuilder::SetSearchShapeSimilarity@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetSearchShapeSize ShapeSearch::ShapeSearchBuilder::SetSearchShapeSize@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetUseCustomShapeSize ShapeSearch::ShapeSearchBuilder::SetUseCustomShapeSize@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetCustomShapeSizeLowerLimit ShapeSearch::ShapeSearchBuilder::SetCustomShapeSizeLowerLimit@endlink  </li>
                       <li> @link ShapeSearch::ShapeSearchBuilder::SetCustomShapeSizeUpperLimit ShapeSearch::ShapeSearchBuilder::SetCustomShapeSizeUpperLimit@endlink  </li>
                   </ul>
                   </li>
        </ol>

                When initialize builder, we will load all saved searches from work directory and add them to
                search list. You can implement 
                @link ShapeSearch::ShapeSearchBuilder::ExecuteSearch ShapeSearch::ShapeSearchBuilder::ExecuteSearch@endlink  to run the saved search.

                After define the search criteria, function @link ShapeSearch::ShapeSearchBuilder::ExecuteSearch ShapeSearch::ShapeSearchBuilder::ExecuteSearch@endlink  can search
                the shape from database and return the searched results count and error message if fails.  The search is specified by 'searchName' parameter.

                The method @link ShapeSearch::ShapeSearchBuilder::GetResults ShapeSearch::ShapeSearchBuilder::GetResults@endlink   can get the specified results from database.         The range of results is specified by the parameters 'startResultId' and 'endResultId', the search is
                specified by 'searchName' parameter.

                The method @link ShapeSearch::ShapeSearchBuilder::OpenResultPart ShapeSearch::ShapeSearchBuilder::OpenResultPart@endlink  can open the selected result part of the
                specified search. The result is specified by 'resultId' parameter, the search is specified by 'searchName' parameter.

             <br> To create a new instance of this class, use @link NXOpen::ShapeSearch::SearchManager::CreateShapeSearchBuilder  NXOpen::ShapeSearch::SearchManager::CreateShapeSearchBuilder @endlink  <br> 
         <br>  Created in NX6.0.0.  <br>  
        */
        class NXOPENCPP_SHAPESEARCHEXPORT  ShapeSearchBuilder : public NXOpen::Builder
        {
            /** The search type enum */
            public: enum SearchByType
            {
                SearchByTypeAttribute/** search by attributes */,
                SearchByTypeBody/** search by bodies     */,
                SearchByTypePart/** search by part       */
            };

            /** The search shape similarity enum */
            public: enum ShapeSimilarity
            {
                ShapeSimilarityIdentical/** search with identical condition    */,
                ShapeSimilarityVerySimilar/** search with very similar condition */,
                ShapeSimilaritySimilar/** search with similar condition      */
            };

            /** The search shape size enum */
            public: enum ShapeSize
            {
                ShapeSizeP90P110/** search with shape size 90%-110% condition */,
                ShapeSizeP80P120/** search with shape size 80%-120% condition */,
                ShapeSizeP70P130/** search with shape size 70%-130% condition */,
                ShapeSizeP50P200/** search with shape size 50%-200% condition */,
                ShapeSizeP25P400/** search with shape size 25%-400% condition */
            };

            /** The open part type enum */
            public: enum OpenPartType
            {
                OpenPartTypeNotSetDisplayPart/** Not set the opened part as display part */,
                OpenPartTypeSetDisplayPartOnlyWhenOpen/** Set the opened part as display part only when it doesn't exist in the session */,
                OpenPartTypeAlwaysSetDisplayPart/** Always set the opened part as display part whether it exists in the session */
            };

            private: ShapeSearchBuilderImpl * m_shapesearchbuilder_impl;
            private: friend class  _ShapeSearchBuilderBuilder;
            protected: ShapeSearchBuilder();
            public: ~ShapeSearchBuilder();
            /**Returns  the search type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: NXOpen::ShapeSearch::ShapeSearchBuilder::SearchByType SearchType
            (
            );
            /**Sets  the search type 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetSearchType
            (
                NXOpen::ShapeSearch::ShapeSearchBuilder::SearchByType searchType /** searchtype */ 
            );
            /**Returns  the input body to be searched 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: NXOpen::SelectNXObjectList * InputBody
            (
            );
            /**Returns  the input part to be searched 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: NXString InputPart
            (
            );
            /**Sets  the input part to be searched 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetInputPart
            (
                const NXString & inputPart /** inputpart */ 
            );
            /**Sets  the input part to be searched 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            void SetInputPart
            (
                const char * inputPart /** inputpart */ 
            );
            /** The input attributes name to be searched  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: std::vector<NXString> GetInputAttributesName
            (
            );
            /** The input attributes name to be searched 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetInputAttributesName
            (
                std::vector<NXString> & inputAttributesName /** Search attributes Name */
            );
            /** The input attributes filter to be searched  @return  
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: std::vector<NXString> GetInputAttributesFilter
            (
            );
            /** The input attributes filter to be searched 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetInputAttributesFilter
            (
                std::vector<NXString> & inputAttributesFilter /** Search attributes filter */
            );
            /**Returns  the part reference set name to be set for search 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: NXString ReferenceSetName
            (
            );
            /**Sets  the part reference set name to be set for search 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetReferenceSetName
            (
                const NXString & referenceSetName /** referencesetname */ 
            );
            /**Sets  the part reference set name to be set for search 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            void SetReferenceSetName
            (
                const char * referenceSetName /** referencesetname */ 
            );
            /**Returns  the shape similarity to be set for search 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: NXOpen::ShapeSearch::ShapeSearchBuilder::ShapeSimilarity SearchShapeSimilarity
            (
            );
            /**Sets  the shape similarity to be set for search 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetSearchShapeSimilarity
            (
                NXOpen::ShapeSearch::ShapeSearchBuilder::ShapeSimilarity searchShapeSimilarity /** searchshapesimilarity */ 
            );
            /**Returns  the shape size to be set for search. It is used only when use custom shape size is false. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: NXOpen::ShapeSearch::ShapeSearchBuilder::ShapeSize SearchShapeSize
            (
            );
            /**Sets  the shape size to be set for search. It is used only when use custom shape size is false. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetSearchShapeSize
            (
                NXOpen::ShapeSearch::ShapeSearchBuilder::ShapeSize searchShapeSize /** searchshapesize */ 
            );
            /**Returns  the use custom shape size to control use shape size option or custom shape size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: bool UseCustomShapeSize
            (
            );
            /**Sets  the use custom shape size to control use shape size option or custom shape size 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetUseCustomShapeSize
            (
                bool useCustomShapeSize /** usecustomshapesize */ 
            );
            /**Returns  the custom shape size lower limit to be set for search. It is used only when use custom shape size is true.
                        It must be greater than zero and less than upper limit. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: int CustomShapeSizeLowerLimit
            (
            );
            /**Sets  the custom shape size lower limit to be set for search. It is used only when use custom shape size is true.
                        It must be greater than zero and less than upper limit. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetCustomShapeSizeLowerLimit
            (
                int customShapeSizeLowerLimit /** customshapesizelowerlimit */ 
            );
            /**Returns  the custom shape size upper limit to be set for search. It is used only when use custom shape size is true.
                        It must be greater than lower limit. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: int CustomShapeSizeUpperLimit
            (
            );
            /**Sets  the custom shape size upper limit to be set for search. It is used only when use custom shape size is true.
                        It must be greater than lower limit. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void SetCustomShapeSizeUpperLimit
            (
                int customShapeSizeUpperLimit /** customshapesizeupperlimit */ 
            );
            /** Execute new search or saved search and output error message if error. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void ExecuteSearch
            (
                bool isNew /** True is executing new search, False is executing saved search */,
                const NXString & searchName /** Search name */,
                int* nTotalResults /** Search result total number */,
                NXString* errorMessage /** Search error message */
            );
            /** Execute new search or saved search and output error message if error. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            void ExecuteSearch
            (
                bool isNew /** True is executing new search, False is executing saved search */,
                const char * searchName /** Search name */,
                int* nTotalResults /** Search result total number */,
                NXString* errorMessage /** Search error message */
            );
            /** Get specified search results from database. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void GetResults
            (
                const NXString & searchName /** Search name */,
                int startResultId /** Start result id */,
                int endResultId /** End result id */
            );
            /** Get specified search results from database. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            void GetResults
            (
                const char * searchName /** Search name */,
                int startResultId /** Start result id */,
                int endResultId /** End result id */
            );
            /** Open the searched result part. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            public: void OpenResultPart
            (
                NXOpen::ShapeSearch::ShapeSearchBuilder::OpenPartType openPartType /** Open part type */,
                const NXString & searchName /** Search name */,
                int resultId /** Result id */
            );
            /** Open the searched result part. 
             <br>  Created in NX6.0.0.  <br>  
             <br> License requirements : shape_search ("Shape Search") */
            void OpenResultPart
            (
                NXOpen::ShapeSearch::ShapeSearchBuilder::OpenPartType openPartType /** Open part type */,
                const char * searchName /** Search name */,
                int resultId /** Result id */
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
