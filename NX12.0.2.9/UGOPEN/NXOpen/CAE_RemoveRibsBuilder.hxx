#ifndef NXOpen_CAE_REMOVERIBSBUILDER_HXX_INCLUDED
#define NXOpen_CAE_REMOVERIBSBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_RemoveRibsBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SelectElementsBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class RemoveRibsBuilder;
    }
    class Builder;
    namespace CAE
    {
        class FEElement;
    }
    namespace CAE
    {
        class SelectElementsBuilder;
    }
    namespace CAE
    {
        class _RemoveRibsBuilderBuilder;
        class RemoveRibsBuilderImpl;
        /**
            Represents a @link NXOpen::CAE::RemoveRibsBuilder NXOpen::CAE::RemoveRibsBuilder@endlink 
             <br> To create a new instance of this class, use @link NXOpen::CAE::NodeElementManager::CreateRemoveRibsBuilder  NXOpen::CAE::NodeElementManager::CreateRemoveRibsBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CreateGroups </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        RibMaxArea </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        RibMaxElem </td> <td> 
         
        10 </td> </tr> 

        <tr><td> 
         
        RibMinBoundaryNodeRatio </td> <td> 
         
        50 </td> </tr> 

        <tr><td> 
         
        UseMidNodes </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseRibMaxArea </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseRibMaxElem </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        UseRibMinBoundaryNodeRatio </td> <td> 
         
        1 </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  RemoveRibsBuilder : public NXOpen::Builder
        {
            private: RemoveRibsBuilderImpl * m_removeribsbuilder_impl;
            private: friend class  _RemoveRibsBuilderBuilder;
            protected: RemoveRibsBuilder();
            public: ~RemoveRibsBuilder();
            /**Returns  the selected elements 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SelectElementsBuilder * SelectedElements
            (
            );
            /**Returns  the flag to use maximum number of elements parameter in rib detection
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseRibMaxElem
            (
            );
            /**Sets  the flag to use maximum number of elements parameter in rib detection
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetUseRibMaxElem
            (
                bool useRibMaxElem /** useribmaxelem */ 
            );
            /**Returns  the maximum number of elements allowed in rib detection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int RibMaxElem
            (
            );
            /**Sets  the maximum number of elements allowed in rib detection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetRibMaxElem
            (
                int ribMaxElem /** ribmaxelem */ 
            );
            /**Returns  the flag to use maximum rib area parameter in rib detection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseRibMaxArea
            (
            );
            /**Sets  the flag to use maximum rib area parameter in rib detection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetUseRibMaxArea
            (
                bool useRibMaxArea /** useribmaxarea */ 
            );
            /**Returns  the maximum rib area allowed in rib detection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: double RibMaxArea
            (
            );
            /**Sets  the maximum rib area allowed in rib detection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetRibMaxArea
            (
                double ribMaxArea /** ribmaxarea */ 
            );
            /**Returns  the flag to use minimum percentage of nodes located on the edge of a rib parameter
                        in rib detection.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseRibMinBoundaryNodeRatio
            (
            );
            /**Sets  the flag to use minimum percentage of nodes located on the edge of a rib parameter
                        in rib detection.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetUseRibMinBoundaryNodeRatio
            (
                bool useRibMinBoundaryNodeRatio /** useribminboundarynoderatio */ 
            );
            /**Returns  the flag to consider mid nodes in calculating the boundary node to total nodes percentage 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool UseMidNodes
            (
            );
            /**Sets  the flag to consider mid nodes in calculating the boundary node to total nodes percentage 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetUseMidNodes
            (
                bool useMidNodes /** usemidnodes */ 
            );
            /**Returns  the minimum percentage of nodes located on the edge of a rib parameter
                        in rib detection. The percentage is calculated as 
                        100 * (Number of nodes on boundary of rib) /(Total number of nodes on rib). 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: int RibMinBoundaryNodeRatio
            (
            );
            /**Sets  the minimum percentage of nodes located on the edge of a rib parameter
                        in rib detection. The percentage is calculated as 
                        100 * (Number of nodes on boundary of rib) /(Total number of nodes on rib). 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetRibMinBoundaryNodeRatio
            (
                int ribMaxBoundaryNodeRatio /** ribmaxboundarynoderatio */ 
            );
            /** Run rib detection.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<int> DetectRibs
            (
            );
            /** Get the elements of given rib.  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: std::vector<NXOpen::CAE::FEElement *> GetRibElements
            (
                int ribId /** ribid */ 
            );
            /** Delete given ribs. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void DeleteRibs
            (
                const std::vector<int> & ribIds /** ribids */ 
            );
            /**Returns  the flag to a create groups of rib elements 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool CreateGroups
            (
            );
            /**Sets  the flag to a create groups of rib elements 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") */
            public: void SetCreateGroups
            (
                bool toggleCreateGroups /** togglecreategroups */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
