#ifndef NXOpen_GEOMETRICANALYSIS_CURVECURVATUREANALYSISBUILDER_HXX_INCLUDED
#define NXOpen_GEOMETRICANALYSIS_CURVECURVATUREANALYSISBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     GeometricAnalysis_CurveCurvatureAnalysisBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/GeometricUtilities_CombOptionsBuilder.hxx>
#include <NXOpen/GeometricUtilities_CurveRangeBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libnxopencpp_geometricanalysis_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace GeometricAnalysis
    {
        class CurveCurvatureAnalysisBuilder;
    }
    class Builder;
    class Direction;
    namespace GeometricUtilities
    {
        class CombOptionsBuilder;
    }
    namespace GeometricUtilities
    {
        class CurveRangeBuilder;
    }
    class Point;
    class ScCollector;
    namespace GeometricAnalysis
    {
        class _CurveCurvatureAnalysisBuilderBuilder;
        class CurveCurvatureAnalysisBuilderImpl;
        /** Represents a @link NXOpen::GeometricAnalysis::CurveCurvatureAnalysis NXOpen::GeometricAnalysis::CurveCurvatureAnalysis@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateCurveCurvatureAnalysisBuilder  NXOpen::GeometricAnalysis::AnalysisObjectCollection::CreateCurveCurvatureAnalysisBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        CombRange.AnchorPosition </td> <td> 
         
        Start </td> </tr> 

        <tr><td> 
         
        DynamicProjection </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        Method </td> <td> 
         
        Curvature </td> </tr> 

        <tr><td> 
         
        Projection </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ReverseDirection </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ShowInflections </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        ShowPeaks </td> <td> 
         
        0 </td> </tr> 

        <tr><td> 
         
        Style </td> <td> 
         
        Linear </td> </tr> 

        <tr><td> 
         
        Xyz </td> <td> 
         
        X </td> </tr> 

        </table>  

         <br>  Created in NX7.0.0.  <br>  
        */
        class NXOPENCPP_GEOMETRICANALYSISEXPORT  CurveCurvatureAnalysisBuilder : public NXOpen::Builder
        {
            /** Projection plane types */
            public: enum ProjectionTypes
            {
                ProjectionTypesNone/** no projection  */,
                ProjectionTypesCurvePlane/** best fit plane */,
                ProjectionTypesVector/** specify vector */,
                ProjectionTypesView/** view plane     */,
                ProjectionTypesXyz/** specify x,y,z plane */
            };

            /** Enumeration for X, Y or Z projection plane */
            public: enum XyzTypes
            {
                XyzTypesX/** x-axis plane */,
                XyzTypesY/** y-axis plane */,
                XyzTypesZ/** z-axis plane */
            };

            /** Enumeration for label computation method */
            public: enum LabelValues
            {
                LabelValuesCurvature/** label showing curvature value */,
                LabelValuesRadiusofCurvature/** label showing radius of curvature value */
            };

            /** Enumeration for needle direction type */
            public: enum NeedleDirection
            {
                NeedleDirectionInside/** needle pointing inside  */,
                NeedleDirectionOutside/** needle pointing outside */
            };

            /** Enumeration for needle calculation method */
            public: enum CalculationMethod
            {
                CalculationMethodCurvature/** needle of curvature value */,
                CalculationMethodRadiusofCurvature/** needle of radius of curvature value */
            };

            /** Enumeration for needle display type */
            public: enum DisplayStyle
            {
                DisplayStyleLinear/** linear needle */,
                DisplayStyleLogarithmic/** logarithmic needle */
            };

            private: CurveCurvatureAnalysisBuilderImpl * m_curvecurvatureanalysisbuilder_impl;
            private: friend class  _CurveCurvatureAnalysisBuilderBuilder;
            protected: CurveCurvatureAnalysisBuilder();
            public: ~CurveCurvatureAnalysisBuilder();
            /**Returns  the selected curves and/or edges 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SelectedCurves
            (
            );
            /**Returns  the projection 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder::ProjectionTypes Projection
            (
            );
            /**Sets  the projection 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetProjection
            (
                NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder::ProjectionTypes projection /** projection */ 
            );
            /**Returns  the xyz 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder::XyzTypes Xyz
            (
            );
            /**Sets  the xyz 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetXyz
            (
                NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder::XyzTypes xyz /** xyz */ 
            );
            /**Returns  the dynamic projection 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool DynamicProjection
            (
            );
            /**Sets  the dynamic projection 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetDynamicProjection
            (
                bool dynamicProjection /** dynamicprojection */ 
            );
            /** Update work view with a given view matrix 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void UpdateWorkView
            (
            );
            /**Returns  the vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * Vector
            (
            );
            /**Sets  the vector 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetVector
            (
                NXOpen::Direction * vector /** vector */ 
            );
            /**Returns  the comb range 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * CombRange
            (
            );
            /**Returns  the show combs 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowCombs
            (
            );
            /**Sets  the show combs 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowCombs
            (
                bool showCombs /** showcombs */ 
            );
            /**Returns  the show peaks 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowPeaks
            (
            );
            /**Sets  the show peaks 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowPeaks
            (
                bool showPeaks /** showpeaks */ 
            );
            /**Returns  the show inflections 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: bool ShowInflections
            (
            );
            /**Sets  the show inflections 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetShowInflections
            (
                bool showInflections /** showinflections */ 
            );
            /**Returns  the show min labels 
             <br>  Created in NX7.0.1.  <br>  
             <br> License requirements : None */
            public: bool ShowMinLabels
            (
            );
            /**Sets  the show min labels 
             <br>  Created in NX7.0.1.  <br>  
             <br> License requirements : None */
            public: void SetShowMinLabels
            (
                bool showMinLabels /** showminlabels */ 
            );
            /**Returns  the show max labels 
             <br>  Created in NX7.0.1.  <br>  
             <br> License requirements : None */
            public: bool ShowMaxLabels
            (
            );
            /**Sets  the show max labels 
             <br>  Created in NX7.0.1.  <br>  
             <br> License requirements : None */
            public: void SetShowMaxLabels
            (
                bool showMaxLabels /** showmaxlabels */ 
            );
            /** Create peak points  @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Point *> CreateDumbPeakPoints
            (
            );
            /** Create inflection points  @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::Point *> CreateDumbInflectionPoints
            (
            );
            /**Returns  the method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder::CalculationMethod Method
            (
            );
            /**Sets  the method 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetMethod
            (
                NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder::CalculationMethod method /** method */ 
            );
            /**Returns  the style 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder::DisplayStyle Style
            (
            );
            /**Sets  the style 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetStyle
            (
                NXOpen::GeometricAnalysis::CurveCurvatureAnalysisBuilder::DisplayStyle style /** style */ 
            );
            /**Returns  the reverse direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: int ReverseDirection
            (
            );
            /**Sets  the reverse direction 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: void SetReverseDirection
            (
                int reverseDirection /** reversedirection */ 
            );
            /**Returns  the comb display block options 
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CombOptionsBuilder * CombOptions
            (
            );
            /** Returns the @link NXOpen::GeometricUtilities::CurveRangeBuilder NXOpen::GeometricUtilities::CurveRangeBuilder@endlink  object at a given index from the list  @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::CurveRangeBuilder * GetCurveRange
            (
                int index /** index */ 
            );
            /** Get the number of @link NXOpen::GeometricUtilities::CurveRangeBuilder NXOpen::GeometricUtilities::CurveRangeBuilder@endlink  objects in the list @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : None */
            public: int GetCurveRangeListLength
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
