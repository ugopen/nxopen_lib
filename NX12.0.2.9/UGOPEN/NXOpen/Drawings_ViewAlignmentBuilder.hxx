#ifndef NXOpen_DRAWINGS_VIEWALIGNMENTBUILDER_HXX_INCLUDED
#define NXOpen_DRAWINGS_VIEWALIGNMENTBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Drawings_ViewAlignmentBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Drawings_ViewPlacementBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/libnxopencpp_drawings_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Drawings
    {
        class ViewAlignmentBuilder;
    }
    class Builder;
    namespace Drawings
    {
        class DraftingView;
    }
    namespace Drawings
    {
        class SelectDraftingView;
    }
    namespace Drawings
    {
        class ViewAlignment;
    }
    namespace Drawings
    {
        class ViewPlacementBuilder;
    }
    namespace Drawings
    {
        class _ViewAlignmentBuilderBuilder;
        class ViewAlignmentBuilderImpl;
        /** Represents a @link NXOpen::Drawings::ViewAlignmentBuilder NXOpen::Drawings::ViewAlignmentBuilder@endlink .This class is used to construct the view alignment Builder  <br> To create a new instance of this class, use @link NXOpen::Drawings::ViewAlignmentCollection::CreateViewAlignmentBuilder  NXOpen::Drawings::ViewAlignmentCollection::CreateViewAlignmentBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Placement.AlignmentMethod </td> <td> 
         
        Infer </td> </tr> 

        <tr><td> 
         
        Placement.AlignmentOption </td> <td> 
         
        ToView </td> </tr> 

        </table>  

         <br>  Created in NX8.5.0.  <br>  
        */
        class NXOPENCPP_DRAWINGSEXPORT  ViewAlignmentBuilder : public NXOpen::Builder
        {
            private: ViewAlignmentBuilderImpl * m_viewalignmentbuilder_impl;
            private: friend class  _ViewAlignmentBuilderBuilder;
            protected: ViewAlignmentBuilder();
            public: ~ViewAlignmentBuilder();
            /**Returns  the select drafting view component 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::SelectDraftingView * View
            (
            );
            /**Returns  the view placement component 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Drawings::ViewPlacementBuilder * Placement
            (
            );
            /**Returns  the selected alignment in builder.
                        It needs to be set in edit mode as it specifies which alignment in the list
                        needs to be edited or deleted 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::ViewAlignment * SelectedAlignment
            (
            );
            /**Sets  the selected alignment in builder.
                        It needs to be set in edit mode as it specifies which alignment in the list
                        needs to be edited or deleted 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetSelectedAlignment
            (
                NXOpen::Drawings::ViewAlignment * alignment /** alignment */ 
            );
            /**Returns  the builder edit mode flag.
                        There are two modes in the view alignment dialog, Create and Edit modes, and the flag determines the current mode. 
                        View alignment can be created in Create mode, and edited or deleted in Edit mode. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: bool InEditMode
            (
            );
            /**Sets  the builder edit mode flag.
                        There are two modes in the view alignment dialog, Create and Edit modes, and the flag determines the current mode. 
                        View alignment can be created in Create mode, and edited or deleted in Edit mode. 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetInEditMode
            (
                bool inEditMode /** ineditmode */ 
            );
            /**Returns  the candidate view in builder
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: NXOpen::Drawings::DraftingView * CandidateView
            (
            );
            /**Sets  the candidate view in builder
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void SetCandidateView
            (
                NXOpen::Drawings::DraftingView * candidateView /** candidateview */ 
            );
            /** Deletes a view alignment that is stored as the current alignment in the builder 
             <br>  Created in NX8.5.0.  <br>  
             <br> License requirements : drafting ("DRAFTING") */
            public: void DeleteCurrentAlignment
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
