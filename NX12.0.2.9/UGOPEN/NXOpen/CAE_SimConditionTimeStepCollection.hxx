#ifndef NXOpen_CAE_SIMCONDITIONTIMESTEPCOLLECTION_HXX_INCLUDED
#define NXOpen_CAE_SIMCONDITIONTIMESTEPCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_SimConditionTimeStepCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_SimCondition.hxx>
#include <NXOpen/CAE_SimConditionSequence.hxx>
#include <NXOpen/CAE_SimConditionTimeStep.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class SimConditionTimeStepCollection;
    }
    namespace CAE
    {
        class SimConditionSequence;
    }
    namespace CAE
    {
        class SimConditionTimeStep;
    }
    namespace CAE
    {
        class SimCondition;
    }
    namespace CAE
    {
        class SimConditionTimeStepCollectionImpl;
        /**  @brief  This class is a collection of @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink . 

           <br> To obtain an instance of this class, refer to @link NXOpen::CAE::SimConditionSequence  NXOpen::CAE::SimConditionSequence @endlink  <br> 
         <br>  Created in NX9.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  SimConditionTimeStepCollection : public NXOpen::TaggedObjectCollection
        {
            private: SimConditionTimeStepCollectionImpl * m_simconditiontimestepcollection_impl;
            private: NXOpen::CAE::SimConditionSequence* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit SimConditionTimeStepCollection(NXOpen::CAE::SimConditionSequence *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            public: ~SimConditionTimeStepCollection();
            /** Iterator for accessing the contents of the collection. */
            //lint -sem(NXOpen::CAE::SimConditionTimeStepCollection::iterator::copy,initializer)
            class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::CAE::SimConditionTimeStep *>
            {
            public:
                /** Default constructor */
                iterator() : m_context(NULL), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                } //lint !e1401 m_state is not initialized
                /// \cond NX_NO_DOC
                explicit iterator(NXOpen::CAE::SimConditionTimeStepCollection *context) : m_context(context), m_current(NULL_TAG)
                {
                    // coverity[uninit_member]
                }//lint !e1401 m_state is not initialized
                /// \endcond
                /** Copy constructor */
                iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
                {
                    copy(other);
                }
                /** Copy constructor */
                iterator &operator =(const iterator &other)
                {
                    if (&other != this)
                        copy(other);
                    return *this;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
                bool operator ==(const iterator &other) const
                {
                    return m_current == other.m_current && m_context == other.m_context;
                }
                /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
                bool operator !=(const iterator &other) const
                {
                    return !operator == (other);
                }
                /** Return the element currently pointed to by the iterator. */
                NXOPENCPP_CAEEXPORT  value_type operator * ();
                /** Points the iterator to next element. */
                iterator & operator ++()
                {
                    next();
                    return *this;
                }
                /** Points the iterator to next element. */
                iterator operator ++(int)
                {
                    iterator tmp(*this);
                    ++*this;
                    return tmp;
                }
            private:
                void copy(const iterator &other)
                {
                    m_context = other.m_context;
                    m_current = other.m_current;
                    for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                         m_state[i] = other.m_state[i];
                }
                NXOPENCPP_CAEEXPORT  void next();
                NXOpen::CAE::SimConditionTimeStepCollection *m_context;
                tag_t m_current;
                unsigned int m_state[8];
            };
            /** Returns an iterator addressing the first element. */
            iterator begin();
            /** Returns an iterator addressing one past the last element. */
            iterator end()
            {
                return iterator(this);
            }
            /** Creates a @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  at specified time referencing
                        specified @link NXOpen::CAE::SimCondition NXOpen::CAE::SimCondition@endlink  and insert it in time history.
                        A conditionless @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  may be added by passing NULL 
                        as the @link NXOpen::CAE::SimCondition NXOpen::CAE::SimCondition@endlink . @return  the added Time Step @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimConditionTimeStep * Create
            (
                double time /** time */ ,
                NXOpen::CAE::SimCondition * condition /** condition */ ,
                const NXString & description /** description */ 
            );
            /** Creates a @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  at specified time referencing
                        specified @link NXOpen::CAE::SimCondition NXOpen::CAE::SimCondition@endlink  and insert it in time history.
                        A conditionless @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  may be added by passing NULL 
                        as the @link NXOpen::CAE::SimCondition NXOpen::CAE::SimCondition@endlink . @return  the added Time Step @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimConditionTimeStep * Create
            (
                double time /** time */ ,
                NXOpen::CAE::SimCondition * condition /** condition */ ,
                const char * description /** description */ 
            );
            /** Deletes a @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  from time history 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void Delete
            (
                NXOpen::CAE::SimConditionTimeStep * step /** step */ 
            );
            /** Modifies the time of a @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  in time history 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: void ModifyTime
            (
                NXOpen::CAE::SimConditionTimeStep * step /** step */ ,
                double time /** time */ 
            );
            /** Returns the @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  at the specified time or
                        NULL if it doesn't exist  @return  the corresponding @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CAE::SimConditionTimeStep * Get
            (
                double time /** time */ 
            );
            /** Returns a time ordered array of all @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink   @return  all @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::SimConditionTimeStep *> GetAll
            (
            );
            /** Returns all @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  falling inside the specified inclusive time range  @return  all @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  within range 
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::SimConditionTimeStep *> GetInRange
            (
                double fromTime /** fromtime */ ,
                double toTime /** totime */ 
            );
            /** Returns all @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  referencing the specified @link NXOpen::CAE::SimCondition NXOpen::CAE::SimCondition@endlink   @return  all @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  referencing specified @link NXOpen::CAE::SimCondition NXOpen::CAE::SimCondition@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : None */
            public: std::vector<NXOpen::CAE::SimConditionTimeStep *> GetWithReferenceToCondition
            (
                NXOpen::CAE::SimCondition * condition /** condition */ 
            );
            /** Collection's object finder  @return  The @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            public: NXOpen::CAE::SimConditionTimeStep * Find
            (
                const NXString & time /** time of the @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  */
            );
            /** Collection's object finder  @return  The @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  
             <br>  Created in NX9.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") */
            NXOpen::CAE::SimConditionTimeStep * Find
            (
                const char * time /** time of the @link NXOpen::CAE::SimConditionTimeStep NXOpen::CAE::SimConditionTimeStep@endlink  */
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
