#ifndef NXOpen_AME_DIAGRAMMANAGER_HXX_INCLUDED
#define NXOpen_AME_DIAGRAMMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_DiagramManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/AME_AMEEngObject.hxx>
#include <NXOpen/AME_AMEExtendedObject.hxx>
#include <NXOpen/AME_FragmentObject.hxx>
#include <NXOpen/AME_PageObject.hxx>
#include <NXOpen/AME_ProductComponentInstance.hxx>
#include <NXOpen/AME_TeeJunctionTypes.hxx>
#include <NXOpen/Diagramming_Connection.hxx>
#include <NXOpen/Diagramming_Node.hxx>
#include <NXOpen/Diagramming_Sheet.hxx>
#include <NXOpen/Diagramming_SheetElement.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class DiagramManager;
    }
    class Session;
    namespace AME
    {
        class AMEEngObject;
    }
    namespace AME
    {
        class AMEExtendedObject;
    }
    namespace AME
    {
        class FragmentObject;
    }
    namespace AME
    {
        class PageObject;
    }
    namespace AME
    {
        class ProductComponentInstance;
    }
    namespace Diagramming
    {
        class Connection;
    }
    namespace Diagramming
    {
        class Node;
    }
    namespace Diagramming
    {
        class Sheet;
    }
    namespace Diagramming
    {
        class SheetElement;
    }
    class NXObject;
    namespace AME
    {
        class DiagramManagerImpl;
        /** Represents an object that manages sheet elements.  <br> This object does not need a creator.  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  DiagramManager
        {
            private: DiagramManagerImpl * m_diagrammanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit DiagramManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static DiagramManager* theDiagramManager;
            /** Returns the DiagramManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static DiagramManager* GetDiagramManager(NXOpen::Session *owner);
            public: ~DiagramManager();
            /** Create Topology Diagram Node  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Node * CreateTopologyNode
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::AMEEngObject * engObject /** engobject */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ 
            );
            /** Create Schematic Diagram Node  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Node * CreateSchematicNode
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::AMEEngObject * engObject /** engobject */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ ,
                const NXString & symbolVariantName /** symbolvariantname */ 
            );
            /** Create Schematic Diagram Node  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::Diagramming::Node * CreateSchematicNode
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::AMEEngObject * engObject /** engobject */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ ,
                const char * symbolVariantName /** symbolvariantname */ 
            );
            /** Create Diagramming Connection  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Connection * CreateConnection
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::AME::AMEExtendedObject * startPort /** startport */ ,
                NXOpen::AME::AMEExtendedObject * endPort /** endport */ ,
                const std::vector<NXOpen::Point2d> & p2dBendPoints /** p2dbendpoints */ 
            );
            /** Reconnect Diagramming Connection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ReconnectConnection
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                NXOpen::Diagramming::Connection * connection /** connection */ ,
                NXOpen::AME::AMEExtendedObject * targetPort /** targetport */ ,
                int connectionLocationType /** connectionlocationtype */ 
            );
            /** Detach Diagramming Connection 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DisconnectConnection
            (
                NXOpen::Diagramming::Connection * connection /** connection */ 
            );
            /** Delete Sheet Element
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteSheetElements
            (
                const std::vector<NXOpen::Diagramming::SheetElement *> & elements /** elements */ 
            );
            /** Cut schematic object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CutSchematicObjects
            (
                const std::vector<NXOpen::Diagramming::SheetElement *> & elements /** elements */ 
            );
            /** Copy schematic object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void CopySchematicObjects
            (
                const std::vector<NXOpen::Diagramming::SheetElement *> & elements /** elements */ 
            );
            /** Paste schematic object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PasteSchematicObjects
            (
                NXOpen::AME::PageObject * page /** page */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ ,
                std::vector<NXOpen::NXObject *> & newObjects /** newobjects */ 
            );
            /** Remove plug from object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RemovePlugPort
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ 
            );
            /** Get Diagramming Sheet's Part From Page  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::NXObject * GetSheetPartFromPage
            (
                NXOpen::AME::PageObject * pageObject /** pageobject */ 
            );
            /** Update node location
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateNodeLocation
            (
                NXOpen::Diagramming::Node * node /** node */ ,
                double cordinateX /** cordinatex */ ,
                double cordinateY /** cordinatey */ 
            );
            /** Delete Connections 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeleteConnections
            (
                const std::vector<NXOpen::Diagramming::Connection *> & elements /** elements */ 
            );
            /** Delete placed sheet elements from page
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void DeletePlacedSheetElements
            (
                NXOpen::AME::FragmentObject * fragment /** fragment */ 
            );
            /** Launch fragment diagram sheet
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void LaunchPage
            (
                NXOpen::AME::PageObject * pageObject /** pageobject */ ,
                bool isNewWindow /** isnewwindow */ 
            );
            /** Update Diagramming Connection with new bend points
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateConnectionBendPoints
            (
                NXOpen::Diagramming::Connection * connection /** connection */ ,
                const std::vector<NXOpen::Point2d> & bendPoints /** bendpoints */ 
            );
            /** Place Copied Fragment on page
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void PlaceFragmentOnPage
            (
                NXOpen::AME::FragmentObject * fragment /** fragment */ ,
                NXOpen::AME::PageObject * page /** page */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ 
            );
            /** Creating or Updating fragment Sheet Bounding Box in Template 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void RefreshFragmentBoundingBox
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ 
            );
            /** Creating or Updating fragment Sheet Bounding Box in Template 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetFragmentBoundingBoxAnchorPoint
            (
                NXOpen::AME::FragmentObject * fragment /** fragment */ ,
                double anchorX /** anchorx */ ,
                double anchorY /** anchory */ 
            );
            /** Switch Mounting Orientation of the input @link NXOpen::AME::AMEEngObject NXOpen::AME::AMEEngObject@endlink  object.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SwitchMountingOrientation
            (
                NXOpen::AME::AMEEngObject * engObject /** engobject */ 
            );
            /** Show/Hide Connection Direction symbol of ports on schematics pages.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ShowHideConnectionDirection
            (
                bool showHideConnectionDirection /** showhideconnectiondirection */ 
            );
            /** Create Socket Diagram Node Copy @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Node * CreateSocket
            (
                NXOpen::Diagramming::Sheet * sheet /** sheet */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ 
            );
            /** Update Cable information like Cores and Core Order Indices
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateCableInformation
            (
                NXOpen::AME::AMEEngObject * cableEO /** cableeo */ ,
                const std::vector<NXOpen::AME::PageObject *> & pageObjects /** pageobjects */ 
            );
            /** Set representation style for tee Junction  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTeeJunctionRepresentationStyle
            (
                const std::vector<NXOpen::Diagramming::Node *> & elements /** elements */ ,
                NXOpen::AME::AmeJunctionRepresentationStyleType representationStyle /** representationstyle */ 
            );
            /** Set variant for tee Junction  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SetTeeJunctionVariant
            (
                const std::vector<NXOpen::Diagramming::Node *> & elements /** elements */ ,
                NXOpen::AME::AmeTeeJunctionVariant variantIndex /** variantindex */ 
            );
            /** Update node rotation 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateNodeRotation
            (
                NXOpen::Diagramming::Node * node /** node */ ,
                double rotation /** rotation */ 
            );
            /** Update node size 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void UpdateNodeSize
            (
                NXOpen::Diagramming::Node * node /** node */ ,
                double coordinateX /** coordinatex */ ,
                double coordinateY /** coordinatey */ ,
                double height /** height */ ,
                double width /** width */ 
            );
            /** Swap source target for ame connections 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void SwapConnectionSourceTarget
            (
                const std::vector<NXOpen::NXObject *> & connections /** connections */ 
            );
            /** Instantiate Product Component instance and create Schematic Diagram Node  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::Diagramming::Node * InstantiateProductComponentInstance
            (
                NXOpen::AME::PageObject * pageObject /** pageobject */ ,
                NXOpen::AME::ProductComponentInstance * instanceObject /** instanceobject */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ ,
                const NXString & symbolVariantName /** symbolvariantname */ 
            );
            /** Instantiate Product Component instance and create Schematic Diagram Node  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            NXOpen::Diagramming::Node * InstantiateProductComponentInstance
            (
                NXOpen::AME::PageObject * pageObject /** pageobject */ ,
                NXOpen::AME::ProductComponentInstance * instanceObject /** instanceobject */ ,
                double locationX /** locationx */ ,
                double locationY /** locationy */ ,
                const char * symbolVariantName /** symbolvariantname */ 
            );
            /** Add placed sheet element to fragment object 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void AddFragmentPlacedSheetElement
            (
                NXOpen::AME::FragmentObject * fragmentObject /** fragmentobject */ ,
                NXOpen::Diagramming::SheetElement * sheetElement /** sheetelement */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
