#ifndef NXOpen_PID_PIPEBUILDER_HXX_INCLUDED
#define NXOpen_PID_PIPEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_PipeBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Diagramming_Connection.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/PDM_ConnectionElementRevision.hxx>
#include <NXOpen/PDM_ElementGroup.hxx>
#include <NXOpen/PDM_LogicalElementRevision.hxx>
#include <NXOpen/PDM_SheetRevision.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class PipeBuilder;
    }
    class Builder;
    namespace Diagramming
    {
        class Connection;
    }
    namespace PID
    {
        class Equipment;
    }
    namespace PID
    {
        class Pipe;
    }
    namespace PID
    {
        class Sheet;
    }
    namespace PLAS
    {
        class Run;
    }
    namespace PID
    {
        class _PipeBuilderBuilder;
        class PipeBuilderImpl;
        /**  @brief  Represents a PipeBuilder.  

           <br> To create a new instance of this class, use @link NXOpen::PID::PidManager::CreatePipeBuilder  NXOpen::PID::PidManager::CreatePipeBuilder @endlink  <br> 
         <br>  Created in NX11.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  PipeBuilder : public NXOpen::Builder
        {
            private: PipeBuilderImpl * m_pipebuilder_impl;
            private: friend class  _PipeBuilderBuilder;
            protected: PipeBuilder();
            public: ~PipeBuilder();
            /**Returns  the id of the pipe. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXString Id
            (
            );
            /**Returns  the owning run of the pipe. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PLAS::Run * OwningRun
            (
            );
            /**Sets  the owning run of the pipe. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetOwningRun
            (
                NXOpen::PLAS::Run * owningRun /** owningrun */ 
            );
            /**Returns  the stock path ID of the pipe. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXString StockPathId
            (
            );
            /**Sets  the stock path ID of the pipe. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetStockPathId
            (
                const NXString & stockPathId /** stockpathid */ 
            );
            /**Sets  the stock path ID of the pipe. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetStockPathId
            (
                const char * stockPathId /** stockpathid */ 
            );
            /**Returns  the owning sheet of this pipe. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::Sheet * OwningSheet
            (
            );
            /**Sets  the owning sheet of this pipe. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetOwningSheet
            (
                NXOpen::PID::Sheet * owningSheet /** owningsheet */ 
            );
            /** Get the start location of this connection.
                        This start location is applicable only when the @link Diagramming::ConnectionBuilder::Start Diagramming::ConnectionBuilder::Start@endlink  is NULL. @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::Point2d GetStartLocation
            (
            );
            /** Set the start location of this connection.
                        This start location is applicable only when the @link Diagramming::ConnectionBuilder::Start Diagramming::ConnectionBuilder::Start@endlink  is NULL.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetStartLocation
            (
                const NXOpen::Point2d & startLocation /** startlocation */ 
            );
            /** Get the end location of this connection.
                        This end location is applicable only when the @link Diagramming::ConnectionBuilder::End Diagramming::ConnectionBuilder::End@endlink  port is NULL.  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::Point2d GetEndLocation
            (
            );
            /** Set the end location of this connection.
                        This end location is applicable only when the @link Diagramming::ConnectionBuilder::End Diagramming::ConnectionBuilder::End@endlink  port is NULL. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetEndLocation
            (
                const NXOpen::Point2d & endLocation /** endlocation */ 
            );
            /** Gets the start port of this connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetStart
            (
                NXOpen::PID::Equipment ** equipment /** equipment */ ,
                NXString* nodeSidId /** nodesidid */ ,
                NXString* portId /** portid */ 
            );
            /** Sets the start port of this connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetStart
            (
                NXOpen::PID::Equipment * equipment /** equipment */ ,
                const NXString & nodeSidId /** nodesidid */ ,
                const NXString & portId /** portid */ 
            );
            /** Sets the start port of this connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetStart
            (
                NXOpen::PID::Equipment * equipment /** equipment */ ,
                const char * nodeSidId /** nodesidid */ ,
                const char * portId /** portid */ 
            );
            /** Gets the end port of this pipe.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetEnd
            (
                NXOpen::PID::Equipment ** equipment /** equipment */ ,
                NXString* nodeSidId /** nodesidid */ ,
                NXString* portId /** portid */ 
            );
            /** Sets the end port of this pipe.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetEnd
            (
                NXOpen::PID::Equipment * equipment /** equipment */ ,
                const NXString & nodeSidId /** nodesidid */ ,
                const NXString & portId /** portid */ 
            );
            /** Sets the end port of this pipe.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetEnd
            (
                NXOpen::PID::Equipment * equipment /** equipment */ ,
                const char * nodeSidId /** nodesidid */ ,
                const char * portId /** portid */ 
            );
            /**Returns  the reversed flag of this connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: bool ReverseEnd
            (
            );
            /** Get bending points for polyline to render the connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetBendPoints
            (
                std::vector<NXOpen::Point2d> & points /** points */ 
            );
            /** Set bending points for polyline to render the connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetBendPoints
            (
                const std::vector<NXOpen::Point2d> & points /** points */ 
            );
            /** Get the connection location for tee object at the start of the connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetStartTeeLocation
            (
                NXOpen::PID::Pipe ** pipe /** pipe */ ,
                NXString* connectionId /** connectionid */ ,
                int* segementId /** segementid */ ,
                double* percent /** percent */ 
            );
            /** Set the connection location for tee object at the start of the connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetStartTeeLocation
            (
                NXOpen::PID::Pipe * pipe /** pipe */ ,
                const NXString & connectionId /** connectionid */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );
            /** Set the connection location for tee object at the start of the connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetStartTeeLocation
            (
                NXOpen::PID::Pipe * pipe /** pipe */ ,
                const char * connectionId /** connectionid */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );
            /** Get the connection location for tee object at the end of the connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetEndTeeLocation
            (
                NXOpen::PID::Pipe ** pipe /** pipe */ ,
                NXString* connectionId /** connectionid */ ,
                int* segementId /** segementid */ ,
                double* percent /** percent */ 
            );
            /** Set the connection location for tee object at the end of the connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetEndTeeLocation
            (
                NXOpen::PID::Pipe * pipe /** pipe */ ,
                const NXString & connectionId /** connectionid */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );
            /** Set the connection location for tee object at the end of the connection. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetEndTeeLocation
            (
                NXOpen::PID::Pipe * pipe /** pipe */ ,
                const char * connectionId /** connectionid */ ,
                int segementId /** segementid */ ,
                double percent /** percent */ 
            );
            /**Returns  the current element ID of this pipe. It works only in edit mode, it's optional and the first element ID stored in the pipe will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXString ElementId
            (
            );
            /**Sets  the current element ID of this pipe. It works only in edit mode, it's optional and the first element ID stored in the pipe will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void SetElementId
            (
                const NXString & elementId /** elementid */ 
            );
            /**Sets  the current element ID of this pipe. It works only in edit mode, it's optional and the first element ID stored in the pipe will be used as default.
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            void SetElementId
            (
                const char * elementId /** elementid */ 
            );
            /** Gets new connection after inserting the start Tee. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetNewStartTeeConnection
            (
                NXOpen::PID::Pipe ** pipe /** pipe */ ,
                NXString* connectionId /** connectionid */ 
            );
            /** Gets new connection after inserting the end Tee. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetNewEndTeeConnection
            (
                NXOpen::PID::Pipe ** pipe /** pipe */ ,
                NXString* connectionId /** connectionid */ 
            );
            /** Get the connection object of the connection builder.  @return  
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::Diagramming::Connection * GetConnection
            (
            );
            /** Gets the start Tee. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetStartTee
            (
                NXOpen::PID::Equipment ** tee /** tee */ ,
                NXString* nodeSidId /** nodesidid */ 
            );
            /** Gets the end Tee. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void GetEndTee
            (
                NXOpen::PID::Equipment ** tee /** tee */ ,
                NXString* nodeSidId /** nodesidid */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
