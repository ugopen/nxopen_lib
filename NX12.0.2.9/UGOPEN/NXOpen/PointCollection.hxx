#ifndef NXOpen_POINTCOLLECTION_HXX_INCLUDED
#define NXOpen_POINTCOLLECTION_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PointCollection.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <iterator>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/TaggedObjectCollection.hxx>
#include <NXOpen/SmartObject.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/type.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    class PointCollection;
    class BasePart;
    class Point;
    namespace Annotations
    {
        class Annotation;
    }
    namespace CAE
    {
        class CAEFace;
    }
    class CartesianCoordinateSystem;
    class Direction;
    class Expression;
    class IBaseCurve;
    class IBasePlane;
    class IParameterizedSurface;
    class Offset;
    namespace Routing
    {
        class IRoutePosition;
    }
    namespace Routing
    {
        class Port;
    }
    class ScCollector;
    class Scalar;
    class TaggedObject;
    class View;
    class Xform;
    class PointCollectionImpl;
    /** @brief  Represents a collection of smart @link NXOpen::Point NXOpen::Point@endlink .  

     

    Iterating this collection only returns live uncondemned objects contained in the owning part
    of the collection. Note that @link NXOpen::Point NXOpen::Point@endlink  is a smart object and many smart objects are condemned as they
    only exist to support other objects and are not displayed. <br> To obtain an instance of this class, refer to @link NXOpen::BasePart  NXOpen::BasePart @endlink  <br> 
     <br>  Created in NX3.0.0.  <br>  
    */
    class NXOPENCPPEXPORT  PointCollection : public NXOpen::TaggedObjectCollection
    {
        /**
            Describes whether the input Scalar to the
            @link  NXOpen::PointCollection::CreatePoint   NXOpen::PointCollection::CreatePoint @endlink 
            method is either an absolute distance or a relative percentage.
            */
        public: enum AlongCurveOption
        {
            AlongCurveOptionDistance/** Scalar is an absolute distance. */,
            AlongCurveOptionPercent/** Scalar is a relative percentage. */
        };

        /**
            Describes whether the input Scalar to the
            @link  NXOpen::PointCollection::CreatePoint   NXOpen::PointCollection::CreatePoint @endlink 
            method is a relative percentage parameter or an absolute arc length or a relative percentage arc length.
            */
        public: enum PointOnCurveLocationOption
        {
            PointOnCurveLocationOptionParameter/** Scalar is curve parameter. */,
            PointOnCurveLocationOptionPercentParameter/** Scalar is a relative percentage parameter. */,
            PointOnCurveLocationOptionArcLength/** Scalar is an absolute arc length. */,
            PointOnCurveLocationOptionPercentArcLength/** Scalar is a relative percentage arc length. */
        };

        private: PointCollectionImpl * m_pointcollection_impl;
        private: NXOpen::BasePart* m_owner;
        /// \cond NX_NO_DOC 
        public: explicit PointCollection(NXOpen::BasePart *owner);


        /// \endcond 
        public: 
        /**Returns the tag of this object.  */
        tag_t Tag() const; 
        public: ~PointCollection();
        /** Iterator for accessing the contents of the collection. */
        //lint -sem(NXOpen::PointCollection::iterator::copy,initializer)
        class iterator : public std::iterator<std::forward_iterator_tag, NXOpen::Point *>
        {
        public:
            /** Default constructor */
            iterator() : m_context(NULL), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            } //lint !e1401 m_state is not initialized
            /// \cond NX_NO_DOC
            explicit iterator(NXOpen::PointCollection *context) : m_context(context), m_current(NULL_TAG)
            {
                // coverity[uninit_member]
            }//lint !e1401 m_state is not initialized
            /// \endcond
            /** Copy constructor */
            iterator(const iterator &other): m_context(NULL), m_current(NULL_TAG)
            {
                copy(other);
            }
            /** Copy constructor */
            iterator &operator =(const iterator &other)
            {
                if (&other != this)
                    copy(other);
                return *this;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are equal. */
            bool operator ==(const iterator &other) const
            {
                return m_current == other.m_current && m_context == other.m_context;
            }
            /** Tests if the iterator objects on the left side and the right side of the operator are not equal. */
            bool operator !=(const iterator &other) const
            {
                return !operator == (other);
            }
            /** Return the element currently pointed to by the iterator. */
            NXOPENCPPEXPORT  value_type operator * ();
            /** Points the iterator to next element. */
            iterator & operator ++()
            {
                next();
                return *this;
            }
            /** Points the iterator to next element. */
            iterator operator ++(int)
            {
                iterator tmp(*this);
                ++*this;
                return tmp;
            }
        private:
            void copy(const iterator &other)
            {
                m_context = other.m_context;
                m_current = other.m_current;
                for (int i = 0; i < sizeof(m_state)/sizeof(m_state[0]); i++)
                     m_state[i] = other.m_state[i];
            }
            NXOPENCPPEXPORT  void next();
            NXOpen::PointCollection *m_context;
            tag_t m_current;
            unsigned int m_state[8];
        };
        /** Returns an iterator addressing the first element. */
        iterator begin();
        /** Returns an iterator addressing one past the last element. */
        iterator end()
        {
            return iterator(this);
        }
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  without parameters.
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point * CreatePoint
        (
            const NXOpen::Point3d & coordinates /**  Coordinates of a Point */
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  using a @link NXOpen::Point NXOpen::Point@endlink  and an @link NXOpen::Offset NXOpen::Offset@endlink .
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Offset * offset /** offset */ ,
            NXOpen::Point * offsetPoint /** Offsetting from this Point */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  on a Surface or @link NXOpen::Face NXOpen::Face@endlink  via U-V @link NXOpen::Scalar NXOpen::Scalar@endlink  for the surface.
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IParameterizedSurface * face /** face */ ,
            NXOpen::Scalar * scalarU /**  U parameter */,
            NXOpen::Scalar * scalarV /**  V parameter */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  on the intersection of two @link NXOpen::Curve NXOpen::Curve@endlink  and/or @link NXOpen::Edge NXOpen::Edge@endlink  in a View.
             @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::View * view /** view */ ,
            NXOpen::IBaseCurve * edgeCurve1 /** Edge or Curve */,
            NXOpen::IBaseCurve * edgeCurve2 /** Edge or Curve */,
            const NXOpen::Point3d & helpPt /**  Help Point for curve 1 */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  on a @link NXOpen::Curve NXOpen::Curve@endlink  or @link NXOpen::Edge NXOpen::Edge@endlink  and @link NXOpen::Scalar NXOpen::Scalar@endlink  representing the T parameter.
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edgeCurve /** Edge or Curve */,
            NXOpen::Scalar * scalarT /**  T parameter */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  on a @link NXOpen::Curve NXOpen::Curve@endlink  or @link NXOpen::Edge NXOpen::Edge@endlink  and @link NXOpen::Scalar NXOpen::Scalar@endlink  representing
            the Percent parameter or Arc Length or Percent Arc Length.
             @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edgeCurve /** Edge or Curve */,
            NXOpen::Scalar * scalarT /** scalar value */,
            NXOpen::PointCollection::PointOnCurveLocationOption locationOption /**  Specify whether the input Scalar is Arc Length or Percent Arc Length or Percent Parameter*/,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  on a @link NXOpen::Curve NXOpen::Curve@endlink  or @link NXOpen::Edge NXOpen::Edge@endlink  and @link NXOpen::Scalar NXOpen::Scalar@endlink  representing the T parameter.
             @return  
         <br>  Created in NX7.5.2.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edgeCurve /** Edge or Curve */,
            NXOpen::Scalar * scalarT /**  T parameter */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            bool useReverseParameter /** usereverseparameter */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  along a @link NXOpen::Curve NXOpen::Curve@endlink  or @link NXOpen::Edge NXOpen::Edge@endlink  using a @link NXOpen::Point NXOpen::Point@endlink , and a @link NXOpen::Scalar NXOpen::Scalar@endlink  representing
            the T parameter along the @link NXOpen::Curve NXOpen::Curve@endlink .  This @link NXOpen::Point NXOpen::Point@endlink  is derived by finding the
            closest @link NXOpen::Point NXOpen::Point@endlink  on the given curve to the given @link NXOpen::Point NXOpen::Point@endlink  and then offsetting this Point
            along the given @link NXOpen::Curve NXOpen::Curve@endlink  by the arc length defined by T via absolute
            distance or relative percent.
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edgeCurve /** Edge or Curve */,
            NXOpen::Point * pointOffset /** Offset from this Point */,
            NXOpen::Scalar * distancePercent /**  Distance or Percentage */,
            NXOpen::PointCollection::AlongCurveOption option /**  Specify whether the input Scalar is distance/percentage */,
            NXOpen::Sense sense /**  forward/reverse along the Edge or Curve */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  via three @link NXOpen::Scalar NXOpen::Scalar@endlink .
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Scalar * scalarX /** X location */,
            NXOpen::Scalar * scalarY /** Y location */,
            NXOpen::Scalar * scalarZ /** Z location */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  via an existing @link NXOpen::Point NXOpen::Point@endlink  using an optional @link NXOpen::Xform NXOpen::Xform@endlink .
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Point * pointExtract /** Point to be extracted */,
            NXOpen::Xform * xform /**  optional Xform */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at an angle along an @link NXOpen::IBaseCurve NXOpen::IBaseCurve@endlink .
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edgeCurve /** edge curve */ ,
            NXOpen::Scalar * angle /** angle in radians */,
            NXOpen::Xform * xform /** optional Xform */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  via the center of an @link NXOpen::Edge NXOpen::Edge@endlink  or
            @link NXOpen::Curve NXOpen::Curve@endlink .
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edgeCurve /** edge curve */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the intersection of two Edges or Curves.
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * curve1 /**  First Edge or Curve in intersection */,
            NXOpen::IBaseCurve * curve2 /** Second Edge or Curve in intersection */,
            NXOpen::Point * helpPt1 /**  Optional help Point for curve 1 */,
            NXOpen::Point * helpPt2 /** Optional help Point for curve 2 */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the apparent intersection of two Edges or Curves in a view.
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * curve1 /** First Edge or Curve in intersection */,
            NXOpen::IBaseCurve * curve2 /** Second Edge or Curve in intersection */,
            const NXOpen::Point3d & startPoint /** Start point of the intersection */,
            NXOpen::View * view /** View in which to project the intersection */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the intersection of a
            @link NXOpen::IParameterizedSurface NXOpen::IParameterizedSurface@endlink  and @link NXOpen::IBaseCurve NXOpen::IBaseCurve@endlink .
             @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IParameterizedSurface * face /** face */ ,
            NXOpen::IBaseCurve * curve /**  Curve in intersection */,
            NXOpen::Point * helpPt1 /**  Optional help Point for face */,
            NXOpen::Point * helpPt2 /**  Optional help Point for curve */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the intersection of a @link NXOpen::IBasePlane NXOpen::IBasePlane@endlink 
            and @link NXOpen::IBaseCurve NXOpen::IBaseCurve@endlink .
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBasePlane * plane /**  Plane or DatumPlane in intersection */,
            NXOpen::IBaseCurve * curve /**  Curve or Edge in intersection */,
            NXOpen::Point * helpPt1 /**  Optional help Point for face */,
            NXOpen::Point * helpPt2 /**  Optional help Point for curve */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the center of a spherical face.
             @return  
         <br>  Created in NX4.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IParameterizedSurface * sphericalFace /** spherical face */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the given @link NXOpen::Routing::IRoutePosition NXOpen::Routing::IRoutePosition@endlink .
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Routing::IRoutePosition * routePosition /** route position */ ,
            NXOpen::Xform * xform /**  optional @link NXOpen::Xform NXOpen::Xform@endlink  */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Finds the @link  NXOpen::Point   NXOpen::Point @endlink  with the given identifier as recorded in a journal.
                An object may not return the same value as its JournalIdentifier in different versions of
                the software. However newer versions of the software should find the same object when
                FindObject is passed older versions of its journal identifier. In general, this method
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * FindObject
        (
            const NXString & journalIdentifier /** Identifier of the Point you want */
        );
        /** Finds the @link  NXOpen::Point   NXOpen::Point @endlink  with the given identifier as recorded in a journal.
                An object may not return the same value as its JournalIdentifier in different versions of
                the software. However newer versions of the software should find the same object when
                FindObject is passed older versions of its journal identifier. In general, this method
                should not be used in handwritten code and exists to support record and playback of journals.

                An exception will be thrown if no object can be found with the given journal identifier.  @return  
         <br>  Created in NX3.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        NXOpen::Point * FindObject
        (
            const char * journalIdentifier /** Identifier of the Point you want */
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  via @link NXOpen::CartesianCoordinateSystem NXOpen::CartesianCoordinateSystem@endlink  and three @link NXOpen::Scalar NXOpen::Scalar@endlink .
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::CartesianCoordinateSystem * csys /** Cartesian Coordinate System */,
            NXOpen::Scalar * scalarX /** X location */,
            NXOpen::Scalar * scalarY /** Y location */,
            NXOpen::Scalar * scalarZ /** Z location */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  between two points using a @link NXOpen::Scalar NXOpen::Scalar@endlink  that represents
            a percentage of the distance between the points.  The distance is measured from the first point to the
            second point.  There is no limit on the percentage so the point can be outside the area between the two
            points.
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Point * point1 /** point1 */ ,
            NXOpen::Point * point2 /** point2 */ ,
            NXOpen::Scalar * distancePercentage /** distance percentage */ ,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the virtual intersection of two linear Edges or Curves.
             @return  
         <br>  Created in NX5.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreateVirtualIntersectionPoint
        (
            NXOpen::IBaseCurve * curve1 /**  First Edge or Curve in virtual intersection */,
            NXOpen::IBaseCurve * curve2 /** Second Edge or Curve in virtual intersection */,
            NXOpen::Point * helpPt1 /**  Optional help Point for curve 1 */,
            NXOpen::Point * helpPt2 /** Optional help Point for curve 2 */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  via an @link NXOpen::Expression NXOpen::Expression@endlink .
             @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::Expression * exp /** EXP Point */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
             Creates a Routing "Stock Offset" point.  This stock offset point offsets itself from
             the input base point along the specified direction.  The input expression determines the
             distance between the base point and the offset point.  The input expression may reference
             the variable "MAX_PATH_STOCK_DIA" which is replaced by the current maximum diameter of
             stock applied to Routing segments that refer to the offset point.
              @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
        public: NXOpen::Point * CreateStockOffsetPoint
        (
            NXOpen::Point * basePoint /** Base point to offset from. */,
            NXOpen::Direction * offsetDirr /** Direction to offset along. */,
            const NXString & offsetExpression /** Offset value expression. */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
             Creates a Routing "Stock Offset" point.  This stock offset point offsets itself from
             the input base point along the specified direction.  The input expression determines the
             distance between the base point and the offset point.  The input expression may reference
             the variable "MAX_PATH_STOCK_DIA" which is replaced by the current maximum diameter of
             stock applied to Routing segments that refer to the offset point.
              @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
        NXOpen::Point * CreateStockOffsetPoint
        (
            NXOpen::Point * basePoint /** Base point to offset from. */,
            NXOpen::Direction * offsetDirr /** Direction to offset along. */,
            const char * offsetExpression /** Offset value expression. */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
             Edits an existing Routing "Stock Offset" point with new information.
             This stock offset point offsets itself from the input base point along the specified direction.
             The input expression determines the distance between the base point and the offset point.
             The input expression may reference the variable "MAX_PATH_STOCK_DIA" which is replaced by the
             current maximum diameter of stock applied to Routing segments that refer to the offset point.
              @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
        public: NXOpen::Point * EditStockOffsetPoint
        (
            NXOpen::Point * basePoint /** Base point to offset from. */,
            NXOpen::Direction * offsetDirr /** Direction to offset along. */,
            const NXString & offsetExpression /** Offset value expression. */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
             Edits an existing Routing "Stock Offset" point with new information.
             This stock offset point offsets itself from the input base point along the specified direction.
             The input expression determines the distance between the base point and the offset point.
             The input expression may reference the variable "MAX_PATH_STOCK_DIA" which is replaced by the
             current maximum diameter of stock applied to Routing segments that refer to the offset point.
              @return  
         <br>  Created in NX12.0.0.  <br>  
         <br> License requirements : routing_advanced ("Routing Advanced"), routing_base ("Routing Basic") */
        NXOpen::Point * EditStockOffsetPoint
        (
            NXOpen::Point * basePoint /** Base point to offset from. */,
            NXOpen::Direction * offsetDirr /** Direction to offset along. */,
            const char * offsetExpression /** Offset value expression. */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
             Creates a @link NXOpen::Point NXOpen::Point@endlink  at a @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink .
             The @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  will be extraced into the work part if
             necessary. If the @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  has already been extracted,
             the existing extract will be used. If extraction is not required, the input
             @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  will be used.
              @return  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : routing_base ("Routing Basic") */
        public: NXOpen::Point * CreatePointOnPortExtractAlign
        (
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            NXOpen::Routing::Port * port /** @link NXOpen::Routing::Port NXOpen::Routing::Port@endlink  */,
            NXOpen::Scalar * distance /** Scalar Distance */
        );
        /** Creates a parameterised point on the center line axis of the given face.
             @return  Point  
         <br>  Created in NX6.0.0.  <br>  
         <br> License requirements : None */
        public: NXOpen::Point * CreatePointOnSurfaceAxis
        (
            NXOpen::TaggedObject * face /** RM Face */,
            NXOpen::Scalar * parameter /** RM Scalar */,
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object  */
        );
        /**
            Creates a point by projecting onto a face.
             @return  
         <br>  Created in NX6.0.1.  <br>  
         <br> License requirements : nx_masterfem ("Finite Element Modeling") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::CAE::CAEFace * face /** the face to project to */,
            NXOpen::Point * projectedPoint /** the point to project onto the face */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /** Creates a quadrant point  @return  
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreateQuadrantPoint
        (
            NXOpen::IBaseCurve * curveOrEdge /** Must be circular or elliptical */,
            int quadrant /** 0 to 3 */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  on the center of gravity of the sketch for a given sheet metal feature face
            in history free mode. Supports Dimple, Bead, Louver, Drawn Cutout and Normal Cutout. A Null object will be
            returned if an inapproriate face is passed as an argument.
          @return  Point 
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : nx_sheet_metal ("NX Sheet Metal") */
        public: NXOpen::Point * CreatePointOnSectionCG
        (
            NXOpen::SmartObject::UpdateOption updateOption /** Update option of smart object */,
            NXOpen::TaggedObject * face /** the feature face to associate the point with */
        );
        /**
            Deletes a @link NXOpen::Point NXOpen::Point@endlink  by adding the point to the delete list and then
            updating the delete list without performing a general update.
         
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: void DeletePoint
        (
            NXOpen::Point * point /**  Point to be deleted */
        );
        /**
            Removes the parameters from an associative @link NXOpen::Point NXOpen::Point@endlink .
         
         <br>  Created in NX7.5.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: void RemoveParameters
        (
            NXOpen::Point * point /**  Point from which parameters will be removed */
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the intersection of a
            connected set of faces and @link NXOpen::IBaseCurve NXOpen::IBaseCurve@endlink .
             @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::ScCollector * faces /** Collector object to represent connected set of faces*/,
            NXOpen::IBaseCurve * curve /**  Curve in intersection */,
            NXOpen::Point * helpPt1 /**  Optional help Point for face */,
            NXOpen::Point * helpPt2 /**  Optional help Point for curve */,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  on a @link NXOpen::Annotations::Annotation NXOpen::Annotations::Annotation@endlink  and @link NXOpen::Scalar NXOpen::Scalar@endlink  representing the T parameter.
             @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ ,
            NXOpen::Annotations::Annotation * annotation /** annotation */ ,
            NXOpen::Scalar * t /** t */ ,
            int side /** side */ ,
            int block /** block */ ,
            bool attachFcfToDim /** attach fcf to dim */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at the center of a splarc.
             @return  
         <br>  Created in NX8.0.0.  <br>  
         <br> License requirements : drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * splarc /** splarc */ ,
            NXOpen::View * view /** view */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at a spline pole.
             @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePointSplinePole
        (
            NXOpen::IBaseCurve * splineCurve /** Spline */,
            int poleIndex /** index of Spline Pole */,
            NXOpen::SmartObject::UpdateOption updateOption /** updateoption */ 
        );
        /**
            Creates a @link Point Point@endlink  draft smart point for splines as arcs
             @return  Smart point 
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : drafting ("DRAFTING") */
        public: NXOpen::Point * CreatePointSplarc
        (
            NXOpen::IBaseCurve * splarc /** Spline Arc */,
            NXOpen::View * view /** View */
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  at a spline defining point.
             @return  
         <br>  Created in NX10.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePointSplineDefiningPoint
        (
            NXOpen::IBaseCurve * splineCurve /** Spline */,
            int definingPointIndex /** index of Spline Defining Point */,
            NXOpen::SmartObject::UpdateOption updateOption /** updateoption */ 
        );
        /**
            Creates a @link NXOpen::Point NXOpen::Point@endlink  on a @link NXOpen::Curve NXOpen::Curve@endlink  or @link NXOpen::Edge NXOpen::Edge@endlink  and @link NXOpen::Scalar NXOpen::Scalar@endlink  representing
            the Location option and Location Reference
             @return  
         <br>  Created in NX11.0.0.  <br>  
         <br> License requirements : solid_modeling ("SOLIDS MODELING") OR drafting ("DRAFTING") OR nx_masterfem ("Finite Element Modeling") OR geometric_tol ("GDT") OR cam_base ("CAM BASE") */
        public: NXOpen::Point * CreatePoint
        (
            NXOpen::IBaseCurve * edgeCurve /** Edge or Curve */,
            NXOpen::Scalar * scalarT /** scalar value */,
            NXOpen::PointCollection::PointOnCurveLocationOption locationOption /**  Specify whether the input Scalar is Arc Length or Percent Arc Length or Percent Parameter*/,
            NXOpen::Point * specifiedPoint /** Specify the Point for the Location Reference type 'Specified Point'. If NULL then Location Reference type is 'Start of Curve'*/,
            NXOpen::SmartObject::UpdateOption updateOption /** update option */ 
        );
    }; //lint !e1712 default constructor not defined for class  

}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
