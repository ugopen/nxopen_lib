#ifndef NXOpen_FEATURES_VAROFFSETFACEBUILDER_HXX_INCLUDED
#define NXOpen_FEATURES_VAROFFSETFACEBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_VarOffsetFaceBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_RegionListItemBuilder.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class VarOffsetFaceBuilder;
    }
    namespace Features
    {
        class FeatureBuilder;
    }
    namespace Features
    {
        class RegionListItemBuilder;
    }
    namespace Features
    {
        class RegionListItemBuilderList;
    }
    namespace GeometricUtilities
    {
        class ProjectionOptions;
    }
    class NXObject;
    class ScCollector;
    class SelectTaggedObjectList;
    namespace Features
    {
        class _VarOffsetFaceBuilderBuilder;
        class VarOffsetFaceBuilderImpl;
        /**
            Represents a @link Features::VarOffsetFace Features::VarOffsetFace@endlink  builder
             <br> To create a new instance of this class, use @link NXOpen::Features::FeatureCollection::CreateVarOffsetFaceBuilder  NXOpen::Features::FeatureCollection::CreateVarOffsetFaceBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        BodyOutput </td> <td> 
         
        OffsetasNewBody </td> </tr> 

        <tr><td> 
         
        BridgeContinuity </td> <td> 
         
        Connected </td> </tr> 

        </table>  

         <br>  Created in NX11.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  VarOffsetFaceBuilder : public NXOpen::Features::FeatureBuilder
        {
            /** feature type */
            public: enum Types
            {
                TypesPanel/** panel */ ,
                TypesPad/** pad */ ,
                TypesNetwork/** network */ 
            };

            /** bridge continuity */
            public: enum Continuity
            {
                ContinuityConnected/** connected */ ,
                ContinuityTangent/** tangent */ 
            };

            /** body output type */
            public: enum Output
            {
                OutputOffsetasNewBody/** offsetas new body */ ,
                OutputOffsetOriginalBody/** offset original body */ 
            };

            private: VarOffsetFaceBuilderImpl * m_varoffsetfacebuilder_impl;
            private: friend class  _VarOffsetFaceBuilderBuilder;
            protected: VarOffsetFaceBuilder();
            public: ~VarOffsetFaceBuilder();
            /**Returns  the target face 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * TargetFace
            (
            );
            /**Returns  the offset direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: bool OffsetDirection
            (
            );
            /**Sets  the offset direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetOffsetDirection
            (
                bool offsetDirection /** offsetdirection */ 
            );
            /**Returns  the boundary object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectTaggedObjectList * BoundaryObject
            (
            );
            /**Returns  the projection direction 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::GeometricUtilities::ProjectionOptions * ProjectionDirection
            (
            );
            /** The region selection type dim object's create function @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::RegionListItemBuilder * CreateRegionListItem
            (
            );
            /**Returns  the region list 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::RegionListItemBuilderList * RegionList
            (
            );
            /**Returns  the bridge continuity 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VarOffsetFaceBuilder::Continuity BridgeContinuity
            (
            );
            /**Sets  the bridge continuity 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetBridgeContinuity
            (
                NXOpen::Features::VarOffsetFaceBuilder::Continuity bridgeContinuity /** bridgecontinuity */ 
            );
            /**Returns  the body output 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VarOffsetFaceBuilder::Output BodyOutput
            (
            );
            /**Sets  the body output 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetBodyOutput
            (
                NXOpen::Features::VarOffsetFaceBuilder::Output bodyOutput /** bodyoutput */ 
            );
            /**Returns  the type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::VarOffsetFaceBuilder::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetType
            (
                NXOpen::Features::VarOffsetFaceBuilder::Types type /** type */ 
            );
            /**Returns  the offset solid 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool OffsetSolid
            (
            );
            /**Sets  the offset solid 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetOffsetSolid
            (
                bool offsetSolid /** offsetsolid */ 
            );
            /** Insert to region point - boundary map 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void InsertPointBoundaryMap
            (
                NXOpen::NXObject * regionPoint /** regionpoint */ ,
                const std::vector<NXOpen::NXObject *> & regionBoundaries /** regionboundaries */ 
            );
            /** Erase the key value from region point - boundary map 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ErasePointBoundaryMap
            (
                NXOpen::NXObject * regionPoint /** regionpoint */ 
            );
            /** Insert to region point - laminar edges map 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void InsertPointLaminarMap
            (
                NXOpen::NXObject * regionPoint /** regionpoint */ ,
                const std::vector<NXOpen::NXObject *> & regionLaminarEdges /** regionlaminaredges */ 
            );
            /** Erase the key value from region point - laminar edges map 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void ErasePointLaminarMap
            (
                NXOpen::NXObject * regionPoint /** regionpoint */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
