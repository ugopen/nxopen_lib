#ifndef NXOpen_MFG_AM_SKETCHER_HXX_INCLUDED
#define NXOpen_MFG_AM_SKETCHER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Mfg_AM_Sketcher.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_CurveOnSurfaceBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/libmfgamopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Mfg
    {
        namespace AM
        {
            class Sketcher;
        }
    }
    class Builder;
    class Face;
    namespace Features
    {
        class CurveOnSurfaceBuilder;
    }
    class Point;
    class ScCollector;
    namespace Mfg
    {
        namespace AM
        {
            class _SketcherBuilder;
            class SketcherImpl;
            /** Represents a @link Mfg::AM::Sketcher Mfg::AM::Sketcher@endlink  builder  <br> To create a new instance of this class, use @link NXOpen::Mfg::AM::SupportBuilder::Sketcher  NXOpen::Mfg::AM::SupportBuilder::Sketcher @endlink  <br> 
            Default values.
            <table border="1"> 
             
            <tr><th> 
            Property</th>  <th> 
            Value</th> </tr>
            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.CurveJoinMethod </td> <td> 
             
            No </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.Degree </td> <td> 
             
            7 </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.FitMethod </td> <td> 
             
            DegreeAndSegments </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.IsAdvancedFit </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.IsAlignShape </td> <td> 
             
            0 </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.MaximumDegree </td> <td> 
             
            7 </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.MaximumSegments </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.MinimumDegree </td> <td> 
             
            5 </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitData.Segments </td> <td> 
             
            1 </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitProperties.FitOption </td> <td> 
             
            Cubic </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitProperties.MaximumDegree </td> <td> 
             
            7 </td> </tr> 

            <tr><td> 
             
            CurveOnSurfaceBuilder.CurveFitProperties.MaximumSegments </td> <td> 
             
            1 </td> </tr> 

            </table>  

             <br>  Created in NX11.0.2.  <br>  
            */
            class MFGAMOPENCPPEXPORT  Sketcher : public NXOpen::Builder
            {
                /** the sketcher mode */
                public: enum Mode
                {
                    ModeSurfaceFace/** surface face */ ,
                    ModeSurfaceLine/** surface line */ 
                };

                private: SketcherImpl * m_sketcher_impl;
                private: friend class  _SketcherBuilder;
                protected: Sketcher();
                public: ~Sketcher();
                /**Returns  the sketch mode 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Mfg::AM::Sketcher::Mode SketchMode
                (
                );
                /**Sets  the sketch mode 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : am_pb_mtls_sg_2 ("Advanced NX Additive Support Geometry") OR am_pb_mtls_sg_1 ("Basic NX Additive Support Geometry") */
                public: void SetSketchMode
                (
                    NXOpen::Mfg::AM::Sketcher::Mode sketchMode /** sketchmode */ 
                );
                /**Returns  the sketch geometry collector 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: NXOpen::ScCollector * SketchCollector
                (
                );
                /**Returns  the Curve On Surface feature builder 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: NXOpen::Features::CurveOnSurfaceBuilder * CurveOnSurfaceBuilder
                (
                );
                /** Set the faces to sketch the curve upon 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : am_pb_mtls_sg_2 ("Advanced NX Additive Support Geometry") OR am_pb_mtls_sg_1 ("Basic NX Additive Support Geometry") */
                public: void SetSketchCanvas
                (
                    const std::vector<NXOpen::Face *> & faces /** sketch faces */
                );
                /**Sets  the flag indicating if curve should be closed 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : am_pb_mtls_sg_2 ("Advanced NX Additive Support Geometry") OR am_pb_mtls_sg_1 ("Basic NX Additive Support Geometry") */
                public: void SetCloseCurve
                (
                    bool bCloseCurve /** bclosecurve */ 
                );
                /**Returns  the flag indicating if curve should be closed 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : None */
                public: bool CloseCurve
                (
                );
                /** Creates or extends the curve with points 
                 <br>  Created in NX11.0.2.  <br>  
                 <br> License requirements : am_pb_mtls_sg_2 ("Advanced NX Additive Support Geometry") OR am_pb_mtls_sg_1 ("Basic NX Additive Support Geometry") */
                public: void AddCurvePoints
                (
                    const std::vector<NXOpen::Point *> & points /** sketch points */
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
