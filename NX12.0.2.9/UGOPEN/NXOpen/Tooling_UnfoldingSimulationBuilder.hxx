#ifndef NXOpen_TOOLING_UNFOLDINGSIMULATIONBUILDER_HXX_INCLUDED
#define NXOpen_TOOLING_UNFOLDINGSIMULATIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Tooling_UnfoldingSimulationBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_tooling_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Tooling
    {
        class UnfoldingSimulationBuilder;
    }
    class Builder;
    class ScCollector;
    class SelectFaceList;
    namespace Tooling
    {
        class _UnfoldingSimulationBuilderBuilder;
        class UnfoldingSimulationBuilderImpl;
        /** Unfolding Simulation Builder of PDW and EDW. Nothing is returned by this builder.  <br> To create a new instance of this class, use @link NXOpen::Tooling::ProgressiveDieManager::CreateUnfoldingSimulationBuilder  NXOpen::Tooling::ProgressiveDieManager::CreateUnfoldingSimulationBuilder @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        Speed </td> <td> 
         
        1 </td> </tr> 

        <tr><td> 
         
        State </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX10.0.0.  <br>  
        */
        class NXOPENCPP_TOOLINGEXPORT  UnfoldingSimulationBuilder : public NXOpen::Builder
        {
            private: UnfoldingSimulationBuilderImpl * m_unfoldingsimulationbuilder_impl;
            private: friend class  _UnfoldingSimulationBuilderBuilder;
            protected: UnfoldingSimulationBuilder();
            public: ~UnfoldingSimulationBuilder();
            /**Returns  the reference face edge 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * ReferenceFaceEdge
            (
            );
            /**Returns  the bend faces 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectFaceList * BendFaces
            (
            );
            /**Returns  the body that will do static interference check with selected bend face body 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * CheckedBody
            (
            );
            /** Step backward of animation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void StepBackward
            (
            );
            /** Play animation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void Play
            (
            );
            /** Pause animation 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void Pause
            (
            );
            /** Step animation forward 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: void StepForward
            (
            );
            /**Returns  the state 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int State
            (
            );
            /**Sets  the state 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetState
            (
                int state /** state */ 
            );
            /**Returns  the speed 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : None */
            public: int Speed
            (
            );
            /**Sets  the speed 
             <br>  Created in NX10.0.0.  <br>  
             <br> License requirements : prog_die_wizard ("UG/Progressive Die Wizard") */
            public: void SetSpeed
            (
                int speed /** speed */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
