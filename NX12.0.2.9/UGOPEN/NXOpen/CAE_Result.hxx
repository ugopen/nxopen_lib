#ifndef NXOpen_CAE_RESULT_HXX_INCLUDED
#define NXOpen_CAE_RESULT_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Result.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_ElementTypes.hxx>
#include <NXOpen/NXObject.hxx>
#include <NXOpen/ugmath.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        class Result;
    }
    namespace CAE
    {
        class BaseLoadcase;
    }
    namespace CAE
    {
        class PostMesh;
    }
    class NXObject;
    class TaggedObject;
    class Unit;
    namespace CAE
    {
        class _ResultBuilder;
        class ResultImpl;
        /** 
             <br>   
            This class provides interfaces to query analysis results.  
            <br/>To query results you must first understand how the results are structured.  The basic structure is as follows
            <ul>
                <li>Load case</li>
                <ul>
                    <li>Iteration</li>
                    <ul>
                        <li>Result Type</li>
                    </ul>
                </ul>  
            </ul>
            
            
            <br/>Results are divided into Load Cases(loadcase). Loadcase is a general term which could representand of the follow based on solution type
            <ul>
            <li>Solution Steps</li>
            <li>Modes</li>
            <li>Frequencies</li>
            <li>etc</li>
            </ul>

            The number of Loadcases can be obtained by using @link NXOpen::CAE::Result::AskNumLoadcases NXOpen::CAE::Result::AskNumLoadcases@endlink . When querying information for a loadcase you will use the loadcase index ( 0 to n-1 ), where n is the number of loadcases.
            Each Loadcase is divided into multiple iterations, although for many results there will be only 1 iteration.  Based on solution type, these iterations could represent
            <ul>
            <li>Time Steps</li>
            <li>Cycles</li>
            <li>Solver iterations</li>
            <li>etc</li>
            </ul>   
            The number of iterations for a given loadcase can be obtained by using @link NXOpen::CAE::Result::AskNumIterations NXOpen::CAE::Result::AskNumIterations@endlink  and specify the loadcase index.
            When querying information for a specific iteration, you will use both the loadcase and iteration index.  
            Within an iteration query all the available Result types using  @link NXOpen::CAE::Result::AskResultTypes NXOpen::CAE::Result::AskResultTypes@endlink  
             <br>   
            
             <br>   
            A Result type is defined by three parameters
            <ol>
                <li>@link NXOpen::CAE::Result::Quantity NXOpen::CAE::Result::Quantity@endlink  - It specifies physical quantity of the result like Displacement, Stress etc. </li>
                <li>@link NXOpen::CAE::Result::Location NXOpen::CAE::Result::Location@endlink  - It specifies where the result is defined like Nodal, Elemental, or Element Nodal </li>
                <li>@link NXOpen::CAE::Result::Section  NXOpen::CAE::Result::Section @endlink  - It specifies on which section or gauss point the result is calculated  </li>
            </ol>
             <br>   
            
             <br> 
            The Results object also contains information on the finite element model for which results may be accessed.
            The number of nodes in this results model can be obtained by using  @link NXOpen::CAE::Result::AskNumNodes NXOpen::CAE::Result::AskNumNodes@endlink . 
            The number of elements in this results model can be obtained by using @link NXOpen::CAE::Result::AskNumElements NXOpen::CAE::Result::AskNumElements@endlink .  
            Elements are also organized in several groups (of type @link NXOpen::CAE::Result::GroupContainer  NXOpen::CAE::Result::GroupContainer @endlink ) based
            on the element type, material and physical property. One can query the number of each group type and its content.
             <br>   
             <br>   
            Nodes and Elements in result the file are addressed by their index which varies from 1 to number of nodes/elements.
            Node and Element can have a user label associated with it. User labels are unique and have one to one mapping with its index.
             <br>   

             <br> An instance of this class can not be obtained  <br> 
         <br>  Created in NX5.0.0.  <br>  
        */
        class NXOPENCPP_CAEEXPORT  Result : public NXOpen::NXObject
        {
            /** Group Containers */
            public: enum GroupContainer
            {
                GroupContainerZeroDimensional/** zero dimensional */ ,
                GroupContainerOneDimensional/** one dimensional */ ,
                GroupContainerTwoDimensional/** two dimensional */ ,
                GroupContainerThreeDimensional/** three dimensional */ ,
                GroupContainerConnector/** connector */ ,
                GroupContainerOther/** other */ 
            };

            /** Super Element Representations */
            public: enum SuperElementRep
            {
                SuperElementRepSymbolic/** symbolic */  = 1,
                SuperElementRepSimplified/** simplified */ ,
                SuperElementRepThreeDim/** three dim */ 
            };

            /** Result quantities */
            public: enum Quantity
            {
                QuantityDisplacement/** displacement */ ,
                QuantityRotation/** rotation */ ,
                QuantityTranslationalDeformation/** translational deformation */ ,
                QuantityRotationalDeformation/** rotational deformation */ ,
                QuantityContactDisplacement/** contact displacement */ ,
                QuantityVelocity/** velocity */ ,
                QuantityAngularVelocity/** angular velocity */ ,
                QuantityAcceleration/** acceleration */ ,
                QuantityAngularAcceleration/** angular acceleration */ ,
                QuantityVonMisesStress/** von mises stress */ ,
                QuantityVonMisesStrain/** von mises strain */ ,
                QuantityStress/** stress */ ,
                QuantityStrain/** strain */ ,
                QuantityStrainEnergy/** strain energy */ ,
                QuantityStrainEnergyDensity/** strain energy density */ ,
                QuantityStrainEnergyError/** strain energy error */ ,
                QuantityEquivalentPlasticStrain/** equivalent plastic strain */ ,
                QuantityEquivalentCreepStrain/** equivalent creep strain */ ,
                QuantityKineticEnergy/** kinetic energy */ ,
                QuantityKineticEnergyDensity/** kinetic energy density */ ,
                QuantityKineticEnergyPercent/** kinetic energy percent */ ,
                QuantityThickness/** thickness */ ,
                QuantityTemperature/** temperature */ ,
                QuantityTemperatureGradient/** temperature gradient */ ,
                QuantityHeatFlux/** heat flux */ ,
                QuantityThermalEnergy/** thermal energy */ ,
                QuantityHeatFlow/** heat flow */ ,
                QuantityAppliedForce/** applied force */ ,
                QuantityAppliedMoment/** applied moment */ ,
                QuantityReactionForce/** reaction force */ ,
                QuantityReactionMoment/** reaction moment */ ,
                QuantityReactionForceMPC/** reaction force mpc */ ,
                QuantityReactionMomentMPC/** reaction moment mpc */ ,
                QuantityContactTraction/** contact traction */ ,
                QuantityContactForce/** contact force */ ,
                QuantityElementForce/** element force */ ,
                QuantityElementMoment/** element moment */ ,
                QuantityContactPressure/** contact pressure */ ,
                QuantityFatigueLife/** fatigue life */ ,
                QuantityFatigueDamage/** fatigue damage */ ,
                QuantityFatigueSafetyFactor/** fatigue safety factor */ ,
                QuantityStrengthSafetyFactor/** strength safety factor */ ,
                QuantityElementError/** element error */ ,
                QuantityElementResultants/** element resultants */ ,
                QuantityElementStrainResultants/** element strain resultants */ ,
                QuantityMaximumTemperature/** maximum temperature */ ,
                QuantityMinimumTemperature/** minimum temperature */ ,
                QuantityTimeAtMaximumTemperature/** time at maximum temperature */ ,
                QuantityTimeAtMinimumTemperature/** time at minimum temperature */ ,
                QuantityConductiveFlux/** conductive flux */ ,
                QuantityTotalHeatLoad/** total heat load */ ,
                QuantityTotalHeatFlux/** total heat flux */ ,
                QuantityHeatResidual/** heat residual */ ,
                QuantityConvectionCoefficient/** convection coefficient */ ,
                QuantityViewFactorsSum/** view factors sum */ ,
                QuantityAdjustedVelocity/** adjusted velocity */ ,
                QuantityPressureOnPositiveSide/** pressure on positive side */ ,
                QuantityPressureOnNegativeSide/** pressure on negative side */ ,
                QuantityStaticPressure/** static pressure */ ,
                QuantityTotalPressure/** total pressure */ ,
                QuantityTurbulenceEnergy/** turbulence energy */ ,
                QuantityTurbulenceDissipation/** turbulence dissipation */ ,
                QuantityFluidDensity/** fluid density */ ,
                QuantityShearStressOnPositiveSide/** shear stress on positive side */ ,
                QuantityShearStressOnNegativeSide/** shear stress on negative side */ ,
                QuantityRoughnessOnPositiveSide/** roughness on positive side */ ,
                QuantityRoughnessOnNegativeSide/** roughness on negative side */ ,
                QuantityYPlusOnPositiveSide/** yplus on positive side */ ,
                QuantityYPlusOnNegativeSide/** yplus on negative side */ ,
                QuantityMassFlux/** mass flux */ ,
                QuantityFluidTemperature/** fluid temperature */ ,
                QuantityConvectiveFlux/** convective flux */ ,
                QuantityLocalConvectionCoefficient/** local convection coefficient */ ,
                QuantityBulkConvectionCoefficient/** bulk convection coefficient */ ,
                QuantityPressure/** pressure */ ,
                QuantityVelocityComponent/** velocity component */ ,
                QuantityMassFlow/** mass flow */ ,
                QuantityElementHeatLoad/** element heat load */ ,
                QuantitySafetyFactor/** safety factor */ ,
                QuantityShellResultants/** shell resultants */ ,
                QuantityBeamResultants/** beam resultants */ ,
                QuantitySpringDashpotResultant/** spring dashpot resultant */ ,
                QuantityShellStrainResultants/** shell strain resultants */ ,
                QuantityBeamStrainResultants/** beam strain resultants */ ,
                QuantitySpringDashpotStrainResultant/** spring dashpot strain resultant */ ,
                QuantityPlyFailureIndex/** ply failure index */ ,
                QuantityBondFailureIndex/** bond failure index */ ,
                QuantityPlyStress/** ply stress */ ,
                QuantityPlyStrain/** ply strain */ ,
                QuantityBondSafetyMargin/** bond safety margin */ ,
                QuantityPlySafetyMargin/** ply safety margin */ ,
                QuantityTorsionStress/** torsion stress */ ,
                QuantityGridPointForce/** grid point force */ ,
                QuantityGridPointMoment/** grid point moment */ ,
                QuantityRadiativeSourceHeatFlux/** radiative source heat flux */ ,
                QuantityRadiance/** radiance */ ,
                QuantityApparentTemperature/** apparent temperature */ ,
                QuantityFluence/** fluence */ ,
                QuantityRCProduct/** rcproduct */ ,
                QuantityVoltage/** voltage */ ,
                QuantityPowerDensity/** power density */ ,
                QuantityRelativeVelocity/** relative velocity */ ,
                QuantityWaterCumulation/** water cumulation */ ,
                QuantityTurbulentSpecificDissipation/** turbulent specific dissipation */ ,
                QuantityRadiativeHeatFlux/** radiative heat flux */ ,
                QuantityCollimatedHeatFlux/** collimated heat flux */ ,
                QuantityDiffuseHeatFlux/** diffuse heat flux */ ,
                QuantityInfraredHeatFlux/** infrared heat flux */ ,
                QuantityViewFactor/** view factor */ ,
                QuantityUnknown/** unknown */ ,
                QuantityMappedTemperature/** mapped temperature */ ,
                QuantityMappedTemperatureGradient/** mapped temperature gradient */ ,
                QuantityRadiativeAbsorbedHeatFlux/** radiative absorbed heat flux */ ,
                QuantityRadiativeIncidentHeatFlux/** radiative incident heat flux */ ,
                QuantityRadiativeReflectedHeatFlux/** radiative reflected heat flux */ ,
                QuantityRadiativeTransmittedHeatFlux/** radiative transmitted heat flux */ ,
                QuantityCollimatedAbsorbedHeatFlux/** collimated absorbed heat flux */ ,
                QuantityCollimatedIncidentHeatFlux/** collimated incident heat flux */ ,
                QuantityCollimatedReflectedHeatFlux/** collimated reflected heat flux */ ,
                QuantityCollimatedTransmittedHeatFlux/** collimated transmitted heat flux */ ,
                QuantityDiffuseAbsorbedHeatFlux/** diffuse absorbed heat flux */ ,
                QuantityDiffuseIncidentHeatFlux/** diffuse incident heat flux */ ,
                QuantityDiffuseReflectedHeatFlux/** diffuse reflected heat flux */ ,
                QuantityDiffuseTransmittedHeatFlux/** diffuse transmitted heat flux */ ,
                QuantityInfraredAbsorbedHeatFlux/** infrared absorbed heat flux */ ,
                QuantityInfraredIncidentHeatFlux/** infrared incident heat flux */ ,
                QuantityInfraredReflectedHeatFlux/** infrared reflected heat flux */ ,
                QuantityInfraredTransmittedHeatFlux/** infrared transmitted heat flux */ ,
                QuantityAlbedoViewFactor/** albedo view factor */ ,
                QuantityEarthViewFactor/** earth view factor */ ,
                QuantitySolarViewFactor/** solar view factor */ ,
                QuantitySpaceViewFactor/** space view factor */ ,
                QuantityQuality/** quality */ ,
                QuantityRadiationPatch/** radiation patch */ ,
                QuantityAbsorbedRadiation/** absorbed radiation */ ,
                QuantityIncidentRadiation/** incident radiation */ ,
                QuantityReflectedRadiation/** reflected radiation */ ,
                QuantityTransmittedRadiation/** transmitted radiation */ ,
                QuantityRefractiveIndex/** refractive index */ ,
                QuantityRefractiveIndexGradient/** refractive index gradient */ ,
                QuantityOpticalPathLength/** optical path length */ ,
                QuantityLaserPower/** laser power */ ,
                QuantityPumpingPower/** pumping power */ ,
                QuantityRadiativeFluxinSolid/** radiative fluxin solid */ ,
                QuantityFluidScalar/** fluid scalar */ ,
                QuantityWallDistance/** wall distance */ ,
                QuantityRelativeHumidity/** relative humidity */ ,
                QuantitySpecificHumidity/** specific humidity */ ,
                QuantityMachNumber/** mach number */ ,
                QuantityPredictedPercentDissatisfied/** predicted percent dissatisfied */ ,
                QuantityPercentMeanVote/** percent mean vote */ ,
                QuantityVorticity/** vorticity */ ,
                QuantityRelativePressure/** relative pressure */ ,
                QuantityAbsolutePressure/** absolute pressure */ ,
                QuantityElementAspectRatio/** element aspect ratio */ ,
                QuantityElementDistortion/** element distortion */ ,
                QuantityElementTaper/** element taper */ ,
                QuantityElementSize/** element size */ ,
                QuantityElementJacobian/** element jacobian */ ,
                QuantityElementSkew/** element skew */ ,
                QuantityElementStretch/** element stretch */ ,
                QuantityElementTwist/** element twist */ ,
                QuantityElementWarp/** element warp */ ,
                QuantityFluidMesh/** fluid mesh */ ,
                QuantityNetRadiativeLoad/** net radiative load */ ,
                QuantityNetRadiativeFlux/** net radiative flux */ ,
                QuantityRadiosityLoad/** radiosity load */ ,
                QuantityRadiosityFlux/** radiosity flux */ ,
                QuantityIrradianceLoad/** irradiance load */ ,
                QuantityIrradianceFlux/** irradiance flux */ ,
                QuantityParticleDensity/** particle density */ ,
                QuantityParticleMassDensity/** particle mass density */ ,
                QuantityAcousticPowerDensity/** acoustic power density */ ,
                QuantityReynoldsNumber/** reynolds number */ ,
                QuantityBondStrengthRatio/** bond strength ratio */ ,
                QuantityPlyStrengthRatio/** ply strength ratio */ ,
                QuantityFailureIndex/** failure index */ ,
                QuantityContactInitialSeparation/** contact initial separation */ ,
                QuantityContactFinalSeparation/** contact final separation */ ,
                QuantityGasketPressue/** gasket pressue */ ,
                QuantityGasketClosure/** gasket closure */ ,
                QuantityGasketPlasticClosure/** gasket plastic closure */ ,
                QuantityGasketStressYield/** gasket stress yield */ ,
                QuantityGasketStatus/** gasket status */ ,
                QuantityContactPenetration/** contact penetration */ ,
                QuantityContactStatus/** contact status */ ,
                QuantityContactGapDistance/** contact gap distance */ ,
                QuantityStressLevelCrossingRate/** stress level crossing rate */ ,
                QuantityVonMisesStressLevelCrossingRate/** von mises stress level crossing rate */ ,
                QuantityVonMisesStrainLevelCrossingRate/** von mises strain level crossing rate */ ,
                QuantityDisplacementLevelCrossingRate/** displacement level crossing rate */ ,
                QuantityRotationLevelCrossingRate/** rotation level crossing rate */ ,
                QuantityVelocityLevelCrossingRate/** velocity level crossing rate */ ,
                QuantityAngularVelocityLevelCrossingRate/** angular velocity level crossing rate */ ,
                QuantityAccelerationLevelCrossingRate/** acceleration level crossing rate */ ,
                QuantityAngularAccelerationLevelCrossingRate/** angular acceleration level crossing rate */ ,
                QuantityElementForceLevelCrossingRate/** element force level crossing rate */ ,
                QuantityElementMomentLevelCrossingRate/** element moment level crossing rate */ ,
                QuantityElementResultantsLevelCrossingRate/** element resultants level crossing rate */ ,
                QuantityShellResultantsLevelCrossingRate/** shell resultants level crossing rate */ ,
                QuantityBeamResultantsLevelCrossingRate/** beam resultants level crossing rate */ ,
                QuantitySpringDashpotResultantsLevelCrossingRate/** spring dashpot resultants level crossing rate */ ,
                QuantityElementStrainResultantsLevelCrossingRate/** element strain resultants level crossing rate */ ,
                QuantityShellStrainResultantsLevelCrossingRate/** shell strain resultants level crossing rate */ ,
                QuantityBeamStrainResultantsLevelCrossingRate/** beam strain resultants level crossing rate */ ,
                QuantitySpringDashpotStrainResultantsLevelCrossingRate/** spring dashpot strain resultants level crossing rate */ ,
                QuantityXDisplacement/** xdisplacement */ ,
                QuantityYDisplacement/** ydisplacement */ ,
                QuantityZDisplacement/** zdisplacement */ ,
                QuantityLevelCrossingRateXDisplacement/** level crossing rate xdisplacement */ ,
                QuantityLevelCrossingRateYDisplacement/** level crossing rate ydisplacement */ ,
                QuantityLevelCrossingRateZDisplacement/** level crossing rate zdisplacement */ ,
                QuantityXRotation/** xrotation */ ,
                QuantityYRotation/** yrotation */ ,
                QuantityZRotation/** zrotation */ ,
                QuantityLevelCrossingRateXRotation/** level crossing rate xrotation */ ,
                QuantityLevelCrossingRateYRotation/** level crossing rate yrotation */ ,
                QuantityLevelCrossingRateZRotation/** level crossing rate zrotation */ ,
                QuantityXAcceleration/** xacceleration */ ,
                QuantityYAcceleration/** yacceleration */ ,
                QuantityZAcceleration/** zacceleration */ ,
                QuantityLevelCrossingRateXAcceleration/** level crossing rate xacceleration */ ,
                QuantityLevelCrossingRateYAcceleration/** level crossing rate yacceleration */ ,
                QuantityLevelCrossingRateZAcceleration/** level crossing rate zacceleration */ ,
                QuantityXAngularAcceleration/** xangular acceleration */ ,
                QuantityYAngularAcceleration/** yangular acceleration */ ,
                QuantityZAngularAcceleration/** zangular acceleration */ ,
                QuantityLevelCrossingRateXAngularAcceleration/** level crossing rate xangular acceleration */ ,
                QuantityLevelCrossingRateYAngularAcceleration/** level crossing rate yangular acceleration */ ,
                QuantityLevelCrossingRateZAngularAcceleration/** level crossing rate zangular acceleration */ ,
                QuantityXXStress/** xxstress */ ,
                QuantityYYStress/** yystress */ ,
                QuantityZZStress/** zzstress */ ,
                QuantityXYStress/** xystress */ ,
                QuantityYZStress/** yzstress */ ,
                QuantityZXStress/** zxstress */ ,
                QuantityLevelCrossingRateXXStress/** level crossing rate xxstress */ ,
                QuantityLevelCrossingRateYYStress/** level crossing rate yystress */ ,
                QuantityLevelCrossingRateZZStress/** level crossing rate zzstress */ ,
                QuantityLevelCrossingRateXYStress/** level crossing rate xystress */ ,
                QuantityLevelCrossingRateYZStress/** level crossing rate yzstress */ ,
                QuantityLevelCrossingRateZXStress/** level crossing rate zxstress */ ,
                QuantityXElementForce/** xelement force */ ,
                QuantityYElementForce/** yelement force */ ,
                QuantityZElementForce/** zelement force */ ,
                QuantityRXElementForce/** rxelement force */ ,
                QuantityRYElementForce/** ryelement force */ ,
                QuantityRZElementForce/** rzelement force */ ,
                QuantityLevelCrossingRateXElementForce/** level crossing rate xelement force */ ,
                QuantityLevelCrossingRateYElementForce/** level crossing rate yelement force */ ,
                QuantityLevelCrossingRateZElementForce/** level crossing rate zelement force */ ,
                QuantityLevelCrossingRateRXElementForce/** level crossing rate rxelement force */ ,
                QuantityLevelCrossingRateRYElementForce/** level crossing rate ryelement force */ ,
                QuantityLevelCrossingRateRZElementForce/** level crossing rate rzelement force */ ,
                QuantityNXXShellResultant/** nxxshell resultant */ ,
                QuantityNYYShellResultant/** nyyshell resultant */ ,
                QuantityNXYShellResultant/** nxyshell resultant */ ,
                QuantityMXXShellResultant/** mxxshell resultant */ ,
                QuantityMYYShellResultant/** myyshell resultant */ ,
                QuantityMXYShellResultant/** mxyshell resultant */ ,
                QuantityQXZShellResultant/** qxzshell resultant */ ,
                QuantityQYZShellResultant/** qyzshell resultant */ ,
                QuantityLevelCrossingRateNXXShellResultant/** level crossing rate nxxshell resultant */ ,
                QuantityLevelCrossingRateNYYShellResultant/** level crossing rate nyyshell resultant */ ,
                QuantityLevelCrossingRateNXYShellResultant/** level crossing rate nxyshell resultant */ ,
                QuantityLevelCrossingRateMXXShellResultant/** level crossing rate mxxshell resultant */ ,
                QuantityLevelCrossingRateMYYShellResultant/** level crossing rate myyshell resultant */ ,
                QuantityLevelCrossingRateMXYShellResultant/** level crossing rate mxyshell resultant */ ,
                QuantityLevelCrossingRateQXZShellResultant/** level crossing rate qxzshell resultant */ ,
                QuantityLevelCrossingRateQYZShellResultant/** level crossing rate qyzshell resultant */ ,
                QuantityYPlus/** yplus */ ,
                QuantityThermalConductivity/** thermal conductivity */ ,
                QuantityThermalStrain/** thermal strain */ ,
                QuantityGapThickness/** gap thickness */ ,
                QuantityTotalForce/** total force */ ,
                QuantityTotalMoment/** total moment */ ,
                QuantityTotalResidualForce/** total residual force */ ,
                QuantityTotalResidualMoment/** total residual moment */ ,
                QuantityGridPointReactionForce/** grid point reaction force */ ,
                QuantityGridPointReactionMoment/** grid point reaction moment */ ,
                QuantityGridPointAppliedForce/** grid point applied force */ ,
                QuantityGridPointAppliedMoment/** grid point applied moment */ ,
                QuantityGlueForce/** glue force */ ,
                QuantityGluePressure/** glue pressure */ ,
                QuantityGlueTraction/** glue traction */ ,
                QuantityEnthalpy/** enthalpy */ ,
                QuantityEnthalpyRate/** enthalpy rate */ ,
                QuantityNonlinearStress/** nonlinear stress */ ,
                QuantityNonlinearStrain/** nonlinear strain */ ,
                QuantityBondStress/** bond stress */ ,
                QuantityBondStrain/** bond strain */ ,
                QuantitySolidLaminateFailureIndex/** solid laminate failure index */ ,
                QuantitySolidInterLaminarFailureIndex/** solid inter laminar failure index */ ,
                QuantityExternalAppliedHeatFlow/** external applied heat flow */ ,
                QuantityOptimizationDisplacement/** Shape Optimization; Nodal Translational displacement values */,
                QuantityDisplacementMagnitude/** displacement magnitude */ ,
                QuantityFractionVolume/** fraction volume */ ,
                QuantityFilmThickness/** film thickness */ ,
                QuantityTime/** time */ ,
                QuantitySurfaceEmissivity/** surface emissivity */ ,
                QuantityRootMeanSquareDisplacement/** root mean square displacement */ ,
                QuantityRootMeanSquareAcceleration/** root mean square acceleration */ ,
                QuantityRootMeanSquareStress/** root mean square stress */ ,
                QuantityZeroCrossingsDisplacement/** zero crossings displacement */ ,
                QuantityZeroCrossingsAcceleration/** zero crossings acceleration */ ,
                QuantityZeroCrossingsStress/** zero crossings stress */ ,
                QuantitySoundPressure/** sound pressure */ ,
                QuantityRootMeanSquareRotation/** root mean square rotation */ ,
                QuantityRootMeanSquareVelocity/** root mean square velocity */ ,
                QuantityRootMeanSquareAngularVelocity/** root mean square angular velocity */ ,
                QuantityRootMeanSquareAngularAcceleration/** root mean square angular acceleration */ ,
                QuantityRootMeanSquareAppliedForce/** root mean square applied force */ ,
                QuantityRootMeanSquareAppliedMoment/** root mean square applied moment */ ,
                QuantityRootMeanSquareVonMisesStress/** root mean square von mises stress */ ,
                QuantityZeroCrossingseRotation/** zero crossingse rotation */ ,
                QuantityZeroCrossingsVelocity/** zero crossings velocity */ ,
                QuantityZeroCrossingseAngularVelocity/** zero crossingse angular velocity */ ,
                QuantityZeroCrossingseAngularAcceleration/** zero crossingse angular acceleration */ ,
                QuantityZeroCrossingseAppliedForce/** zero crossingse applied force */ ,
                QuantityZeroCrossingseAppliedMoment/** zero crossingse applied moment */ ,
                QuantityRootMeanSquareStrain/** root mean square strain */ ,
                QuantityZeroCrossingsStrain/** zero crossings strain */ ,
                QuantityPlasticStrain/** plastic strain */ ,
                QuantityLogarithmicStrain/** logarithmic strain */ ,
                QuantityTensionSafetyFactor/** tension safety factor */ ,
                QuantityCompressionSafetyFactor/** compression safety factor */ ,
                QuantityRootMeanSquareElementResultant/** root mean square element resultant */ ,
                QuantityZeroCrossingsElementResultant/** zero crossings element resultant */ ,
                QuantityRootMeanSquareShellResultants/** root mean square shell resultants */ ,
                QuantityRootMeanSquareBeamResultants/** root mean square beam resultants */ ,
                QuantityRootMeanSquareSpringDashpotResultant/** root mean square spring dashpot resultant */ ,
                QuantityZeroCrossingsShellResultants/** zero crossings shell resultants */ ,
                QuantityZeroCrossingsBeamResultants/** zero crossings beam resultants */ ,
                QuantityZeroCrossingsSpringDashpotResultant/** zero crossings spring dashpot resultant */ ,
                QuantityXReactionForce/** xreaction force */ ,
                QuantityYReactionForce/** yreaction force */ ,
                QuantityZReactionForce/** zreaction force */ ,
                QuantityXReactionMoment/** xreaction moment */ ,
                QuantityYReactionMoment/** yreaction moment */ ,
                QuantityZReactionMoment/** zreaction moment */ ,
                QuantityLumpedMass/** lumped mass */ ,
                QuantityDistributedMassPerLength/** distributed mass per length */ ,
                QuantityDistributedMassPerArea/** distributed mass per area */ ,
                QuantityTemperatureLoad/** temperature load */ ,
                QuantityTorsionStrain/** torsion strain */ ,
                QuantityAxialStress/** axial stress */ ,
                QuantityAxialStrain/** axial strain */ ,
                QuantityLength/** length */ ,
                QuantitySurfaceAbsoptivity/** surface absoptivity */ ,
                QuantityTurbulentIntensity/** turbulent intensity */ ,
                QuantityVaporToDryAirMassRatio/** vapor to dry air mass ratio */ ,
                QuantityTracerFluidMassFraction/** tracer fluid mass fraction */ ,
                QuantityTotalMixtureMassFractions/** total mixture mass fractions */ ,
                QuantityMass/** mass */ ,
                QuantitySurfaceDensity/** surface density */ ,
                QuantityEmissivityValue/** emissivity value */ ,
                QuantityEffectiveEmissivity/** effective emissivity */ ,
                QuantityVolumeFlow/** volume flow */ ,
                QuantityCoefficientPerLength/** coefficient per length */ ,
                QuantityPermeability/** permeability */ ,
                QuantityThermalConductance/** thermal conductance */ ,
                QuantityThermalResistance/** thermal resistance */ ,
                QuantityConductancePerLength/** conductance per length */ ,
                QuantitySeebeckCoefficient/** seebeck coefficient */ ,
                QuantityElectricalResistivity/** electrical resistivity */ ,
                QuantityElectricalResistance/** electrical resistance */ ,
                QuantityCurrent/** current */ ,
                QuantityPower/** power */ ,
                QuantityHeatCapacity/** heat capacity */ ,
                QuantityTemperatureDifference/** temperature difference */ ,
                QuantityMassDensity/** mass density */ ,
                QuantityPrincipalStress/** principal stress */ ,
                QuantityRootMeanSquareTorsionStress/** root mean square torsion stress */ ,
                QuantityZeroCrossingsTorsionStress/** zero crossings torsion stress */ ,
                QuantityRootMeanSquareTorsionStrain/** root mean square torsion strain */ ,
                QuantityZeroCrossingsTorsionStrain/** zero crossings torsion strain */ ,
                QuantityRootMeanSquareAxialStress/** root mean square axial stress */ ,
                QuantityZeroCrossingsAxialStress/** zero crossings axial stress */ ,
                QuantityRootMeanSquareAxialStrain/** root mean square axial strain */ ,
                QuantityZeroCrossingsAxialStrain/** zero crossings axial strain */ ,
                QuantityRootMeanSquareReactionForceMPC/** root mean square reaction force mpc */ ,
                QuantityZeroCrossingsReactionForceMPC/** zero crossings reaction force mpc */ ,
                QuantityMolecularDiffusionCoefficient/** molecular diffusion coefficient */ ,
                QuantityAngle/** angle */ ,
                QuantityPressureDropToVelocityRatio/** pressure drop to velocity ratio */ ,
                QuantityCauchyStress/** cauchy stress */ ,
                QuantityEquivalentStress/** equivalent stress */ ,
                QuantityPiolaKirchoffStress/** piola kirchoff stress */ ,
                QuantityGreenStrain/** green strain */ ,
                QuantityNormalContactForce/** normal contact force */ ,
                QuantityShearContactForce/** shear contact force */ ,
                QuantityBiotStress/** biot stress */ ,
                QuantityBiotStrain/** biot strain */ ,
                QuantityNaturalStrain/** natural strain */ ,
                QuantityVolume/** volume */ ,
                QuantityPlyThermalStrain/** ply thermal strain */ ,
                QuantityPlyElasticStrain/** ply elastic strain */ ,
                QuantityCyclicReactionForce/** cyclic reaction force */ ,
                QuantityCyclicReactionMoment/** cyclic reaction moment */ ,
                QuantityCurrentDensity/** current density */ ,
                QuantityTrubulentStructures/** trubulent structures */ ,
                QuantityTotalGlueSlipDistance/** total glue slip distance */ ,
                QuantityIncrementalGlueSlipDistance/** incremental glue slip distance */ ,
                QuantityChockingGap/** chocking gap */ ,
                QuantityChockingGapAtElementIntegrationPoint/** chocking gap at element integration point */ ,
                QuantityInitialStrain/** initial strain */ ,
                QuantityInitialStrainAtElementIntegrationPoint/** initial strain at element integration point */ ,
                QuantityLowersurfTemperature/** lowersurf temperature */ ,
                QuantityMidsurfTemperature/** midsurf temperature */ ,
                QuantityUppersurfTemperature/** uppersurf temperature */ ,
                QuantityTemperatureVarRate/** temperature var rate */ ,
                QuantityGlasstransTemperature/** glasstrans temperature */ ,
                QuantityElectricPotential/** electric potential */ ,
                QuantityPorosity/** porosity */ ,
                QuantityStrainEq/** strain eq */ ,
                QuantityDamage/** damage */ ,
                QuantityDamageEq/** damage eq */ ,
                QuantitySpecificCapacitiveEnergy/** specific capacitive energy */ ,
                QuantityGasMassFlux/** gas mass flux */ ,
                QuantityRelativeDisplacement/** relative displacement */ ,
                QuantityHeatFluxApplied/** heat flux applied */ ,
                QuantityHeatFluxEnthalpy/** heat flux enthalpy */ ,
                QuantityHeatFluxRadiativeEmitted/** heat flux radiative emitted */ ,
                QuantityHeatFluxRadiativeFlame/** heat flux radiative flame */ ,
                QuantityHeatFluxRadiativeFlameEmitted/** heat flux radiative flame emitted */ ,
                QuantityHeatFluxRadiativeFlameAbsorbed/** heat flux radiative flame absorbed */ ,
                QuantityTotalHeatFluxApplied/** total heat flux applied */ ,
                QuantityDissipatedEnergyDensity/** dissipated energy density */ ,
                QuantityDissipatedPowerDensity/** dissipated power density */ ,
                QuantityDegreeConversion/** degree conversion */ ,
                QuantityAcousticPressure/** acoustic pressure */ ,
                QuantityAcousticIntensity/** acoustic intensity */ ,
                QuantityAcousticPower/** acoustic power */ ,
                QuantityMultiPointConstraintForce/** multi point constraint force */ ,
                QuantityMultiPointConstraintMoment/** multi point constraint moment */ ,
                QuantityFluidAcousticCouplingQuality/** fluid acoustic coupling quality */ ,
                QuantityFluidUncoupledAcousticCouplingQuality/** fluid uncoupled acoustic coupling quality */ ,
                QuantityStructuralAcousticCouplingQuality/** structural acoustic coupling quality */ ,
                QuantityStructuralUncoupledAcousticCouplingQuality/** structural uncoupled acoustic coupling quality */ ,
                QuantityPressureCohesive/** pressure cohesive */ ,
                QuantityTactionCoheasive/** taction coheasive */ ,
                QuantityPlyDamage/** ply damage */ ,
                QuantityPlyPlasticDamage/** ply plastic damage */ ,
                QuantityEnergyDamage/** energy damage */ ,
                QuantityStatusDamage/** status damage */ ,
                QuantityCohesiveNormalSeparation/** cohesive normal separation */ ,
                QuantityCohesiveSlipDisplacement/** cohesive slip displacement */ ,
                QuantityCohesiveDamage/** cohesive damage */ ,
                QuantitySdv/** sdv */ ,
                QuantitySdvElementIntegrationPoint/** sdv element integration point */ ,
                QuantityBoltPreload2D/** bolt preload2d */ ,
                QuantityBoltPreload3D/** bolt preload3d */ ,
                QuantityMaxFrequency/** max frequency */ ,
                QuantityFreeEdges/** free edges */ ,
                QuantityJunctionEdges/** junction edges */ ,
                QuantityCoupledAcousticalNodes/** coupled acoustical nodes */ ,
                QuantityStrainMech/** strain mech */ ,
                QuantityStructuralAcousticCouplingDistance/** structural acoustic coupling distance */ ,
                QuantityNormalAcousticVelocity/** normal acoustic velocity */ ,
                QuantityNormalAcousticIntensity/** normal acoustic intensity */ ,
                QuantitySpecificCapacitivePower/** specific capacitive power */ ,
                QuantityTransportHeatFlux/** transport heat flux */ ,
                QuantityVolumeHeatFlux/** volume heat flux */ ,
                QuantityAcousticVelocity/** acoustic velocity */ ,
                QuantityCurrentDensityArea/** current density area */ ,
                QuantityForceDensity/** force density */ ,
                QuantityForceDensityArea/** force density area */ ,
                QuantityElectricFieldStrength/** electric field strength */ ,
                QuantityElectricFluxDensity/** electric flux density */ ,
                QuantityPlyPlasticStrain/** ply plastic strain */ ,
                QuantityPlyStrainPlasticEq/** ply strain plastic eq */ ,
                QuantityPlyGreenStrain/** ply green strain */ ,
                QuantityPlyBiotStrain/** ply biot strain */ ,
                QuantityPlyNaturalStrain/** ply natural strain */ ,
                QuantityCyclicWorstPrincipalStrain/** cyclic worst principal strain */ ,
                QuantityCyclicWorstPrincipalStress/** cyclic worst principal stress */ ,
                QuantityCyclicWorstPrincipalStrainAngle/** cyclic worst principal strain angle */ ,
                QuantityCyclicWorstPrincipalStressAngle/** cyclic worst principal stress angle */ ,
                QuantityAxisymmetricWorstPrincipalStress/** axisymmetric worst principal stress */ ,
                QuantityAxisymmetricWorstPrincipalStrain/** axisymmetric worst principal strain */ ,
                QuantityXXStrain/** xxstrain */ ,
                QuantityYYStrain/** yystrain */ ,
                QuantityZZStrain/** zzstrain */ ,
                QuantityXYStrain/** xystrain */ ,
                QuantityYZStrain/** yzstrain */ ,
                QuantityZXStrain/** zxstrain */ ,
                QuantityLevelCrossingRateStrain/** level crossing rate strain */ ,
                QuantityLevelCrossingRateXXStrain/** level crossing rate xxstrain */ ,
                QuantityLevelCrossingRateYYStrain/** level crossing rate yystrain */ ,
                QuantityLevelCrossingRateZZStrain/** level crossing rate zzstrain */ ,
                QuantityLevelCrossingRateXYStrain/** level crossing rate xystrain */ ,
                QuantityLevelCrossingRateYZStrain/** level crossing rate yzstrain */ ,
                QuantityLevelCrossingRateZXStrain/** level crossing rate zxstrain */ ,
                QuantityInitialImperfection/** initial imperfection */ ,
                QuantityOffsetStrain/** offset strain */ ,
                QuantityPlyStressEquivalent/** ply stress equivalent */ ,
                QuantityPlyStressNonlinear/** ply stress nonlinear */ ,
                QuantityPressureGradient/** pressure gradient */ ,
                QuantityNormalizedMassDensity/** normalized mass density */ ,
                QuantityPSDDisplacement/** Vibrations : Displacement PSD - displ^2/Hz */,
                QuantityPSDRMSDisplacement/** Vibrations : Displacement PSD RMS - displ  */,
                QuantityPSDVelocity/** Vibrations : Velocity PSD - vel^2/Hz */,
                QuantityPSDRMSVelocity/** Vibrations : Velocity PSD RMS - vel */,
                QuantityPSDAcceleration/** Vibrations : Acceleration PSD - accel^2/Hz, must have: g^2/Hz */,
                QuantityPSDRMSAcceleration/** Vibrations : Acceleration PSD RMS - accel, eg, m/s^2,  must have: g */,
                QuantityPSDStress/** Stress : Stress PSD - stress^2/Hz, eg Pa^2/Hz */,
                QuantityPSDPerPlyStress/** Stress : Stress PSD Per ply - stress^2/Hz, eg Pa^2/Hz */,
                QuantityPSDRMSStress/** Stress : Stress PSD RMS - stress */,
                QuantityPSDStrain/** Strain : Strain PSD - unitless/Hz, eg (mm/mm)/Hz */,
                QuantityPSDPerPlyStressPerStrain/** Strain : Stress/Strain PSD Per ply - unitless/Hz, eg (mm/mm)/Hz */,
                QuantityPSDRMSStressPerStrain/** Strain : Stress/Strain PSD RMS - unitless, eg mm/mm */,
                QuantityPSDSPCForce/** Forces : SPC Force PSD - force^2/Hz */,
                QuantityPSDRMSSPCForce/** Forces : SPC Force PSD RMS - Force */,
                QuantityPSDElementForce/** Forces : Element Force PSD - force^2/Hz */,
                QuantityPSDRMSElementForce/** Forces : Element Force PSD RMS - Force */,
                QuantityPSDPressure/** Acoustic-related : Pressure PSD - Pa^2/Hz */,
                QuantityPSDRMSPressure/** Acoustic-related : Pressure PSD RMS - Pa */,
                QuantityElementResultantPlasticStrain/** element resultant plastic strain */ ,
                QuantityElementResultantElasticStrain/** element resultant elastic strain */ ,
                QuantityElementResultantThermalStrain/** element resultant thermal strain */ ,
                QuantityElementResultantCreepStrain/** element resultant creep strain */ ,
                QuantityElasticStrainVonMises/** elastic strain von mises */ ,
                QuantityPlasticStrainVonMises/** plastic strain von mises */ ,
                QuantityThermalStrainVonMises/** thermal strain von mises */ ,
                QuantityStrainVonMisesCreep/** strain von mises creep */ ,
                QuantityPlasticElemResultantStrainShell/** plastic elem resultant strain shell */ ,
                QuantityPlasticElemResultantStrainBeam/** plastic elem resultant strain beam */ ,
                QuantityPlasticElemResultantStrainSpringDashpot/** plastic elem resultant strain spring dashpot */ ,
                QuantityElasticElemResultantStrainShell/** elastic elem resultant strain shell */ ,
                QuantityElasticElemResultantStrainBeam/** elastic elem resultant strain beam */ ,
                QuantityElasticElemResultantStrainSpringDashpot/** elastic elem resultant strain spring dashpot */ ,
                QuantityThermalElemResultantStrainShell/** thermal elem resultant strain shell */ ,
                QuantityThermalElemResultantStrainBeam/** thermal elem resultant strain beam */ ,
                QuantityThermalElemResultantStrainSpringDashpot/** thermal elem resultant strain spring dashpot */ ,
                QuantityElemResultantStrainCreepShell/** elem resultant strain creep shell */ ,
                QuantityElemResultantStrainCreepBeam/** elem resultant strain creep beam */ ,
                QuantityElemResultantStrainCreepSpringDashpot/** elem resultant strain creep spring dashpot */ ,
                QuantityPlyStrainCreep/** ply strain creep */ ,
                QuantityPowerSpectralDensityPressure/** power spectral density pressure */ ,
                QuantityZeroCrossingsPressure/** zero crossings pressure */ ,
                QuantityRootMeanSquarePressure/** root mean square pressure */ ,
                QuantityAutoCorrelationPressure/** auto correlation pressure */ ,
                QuantityCRMSPressure/** crmspressure */ ,
                QuantityPressureAbsoluteModal/** pressure absolute modal */ ,
                QuantityDisplacementAbsoluteModal/** displacement absolute modal */ ,
                QuantityAccelerationAbsoluteModal/** acceleration absolute modal */ ,
                QuantityVelocityAbsoluteModal/** velocity absolute modal */ ,
                QuantityNormalDistance/** normal distance */ ,
                QuantityEnergyDensity/** energy density */ ,
                QuantityId/** id */ ,
                QuantityElemResultantCreep/** elem resultant creep */ ,
                QuantityElemResultantCreepShell/** elem resultant creep shell */ ,
                QuantityElemResultantCreepBeam/** elem resultant creep beam */ ,
                QuantityElemResultantCreepSpringDashpot/** elem resultant creep spring dashpot */ ,
                QuantityStrainEnergyPercent/** strain energy percent */ ,
                QuantityPsdRotation/** psd rotation */ ,
                QuantityPsdAngularVelocity/** psd angular velocity */ ,
                QuantityPsdAngularAcceleration/** psd angular acceleration */ ,
                QuantityPsdForceMpc/** psd force mpc */ ,
                QuantityPsdPlyStrain/** psd ply strain */ ,
                QuantityRMSStress/** rmsstress */ ,
                QuantityRMSPlyStress/** rmsply stress */ ,
                QuantityRMSStressVonMises/** rmsstress von mises */ ,
                QuantityRMSPlyStressVonMises/** rmsply stress von mises */ ,
                QuantityCRMSStress/** crmsstress */ ,
                QuantityCRMSPlyStress/** crmsply stress */ ,
                QuantityEnergyStrain/** energy strain */ ,
                QuantityRMSStrain/** rmsstrain */ ,
                QuantityRMSPlyStrain/** rmsply strain */ ,
                QuantityCRMSStrain/** crmsstrain */ ,
                QuantityCRMSPlyStrain/** crmsply strain */ ,
                QuantityEnergyDamping/** energy damping */ ,
                QuantityPressureOverVolumeVelocity/** pressure over volume velocity */ ,
                QuantitySPForce/** spforce */ ,
                QuantityCumulativeRootMeanSquareDisplacement/** cumulative root mean square displacement */ ,
                QuantityCumulativeRootMeanSquareRotation/** cumulative root mean square rotation */ ,
                QuantityPSDReactionForce/** Reaction Force PSD */,
                QuantityRootMeanSquareReactionMomentMPC/** root mean square reaction moment mpc */ ,
                QuantityZeroCrossingsReactionMomentMPC/** zero crossings reaction moment mpc */ ,
                QuantityRootMeanSquareReactionForce/** root mean square reaction force */ ,
                QuantityZeroCrossingsReactionForce/** zero crossings reaction force */ ,
                QuantityRootMeanSquareReactionMoment/** root mean square reaction moment */ ,
                QuantityZeroCrossingsReactionMoment/** zero crossings reaction moment */ ,
                QuantityRootMeanSquareElementResultantStrain/** root mean square element resultant strain */ ,
                QuantityZeroCrossingsElementResultantStrain/** zero crossings element resultant strain */ ,
                QuantityRootMeanSquareShellStrainResultant/** root mean square shell strain resultant */ ,
                QuantityZeroCrossingsShellStrainResultant/** zero crossings shell strain resultant */ ,
                QuantityRootMeanSquareBeamStrainResultant/** root mean square beam strain resultant */ ,
                QuantityZeroCrossingsBeamStrainResultant/** zero crossings beam strain resultant */ ,
                QuantityRootMeanSquareSpringDashpotStrainResultant/** root mean square spring dashpot strain resultant */ ,
                QuantityZeroCrossingsSpringDashpotStrainResultant/** zero crossings spring dashpot strain resultant */ ,
                QuantityElasticStrain/** elastic strain */ ,
                QuantityAdaptiveElementStressError/** adaptive element stress error */ ,
                QuantityAdaptiveNodalMeshRefinementLevel/** adaptive nodal mesh refinement level */ ,
                QuantityNormErrorStrainEnergy/** norm error strain energy */ ,
                QuantityNormErrorMaximumStrainEnergy/** norm error maximum strain energy */ ,
                QuantityNormMaximumStrainEnergy/** norm maximum strain energy */ ,
                QuantityNormErrorMaximumStress/** norm error maximum stress */ ,
                QuantityNormErrorStress/** norm error stress */ ,
                QuantityNormMaximumStress/** norm maximum stress */ ,
                QuantityNormStress/** norm stress */ ,
                QuantityDynamicViscosity/** dynamic viscosity */ ,
                QuantityNormStrainEnergy/** norm strain energy */ ,
                QuantityElementIntegrationPointStress/** element integration point stress */ ,
                QuantityElementIntegrationPointStrain/** element integration point strain */ ,
                QuantityElasticStrainAtElementIntegrationPoint/** elastic strain at element integration point */ ,
                QuantityThermalStrainAtElementIntegrationPoint/** thermal strain at element integration point */ ,
                QuantityCreepStrain/** creep strain */ ,
                QuantityCreepStrainAtElementIntegrationPoint/** creep strain at element integration point */ ,
                QuantityPlasticStrainAtElementIntegrationPoint/** plastic strain at element integration point */ ,
                QuantityContactSlipIncrementalDisplacement/** contact slip incremental displacement */ ,
                QuantityContactSliptotalDisplacement/** contact sliptotal displacement */ ,
                QuantityGridPointReactionForceMPC/** grid point reaction force mpc */ ,
                QuantityGridPointReactionMomentMPC/** grid point reaction moment mpc */ ,
                QuantityMagneticFluxDensity/** magnetic flux density */ ,
                QuantityMagneticField/** magnetic field */ ,
                QuantityTemperatureError/** temperature error */ ,
                QuantityMaximumTemperatureError/** maximum temperature error */ ,
                QuantityXAngularVelocity/** xangular velocity */ ,
                QuantityYAngularVelocity/** yangular velocity */ ,
                QuantityZAngularVelocity/** zangular velocity */ ,
                QuantityRelativeRotation/** relative rotation */ ,
                QuantityGlueMoment/** glue moment */ ,
                QuantityContactMoment/** contact moment */ ,
                QuantityNonLinearSpringDashpotResultant/** non linear spring dashpot resultant */ ,
                QuantityDiffusionResistance/** diffusion resistance */ ,
                QuantityPSDSPCMoment/** psdspcmoment */ ,
                QuantityPSDMPCMoment/** psdmpcmoment */ 
            };

            /** Result locations */
            public: enum Location
            {
                LocationNodal/** nodal */ ,
                LocationElement/** element */ ,
                LocationElementNodal/** element nodal */ ,
                LocationElementFace/** element face */ ,
                LocationElementEdge/** element edge */ ,
                LocationElementFaceNode/** element face node */ ,
                LocationElementEdgeNode/** element edge node */ 
            };

            /** Result sections */
            public: enum Section
            {
                SectionNotApplicable/** not applicable */ ,
                SectionTop/** top */ ,
                SectionMiddle/** middle */ ,
                SectionBottom/** bottom */ ,
                SectionMinimum/** minimum */ ,
                SectionMaximum/** maximum */ ,
                SectionStressRecoveryPointC/** stress recovery point c */ ,
                SectionStressRecoveryPointD/** stress recovery point d */ ,
                SectionStressRecoveryPointE/** stress recovery point e */ ,
                SectionStressRecoveryPointF/** stress recovery point f */ ,
                SectionAll/** all */ ,
                SectionBending/** bending */ 
            };

            /** Result data types */
            public: enum DataType
            {
                DataTypeScalar/** scalar */ ,
                DataTypeVector/** vector */ ,
                DataTypeSixVector/** six vector */ ,
                DataTypeTensor/** tensor */ ,
                DataTypeElementResultantShell/** element resultant shell */ ,
                DataTypeElementResultantBeam/** element resultant beam */ ,
                DataTypeElementResultantSpringDashpot/** element resultant spring dashpot */ ,
                DataTypeSixScalars/**Applicable for @link NXOpen::CAE::Result::QuantitySolidLaminateFailureIndex NXOpen::CAE::Result::QuantitySolidLaminateFailureIndex@endlink  */,
                DataTypeThreeScalars/** three scalars */ ,
                DataTypeMultiScalar/**Multi scalar*/
            };

            /** Result components */
            public: enum Component
            {
                ComponentScalar/** scalar */ ,
                ComponentX/** x */ ,
                ComponentY/** y */ ,
                ComponentZ/** z */ ,
                ComponentMagnitude/** magnitude */ ,
                ComponentXx/** xx */ ,
                ComponentYy/** yy */ ,
                ComponentZz/** zz */ ,
                ComponentXy/** xy */ ,
                ComponentYz/** yz */ ,
                ComponentZx/** zx */ ,
                ComponentDeterminant/** determinant */ ,
                ComponentMean/** mean */ ,
                ComponentMaximumShear/** maximum shear */ ,
                ComponentMinimumPrincipal/** minimum principal */ ,
                ComponentMiddlePrincipal/** middle principal */ ,
                ComponentMaximumPrincipal/** maximum principal */ ,
                ComponentOctahedral/** octahedral */ ,
                ComponentVonMises/** von mises */ ,
                ComponentMembraneXX/** membrane xx */ ,
                ComponentMembraneYY/** membrane yy */ ,
                ComponentMembraneXY/** membrane xy */ ,
                ComponentBendingXX/** bending xx */ ,
                ComponentBendingYY/** bending yy */ ,
                ComponentBendingXY/** bending xy */ ,
                ComponentShearXZ/** shear xz */ ,
                ComponentShearYZ/** shear yz */ ,
                ComponentAxial/** axial */ ,
                ComponentBendingS/** bending s */ ,
                ComponentBendingT/** bending t */ ,
                ComponentTorsion/** torsion */ ,
                ComponentShearS/** shear s */ ,
                ComponentShearT/** shear t */ ,
                ComponentSpringDashpotForce/** No longer used; it means @link NXOpen::CAE::Result::ComponentSpringDashpotForceX NXOpen::CAE::Result::ComponentSpringDashpotForceX@endlink  in new format */,
                ComponentSpringDashpotForceX/** spring dashpot force x */ ,
                ComponentSpringDashpotForceY/** spring dashpot force y */ ,
                ComponentSpringDashpotForceZ/** spring dashpot force z */ ,
                ComponentSpringDashpotMomentX/** spring dashpot moment x */ ,
                ComponentSpringDashpotMomentY/** spring dashpot moment y */ ,
                ComponentSpringDashpotMomentZ/** spring dashpot moment z */ ,
                ComponentScalar1/** scalar1 */ ,
                ComponentScalar2/** scalar2 */ ,
                ComponentScalar3/** scalar3 */ ,
                ComponentScalar4/** scalar4 */ ,
                ComponentScalar5/** scalar5 */ ,
                ComponentScalar6/** scalar6 */ ,
                ComponentScalar7/** scalar7 */ ,
                ComponentScalar8/** scalar8 */ ,
                ComponentScalar9/** scalar9 */ ,
                ComponentScalar10/** scalar10 */ ,
                ComponentScalar11/** scalar11 */ ,
                ComponentScalar12/** scalar12 */ ,
                ComponentWorstPrincipal/** worst principal */ 
            };

            /** Complex options */
            public: enum Complex
            {
                ComplexReal/** real */ ,
                ComplexImaginary/** imaginary */ ,
                ComplexAmplitude/** amplitude */ ,
                ComplexSignedAmplitude/** signed amplitude */ ,
                ComplexPhaseAngle/** phase angle */ 
            };

            /** Coordinate systems */
            public: enum CoordinateSystem
            {
                CoordinateSystemAbsoluteRectangular/** absolute rectangular */ ,
                CoordinateSystemAbsoluteCylindrical/** absolute cylindrical */ ,
                CoordinateSystemAbsoluteSpherical/** absolute spherical */ ,
                CoordinateSystemWorkRectangular/** work rectangular */ ,
                CoordinateSystemWorkCylindrical/** work cylindrical */ ,
                CoordinateSystemWorkSpherical/** work spherical */ ,
                CoordinateSystemLocal/** local */ ,
                CoordinateSystemMaterial/**Material coordinate system is applicable only when
                                                                                  such coordinate systems are defined in the results model; 
                                                                                  if no material coordinate system is defined
                                                                                  @link NXOpen::CAE::Result::CoordinateSystemAbsoluteRectangular NXOpen::CAE::Result::CoordinateSystemAbsoluteRectangular@endlink    
                                                                                  will be used*/,
                CoordinateSystemSelectRectangular/** select rectangular */ ,
                CoordinateSystemSelectCylindrical/** select cylindrical */ ,
                CoordinateSystemSelectSpherical/** select spherical */ 
            };

            /** Source of selected coordinate system */
            public: enum CoordinateSystemSource
            {
                CoordinateSystemSourceNone/** none */ ,
                CoordinateSystemSourceModel/** identifies a coordinate system in the work part */,
                CoordinateSystemSourceResult/** identifies a coordinate system in the result */
            };

            /** Element-value criterions */
            public: enum ElementValueCriterion
            {
                ElementValueCriterionAverage/** average */ ,
                ElementValueCriterionCentroid/** centroid */ ,
                ElementValueCriterionMaximum/** maximum */ ,
                ElementValueCriterionMinimum/** minimum */ 
            };

            /** Deformation scales */
            public: enum DeformationScale
            {
                DeformationScaleModel/** model */ ,
                DeformationScaleAbsolute/** absolute */ 
            };

             /** Result type structure to specify a result dataset */
            public:
            struct Type
            {
                public: /** quantity */ NXOpen::CAE::Result::Quantity Quantity;
                public: /** location */ NXOpen::CAE::Result::Location Location;
                public: /** section */ NXOpen::CAE::Result::Section Section;
                public: Type() :
                    Quantity((NXOpen::CAE::Result::Quantity)0),
                    Location((NXOpen::CAE::Result::Location)0),
                    Section((NXOpen::CAE::Result::Section)0)
                {
                }
                /** Constructor for the Type struct. */ 
                public: Type(NXOpen::CAE::Result::Quantity quantityInitial /** quantity */ , 
                        NXOpen::CAE::Result::Location locationInitial /** location */ , 
                        NXOpen::CAE::Result::Section sectionInitial /** section */ ) :
                    Quantity(quantityInitial),
                    Location(locationInitial),
                    Section(sectionInitial)
                {
                }
            };

            /** Value type for result load case */
            public: enum LoadcaseValueType
            {
                LoadcaseValueTypeUnknown/**Unknown Value type */ = -1,
                LoadcaseValueTypeFrequency/**Value type - Frequency */,
                LoadcaseValueTypeLoadFactor/**Value type - Load Factor */,
                LoadcaseValueTypeNodeDOF/**Value type - Node DOF */,
                LoadcaseValueTypeLoadCase/**Value type - Load Case */,
                LoadcaseValueTypeTime/**Value type - Time */
            };

             /** Result Section structure to specify a result section for beams and shells */
            public:
            struct ResultSection
            {
                public: /** beamsection */ NXOpen::CAE::Result::Section Beamsection;
                public: /** shellsection */ NXOpen::CAE::Result::Section Shellsection;
                public: ResultSection() :
                    Beamsection((NXOpen::CAE::Result::Section)0),
                    Shellsection((NXOpen::CAE::Result::Section)0)
                {
                }
                /** Constructor for the ResultSection struct. */ 
                public: ResultSection(NXOpen::CAE::Result::Section beamsectionInitial /** beamsection */ , 
                        NXOpen::CAE::Result::Section shellsectionInitial /** shellsection */ ) :
                    Beamsection(beamsectionInitial),
                    Shellsection(shellsectionInitial)
                {
                }
            };

            /** Value type for beam end */
            public: enum BeamEnd
            {
                BeamEndNone/** None */ = -1,
                BeamEndFore/** Fore end */,
                BeamEndAft/** Aft end */
            };

            /** types for different way of computing nodal result from element nodal result. */
            public: enum ComputationType
            {
                ComputationTypeNone/** None */,
                ComputationTypeAverage/** compute average */,
                ComputationTypeSum/** compute sum. (Applicable only for element-nodal vector result.) */,
                ComputationTypeMinimum/** minimum value at the node */,
                ComputationTypeMaximum/** maximum value at the node */,
                ComputationTypeAbsoluteMinimum/** absolute minimum of the node */,
                ComputationTypeAbsoluteMaximum/** absolute maximum of the node */,
                ComputationTypeArithmaticMean/** mean of the values at the node */,
                ComputationTypeDiscontinuity/** discontinuity based on discontinuity option */
            };

            /** methods for different way of computing discontinuities in element nodal results */
            public: enum DiscontinuityMethod
            {
                DiscontinuityMethodRelative/** relative discontiuity */,
                DiscontinuityMethodWeighted/** weighted discontinuity */,
                DiscontinuityMethodLocal/** local discontinuity */,
                DiscontinuityMethodLocallyBalanced/** locally balanced discontinuity */
            };

             /** Averaging structure to specify averaging options */
            public:
            struct Averaging
            {
                public: /** do averaging */ bool DoAveraging;
                public: /** average across property ids */ bool AverageAcrossPropertyIds;
                public: /** average across material ids */ bool AverageAcrossMaterialIds;
                public: /** average across element types */ bool AverageAcrossElementTypes;
                public: /** average across featangle */ bool AverageAcrossFeatangle;
                public: /** average across anglevalue */ double AverageAcrossAnglevalue;
                public: /** include internal element contributions */ bool IncludeInternalElementContributions;
                public: Averaging() :
                    DoAveraging(),
                    AverageAcrossPropertyIds(),
                    AverageAcrossMaterialIds(),
                    AverageAcrossElementTypes(),
                    AverageAcrossFeatangle(),
                    AverageAcrossAnglevalue(),
                    IncludeInternalElementContributions()
                {
                }
                /** Constructor for the Averaging struct. */ 
                public: Averaging(bool doAveragingInitial /** do averaging */ , 
                        bool averageAcrossPropertyIdsInitial /** average across property ids */ , 
                        bool averageAcrossMaterialIdsInitial /** average across material ids */ , 
                        bool averageAcrossElementTypesInitial /** average across element types */ , 
                        bool averageAcrossFeatangleInitial /** average across featangle */ , 
                        double averageAcrossAnglevalueInitial /** average across anglevalue */ , 
                        bool includeInternalElementContributionsInitial /** include internal element contributions */ ) :
                    DoAveraging(doAveragingInitial),
                    AverageAcrossPropertyIds(averageAcrossPropertyIdsInitial),
                    AverageAcrossMaterialIds(averageAcrossMaterialIdsInitial),
                    AverageAcrossElementTypes(averageAcrossElementTypesInitial),
                    AverageAcrossFeatangle(averageAcrossFeatangleInitial),
                    AverageAcrossAnglevalue(averageAcrossAnglevalueInitial),
                    IncludeInternalElementContributions(includeInternalElementContributionsInitial)
                {
                }
            };

            /** dB scales */
            public: enum DbScale
            {
                DbScaleDb10/** db10 */ ,
                DbScaleDb20/** db20 */ 
            };

             /** Element-value structure to specify element value options */
            public:
            struct ElementValue
            {
                public: /** do element value */ bool DoElementValue;
                public: /** criterion */ NXOpen::CAE::Result::ElementValueCriterion Criterion;
                public: ElementValue() :
                    DoElementValue(),
                    Criterion((NXOpen::CAE::Result::ElementValueCriterion)0)
                {
                }
                /** Constructor for the ElementValue struct. */ 
                public: ElementValue(bool doElementValueInitial /** do element value */ , 
                        NXOpen::CAE::Result::ElementValueCriterion criterionInitial /** criterion */ ) :
                    DoElementValue(doElementValueInitial),
                    Criterion(criterionInitial)
                {
                }
            };

             /** Result parameter structure to specify complete result state for the color display 
                        This structure has been replaced by @link NXOpen::CAE::ResultParameters NXOpen::CAE::ResultParameters@endlink  
             <br>  @deprecated Deprecated in NX7.5.1.  This structure has been replaced by @link NXOpen::CAE::ResultParameters NXOpen::CAE::ResultParameters@endlink  <br>  
            */
            public:
            struct NX_DEPRECATED("Deprecated in NX7.5.1.  This structure has been replaced by NXOpen::CAE::ResultParameters") ResultParameters
            {
                public: /** load case number starting from 0 */int LoadCaseIndex;
                public: /** iteration number starting from 0 */int IterationIndex;
                public: /** type */ NXOpen::CAE::Result::Type Type;
                public: /** component */ NXOpen::CAE::Result::Component Component;
                public: /** res section */ NXOpen::CAE::Result::ResultSection ResSection;
                public: /** section */ int Section;
                public: /** plynumber */ int Plynumber;
                public: /** layer */ int Layer;
                public: /** averaging */ NXOpen::CAE::Result::Averaging Averaging;
                public: /** include midnode */ bool IncludeMidnode;
                public: /** coordinate system */ NXOpen::CAE::Result::CoordinateSystem CoordinateSystem;
                public: /** display beam result in local csys */ bool DisplayBeamResultInLocalCsys;
                public: /** element value */ NXOpen::CAE::Result::ElementValue ElementValue;
                public: /** complex */ NXOpen::CAE::Result::Complex Complex;
                public: /** phase angle */ double PhaseAngle;
                public: /** absolute value */ bool AbsoluteValue;
                public: /** scale value */ double ScaleValue;
                public: /** unit */ NXOpen::Unit * Unit;
                public: /** calculate beam str results */ bool CalculateBeamStrResults;
                public: /** add beam str fillets */ bool AddBeamStrFillets;
                public: /** beam fillet radius */ double BeamFilletRadius;
                public: ResultParameters() :
                    LoadCaseIndex(),
                    IterationIndex(),
                    Type(),
                    Component((NXOpen::CAE::Result::Component)0),
                    ResSection(),
                    Section(),
                    Plynumber(),
                    Layer(),
                    Averaging(),
                    IncludeMidnode(),
                    CoordinateSystem((NXOpen::CAE::Result::CoordinateSystem)0),
                    DisplayBeamResultInLocalCsys(),
                    ElementValue(),
                    Complex((NXOpen::CAE::Result::Complex)0),
                    PhaseAngle(),
                    AbsoluteValue(),
                    ScaleValue(),
                    Unit(),
                    CalculateBeamStrResults(),
                    AddBeamStrFillets(),
                    BeamFilletRadius()
                {
                }
                /** Constructor for the ResultParameters struct. */ 
                public: ResultParameters(int loadCaseIndexInitial /** load case number starting from 0 */, 
                        int iterationIndexInitial /** iteration number starting from 0 */, 
                        const NXOpen::CAE::Result::Type &typeInitial /** type */ , 
                        NXOpen::CAE::Result::Component componentInitial /** component */ , 
                        const NXOpen::CAE::Result::ResultSection &resSectionInitial /** res section */ , 
                        int sectionInitial /** section */ , 
                        int plynumberInitial /** plynumber */ , 
                        int layerInitial /** layer */ , 
                        const NXOpen::CAE::Result::Averaging &averagingInitial /** averaging */ , 
                        bool includeMidnodeInitial /** include midnode */ , 
                        NXOpen::CAE::Result::CoordinateSystem coordinateSystemInitial /** coordinate system */ , 
                        bool displayBeamResultInLocalCsysInitial /** display beam result in local csys */ , 
                        const NXOpen::CAE::Result::ElementValue &elementValueInitial /** element value */ , 
                        NXOpen::CAE::Result::Complex complexInitial /** complex */ , 
                        double phaseAngleInitial /** phase angle */ , 
                        bool absoluteValueInitial /** absolute value */ , 
                        double scaleValueInitial /** scale value */ , 
                        NXOpen::Unit * unitInitial /** unit */ , 
                        bool calculateBeamStrResultsInitial /** calculate beam str results */ , 
                        bool addBeamStrFilletsInitial /** add beam str fillets */ , 
                        double beamFilletRadiusInitial /** beam fillet radius */ ) :
                    LoadCaseIndex(loadCaseIndexInitial),
                    IterationIndex(iterationIndexInitial),
                    Type(typeInitial),
                    Component(componentInitial),
                    ResSection(resSectionInitial),
                    Section(sectionInitial),
                    Plynumber(plynumberInitial),
                    Layer(layerInitial),
                    Averaging(averagingInitial),
                    IncludeMidnode(includeMidnodeInitial),
                    CoordinateSystem(coordinateSystemInitial),
                    DisplayBeamResultInLocalCsys(displayBeamResultInLocalCsysInitial),
                    ElementValue(elementValueInitial),
                    Complex(complexInitial),
                    PhaseAngle(phaseAngleInitial),
                    AbsoluteValue(absoluteValueInitial),
                    ScaleValue(scaleValueInitial),
                    Unit(unitInitial),
                    CalculateBeamStrResults(calculateBeamStrResultsInitial),
                    AddBeamStrFillets(addBeamStrFilletsInitial),
                    BeamFilletRadius(beamFilletRadiusInitial)
                {
                }
            };

             /** Deformation parameter structure to specify complete result state for the deformed shape 
                        This structure has been replaced by @link NXOpen::CAE::DeformationParameters NXOpen::CAE::DeformationParameters@endlink 
             <br>  @deprecated Deprecated in NX7.5.1.  This structure has been replaced by @link NXOpen::CAE::DeformationParameters NXOpen::CAE::DeformationParameters@endlink  <br>  
            */
            public:
            struct NX_DEPRECATED("Deprecated in NX7.5.1.  This structure has been replaced by NXOpen::CAE::DeformationParameters") DeformationParameters
            {
                public: /** load case number starting from 0 */int LoadCaseIndex;
                public: /** iteration number starting from 0 */int IterationIndex;
                public: /** type */ NXOpen::CAE::Result::Type Type;
                public: /** complex */ NXOpen::CAE::Result::Complex Complex;
                public: /** phase angle */ double PhaseAngle;
                public: /** deformation scale */ NXOpen::CAE::Result::DeformationScale DeformationScale;
                public: /** absolute scale value */ double AbsoluteScaleValue;
                public: /** model percent scale value */ double ModelPercentScaleValue;
                public: DeformationParameters() :
                    LoadCaseIndex(),
                    IterationIndex(),
                    Type(),
                    Complex((NXOpen::CAE::Result::Complex)0),
                    PhaseAngle(),
                    DeformationScale((NXOpen::CAE::Result::DeformationScale)0),
                    AbsoluteScaleValue(),
                    ModelPercentScaleValue()
                {
                }
                /** Constructor for the DeformationParameters struct. */ 
                public: DeformationParameters(int loadCaseIndexInitial /** load case number starting from 0 */, 
                        int iterationIndexInitial /** iteration number starting from 0 */, 
                        const NXOpen::CAE::Result::Type &typeInitial /** type */ , 
                        NXOpen::CAE::Result::Complex complexInitial /** complex */ , 
                        double phaseAngleInitial /** phase angle */ , 
                        NXOpen::CAE::Result::DeformationScale deformationScaleInitial /** deformation scale */ , 
                        double absoluteScaleValueInitial /** absolute scale value */ , 
                        double modelPercentScaleValueInitial /** model percent scale value */ ) :
                    LoadCaseIndex(loadCaseIndexInitial),
                    IterationIndex(iterationIndexInitial),
                    Type(typeInitial),
                    Complex(complexInitial),
                    PhaseAngle(phaseAngleInitial),
                    DeformationScale(deformationScaleInitial),
                    AbsoluteScaleValue(absoluteScaleValueInitial),
                    ModelPercentScaleValue(modelPercentScaleValueInitial)
                {
                }
            };

             /** Velociy parameter structure to specify result state for the 
                        velocity field used in streamline extraction */
            public:
            struct VelocityParameters
            {
                public: /** load case number starting from 0 */int LoadCaseIndex;
                public: /** iteration number starting from 0 */int IterationIndex;
                public: /** type */ NXOpen::CAE::Result::Type Type;
                public: VelocityParameters() :
                    LoadCaseIndex(),
                    IterationIndex(),
                    Type()
                {
                }
                /** Constructor for the VelocityParameters struct. */ 
                public: VelocityParameters(int loadCaseIndexInitial /** load case number starting from 0 */, 
                        int iterationIndexInitial /** iteration number starting from 0 */, 
                        const NXOpen::CAE::Result::Type &typeInitial /** type */ ) :
                    LoadCaseIndex(loadCaseIndexInitial),
                    IterationIndex(iterationIndexInitial),
                    Type(typeInitial)
                {
                }
            };

             /** The basic units system for a result*/
            public:
            struct ResultBasicUnit
            {
                public: /** mass unit */ NXOpen::Unit * MassUnit;
                public: /** length unit */ NXOpen::Unit * LengthUnit;
                public: /** time unit */ NXOpen::Unit * TimeUnit;
                public: /** temperature unit */ NXOpen::Unit * TemperatureUnit;
                public: /** angle unit */ NXOpen::Unit * AngleUnit;
                public: /** thermalenergy unit */ NXOpen::Unit * ThermalenergyUnit;
                public: ResultBasicUnit() :
                    MassUnit(),
                    LengthUnit(),
                    TimeUnit(),
                    TemperatureUnit(),
                    AngleUnit(),
                    ThermalenergyUnit()
                {
                }
                /** Constructor for the ResultBasicUnit struct. */ 
                public: ResultBasicUnit(NXOpen::Unit * massUnitInitial /** mass unit */ , 
                        NXOpen::Unit * lengthUnitInitial /** length unit */ , 
                        NXOpen::Unit * timeUnitInitial /** time unit */ , 
                        NXOpen::Unit * temperatureUnitInitial /** temperature unit */ , 
                        NXOpen::Unit * angleUnitInitial /** angle unit */ , 
                        NXOpen::Unit * thermalenergyUnitInitial /** thermalenergy unit */ ) :
                    MassUnit(massUnitInitial),
                    LengthUnit(lengthUnitInitial),
                    TimeUnit(timeUnitInitial),
                    TemperatureUnit(temperatureUnitInitial),
                    AngleUnit(angleUnitInitial),
                    ThermalenergyUnit(thermalenergyUnitInitial)
                {
                }
            };

            /** The result file type */
            public: enum Filetype
            {
                FiletypeNastran/** nastran */ ,
                FiletypeIdeas/** ideas */ ,
                FiletypeBud/** bud */ ,
                FiletypeVki/** vki */ ,
                FiletypeAbaqus/** abaqus */ ,
                FiletypeAnsys/** ansys */ ,
                FiletypeMapped/** mapped */ ,
                FiletypeAfu/** afu */ ,
                FiletypeRs2/** rs2 */ ,
                FiletypeAbaqusOdb/** abaqus odb */ ,
                FiletypeLsdynaState/** lsdyna state */ ,
                FiletypePermasPost/** permas post */ ,
                FiletypeSamcefDes/** samcef des */ ,
                FiletypeNastranXdb/** nastran xdb */ ,
                FiletypeSysnoiseDb/** sysnoise db */ 
            };

            /** The result solution type */
            public: enum SolutionType
            {
                SolutionTypeUnknown/** Unknown */,
                SolutionTypeStatic/** Static */,
                SolutionTypeVibration/** Vibration */,
                SolutionTypeBuckling/** Buckling */,
                SolutionTypeTransient/** Transient */,
                SolutionTypeFreqresponse/** Frequency Response */,
                SolutionTypeComplexeigen/** Complex Eigen*/,
                SolutionTypeQuasistatic/** Quasi-Static*/
            };

            /** This enumeration defines the methods that can be used when calculating absolute values for the following derived components of @link NXOpen::CAE::Result::DataTypeTensor NXOpen::CAE::Result::DataTypeTensor@endlink  
                        @link NXOpen::CAE::Result::ComponentDeterminant NXOpen::CAE::Result::ComponentDeterminant@endlink ,   
                        @link NXOpen::CAE::Result::ComponentMean NXOpen::CAE::Result::ComponentMean@endlink ,
                        @link NXOpen::CAE::Result::ComponentMaximumShear NXOpen::CAE::Result::ComponentMaximumShear@endlink , 
                        @link NXOpen::CAE::Result::ComponentMinimumPrincipal NXOpen::CAE::Result::ComponentMinimumPrincipal@endlink ,
                        @link NXOpen::CAE::Result::ComponentMiddlePrincipal NXOpen::CAE::Result::ComponentMiddlePrincipal@endlink , 
                        @link NXOpen::CAE::Result::ComponentMaximumPrincipal NXOpen::CAE::Result::ComponentMaximumPrincipal@endlink ,
                        @link NXOpen::CAE::Result::ComponentOctahedral NXOpen::CAE::Result::ComponentOctahedral@endlink 

                        @link NXOpen::CAE::Result::TensorDerivedAbsoluteAllComponents NXOpen::CAE::Result::TensorDerivedAbsoluteAllComponents@endlink  will make all tensor primary components (XX, YY, ZZ, XY, YZ, ZX)
                        to absolute and then calculate derived component. 
                        @link NXOpen::CAE::Result::TensorDerivedAbsoluteDerivedComponent NXOpen::CAE::Result::TensorDerivedAbsoluteDerivedComponent@endlink  is absolute value of derived component without changing primary components.
                    */
            public: enum TensorDerivedAbsolute
            {
                TensorDerivedAbsoluteAllComponents/** Absolute of primary components first*/,
                TensorDerivedAbsoluteDerivedComponent/** Absolute of current derived components */
            };

            /** The initial deformation selection type which will decide how the final calculations 
                    will happen after applying the initial deformation on the main deforamtion.*/
            public: enum InitialDeformationSelection
            {
                InitialDeformationSelectionNone/** None */,
                InitialDeformationSelectionDefault/** Default selection */,
                InitialDeformationSelectionUserDefined/** Selection from the user*/
            };

            private: ResultImpl * m_result_impl;
            private: friend class  _ResultBuilder;
            protected: Result();
            public: ~Result();
            /** Number of loadcases available in the result file  @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNumLoadcases
            (
            );
            /** Number of loadcases available in the result file and their descriptions.
                        Loadcase index varies from 0 to N-1 (number of loadcases)
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: std::vector<NXString> AskLoadcases
            (
            );
            /** Number of iterations available for a given loadcase.  @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNumIterations
            (
                int loadcaseIndex /** loadcaseindex */ 
            );
            /** Number of iterations available for a given loadcase and their descriptions 
                        Iteration index varies from 0 to N-1 (number of iterations)
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: std::vector<NXString> AskIterations
            (
                int loadcaseIndex /** loadcaseindex */ 
            );
            /** Ask number of nodes in the model 
                        Node index varies from 1 to N (number of nodes)
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNumNodes
            (
            );
            /** Ask number of elements in the model 
                        Element index varies from 0 to N-1 (number of elements)
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNumElements
            (
            );
            /** Asks for the nodes given an element 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AskElementNodes
            (
                int elementIndex /** elementindex */ ,
                std::vector<int> & nodeIndex /** nodeindex */ 
            );
            /** Asks for the coordinates of a node array  @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: std::vector<NXOpen::Point3d> AskNodeCoordinates
            (
                const std::vector<int> & nodeIndex /** nodeindex */ 
            );
            /** Returns an array of result types and descriptions available for a given loadcase and iteration 
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AskResultTypes
            (
                int loadcaseIndex /** loadcaseindex */ ,
                int iterationIndex /** iterationindex */ ,
                std::vector<NXOpen::CAE::Result::Type> & types /** types */ ,
                std::vector<NXString> & description /** description */ 
            );
            /** 
                        Returns the number of groups available in the model of type @link  NXOpen::CAE::Result::GroupContainer   NXOpen::CAE::Result::GroupContainer @endlink 
                     @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNumGroupsInContainer
            (
                NXOpen::CAE::Result::GroupContainer type /** type */ 
            );
            /** Returns an array of elements indices for a given group
                        Group index range from 0 to N-1 (number of groups)
                    
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AskNumElementsOfGroup
            (
                NXOpen::CAE::Result::GroupContainer type /** type */ ,
                int groupIndex /** groupindex */ ,
                std::vector<int> & elementIndex /** elementindex */ 
            );
            /** Ask node index of a given node user label  @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNodeIndex
            (
                int nodeLabel /** nodelabel */ 
            );
            /** Ask element index of a given element user label   @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskElementIndex
            (
                int elementLabel /** elementlabel */ 
            );
            /** Ask node user label of a given node index   @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNodeLabel
            (
                int nodeIndex /** node index ranges from 1 to N (number of nodes) */
            );
            /** Ask element user label of a given element index   @return  
             <br>  Created in NX6.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskElementLabel
            (
                int elementIndex /** element index ranges from 1 to N (number of elements)*/
            );
            /** Ask element ids and corresponding number of sections at which result is defined 
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AskResultSections
            (
                int loadcaseIndex /** load case */,
                int iterationIndex /** iteration number */,
                const NXOpen::CAE::Result::Type & resultType /** result type */,
                std::vector<int> & sectionNums /** sectionnums */ 
            );
            /** Ask Section description provided section type  @return  
             <br>  Created in NX8.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXString AskSectionDescription
            (
                NXOpen::CAE::Result::Section sect /** section type */
            );
            /** Ask load case description, value type and value for the input load case  @return  
             <br>  Created in NX7.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Result::LoadcaseValueType AskResultLoadcaseValue
            (
                int loadcaseIndex /** load case */,
                NXString* description /** description */ ,
                double* value /** value */ 
            );
            /** Ask element shape given an element index   @return  Element topology
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::ElementTypes::Shape AskElementShape
            (
                int elementIndex /** Element Index */
            );
            /** Ask result datatype  @return   
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: NXOpen::CAE::Result::DataType AskResultDataType
            (
                int loadcaseIndex /** loadcaseindex */ ,
                int iterationIndex /** iterationindex */ ,
                const NXOpen::CAE::Result::Type & resultType /** resulttype */ 
            );
            /** Ask whether a result type is complex or not  @return   
             <br>  Created in NX6.0.3.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: bool IsResultTypeComplex
            (
                int loadcaseIndex /** loadcaseindex */ ,
                int iterationIndex /** iterationindex */ ,
                const NXOpen::CAE::Result::Type & resultType /** resulttype */ 
            );
            /** Ask the loadcases present in this result  @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: std::vector<NXOpen::CAE::BaseLoadcase *> GetLoadcases
            (
            );
            /** Returns a @link NXOpen::CAE::BaseLoadcase NXOpen::CAE::BaseLoadcase@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::TaggedObject * Find
            (
                const NXString & journalIdentifier /** Journal identifier of the object */
            );
            /** Returns a @link NXOpen::CAE::BaseLoadcase NXOpen::CAE::BaseLoadcase@endlink   @return  
             <br>  Created in NX7.5.0.  <br>  
             <br> License requirements : None */
            NXOpen::TaggedObject * Find
            (
                const char * journalIdentifier /** Journal identifier of the object */
            );
            /** Returns coordinate system IDs defined in the result  @return  
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: std::vector<int> GetResultCoordinateSystems
            (
            );
            /** Returns definitions of a result coordinate system 
             <br>  Created in NX8.0.1.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void GetResultCoordinateSystemDefinition
            (
                int id /** id */ ,
                NXOpen::CAE::Result::CoordinateSystem* type /** returns any of @link NXOpen::CAE::Result::CoordinateSystemSelectRectangular NXOpen::CAE::Result::CoordinateSystemSelectRectangular@endlink ,
                                                                         @link NXOpen::CAE::Result::CoordinateSystemSelectCylindrical NXOpen::CAE::Result::CoordinateSystemSelectCylindrical@endlink , @link NXOpen::CAE::Result::CoordinateSystemSelectSpherical NXOpen::CAE::Result::CoordinateSystemSelectSpherical@endlink  */,
                NXOpen::Point3d* origin /** origin */ ,
                NXOpen::Matrix3x3* matrix /** matrix */ 
            );
            /** Returns number of sectors for cyclic symmetric solution @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNumberOfSectors
            (
            );
            /** Returns number of faces on given element index  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNumFacesOnElement
            (
                int elementIndex /** element index ranges from 1 to N (where N is number of elements) @link NXOpen::CAE::Result::AskNumElements NXOpen::CAE::Result::AskNumElements@endlink  */
            );
            /** Returns number of edges on given element index  @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: int AskNumEdgesOnElement
            (
                int elementIndex /** element index ranges from 1 to N (where N is number of elements) @link NXOpen::CAE::Result::AskNumElements NXOpen::CAE::Result::AskNumElements@endlink  */
            );
            /** Returns number of nodes and node Indices on given element index and face index. Face index will vary from 0 to n-1 where, n is the number of faces on element. 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AskNodeIndicesOnElementFace
            (
                int elementIndex /** element index ranges from 1 to N (where N is number of elements) @link NXOpen::CAE::Result::AskNumElements NXOpen::CAE::Result::AskNumElements@endlink  */,
                int faceIndex /** face index ranges from 0 to N-1 (where N is number of faces) @link NXOpen::CAE::Result::AskNumFacesOnElement NXOpen::CAE::Result::AskNumFacesOnElement@endlink  */,
                std::vector<int> & nodeIndices /** nodeindices */ 
            );
            /** Returns number of nodes and node Indices on given element index and edge index. Edge index will vary from 0 to n-1 where, n is the number of edges on element.
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void AskNodeIndicesOnElementEdge
            (
                int elementIndex /** element index ranges from 1 to N (where N is number of elements) @link NXOpen::CAE::Result::AskNumElements NXOpen::CAE::Result::AskNumElements@endlink  */,
                int edgeIndex /** edge index ranges from 0 to N-1 (where N is number of edges) @link NXOpen::CAE::Result::AskNumEdgesOnElement NXOpen::CAE::Result::AskNumEdgesOnElement@endlink  */,
                std::vector<int> & nodeIndices /** nodeindices */ 
            );
            /** Returns number of meshgoups and array of their objects in the loaded result.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void GetMeshes
            (
                std::vector<NXOpen::CAE::PostMesh *> & meshes /** meshes */ 
            );
            /** Returns number of meshgoups and array of their objects of the given dimension in the loaded result.
             <br>  Created in NX11.0.2.  <br>  
             <br> License requirements : nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation") OR sc_results_viewer (" Simcenter Results Viewer") */
            public: void GetMeshesOfGivenDimension
            (
                int dimension /**The dimension of which mesh group names are queried */,
                std::vector<NXOpen::CAE::PostMesh *> & meshes /** meshes */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
