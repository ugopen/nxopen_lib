#ifndef NXOpen_FEATURES_FLATTENINGANDFORMINGBUILDEREX_HXX_INCLUDED
#define NXOpen_FEATURES_FLATTENINGANDFORMINGBUILDEREX_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     Features_FlatteningAndFormingBuilderEx.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Features_FeatureBuilder.hxx>
#include <NXOpen/ObjectList.hxx>
#include <NXOpen/ScCollector.hxx>
#include <NXOpen/Section.hxx>
#include <NXOpen/SelectObject.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libnxopencpp_features_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace Features
    {
        class FlatteningAndFormingBuilderEx;
    }
    class CoordinateSystem;
    class Direction;
    namespace Features
    {
        class FeatureBuilder;
    }
    class NXObjectList;
    class Point;
    class ScCollector;
    class Section;
    class SelectNXObject;
    class SelectNXObjectList;
    namespace Features
    {
        class _FlatteningAndFormingBuilderExBuilder;
        class FlatteningAndFormingBuilderExImpl;
        /**
             This class will provide the solution to unwrap 3D non-planar, curved geometry to a 2D plane. The transformation mapping of unwrapping non-planar faces to a plane can be used bi-directional.
             Unwrapping geometry and wrapping geometry from a plane to the 3D shape.
             <br> To create a new instance of this class, use @link NXOpen::Features::FreeformSurfaceCollection::CreateFlatteningAndFormingBuilderEx  NXOpen::Features::FreeformSurfaceCollection::CreateFlatteningAndFormingBuilderEx @endlink  <br> 
        Default values.
        <table border="1"> 
         
        <tr><th> 
        Property</th>  <th> 
        Value</th> </tr>
        <tr><td> 
         
        ConstraintOptions </td> <td> 
         
        NoConstraints </td> </tr> 

        <tr><td> 
         
        DistortionMapOptions </td> <td> 
         
        None </td> </tr> 

        <tr><td> 
         
        ReverseTransformation </td> <td> 
         
        0 </td> </tr> 

        </table>  

         <br>  Created in NX12.0.0.  <br>  
        */
        class NXOPENCPP_FEATURESEXPORT  FlatteningAndFormingBuilderEx : public NXOpen::Features::FeatureBuilder
        {
            /** Flattening Types */
            public: enum Types
            {
                TypesCalculation/** This option faces to be flattened will be used to calculate the mapping. The mapping can also be applied to additional transformation objects. */,
                TypesReuse/** This option uses a transformation maping of an existing flattening feature to reapply it in its original or reversed direction to additional transformation objects. */
            };

            /** Distortion Map options. The options provides ability to display a distortion map on the source faces.*/
            public: enum DistortionMap
            {
                DistortionMapNone/** No distortion map*/,
                DistortionMapLength/** Distortion of length */,
                DistortionMapArea/** Distortion of area */,
                DistortionMapAngle/** Shear distortion of U/V directions */
            };

            /** No constraints options. The options provides ability to add consrtaints to control the distortion of the flattening result */
            public: enum Constraints
            {
                ConstraintsNoConstraints/** no constraints */ ,
                ConstraintsFixedElements/** fixed elements */ 
            };

            private: FlatteningAndFormingBuilderExImpl * m_flatteningandformingbuilderex_impl;
            private: friend class  _FlatteningAndFormingBuilderExBuilder;
            protected: FlatteningAndFormingBuilderEx();
            public: ~FlatteningAndFormingBuilderEx();
            /**Returns  the type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FlatteningAndFormingBuilderEx::Types Type
            (
            );
            /**Sets  the type 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetType
            (
                NXOpen::Features::FlatteningAndFormingBuilderEx::Types type /** type */ 
            );
            /**Returns  the source faces that will be used to calculate the mapping of being flattened 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * SourceFaces
            (
            );
            /**Returns  the auxiliary faces that will be used to calculate the mapping of being flattened separatly and then connected to the flattened source faces
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::ScCollector * AuxiliaryFaces
            (
            );
            /**Returns  the outer boundary of the source face that could have the longest length
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * OuterBoundary
            (
            );
            /**Returns  the source origin is a point on one of the source face. It is required to establish the flattening plane
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Point * SourceOrigin
            (
            );
            /**Sets  the source origin is a point on one of the source face. It is required to establish the flattening plane
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSourceOrigin
            (
                NXOpen::Point * sourceOrigin /** sourceorigin */ 
            );
            /**Returns  the source direction determines the orientation of the flattened surface.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SourceDirection
            (
            );
            /**Sets  the source direction determines the orientation of the flattened surface.
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSourceDirection
            (
                NXOpen::Direction * sourceDirection /** sourcedirection */ 
            );
            /**Returns  the cut curves on or close to the source face can be used to tear the source face along these curvesto reduce the distortion during flattening
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Section * CutCurves
            (
            );
            /**Returns  the flattening feature whose unwrapping mapping can be used to replay the unwrap or wrap on other objects
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObject * FlatteningFeature
            (
            );
            /**Returns  the flag indicating if the reverse transformation will be used in the opposite direction
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: bool ReverseTransformation
            (
            );
            /**Sets  the flag indicating if the reverse transformation will be used in the opposite direction
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetReverseTransformation
            (
                bool reverseTransformation /** reversetransformation */ 
            );
            /**Returns  the option to minimize the disturbance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FlatteningAndFormingBuilderEx::Constraints ConstraintOptions
            (
            );
            /**Sets  the option to minimize the disturbance 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetConstraintOptions
            (
                NXOpen::Features::FlatteningAndFormingBuilderEx::Constraints constraintOptions /** constraintoptions */ 
            );
            /**Returns  the list of points, curves or edges or faces of the source faces that act as fixed items 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::NXObjectList * FixedElementsList
            (
            );
            /**Returns  the transformation objects are additional objects that can be flattened with the same mapping. Transformation objects are required objects for Forming and Reuse .
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::SelectNXObjectList * TransformationObjects
            (
            );
            /**Returns  the option to display the distortion map on the source faces. Distortion caused by flattening will be marked up as color map
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Features::FlatteningAndFormingBuilderEx::DistortionMap DistortionMapOptions
            (
            );
            /**Sets  the option to display the distortion map on the source faces. Distortion caused by flattening will be marked up as color map
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetDistortionMapOptions
            (
                NXOpen::Features::FlatteningAndFormingBuilderEx::DistortionMap distortionMapOptions /** distortionmapoptions */ 
            );

            /// \cond NX_NO_DOC 
            /**Returns  the flag that indicates if internal tabbed faces can be shown or not. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: bool TabDetection
            (
            );

            /// \endcond 

            /// \cond NX_NO_DOC 
            /**Sets  the flag that indicates if internal tabbed faces can be shown or not. 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetTabDetection
            (
                bool tabDetection /** tabdetection */ 
            );

            /// \endcond 
            /**Returns  the coordinate system 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::CoordinateSystem * DestinationCoordinateSystem
            (
            );
            /**Sets  the coordinate system 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetDestinationCoordinateSystem
            (
                NXOpen::CoordinateSystem * coordSystem /** coordsystem */ 
            );
            /**Returns  the secondary direction is the cross product of primary direction and source face normal
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : None */
            public: NXOpen::Direction * SourceVDirection
            (
            );
            /**Sets  the secondary direction is the cross product of primary direction and source face normal
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : studio_free_form ("STUDIO FREE FORM") */
            public: void SetSourceVDirection
            (
                NXOpen::Direction * sourceVDirection /** sourcevdirection */ 
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
