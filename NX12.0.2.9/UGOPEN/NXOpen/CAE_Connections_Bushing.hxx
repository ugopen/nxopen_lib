#ifndef NXOpen_CAE_CONNECTIONS_BUSHING_HXX_INCLUDED
#define NXOpen_CAE_CONNECTIONS_BUSHING_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAE_Connections_Bushing.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAE_Connections_NodalTarget.hxx>
#include <NXOpen/CAE_Connections_Types.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/Fields_ScalarFieldWrapper.hxx>
#include <NXOpen/CAE_Connections_IConnection.hxx>
#include <NXOpen/CAE_Connections_ICsys.hxx>
#include <NXOpen/CAE_Connections_INodalTargetsContainer.hxx>
#include <NXOpen/CAE_Connections_INodalTargetsPairing.hxx>
#include <NXOpen/CAE_Connections_IStiffness.hxx>
#include <NXOpen/CAE_Connections_IStiffnessDynamic.hxx>
#include <NXOpen/CAE_Connections_IStructuralDamping.hxx>
#include <NXOpen/CAE_Connections_IStructuralDampingDynamic.hxx>
#include <NXOpen/CAE_Connections_IViscousDamping.hxx>
#include <NXOpen/CAE_Connections_IViscousDampingDynamic.hxx>
#include <NXOpen/INXObject.hxx>
#include <NXOpen/libnxopencpp_cae_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAE
    {
        namespace Connections
        {
            class Bushing;
        }
    }
    namespace Assemblies
    {
        class Component;
    }
    class BasePart;
    namespace CAE
    {
        namespace Connections
        {
            class IConnection;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class ICsys;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class INodalTargetsContainer;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class INodalTargetsPairing;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IStiffness;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IStiffnessDynamic;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IStructuralDamping;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IStructuralDampingDynamic;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IViscousDamping;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class IViscousDampingDynamic;
        }
    }
    namespace CAE
    {
        namespace Connections
        {
            class NodalTarget;
        }
    }
    class CoordinateSystem;
    class Direction;
    class Expression;
    namespace Fields
    {
        class ScalarFieldWrapper;
    }
    class INXObject;
    namespace CAE
    {
        namespace Connections
        {
            class _BushingBuilder;
            class BushingImpl;
            /** Bushing connection. Use this interface to set/get properties and parameters of the Bushing connection.  
             <br>  Created in NX12.0.0.  <br>  
            */
            class NXOPENCPP_CAEEXPORT  Bushing : public NXOpen::CAE::Connections::IConnection, public virtual NXOpen::CAE::Connections::ICsys, public virtual NXOpen::CAE::Connections::IStiffness, public virtual NXOpen::CAE::Connections::IStructuralDamping, public virtual NXOpen::CAE::Connections::IViscousDamping, public virtual NXOpen::CAE::Connections::IStiffnessDynamic, public virtual NXOpen::CAE::Connections::IViscousDampingDynamic, public virtual NXOpen::CAE::Connections::IStructuralDampingDynamic, public virtual NXOpen::CAE::Connections::INodalTargetsContainer, public virtual NXOpen::CAE::Connections::INodalTargetsPairing
            {
                private: BushingImpl * m_bushing_impl;
                private: friend class  _BushingBuilder;
                protected: Bushing();
                public: ~Bushing();
                /**Returns  the csys type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::CsysType CsysType
                (
                );
                /**Sets  the csys type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCsysType
                (
                    NXOpen::CAE::Connections::CsysType csysType /** csystype */ 
                );
                /**Returns  the csys 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CoordinateSystem * Csys
                (
                );
                /**Sets  the csys 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetCsys
                (
                    NXOpen::CoordinateSystem * csys /** csys */ 
                );
                /** Gets supported csys types of connection.  @return  Supported CSys Types 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual std::vector<NXOpen::CAE::Connections::CsysType> GetSupportedCsysTypes
                (
                );
                /**Returns  the X stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * XStiffnessConstant
                (
                );
                /**Returns  the Y stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * YStiffnessConstant
                (
                );
                /**Returns  the Z stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ZStiffnessConstant
                (
                );
                /**Returns  the RX stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RxStiffnessConstant
                (
                );
                /**Returns  the RY stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RyStiffnessConstant
                (
                );
                /**Returns  the RZ stiffness constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RzStiffnessConstant
                (
                );
                /**Returns  the X structural damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * XStructuralDampingConstant
                (
                );
                /**Returns  the Y structural damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * YStructuralDampingConstant
                (
                );
                /**Returns  the Z structural damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ZStructuralDampingConstant
                (
                );
                /**Returns  the RX structural damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RxStructuralDampingConstant
                (
                );
                /**Returns  the RY structural damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RyStructuralDampingConstant
                (
                );
                /**Returns  the RZ structural damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RzStructuralDampingConstant
                (
                );
                /**Returns  the X viscous damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * XViscousDampingConstant
                (
                );
                /**Returns  the Y viscous damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * YViscousDampingConstant
                (
                );
                /**Returns  the Z viscous damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * ZViscousDampingConstant
                (
                );
                /**Returns  the RX viscous damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RxViscousDampingConstant
                (
                );
                /**Returns  the RY viscous damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RyViscousDampingConstant
                (
                );
                /**Returns  the RZ viscous damping constant 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * RzViscousDampingConstant
                (
                );
                /**Returns  the X stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * XStiffnessDynamic
                (
                );
                /**Sets  the X stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetXStiffnessDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the Y stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * YStiffnessDynamic
                (
                );
                /**Sets  the Y stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetYStiffnessDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the Z stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * ZStiffnessDynamic
                (
                );
                /**Sets  the Z stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetZStiffnessDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RX stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RxStiffnessDynamic
                (
                );
                /**Sets  the RX stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRxStiffnessDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RY stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RyStiffnessDynamic
                (
                );
                /**Sets  the RY stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRyStiffnessDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RZ stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RzStiffnessDynamic
                (
                );
                /**Sets  the RZ stiffness dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRzStiffnessDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the X viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * XViscousDampingDynamic
                (
                );
                /**Sets  the X viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetXViscousDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the Y viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * YViscousDampingDynamic
                (
                );
                /**Sets  the Y viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetYViscousDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the Z viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * ZViscousDampingDynamic
                (
                );
                /**Sets  the Z viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetZViscousDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RX viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RxViscousDampingDynamic
                (
                );
                /**Sets  the RX viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRxViscousDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RY viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RyViscousDampingDynamic
                (
                );
                /**Sets  the RY viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRyViscousDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RZ viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RzViscousDampingDynamic
                (
                );
                /**Sets  the RZ viscous damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRzViscousDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the X structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * XStructuralDampingDynamic
                (
                );
                /**Sets  the X structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetXStructuralDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the Y structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * YStructuralDampingDynamic
                (
                );
                /**Sets  the Y structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetYStructuralDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the Z structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * ZStructuralDampingDynamic
                (
                );
                /**Sets  the Z structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetZStructuralDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RX structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RxStructuralDampingDynamic
                (
                );
                /**Sets  the RX structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRxStructuralDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RY structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RyStructuralDampingDynamic
                (
                );
                /**Sets  the RY structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRyStructuralDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /**Returns  the RZ structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Fields::ScalarFieldWrapper * RzStructuralDampingDynamic
                (
                );
                /**Sets  the RZ structural damping dynamic 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetRzStructuralDampingDynamic
                (
                    NXOpen::Fields::ScalarFieldWrapper * bridge /** bridge */ 
                );
                /** Set the target type 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetTargetType
                (
                    int index /** index */ ,
                    NXOpen::CAE::Connections::NodalTargetType type /** type */ 
                );
                /** Get target  @return  
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::NodalTarget * GetTarget
                (
                    int index /** index */ 
                );
                /**Returns  the pairing method of targets 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::CAE::Connections::NodalPairingMethod PairingMethod
                (
                );
                /**Sets  the pairing method of targets 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetPairingMethod
                (
                    NXOpen::CAE::Connections::NodalPairingMethod method /** method */ 
                );
                /**Returns  the pairing search orientation 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Direction * SearchOrientation
                (
                );
                /**Sets  the pairing search orientation 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : nx_masterfem ("Finite Element Modeling") */
                public: virtual void SetSearchOrientation
                (
                    NXOpen::Direction * orientation /** orientation */ 
                );
                /**Returns  the search cone angle 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * SearchConeAngle
                (
                );
                /**Returns  the search range 
                 <br>  Created in NX12.0.0.  <br>  
                 <br> License requirements : None */
                public: virtual NXOpen::Expression * SearchRange
                (
                );
            };
        }
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
