#ifndef NXOpen_AME_BULKCONNECTIONBUILDER_HXX_INCLUDED
#define NXOpen_AME_BULKCONNECTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     AME_BulkConnectionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/SelectObjectList.hxx>
#include <NXOpen/libameopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace AME
    {
        class BulkConnectionBuilder;
    }
    namespace AME
    {
        class IPort;
    }
    class Builder;
    class NXObject;
    class SelectNXObjectList;
    namespace AME
    {
        class _BulkConnectionBuilderBuilder;
        class BulkConnectionBuilderImpl;
        /** builder for the bulk connection dialog <br> To create a new instance of this class, use @link NXOpen::AME::AMEManager::CreateBulkConnectionBuilder  NXOpen::AME::AMEManager::CreateBulkConnectionBuilder @endlink  <br> 
         <br>  Created in NX11.0.0.  <br>  
        */
        class AMEOPENCPPEXPORT  BulkConnectionBuilder : public NXOpen::Builder
        {
            private: BulkConnectionBuilderImpl * m_bulkconnectionbuilder_impl;
            private: friend class  _BulkConnectionBuilderBuilder;
            protected: BulkConnectionBuilder();
            public: ~BulkConnectionBuilder();
            /** Make the Connection between the source and target ports 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ConnectOneToOne
            (
                const std::vector<NXOpen::NXObject *> & sourcePorts /** The ports tag array*/,
                const std::vector<NXOpen::NXObject *> & targetPorts /** The ports tag array*/,
                bool overrideExistingConnection /** overrideexistingconnection */ 
            );
            /** Disconnect the Connections 
             <br>  Created in NX12.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void Disconnect
            (
                const std::vector<NXOpen::AME::IPort *> & sourcePorts /** The source ports of connections, to be disconnect*/,
                const std::vector<NXOpen::AME::IPort *> & targetPorts /** The target ports of connections, to be disconnect*/
            );
            /** Make the Connection between 1 port of N cardinality and Many ports of 1 cardinality 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: void ConnectOneVsMany
            (
                const std::vector<NXOpen::NXObject *> & sourcePorts /** The ports tag array*/,
                const std::vector<NXOpen::NXObject *> & targetPorts /** The ports tag array*/,
                bool overrideExistingConnection /** overrideexistingconnection */ 
            );
            /**Returns  the source object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObjectList * SourceObject
            (
            );
            /**Returns  the target object 
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : ad_automation_design ("FULL AUTOMATION DESIGNER") */
            public: NXOpen::SelectNXObjectList * TargetObject
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
